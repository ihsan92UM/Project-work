
PWM_In_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd24  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000576  0800df60  0800df60  0000ef60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e4d8  0800e4d8  0000f4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e4e0  0800e4e0  0000f4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e4e4  0800e4e4  0000f4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  20000000  0800e4e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000364  200001d8  0800e6c0  000101d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000053c  0800e6c0  0001053c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017f85  00000000  00000000  0001020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002bde  00000000  00000000  00028193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001530  00000000  00000000  0002ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001090  00000000  00000000  0002c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f5ec  00000000  00000000  0002d338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a6fb  00000000  00000000  0005c924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012bc79  00000000  00000000  0007701f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a2c98  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007084  00000000  00000000  001a2cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001a9d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d8 	.word	0x200001d8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800df44 	.word	0x0800df44

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001dc 	.word	0x200001dc
 8000274:	0800df44 	.word	0x0800df44

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b4 	b.w	8001010 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	460c      	mov	r4, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14d      	bne.n	8000dd4 <__udivmoddi4+0xa8>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4696      	mov	lr, r2
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	d960      	bls.n	8000e08 <__udivmoddi4+0xdc>
 8000d46:	b14b      	cbz	r3, 8000d5c <__udivmoddi4+0x30>
 8000d48:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d56:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5a:	4317      	orrs	r7, r2
 8000d5c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d60:	fa1f f48e 	uxth.w	r4, lr
 8000d64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d68:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d6c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d70:	fb01 f004 	mul.w	r0, r1, r4
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x62>
 8000d7c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x60>
 8000d86:	4290      	cmp	r0, r2
 8000d88:	f200 812d 	bhi.w	8000fe6 <__udivmoddi4+0x2ba>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	fa1f fc8c 	uxth.w	ip, ip
 8000d94:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d98:	fb06 2210 	mls	r2, r6, r0, r2
 8000d9c:	fb00 f404 	mul.w	r4, r0, r4
 8000da0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da4:	4564      	cmp	r4, ip
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	4564      	cmp	r4, ip
 8000db4:	f200 811a 	bhi.w	8000fec <__udivmoddi4+0x2c0>
 8000db8:	4610      	mov	r0, r2
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	ebac 0c04 	sub.w	ip, ip, r4
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b125      	cbz	r5, 8000dd0 <__udivmoddi4+0xa4>
 8000dc6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d905      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd8:	b10d      	cbz	r5, 8000dde <__udivmoddi4+0xb2>
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4608      	mov	r0, r1
 8000de2:	e7f5      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d14d      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4290      	cmp	r0, r2
 8000df4:	f080 80ef 	bcs.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0e6      	beq.n	8000dd0 <__udivmoddi4+0xa4>
 8000e02:	e9c5 6300 	strd	r6, r3, [r5]
 8000e06:	e7e3      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80a2 	bne.w	8000f52 <__udivmoddi4+0x226>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa1f f68e 	uxth.w	r6, lr
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2a:	fb06 f004 	mul.w	r0, r6, r4
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80c8 	beq.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e50:	4644      	mov	r4, r8
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	fa1f fc8c 	uxth.w	ip, ip
 8000e58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e60:	fb00 f606 	mul.w	r6, r0, r6
 8000e64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e68:	4566      	cmp	r6, ip
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x150>
 8000e76:	4566      	cmp	r6, ip
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2c6>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e92:	fa22 f706 	lsr.w	r7, r2, r6
 8000e96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e9a:	40f4      	lsrs	r4, r6
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ea4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ea8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb8:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ec4:	45a1      	cmp	r9, r4
 8000ec6:	d90e      	bls.n	8000ee6 <__udivmoddi4+0x1ba>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ece:	bf2c      	ite	cs
 8000ed0:	f04f 0b01 	movcs.w	fp, #1
 8000ed4:	f04f 0b00 	movcc.w	fp, #0
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d903      	bls.n	8000ee4 <__udivmoddi4+0x1b8>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	f000 8093 	beq.w	800100a <__udivmoddi4+0x2de>
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	eba4 0409 	sub.w	r4, r4, r9
 8000eea:	fa1f f983 	uxth.w	r9, r3
 8000eee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ef2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ef6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d906      	bls.n	8000f10 <__udivmoddi4+0x1e4>
 8000f02:	193c      	adds	r4, r7, r4
 8000f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x1e2>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d87a      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	eba4 040c 	sub.w	r4, r4, ip
 8000f18:	fba0 9802 	umull	r9, r8, r0, r2
 8000f1c:	4544      	cmp	r4, r8
 8000f1e:	46cc      	mov	ip, r9
 8000f20:	4643      	mov	r3, r8
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0x1fe>
 8000f24:	d106      	bne.n	8000f34 <__udivmoddi4+0x208>
 8000f26:	45ce      	cmp	lr, r9
 8000f28:	d204      	bcs.n	8000f34 <__udivmoddi4+0x208>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f30:	eb68 0307 	sbc.w	r3, r8, r7
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x222>
 8000f36:	ebbe 020c 	subs.w	r2, lr, ip
 8000f3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f42:	fa22 f301 	lsr.w	r3, r2, r1
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	431e      	orrs	r6, r3
 8000f4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e73e      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000f52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f56:	f1c3 0120 	rsb	r1, r3, #32
 8000f5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f68:	fa20 f101 	lsr.w	r1, r0, r1
 8000f6c:	fa1f f68e 	uxth.w	r6, lr
 8000f70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f74:	430a      	orrs	r2, r1
 8000f76:	fb07 4410 	mls	r4, r7, r0, r4
 8000f7a:	0c11      	lsrs	r1, r2, #16
 8000f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f80:	fb00 f406 	mul.w	r4, r0, r6
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d90e      	bls.n	8000fa6 <__udivmoddi4+0x27a>
 8000f88:	eb1e 0101 	adds.w	r1, lr, r1
 8000f8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f90:	bf2c      	ite	cs
 8000f92:	f04f 0901 	movcs.w	r9, #1
 8000f96:	f04f 0900 	movcc.w	r9, #0
 8000f9a:	428c      	cmp	r4, r1
 8000f9c:	d902      	bls.n	8000fa4 <__udivmoddi4+0x278>
 8000f9e:	f1b9 0f00 	cmp.w	r9, #0
 8000fa2:	d02c      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	1b09      	subs	r1, r1, r4
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x2a2>
 8000fbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000fc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fc6:	d201      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d815      	bhi.n	8000ff8 <__udivmoddi4+0x2cc>
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fd4:	e721      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fd6:	1a86      	subs	r6, r0, r2
 8000fd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e70e      	b.n	8000dfe <__udivmoddi4+0xd2>
 8000fe0:	3c02      	subs	r4, #2
 8000fe2:	4472      	add	r2, lr
 8000fe4:	e735      	b.n	8000e52 <__udivmoddi4+0x126>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4472      	add	r2, lr
 8000fea:	e6d0      	b.n	8000d8e <__udivmoddi4+0x62>
 8000fec:	44f4      	add	ip, lr
 8000fee:	3802      	subs	r0, #2
 8000ff0:	e6e3      	b.n	8000dba <__udivmoddi4+0x8e>
 8000ff2:	44f4      	add	ip, lr
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x152>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e7e7      	b.n	8000fce <__udivmoddi4+0x2a2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4471      	add	r1, lr
 8001002:	e7d0      	b.n	8000fa6 <__udivmoddi4+0x27a>
 8001004:	3b02      	subs	r3, #2
 8001006:	443c      	add	r4, r7
 8001008:	e782      	b.n	8000f10 <__udivmoddi4+0x1e4>
 800100a:	3802      	subs	r0, #2
 800100c:	443c      	add	r4, r7
 800100e:	e76a      	b.n	8000ee6 <__udivmoddi4+0x1ba>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	0000      	movs	r0, r0
	...

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f000 fe33 	bl	8001c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001022:	f000 f8eb 	bl	80011fc <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f88f 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 fa63 	bl	80014f4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800102e:	f000 f8f1 	bl	8001214 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8001032:	f000 f90f 	bl	8001254 <MX_ICACHE_Init>
  MX_TIM1_Init();
 8001036:	f000 f921 	bl	800127c <MX_TIM1_Init>
  MX_TIM2_Init();
 800103a:	f000 f9cf 	bl	80013dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  #define TIMER_CLK_HZ 160000000
  uint16_t pwm[8] = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  TIM1->CCR1 = 5;
 800104a:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <main+0x118>)
 800104c:	2205      	movs	r2, #5
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_TIM_Base_Start(&htim1) != HAL_OK){
 8001050:	4838      	ldr	r0, [pc, #224]	@ (8001134 <main+0x11c>)
 8001052:	f005 fd8b 	bl	8006b6c <HAL_TIM_Base_Start>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <main+0x48>

	  Error_Handler();
 800105c:	f000 faa0 	bl	80015a0 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK){
 8001060:	2100      	movs	r1, #0
 8001062:	4834      	ldr	r0, [pc, #208]	@ (8001134 <main+0x11c>)
 8001064:	f005 fe7c 	bl	8006d60 <HAL_TIM_PWM_Start>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <main+0x5a>

	  Error_Handler();
 800106e:	f000 fa97 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 8001072:	4831      	ldr	r0, [pc, #196]	@ (8001138 <main+0x120>)
 8001074:	f005 fd7a 	bl	8006b6c <HAL_TIM_Base_Start>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <main+0x6a>

	  Error_Handler();
 800107e:	f000 fa8f 	bl	80015a0 <Error_Handler>
  }

  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,(uint32_t*)&pwm, 8);
 8001082:	463a      	mov	r2, r7
 8001084:	2308      	movs	r3, #8
 8001086:	2100      	movs	r1, #0
 8001088:	482b      	ldr	r0, [pc, #172]	@ (8001138 <main+0x120>)
 800108a:	f006 f81d 	bl	80070c8 <HAL_TIM_IC_Start_DMA>

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <main+0x124>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001094:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <main+0x124>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <main+0x124>)
 800109e:	2200      	movs	r2, #0
 80010a0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <main+0x124>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <main+0x124>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80010ae:	4923      	ldr	r1, [pc, #140]	@ (800113c <main+0x124>)
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 fd11 	bl	8001ad8 <BSP_COM_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <main+0xa8>
  {
    Error_Handler();
 80010bc:	f000 fa70 	bl	80015a0 <Error_Handler>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //double k = 2.3039215E-6;
	  HAL_Delay(250);
 80010c0:	20fa      	movs	r0, #250	@ 0xfa
 80010c2:	f000 fea7 	bl	8001e14 <HAL_Delay>

	  if (pwm[0] == 0){
 80010c6:	883b      	ldrh	r3, [r7, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <main+0xbc>
		  printf("Frequency = 0.00 Hz , Count = 0 , Capacitance = 0pF\n\r");
 80010cc:	481c      	ldr	r0, [pc, #112]	@ (8001140 <main+0x128>)
 80010ce:	f009 facd 	bl	800a66c <iprintf>
 80010d2:	e022      	b.n	800111a <main+0x102>
	  }
	  else{
		  float period_seconds = pwm[0] * (1.0 / TIMER_CLK_HZ); // Period in seconds
 80010d4:	883b      	ldrh	r3, [r7, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa28 	bl	800052c <__aeabi_i2d>
 80010dc:	a312      	add	r3, pc, #72	@ (adr r3, 8001128 <main+0x110>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fa8d 	bl	8000600 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd7f 	bl	8000bf0 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	617b      	str	r3, [r7, #20]
		  float frequency = (1.0 / period_seconds);
 80010f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80010fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001102:	edc7 7a04 	vstr	s15, [r7, #16]
		  printf("Frequency = %f , Count = %d \n\r", frequency, pwm[0]);
 8001106:	6938      	ldr	r0, [r7, #16]
 8001108:	f7ff fa22 	bl	8000550 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	8839      	ldrh	r1, [r7, #0]
 8001112:	9100      	str	r1, [sp, #0]
 8001114:	480b      	ldr	r0, [pc, #44]	@ (8001144 <main+0x12c>)
 8001116:	f009 faa9 	bl	800a66c <iprintf>
		  //double t = 1 / frequency;
		  //double cx = (k * t - 47E-12) * 1e12;
		  //printf("Capacitance = %.2f pF\n", cx);

	  }
	  memset(pwm, 0, sizeof(pwm));
 800111a:	463b      	mov	r3, r7
 800111c:	2210      	movs	r2, #16
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f009 fb18 	bl	800a756 <memset>
	  HAL_Delay(250);
 8001126:	e7cb      	b.n	80010c0 <main+0xa8>
 8001128:	9abcaf48 	.word	0x9abcaf48
 800112c:	3e3ad7f2 	.word	0x3e3ad7f2
 8001130:	40012c00 	.word	0x40012c00
 8001134:	20000204 	.word	0x20000204
 8001138:	20000250 	.word	0x20000250
 800113c:	200001f4 	.word	0x200001f4
 8001140:	0800df60 	.word	0x0800df60
 8001144:	0800df98 	.word	0x0800df98

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09e      	sub	sp, #120	@ 0x78
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2260      	movs	r2, #96	@ 0x60
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fafd 	bl	800a756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800116c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001170:	f002 fbcc 	bl	800390c <HAL_PWREx_ControlVoltageScaling>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800117a:	f000 fa11 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001182:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2302      	movs	r3, #2
 8001192:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800119c:	230a      	movs	r3, #10
 800119e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80011ac:	230c      	movs	r3, #12
 80011ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fc83 	bl	8003ac4 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011c4:	f000 f9ec 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	231f      	movs	r3, #31
 80011ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2303      	movs	r3, #3
 80011ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2104      	movs	r1, #4
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 fb49 	bl	800487c <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011f0:	f000 f9d6 	bl	80015a0 <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3778      	adds	r7, #120	@ 0x78
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001200:	2002      	movs	r0, #2
 8001202:	f002 fc0f 	bl	8003a24 <HAL_PWREx_ConfigSupply>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemPower_Config+0x14>
  {
    Error_Handler();
 800120c:	f000 f9c8 	bl	80015a0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <MX_GPDMA1_Init+0x3c>)
 800121c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <MX_GPDMA1_Init+0x3c>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_GPDMA1_Init+0x3c>)
 800122c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	201d      	movs	r0, #29
 800123e:	f000 fec5 	bl	8001fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001242:	201d      	movs	r0, #29
 8001244:	f000 fedc 	bl	8002000 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	46020c00 	.word	0x46020c00

08001254 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001258:	2000      	movs	r0, #0
 800125a:	f002 fb27 	bl	80038ac <HAL_ICACHE_ConfigAssociativityMode>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001264:	f000 f99c 	bl	80015a0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001268:	f002 fb40 	bl	80038ec <HAL_ICACHE_Enable>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001272:	f000 f995 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09c      	sub	sp, #112	@ 0x70
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2234      	movs	r2, #52	@ 0x34
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f009 fa4d 	bl	800a756 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012bc:	4b45      	ldr	r3, [pc, #276]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012be:	4a46      	ldr	r2, [pc, #280]	@ (80013d8 <MX_TIM1_Init+0x15c>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80012c2:	4b44      	ldr	r3, [pc, #272]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012c4:	220f      	movs	r2, #15
 80012c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b42      	ldr	r3, [pc, #264]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80012ce:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012d0:	2209      	movs	r2, #9
 80012d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b3f      	ldr	r3, [pc, #252]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012da:	4b3e      	ldr	r3, [pc, #248]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b3c      	ldr	r3, [pc, #240]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e6:	483b      	ldr	r0, [pc, #236]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80012e8:	f005 fbe8 	bl	8006abc <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012f2:	f000 f955 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012fc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001300:	4619      	mov	r1, r3
 8001302:	4834      	ldr	r0, [pc, #208]	@ (80013d4 <MX_TIM1_Init+0x158>)
 8001304:	f006 fa8a 	bl	800781c <HAL_TIM_ConfigClockSource>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800130e:	f000 f947 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001312:	4830      	ldr	r0, [pc, #192]	@ (80013d4 <MX_TIM1_Init+0x158>)
 8001314:	f005 fcc2 	bl	8006c9c <HAL_TIM_PWM_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800131e:	f000 f93f 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001332:	4619      	mov	r1, r3
 8001334:	4827      	ldr	r0, [pc, #156]	@ (80013d4 <MX_TIM1_Init+0x158>)
 8001336:	f007 fc6f 	bl	8008c18 <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001340:	f000 f92e 	bl	80015a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001344:	2360      	movs	r3, #96	@ 0x60
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134c:	2300      	movs	r3, #0
 800134e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001350:	2300      	movs	r3, #0
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001360:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	@ (80013d4 <MX_TIM1_Init+0x158>)
 800136a:	f006 f943 	bl	80075f4 <HAL_TIM_PWM_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001374:	f000 f914 	bl	80015a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001390:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800139e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80013b6:	f007 fcf1 	bl	8008d9c <HAL_TIMEx_ConfigBreakDeadTime>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80013c0:	f000 f8ee 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <MX_TIM1_Init+0x158>)
 80013c6:	f000 f9e9 	bl	800179c <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3770      	adds	r7, #112	@ 0x70
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000204 	.word	0x20000204
 80013d8:	40012c00 	.word	0x40012c00

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b090      	sub	sp, #64	@ 0x40
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001418:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <MX_TIM2_Init+0x114>)
 800141a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800141e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001420:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <MX_TIM2_Init+0x114>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <MX_TIM2_Init+0x114>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800142c:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <MX_TIM2_Init+0x114>)
 800142e:	f04f 32ff 	mov.w	r2, #4294967295
 8001432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <MX_TIM2_Init+0x114>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <MX_TIM2_Init+0x114>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001440:	482b      	ldr	r0, [pc, #172]	@ (80014f0 <MX_TIM2_Init+0x114>)
 8001442:	f005 fb3b 	bl	8006abc <HAL_TIM_Base_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800144c:	f000 f8a8 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001456:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800145a:	4619      	mov	r1, r3
 800145c:	4824      	ldr	r0, [pc, #144]	@ (80014f0 <MX_TIM2_Init+0x114>)
 800145e:	f006 f9dd 	bl	800781c <HAL_TIM_ConfigClockSource>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001468:	f000 f89a 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800146c:	4820      	ldr	r0, [pc, #128]	@ (80014f0 <MX_TIM2_Init+0x114>)
 800146e:	f005 fdc9 	bl	8007004 <HAL_TIM_IC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001478:	f000 f892 	bl	80015a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800147c:	2304      	movs	r3, #4
 800147e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001480:	2350      	movs	r3, #80	@ 0x50
 8001482:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4817      	ldr	r0, [pc, #92]	@ (80014f0 <MX_TIM2_Init+0x114>)
 8001494:	f006 fac4 	bl	8007a20 <HAL_TIM_SlaveConfigSynchro>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800149e:	f000 f87f 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4619      	mov	r1, r3
 80014b0:	480f      	ldr	r0, [pc, #60]	@ (80014f0 <MX_TIM2_Init+0x114>)
 80014b2:	f007 fbb1 	bl	8008c18 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80014bc:	f000 f870 	bl	80015a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c4:	2301      	movs	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_TIM2_Init+0x114>)
 80014d8:	f005 fff0 	bl	80074bc <HAL_TIM_IC_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80014e2:	f000 f85d 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	@ 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000250 	.word	0x20000250

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <MX_GPIO_Init+0x9c>)
 800150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001510:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_GPIO_Init+0x9c>)
 800151c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_GPIO_Init+0x9c>)
 800152a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_GPIO_Init+0x9c>)
 800153a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2120      	movs	r1, #32
 800154a:	4812      	ldr	r0, [pc, #72]	@ (8001594 <MX_GPIO_Init+0xa0>)
 800154c:	f002 f996 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <MX_GPIO_Init+0xa4>)
 8001558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800155a:	2302      	movs	r3, #2
 800155c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4619      	mov	r1, r3
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <MX_GPIO_Init+0xa8>)
 8001566:	f001 ffb1 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800156a:	2320      	movs	r3, #32
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	@ (8001594 <MX_GPIO_Init+0xa0>)
 8001582:	f001 ffa3 	bl	80034cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	46020c00 	.word	0x46020c00
 8001594:	42020000 	.word	0x42020000
 8001598:	10210000 	.word	0x10210000
 800159c:	42020800 	.word	0x42020800

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <Error_Handler+0x8>

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_MspInit+0x30>)
 80015b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b8:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_MspInit+0x30>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_MspInit+0x30>)
 80015c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	46020c00 	.word	0x46020c00

080015e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0a6      	sub	sp, #152	@ 0x98
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(htim_base->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a60      	ldr	r2, [pc, #384]	@ (8001780 <HAL_TIM_Base_MspInit+0x1a0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10f      	bne.n	8001622 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	4b60      	ldr	r3, [pc, #384]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 8001604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001608:	4a5e      	ldr	r2, [pc, #376]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 800160a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800160e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001612:	4b5c      	ldr	r3, [pc, #368]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 8001614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001620:	e0a9      	b.n	8001776 <HAL_TIM_Base_MspInit+0x196>
  else if(htim_base->Instance==TIM2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800162a:	f040 80a4 	bne.w	8001776 <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162e:	4b55      	ldr	r3, [pc, #340]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 8001630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001634:	4a53      	ldr	r2, [pc, #332]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800163e:	4b51      	ldr	r3, [pc, #324]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 8001640:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b4d      	ldr	r3, [pc, #308]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 800164e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001652:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800165c:	4b49      	ldr	r3, [pc, #292]	@ (8001784 <HAL_TIM_Base_MspInit+0x1a4>)
 800165e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166a:	2301      	movs	r3, #1
 800166c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001682:	2301      	movs	r3, #1
 8001684:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800168c:	4619      	mov	r1, r3
 800168e:	483e      	ldr	r0, [pc, #248]	@ (8001788 <HAL_TIM_Base_MspInit+0x1a8>)
 8001690:	f001 ff1c 	bl	80034cc <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001694:	2321      	movs	r3, #33	@ 0x21
 8001696:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_CH1;
 8001698:	2338      	movs	r3, #56	@ 0x38
 800169a:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80016a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80016ae:	2301      	movs	r3, #1
 80016b0:	633b      	str	r3, [r7, #48]	@ 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80016b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.SrcBurstLength = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.DestBurstLength = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80016c4:	2300      	movs	r3, #0
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.Mode = DMA_NORMAL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80016cc:	2300      	movs	r3, #0
 80016ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80016d4:	2300      	movs	r3, #0
 80016d6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	492b      	ldr	r1, [pc, #172]	@ (800178c <HAL_TIM_Base_MspInit+0x1ac>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 f932 	bl	8002948 <HAL_DMAEx_List_BuildNode>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80016ea:	f7ff ff59 	bl	80015a0 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80016ee:	4a27      	ldr	r2, [pc, #156]	@ (800178c <HAL_TIM_Base_MspInit+0x1ac>)
 80016f0:	2100      	movs	r1, #0
 80016f2:	4827      	ldr	r0, [pc, #156]	@ (8001790 <HAL_TIM_Base_MspInit+0x1b0>)
 80016f4:	f001 f93e 	bl	8002974 <HAL_DMAEx_List_InsertNode>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_TIM_Base_MspInit+0x122>
      Error_Handler();
 80016fe:	f7ff ff4f 	bl	80015a0 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001702:	4823      	ldr	r0, [pc, #140]	@ (8001790 <HAL_TIM_Base_MspInit+0x1b0>)
 8001704:	f001 f9ff 	bl	8002b06 <HAL_DMAEx_List_SetCircularMode>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_TIM_Base_MspInit+0x132>
      Error_Handler();
 800170e:	f7ff ff47 	bl	80015a0 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 8001714:	4a20      	ldr	r2, [pc, #128]	@ (8001798 <HAL_TIM_Base_MspInit+0x1b8>)
 8001716:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 800171a:	2200      	movs	r2, #0
 800171c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800171e:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 8001720:	2200      	movs	r2, #0
 8001722:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 800172c:	2200      	movs	r2, #0
 800172e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 8001732:	2281      	movs	r2, #129	@ 0x81
 8001734:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001736:	4817      	ldr	r0, [pc, #92]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 8001738:	f000 ff46 	bl	80025c8 <HAL_DMAEx_List_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_TIM_Base_MspInit+0x166>
      Error_Handler();
 8001742:	f7ff ff2d 	bl	80015a0 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001746:	4912      	ldr	r1, [pc, #72]	@ (8001790 <HAL_TIM_Base_MspInit+0x1b0>)
 8001748:	4812      	ldr	r0, [pc, #72]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 800174a:	f001 fa3d 	bl	8002bc8 <HAL_DMAEx_List_LinkQ>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_TIM_Base_MspInit+0x178>
      Error_Handler();
 8001754:	f7ff ff24 	bl	80015a0 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel0);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
 800175e:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001764:	2110      	movs	r1, #16
 8001766:	480b      	ldr	r0, [pc, #44]	@ (8001794 <HAL_TIM_Base_MspInit+0x1b4>)
 8001768:	f000 fecd 	bl	8002506 <HAL_DMA_ConfigChannelAttributes>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 8001772:	f7ff ff15 	bl	80015a0 <Error_Handler>
}
 8001776:	bf00      	nop
 8001778:	3798      	adds	r7, #152	@ 0x98
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40012c00 	.word	0x40012c00
 8001784:	46020c00 	.word	0x46020c00
 8001788:	42020000 	.word	0x42020000
 800178c:	2000029c 	.word	0x2000029c
 8001790:	200002c0 	.word	0x200002c0
 8001794:	200002d8 	.word	0x200002d8
 8001798:	40020050 	.word	0x40020050

0800179c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <HAL_TIM_MspPostInit+0x6c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d11f      	bne.n	80017fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <HAL_TIM_MspPostInit+0x70>)
 80017c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c4:	4a11      	ldr	r2, [pc, #68]	@ (800180c <HAL_TIM_MspPostInit+0x70>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_TIM_MspPostInit+0x70>)
 80017d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <HAL_TIM_MspPostInit+0x74>)
 80017fa:	f001 fe67 	bl	80034cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40012c00 	.word	0x40012c00
 800180c:	46020c00 	.word	0x46020c00
 8001810:	42020000 	.word	0x42020000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186a:	f000 fab3 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <GPDMA1_Channel0_IRQHandler+0x10>)
 800187a:	f000 fce3 	bl	8002244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002d8 	.word	0x200002d8

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a2:	f008 ffab 	bl	800a7fc <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ca:	bf00      	nop
 80018cc:	e7fd      	b.n	80018ca <_exit+0x12>

080018ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e00a      	b.n	80018f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e0:	f3af 8000 	nop.w
 80018e4:	4601      	mov	r1, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	60ba      	str	r2, [r7, #8]
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbf0      	blt.n	80018e0 <_read+0x12>
  }

  return len;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e009      	b.n	800192e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	60ba      	str	r2, [r7, #8]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f93c 	bl	8001ba0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbf1      	blt.n	800191a <_write+0x12>
  }
  return len;
 8001936:	687b      	ldr	r3, [r7, #4]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_close>:

int _close(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001968:	605a      	str	r2, [r3, #4]
  return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_isatty>:

int _isatty(int file)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f008 ff10 	bl	800a7fc <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20040000 	.word	0x20040000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	20000350 	.word	0x20000350
 8001a10:	20000540 	.word	0x20000540

08001a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a18:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <SystemInit+0x68>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1e:	4a17      	ldr	r2, [pc, #92]	@ (8001a7c <SystemInit+0x68>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <SystemInit+0x6c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <SystemInit+0x6c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <SystemInit+0x6c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <SystemInit+0x6c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <SystemInit+0x6c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <SystemInit+0x6c>)
 8001a46:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001a4a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <SystemInit+0x6c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <SystemInit+0x6c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <SystemInit+0x6c>)
 8001a5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a62:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <SystemInit+0x6c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <SystemInit+0x68>)
 8001a6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a6e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	46020c00 	.word	0x46020c00

08001a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a84:	480d      	ldr	r0, [pc, #52]	@ (8001abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a88:	f7ff ffc4 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ab2:	f008 fea9 	bl	800a808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7ff faaf 	bl	8001018 <main>

08001aba <LoopForever>:

LoopForever:
    b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   r0, =_estack
 8001abc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ac8:	0800e4e8 	.word	0x0800e4e8
  ldr r2, =_sbss
 8001acc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ad0:	2000053c 	.word	0x2000053c

08001ad4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_IRQHandler>
	...

08001ad8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001aee:	f06f 0301 	mvn.w	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e018      	b.n	8001b28 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2294      	movs	r2, #148	@ 0x94
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <BSP_COM_Init+0x5c>)
 8001b00:	4413      	add	r3, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f868 	bl	8001bd8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2294      	movs	r2, #148	@ 0x94
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <BSP_COM_Init+0x5c>)
 8001b12:	4413      	add	r3, r2
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f80e 	bl	8001b38 <MX_USART1_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b22:	f06f 0303 	mvn.w	r3, #3
 8001b26:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b28:	68fb      	ldr	r3, [r7, #12]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000354 	.word	0x20000354

08001b38 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001b42:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <MX_USART1_Init+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	220c      	movs	r2, #12
 8001b56:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	895b      	ldrh	r3, [r3, #10]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	891b      	ldrh	r3, [r3, #8]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	899b      	ldrh	r3, [r3, #12]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b84:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f007 f99f 	bl	8008ed0 <HAL_UART_Init>
 8001b92:	4603      	mov	r3, r0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000004 	.word	0x20000004

08001ba0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <__io_putchar+0x30>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	2394      	movs	r3, #148	@ 0x94
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <__io_putchar+0x34>)
 8001bb6:	1898      	adds	r0, r3, r2
 8001bb8:	1d39      	adds	r1, r7, #4
 8001bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f007 f9e0 	bl	8008f84 <HAL_UART_Transmit>
  return ch;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003e8 	.word	0x200003e8
 8001bd4:	20000354 	.word	0x20000354

08001bd8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001be0:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001be6:	4a26      	ldr	r2, [pc, #152]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf0:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c04:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c22:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c28:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <COM1_MspInit+0xa8>)
 8001c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c3e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	480b      	ldr	r0, [pc, #44]	@ (8001c84 <COM1_MspInit+0xac>)
 8001c58:	f001 fc38 	bl	80034cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001c66:	2307      	movs	r3, #7
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <COM1_MspInit+0xac>)
 8001c72:	f001 fc2b 	bl	80034cc <HAL_GPIO_Init>
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	@ 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	46020c00 	.word	0x46020c00
 8001c84:	42020000 	.word	0x42020000

08001c88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_Init+0x50>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a11      	ldr	r2, [pc, #68]	@ (8001cd8 <HAL_Init+0x50>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f000 f98c 	bl	8001fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c9e:	f002 ffdf 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <HAL_Init+0x54>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	490c      	ldr	r1, [pc, #48]	@ (8001ce0 <HAL_Init+0x58>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <HAL_Init+0x5c>)
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001cb8:	2004      	movs	r0, #4
 8001cba:	f000 f9d1 	bl	8002060 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f812 	bl	8001ce8 <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e002      	b.n	8001cd4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cce:	f7ff fc6d 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	46020c00 	.word	0x46020c00
 8001ce0:	0800dfb8 	.word	0x0800dfb8
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001cf4:	4b33      	ldr	r3, [pc, #204]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e05c      	b.n	8001dba <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001d00:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_InitTick+0xe0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d10c      	bne.n	8001d26 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e037      	b.n	8001d96 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001d26:	f000 f9f3 	bl	8002110 <HAL_SYSTICK_GetCLKSourceConfig>
 8001d2a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d023      	beq.n	8001d7a <HAL_InitTick+0x92>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d82d      	bhi.n	8001d94 <HAL_InitTick+0xac>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_InitTick+0x5e>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d00d      	beq.n	8001d60 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001d44:	e026      	b.n	8001d94 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
        break;
 8001d5e:	e01a      	b.n	8001d96 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d60:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d6e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	60fb      	str	r3, [r7, #12]
        break;
 8001d78:	e00d      	b.n	8001d96 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d88:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	60fb      	str	r3, [r7, #12]
        break;
 8001d92:	e000      	b.n	8001d96 <HAL_InitTick+0xae>
        break;
 8001d94:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f940 	bl	800201c <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e009      	b.n	8001dba <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da6:	2200      	movs	r2, #0
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	f04f 30ff 	mov.w	r0, #4294967295
 8001dae:	f000 f90d 	bl	8001fcc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001db2:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_InitTick+0xe8>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	e000e010 	.word	0xe000e010
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	200003ec 	.word	0x200003ec

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200003ec 	.word	0x200003ec

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000000c 	.word	0x2000000c

08001e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60d3      	str	r3, [r2, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <__NVIC_GetPriorityGrouping+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 0307 	and.w	r3, r3, #7
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db0b      	blt.n	8001eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	4907      	ldr	r1, [pc, #28]	@ (8001ef8 <__NVIC_EnableIRQ+0x38>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	@ (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	@ (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff4c 	bl	8001e5c <__NVIC_SetPriorityGrouping>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fda:	f7ff ff63 	bl	8001ea4 <__NVIC_GetPriorityGrouping>
 8001fde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	6978      	ldr	r0, [r7, #20]
 8001fe6:	f7ff ffb3 	bl	8001f50 <NVIC_EncodePriority>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff82 	bl	8001efc <__NVIC_SetPriority>
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff56 	bl	8001ec0 <__NVIC_EnableIRQ>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800202c:	d301      	bcc.n	8002032 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800202e:	2301      	movs	r3, #1
 8002030:	e00d      	b.n	800204e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_SYSTICK_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <HAL_SYSTICK_Config+0x40>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_SYSTICK_Config+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a05      	ldr	r2, [pc, #20]	@ (800205c <HAL_SYSTICK_Config+0x40>)
 8002046:	f043 0303 	orr.w	r3, r3, #3
 800204a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b04      	cmp	r3, #4
 800206c:	d844      	bhi.n	80020f8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800206e:	a201      	add	r2, pc, #4	@ (adr r2, 8002074 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	08002097 	.word	0x08002097
 8002078:	080020b5 	.word	0x080020b5
 800207c:	080020d7 	.word	0x080020d7
 8002080:	080020f9 	.word	0x080020f9
 8002084:	08002089 	.word	0x08002089
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1e      	ldr	r2, [pc, #120]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	6013      	str	r3, [r2, #0]
      break;
 8002094:	e031      	b.n	80020fa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002096:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1b      	ldr	r2, [pc, #108]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80020a2:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a8:	4a18      	ldr	r2, [pc, #96]	@ (800210c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020b2:	e022      	b.n	80020fa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a13      	ldr	r2, [pc, #76]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020ca:	4a10      	ldr	r2, [pc, #64]	@ (800210c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020d4:	e011      	b.n	80020fa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a0b      	ldr	r2, [pc, #44]	@ (8002108 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020ec:	4a07      	ldr	r2, [pc, #28]	@ (800210c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020f6:	e000      	b.n	80020fa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80020f8:	bf00      	nop
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010
 800210c:	46020c00 	.word	0x46020c00

08002110 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002122:	2304      	movs	r3, #4
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	e021      	b.n	800216c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002128:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002132:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800213a:	d011      	beq.n	8002160 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002142:	d810      	bhi.n	8002166 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002150:	d003      	beq.n	800215a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002152:	e008      	b.n	8002166 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
        break;
 8002158:	e008      	b.n	800216c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800215a:	2301      	movs	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
        break;
 800215e:	e005      	b.n	800216c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002160:	2302      	movs	r3, #2
 8002162:	607b      	str	r3, [r7, #4]
        break;
 8002164:	e002      	b.n	800216c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
        break;
 800216a:	bf00      	nop
    }
  }
  return systick_source;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010
 8002180:	46020c00 	.word	0x46020c00

08002184 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04f      	b.n	800223c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_DMA_Start_IT+0x26>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e048      	b.n	800223c <HAL_DMA_Start_IT+0xb8>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d136      	bne.n	800222c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f9d3 	bl	800257e <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80021e6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021fe:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002216:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e007      	b.n	800223c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002254:	f023 030f 	bic.w	r3, r3, #15
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002262:	3b50      	subs	r3, #80	@ 0x50
 8002264:	09db      	lsrs	r3, r3, #7
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 813b 	beq.w	80024fa <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228e:	2b00      	cmp	r3, #0
 8002290:	d011      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022a8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d011      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022da:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	f043 0202 	orr.w	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d011      	beq.n	800231a <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800230c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d011      	beq.n	800234c <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800233e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	f043 0208 	orr.w	r2, r3, #8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002356:	2b00      	cmp	r3, #0
 8002358:	d013      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00c      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002370:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d04c      	beq.n	800242a <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d045      	beq.n	800242a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a6:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d12e      	bne.n	8002412 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023c2:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0202 	orr.w	r2, r2, #2
 80023d2:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ec:	2201      	movs	r2, #1
 80023ee:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d07a      	beq.n	80024fe <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
        }

        return;
 8002410:	e075      	b.n	80024fe <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2205      	movs	r2, #5
 8002416:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d039      	beq.n	80024ac <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d032      	beq.n	80024ac <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002462:	2b00      	cmp	r3, #0
 8002464:	d111      	bne.n	800248a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002472:	2201      	movs	r2, #1
 8002474:	731a      	strb	r2, [r3, #12]
 8002476:	e008      	b.n	800248a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002492:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d025      	beq.n	8002500 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0202 	orr.w	r2, r2, #2
 80024c2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024dc:	2201      	movs	r2, #1
 80024de:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e002      	b.n	8002500 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80024fe:	bf00      	nop
    }
  }
}
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e02b      	b.n	8002572 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002522:	f023 030f 	bic.w	r3, r3, #15
 8002526:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	3b50      	subs	r3, #80	@ 0x50
 8002532:	09db      	lsrs	r3, r3, #7
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2201      	movs	r2, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f003 0311 	and.w	r3, r3, #17
 8002550:	2b11      	cmp	r3, #17
 8002552:	d106      	bne.n	8002562 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	431a      	orrs	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	e006      	b.n	8002570 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	b291      	uxth	r1, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	430b      	orrs	r3, r1
 80025a0:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80025aa:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff fc14 	bl	8001dfc <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0db      	b.n	8002798 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6e      	ldr	r2, [pc, #440]	@ (80027a0 <HAL_DMAEx_List_Init+0x1d8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	f000 809f 	beq.w	800272a <HAL_DMAEx_List_Init+0x162>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6c      	ldr	r2, [pc, #432]	@ (80027a4 <HAL_DMAEx_List_Init+0x1dc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f000 8099 	beq.w	800272a <HAL_DMAEx_List_Init+0x162>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6a      	ldr	r2, [pc, #424]	@ (80027a8 <HAL_DMAEx_List_Init+0x1e0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	f000 8093 	beq.w	800272a <HAL_DMAEx_List_Init+0x162>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a68      	ldr	r2, [pc, #416]	@ (80027ac <HAL_DMAEx_List_Init+0x1e4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	f000 808d 	beq.w	800272a <HAL_DMAEx_List_Init+0x162>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a66      	ldr	r2, [pc, #408]	@ (80027b0 <HAL_DMAEx_List_Init+0x1e8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	f000 8087 	beq.w	800272a <HAL_DMAEx_List_Init+0x162>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a64      	ldr	r2, [pc, #400]	@ (80027b4 <HAL_DMAEx_List_Init+0x1ec>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f000 8081 	beq.w	800272a <HAL_DMAEx_List_Init+0x162>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a62      	ldr	r2, [pc, #392]	@ (80027b8 <HAL_DMAEx_List_Init+0x1f0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d07b      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a61      	ldr	r2, [pc, #388]	@ (80027bc <HAL_DMAEx_List_Init+0x1f4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d076      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a5f      	ldr	r2, [pc, #380]	@ (80027c0 <HAL_DMAEx_List_Init+0x1f8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d071      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a5e      	ldr	r2, [pc, #376]	@ (80027c4 <HAL_DMAEx_List_Init+0x1fc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d06c      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5c      	ldr	r2, [pc, #368]	@ (80027c8 <HAL_DMAEx_List_Init+0x200>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d067      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5b      	ldr	r2, [pc, #364]	@ (80027cc <HAL_DMAEx_List_Init+0x204>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d062      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a59      	ldr	r2, [pc, #356]	@ (80027d0 <HAL_DMAEx_List_Init+0x208>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d05d      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a58      	ldr	r2, [pc, #352]	@ (80027d4 <HAL_DMAEx_List_Init+0x20c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d058      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a56      	ldr	r2, [pc, #344]	@ (80027d8 <HAL_DMAEx_List_Init+0x210>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d053      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a55      	ldr	r2, [pc, #340]	@ (80027dc <HAL_DMAEx_List_Init+0x214>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04e      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a53      	ldr	r2, [pc, #332]	@ (80027e0 <HAL_DMAEx_List_Init+0x218>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d049      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_DMAEx_List_Init+0x21c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d044      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a50      	ldr	r2, [pc, #320]	@ (80027e8 <HAL_DMAEx_List_Init+0x220>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d03f      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4f      	ldr	r2, [pc, #316]	@ (80027ec <HAL_DMAEx_List_Init+0x224>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d03a      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a4d      	ldr	r2, [pc, #308]	@ (80027f0 <HAL_DMAEx_List_Init+0x228>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d035      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a4c      	ldr	r2, [pc, #304]	@ (80027f4 <HAL_DMAEx_List_Init+0x22c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d030      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a4a      	ldr	r2, [pc, #296]	@ (80027f8 <HAL_DMAEx_List_Init+0x230>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02b      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a49      	ldr	r2, [pc, #292]	@ (80027fc <HAL_DMAEx_List_Init+0x234>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d026      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a47      	ldr	r2, [pc, #284]	@ (8002800 <HAL_DMAEx_List_Init+0x238>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d021      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <HAL_DMAEx_List_Init+0x23c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d01c      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a44      	ldr	r2, [pc, #272]	@ (8002808 <HAL_DMAEx_List_Init+0x240>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d017      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a43      	ldr	r2, [pc, #268]	@ (800280c <HAL_DMAEx_List_Init+0x244>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d012      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a41      	ldr	r2, [pc, #260]	@ (8002810 <HAL_DMAEx_List_Init+0x248>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a40      	ldr	r2, [pc, #256]	@ (8002814 <HAL_DMAEx_List_Init+0x24c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d008      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3e      	ldr	r2, [pc, #248]	@ (8002818 <HAL_DMAEx_List_Init+0x250>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <HAL_DMAEx_List_Init+0x162>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a3d      	ldr	r2, [pc, #244]	@ (800281c <HAL_DMAEx_List_Init+0x254>)
 8002728:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0206 	orr.w	r2, r2, #6
 8002748:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800274a:	e00f      	b.n	800276c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800274c:	f7ff fb56 	bl	8001dfc <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b05      	cmp	r3, #5
 8002758:	d908      	bls.n	800276c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2210      	movs	r2, #16
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2203      	movs	r2, #3
 8002764:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e015      	b.n	8002798 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e8      	bne.n	800274c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 faba 	bl	8002cf4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40020050 	.word	0x40020050
 80027a4:	50020050 	.word	0x50020050
 80027a8:	400200d0 	.word	0x400200d0
 80027ac:	500200d0 	.word	0x500200d0
 80027b0:	40020150 	.word	0x40020150
 80027b4:	50020150 	.word	0x50020150
 80027b8:	400201d0 	.word	0x400201d0
 80027bc:	500201d0 	.word	0x500201d0
 80027c0:	40020250 	.word	0x40020250
 80027c4:	50020250 	.word	0x50020250
 80027c8:	400202d0 	.word	0x400202d0
 80027cc:	500202d0 	.word	0x500202d0
 80027d0:	40020350 	.word	0x40020350
 80027d4:	50020350 	.word	0x50020350
 80027d8:	400203d0 	.word	0x400203d0
 80027dc:	500203d0 	.word	0x500203d0
 80027e0:	40020450 	.word	0x40020450
 80027e4:	50020450 	.word	0x50020450
 80027e8:	400204d0 	.word	0x400204d0
 80027ec:	500204d0 	.word	0x500204d0
 80027f0:	40020550 	.word	0x40020550
 80027f4:	50020550 	.word	0x50020550
 80027f8:	400205d0 	.word	0x400205d0
 80027fc:	500205d0 	.word	0x500205d0
 8002800:	40020650 	.word	0x40020650
 8002804:	50020650 	.word	0x50020650
 8002808:	400206d0 	.word	0x400206d0
 800280c:	500206d0 	.word	0x500206d0
 8002810:	40020750 	.word	0x40020750
 8002814:	50020750 	.word	0x50020750
 8002818:	400207d0 	.word	0x400207d0
 800281c:	500207d0 	.word	0x500207d0

08002820 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_DMAEx_List_Start_IT+0x16>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e082      	b.n	8002940 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002840:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d005      	beq.n	8002860 <HAL_DMAEx_List_Start_IT+0x40>
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d16a      	bne.n	8002930 <HAL_DMAEx_List_Start_IT+0x110>
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d067      	beq.n	8002930 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d157      	bne.n	800291c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_DMAEx_List_Start_IT+0x5a>
 8002876:	2302      	movs	r3, #2
 8002878:	e062      	b.n	8002940 <HAL_DMAEx_List_Start_IT+0x120>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288e:	2202      	movs	r2, #2
 8002890:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80028ae:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028de:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f107 010c 	add.w	r1, r7, #12
 80028ea:	2200      	movs	r2, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fd1d 	bl	800332c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	0c0b      	lsrs	r3, r1, #16
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002910:	4013      	ands	r3, r2
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e007      	b.n	8002940 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2240      	movs	r2, #64	@ 0x40
 8002934:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_DMAEx_List_BuildNode+0x16>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e004      	b.n	800296c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb1d 	bl	8002fa4 <DMA_List_BuildNode>

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	@ 0x30
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_DMAEx_List_InsertNode+0x18>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b6      	b.n	8002afe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d104      	bne.n	80029a2 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2204      	movs	r2, #4
 800299c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0ad      	b.n	8002afe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fc52 	bl	8003254 <DMA_List_CheckNodesBaseAddresses>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2205      	movs	r2, #5
 80029ba:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e09e      	b.n	8002afe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fc73 	bl	80032b4 <DMA_List_CheckNodesTypes>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2204      	movs	r2, #4
 80029d8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e08f      	b.n	8002afe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2202      	movs	r2, #2
 80029e2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80029ea:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80029ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fc99 	bl	800332c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11a      	bne.n	8002a38 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e06c      	b.n	8002af0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002a22:	4013      	ands	r3, r2
 8002a24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a28:	4319      	orrs	r1, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2202      	movs	r2, #2
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	e05b      	b.n	8002af0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002a48:	4013      	ands	r3, r2
 8002a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a4e:	4319      	orrs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e043      	b.n	8002ae6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8002a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a60:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	461a      	mov	r2, r3
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fc8e 	bl	800338c <DMA_List_FindNode>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d132      	bne.n	8002adc <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d11a      	bne.n	8002ab6 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002a92:	4013      	ands	r3, r2
 8002a94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a98:	4319      	orrs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aac:	4319      	orrs	r1, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002ab4:	e017      	b.n	8002ae6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8002ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002acc:	4013      	ands	r3, r2
 8002ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ad2:	4319      	orrs	r1, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002ada:	e004      	b.n	8002ae6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2206      	movs	r2, #6
 8002ae0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00b      	b.n	8002afe <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3730      	adds	r7, #48	@ 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08a      	sub	sp, #40	@ 0x28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e052      	b.n	8002bbe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e049      	b.n	8002bbe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d101      	bne.n	8002b42 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e03d      	b.n	8002bbe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e038      	b.n	8002bbe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d104      	bne.n	8002b5e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2204      	movs	r2, #4
 8002b58:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e02f      	b.n	8002bbe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f107 0220 	add.w	r2, r7, #32
 8002b72:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fbd8 	bl	800332c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	461a      	mov	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fbff 	bl	800338c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002b98:	4013      	ands	r3, r2
 8002b9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002ba2:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002ba4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3728      	adds	r7, #40	@ 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_DMAEx_List_LinkQ+0x16>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e072      	b.n	8002cc8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002be8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d002      	beq.n	8002bfc <HAL_DMAEx_List_LinkQ+0x34>
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d108      	bne.n	8002c0e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2240      	movs	r2, #64	@ 0x40
 8002c00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e05c      	b.n	8002cc8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	7b1b      	ldrb	r3, [r3, #12]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d104      	bne.n	8002c22 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e052      	b.n	8002cc8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0xaa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a29      	ldr	r2, [pc, #164]	@ (8002cd8 <HAL_DMAEx_List_LinkQ+0x110>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01d      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0xaa>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a28      	ldr	r2, [pc, #160]	@ (8002cdc <HAL_DMAEx_List_LinkQ+0x114>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0xaa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a26      	ldr	r2, [pc, #152]	@ (8002ce0 <HAL_DMAEx_List_LinkQ+0x118>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0xaa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a25      	ldr	r2, [pc, #148]	@ (8002ce4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0xaa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a23      	ldr	r2, [pc, #140]	@ (8002ce8 <HAL_DMAEx_List_LinkQ+0x120>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0xaa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a22      	ldr	r2, [pc, #136]	@ (8002cec <HAL_DMAEx_List_LinkQ+0x124>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0xaa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <HAL_DMAEx_List_LinkQ+0x128>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_DMAEx_List_LinkQ+0xae>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_DMAEx_List_LinkQ+0xb0>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e019      	b.n	8002cc8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c98:	2b81      	cmp	r3, #129	@ 0x81
 8002c9a:	d108      	bne.n	8002cae <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00c      	b.n	8002cc8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e003      	b.n	8002cc8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40020650 	.word	0x40020650
 8002cd8:	50020650 	.word	0x50020650
 8002cdc:	400206d0 	.word	0x400206d0
 8002ce0:	500206d0 	.word	0x500206d0
 8002ce4:	40020750 	.word	0x40020750
 8002ce8:	50020750 	.word	0x50020750
 8002cec:	400207d0 	.word	0x400207d0
 8002cf0:	500207d0 	.word	0x500207d0

08002cf4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a85      	ldr	r2, [pc, #532]	@ (8002f24 <DMA_List_Init+0x230>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f000 80a0 	beq.w	8002e54 <DMA_List_Init+0x160>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a83      	ldr	r2, [pc, #524]	@ (8002f28 <DMA_List_Init+0x234>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	f000 809a 	beq.w	8002e54 <DMA_List_Init+0x160>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a81      	ldr	r2, [pc, #516]	@ (8002f2c <DMA_List_Init+0x238>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	f000 8094 	beq.w	8002e54 <DMA_List_Init+0x160>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7f      	ldr	r2, [pc, #508]	@ (8002f30 <DMA_List_Init+0x23c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	f000 808e 	beq.w	8002e54 <DMA_List_Init+0x160>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f34 <DMA_List_Init+0x240>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	f000 8088 	beq.w	8002e54 <DMA_List_Init+0x160>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7b      	ldr	r2, [pc, #492]	@ (8002f38 <DMA_List_Init+0x244>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f000 8082 	beq.w	8002e54 <DMA_List_Init+0x160>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a79      	ldr	r2, [pc, #484]	@ (8002f3c <DMA_List_Init+0x248>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d07c      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a78      	ldr	r2, [pc, #480]	@ (8002f40 <DMA_List_Init+0x24c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d077      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a76      	ldr	r2, [pc, #472]	@ (8002f44 <DMA_List_Init+0x250>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d072      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	@ (8002f48 <DMA_List_Init+0x254>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d06d      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a73      	ldr	r2, [pc, #460]	@ (8002f4c <DMA_List_Init+0x258>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d068      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a72      	ldr	r2, [pc, #456]	@ (8002f50 <DMA_List_Init+0x25c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d063      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a70      	ldr	r2, [pc, #448]	@ (8002f54 <DMA_List_Init+0x260>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d05e      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f58 <DMA_List_Init+0x264>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d059      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6d      	ldr	r2, [pc, #436]	@ (8002f5c <DMA_List_Init+0x268>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d054      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6c      	ldr	r2, [pc, #432]	@ (8002f60 <DMA_List_Init+0x26c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04f      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f64 <DMA_List_Init+0x270>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04a      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a69      	ldr	r2, [pc, #420]	@ (8002f68 <DMA_List_Init+0x274>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d045      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a67      	ldr	r2, [pc, #412]	@ (8002f6c <DMA_List_Init+0x278>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a66      	ldr	r2, [pc, #408]	@ (8002f70 <DMA_List_Init+0x27c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a64      	ldr	r2, [pc, #400]	@ (8002f74 <DMA_List_Init+0x280>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d036      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a63      	ldr	r2, [pc, #396]	@ (8002f78 <DMA_List_Init+0x284>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d031      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a61      	ldr	r2, [pc, #388]	@ (8002f7c <DMA_List_Init+0x288>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02c      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a60      	ldr	r2, [pc, #384]	@ (8002f80 <DMA_List_Init+0x28c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d027      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5e      	ldr	r2, [pc, #376]	@ (8002f84 <DMA_List_Init+0x290>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5d      	ldr	r2, [pc, #372]	@ (8002f88 <DMA_List_Init+0x294>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5b      	ldr	r2, [pc, #364]	@ (8002f8c <DMA_List_Init+0x298>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5a      	ldr	r2, [pc, #360]	@ (8002f90 <DMA_List_Init+0x29c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a58      	ldr	r2, [pc, #352]	@ (8002f94 <DMA_List_Init+0x2a0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a57      	ldr	r2, [pc, #348]	@ (8002f98 <DMA_List_Init+0x2a4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a55      	ldr	r2, [pc, #340]	@ (8002f9c <DMA_List_Init+0x2a8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <DMA_List_Init+0x160>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a54      	ldr	r2, [pc, #336]	@ (8002fa0 <DMA_List_Init+0x2ac>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <DMA_List_Init+0x164>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <DMA_List_Init+0x166>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e8c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a36      	ldr	r2, [pc, #216]	@ (8002f84 <DMA_List_Init+0x290>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <DMA_List_Init+0x202>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a34      	ldr	r2, [pc, #208]	@ (8002f88 <DMA_List_Init+0x294>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <DMA_List_Init+0x202>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a33      	ldr	r2, [pc, #204]	@ (8002f8c <DMA_List_Init+0x298>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <DMA_List_Init+0x202>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a31      	ldr	r2, [pc, #196]	@ (8002f90 <DMA_List_Init+0x29c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <DMA_List_Init+0x202>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a30      	ldr	r2, [pc, #192]	@ (8002f94 <DMA_List_Init+0x2a0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <DMA_List_Init+0x202>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f98 <DMA_List_Init+0x2a4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <DMA_List_Init+0x202>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f9c <DMA_List_Init+0x2a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <DMA_List_Init+0x202>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8002fa0 <DMA_List_Init+0x2ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <DMA_List_Init+0x206>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <DMA_List_Init+0x208>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40020050 	.word	0x40020050
 8002f28:	50020050 	.word	0x50020050
 8002f2c:	400200d0 	.word	0x400200d0
 8002f30:	500200d0 	.word	0x500200d0
 8002f34:	40020150 	.word	0x40020150
 8002f38:	50020150 	.word	0x50020150
 8002f3c:	400201d0 	.word	0x400201d0
 8002f40:	500201d0 	.word	0x500201d0
 8002f44:	40020250 	.word	0x40020250
 8002f48:	50020250 	.word	0x50020250
 8002f4c:	400202d0 	.word	0x400202d0
 8002f50:	500202d0 	.word	0x500202d0
 8002f54:	40020350 	.word	0x40020350
 8002f58:	50020350 	.word	0x50020350
 8002f5c:	400203d0 	.word	0x400203d0
 8002f60:	500203d0 	.word	0x500203d0
 8002f64:	40020450 	.word	0x40020450
 8002f68:	50020450 	.word	0x50020450
 8002f6c:	400204d0 	.word	0x400204d0
 8002f70:	500204d0 	.word	0x500204d0
 8002f74:	40020550 	.word	0x40020550
 8002f78:	50020550 	.word	0x50020550
 8002f7c:	400205d0 	.word	0x400205d0
 8002f80:	500205d0 	.word	0x500205d0
 8002f84:	40020650 	.word	0x40020650
 8002f88:	50020650 	.word	0x50020650
 8002f8c:	400206d0 	.word	0x400206d0
 8002f90:	500206d0 	.word	0x500206d0
 8002f94:	40020750 	.word	0x40020750
 8002f98:	50020750 	.word	0x50020750
 8002f9c:	400207d0 	.word	0x400207d0
 8002fa0:	500207d0 	.word	0x500207d0

08002fa4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002fb6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8002fbc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002fc2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8002fc8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d017      	beq.n	800300a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	051b      	lsls	r3, r3, #20
 8002ff0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002ff4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003002:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003004:	431a      	orrs	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	f240 237f 	movw	r3, #639	@ 0x27f
 8003016:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003018:	431a      	orrs	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	d10c      	bne.n	8003042 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d011      	beq.n	8003058 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	e00a      	b.n	8003058 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800304a:	d105      	bne.n	8003058 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003078:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800307a:	431a      	orrs	r2, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003084:	b29a      	uxth	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d04e      	beq.n	8003134 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	3b01      	subs	r3, #1
 80030a0:	0419      	lsls	r1, r3, #16
 80030a2:	4b6a      	ldr	r3, [pc, #424]	@ (800324c <DMA_List_BuildNode+0x2a8>)
 80030a4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80030a6:	431a      	orrs	r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da06      	bge.n	80030c2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e005      	b.n	80030ce <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	da06      	bge.n	80030e4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	e005      	b.n	80030f0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da06      	bge.n	8003106 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	e005      	b.n	8003112 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	2b00      	cmp	r3, #0
 8003118:	da06      	bge.n	8003128 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	e005      	b.n	8003134 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05d      	beq.n	800320c <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003154:	2b00      	cmp	r3, #0
 8003156:	da09      	bge.n	800316c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315c:	425b      	negs	r3, r3
 800315e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	615a      	str	r2, [r3, #20]
 800316a:	e005      	b.n	8003178 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003170:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317c:	2b00      	cmp	r3, #0
 800317e:	da0d      	bge.n	800319c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	425b      	negs	r3, r3
 8003186:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	0419      	lsls	r1, r3, #16
 8003190:	4b2f      	ldr	r3, [pc, #188]	@ (8003250 <DMA_List_BuildNode+0x2ac>)
 8003192:	400b      	ands	r3, r1
 8003194:	431a      	orrs	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	615a      	str	r2, [r3, #20]
 800319a:	e009      	b.n	80031b0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a4:	0419      	lsls	r1, r3, #16
 80031a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003250 <DMA_List_BuildNode+0x2ac>)
 80031a8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80031aa:	431a      	orrs	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da08      	bge.n	80031ca <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031bc:	425b      	negs	r3, r3
 80031be:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	619a      	str	r2, [r3, #24]
 80031c8:	e004      	b.n	80031d4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da0b      	bge.n	80031f4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e0:	425b      	negs	r3, r3
 80031e2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80031ec:	431a      	orrs	r2, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	e007      	b.n	8003204 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80031fe:	431a      	orrs	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
 800320a:	e002      	b.n	8003212 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003232:	e005      	b.n	8003240 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	07ff0000 	.word	0x07ff0000
 8003250:	1fff0000 	.word	0x1fff0000

08003254 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4313      	orrs	r3, r2
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e00a      	b.n	8003296 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e004      	b.n	8003296 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e00e      	b.n	80032f2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e006      	b.n	80032f2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003304:	2302      	movs	r3, #2
 8003306:	e00b      	b.n	8003320 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800331a:	2303      	movs	r3, #3
 800331c:	e000      	b.n	8003320 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00c      	beq.n	800335e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a0d      	ldr	r2, [pc, #52]	@ (8003384 <DMA_List_GetCLLRNodeInfo+0x58>)
 800334e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00f      	beq.n	8003376 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800335c:	e00b      	b.n	8003376 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4a08      	ldr	r2, [pc, #32]	@ (8003388 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003368:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2205      	movs	r2, #5
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	fe010000 	.word	0xfe010000
 8003388:	f8010000 	.word	0xf8010000

0800338c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d142      	bne.n	8003436 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80033b0:	e01d      	b.n	80033ee <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e00f      	b.n	80033e8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80033e0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3dc      	bcc.n	80033b2 <DMA_List_FindNode+0x26>
 80033f8:	e029      	b.n	800344e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d107      	bne.n	8003410 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	e00f      	b.n	8003430 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4413      	add	r3, r2
 8003420:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003428:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	429a      	cmp	r2, r3
 800343e:	d206      	bcs.n	800344e <DMA_List_FindNode+0xc2>
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003446:	4013      	ands	r3, r2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	429a      	cmp	r2, r3
 800344c:	d1d5      	bne.n	80033fa <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800345a:	4013      	ands	r3, r2
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003462:	2301      	movs	r3, #1
 8003464:	e02b      	b.n	80034be <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	041b      	lsls	r3, r3, #16
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	461a      	mov	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00f      	beq.n	80034bc <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	461a      	mov	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80034ac:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	@ 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80034de:	e1ba      	b.n	8003856 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	4013      	ands	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 81aa 	beq.w	8003850 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a55      	ldr	r2, [pc, #340]	@ (8003654 <HAL_GPIO_Init+0x188>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d15d      	bne.n	80035c0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800350a:	2201      	movs	r2, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	4013      	ands	r3, r2
 8003518:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0201 	and.w	r2, r3, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	4313      	orrs	r3, r2
 800352c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003534:	4a48      	ldr	r2, [pc, #288]	@ (8003658 <HAL_GPIO_Init+0x18c>)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800353c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800353e:	4a46      	ldr	r2, [pc, #280]	@ (8003658 <HAL_GPIO_Init+0x18c>)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	3208      	adds	r2, #8
 8003552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003556:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	4013      	ands	r3, r2
 800356c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	220b      	movs	r2, #11
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	4313      	orrs	r3, r2
 8003580:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	08da      	lsrs	r2, r3, #3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	3208      	adds	r2, #8
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	2202      	movs	r2, #2
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e067      	b.n	8003690 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x104>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b12      	cmp	r3, #18
 80035ce:	d145      	bne.n	800365c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	4313      	orrs	r3, r2
 800360c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	08da      	lsrs	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3208      	adds	r2, #8
 8003616:	69f9      	ldr	r1, [r7, #28]
 8003618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	4013      	ands	r3, r2
 8003632:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0203 	and.w	r2, r3, #3
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4313      	orrs	r3, r2
 8003648:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e01e      	b.n	8003690 <HAL_GPIO_Init+0x1c4>
 8003652:	bf00      	nop
 8003654:	46020000 	.word	0x46020000
 8003658:	0800e010 	.word	0x0800e010
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	4013      	ands	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	4313      	orrs	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d00b      	beq.n	80036b0 <HAL_GPIO_Init+0x1e4>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d007      	beq.n	80036b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036a4:	2b11      	cmp	r3, #17
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b12      	cmp	r3, #18
 80036ae:	d130      	bne.n	8003712 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2203      	movs	r2, #3
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80036e6:	2201      	movs	r2, #1
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 0201 	and.w	r2, r3, #1
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	4313      	orrs	r3, r2
 800370a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d017      	beq.n	800374a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	4013      	ands	r3, r2
 8003730:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d07c      	beq.n	8003850 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003756:	4a47      	ldr	r2, [pc, #284]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3318      	adds	r3, #24
 800375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003762:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	220f      	movs	r2, #15
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	4013      	ands	r3, r2
 8003778:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0a9a      	lsrs	r2, r3, #10
 800377e:	4b3e      	ldr	r3, [pc, #248]	@ (8003878 <HAL_GPIO_Init+0x3ac>)
 8003780:	4013      	ands	r3, r2
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	f002 0203 	and.w	r2, r2, #3
 8003788:	00d2      	lsls	r2, r2, #3
 800378a:	4093      	lsls	r3, r2
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	4313      	orrs	r3, r2
 8003790:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003792:	4938      	ldr	r1, [pc, #224]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	3318      	adds	r3, #24
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80037a0:	4b34      	ldr	r3, [pc, #208]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80037c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80037ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80037ee:	4a21      	ldr	r2, [pc, #132]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80037f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	43db      	mvns	r3, r3
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	4013      	ands	r3, r2
 8003804:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800381a:	4a16      	ldr	r2, [pc, #88]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003822:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 8003824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003828:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	4013      	ands	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003848:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <HAL_GPIO_Init+0x3a8>)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f ae3d 	bne.w	80034e0 <HAL_GPIO_Init+0x14>
  }
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	3724      	adds	r7, #36	@ 0x24
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	46022000 	.word	0x46022000
 8003878:	002f7f7f 	.word	0x002f7f7f

0800387c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
 8003888:	4613      	mov	r3, r2
 800388a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800388c:	787b      	ldrb	r3, [r7, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003898:	e002      	b.n	80038a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80038b8:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e007      	b.n	80038da <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 0204 	bic.w	r2, r3, #4
 80038d2:	4905      	ldr	r1, [pc, #20]	@ (80038e8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40030400 	.word	0x40030400

080038ec <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_ICACHE_Enable+0x1c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <HAL_ICACHE_Enable+0x1c>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40030400 	.word	0x40030400

0800390c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003914:	4b39      	ldr	r3, [pc, #228]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800391c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d10b      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392c:	d905      	bls.n	800393a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a32      	ldr	r2, [pc, #200]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003938:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e057      	b.n	80039ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003944:	d90a      	bls.n	800395c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003946:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4313      	orrs	r3, r2
 8003952:	4a2a      	ldr	r2, [pc, #168]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003958:	60d3      	str	r3, [r2, #12]
 800395a:	e007      	b.n	800396c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003964:	4925      	ldr	r1, [pc, #148]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4313      	orrs	r3, r2
 800396a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800396c:	4b24      	ldr	r3, [pc, #144]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	2232      	movs	r2, #50	@ 0x32
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	4a21      	ldr	r2, [pc, #132]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800398a:	e002      	b.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003992:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x98>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f3      	bne.n	800398c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01b      	beq.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a15      	ldr	r2, [pc, #84]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	2232      	movs	r2, #50	@ 0x32
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	4a11      	ldr	r2, [pc, #68]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	3301      	adds	r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80039c8:	e002      	b.n	80039d0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f3      	bne.n	80039ca <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e000      	b.n	80039ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	46020800 	.word	0x46020800
 8003a00:	20000000 	.word	0x20000000
 8003a04:	10624dd3 	.word	0x10624dd3

08003a08 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003a0c:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	46020800 	.word	0x46020800

08003a24 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003a2c:	4b22      	ldr	r3, [pc, #136]	@ (8003ab8 <HAL_PWREx_ConfigSupply+0x94>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <HAL_PWREx_ConfigSupply+0x98>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	2232      	movs	r2, #50	@ 0x32
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003abc <HAL_PWREx_ConfigSupply+0x98>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a56:	f023 0302 	bic.w	r3, r3, #2
 8003a5a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a5c:	e002      	b.n	8003a64 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a64:	4b16      	ldr	r3, [pc, #88]	@ (8003ac0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d116      	bne.n	8003a9e <HAL_PWREx_ConfigSupply+0x7a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f3      	bne.n	8003a5e <HAL_PWREx_ConfigSupply+0x3a>
 8003a76:	e012      	b.n	8003a9e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003a78:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a84:	e002      	b.n	8003a8c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_PWREx_ConfigSupply+0x7a>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f3      	bne.n	8003a86 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e000      	b.n	8003aaa <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	10624dd3 	.word	0x10624dd3
 8003ac0:	46020800 	.word	0x46020800

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	@ 0x38
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f000 bec8 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	4b99      	ldr	r3, [pc, #612]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae8:	4b96      	ldr	r3, [pc, #600]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 816c 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_RCC_OscConfig+0x52>
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	f040 80de 	bne.w	8003cca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 80da 	bne.w	8003cca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f000 bea5 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b28:	4b86      	ldr	r3, [pc, #536]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_RCC_OscConfig+0x7a>
 8003b34:	4b83      	ldr	r3, [pc, #524]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003b3c:	e005      	b.n	8003b4a <HAL_RCC_OscConfig+0x86>
 8003b3e:	4b81      	ldr	r3, [pc, #516]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d255      	bcs.n	8003bfa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 f9d9 	bl	8004f10 <RCC_SetFlashLatencyFromMSIRange>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f000 be82 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b6a:	4b76      	ldr	r3, [pc, #472]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4a75      	ldr	r2, [pc, #468]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b74:	6093      	str	r3, [r2, #8]
 8003b76:	4b73      	ldr	r3, [pc, #460]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	4970      	ldr	r1, [pc, #448]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b90:	d309      	bcc.n	8003ba6 <HAL_RCC_OscConfig+0xe2>
 8003b92:	4b6c      	ldr	r3, [pc, #432]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f023 021f 	bic.w	r2, r3, #31
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4969      	ldr	r1, [pc, #420]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60cb      	str	r3, [r1, #12]
 8003ba4:	e07e      	b.n	8003ca4 <HAL_RCC_OscConfig+0x1e0>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	da0a      	bge.n	8003bc4 <HAL_RCC_OscConfig+0x100>
 8003bae:	4b65      	ldr	r3, [pc, #404]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	015b      	lsls	r3, r3, #5
 8003bbc:	4961      	ldr	r1, [pc, #388]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60cb      	str	r3, [r1, #12]
 8003bc2:	e06f      	b.n	8003ca4 <HAL_RCC_OscConfig+0x1e0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bcc:	d30a      	bcc.n	8003be4 <HAL_RCC_OscConfig+0x120>
 8003bce:	4b5d      	ldr	r3, [pc, #372]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	029b      	lsls	r3, r3, #10
 8003bdc:	4959      	ldr	r1, [pc, #356]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60cb      	str	r3, [r1, #12]
 8003be2:	e05f      	b.n	8003ca4 <HAL_RCC_OscConfig+0x1e0>
 8003be4:	4b57      	ldr	r3, [pc, #348]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	03db      	lsls	r3, r3, #15
 8003bf2:	4954      	ldr	r1, [pc, #336]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
 8003bf8:	e054      	b.n	8003ca4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003bfa:	4b52      	ldr	r3, [pc, #328]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4a51      	ldr	r2, [pc, #324]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	4b4f      	ldr	r3, [pc, #316]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	494c      	ldr	r1, [pc, #304]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c20:	d309      	bcc.n	8003c36 <HAL_RCC_OscConfig+0x172>
 8003c22:	4b48      	ldr	r3, [pc, #288]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f023 021f 	bic.w	r2, r3, #31
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4945      	ldr	r1, [pc, #276]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
 8003c34:	e028      	b.n	8003c88 <HAL_RCC_OscConfig+0x1c4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da0a      	bge.n	8003c54 <HAL_RCC_OscConfig+0x190>
 8003c3e:	4b41      	ldr	r3, [pc, #260]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	015b      	lsls	r3, r3, #5
 8003c4c:	493d      	ldr	r1, [pc, #244]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60cb      	str	r3, [r1, #12]
 8003c52:	e019      	b.n	8003c88 <HAL_RCC_OscConfig+0x1c4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5c:	d30a      	bcc.n	8003c74 <HAL_RCC_OscConfig+0x1b0>
 8003c5e:	4b39      	ldr	r3, [pc, #228]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	029b      	lsls	r3, r3, #10
 8003c6c:	4935      	ldr	r1, [pc, #212]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60cb      	str	r3, [r1, #12]
 8003c72:	e009      	b.n	8003c88 <HAL_RCC_OscConfig+0x1c4>
 8003c74:	4b33      	ldr	r3, [pc, #204]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	03db      	lsls	r3, r3, #15
 8003c82:	4930      	ldr	r1, [pc, #192]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f93c 	bl	8004f10 <RCC_SetFlashLatencyFromMSIRange>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f000 bde5 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003ca4:	f001 f8de 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ca8:	4b27      	ldr	r3, [pc, #156]	@ (8003d48 <HAL_RCC_OscConfig+0x284>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe f81b 	bl	8001ce8 <HAL_InitTick>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 808a 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cc6:	f000 bdd2 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d066      	beq.n	8003da0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003cde:	f7fe f88d 	bl	8001dfc <HAL_GetTick>
 8003ce2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ce4:	e009      	b.n	8003cfa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ce6:	f7fe f889 	bl	8001dfc <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d902      	bls.n	8003cfa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	f000 bdba 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003cfa:	4b12      	ldr	r3, [pc, #72]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ef      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d06:	4b0f      	ldr	r3, [pc, #60]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d10:	6093      	str	r3, [r2, #8]
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	4909      	ldr	r1, [pc, #36]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003d2c:	d30e      	bcc.n	8003d4c <HAL_RCC_OscConfig+0x288>
 8003d2e:	4b05      	ldr	r3, [pc, #20]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f023 021f 	bic.w	r2, r3, #31
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4902      	ldr	r1, [pc, #8]	@ (8003d44 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60cb      	str	r3, [r1, #12]
 8003d40:	e04a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x314>
 8003d42:	bf00      	nop
 8003d44:	46020c00 	.word	0x46020c00
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	da0a      	bge.n	8003d6a <HAL_RCC_OscConfig+0x2a6>
 8003d54:	4b98      	ldr	r3, [pc, #608]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	015b      	lsls	r3, r3, #5
 8003d62:	4995      	ldr	r1, [pc, #596]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
 8003d68:	e036      	b.n	8003dd8 <HAL_RCC_OscConfig+0x314>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d72:	d30a      	bcc.n	8003d8a <HAL_RCC_OscConfig+0x2c6>
 8003d74:	4b90      	ldr	r3, [pc, #576]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	029b      	lsls	r3, r3, #10
 8003d82:	498d      	ldr	r1, [pc, #564]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60cb      	str	r3, [r1, #12]
 8003d88:	e026      	b.n	8003dd8 <HAL_RCC_OscConfig+0x314>
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	03db      	lsls	r3, r3, #15
 8003d98:	4987      	ldr	r1, [pc, #540]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60cb      	str	r3, [r1, #12]
 8003d9e:	e01b      	b.n	8003dd8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003da0:	4b85      	ldr	r3, [pc, #532]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a84      	ldr	r2, [pc, #528]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dac:	f7fe f826 	bl	8001dfc <HAL_GetTick>
 8003db0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003db2:	e009      	b.n	8003dc8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003db4:	f7fe f822 	bl	8001dfc <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d902      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	f000 bd53 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003dc8:	4b7b      	ldr	r3, [pc, #492]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ef      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2f0>
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003dd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 808b 	beq.w	8003efc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_OscConfig+0x334>
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d109      	bne.n	8003e06 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d17d      	bne.n	8003efc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f000 bd34 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x35a>
 8003e10:	4b69      	ldr	r3, [pc, #420]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a68      	ldr	r2, [pc, #416]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	e041      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3de>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e26:	d112      	bne.n	8003e4e <HAL_RCC_OscConfig+0x38a>
 8003e28:	4b63      	ldr	r3, [pc, #396]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a62      	ldr	r2, [pc, #392]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b60      	ldr	r3, [pc, #384]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5f      	ldr	r2, [pc, #380]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	e029      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3de>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003e56:	d112      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3ba>
 8003e58:	4b57      	ldr	r3, [pc, #348]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a56      	ldr	r2, [pc, #344]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b54      	ldr	r3, [pc, #336]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a53      	ldr	r2, [pc, #332]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b51      	ldr	r3, [pc, #324]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a50      	ldr	r2, [pc, #320]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e011      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3de>
 8003e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b48      	ldr	r3, [pc, #288]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a47      	ldr	r2, [pc, #284]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d014      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003eaa:	f7fd ffa7 	bl	8001dfc <HAL_GetTick>
 8003eae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb0:	e009      	b.n	8003ec6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb2:	f7fd ffa3 	bl	8001dfc <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	@ 0x64
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	f000 bcd4 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ef      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x3ee>
 8003ed2:	e013      	b.n	8003efc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003ed4:	f7fd ff92 	bl	8001dfc <HAL_GetTick>
 8003ed8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	e009      	b.n	8003ef0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fd ff8e 	bl	8001dfc <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d902      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	f000 bcbf 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef0:	4b31      	ldr	r3, [pc, #196]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ef      	bne.n	8003edc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05f      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d005      	beq.n	8003f1a <HAL_RCC_OscConfig+0x456>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	d114      	bne.n	8003f3e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d111      	bne.n	8003f3e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f000 bca3 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	4920      	ldr	r1, [pc, #128]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f3c:	e044      	b.n	8003fc8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d024      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003f46:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f50:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f52:	f7fd ff53 	bl	8001dfc <HAL_GetTick>
 8003f56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f58:	e009      	b.n	8003f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fd ff4f 	bl	8001dfc <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d902      	bls.n	8003f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	f000 bc80 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ef      	beq.n	8003f5a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	490b      	ldr	r1, [pc, #44]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	610b      	str	r3, [r1, #16]
 8003f8e:	e01b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003f90:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a08      	ldr	r2, [pc, #32]	@ (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f9c:	f7fd ff2e 	bl	8001dfc <HAL_GetTick>
 8003fa0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd ff2a 	bl	8001dfc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d904      	bls.n	8003fbc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	f000 bc5b 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
 8003fb8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fbc:	4baf      	ldr	r3, [pc, #700]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ed      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80c8 	beq.w	8004166 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fdc:	4ba7      	ldr	r3, [pc, #668]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d111      	bne.n	800400e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4ba4      	ldr	r3, [pc, #656]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8003fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff0:	4aa2      	ldr	r2, [pc, #648]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ffa:	4ba0      	ldr	r3, [pc, #640]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8003ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800400e:	4b9c      	ldr	r3, [pc, #624]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d119      	bne.n	800404e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800401a:	4b99      	ldr	r3, [pc, #612]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	4a98      	ldr	r2, [pc, #608]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004026:	f7fd fee9 	bl	8001dfc <HAL_GetTick>
 800402a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800402c:	e009      	b.n	8004042 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7fd fee5 	bl	8001dfc <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d902      	bls.n	8004042 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	f000 bc16 	b.w	800486e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004042:	4b8f      	ldr	r3, [pc, #572]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ef      	beq.n	800402e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d05f      	beq.n	8004116 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004056:	4b89      	ldr	r3, [pc, #548]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800405c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004068:	429a      	cmp	r2, r3
 800406a:	d037      	beq.n	80040dc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d006      	beq.n	8004084 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e3f4      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01b      	beq.n	80040c6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800408e:	4b7b      	ldr	r3, [pc, #492]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004094:	4a79      	ldr	r2, [pc, #484]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004096:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800409a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800409e:	f7fd fead 	bl	8001dfc <HAL_GetTick>
 80040a2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a6:	f7fd fea9 	bl	8001dfc <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e3da      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040b8:	4b70      	ldr	r3, [pc, #448]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 80040ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ef      	bne.n	80040a6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80040c6:	4b6d      	ldr	r3, [pc, #436]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 80040c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4969      	ldr	r1, [pc, #420]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80040dc:	4b67      	ldr	r3, [pc, #412]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 80040de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040e2:	4a66      	ldr	r2, [pc, #408]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 80040e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80040ec:	f7fd fe86 	bl	8001dfc <HAL_GetTick>
 80040f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fd fe82 	bl	8001dfc <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e3b3      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004106:	4b5d      	ldr	r3, [pc, #372]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800410c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ef      	beq.n	80040f4 <HAL_RCC_OscConfig+0x630>
 8004114:	e01b      	b.n	800414e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004116:	4b59      	ldr	r3, [pc, #356]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800411c:	4a57      	ldr	r2, [pc, #348]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800411e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004126:	f7fd fe69 	bl	8001dfc <HAL_GetTick>
 800412a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412e:	f7fd fe65 	bl	8001dfc <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b05      	cmp	r3, #5
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e396      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004140:	4b4e      	ldr	r3, [pc, #312]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ef      	bne.n	800412e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800414e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004156:	4b49      	ldr	r3, [pc, #292]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800415c:	4a47      	ldr	r2, [pc, #284]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800415e:	f023 0304 	bic.w	r3, r3, #4
 8004162:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8111 	beq.w	8004396 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417a:	4b40      	ldr	r3, [pc, #256]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800417c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d111      	bne.n	80041ac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b3c      	ldr	r3, [pc, #240]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418e:	4a3b      	ldr	r2, [pc, #236]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004198:	4b38      	ldr	r3, [pc, #224]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041ac:	4b34      	ldr	r3, [pc, #208]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d118      	bne.n	80041ea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80041b8:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	4a30      	ldr	r2, [pc, #192]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c4:	f7fd fe1a 	bl	8001dfc <HAL_GetTick>
 80041c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fd fe16 	bl	8001dfc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e347      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041de:	4b28      	ldr	r3, [pc, #160]	@ (8004280 <HAL_RCC_OscConfig+0x7bc>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01f      	beq.n	8004236 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d010      	beq.n	8004224 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004202:	4b1e      	ldr	r3, [pc, #120]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004208:	4a1c      	ldr	r2, [pc, #112]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004212:	4b1a      	ldr	r3, [pc, #104]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004218:	4a18      	ldr	r2, [pc, #96]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004222:	e018      	b.n	8004256 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004224:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800422a:	4a14      	ldr	r2, [pc, #80]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004234:	e00f      	b.n	8004256 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004236:	4b11      	ldr	r3, [pc, #68]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800423c:	4a0f      	ldr	r2, [pc, #60]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 8004248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800424c:	4a0b      	ldr	r2, [pc, #44]	@ (800427c <HAL_RCC_OscConfig+0x7b8>)
 800424e:	f023 0304 	bic.w	r3, r3, #4
 8004252:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d057      	beq.n	800430e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800425e:	f7fd fdcd 	bl	8001dfc <HAL_GetTick>
 8004262:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004264:	e00e      	b.n	8004284 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fd fdc9 	bl	8001dfc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d905      	bls.n	8004284 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e2f8      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
 800427c:	46020c00 	.word	0x46020c00
 8004280:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004284:	4b9c      	ldr	r3, [pc, #624]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0e9      	beq.n	8004266 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800429e:	4b96      	ldr	r3, [pc, #600]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80042a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042a4:	4a94      	ldr	r2, [pc, #592]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80042a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd fda4 	bl	8001dfc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e2d3      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80042c6:	4b8c      	ldr	r3, [pc, #560]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80042c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ed      	beq.n	80042b0 <HAL_RCC_OscConfig+0x7ec>
 80042d4:	e053      	b.n	800437e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042d6:	4b88      	ldr	r3, [pc, #544]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80042d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042dc:	4a86      	ldr	r2, [pc, #536]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80042de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042e6:	e00a      	b.n	80042fe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e8:	f7fd fd88 	bl	8001dfc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e2b7      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042fe:	4b7e      	ldr	r3, [pc, #504]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ed      	bne.n	80042e8 <HAL_RCC_OscConfig+0x824>
 800430c:	e037      	b.n	800437e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800430e:	f7fd fd75 	bl	8001dfc <HAL_GetTick>
 8004312:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004314:	e00a      	b.n	800432c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fd fd71 	bl	8001dfc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e2a0      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800432c:	4b72      	ldr	r3, [pc, #456]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800432e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ed      	bne.n	8004316 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800433a:	4b6f      	ldr	r3, [pc, #444]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800433c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01a      	beq.n	800437e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004348:	4b6b      	ldr	r3, [pc, #428]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800434a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800434e:	4a6a      	ldr	r2, [pc, #424]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004354:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fd fd4f 	bl	8001dfc <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e27e      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004370:	4b61      	ldr	r3, [pc, #388]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ed      	bne.n	800435a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800437e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004386:	4b5c      	ldr	r3, [pc, #368]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800438c:	4a5a      	ldr	r2, [pc, #360]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800438e:	f023 0304 	bic.w	r3, r3, #4
 8004392:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d036      	beq.n	8004410 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d019      	beq.n	80043de <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80043aa:	4b53      	ldr	r3, [pc, #332]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a52      	ldr	r2, [pc, #328]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80043b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80043b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043b6:	f7fd fd21 	bl	8001dfc <HAL_GetTick>
 80043ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043be:	f7fd fd1d 	bl	8001dfc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e24e      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043d0:	4b49      	ldr	r3, [pc, #292]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x8fa>
 80043dc:	e018      	b.n	8004410 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80043de:	4b46      	ldr	r3, [pc, #280]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a45      	ldr	r2, [pc, #276]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80043e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043ea:	f7fd fd07 	bl	8001dfc <HAL_GetTick>
 80043ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043f2:	f7fd fd03 	bl	8001dfc <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e234      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004404:	4b3c      	ldr	r3, [pc, #240]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d036      	beq.n	800448a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d019      	beq.n	8004458 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004424:	4b34      	ldr	r3, [pc, #208]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a33      	ldr	r2, [pc, #204]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800442a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800442e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004430:	f7fd fce4 	bl	8001dfc <HAL_GetTick>
 8004434:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004438:	f7fd fce0 	bl	8001dfc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e211      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800444a:	4b2b      	ldr	r3, [pc, #172]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x974>
 8004456:	e018      	b.n	800448a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004458:	4b27      	ldr	r3, [pc, #156]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a26      	ldr	r2, [pc, #152]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 800445e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004462:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004464:	f7fd fcca 	bl	8001dfc <HAL_GetTick>
 8004468:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800446c:	f7fd fcc6 	bl	8001dfc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1f7      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800447e:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d07f      	beq.n	8004596 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449a:	2b00      	cmp	r3, #0
 800449c:	d062      	beq.n	8004564 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800449e:	4b16      	ldr	r3, [pc, #88]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4a15      	ldr	r2, [pc, #84]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044a8:	6093      	str	r3, [r2, #8]
 80044aa:	4b13      	ldr	r3, [pc, #76]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	4910      	ldr	r1, [pc, #64]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80044c4:	d309      	bcc.n	80044da <HAL_RCC_OscConfig+0xa16>
 80044c6:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 021f 	bic.w	r2, r3, #31
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4909      	ldr	r1, [pc, #36]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60cb      	str	r3, [r1, #12]
 80044d8:	e02a      	b.n	8004530 <HAL_RCC_OscConfig+0xa6c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da0c      	bge.n	80044fc <HAL_RCC_OscConfig+0xa38>
 80044e2:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	015b      	lsls	r3, r3, #5
 80044f0:	4901      	ldr	r1, [pc, #4]	@ (80044f8 <HAL_RCC_OscConfig+0xa34>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60cb      	str	r3, [r1, #12]
 80044f6:	e01b      	b.n	8004530 <HAL_RCC_OscConfig+0xa6c>
 80044f8:	46020c00 	.word	0x46020c00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004504:	d30a      	bcc.n	800451c <HAL_RCC_OscConfig+0xa58>
 8004506:	4ba1      	ldr	r3, [pc, #644]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	499d      	ldr	r1, [pc, #628]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	60cb      	str	r3, [r1, #12]
 800451a:	e009      	b.n	8004530 <HAL_RCC_OscConfig+0xa6c>
 800451c:	4b9b      	ldr	r3, [pc, #620]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	03db      	lsls	r3, r3, #15
 800452a:	4998      	ldr	r1, [pc, #608]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004530:	4b96      	ldr	r3, [pc, #600]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a95      	ldr	r2, [pc, #596]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004536:	f043 0310 	orr.w	r3, r3, #16
 800453a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800453c:	f7fd fc5e 	bl	8001dfc <HAL_GetTick>
 8004540:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004544:	f7fd fc5a 	bl	8001dfc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e18b      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004556:	4b8d      	ldr	r3, [pc, #564]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0xa80>
 8004562:	e018      	b.n	8004596 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004564:	4b89      	ldr	r3, [pc, #548]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a88      	ldr	r2, [pc, #544]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004570:	f7fd fc44 	bl	8001dfc <HAL_GetTick>
 8004574:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004578:	f7fd fc40 	bl	8001dfc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e171      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800458a:	4b80      	ldr	r3, [pc, #512]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8166 	beq.w	800486c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045a6:	4b79      	ldr	r3, [pc, #484]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	f000 80f2 	beq.w	8004798 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f040 80c5 	bne.w	8004748 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b73      	ldr	r3, [pc, #460]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a72      	ldr	r2, [pc, #456]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80045c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045ca:	f7fd fc17 	bl	8001dfc <HAL_GetTick>
 80045ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d2:	f7fd fc13 	bl	8001dfc <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e144      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045e4:	4b69      	ldr	r3, [pc, #420]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f0:	4b66      	ldr	r3, [pc, #408]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d111      	bne.n	8004622 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	4b63      	ldr	r3, [pc, #396]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004604:	4a61      	ldr	r2, [pc, #388]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800460e:	4b5f      	ldr	r3, [pc, #380]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004622:	4b5b      	ldr	r3, [pc, #364]	@ (8004790 <HAL_RCC_OscConfig+0xccc>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800462a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800462e:	d102      	bne.n	8004636 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004636:	4b56      	ldr	r3, [pc, #344]	@ (8004790 <HAL_RCC_OscConfig+0xccc>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a55      	ldr	r2, [pc, #340]	@ (8004790 <HAL_RCC_OscConfig+0xccc>)
 800463c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004640:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004642:	4b52      	ldr	r3, [pc, #328]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004656:	3a01      	subs	r2, #1
 8004658:	0212      	lsls	r2, r2, #8
 800465a:	4311      	orrs	r1, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004660:	430a      	orrs	r2, r1
 8004662:	494a      	ldr	r1, [pc, #296]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	628b      	str	r3, [r1, #40]	@ 0x28
 8004668:	4b48      	ldr	r3, [pc, #288]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800466a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466c:	4b49      	ldr	r3, [pc, #292]	@ (8004794 <HAL_RCC_OscConfig+0xcd0>)
 800466e:	4013      	ands	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004674:	3a01      	subs	r2, #1
 8004676:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800467e:	3a01      	subs	r2, #1
 8004680:	0252      	lsls	r2, r2, #9
 8004682:	b292      	uxth	r2, r2
 8004684:	4311      	orrs	r1, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800468a:	3a01      	subs	r2, #1
 800468c:	0412      	lsls	r2, r2, #16
 800468e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004698:	3a01      	subs	r2, #1
 800469a:	0612      	lsls	r2, r2, #24
 800469c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80046a0:	430a      	orrs	r2, r1
 80046a2:	493a      	ldr	r1, [pc, #232]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80046a8:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	4a37      	ldr	r2, [pc, #220]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046ae:	f023 0310 	bic.w	r3, r3, #16
 80046b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b8:	4a34      	ldr	r2, [pc, #208]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80046be:	4b33      	ldr	r3, [pc, #204]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	4a32      	ldr	r2, [pc, #200]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046c4:	f043 0310 	orr.w	r3, r3, #16
 80046c8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80046ca:	4b30      	ldr	r3, [pc, #192]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	f023 020c 	bic.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	492d      	ldr	r1, [pc, #180]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80046dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80046e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <HAL_RCC_OscConfig+0xccc>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a29      	ldr	r2, [pc, #164]	@ (8004790 <HAL_RCC_OscConfig+0xccc>)
 80046ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046ee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80046f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b24      	ldr	r3, [pc, #144]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 80046fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046fe:	4a23      	ldr	r2, [pc, #140]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004700:	f023 0304 	bic.w	r3, r3, #4
 8004704:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004708:	4b20      	ldr	r3, [pc, #128]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800470e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004714:	f7fd fb72 	bl	8001dfc <HAL_GetTick>
 8004718:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471c:	f7fd fb6e 	bl	8001dfc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e09f      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800472e:	4b17      	ldr	r3, [pc, #92]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800473a:	4b14      	ldr	r3, [pc, #80]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	4a13      	ldr	r2, [pc, #76]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004744:	6293      	str	r3, [r2, #40]	@ 0x28
 8004746:	e091      	b.n	800486c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004748:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0f      	ldr	r2, [pc, #60]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800474e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004752:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004754:	f7fd fb52 	bl	8001dfc <HAL_GetTick>
 8004758:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475c:	f7fd fb4e 	bl	8001dfc <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e07f      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800476e:	4b07      	ldr	r3, [pc, #28]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800477a:	4b04      	ldr	r3, [pc, #16]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	4a03      	ldr	r2, [pc, #12]	@ (800478c <HAL_RCC_OscConfig+0xcc8>)
 8004780:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004784:	f023 0303 	bic.w	r3, r3, #3
 8004788:	6293      	str	r3, [r2, #40]	@ 0x28
 800478a:	e06f      	b.n	800486c <HAL_RCC_OscConfig+0xda8>
 800478c:	46020c00 	.word	0x46020c00
 8004790:	46020800 	.word	0x46020800
 8004794:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004798:	4b37      	ldr	r3, [pc, #220]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800479e:	4b36      	ldr	r3, [pc, #216]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 80047a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d039      	beq.n	8004820 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0203 	and.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d132      	bne.n	8004820 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d129      	bne.n	8004820 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d122      	bne.n	8004820 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d11a      	bne.n	8004820 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	0a5b      	lsrs	r3, r3, #9
 80047ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d111      	bne.n	8004820 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004808:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d108      	bne.n	8004820 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	0e1b      	lsrs	r3, r3, #24
 8004812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e024      	b.n	800486e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004824:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004832:	429a      	cmp	r2, r3
 8004834:	d01a      	beq.n	800486c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004836:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	4a0f      	ldr	r2, [pc, #60]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 800483c:	f023 0310 	bic.w	r3, r3, #16
 8004840:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fd fadb 	bl	8001dfc <HAL_GetTick>
 8004846:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004848:	bf00      	nop
 800484a:	f7fd fad7 	bl	8001dfc <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	4293      	cmp	r3, r2
 8004854:	d0f9      	beq.n	800484a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485a:	4a07      	ldr	r2, [pc, #28]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004860:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	4a04      	ldr	r2, [pc, #16]	@ (8004878 <HAL_RCC_OscConfig+0xdb4>)
 8004866:	f043 0310 	orr.w	r3, r3, #16
 800486a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3738      	adds	r7, #56	@ 0x38
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	46020c00 	.word	0x46020c00

0800487c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e1d9      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b9b      	ldr	r3, [pc, #620]	@ (8004b00 <HAL_RCC_ClockConfig+0x284>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d910      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b98      	ldr	r3, [pc, #608]	@ (8004b00 <HAL_RCC_ClockConfig+0x284>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 020f 	bic.w	r2, r3, #15
 80048a6:	4996      	ldr	r1, [pc, #600]	@ (8004b00 <HAL_RCC_ClockConfig+0x284>)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b94      	ldr	r3, [pc, #592]	@ (8004b00 <HAL_RCC_ClockConfig+0x284>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e1c1      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d010      	beq.n	80048ee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048d8:	429a      	cmp	r2, r3
 80048da:	d908      	bls.n	80048ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80048dc:	4b89      	ldr	r3, [pc, #548]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	4986      	ldr	r1, [pc, #536]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d012      	beq.n	8004920 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	4b81      	ldr	r3, [pc, #516]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004908:	429a      	cmp	r2, r3
 800490a:	d909      	bls.n	8004920 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800490c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	497a      	ldr	r1, [pc, #488]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 800491c:	4313      	orrs	r3, r2
 800491e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d010      	beq.n	800494e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	4b74      	ldr	r3, [pc, #464]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004938:	429a      	cmp	r2, r3
 800493a:	d908      	bls.n	800494e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800493c:	4b71      	ldr	r3, [pc, #452]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	496e      	ldr	r1, [pc, #440]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 800494a:	4313      	orrs	r3, r2
 800494c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	4b69      	ldr	r3, [pc, #420]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	429a      	cmp	r2, r3
 8004968:	d908      	bls.n	800497c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800496a:	4b66      	ldr	r3, [pc, #408]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4963      	ldr	r1, [pc, #396]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004978:	4313      	orrs	r3, r2
 800497a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80d2 	beq.w	8004b2e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800498a:	2300      	movs	r3, #0
 800498c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d143      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004996:	4b5b      	ldr	r3, [pc, #364]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d110      	bne.n	80049c6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80049a4:	4b57      	ldr	r3, [pc, #348]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 80049a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049aa:	4a56      	ldr	r2, [pc, #344]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 80049ac:	f043 0304 	orr.w	r3, r3, #4
 80049b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80049b4:	4b53      	ldr	r3, [pc, #332]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80049c6:	f7fd fa19 	bl	8001dfc <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80049cc:	4b4e      	ldr	r3, [pc, #312]	@ (8004b08 <HAL_RCC_ClockConfig+0x28c>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00f      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80049da:	f7fd fa0f 	bl	8001dfc <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e12b      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80049ec:	4b46      	ldr	r3, [pc, #280]	@ (8004b08 <HAL_RCC_ClockConfig+0x28c>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80049fe:	4b41      	ldr	r3, [pc, #260]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a04:	4a3f      	ldr	r2, [pc, #252]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a06:	f023 0304 	bic.w	r3, r3, #4
 8004a0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d121      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e112      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a26:	4b37      	ldr	r3, [pc, #220]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d115      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e106      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a3e:	4b31      	ldr	r3, [pc, #196]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0fa      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0f2      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004a5e:	4b29      	ldr	r3, [pc, #164]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4926      	ldr	r1, [pc, #152]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004a70:	f7fd f9c4 	bl	8001dfc <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d112      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fd f9bc 	bl	8001dfc <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0d6      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a96:	4b1b      	ldr	r3, [pc, #108]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b0c      	cmp	r3, #12
 8004aa0:	d1ee      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x204>
 8004aa2:	e044      	b.n	8004b2e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d112      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aae:	f7fd f9a5 	bl	8001dfc <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0bf      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d1ee      	bne.n	8004aae <HAL_RCC_ClockConfig+0x232>
 8004ad0:	e02d      	b.n	8004b2e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d123      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004adc:	f7fd f98e 	bl	8001dfc <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0a8      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004af2:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ee      	bne.n	8004adc <HAL_RCC_ClockConfig+0x260>
 8004afe:	e016      	b.n	8004b2e <HAL_RCC_ClockConfig+0x2b2>
 8004b00:	40022000 	.word	0x40022000
 8004b04:	46020c00 	.word	0x46020c00
 8004b08:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fd f976 	bl	8001dfc <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e090      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b22:	4b4a      	ldr	r3, [pc, #296]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d1ee      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	4b43      	ldr	r3, [pc, #268]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d208      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004b4a:	4b40      	ldr	r3, [pc, #256]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	493d      	ldr	r1, [pc, #244]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c50 <HAL_RCC_ClockConfig+0x3d4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d210      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b39      	ldr	r3, [pc, #228]	@ (8004c50 <HAL_RCC_ClockConfig+0x3d4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 020f 	bic.w	r2, r3, #15
 8004b72:	4937      	ldr	r1, [pc, #220]	@ (8004c50 <HAL_RCC_ClockConfig+0x3d4>)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b35      	ldr	r3, [pc, #212]	@ (8004c50 <HAL_RCC_ClockConfig+0x3d4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e05b      	b.n	8004c44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d010      	beq.n	8004bba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d208      	bcs.n	8004bba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b28      	ldr	r3, [pc, #160]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4925      	ldr	r1, [pc, #148]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d012      	beq.n	8004bec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d209      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	4919      	ldr	r1, [pc, #100]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d208      	bcs.n	8004c1a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004c08:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	490d      	ldr	r1, [pc, #52]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c1a:	f000 f821 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <HAL_RCC_ClockConfig+0x3d0>)
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	490a      	ldr	r1, [pc, #40]	@ (8004c54 <HAL_RCC_ClockConfig+0x3d8>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <HAL_RCC_ClockConfig+0x3dc>)
 8004c32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c34:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCC_ClockConfig+0x3e0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fd f855 	bl	8001ce8 <HAL_InitTick>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]

  return status;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	46020c00 	.word	0x46020c00
 8004c50:	40022000 	.word	0x40022000
 8004c54:	0800dfb8 	.word	0x0800dfb8
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	20000008 	.word	0x20000008

08004c60 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b08b      	sub	sp, #44	@ 0x2c
 8004c64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6e:	4b78      	ldr	r3, [pc, #480]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c78:	4b75      	ldr	r3, [pc, #468]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x34>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b0c      	cmp	r3, #12
 8004c8c:	d121      	bne.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d11e      	bne.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004c94:	4b6e      	ldr	r3, [pc, #440]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ca6:	0b1b      	lsrs	r3, r3, #12
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cae:	e005      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004cb0:	4b67      	ldr	r3, [pc, #412]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	0f1b      	lsrs	r3, r3, #28
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cbc:	4a65      	ldr	r2, [pc, #404]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d110      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cd0:	e00d      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d102      	bne.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cde:	4b5e      	ldr	r3, [pc, #376]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	e004      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cea:	4b5b      	ldr	r3, [pc, #364]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004cec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	f040 80a5 	bne.w	8004e40 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004cf6:	4b56      	ldr	r3, [pc, #344]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004d00:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004d0e:	4b50      	ldr	r3, [pc, #320]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0xe4>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d022      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x128>
 8004d42:	e043      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004e5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d56:	4b3e      	ldr	r3, [pc, #248]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d66:	ed97 6a01 	vldr	s12, [r7, #4]
 8004d6a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004e60 <HAL_RCC_GetSysClockFreq+0x200>
 8004d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d86:	e046      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004e5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004daa:	ed97 6a01 	vldr	s12, [r7, #4]
 8004dae:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004e60 <HAL_RCC_GetSysClockFreq+0x200>
 8004db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dca:	e024      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004df4:	ed97 6a01 	vldr	s12, [r7, #4]
 8004df8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004e60 <HAL_RCC_GetSysClockFreq+0x200>
 8004dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e14:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004e16:	4b0e      	ldr	r3, [pc, #56]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1a:	0e1b      	lsrs	r3, r3, #24
 8004e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e20:	3301      	adds	r3, #1
 8004e22:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 3a90 	vmov	r3, s15
 8004e3e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004e40:	6a3b      	ldr	r3, [r7, #32]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	372c      	adds	r7, #44	@ 0x2c
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	46020c00 	.word	0x46020c00
 8004e54:	0800dfd0 	.word	0x0800dfd0
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	4b742400 	.word	0x4b742400
 8004e60:	46000000 	.word	0x46000000

08004e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e68:	f7ff fefa 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <HAL_RCC_GetHCLKFreq+0x28>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	4906      	ldr	r1, [pc, #24]	@ (8004e90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	4a05      	ldr	r2, [pc, #20]	@ (8004e94 <HAL_RCC_GetHCLKFreq+0x30>)
 8004e80:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004e82:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <HAL_RCC_GetHCLKFreq+0x30>)
 8004e84:	681b      	ldr	r3, [r3, #0]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	46020c00 	.word	0x46020c00
 8004e90:	0800dfb8 	.word	0x0800dfb8
 8004e94:	20000000 	.word	0x20000000

08004e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004e9c:	f7ff ffe2 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4903      	ldr	r1, [pc, #12]	@ (8004ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	46020c00 	.word	0x46020c00
 8004ebc:	0800dfc8 	.word	0x0800dfc8

08004ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004ec4:	f7ff ffce 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4903      	ldr	r1, [pc, #12]	@ (8004ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	46020c00 	.word	0x46020c00
 8004ee4:	0800dfc8 	.word	0x0800dfc8

08004ee8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004eec:	f7ff ffba 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4903      	ldr	r1, [pc, #12]	@ (8004f0c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	46020c00 	.word	0x46020c00
 8004f0c:	0800dfc8 	.word	0x0800dfc8

08004f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f18:	4b3e      	ldr	r3, [pc, #248]	@ (8005014 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f26:	f7fe fd6f 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 8004f2a:	6178      	str	r0, [r7, #20]
 8004f2c:	e019      	b.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	4b39      	ldr	r3, [pc, #228]	@ (8005014 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f34:	4a37      	ldr	r2, [pc, #220]	@ (8005014 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f3e:	4b35      	ldr	r3, [pc, #212]	@ (8005014 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f4c:	f7fe fd5c 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 8004f50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4b30      	ldr	r3, [pc, #192]	@ (8005014 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f58:	4a2e      	ldr	r2, [pc, #184]	@ (8005014 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f5a:	f023 0304 	bic.w	r3, r3, #4
 8004f5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f68:	d003      	beq.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f70:	d109      	bne.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f78:	d202      	bcs.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004f7e:	e033      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004f84:	e030      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f8c:	d208      	bcs.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f94:	d102      	bne.n	8004f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004f96:	2303      	movs	r3, #3
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e025      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e035      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fa6:	d90f      	bls.n	8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004fb4:	d902      	bls.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	e015      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e012      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e00f      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fce:	d109      	bne.n	8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd6:	d102      	bne.n	8004fde <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004fd8:	2301      	movs	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	e004      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004fde:	2302      	movs	r3, #2
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	e001      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 020f 	bic.w	r2, r3, #15
 8004ff0:	4909      	ldr	r1, [pc, #36]	@ (8005018 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004ff8:	4b07      	ldr	r3, [pc, #28]	@ (8005018 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	46020c00 	.word	0x46020c00
 8005018:	40022000 	.word	0x40022000

0800501c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	@ 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005024:	4ba6      	ldr	r3, [pc, #664]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800502e:	4ba4      	ldr	r3, [pc, #656]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005038:	4ba1      	ldr	r3, [pc, #644]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	3301      	adds	r3, #1
 8005044:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005046:	4b9e      	ldr	r3, [pc, #632]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005052:	4b9b      	ldr	r3, [pc, #620]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005056:	08db      	lsrs	r3, r3, #3
 8005058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d062      	beq.n	800513a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b03      	cmp	r3, #3
 8005078:	f200 8081 	bhi.w	800517e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d024      	beq.n	80050cc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d17a      	bne.n	800517e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80052c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b89      	ldr	r3, [pc, #548]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800509c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80050aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ca:	e08f      	b.n	80051ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80050cc:	4b7c      	ldr	r3, [pc, #496]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80050d8:	4b79      	ldr	r3, [pc, #484]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	0f1b      	lsrs	r3, r3, #28
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	e006      	b.n	80050f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80050e4:	4b76      	ldr	r3, [pc, #472]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80050e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	0f1b      	lsrs	r3, r3, #28
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	4a76      	ldr	r2, [pc, #472]	@ (80052cc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005118:	ed97 6a02 	vldr	s12, [r7, #8]
 800511c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005128:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005134:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005138:	e058      	b.n	80051ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005144:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514c:	4b5c      	ldr	r3, [pc, #368]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800514e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800515c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005160:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005164:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005168:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800516c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005170:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005178:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800517c:	e036      	b.n	80051ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800517e:	4b50      	ldr	r3, [pc, #320]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800518a:	4b4d      	ldr	r3, [pc, #308]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0f1b      	lsrs	r3, r3, #28
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005196:	4b4a      	ldr	r3, [pc, #296]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	0f1b      	lsrs	r3, r3, #28
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	4a49      	ldr	r2, [pc, #292]	@ (80052cc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80051a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	ee07 3a90 	vmov	s15, r3
 80051b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ce:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80051ec:	4b34      	ldr	r3, [pc, #208]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80051f8:	4b31      	ldr	r3, [pc, #196]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fc:	0a5b      	lsrs	r3, r3, #9
 80051fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800520a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800520e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005212:	edd7 6a07 	vldr	s13, [r7, #28]
 8005216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800521e:	ee17 2a90 	vmov	r2, s15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e002      	b.n	800522e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800522e:	4b24      	ldr	r3, [pc, #144]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d017      	beq.n	800526a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800523a:	4b21      	ldr	r3, [pc, #132]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800523c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800524c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005250:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005254:	edd7 6a07 	vldr	s13, [r7, #28]
 8005258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800525c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005260:	ee17 2a90 	vmov	r2, s15
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	e002      	b.n	8005270 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005270:	4b13      	ldr	r3, [pc, #76]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d017      	beq.n	80052ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800527c:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800527e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800528e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005292:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005296:	edd7 6a07 	vldr	s13, [r7, #28]
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a2:	ee17 2a90 	vmov	r2, s15
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80052aa:	e002      	b.n	80052b2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	609a      	str	r2, [r3, #8]
}
 80052b2:	bf00      	nop
 80052b4:	3724      	adds	r7, #36	@ 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	46020c00 	.word	0x46020c00
 80052c4:	4b742400 	.word	0x4b742400
 80052c8:	46000000 	.word	0x46000000
 80052cc:	0800dfd0 	.word	0x0800dfd0

080052d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	@ 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80052d8:	4ba6      	ldr	r3, [pc, #664]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80052da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80052e2:	4ba4      	ldr	r3, [pc, #656]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80052ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	3301      	adds	r3, #1
 80052f8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80052fa:	4b9e      	ldr	r3, [pc, #632]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005306:	4b9b      	ldr	r3, [pc, #620]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	08db      	lsrs	r3, r3, #3
 800530c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d062      	beq.n	80053ee <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b03      	cmp	r3, #3
 800532c:	f200 8081 	bhi.w	8005432 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d024      	beq.n	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d17a      	bne.n	8005432 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b89      	ldr	r3, [pc, #548]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800535e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005362:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800557c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800536e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800537e:	e08f      	b.n	80054a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005380:	4b7c      	ldr	r3, [pc, #496]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800538c:	4b79      	ldr	r3, [pc, #484]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	0f1b      	lsrs	r3, r3, #28
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	e006      	b.n	80053a6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005398:	4b76      	ldr	r3, [pc, #472]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800539a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	0f1b      	lsrs	r3, r3, #28
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	4a76      	ldr	r2, [pc, #472]	@ (8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80053a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800557c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80053d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80053e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ec:	e058      	b.n	80054a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80053fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005400:	4b5c      	ldr	r3, [pc, #368]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005410:	ed97 6a02 	vldr	s12, [r7, #8]
 8005414:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800557c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005418:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800541c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005420:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005424:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005430:	e036      	b.n	80054a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005432:	4b50      	ldr	r3, [pc, #320]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800543e:	4b4d      	ldr	r3, [pc, #308]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	0f1b      	lsrs	r3, r3, #28
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	e006      	b.n	8005458 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800544a:	4b4a      	ldr	r3, [pc, #296]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800544c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	0f1b      	lsrs	r3, r3, #28
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	4a49      	ldr	r2, [pc, #292]	@ (8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005482:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800557c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800549e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80054a0:	4b34      	ldr	r3, [pc, #208]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054ac:	4b31      	ldr	r3, [pc, #196]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b0:	0a5b      	lsrs	r3, r3, #9
 80054b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80054be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d2:	ee17 2a90 	vmov	r2, s15
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e002      	b.n	80054e2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80054e2:	4b24      	ldr	r3, [pc, #144]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d017      	beq.n	800551e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054ee:	4b21      	ldr	r3, [pc, #132]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005504:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005508:	edd7 6a07 	vldr	s13, [r7, #28]
 800550c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005514:	ee17 2a90 	vmov	r2, s15
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	605a      	str	r2, [r3, #4]
 800551c:	e002      	b.n	8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005524:	4b13      	ldr	r3, [pc, #76]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d017      	beq.n	8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005530:	4b10      	ldr	r3, [pc, #64]	@ (8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005534:	0e1b      	lsrs	r3, r3, #24
 8005536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005546:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800554a:	edd7 6a07 	vldr	s13, [r7, #28]
 800554e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005556:	ee17 2a90 	vmov	r2, s15
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800555e:	e002      	b.n	8005566 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	609a      	str	r2, [r3, #8]
}
 8005566:	bf00      	nop
 8005568:	3724      	adds	r7, #36	@ 0x24
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	46020c00 	.word	0x46020c00
 8005578:	4b742400 	.word	0x4b742400
 800557c:	46000000 	.word	0x46000000
 8005580:	0800dfd0 	.word	0x0800dfd0

08005584 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	@ 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800558c:	4ba6      	ldr	r3, [pc, #664]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800558e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005594:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005596:	4ba4      	ldr	r3, [pc, #656]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80055a0:	4ba1      	ldr	r3, [pc, #644]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	3301      	adds	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80055ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80055ba:	4b9b      	ldr	r3, [pc, #620]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055be:	08db      	lsrs	r3, r3, #3
 80055c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d062      	beq.n	80056a2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	f200 8081 	bhi.w	80056e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d024      	beq.n	8005634 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d17a      	bne.n	80056e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80055fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005602:	4b89      	ldr	r3, [pc, #548]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005612:	ed97 6a02 	vldr	s12, [r7, #8]
 8005616:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800561a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800561e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005626:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800562a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005632:	e08f      	b.n	8005754 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005634:	4b7c      	ldr	r3, [pc, #496]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005640:	4b79      	ldr	r3, [pc, #484]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	0f1b      	lsrs	r3, r3, #28
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	e006      	b.n	800565a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800564c:	4b76      	ldr	r3, [pc, #472]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800564e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	0f1b      	lsrs	r3, r3, #28
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	4a76      	ldr	r2, [pc, #472]	@ (8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800565c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005680:	ed97 6a02 	vldr	s12, [r7, #8]
 8005684:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005694:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a0:	e058      	b.n	8005754 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80056b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b4:	4b5c      	ldr	r3, [pc, #368]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80056c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80056cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80056d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80056d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80056dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056e4:	e036      	b.n	8005754 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80056e6:	4b50      	ldr	r3, [pc, #320]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80056f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0f1b      	lsrs	r3, r3, #28
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	e006      	b.n	800570c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80056fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	0f1b      	lsrs	r3, r3, #28
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	4a49      	ldr	r2, [pc, #292]	@ (8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a02 	vldr	s12, [r7, #8]
 8005736:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005752:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005754:	4b34      	ldr	r3, [pc, #208]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005760:	4b31      	ldr	r3, [pc, #196]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005764:	0a5b      	lsrs	r3, r3, #9
 8005766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005776:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800577a:	edd7 6a07 	vldr	s13, [r7, #28]
 800577e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005786:	ee17 2a90 	vmov	r2, s15
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e002      	b.n	8005796 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005796:	4b24      	ldr	r3, [pc, #144]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d017      	beq.n	80057d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057a2:	4b21      	ldr	r3, [pc, #132]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80057b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c8:	ee17 2a90 	vmov	r2, s15
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80057d8:	4b13      	ldr	r3, [pc, #76]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057e4:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e8:	0e1b      	lsrs	r3, r3, #24
 80057ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80057f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580a:	ee17 2a90 	vmov	r2, s15
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005812:	e002      	b.n	800581a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	bf00      	nop
 800581c:	3724      	adds	r7, #36	@ 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	46020c00 	.word	0x46020c00
 800582c:	4b742400 	.word	0x4b742400
 8005830:	46000000 	.word	0x46000000
 8005834:	0800dfd0 	.word	0x0800dfd0

08005838 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	@ 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005846:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800584a:	430b      	orrs	r3, r1
 800584c:	d145      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800584e:	4b9b      	ldr	r3, [pc, #620]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800585a:	4b98      	ldr	r3, [pc, #608]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800585c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d108      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586e:	d104      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
 8005876:	f001 b912 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800587a:	4b90      	ldr	r3, [pc, #576]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800587c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005888:	d114      	bne.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005890:	d110      	bne.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005892:	4b8a      	ldr	r3, [pc, #552]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058a0:	d103      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80058a2:	23fa      	movs	r3, #250	@ 0xfa
 80058a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058a6:	f001 b8fa 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80058aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80058ae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058b0:	f001 b8f5 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80058b4:	4b81      	ldr	r3, [pc, #516]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058c0:	d107      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058c8:	d103      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80058ca:	4b7d      	ldr	r3, [pc, #500]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80058cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ce:	f001 b8e6 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d6:	f001 b8e2 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80058da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058de:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80058e2:	430b      	orrs	r3, r1
 80058e4:	d151      	bne.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80058e6:	4b75      	ldr	r3, [pc, #468]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80058e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	2b80      	cmp	r3, #128	@ 0x80
 80058f6:	d035      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	2b80      	cmp	r3, #128	@ 0x80
 80058fc:	d841      	bhi.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	2b60      	cmp	r3, #96	@ 0x60
 8005902:	d02a      	beq.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005906:	2b60      	cmp	r3, #96	@ 0x60
 8005908:	d83b      	bhi.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	2b40      	cmp	r3, #64	@ 0x40
 800590e:	d009      	beq.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	2b40      	cmp	r3, #64	@ 0x40
 8005914:	d835      	bhi.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591e:	2b20      	cmp	r3, #32
 8005920:	d012      	beq.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005922:	e02e      	b.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fb77 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005932:	f001 b8b4 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005936:	f107 0318 	add.w	r3, r7, #24
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fcc8 	bl	80052d0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005944:	f001 b8ab 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005948:	f107 030c 	add.w	r3, r7, #12
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fe19 	bl	8005584 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005956:	f001 b8a2 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800595a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800595e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005960:	f001 b89d 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005964:	4b55      	ldr	r3, [pc, #340]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005970:	d103      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005972:	4b54      	ldr	r3, [pc, #336]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005976:	f001 b892 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800597e:	f001 b88e 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005986:	f001 b88a 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800598a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005992:	430b      	orrs	r3, r1
 8005994:	d126      	bne.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005996:	4b49      	ldr	r3, [pc, #292]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005998:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800599c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80059a2:	4b46      	ldr	r3, [pc, #280]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ae:	d106      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80059b6:	4b43      	ldr	r3, [pc, #268]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80059b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ba:	f001 b870 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80059be:	4b3f      	ldr	r3, [pc, #252]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ca:	d107      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d2:	d103      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 80059d4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d8:	f001 b861 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e0:	f001 b85d 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80059e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80059ec:	430b      	orrs	r3, r1
 80059ee:	d171      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80059f0:	4b32      	ldr	r3, [pc, #200]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80059f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059f6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80059fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a02:	d034      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a0a:	d853      	bhi.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a12:	d00b      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a1a:	d84b      	bhi.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d016      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a28:	d009      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8005a2a:	e043      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff faf3 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a3a:	f001 b830 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a3e:	f107 0318 	add.w	r3, r7, #24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fc44 	bl	80052d0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a4c:	f001 b827 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5c:	d103      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a62:	f001 b81c 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a6a:	f001 b818 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a6e:	4b13      	ldr	r3, [pc, #76]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d118      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a7a:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0e1b      	lsrs	r3, r3, #24
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	e006      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8005a92:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	0e1b      	lsrs	r3, r3, #24
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005aa8:	f000 bff9 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ab0:	f000 bff5 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ab8:	f000 bff1 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005abc:	46020c00 	.word	0x46020c00
 8005ac0:	0007a120 	.word	0x0007a120
 8005ac4:	00f42400 	.word	0x00f42400
 8005ac8:	007a1200 	.word	0x007a1200
 8005acc:	02dc6c00 	.word	0x02dc6c00
 8005ad0:	0800dfd0 	.word	0x0800dfd0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005adc:	430b      	orrs	r3, r1
 8005ade:	d17f      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005ae0:	4ba8      	ldr	r3, [pc, #672]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005ae2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d165      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005af2:	4ba4      	ldr	r3, [pc, #656]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005af8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005afc:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b04:	d034      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b0c:	d853      	bhi.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b14:	d00b      	beq.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b1c:	d84b      	bhi.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d016      	beq.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005b2c:	e043      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fa72 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005b3c:	f000 bfaf 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b40:	f107 0318 	add.w	r3, r7, #24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fbc3 	bl	80052d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005b4e:	f000 bfa6 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005b52:	4b8c      	ldr	r3, [pc, #560]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5e:	d103      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8005b60:	4b89      	ldr	r3, [pc, #548]	@ (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005b64:	f000 bf9b 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005b6c:	f000 bf97 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b70:	4b84      	ldr	r3, [pc, #528]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d118      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b7c:	4b81      	ldr	r3, [pc, #516]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005b88:	4b7e      	ldr	r3, [pc, #504]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	0e1b      	lsrs	r3, r3, #24
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	e006      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8005b94:	4b7b      	ldr	r3, [pc, #492]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	0e1b      	lsrs	r3, r3, #24
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	4a7a      	ldr	r2, [pc, #488]	@ (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005baa:	f000 bf78 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005bb2:	f000 bf74 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005bba:	f000 bf70 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bc4:	d108      	bne.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fa26 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd4:	f000 bf63 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bdc:	f000 bf5f 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be4:	1e51      	subs	r1, r2, #1
 8005be6:	430b      	orrs	r3, r1
 8005be8:	d136      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bea:	4b66      	ldr	r3, [pc, #408]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7ff f960 	bl	8004ec0 <HAL_RCC_GetPCLK2Freq>
 8005c00:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c02:	f000 bf4c 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d104      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005c0c:	f7ff f828 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005c10:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c12:	f000 bf44 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005c16:	4b5b      	ldr	r3, [pc, #364]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c22:	d106      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d103      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8005c2a:	4b59      	ldr	r3, [pc, #356]	@ (8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c2e:	f000 bf36 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005c32:	4b54      	ldr	r3, [pc, #336]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d104      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8005c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4c:	f000 bf27 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c54:	f000 bf23 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5c:	1f11      	subs	r1, r2, #4
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	d136      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c62:	4b48      	ldr	r3, [pc, #288]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005c74:	f7ff f910 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8005c78:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c7a:	f000 bf10 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d104      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005c84:	f7fe ffec 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005c88:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c8a:	f000 bf08 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9a:	d106      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d103      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8005ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca6:	f000 befa 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005caa:	4b36      	ldr	r3, [pc, #216]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cba:	2b30      	cmp	r3, #48	@ 0x30
 8005cbc:	d104      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc4:	f000 beeb 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ccc:	f000 bee7 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd4:	f1a2 0108 	sub.w	r1, r2, #8
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	d136      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005cdc:	4b29      	ldr	r3, [pc, #164]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ce2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ce6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005cee:	f7ff f8d3 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8005cf2:	6378      	str	r0, [r7, #52]	@ 0x34
 8005cf4:	f000 bed3 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d104      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005cfe:	f7fe ffaf 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005d02:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d04:	f000 becb 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005d08:	4b1e      	ldr	r3, [pc, #120]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d14:	d106      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	2b80      	cmp	r3, #128	@ 0x80
 8005d1a:	d103      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8005d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d20:	f000 bebd 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005d24:	4b17      	ldr	r3, [pc, #92]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d107      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d36:	d104      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8005d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3e:	f000 beae 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d46:	f000 beaa 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4e:	f1a2 0110 	sub.w	r1, r2, #16
 8005d52:	430b      	orrs	r3, r1
 8005d54:	d141      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d56:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d68:	f7ff f896 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8005d6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d6e:	f000 be96 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d78:	d10c      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fe ff71 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005d7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d80:	f000 be8d 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005d84:	46020c00 	.word	0x46020c00
 8005d88:	02dc6c00 	.word	0x02dc6c00
 8005d8c:	0800dfd0 	.word	0x0800dfd0
 8005d90:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005d94:	4baa      	ldr	r3, [pc, #680]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da0:	d107      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005da8:	d103      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005daa:	4ba6      	ldr	r3, [pc, #664]	@ (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dae:	f000 be76 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005db2:	4ba3      	ldr	r3, [pc, #652]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d108      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dc6:	d104      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8005dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dce:	f000 be66 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd6:	f000 be62 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dde:	f1a2 0120 	sub.w	r1, r2, #32
 8005de2:	430b      	orrs	r3, r1
 8005de4:	d158      	bne.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005de6:	4b96      	ldr	r3, [pc, #600]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005df8:	f7ff f876 	bl	8004ee8 <HAL_RCC_GetPCLK3Freq>
 8005dfc:	6378      	str	r0, [r7, #52]	@ 0x34
 8005dfe:	f000 be4e 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d104      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e08:	f7fe ff2a 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005e0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e0e:	f000 be46 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005e12:	4b8b      	ldr	r3, [pc, #556]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d103      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8005e26:	4b87      	ldr	r3, [pc, #540]	@ (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e2a:	f000 be38 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005e2e:	4b84      	ldr	r3, [pc, #528]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d104      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8005e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e48:	f000 be29 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d11b      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d118      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e5e:	4b78      	ldr	r3, [pc, #480]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8005e6a:	4b75      	ldr	r3, [pc, #468]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	0e1b      	lsrs	r3, r3, #24
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	e006      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005e76:	4b72      	ldr	r3, [pc, #456]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	0e1b      	lsrs	r3, r3, #24
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	4a70      	ldr	r2, [pc, #448]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8c:	f000 be07 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e94:	f000 be03 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e9c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	d16c      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005ea4:	4b66      	ldr	r3, [pc, #408]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eaa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005eae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb6:	d104      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005eb8:	f7fe fed2 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005ebc:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ebe:	f000 bdee 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec8:	d108      	bne.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eca:	f107 0318 	add.w	r3, r7, #24
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff f9fe 	bl	80052d0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed8:	f000 bde1 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005ee2:	f7fe ffbf 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8005ee6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ee8:	f000 bdd9 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ef2:	d122      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ef4:	4b52      	ldr	r3, [pc, #328]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d118      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f00:	4b4f      	ldr	r3, [pc, #316]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	0e1b      	lsrs	r3, r3, #24
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	e006      	b.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005f18:	4b49      	ldr	r3, [pc, #292]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f1e:	041b      	lsls	r3, r3, #16
 8005f20:	0e1b      	lsrs	r3, r3, #24
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	4a48      	ldr	r2, [pc, #288]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2e:	f000 bdb6 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f36:	f000 bdb2 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005f3a:	4b41      	ldr	r3, [pc, #260]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f46:	d107      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f4e:	d103      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8005f50:	4b3c      	ldr	r3, [pc, #240]	@ (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f54:	f000 bda3 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005f58:	4b39      	ldr	r3, [pc, #228]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f64:	d107      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f6c:	d103      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8005f6e:	4b35      	ldr	r3, [pc, #212]	@ (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f72:	f000 bd94 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7a:	f000 bd90 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f82:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005f86:	430b      	orrs	r3, r1
 8005f88:	d160      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d84c      	bhi.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8005f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005fdd 	.word	0x08005fdd
 8005fa8:	08005fb9 	.word	0x08005fb9
 8005fac:	08005fcb 	.word	0x08005fcb
 8005fb0:	08005fe7 	.word	0x08005fe7
 8005fb4:	08005ff1 	.word	0x08005ff1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff f82d 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fc6:	f000 bd6a 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fca:	f107 030c 	add.w	r3, r7, #12
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fad8 	bl	8005584 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fd8:	f000 bd61 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005fdc:	f7fe ff42 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8005fe0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005fe2:	f000 bd5c 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005fe6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fec:	f000 bd57 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ff0:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d118      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ffc:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006008:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	e006      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006014:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	0e1b      	lsrs	r3, r3, #24
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	4a09      	ldr	r2, [pc, #36]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006028:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800602a:	f000 bd38 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006032:	f000 bd34 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800603a:	f000 bd30 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800603e:	bf00      	nop
 8006040:	46020c00 	.word	0x46020c00
 8006044:	00f42400 	.word	0x00f42400
 8006048:	0800dfd0 	.word	0x0800dfd0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800604c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006050:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006054:	430b      	orrs	r3, r1
 8006056:	d167      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006058:	4ba0      	ldr	r3, [pc, #640]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800605a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800605e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006062:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800606a:	d036      	beq.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006072:	d855      	bhi.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800607a:	d029      	beq.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006082:	d84d      	bhi.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800608a:	d013      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006092:	d845      	bhi.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	2b00      	cmp	r3, #0
 8006098:	d015      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d13e      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe ffb8 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060b0:	f000 bcf5 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060b4:	f107 030c 	add.w	r3, r7, #12
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fa63 	bl	8005584 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060c2:	f000 bcec 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80060c6:	f7fe fecd 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 80060ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80060cc:	f000 bce7 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80060d0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80060d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060d6:	f000 bce2 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80060da:	4b80      	ldr	r3, [pc, #512]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d118      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060e6:	4b7d      	ldr	r3, [pc, #500]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80060f2:	4b7a      	ldr	r3, [pc, #488]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	0e1b      	lsrs	r3, r3, #24
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	e006      	b.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80060fe:	4b77      	ldr	r3, [pc, #476]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	0e1b      	lsrs	r3, r3, #24
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	4a74      	ldr	r2, [pc, #464]	@ (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800610e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006114:	f000 bcc3 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800611c:	f000 bcbf 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006124:	f000 bcbb 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800612c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006130:	430b      	orrs	r3, r1
 8006132:	d14c      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006134:	4b69      	ldr	r3, [pc, #420]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800613a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800613e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006146:	f7fe fea7 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 800614a:	6378      	str	r0, [r7, #52]	@ 0x34
 800614c:	f000 bca7 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006156:	d104      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006158:	f7fe fd82 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 800615c:	6378      	str	r0, [r7, #52]	@ 0x34
 800615e:	f000 bc9e 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006162:	4b5e      	ldr	r3, [pc, #376]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800616a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616e:	d107      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006176:	d103      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8006178:	4b5a      	ldr	r3, [pc, #360]	@ (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
 800617c:	f000 bc8f 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006180:	4b56      	ldr	r3, [pc, #344]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d11c      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006192:	d118      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006194:	4b51      	ldr	r3, [pc, #324]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80061a0:	4b4e      	ldr	r3, [pc, #312]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	0e1b      	lsrs	r3, r3, #24
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	e006      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80061ac:	4b4b      	ldr	r3, [pc, #300]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80061ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	0e1b      	lsrs	r3, r3, #24
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	4a49      	ldr	r2, [pc, #292]	@ (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80061bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c2:	f000 bc6c 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ca:	f000 bc68 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80061ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d2:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80061d6:	430b      	orrs	r3, r1
 80061d8:	d14c      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80061da:	4b40      	ldr	r3, [pc, #256]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80061dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061e0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80061e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe fe54 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 80061f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80061f2:	f000 bc54 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fc:	d104      	bne.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061fe:	f7fe fd2f 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8006202:	6378      	str	r0, [r7, #52]	@ 0x34
 8006204:	f000 bc4b 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006208:	4b34      	ldr	r3, [pc, #208]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006214:	d107      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621c:	d103      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 800621e:	4b31      	ldr	r3, [pc, #196]	@ (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
 8006222:	f000 bc3c 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006226:	4b2d      	ldr	r3, [pc, #180]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b20      	cmp	r3, #32
 8006230:	d11c      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006238:	d118      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800623a:	4b28      	ldr	r3, [pc, #160]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006246:	4b25      	ldr	r3, [pc, #148]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	0e1b      	lsrs	r3, r3, #24
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	e006      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8006252:	4b22      	ldr	r3, [pc, #136]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	0e1b      	lsrs	r3, r3, #24
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	4a1f      	ldr	r2, [pc, #124]	@ (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
 8006268:	f000 bc19 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006270:	f000 bc15 	b.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006278:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800627c:	430b      	orrs	r3, r1
 800627e:	d157      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006280:	4b16      	ldr	r3, [pc, #88]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006286:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800628a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006290:	d02a      	beq.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	2bc0      	cmp	r3, #192	@ 0xc0
 8006296:	d848      	bhi.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	2b80      	cmp	r3, #128	@ 0x80
 800629c:	d00d      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	2b80      	cmp	r3, #128	@ 0x80
 80062a2:	d842      	bhi.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d011      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80062b0:	e03b      	b.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80062b2:	f7fe fe19 	bl	8004ee8 <HAL_RCC_GetPCLK3Freq>
 80062b6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80062b8:	e3f1      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062ba:	4b08      	ldr	r3, [pc, #32]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c6:	d102      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80062c8:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062cc:	e3e7      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062d2:	e3e4      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80062d4:	f7fe fcc4 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 80062d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80062da:	e3e0      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80062dc:	46020c00 	.word	0x46020c00
 80062e0:	0800dfd0 	.word	0x0800dfd0
 80062e4:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80062e8:	4ba3      	ldr	r3, [pc, #652]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d117      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062f4:	4ba0      	ldr	r3, [pc, #640]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8006300:	4b9d      	ldr	r3, [pc, #628]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	0e1b      	lsrs	r3, r3, #24
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	e006      	b.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 800630c:	4b9a      	ldr	r3, [pc, #616]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800630e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	0e1b      	lsrs	r3, r3, #24
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	4a98      	ldr	r2, [pc, #608]	@ (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800631c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006322:	e3bc      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006328:	e3b9      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800632e:	e3b6      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006334:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006338:	430b      	orrs	r3, r1
 800633a:	d147      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800633c:	4b8e      	ldr	r3, [pc, #568]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800633e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006342:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800634e:	f7fe fda3 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8006352:	6378      	str	r0, [r7, #52]	@ 0x34
 8006354:	e3a3      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800635c:	d103      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800635e:	f7fe fc7f 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8006362:	6378      	str	r0, [r7, #52]	@ 0x34
 8006364:	e39b      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006366:	4b84      	ldr	r3, [pc, #528]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006372:	d106      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800637a:	d102      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 800637c:	4b80      	ldr	r3, [pc, #512]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800637e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006380:	e38d      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006382:	4b7d      	ldr	r3, [pc, #500]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b20      	cmp	r3, #32
 800638c:	d11b      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006394:	d117      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006396:	4b78      	ldr	r3, [pc, #480]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80063a2:	4b75      	ldr	r3, [pc, #468]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	0e1b      	lsrs	r3, r3, #24
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80063ae:	4b72      	ldr	r3, [pc, #456]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80063b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	0e1b      	lsrs	r3, r3, #24
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	4a6f      	ldr	r2, [pc, #444]	@ (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80063be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c4:	e36b      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ca:	e368      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80063cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80063d4:	430b      	orrs	r3, r1
 80063d6:	d164      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80063d8:	4b67      	ldr	r3, [pc, #412]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80063da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d120      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063ea:	4b63      	ldr	r3, [pc, #396]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d117      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063f6:	4b60      	ldr	r3, [pc, #384]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006402:	4b5d      	ldr	r3, [pc, #372]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	0e1b      	lsrs	r3, r3, #24
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	e006      	b.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800640e:	4b5a      	ldr	r3, [pc, #360]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	0e1b      	lsrs	r3, r3, #24
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	4a57      	ldr	r2, [pc, #348]	@ (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800641e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006422:	637b      	str	r3, [r7, #52]	@ 0x34
 8006424:	e33b      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
 800642a:	e338      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800642c:	4b52      	ldr	r3, [pc, #328]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800642e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800643a:	d112      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006442:	d10e      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006444:	4b4c      	ldr	r3, [pc, #304]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800644a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800644e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006452:	d102      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8006454:	23fa      	movs	r3, #250	@ 0xfa
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006458:	e321      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800645a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006460:	e31d      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006462:	4b45      	ldr	r3, [pc, #276]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646e:	d106      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006476:	d102      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8006478:	4b41      	ldr	r3, [pc, #260]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800647a:	637b      	str	r3, [r7, #52]	@ 0x34
 800647c:	e30f      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800647e:	4b3e      	ldr	r3, [pc, #248]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d107      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006492:	d103      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8006494:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006498:	637b      	str	r3, [r7, #52]	@ 0x34
 800649a:	e300      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a0:	e2fd      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80064a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a6:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80064aa:	430b      	orrs	r3, r1
 80064ac:	d16a      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80064ae:	4b32      	ldr	r3, [pc, #200]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d120      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d117      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80064d8:	4b27      	ldr	r3, [pc, #156]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	0e1b      	lsrs	r3, r3, #24
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	e006      	b.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80064e4:	4b24      	ldr	r3, [pc, #144]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	0e1b      	lsrs	r3, r3, #24
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	4a22      	ldr	r2, [pc, #136]	@ (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80064f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fa:	e2d0      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006500:	e2cd      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006502:	4b1d      	ldr	r3, [pc, #116]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800650c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006510:	d112      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006518:	d10e      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800651a:	4b17      	ldr	r3, [pc, #92]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800651c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006528:	d102      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800652a:	23fa      	movs	r3, #250	@ 0xfa
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800652e:	e2b6      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006530:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006534:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006536:	e2b2      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006538:	4b0f      	ldr	r3, [pc, #60]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006544:	d106      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654c:	d102      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800654e:	4b0c      	ldr	r3, [pc, #48]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006550:	637b      	str	r3, [r7, #52]	@ 0x34
 8006552:	e2a4      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006554:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d107      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006568:	d103      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006570:	e295      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34
 8006576:	e292      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006578:	46020c00 	.word	0x46020c00
 800657c:	0800dfd0 	.word	0x0800dfd0
 8006580:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006588:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800658c:	430b      	orrs	r3, r1
 800658e:	d147      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006590:	4b9a      	ldr	r3, [pc, #616]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006596:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800659a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065a2:	f7fe fc79 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 80065a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80065a8:	e279      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80065aa:	4b94      	ldr	r3, [pc, #592]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80065ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b8:	d112      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065c0:	d10e      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80065c2:	4b8e      	ldr	r3, [pc, #568]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80065c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065d0:	d102      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 80065d2:	23fa      	movs	r3, #250	@ 0xfa
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80065d6:	e262      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80065d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80065de:	e25e      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80065e0:	4b86      	ldr	r3, [pc, #536]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ec:	d106      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80065f4:	d102      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 80065f6:	4b82      	ldr	r3, [pc, #520]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80065f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065fa:	e250      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80065fc:	4b7f      	ldr	r3, [pc, #508]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80065fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d107      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006610:	d103      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8006612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	e241      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
 800661e:	e23e      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006624:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006628:	430b      	orrs	r3, r1
 800662a:	d12d      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800662c:	4b73      	ldr	r3, [pc, #460]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800662e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006632:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006636:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006638:	4b70      	ldr	r3, [pc, #448]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006644:	d105      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 800664c:	4b6c      	ldr	r3, [pc, #432]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006650:	e225      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006658:	d107      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800665a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fcdc 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	637b      	str	r3, [r7, #52]	@ 0x34
 8006668:	e219      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006670:	d107      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006672:	f107 0318 	add.w	r3, r7, #24
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fe2a 	bl	80052d0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006680:	e20d      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
 8006686:	e20a      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006690:	430b      	orrs	r3, r1
 8006692:	d156      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006694:	4b59      	ldr	r3, [pc, #356]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800669a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800669e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066a6:	d028      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066ae:	d845      	bhi.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066b6:	d013      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066be:	d83d      	bhi.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d004      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066cc:	d004      	beq.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 80066ce:	e035      	b.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fe fbf6 	bl	8004ec0 <HAL_RCC_GetPCLK2Freq>
 80066d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80066d6:	e1e2      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80066d8:	f7fe fac2 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 80066dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80066de:	e1de      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066e0:	4b46      	ldr	r3, [pc, #280]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ec:	d102      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 80066ee:	4b44      	ldr	r3, [pc, #272]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066f2:	e1d4      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066f8:	e1d1      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066fa:	4b40      	ldr	r3, [pc, #256]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b20      	cmp	r3, #32
 8006704:	d117      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006706:	4b3d      	ldr	r3, [pc, #244]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8006712:	4b3a      	ldr	r3, [pc, #232]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	0e1b      	lsrs	r3, r3, #24
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	e006      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800671e:	4b37      	ldr	r3, [pc, #220]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006724:	041b      	lsls	r3, r3, #16
 8006726:	0e1b      	lsrs	r3, r3, #24
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	4a35      	ldr	r2, [pc, #212]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 800672e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006734:	e1b3      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800673a:	e1b0      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006740:	e1ad      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006746:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800674a:	430b      	orrs	r3, r1
 800674c:	d15c      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800674e:	4b2b      	ldr	r3, [pc, #172]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006758:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006760:	d028      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006768:	d845      	bhi.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006770:	d013      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006778:	d83d      	bhi.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8006780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006786:	d004      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8006788:	e035      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800678a:	f7fe fb85 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 800678e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006790:	e185      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006792:	f7fe fa65 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8006796:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006798:	e181      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800679a:	4b18      	ldr	r3, [pc, #96]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a6:	d102      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 80067a8:	4b15      	ldr	r3, [pc, #84]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067ac:	e177      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067b2:	e174      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067b4:	4b11      	ldr	r3, [pc, #68]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d117      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067c0:	4b0e      	ldr	r3, [pc, #56]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 80067cc:	4b0b      	ldr	r3, [pc, #44]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	0e1b      	lsrs	r3, r3, #24
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	e006      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 80067d8:	4b08      	ldr	r3, [pc, #32]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80067da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067de:	041b      	lsls	r3, r3, #16
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	4a07      	ldr	r2, [pc, #28]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80067e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067ee:	e156      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f4:	e153      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067fa:	e150      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80067fc:	46020c00 	.word	0x46020c00
 8006800:	00f42400 	.word	0x00f42400
 8006804:	0800dfd0 	.word	0x0800dfd0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006810:	430b      	orrs	r3, r1
 8006812:	d176      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006814:	4ba4      	ldr	r3, [pc, #656]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800681a:	f003 0318 	and.w	r3, r3, #24
 800681e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	2b18      	cmp	r3, #24
 8006824:	d86a      	bhi.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8006826:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	08006891 	.word	0x08006891
 8006830:	080068fd 	.word	0x080068fd
 8006834:	080068fd 	.word	0x080068fd
 8006838:	080068fd 	.word	0x080068fd
 800683c:	080068fd 	.word	0x080068fd
 8006840:	080068fd 	.word	0x080068fd
 8006844:	080068fd 	.word	0x080068fd
 8006848:	080068fd 	.word	0x080068fd
 800684c:	08006899 	.word	0x08006899
 8006850:	080068fd 	.word	0x080068fd
 8006854:	080068fd 	.word	0x080068fd
 8006858:	080068fd 	.word	0x080068fd
 800685c:	080068fd 	.word	0x080068fd
 8006860:	080068fd 	.word	0x080068fd
 8006864:	080068fd 	.word	0x080068fd
 8006868:	080068fd 	.word	0x080068fd
 800686c:	080068a1 	.word	0x080068a1
 8006870:	080068fd 	.word	0x080068fd
 8006874:	080068fd 	.word	0x080068fd
 8006878:	080068fd 	.word	0x080068fd
 800687c:	080068fd 	.word	0x080068fd
 8006880:	080068fd 	.word	0x080068fd
 8006884:	080068fd 	.word	0x080068fd
 8006888:	080068fd 	.word	0x080068fd
 800688c:	080068bb 	.word	0x080068bb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006890:	f7fe fb2a 	bl	8004ee8 <HAL_RCC_GetPCLK3Freq>
 8006894:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006896:	e102      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006898:	f7fe f9e2 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 800689c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800689e:	e0fe      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068a0:	4b81      	ldr	r3, [pc, #516]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ac:	d102      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 80068ae:	4b7f      	ldr	r3, [pc, #508]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068b2:	e0f4      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068b8:	e0f1      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068ba:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d117      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068c6:	4b78      	ldr	r3, [pc, #480]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80068d2:	4b75      	ldr	r3, [pc, #468]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	0e1b      	lsrs	r3, r3, #24
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 80068de:	4b72      	ldr	r3, [pc, #456]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80068e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	0e1b      	lsrs	r3, r3, #24
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	4a70      	ldr	r2, [pc, #448]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80068ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068f4:	e0d3      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068fa:	e0d0      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006900:	e0cd      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006906:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800690a:	430b      	orrs	r3, r1
 800690c:	d155      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800690e:	4b66      	ldr	r3, [pc, #408]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006910:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006914:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006918:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006920:	d013      	beq.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006928:	d844      	bhi.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006930:	d013      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006938:	d83c      	bhi.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d014      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8006940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006946:	d014      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8006948:	e034      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800694a:	f107 0318 	add.w	r3, r7, #24
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fcbe 	bl	80052d0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006958:	e0a1      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800695a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fb5c 	bl	800501c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006968:	e099      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800696a:	f7fe f979 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 800696e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006970:	e095      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006972:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b20      	cmp	r3, #32
 800697c:	d117      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800697e:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800698a:	4b47      	ldr	r3, [pc, #284]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	0e1b      	lsrs	r3, r3, #24
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8006996:	4b44      	ldr	r3, [pc, #272]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800699c:	041b      	lsls	r3, r3, #16
 800699e:	0e1b      	lsrs	r3, r3, #24
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	4a42      	ldr	r2, [pc, #264]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80069a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069ac:	e077      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069b2:	e074      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069b8:	e071      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80069ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069be:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80069c2:	430b      	orrs	r3, r1
 80069c4:	d131      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80069c6:	4b38      	ldr	r3, [pc, #224]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80069c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80069d2:	4b35      	ldr	r3, [pc, #212]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80069d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d106      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 80069e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ec:	e057      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80069ee:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80069f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069fc:	d112      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a04:	d10e      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a06:	4b28      	ldr	r3, [pc, #160]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a14:	d102      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8006a16:	23fa      	movs	r3, #250	@ 0xfa
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a1a:	e040      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a22:	e03c      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a28:	e039      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006a32:	430b      	orrs	r3, r1
 8006a34:	d131      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006a36:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006a38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a3c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a40:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006a42:	4b19      	ldr	r3, [pc, #100]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8006a56:	4b17      	ldr	r3, [pc, #92]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	e020      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006a5c:	4b12      	ldr	r3, [pc, #72]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a68:	d106      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a70:	d102      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006a72:	4b11      	ldr	r3, [pc, #68]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a76:	e012      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a84:	d106      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a8c:	d102      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8006a8e:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a92:	e004      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a98:	e001      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3738      	adds	r7, #56	@ 0x38
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	46020c00 	.word	0x46020c00
 8006aac:	00f42400 	.word	0x00f42400
 8006ab0:	0800dfd0 	.word	0x0800dfd0
 8006ab4:	02dc6c00 	.word	0x02dc6c00
 8006ab8:	016e3600 	.word	0x016e3600

08006abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e049      	b.n	8006b62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fa fd7c 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f001 f8dc 	bl	8007cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d001      	beq.n	8006b84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e06a      	b.n	8006c5a <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a35      	ldr	r2, [pc, #212]	@ (8006c68 <HAL_TIM_Base_Start+0xfc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d040      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a34      	ldr	r2, [pc, #208]	@ (8006c6c <HAL_TIM_Base_Start+0x100>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d03b      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba8:	d036      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bb2:	d031      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8006c70 <HAL_TIM_Base_Start+0x104>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02c      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006c74 <HAL_TIM_Base_Start+0x108>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d027      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8006c78 <HAL_TIM_Base_Start+0x10c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d022      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a29      	ldr	r2, [pc, #164]	@ (8006c7c <HAL_TIM_Base_Start+0x110>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d01d      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a27      	ldr	r2, [pc, #156]	@ (8006c80 <HAL_TIM_Base_Start+0x114>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d018      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a26      	ldr	r2, [pc, #152]	@ (8006c84 <HAL_TIM_Base_Start+0x118>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a24      	ldr	r2, [pc, #144]	@ (8006c88 <HAL_TIM_Base_Start+0x11c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00e      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a23      	ldr	r2, [pc, #140]	@ (8006c8c <HAL_TIM_Base_Start+0x120>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a21      	ldr	r2, [pc, #132]	@ (8006c90 <HAL_TIM_Base_Start+0x124>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <HAL_TIM_Base_Start+0xac>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a20      	ldr	r2, [pc, #128]	@ (8006c94 <HAL_TIM_Base_Start+0x128>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d115      	bne.n	8006c44 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c98 <HAL_TIM_Base_Start+0x12c>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b06      	cmp	r3, #6
 8006c28:	d015      	beq.n	8006c56 <HAL_TIM_Base_Start+0xea>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c30:	d011      	beq.n	8006c56 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0201 	orr.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c42:	e008      	b.n	8006c56 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e000      	b.n	8006c58 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	50012c00 	.word	0x50012c00
 8006c70:	40000400 	.word	0x40000400
 8006c74:	50000400 	.word	0x50000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	50000800 	.word	0x50000800
 8006c80:	40000c00 	.word	0x40000c00
 8006c84:	50000c00 	.word	0x50000c00
 8006c88:	40013400 	.word	0x40013400
 8006c8c:	50013400 	.word	0x50013400
 8006c90:	40014000 	.word	0x40014000
 8006c94:	50014000 	.word	0x50014000
 8006c98:	00010007 	.word	0x00010007

08006c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e049      	b.n	8006d42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f841 	bl	8006d4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f000 ffec 	bl	8007cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <HAL_TIM_PWM_Start+0x24>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	bf14      	ite	ne
 8006d7c:	2301      	movne	r3, #1
 8006d7e:	2300      	moveq	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	e03c      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d109      	bne.n	8006d9e <HAL_TIM_PWM_Start+0x3e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	bf14      	ite	ne
 8006d96:	2301      	movne	r3, #1
 8006d98:	2300      	moveq	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	e02f      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d109      	bne.n	8006db8 <HAL_TIM_PWM_Start+0x58>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	bf14      	ite	ne
 8006db0:	2301      	movne	r3, #1
 8006db2:	2300      	moveq	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	e022      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b0c      	cmp	r3, #12
 8006dbc:	d109      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0x72>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	bf14      	ite	ne
 8006dca:	2301      	movne	r3, #1
 8006dcc:	2300      	moveq	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	e015      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b10      	cmp	r3, #16
 8006dd6:	d109      	bne.n	8006dec <HAL_TIM_PWM_Start+0x8c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	e008      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	bf14      	ite	ne
 8006df8:	2301      	movne	r3, #1
 8006dfa:	2300      	moveq	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e0d8      	b.n	8006fb8 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <HAL_TIM_PWM_Start+0xb6>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e14:	e023      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d104      	bne.n	8006e26 <HAL_TIM_PWM_Start+0xc6>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e24:	e01b      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_PWM_Start+0xd6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e34:	e013      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b0c      	cmp	r3, #12
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_PWM_Start+0xe6>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e44:	e00b      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_PWM_Start+0xf6>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e54:	e003      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 feb0 	bl	8008bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a53      	ldr	r2, [pc, #332]	@ (8006fc0 <HAL_TIM_PWM_Start+0x260>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d02c      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a52      	ldr	r2, [pc, #328]	@ (8006fc4 <HAL_TIM_PWM_Start+0x264>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d027      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a50      	ldr	r2, [pc, #320]	@ (8006fc8 <HAL_TIM_PWM_Start+0x268>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d022      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a4f      	ldr	r2, [pc, #316]	@ (8006fcc <HAL_TIM_PWM_Start+0x26c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d01d      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a4d      	ldr	r2, [pc, #308]	@ (8006fd0 <HAL_TIM_PWM_Start+0x270>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d018      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8006fd4 <HAL_TIM_PWM_Start+0x274>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d013      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a4a      	ldr	r2, [pc, #296]	@ (8006fd8 <HAL_TIM_PWM_Start+0x278>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00e      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a49      	ldr	r2, [pc, #292]	@ (8006fdc <HAL_TIM_PWM_Start+0x27c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d009      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a47      	ldr	r2, [pc, #284]	@ (8006fe0 <HAL_TIM_PWM_Start+0x280>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x170>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a46      	ldr	r2, [pc, #280]	@ (8006fe4 <HAL_TIM_PWM_Start+0x284>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIM_PWM_Start+0x174>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x176>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ee8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a34      	ldr	r2, [pc, #208]	@ (8006fc0 <HAL_TIM_PWM_Start+0x260>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d040      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a32      	ldr	r2, [pc, #200]	@ (8006fc4 <HAL_TIM_PWM_Start+0x264>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d03b      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f06:	d036      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f10:	d031      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a34      	ldr	r2, [pc, #208]	@ (8006fe8 <HAL_TIM_PWM_Start+0x288>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d02c      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a32      	ldr	r2, [pc, #200]	@ (8006fec <HAL_TIM_PWM_Start+0x28c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d027      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a31      	ldr	r2, [pc, #196]	@ (8006ff0 <HAL_TIM_PWM_Start+0x290>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d022      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2f      	ldr	r2, [pc, #188]	@ (8006ff4 <HAL_TIM_PWM_Start+0x294>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01d      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ff8 <HAL_TIM_PWM_Start+0x298>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d018      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a2c      	ldr	r2, [pc, #176]	@ (8006ffc <HAL_TIM_PWM_Start+0x29c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc8 <HAL_TIM_PWM_Start+0x268>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00e      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006fcc <HAL_TIM_PWM_Start+0x26c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1a      	ldr	r2, [pc, #104]	@ (8006fd0 <HAL_TIM_PWM_Start+0x270>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x216>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a18      	ldr	r2, [pc, #96]	@ (8006fd4 <HAL_TIM_PWM_Start+0x274>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d115      	bne.n	8006fa2 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	4b20      	ldr	r3, [pc, #128]	@ (8007000 <HAL_TIM_PWM_Start+0x2a0>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b06      	cmp	r3, #6
 8006f86:	d015      	beq.n	8006fb4 <HAL_TIM_PWM_Start+0x254>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f8e:	d011      	beq.n	8006fb4 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa0:	e008      	b.n	8006fb4 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e000      	b.n	8006fb6 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	50012c00 	.word	0x50012c00
 8006fc8:	40013400 	.word	0x40013400
 8006fcc:	50013400 	.word	0x50013400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	50014000 	.word	0x50014000
 8006fd8:	40014400 	.word	0x40014400
 8006fdc:	50014400 	.word	0x50014400
 8006fe0:	40014800 	.word	0x40014800
 8006fe4:	50014800 	.word	0x50014800
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	50000400 	.word	0x50000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	50000800 	.word	0x50000800
 8006ff8:	40000c00 	.word	0x40000c00
 8006ffc:	50000c00 	.word	0x50000c00
 8007000:	00010007 	.word	0x00010007

08007004 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e049      	b.n	80070aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f841 	bl	80070b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f000 fe38 	bl	8007cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_TIM_IC_Start_DMA+0x22>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	e023      	b.n	8007132 <HAL_TIM_IC_Start_DMA+0x6a>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_IC_Start_DMA+0x32>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	e01b      	b.n	8007132 <HAL_TIM_IC_Start_DMA+0x6a>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d104      	bne.n	800710a <HAL_TIM_IC_Start_DMA+0x42>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007106:	b2db      	uxtb	r3, r3
 8007108:	e013      	b.n	8007132 <HAL_TIM_IC_Start_DMA+0x6a>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b0c      	cmp	r3, #12
 800710e:	d104      	bne.n	800711a <HAL_TIM_IC_Start_DMA+0x52>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007116:	b2db      	uxtb	r3, r3
 8007118:	e00b      	b.n	8007132 <HAL_TIM_IC_Start_DMA+0x6a>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b10      	cmp	r3, #16
 800711e:	d104      	bne.n	800712a <HAL_TIM_IC_Start_DMA+0x62>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007126:	b2db      	uxtb	r3, r3
 8007128:	e003      	b.n	8007132 <HAL_TIM_IC_Start_DMA+0x6a>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007130:	b2db      	uxtb	r3, r3
 8007132:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <HAL_TIM_IC_Start_DMA+0x7c>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007140:	b2db      	uxtb	r3, r3
 8007142:	e013      	b.n	800716c <HAL_TIM_IC_Start_DMA+0xa4>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b04      	cmp	r3, #4
 8007148:	d104      	bne.n	8007154 <HAL_TIM_IC_Start_DMA+0x8c>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007150:	b2db      	uxtb	r3, r3
 8007152:	e00b      	b.n	800716c <HAL_TIM_IC_Start_DMA+0xa4>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b08      	cmp	r3, #8
 8007158:	d104      	bne.n	8007164 <HAL_TIM_IC_Start_DMA+0x9c>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e003      	b.n	800716c <HAL_TIM_IC_Start_DMA+0xa4>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800716a:	b2db      	uxtb	r3, r3
 800716c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800716e:	7dbb      	ldrb	r3, [r7, #22]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d002      	beq.n	800717a <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007174:	7d7b      	ldrb	r3, [r7, #21]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d101      	bne.n	800717e <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800717a:	2302      	movs	r3, #2
 800717c:	e17a      	b.n	8007474 <HAL_TIM_IC_Start_DMA+0x3ac>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800717e:	7dbb      	ldrb	r3, [r7, #22]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d153      	bne.n	800722c <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007184:	7d7b      	ldrb	r3, [r7, #21]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d150      	bne.n	800722c <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_TIM_IC_Start_DMA+0xce>
 8007190:	887b      	ldrh	r3, [r7, #2]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e16c      	b.n	8007474 <HAL_TIM_IC_Start_DMA+0x3ac>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_TIM_IC_Start_DMA+0xe2>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071a8:	e023      	b.n	80071f2 <HAL_TIM_IC_Start_DMA+0x12a>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_IC_Start_DMA+0xf2>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071b8:	e01b      	b.n	80071f2 <HAL_TIM_IC_Start_DMA+0x12a>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d104      	bne.n	80071ca <HAL_TIM_IC_Start_DMA+0x102>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071c8:	e013      	b.n	80071f2 <HAL_TIM_IC_Start_DMA+0x12a>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b0c      	cmp	r3, #12
 80071ce:	d104      	bne.n	80071da <HAL_TIM_IC_Start_DMA+0x112>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071d8:	e00b      	b.n	80071f2 <HAL_TIM_IC_Start_DMA+0x12a>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d104      	bne.n	80071ea <HAL_TIM_IC_Start_DMA+0x122>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071e8:	e003      	b.n	80071f2 <HAL_TIM_IC_Start_DMA+0x12a>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2202      	movs	r2, #2
 80071ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_IC_Start_DMA+0x13a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8007200:	e016      	b.n	8007230 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b04      	cmp	r3, #4
 8007206:	d104      	bne.n	8007212 <HAL_TIM_IC_Start_DMA+0x14a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8007210:	e00e      	b.n	8007230 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d104      	bne.n	8007222 <HAL_TIM_IC_Start_DMA+0x15a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 8007220:	e006      	b.n	8007230 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2202      	movs	r2, #2
 8007226:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 800722a:	e001      	b.n	8007230 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e121      	b.n	8007474 <HAL_TIM_IC_Start_DMA+0x3ac>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	4618      	mov	r0, r3
 800723a:	f001 fcc7 	bl	8008bcc <TIM_CCxChannelCmd>

  switch (Channel)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	f200 80ad 	bhi.w	80073a0 <HAL_TIM_IC_Start_DMA+0x2d8>
 8007246:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <HAL_TIM_IC_Start_DMA+0x184>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	08007281 	.word	0x08007281
 8007250:	080073a1 	.word	0x080073a1
 8007254:	080073a1 	.word	0x080073a1
 8007258:	080073a1 	.word	0x080073a1
 800725c:	080072c9 	.word	0x080072c9
 8007260:	080073a1 	.word	0x080073a1
 8007264:	080073a1 	.word	0x080073a1
 8007268:	080073a1 	.word	0x080073a1
 800726c:	08007311 	.word	0x08007311
 8007270:	080073a1 	.word	0x080073a1
 8007274:	080073a1 	.word	0x080073a1
 8007278:	080073a1 	.word	0x080073a1
 800727c:	08007359 	.word	0x08007359
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007284:	4a7d      	ldr	r2, [pc, #500]	@ (800747c <HAL_TIM_IC_Start_DMA+0x3b4>)
 8007286:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	4a7c      	ldr	r2, [pc, #496]	@ (8007480 <HAL_TIM_IC_Start_DMA+0x3b8>)
 800728e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	4a7b      	ldr	r2, [pc, #492]	@ (8007484 <HAL_TIM_IC_Start_DMA+0x3bc>)
 8007296:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3334      	adds	r3, #52	@ 0x34
 80072a2:	4619      	mov	r1, r3
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	887b      	ldrh	r3, [r7, #2]
 80072a8:	f000 fbfc 	bl	8007aa4 <TIM_DMA_Start_IT>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0de      	b.n	8007474 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072c4:	60da      	str	r2, [r3, #12]
      break;
 80072c6:	e06e      	b.n	80073a6 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072cc:	4a6b      	ldr	r2, [pc, #428]	@ (800747c <HAL_TIM_IC_Start_DMA+0x3b4>)
 80072ce:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	4a6a      	ldr	r2, [pc, #424]	@ (8007480 <HAL_TIM_IC_Start_DMA+0x3b8>)
 80072d6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072dc:	4a69      	ldr	r2, [pc, #420]	@ (8007484 <HAL_TIM_IC_Start_DMA+0x3bc>)
 80072de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3338      	adds	r3, #56	@ 0x38
 80072ea:	4619      	mov	r1, r3
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	887b      	ldrh	r3, [r7, #2]
 80072f0:	f000 fbd8 	bl	8007aa4 <TIM_DMA_Start_IT>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e0ba      	b.n	8007474 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800730c:	60da      	str	r2, [r3, #12]
      break;
 800730e:	e04a      	b.n	80073a6 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	4a59      	ldr	r2, [pc, #356]	@ (800747c <HAL_TIM_IC_Start_DMA+0x3b4>)
 8007316:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	4a58      	ldr	r2, [pc, #352]	@ (8007480 <HAL_TIM_IC_Start_DMA+0x3b8>)
 800731e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	4a57      	ldr	r2, [pc, #348]	@ (8007484 <HAL_TIM_IC_Start_DMA+0x3bc>)
 8007326:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	333c      	adds	r3, #60	@ 0x3c
 8007332:	4619      	mov	r1, r3
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	887b      	ldrh	r3, [r7, #2]
 8007338:	f000 fbb4 	bl	8007aa4 <TIM_DMA_Start_IT>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e096      	b.n	8007474 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007354:	60da      	str	r2, [r3, #12]
      break;
 8007356:	e026      	b.n	80073a6 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735c:	4a47      	ldr	r2, [pc, #284]	@ (800747c <HAL_TIM_IC_Start_DMA+0x3b4>)
 800735e:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007364:	4a46      	ldr	r2, [pc, #280]	@ (8007480 <HAL_TIM_IC_Start_DMA+0x3b8>)
 8007366:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736c:	4a45      	ldr	r2, [pc, #276]	@ (8007484 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800736e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3340      	adds	r3, #64	@ 0x40
 800737a:	4619      	mov	r1, r3
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	887b      	ldrh	r3, [r7, #2]
 8007380:	f000 fb90 	bl	8007aa4 <TIM_DMA_Start_IT>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e072      	b.n	8007474 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800739c:	60da      	str	r2, [r3, #12]
      break;
 800739e:	e002      	b.n	80073a6 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
      break;
 80073a4:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a37      	ldr	r2, [pc, #220]	@ (8007488 <HAL_TIM_IC_Start_DMA+0x3c0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d040      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a35      	ldr	r2, [pc, #212]	@ (800748c <HAL_TIM_IC_Start_DMA+0x3c4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d03b      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c2:	d036      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073cc:	d031      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007490 <HAL_TIM_IC_Start_DMA+0x3c8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02c      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007494 <HAL_TIM_IC_Start_DMA+0x3cc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d027      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007498 <HAL_TIM_IC_Start_DMA+0x3d0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a2a      	ldr	r2, [pc, #168]	@ (800749c <HAL_TIM_IC_Start_DMA+0x3d4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01d      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a29      	ldr	r2, [pc, #164]	@ (80074a0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a27      	ldr	r2, [pc, #156]	@ (80074a4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a26      	ldr	r2, [pc, #152]	@ (80074a8 <HAL_TIM_IC_Start_DMA+0x3e0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a24      	ldr	r2, [pc, #144]	@ (80074ac <HAL_TIM_IC_Start_DMA+0x3e4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a23      	ldr	r2, [pc, #140]	@ (80074b0 <HAL_TIM_IC_Start_DMA+0x3e8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_TIM_IC_Start_DMA+0x36a>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a21      	ldr	r2, [pc, #132]	@ (80074b4 <HAL_TIM_IC_Start_DMA+0x3ec>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d115      	bne.n	800745e <HAL_TIM_IC_Start_DMA+0x396>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	4b1f      	ldr	r3, [pc, #124]	@ (80074b8 <HAL_TIM_IC_Start_DMA+0x3f0>)
 800743a:	4013      	ands	r3, r2
 800743c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b06      	cmp	r3, #6
 8007442:	d015      	beq.n	8007470 <HAL_TIM_IC_Start_DMA+0x3a8>
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800744a:	d011      	beq.n	8007470 <HAL_TIM_IC_Start_DMA+0x3a8>
    {
      __HAL_TIM_ENABLE(htim);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745c:	e008      	b.n	8007470 <HAL_TIM_IC_Start_DMA+0x3a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e000      	b.n	8007472 <HAL_TIM_IC_Start_DMA+0x3aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	08007be9 	.word	0x08007be9
 8007480:	08007c51 	.word	0x08007c51
 8007484:	08007b57 	.word	0x08007b57
 8007488:	40012c00 	.word	0x40012c00
 800748c:	50012c00 	.word	0x50012c00
 8007490:	40000400 	.word	0x40000400
 8007494:	50000400 	.word	0x50000400
 8007498:	40000800 	.word	0x40000800
 800749c:	50000800 	.word	0x50000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	50000c00 	.word	0x50000c00
 80074a8:	40013400 	.word	0x40013400
 80074ac:	50013400 	.word	0x50013400
 80074b0:	40014000 	.word	0x40014000
 80074b4:	50014000 	.word	0x50014000
 80074b8:	00010007 	.word	0x00010007

080074bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_TIM_IC_ConfigChannel+0x1e>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e088      	b.n	80075ec <HAL_TIM_IC_ConfigChannel+0x130>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d11b      	bne.n	8007520 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80074f8:	f001 f980 	bl	80087fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699a      	ldr	r2, [r3, #24]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 020c 	bic.w	r2, r2, #12
 800750a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6999      	ldr	r1, [r3, #24]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	619a      	str	r2, [r3, #24]
 800751e:	e060      	b.n	80075e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b04      	cmp	r3, #4
 8007524:	d11c      	bne.n	8007560 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007536:	f001 fa26 	bl	8008986 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007548:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6999      	ldr	r1, [r3, #24]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	021a      	lsls	r2, r3, #8
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	619a      	str	r2, [r3, #24]
 800755e:	e040      	b.n	80075e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b08      	cmp	r3, #8
 8007564:	d11b      	bne.n	800759e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007576:	f001 fa73 	bl	8008a60 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69da      	ldr	r2, [r3, #28]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 020c 	bic.w	r2, r2, #12
 8007588:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69d9      	ldr	r1, [r3, #28]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	61da      	str	r2, [r3, #28]
 800759c:	e021      	b.n	80075e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b0c      	cmp	r3, #12
 80075a2:	d11c      	bne.n	80075de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80075b4:	f001 fa90 	bl	8008ad8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69da      	ldr	r2, [r3, #28]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80075c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69d9      	ldr	r1, [r3, #28]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	61da      	str	r2, [r3, #28]
 80075dc:	e001      	b.n	80075e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800760e:	2302      	movs	r3, #2
 8007610:	e0ff      	b.n	8007812 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b14      	cmp	r3, #20
 800761e:	f200 80f0 	bhi.w	8007802 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007622:	a201      	add	r2, pc, #4	@ (adr r2, 8007628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	0800767d 	.word	0x0800767d
 800762c:	08007803 	.word	0x08007803
 8007630:	08007803 	.word	0x08007803
 8007634:	08007803 	.word	0x08007803
 8007638:	080076bd 	.word	0x080076bd
 800763c:	08007803 	.word	0x08007803
 8007640:	08007803 	.word	0x08007803
 8007644:	08007803 	.word	0x08007803
 8007648:	080076ff 	.word	0x080076ff
 800764c:	08007803 	.word	0x08007803
 8007650:	08007803 	.word	0x08007803
 8007654:	08007803 	.word	0x08007803
 8007658:	0800773f 	.word	0x0800773f
 800765c:	08007803 	.word	0x08007803
 8007660:	08007803 	.word	0x08007803
 8007664:	08007803 	.word	0x08007803
 8007668:	08007781 	.word	0x08007781
 800766c:	08007803 	.word	0x08007803
 8007670:	08007803 	.word	0x08007803
 8007674:	08007803 	.word	0x08007803
 8007678:	080077c1 	.word	0x080077c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fc18 	bl	8007eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0208 	orr.w	r2, r2, #8
 8007696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0204 	bic.w	r2, r2, #4
 80076a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6999      	ldr	r1, [r3, #24]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	619a      	str	r2, [r3, #24]
      break;
 80076ba:	e0a5      	b.n	8007808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fcba 	bl	800803c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6999      	ldr	r1, [r3, #24]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	619a      	str	r2, [r3, #24]
      break;
 80076fc:	e084      	b.n	8007808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fd49 	bl	800819c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0208 	orr.w	r2, r2, #8
 8007718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0204 	bic.w	r2, r2, #4
 8007728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69d9      	ldr	r1, [r3, #28]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	61da      	str	r2, [r3, #28]
      break;
 800773c:	e064      	b.n	8007808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fdd7 	bl	80082f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69d9      	ldr	r1, [r3, #28]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	021a      	lsls	r2, r3, #8
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	61da      	str	r2, [r3, #28]
      break;
 800777e:	e043      	b.n	8007808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fe66 	bl	8008458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0208 	orr.w	r2, r2, #8
 800779a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0204 	bic.w	r2, r2, #4
 80077aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077be:	e023      	b.n	8007808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fec8 	bl	800855c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	021a      	lsls	r2, r3, #8
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007800:	e002      	b.n	8007808 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	75fb      	strb	r3, [r7, #23]
      break;
 8007806:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop

0800781c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIM_ConfigClockSource+0x1c>
 8007834:	2302      	movs	r3, #2
 8007836:	e0e6      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x1ea>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007856:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800785a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a67      	ldr	r2, [pc, #412]	@ (8007a10 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	f000 80b1 	beq.w	80079da <HAL_TIM_ConfigClockSource+0x1be>
 8007878:	4a65      	ldr	r2, [pc, #404]	@ (8007a10 <HAL_TIM_ConfigClockSource+0x1f4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	f200 80b6 	bhi.w	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 8007880:	4a64      	ldr	r2, [pc, #400]	@ (8007a14 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	f000 80a9 	beq.w	80079da <HAL_TIM_ConfigClockSource+0x1be>
 8007888:	4a62      	ldr	r2, [pc, #392]	@ (8007a14 <HAL_TIM_ConfigClockSource+0x1f8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	f200 80ae 	bhi.w	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 8007890:	4a61      	ldr	r2, [pc, #388]	@ (8007a18 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	f000 80a1 	beq.w	80079da <HAL_TIM_ConfigClockSource+0x1be>
 8007898:	4a5f      	ldr	r2, [pc, #380]	@ (8007a18 <HAL_TIM_ConfigClockSource+0x1fc>)
 800789a:	4293      	cmp	r3, r2
 800789c:	f200 80a6 	bhi.w	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078a0:	4a5e      	ldr	r2, [pc, #376]	@ (8007a1c <HAL_TIM_ConfigClockSource+0x200>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	f000 8099 	beq.w	80079da <HAL_TIM_ConfigClockSource+0x1be>
 80078a8:	4a5c      	ldr	r2, [pc, #368]	@ (8007a1c <HAL_TIM_ConfigClockSource+0x200>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	f200 809e 	bhi.w	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078b4:	f000 8091 	beq.w	80079da <HAL_TIM_ConfigClockSource+0x1be>
 80078b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078bc:	f200 8096 	bhi.w	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078c4:	f000 8089 	beq.w	80079da <HAL_TIM_ConfigClockSource+0x1be>
 80078c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078cc:	f200 808e 	bhi.w	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078d4:	d03e      	beq.n	8007954 <HAL_TIM_ConfigClockSource+0x138>
 80078d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078da:	f200 8087 	bhi.w	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078e2:	f000 8086 	beq.w	80079f2 <HAL_TIM_ConfigClockSource+0x1d6>
 80078e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ea:	d87f      	bhi.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078ec:	2b70      	cmp	r3, #112	@ 0x70
 80078ee:	d01a      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x10a>
 80078f0:	2b70      	cmp	r3, #112	@ 0x70
 80078f2:	d87b      	bhi.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078f4:	2b60      	cmp	r3, #96	@ 0x60
 80078f6:	d050      	beq.n	800799a <HAL_TIM_ConfigClockSource+0x17e>
 80078f8:	2b60      	cmp	r3, #96	@ 0x60
 80078fa:	d877      	bhi.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 80078fc:	2b50      	cmp	r3, #80	@ 0x50
 80078fe:	d03c      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x15e>
 8007900:	2b50      	cmp	r3, #80	@ 0x50
 8007902:	d873      	bhi.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 8007904:	2b40      	cmp	r3, #64	@ 0x40
 8007906:	d058      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x19e>
 8007908:	2b40      	cmp	r3, #64	@ 0x40
 800790a:	d86f      	bhi.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 800790c:	2b30      	cmp	r3, #48	@ 0x30
 800790e:	d064      	beq.n	80079da <HAL_TIM_ConfigClockSource+0x1be>
 8007910:	2b30      	cmp	r3, #48	@ 0x30
 8007912:	d86b      	bhi.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 8007914:	2b20      	cmp	r3, #32
 8007916:	d060      	beq.n	80079da <HAL_TIM_ConfigClockSource+0x1be>
 8007918:	2b20      	cmp	r3, #32
 800791a:	d867      	bhi.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
 800791c:	2b00      	cmp	r3, #0
 800791e:	d05c      	beq.n	80079da <HAL_TIM_ConfigClockSource+0x1be>
 8007920:	2b10      	cmp	r3, #16
 8007922:	d05a      	beq.n	80079da <HAL_TIM_ConfigClockSource+0x1be>
 8007924:	e062      	b.n	80079ec <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007936:	f001 f929 	bl	8008b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	609a      	str	r2, [r3, #8]
      break;
 8007952:	e04f      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007964:	f001 f912 	bl	8008b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007976:	609a      	str	r2, [r3, #8]
      break;
 8007978:	e03c      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007986:	461a      	mov	r2, r3
 8007988:	f000 ffce 	bl	8008928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2150      	movs	r1, #80	@ 0x50
 8007992:	4618      	mov	r0, r3
 8007994:	f001 f8dd 	bl	8008b52 <TIM_ITRx_SetConfig>
      break;
 8007998:	e02c      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a6:	461a      	mov	r2, r3
 80079a8:	f001 f82a 	bl	8008a00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2160      	movs	r1, #96	@ 0x60
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 f8cd 	bl	8008b52 <TIM_ITRx_SetConfig>
      break;
 80079b8:	e01c      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c6:	461a      	mov	r2, r3
 80079c8:	f000 ffae 	bl	8008928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2140      	movs	r1, #64	@ 0x40
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 f8bd 	bl	8008b52 <TIM_ITRx_SetConfig>
      break;
 80079d8:	e00c      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4619      	mov	r1, r3
 80079e4:	4610      	mov	r0, r2
 80079e6:	f001 f8b4 	bl	8008b52 <TIM_ITRx_SetConfig>
      break;
 80079ea:	e003      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
      break;
 80079f0:	e000      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80079f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	00100070 	.word	0x00100070
 8007a14:	00100040 	.word	0x00100040
 8007a18:	00100030 	.word	0x00100030
 8007a1c:	00100020 	.word	0x00100020

08007a20 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e031      	b.n	8007a9c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fe0a 	bl	8008664 <TIM_SlaveTimer_SetConfig>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e018      	b.n	8007a9c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a78:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a88:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d020      	beq.n	8007b00 <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d019      	beq.n	8007afa <TIM_DMA_Start_IT+0x56>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d014      	beq.n	8007afa <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7fa fe96 	bl	8002820 <HAL_DMAEx_List_Start_IT>
 8007af4:	4603      	mov	r3, r0
 8007af6:	75fb      	strb	r3, [r7, #23]
 8007af8:	e00a      	b.n	8007b10 <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	75fb      	strb	r3, [r7, #23]
 8007afe:	e007      	b.n	8007b10 <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7fa fb3c 	bl	8002184 <HAL_DMA_Start_IT>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b62:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d107      	bne.n	8007b7e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b7c:	e02a      	b.n	8007bd4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d107      	bne.n	8007b98 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b96:	e01d      	b.n	8007bd4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d107      	bne.n	8007bb2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bb0:	e010      	b.n	8007bd4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d107      	bne.n	8007bcc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bca:	e003      	b.n	8007bd4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7ff ffb4 	bl	8007b42 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	771a      	strb	r2, [r3, #28]
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d103      	bne.n	8007c08 <TIM_DMACaptureCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	771a      	strb	r2, [r3, #28]
 8007c06:	e019      	b.n	8007c3c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d103      	bne.n	8007c1a <TIM_DMACaptureCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2202      	movs	r2, #2
 8007c16:	771a      	strb	r2, [r3, #28]
 8007c18:	e010      	b.n	8007c3c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d103      	bne.n	8007c2c <TIM_DMACaptureCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2204      	movs	r2, #4
 8007c28:	771a      	strb	r2, [r3, #28]
 8007c2a:	e007      	b.n	8007c3c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d102      	bne.n	8007c3c <TIM_DMACaptureCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2208      	movs	r2, #8
 8007c3a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff ff6c 	bl	8007b1a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	771a      	strb	r2, [r3, #28]
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d103      	bne.n	8007c70 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	771a      	strb	r2, [r3, #28]
 8007c6e:	e019      	b.n	8007ca4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d103      	bne.n	8007c82 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	771a      	strb	r2, [r3, #28]
 8007c80:	e010      	b.n	8007ca4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d103      	bne.n	8007c94 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2204      	movs	r2, #4
 8007c90:	771a      	strb	r2, [r3, #28]
 8007c92:	e007      	b.n	8007ca4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d102      	bne.n	8007ca4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f7ff ff42 	bl	8007b2e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	771a      	strb	r2, [r3, #28]
}
 8007cb0:	bf00      	nop
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a6b      	ldr	r2, [pc, #428]	@ (8007e78 <TIM_Base_SetConfig+0x1c0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d02b      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a6a      	ldr	r2, [pc, #424]	@ (8007e7c <TIM_Base_SetConfig+0x1c4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d027      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cde:	d023      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ce6:	d01f      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a65      	ldr	r2, [pc, #404]	@ (8007e80 <TIM_Base_SetConfig+0x1c8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d01b      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a64      	ldr	r2, [pc, #400]	@ (8007e84 <TIM_Base_SetConfig+0x1cc>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d017      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a63      	ldr	r2, [pc, #396]	@ (8007e88 <TIM_Base_SetConfig+0x1d0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d013      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a62      	ldr	r2, [pc, #392]	@ (8007e8c <TIM_Base_SetConfig+0x1d4>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00f      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a61      	ldr	r2, [pc, #388]	@ (8007e90 <TIM_Base_SetConfig+0x1d8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a60      	ldr	r2, [pc, #384]	@ (8007e94 <TIM_Base_SetConfig+0x1dc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8007e98 <TIM_Base_SetConfig+0x1e0>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_Base_SetConfig+0x70>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a5e      	ldr	r2, [pc, #376]	@ (8007e9c <TIM_Base_SetConfig+0x1e4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d108      	bne.n	8007d3a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a4e      	ldr	r2, [pc, #312]	@ (8007e78 <TIM_Base_SetConfig+0x1c0>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d043      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a4d      	ldr	r2, [pc, #308]	@ (8007e7c <TIM_Base_SetConfig+0x1c4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d03f      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d50:	d03b      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d58:	d037      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a48      	ldr	r2, [pc, #288]	@ (8007e80 <TIM_Base_SetConfig+0x1c8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d033      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a47      	ldr	r2, [pc, #284]	@ (8007e84 <TIM_Base_SetConfig+0x1cc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d02f      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a46      	ldr	r2, [pc, #280]	@ (8007e88 <TIM_Base_SetConfig+0x1d0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d02b      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a45      	ldr	r2, [pc, #276]	@ (8007e8c <TIM_Base_SetConfig+0x1d4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d027      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a44      	ldr	r2, [pc, #272]	@ (8007e90 <TIM_Base_SetConfig+0x1d8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d023      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a43      	ldr	r2, [pc, #268]	@ (8007e94 <TIM_Base_SetConfig+0x1dc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01f      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a42      	ldr	r2, [pc, #264]	@ (8007e98 <TIM_Base_SetConfig+0x1e0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01b      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a41      	ldr	r2, [pc, #260]	@ (8007e9c <TIM_Base_SetConfig+0x1e4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d017      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a40      	ldr	r2, [pc, #256]	@ (8007ea0 <TIM_Base_SetConfig+0x1e8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a3f      	ldr	r2, [pc, #252]	@ (8007ea4 <TIM_Base_SetConfig+0x1ec>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00f      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a3e      	ldr	r2, [pc, #248]	@ (8007ea8 <TIM_Base_SetConfig+0x1f0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00b      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a3d      	ldr	r2, [pc, #244]	@ (8007eac <TIM_Base_SetConfig+0x1f4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d007      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8007eb0 <TIM_Base_SetConfig+0x1f8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_Base_SetConfig+0x112>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a3b      	ldr	r2, [pc, #236]	@ (8007eb4 <TIM_Base_SetConfig+0x1fc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d108      	bne.n	8007ddc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007e78 <TIM_Base_SetConfig+0x1c0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d023      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a1d      	ldr	r2, [pc, #116]	@ (8007e7c <TIM_Base_SetConfig+0x1c4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01f      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a22      	ldr	r2, [pc, #136]	@ (8007e98 <TIM_Base_SetConfig+0x1e0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01b      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a21      	ldr	r2, [pc, #132]	@ (8007e9c <TIM_Base_SetConfig+0x1e4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d017      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a20      	ldr	r2, [pc, #128]	@ (8007ea0 <TIM_Base_SetConfig+0x1e8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d013      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea4 <TIM_Base_SetConfig+0x1ec>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00f      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ea8 <TIM_Base_SetConfig+0x1f0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00b      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a1d      	ldr	r2, [pc, #116]	@ (8007eac <TIM_Base_SetConfig+0x1f4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d007      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb0 <TIM_Base_SetConfig+0x1f8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d003      	beq.n	8007e4a <TIM_Base_SetConfig+0x192>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb4 <TIM_Base_SetConfig+0x1fc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d103      	bne.n	8007e52 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	691a      	ldr	r2, [r3, #16]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f043 0204 	orr.w	r2, r3, #4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	601a      	str	r2, [r3, #0]
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	50012c00 	.word	0x50012c00
 8007e80:	40000400 	.word	0x40000400
 8007e84:	50000400 	.word	0x50000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	50000800 	.word	0x50000800
 8007e90:	40000c00 	.word	0x40000c00
 8007e94:	50000c00 	.word	0x50000c00
 8007e98:	40013400 	.word	0x40013400
 8007e9c:	50013400 	.word	0x50013400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	50014000 	.word	0x50014000
 8007ea8:	40014400 	.word	0x40014400
 8007eac:	50014400 	.word	0x50014400
 8007eb0:	40014800 	.word	0x40014800
 8007eb4:	50014800 	.word	0x50014800

08007eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	f023 0201 	bic.w	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f023 0302 	bic.w	r3, r3, #2
 8007f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a40      	ldr	r2, [pc, #256]	@ (8008014 <TIM_OC1_SetConfig+0x15c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d023      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008018 <TIM_OC1_SetConfig+0x160>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d01f      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a3e      	ldr	r2, [pc, #248]	@ (800801c <TIM_OC1_SetConfig+0x164>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d01b      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8008020 <TIM_OC1_SetConfig+0x168>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d017      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a3c      	ldr	r2, [pc, #240]	@ (8008024 <TIM_OC1_SetConfig+0x16c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d013      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8008028 <TIM_OC1_SetConfig+0x170>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00f      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a3a      	ldr	r2, [pc, #232]	@ (800802c <TIM_OC1_SetConfig+0x174>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00b      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a39      	ldr	r2, [pc, #228]	@ (8008030 <TIM_OC1_SetConfig+0x178>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a38      	ldr	r2, [pc, #224]	@ (8008034 <TIM_OC1_SetConfig+0x17c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_OC1_SetConfig+0xa8>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a37      	ldr	r2, [pc, #220]	@ (8008038 <TIM_OC1_SetConfig+0x180>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10c      	bne.n	8007f7a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 0308 	bic.w	r3, r3, #8
 8007f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f023 0304 	bic.w	r3, r3, #4
 8007f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a25      	ldr	r2, [pc, #148]	@ (8008014 <TIM_OC1_SetConfig+0x15c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d023      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a24      	ldr	r2, [pc, #144]	@ (8008018 <TIM_OC1_SetConfig+0x160>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01f      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a23      	ldr	r2, [pc, #140]	@ (800801c <TIM_OC1_SetConfig+0x164>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01b      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a22      	ldr	r2, [pc, #136]	@ (8008020 <TIM_OC1_SetConfig+0x168>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d017      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a21      	ldr	r2, [pc, #132]	@ (8008024 <TIM_OC1_SetConfig+0x16c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d013      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a20      	ldr	r2, [pc, #128]	@ (8008028 <TIM_OC1_SetConfig+0x170>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00f      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a1f      	ldr	r2, [pc, #124]	@ (800802c <TIM_OC1_SetConfig+0x174>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00b      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8008030 <TIM_OC1_SetConfig+0x178>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d007      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8008034 <TIM_OC1_SetConfig+0x17c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_OC1_SetConfig+0x112>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008038 <TIM_OC1_SetConfig+0x180>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d111      	bne.n	8007fee <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	621a      	str	r2, [r3, #32]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	40012c00 	.word	0x40012c00
 8008018:	50012c00 	.word	0x50012c00
 800801c:	40013400 	.word	0x40013400
 8008020:	50013400 	.word	0x50013400
 8008024:	40014000 	.word	0x40014000
 8008028:	50014000 	.word	0x50014000
 800802c:	40014400 	.word	0x40014400
 8008030:	50014400 	.word	0x50014400
 8008034:	40014800 	.word	0x40014800
 8008038:	50014800 	.word	0x50014800

0800803c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	f023 0210 	bic.w	r2, r3, #16
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800806a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800806e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	021b      	lsls	r3, r3, #8
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f023 0320 	bic.w	r3, r3, #32
 800808a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a36      	ldr	r2, [pc, #216]	@ (8008174 <TIM_OC2_SetConfig+0x138>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d00b      	beq.n	80080b8 <TIM_OC2_SetConfig+0x7c>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a35      	ldr	r2, [pc, #212]	@ (8008178 <TIM_OC2_SetConfig+0x13c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d007      	beq.n	80080b8 <TIM_OC2_SetConfig+0x7c>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a34      	ldr	r2, [pc, #208]	@ (800817c <TIM_OC2_SetConfig+0x140>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d003      	beq.n	80080b8 <TIM_OC2_SetConfig+0x7c>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a33      	ldr	r2, [pc, #204]	@ (8008180 <TIM_OC2_SetConfig+0x144>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d10d      	bne.n	80080d4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	011b      	lsls	r3, r3, #4
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a27      	ldr	r2, [pc, #156]	@ (8008174 <TIM_OC2_SetConfig+0x138>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d023      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a26      	ldr	r2, [pc, #152]	@ (8008178 <TIM_OC2_SetConfig+0x13c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d01f      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a25      	ldr	r2, [pc, #148]	@ (800817c <TIM_OC2_SetConfig+0x140>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d01b      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a24      	ldr	r2, [pc, #144]	@ (8008180 <TIM_OC2_SetConfig+0x144>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d017      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a23      	ldr	r2, [pc, #140]	@ (8008184 <TIM_OC2_SetConfig+0x148>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d013      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a22      	ldr	r2, [pc, #136]	@ (8008188 <TIM_OC2_SetConfig+0x14c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00f      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a21      	ldr	r2, [pc, #132]	@ (800818c <TIM_OC2_SetConfig+0x150>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00b      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a20      	ldr	r2, [pc, #128]	@ (8008190 <TIM_OC2_SetConfig+0x154>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d007      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a1f      	ldr	r2, [pc, #124]	@ (8008194 <TIM_OC2_SetConfig+0x158>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_OC2_SetConfig+0xe8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a1e      	ldr	r2, [pc, #120]	@ (8008198 <TIM_OC2_SetConfig+0x15c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d113      	bne.n	800814c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800812a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	621a      	str	r2, [r3, #32]
}
 8008166:	bf00      	nop
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	40012c00 	.word	0x40012c00
 8008178:	50012c00 	.word	0x50012c00
 800817c:	40013400 	.word	0x40013400
 8008180:	50013400 	.word	0x50013400
 8008184:	40014000 	.word	0x40014000
 8008188:	50014000 	.word	0x50014000
 800818c:	40014400 	.word	0x40014400
 8008190:	50014400 	.word	0x50014400
 8008194:	40014800 	.word	0x40014800
 8008198:	50014800 	.word	0x50014800

0800819c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0303 	bic.w	r3, r3, #3
 80081d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a35      	ldr	r2, [pc, #212]	@ (80082d0 <TIM_OC3_SetConfig+0x134>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00b      	beq.n	8008216 <TIM_OC3_SetConfig+0x7a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a34      	ldr	r2, [pc, #208]	@ (80082d4 <TIM_OC3_SetConfig+0x138>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d007      	beq.n	8008216 <TIM_OC3_SetConfig+0x7a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a33      	ldr	r2, [pc, #204]	@ (80082d8 <TIM_OC3_SetConfig+0x13c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC3_SetConfig+0x7a>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a32      	ldr	r2, [pc, #200]	@ (80082dc <TIM_OC3_SetConfig+0x140>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d10d      	bne.n	8008232 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800821c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a26      	ldr	r2, [pc, #152]	@ (80082d0 <TIM_OC3_SetConfig+0x134>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d023      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a25      	ldr	r2, [pc, #148]	@ (80082d4 <TIM_OC3_SetConfig+0x138>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01f      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a24      	ldr	r2, [pc, #144]	@ (80082d8 <TIM_OC3_SetConfig+0x13c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d01b      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a23      	ldr	r2, [pc, #140]	@ (80082dc <TIM_OC3_SetConfig+0x140>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d017      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a22      	ldr	r2, [pc, #136]	@ (80082e0 <TIM_OC3_SetConfig+0x144>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a21      	ldr	r2, [pc, #132]	@ (80082e4 <TIM_OC3_SetConfig+0x148>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a20      	ldr	r2, [pc, #128]	@ (80082e8 <TIM_OC3_SetConfig+0x14c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1f      	ldr	r2, [pc, #124]	@ (80082ec <TIM_OC3_SetConfig+0x150>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1e      	ldr	r2, [pc, #120]	@ (80082f0 <TIM_OC3_SetConfig+0x154>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_OC3_SetConfig+0xe6>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1d      	ldr	r2, [pc, #116]	@ (80082f4 <TIM_OC3_SetConfig+0x158>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d113      	bne.n	80082aa <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	621a      	str	r2, [r3, #32]
}
 80082c4:	bf00      	nop
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	50012c00 	.word	0x50012c00
 80082d8:	40013400 	.word	0x40013400
 80082dc:	50013400 	.word	0x50013400
 80082e0:	40014000 	.word	0x40014000
 80082e4:	50014000 	.word	0x50014000
 80082e8:	40014400 	.word	0x40014400
 80082ec:	50014400 	.word	0x50014400
 80082f0:	40014800 	.word	0x40014800
 80082f4:	50014800 	.word	0x50014800

080082f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	031b      	lsls	r3, r3, #12
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a36      	ldr	r2, [pc, #216]	@ (8008430 <TIM_OC4_SetConfig+0x138>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00b      	beq.n	8008374 <TIM_OC4_SetConfig+0x7c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a35      	ldr	r2, [pc, #212]	@ (8008434 <TIM_OC4_SetConfig+0x13c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d007      	beq.n	8008374 <TIM_OC4_SetConfig+0x7c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a34      	ldr	r2, [pc, #208]	@ (8008438 <TIM_OC4_SetConfig+0x140>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d003      	beq.n	8008374 <TIM_OC4_SetConfig+0x7c>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a33      	ldr	r2, [pc, #204]	@ (800843c <TIM_OC4_SetConfig+0x144>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d10d      	bne.n	8008390 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800837a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	031b      	lsls	r3, r3, #12
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800838e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a27      	ldr	r2, [pc, #156]	@ (8008430 <TIM_OC4_SetConfig+0x138>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d023      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a26      	ldr	r2, [pc, #152]	@ (8008434 <TIM_OC4_SetConfig+0x13c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d01f      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a25      	ldr	r2, [pc, #148]	@ (8008438 <TIM_OC4_SetConfig+0x140>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d01b      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a24      	ldr	r2, [pc, #144]	@ (800843c <TIM_OC4_SetConfig+0x144>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d017      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a23      	ldr	r2, [pc, #140]	@ (8008440 <TIM_OC4_SetConfig+0x148>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d013      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a22      	ldr	r2, [pc, #136]	@ (8008444 <TIM_OC4_SetConfig+0x14c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00f      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a21      	ldr	r2, [pc, #132]	@ (8008448 <TIM_OC4_SetConfig+0x150>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a20      	ldr	r2, [pc, #128]	@ (800844c <TIM_OC4_SetConfig+0x154>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008450 <TIM_OC4_SetConfig+0x158>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC4_SetConfig+0xe8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a1e      	ldr	r2, [pc, #120]	@ (8008454 <TIM_OC4_SetConfig+0x15c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d113      	bne.n	8008408 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	019b      	lsls	r3, r3, #6
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	019b      	lsls	r3, r3, #6
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	621a      	str	r2, [r3, #32]
}
 8008422:	bf00      	nop
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40012c00 	.word	0x40012c00
 8008434:	50012c00 	.word	0x50012c00
 8008438:	40013400 	.word	0x40013400
 800843c:	50013400 	.word	0x50013400
 8008440:	40014000 	.word	0x40014000
 8008444:	50014000 	.word	0x50014000
 8008448:	40014400 	.word	0x40014400
 800844c:	50014400 	.word	0x50014400
 8008450:	40014800 	.word	0x40014800
 8008454:	50014800 	.word	0x50014800

08008458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800849c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a21      	ldr	r2, [pc, #132]	@ (8008534 <TIM_OC5_SetConfig+0xdc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d023      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a20      	ldr	r2, [pc, #128]	@ (8008538 <TIM_OC5_SetConfig+0xe0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d01f      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1f      	ldr	r2, [pc, #124]	@ (800853c <TIM_OC5_SetConfig+0xe4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d01b      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008540 <TIM_OC5_SetConfig+0xe8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d017      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008544 <TIM_OC5_SetConfig+0xec>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008548 <TIM_OC5_SetConfig+0xf0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00f      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a1b      	ldr	r2, [pc, #108]	@ (800854c <TIM_OC5_SetConfig+0xf4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00b      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008550 <TIM_OC5_SetConfig+0xf8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a19      	ldr	r2, [pc, #100]	@ (8008554 <TIM_OC5_SetConfig+0xfc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_OC5_SetConfig+0xa2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a18      	ldr	r2, [pc, #96]	@ (8008558 <TIM_OC5_SetConfig+0x100>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d109      	bne.n	800850e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	621a      	str	r2, [r3, #32]
}
 8008528:	bf00      	nop
 800852a:	371c      	adds	r7, #28
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	40012c00 	.word	0x40012c00
 8008538:	50012c00 	.word	0x50012c00
 800853c:	40013400 	.word	0x40013400
 8008540:	50013400 	.word	0x50013400
 8008544:	40014000 	.word	0x40014000
 8008548:	50014000 	.word	0x50014000
 800854c:	40014400 	.word	0x40014400
 8008550:	50014400 	.word	0x50014400
 8008554:	40014800 	.word	0x40014800
 8008558:	50014800 	.word	0x50014800

0800855c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800858a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800858e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4313      	orrs	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	051b      	lsls	r3, r3, #20
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a22      	ldr	r2, [pc, #136]	@ (800863c <TIM_OC6_SetConfig+0xe0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d023      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a21      	ldr	r2, [pc, #132]	@ (8008640 <TIM_OC6_SetConfig+0xe4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01f      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a20      	ldr	r2, [pc, #128]	@ (8008644 <TIM_OC6_SetConfig+0xe8>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d01b      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008648 <TIM_OC6_SetConfig+0xec>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d017      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a1e      	ldr	r2, [pc, #120]	@ (800864c <TIM_OC6_SetConfig+0xf0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d013      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a1d      	ldr	r2, [pc, #116]	@ (8008650 <TIM_OC6_SetConfig+0xf4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00f      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008654 <TIM_OC6_SetConfig+0xf8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00b      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008658 <TIM_OC6_SetConfig+0xfc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d007      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a1a      	ldr	r2, [pc, #104]	@ (800865c <TIM_OC6_SetConfig+0x100>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d003      	beq.n	8008600 <TIM_OC6_SetConfig+0xa4>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a19      	ldr	r2, [pc, #100]	@ (8008660 <TIM_OC6_SetConfig+0x104>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d109      	bne.n	8008614 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008606:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	029b      	lsls	r3, r3, #10
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	4313      	orrs	r3, r2
 8008612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	621a      	str	r2, [r3, #32]
}
 800862e:	bf00      	nop
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	40012c00 	.word	0x40012c00
 8008640:	50012c00 	.word	0x50012c00
 8008644:	40013400 	.word	0x40013400
 8008648:	50013400 	.word	0x50013400
 800864c:	40014000 	.word	0x40014000
 8008650:	50014000 	.word	0x50014000
 8008654:	40014400 	.word	0x40014400
 8008658:	50014400 	.word	0x50014400
 800865c:	40014800 	.word	0x40014800
 8008660:	50014800 	.word	0x50014800

08008664 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008684:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008696:	f023 0307 	bic.w	r3, r3, #7
 800869a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	4a4e      	ldr	r2, [pc, #312]	@ (80087ec <TIM_SlaveTimer_SetConfig+0x188>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	f000 8092 	beq.w	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 80086ba:	4a4c      	ldr	r2, [pc, #304]	@ (80087ec <TIM_SlaveTimer_SetConfig+0x188>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	f200 808b 	bhi.w	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 80086c2:	4a4b      	ldr	r2, [pc, #300]	@ (80087f0 <TIM_SlaveTimer_SetConfig+0x18c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	f000 808a 	beq.w	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 80086ca:	4a49      	ldr	r2, [pc, #292]	@ (80087f0 <TIM_SlaveTimer_SetConfig+0x18c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	f200 8083 	bhi.w	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 80086d2:	4a48      	ldr	r2, [pc, #288]	@ (80087f4 <TIM_SlaveTimer_SetConfig+0x190>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	f000 8082 	beq.w	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 80086da:	4a46      	ldr	r2, [pc, #280]	@ (80087f4 <TIM_SlaveTimer_SetConfig+0x190>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d87b      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 80086e0:	4a45      	ldr	r2, [pc, #276]	@ (80087f8 <TIM_SlaveTimer_SetConfig+0x194>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d07b      	beq.n	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 80086e6:	4a44      	ldr	r2, [pc, #272]	@ (80087f8 <TIM_SlaveTimer_SetConfig+0x194>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d875      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 80086ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086f0:	d075      	beq.n	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 80086f2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086f6:	d86f      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 80086f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086fc:	d06f      	beq.n	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 80086fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008702:	d869      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 8008704:	2b70      	cmp	r3, #112	@ 0x70
 8008706:	d01a      	beq.n	800873e <TIM_SlaveTimer_SetConfig+0xda>
 8008708:	2b70      	cmp	r3, #112	@ 0x70
 800870a:	d865      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 800870c:	2b60      	cmp	r3, #96	@ 0x60
 800870e:	d059      	beq.n	80087c4 <TIM_SlaveTimer_SetConfig+0x160>
 8008710:	2b60      	cmp	r3, #96	@ 0x60
 8008712:	d861      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 8008714:	2b50      	cmp	r3, #80	@ 0x50
 8008716:	d04b      	beq.n	80087b0 <TIM_SlaveTimer_SetConfig+0x14c>
 8008718:	2b50      	cmp	r3, #80	@ 0x50
 800871a:	d85d      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	d019      	beq.n	8008754 <TIM_SlaveTimer_SetConfig+0xf0>
 8008720:	2b40      	cmp	r3, #64	@ 0x40
 8008722:	d859      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 8008724:	2b30      	cmp	r3, #48	@ 0x30
 8008726:	d05a      	beq.n	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 8008728:	2b30      	cmp	r3, #48	@ 0x30
 800872a:	d855      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 800872c:	2b20      	cmp	r3, #32
 800872e:	d056      	beq.n	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 8008730:	2b20      	cmp	r3, #32
 8008732:	d851      	bhi.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d052      	beq.n	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 8008738:	2b10      	cmp	r3, #16
 800873a:	d050      	beq.n	80087de <TIM_SlaveTimer_SetConfig+0x17a>
 800873c:	e04c      	b.n	80087d8 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800874e:	f000 fa1d 	bl	8008b8c <TIM_ETR_SetConfig>
      break;
 8008752:	e045      	b.n	80087e0 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b05      	cmp	r3, #5
 800875a:	d004      	beq.n	8008766 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008760:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008764:	d101      	bne.n	800876a <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e03b      	b.n	80087e2 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6a1a      	ldr	r2, [r3, #32]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0201 	bic.w	r2, r2, #1
 8008780:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008790:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	4313      	orrs	r3, r2
 800879c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	621a      	str	r2, [r3, #32]
      break;
 80087ae:	e017      	b.n	80087e0 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087bc:	461a      	mov	r2, r3
 80087be:	f000 f8b3 	bl	8008928 <TIM_TI1_ConfigInputStage>
      break;
 80087c2:	e00d      	b.n	80087e0 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087d0:	461a      	mov	r2, r3
 80087d2:	f000 f915 	bl	8008a00 <TIM_TI2_ConfigInputStage>
      break;
 80087d6:	e003      	b.n	80087e0 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	75fb      	strb	r3, [r7, #23]
      break;
 80087dc:	e000      	b.n	80087e0 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 80087de:	bf00      	nop
  }

  return status;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	00100070 	.word	0x00100070
 80087f0:	00100040 	.word	0x00100040
 80087f4:	00100030 	.word	0x00100030
 80087f8:	00100020 	.word	0x00100020

080087fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f023 0201 	bic.w	r2, r3, #1
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4a34      	ldr	r2, [pc, #208]	@ (80088f8 <TIM_TI1_SetConfig+0xfc>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d033      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4a33      	ldr	r2, [pc, #204]	@ (80088fc <TIM_TI1_SetConfig+0x100>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d02f      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008838:	d02b      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008840:	d027      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a2e      	ldr	r2, [pc, #184]	@ (8008900 <TIM_TI1_SetConfig+0x104>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d023      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4a2d      	ldr	r2, [pc, #180]	@ (8008904 <TIM_TI1_SetConfig+0x108>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d01f      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a2c      	ldr	r2, [pc, #176]	@ (8008908 <TIM_TI1_SetConfig+0x10c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d01b      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a2b      	ldr	r2, [pc, #172]	@ (800890c <TIM_TI1_SetConfig+0x110>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d017      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4a2a      	ldr	r2, [pc, #168]	@ (8008910 <TIM_TI1_SetConfig+0x114>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d013      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4a29      	ldr	r2, [pc, #164]	@ (8008914 <TIM_TI1_SetConfig+0x118>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00f      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4a28      	ldr	r2, [pc, #160]	@ (8008918 <TIM_TI1_SetConfig+0x11c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00b      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4a27      	ldr	r2, [pc, #156]	@ (800891c <TIM_TI1_SetConfig+0x120>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d007      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4a26      	ldr	r2, [pc, #152]	@ (8008920 <TIM_TI1_SetConfig+0x124>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d003      	beq.n	8008892 <TIM_TI1_SetConfig+0x96>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4a25      	ldr	r2, [pc, #148]	@ (8008924 <TIM_TI1_SetConfig+0x128>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d101      	bne.n	8008896 <TIM_TI1_SetConfig+0x9a>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <TIM_TI1_SetConfig+0x9c>
 8008896:	2300      	movs	r3, #0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f023 0303 	bic.w	r3, r3, #3
 80088a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	e003      	b.n	80088b6 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	011b      	lsls	r3, r3, #4
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f023 030a 	bic.w	r3, r3, #10
 80088d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f003 030a 	and.w	r3, r3, #10
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	621a      	str	r2, [r3, #32]
}
 80088ea:	bf00      	nop
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	40012c00 	.word	0x40012c00
 80088fc:	50012c00 	.word	0x50012c00
 8008900:	40000400 	.word	0x40000400
 8008904:	50000400 	.word	0x50000400
 8008908:	40000800 	.word	0x40000800
 800890c:	50000800 	.word	0x50000800
 8008910:	40000c00 	.word	0x40000c00
 8008914:	50000c00 	.word	0x50000c00
 8008918:	40013400 	.word	0x40013400
 800891c:	50013400 	.word	0x50013400
 8008920:	40014000 	.word	0x40014000
 8008924:	50014000 	.word	0x50014000

08008928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	f023 0201 	bic.w	r2, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f023 030a 	bic.w	r3, r3, #10
 8008964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	621a      	str	r2, [r3, #32]
}
 800897a:	bf00      	nop
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008986:	b480      	push	{r7}
 8008988:	b087      	sub	sp, #28
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
 8008992:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f023 0210 	bic.w	r2, r3, #16
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	031b      	lsls	r3, r3, #12
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	621a      	str	r2, [r3, #32]
}
 80089f4:	bf00      	nop
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f023 0210 	bic.w	r2, r3, #16
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	031b      	lsls	r3, r3, #12
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	621a      	str	r2, [r3, #32]
}
 8008a54:	bf00      	nop
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f023 0303 	bic.w	r3, r3, #3
 8008a8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	621a      	str	r2, [r3, #32]
}
 8008acc:	bf00      	nop
 8008ace:	371c      	adds	r7, #28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	021b      	lsls	r3, r3, #8
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	031b      	lsls	r3, r3, #12
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	031b      	lsls	r3, r3, #12
 8008b30:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	621a      	str	r2, [r3, #32]
}
 8008b46:	bf00      	nop
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b085      	sub	sp, #20
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f043 0307 	orr.w	r3, r3, #7
 8008b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	609a      	str	r2, [r3, #8]
}
 8008b80:	bf00      	nop
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	021a      	lsls	r2, r3, #8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	609a      	str	r2, [r3, #8]
}
 8008bc0:	bf00      	nop
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f003 031f 	and.w	r3, r3, #31
 8008bde:	2201      	movs	r2, #1
 8008be0:	fa02 f303 	lsl.w	r3, r2, r3
 8008be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a1a      	ldr	r2, [r3, #32]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	43db      	mvns	r3, r3
 8008bee:	401a      	ands	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1a      	ldr	r2, [r3, #32]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f003 031f 	and.w	r3, r3, #31
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	fa01 f303 	lsl.w	r3, r1, r3
 8008c04:	431a      	orrs	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	621a      	str	r2, [r3, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
	...

08008c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e097      	b.n	8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a45      	ldr	r2, [pc, #276]	@ (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00e      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a44      	ldr	r2, [pc, #272]	@ (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d009      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a42      	ldr	r2, [pc, #264]	@ (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a41      	ldr	r2, [pc, #260]	@ (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d108      	bne.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a2f      	ldr	r2, [pc, #188]	@ (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d040      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d03b      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc4:	d036      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cce:	d031      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a29      	ldr	r2, [pc, #164]	@ (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d02c      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a28      	ldr	r2, [pc, #160]	@ (8008d80 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d027      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a26      	ldr	r2, [pc, #152]	@ (8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d022      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a25      	ldr	r2, [pc, #148]	@ (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d01d      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a23      	ldr	r2, [pc, #140]	@ (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d018      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a22      	ldr	r2, [pc, #136]	@ (8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d013      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a18      	ldr	r2, [pc, #96]	@ (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00e      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d009      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a1b      	ldr	r2, [pc, #108]	@ (8008d94 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d004      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d10c      	bne.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	40012c00 	.word	0x40012c00
 8008d70:	50012c00 	.word	0x50012c00
 8008d74:	40013400 	.word	0x40013400
 8008d78:	50013400 	.word	0x50013400
 8008d7c:	40000400 	.word	0x40000400
 8008d80:	50000400 	.word	0x50000400
 8008d84:	40000800 	.word	0x40000800
 8008d88:	50000800 	.word	0x50000800
 8008d8c:	40000c00 	.word	0x40000c00
 8008d90:	50000c00 	.word	0x50000c00
 8008d94:	40014000 	.word	0x40014000
 8008d98:	50014000 	.word	0x50014000

08008d9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d101      	bne.n	8008db8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008db4:	2302      	movs	r3, #2
 8008db6:	e07d      	b.n	8008eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	041b      	lsls	r3, r3, #16
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00e      	beq.n	8008e68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d009      	beq.n	8008e68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a1a      	ldr	r2, [pc, #104]	@ (8008ecc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d11c      	bne.n	8008ea2 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e72:	051b      	lsls	r3, r3, #20
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e90:	4313      	orrs	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	40012c00 	.word	0x40012c00
 8008ec4:	50012c00 	.word	0x50012c00
 8008ec8:	40013400 	.word	0x40013400
 8008ecc:	50013400 	.word	0x50013400

08008ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e042      	b.n	8008f68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f83b 	bl	8008f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2224      	movs	r2, #36	@ 0x24
 8008efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa58 	bl	80093d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f8bd 	bl	80090a0 <UART_SetConfig>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e01b      	b.n	8008f68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f042 0201 	orr.w	r2, r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fad7 	bl	8009514 <UART_CheckIdleState>
 8008f66:	4603      	mov	r3, r0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08a      	sub	sp, #40	@ 0x28
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	4613      	mov	r3, r2
 8008f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f9a:	2b20      	cmp	r3, #32
 8008f9c:	d17b      	bne.n	8009096 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <HAL_UART_Transmit+0x26>
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e074      	b.n	8009098 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2221      	movs	r2, #33	@ 0x21
 8008fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fbe:	f7f8 ff1d 	bl	8001dfc <HAL_GetTick>
 8008fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	88fa      	ldrh	r2, [r7, #6]
 8008fc8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	88fa      	ldrh	r2, [r7, #6]
 8008fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fdc:	d108      	bne.n	8008ff0 <HAL_UART_Transmit+0x6c>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	e003      	b.n	8008ff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ff8:	e030      	b.n	800905c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2200      	movs	r2, #0
 8009002:	2180      	movs	r1, #128	@ 0x80
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fb2f 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2220      	movs	r2, #32
 8009014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e03d      	b.n	8009098 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10b      	bne.n	800903a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009030:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	3302      	adds	r3, #2
 8009036:	61bb      	str	r3, [r7, #24]
 8009038:	e007      	b.n	800904a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	781a      	ldrb	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	3301      	adds	r3, #1
 8009048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009062:	b29b      	uxth	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1c8      	bne.n	8008ffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2200      	movs	r2, #0
 8009070:	2140      	movs	r1, #64	@ 0x40
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 faf8 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e006      	b.n	8009098 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	e000      	b.n	8009098 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009096:	2302      	movs	r3, #2
  }
}
 8009098:	4618      	mov	r0, r3
 800909a:	3720      	adds	r7, #32
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090a4:	b094      	sub	sp, #80	@ 0x50
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80090b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4b9b      	ldr	r3, [pc, #620]	@ (8009324 <UART_SetConfig+0x284>)
 80090b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	431a      	orrs	r2, r3
 80090c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	431a      	orrs	r2, r3
 80090c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4994      	ldr	r1, [pc, #592]	@ (8009328 <UART_SetConfig+0x288>)
 80090d8:	4019      	ands	r1, r3
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80090ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f0:	68d9      	ldr	r1, [r3, #12]
 80090f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	ea40 0301 	orr.w	r3, r0, r1
 80090fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	4b87      	ldr	r3, [pc, #540]	@ (8009324 <UART_SetConfig+0x284>)
 8009108:	429a      	cmp	r2, r3
 800910a:	d009      	beq.n	8009120 <UART_SetConfig+0x80>
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	4b86      	ldr	r3, [pc, #536]	@ (800932c <UART_SetConfig+0x28c>)
 8009112:	429a      	cmp	r2, r3
 8009114:	d004      	beq.n	8009120 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009118:	6a1a      	ldr	r2, [r3, #32]
 800911a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911c:	4313      	orrs	r3, r2
 800911e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800912a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800912e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009134:	430b      	orrs	r3, r1
 8009136:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913e:	f023 000f 	bic.w	r0, r3, #15
 8009142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009144:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	ea40 0301 	orr.w	r3, r0, r1
 800914e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b76      	ldr	r3, [pc, #472]	@ (8009330 <UART_SetConfig+0x290>)
 8009156:	429a      	cmp	r2, r3
 8009158:	d102      	bne.n	8009160 <UART_SetConfig+0xc0>
 800915a:	2301      	movs	r3, #1
 800915c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800915e:	e021      	b.n	80091a4 <UART_SetConfig+0x104>
 8009160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4b73      	ldr	r3, [pc, #460]	@ (8009334 <UART_SetConfig+0x294>)
 8009166:	429a      	cmp	r2, r3
 8009168:	d102      	bne.n	8009170 <UART_SetConfig+0xd0>
 800916a:	2304      	movs	r3, #4
 800916c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800916e:	e019      	b.n	80091a4 <UART_SetConfig+0x104>
 8009170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	4b70      	ldr	r3, [pc, #448]	@ (8009338 <UART_SetConfig+0x298>)
 8009176:	429a      	cmp	r2, r3
 8009178:	d102      	bne.n	8009180 <UART_SetConfig+0xe0>
 800917a:	2308      	movs	r3, #8
 800917c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800917e:	e011      	b.n	80091a4 <UART_SetConfig+0x104>
 8009180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	4b6d      	ldr	r3, [pc, #436]	@ (800933c <UART_SetConfig+0x29c>)
 8009186:	429a      	cmp	r2, r3
 8009188:	d102      	bne.n	8009190 <UART_SetConfig+0xf0>
 800918a:	2310      	movs	r3, #16
 800918c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800918e:	e009      	b.n	80091a4 <UART_SetConfig+0x104>
 8009190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	4b63      	ldr	r3, [pc, #396]	@ (8009324 <UART_SetConfig+0x284>)
 8009196:	429a      	cmp	r2, r3
 8009198:	d102      	bne.n	80091a0 <UART_SetConfig+0x100>
 800919a:	2320      	movs	r3, #32
 800919c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800919e:	e001      	b.n	80091a4 <UART_SetConfig+0x104>
 80091a0:	2300      	movs	r3, #0
 80091a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	4b5e      	ldr	r3, [pc, #376]	@ (8009324 <UART_SetConfig+0x284>)
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d004      	beq.n	80091b8 <UART_SetConfig+0x118>
 80091ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4b5e      	ldr	r3, [pc, #376]	@ (800932c <UART_SetConfig+0x28c>)
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d172      	bne.n	800929e <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ba:	2200      	movs	r2, #0
 80091bc:	623b      	str	r3, [r7, #32]
 80091be:	627a      	str	r2, [r7, #36]	@ 0x24
 80091c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80091c4:	f7fc fb38 	bl	8005838 <HAL_RCCEx_GetPeriphCLKFreq>
 80091c8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 80e7 	beq.w	80093a0 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d6:	4a5a      	ldr	r2, [pc, #360]	@ (8009340 <UART_SetConfig+0x2a0>)
 80091d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091dc:	461a      	mov	r2, r3
 80091de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091e4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4413      	add	r3, r2
 80091f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d305      	bcc.n	8009202 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091fe:	429a      	cmp	r2, r3
 8009200:	d903      	bls.n	800920a <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009208:	e048      	b.n	800929c <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800920a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800920c:	2200      	movs	r2, #0
 800920e:	61bb      	str	r3, [r7, #24]
 8009210:	61fa      	str	r2, [r7, #28]
 8009212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009216:	4a4a      	ldr	r2, [pc, #296]	@ (8009340 <UART_SetConfig+0x2a0>)
 8009218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800921c:	b29b      	uxth	r3, r3
 800921e:	2200      	movs	r2, #0
 8009220:	613b      	str	r3, [r7, #16]
 8009222:	617a      	str	r2, [r7, #20]
 8009224:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009228:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800922c:	f7f7 fd30 	bl	8000c90 <__aeabi_uldivmod>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4610      	mov	r0, r2
 8009236:	4619      	mov	r1, r3
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	f04f 0300 	mov.w	r3, #0
 8009240:	020b      	lsls	r3, r1, #8
 8009242:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009246:	0202      	lsls	r2, r0, #8
 8009248:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800924a:	6849      	ldr	r1, [r1, #4]
 800924c:	0849      	lsrs	r1, r1, #1
 800924e:	2000      	movs	r0, #0
 8009250:	460c      	mov	r4, r1
 8009252:	4605      	mov	r5, r0
 8009254:	eb12 0804 	adds.w	r8, r2, r4
 8009258:	eb43 0905 	adc.w	r9, r3, r5
 800925c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	60bb      	str	r3, [r7, #8]
 8009264:	60fa      	str	r2, [r7, #12]
 8009266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 fd0f 	bl	8000c90 <__aeabi_uldivmod>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4613      	mov	r3, r2
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800927a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009280:	d308      	bcc.n	8009294 <UART_SetConfig+0x1f4>
 8009282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009288:	d204      	bcs.n	8009294 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800928a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009290:	60da      	str	r2, [r3, #12]
 8009292:	e003      	b.n	800929c <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800929a:	e081      	b.n	80093a0 <UART_SetConfig+0x300>
 800929c:	e080      	b.n	80093a0 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800929e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092a6:	d14d      	bne.n	8009344 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80092a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092aa:	2200      	movs	r2, #0
 80092ac:	603b      	str	r3, [r7, #0]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092b4:	f7fc fac0 	bl	8005838 <HAL_RCCEx_GetPeriphCLKFreq>
 80092b8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d06f      	beq.n	80093a0 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009340 <UART_SetConfig+0x2a0>)
 80092c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ca:	461a      	mov	r2, r3
 80092cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80092d2:	005a      	lsls	r2, r3, #1
 80092d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	085b      	lsrs	r3, r3, #1
 80092da:	441a      	add	r2, r3
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e8:	2b0f      	cmp	r3, #15
 80092ea:	d916      	bls.n	800931a <UART_SetConfig+0x27a>
 80092ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f2:	d212      	bcs.n	800931a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f023 030f 	bic.w	r3, r3, #15
 80092fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	b29b      	uxth	r3, r3
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	b29a      	uxth	r2, r3
 800930a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800930c:	4313      	orrs	r3, r2
 800930e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009316:	60da      	str	r2, [r3, #12]
 8009318:	e042      	b.n	80093a0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009320:	e03e      	b.n	80093a0 <UART_SetConfig+0x300>
 8009322:	bf00      	nop
 8009324:	46002400 	.word	0x46002400
 8009328:	cfff69f3 	.word	0xcfff69f3
 800932c:	56002400 	.word	0x56002400
 8009330:	40013800 	.word	0x40013800
 8009334:	40004800 	.word	0x40004800
 8009338:	40004c00 	.word	0x40004c00
 800933c:	40005000 	.word	0x40005000
 8009340:	0800e090 	.word	0x0800e090
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009346:	2200      	movs	r2, #0
 8009348:	469a      	mov	sl, r3
 800934a:	4693      	mov	fp, r2
 800934c:	4650      	mov	r0, sl
 800934e:	4659      	mov	r1, fp
 8009350:	f7fc fa72 	bl	8005838 <HAL_RCCEx_GetPeriphCLKFreq>
 8009354:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009358:	2b00      	cmp	r3, #0
 800935a:	d021      	beq.n	80093a0 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800935c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009360:	4a1a      	ldr	r2, [pc, #104]	@ (80093cc <UART_SetConfig+0x32c>)
 8009362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009366:	461a      	mov	r2, r3
 8009368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800936a:	fbb3 f2f2 	udiv	r2, r3, r2
 800936e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	085b      	lsrs	r3, r3, #1
 8009374:	441a      	add	r2, r3
 8009376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	fbb2 f3f3 	udiv	r3, r2, r3
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009382:	2b0f      	cmp	r3, #15
 8009384:	d909      	bls.n	800939a <UART_SetConfig+0x2fa>
 8009386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800938c:	d205      	bcs.n	800939a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	b29a      	uxth	r2, r3
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60da      	str	r2, [r3, #12]
 8009398:	e002      	b.n	80093a0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a2:	2201      	movs	r2, #1
 80093a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80093a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093aa:	2201      	movs	r2, #1
 80093ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b2:	2200      	movs	r2, #0
 80093b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b8:	2200      	movs	r2, #0
 80093ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3750      	adds	r7, #80	@ 0x50
 80093c4:	46bd      	mov	sp, r7
 80093c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093ca:	bf00      	nop
 80093cc:	0800e090 	.word	0x0800e090

080093d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	f003 0308 	and.w	r3, r3, #8
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00a      	beq.n	80093fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00a      	beq.n	800943e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009486:	f003 0320 	and.w	r3, r3, #32
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01a      	beq.n	80094e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ce:	d10a      	bne.n	80094e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b098      	sub	sp, #96	@ 0x60
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009524:	f7f8 fc6a 	bl	8001dfc <HAL_GetTick>
 8009528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b08      	cmp	r3, #8
 8009536:	d12f      	bne.n	8009598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009540:	2200      	movs	r2, #0
 8009542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f88e 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d022      	beq.n	8009598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009566:	653b      	str	r3, [r7, #80]	@ 0x50
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009570:	647b      	str	r3, [r7, #68]	@ 0x44
 8009572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800957e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e6      	bne.n	8009552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e063      	b.n	8009660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d149      	bne.n	800963a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ae:	2200      	movs	r2, #0
 80095b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f857 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d03c      	beq.n	800963a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	623b      	str	r3, [r7, #32]
   return(result);
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095de:	633b      	str	r3, [r7, #48]	@ 0x30
 80095e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	60fb      	str	r3, [r7, #12]
   return(result);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009612:	61fa      	str	r2, [r7, #28]
 8009614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	69b9      	ldr	r1, [r7, #24]
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	617b      	str	r3, [r7, #20]
   return(result);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e012      	b.n	8009660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3758      	adds	r7, #88	@ 0x58
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009678:	e04f      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d04b      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009682:	f7f8 fbbb 	bl	8001dfc <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	429a      	cmp	r2, r3
 8009690:	d302      	bcc.n	8009698 <UART_WaitOnFlagUntilTimeout+0x30>
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e04e      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d037      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b80      	cmp	r3, #128	@ 0x80
 80096ae:	d034      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b40      	cmp	r3, #64	@ 0x40
 80096b4:	d031      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f003 0308 	and.w	r3, r3, #8
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d110      	bne.n	80096e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2208      	movs	r2, #8
 80096ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f838 	bl	8009742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2208      	movs	r2, #8
 80096d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e029      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f4:	d111      	bne.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f81e 	bl	8009742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e00f      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69da      	ldr	r2, [r3, #28]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4013      	ands	r3, r2
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	429a      	cmp	r2, r3
 8009736:	d0a0      	beq.n	800967a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009742:	b480      	push	{r7}
 8009744:	b095      	sub	sp, #84	@ 0x54
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800975e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	461a      	mov	r2, r3
 8009766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009768:	643b      	str	r3, [r7, #64]	@ 0x40
 800976a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800976e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e6      	bne.n	800974a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	61fb      	str	r3, [r7, #28]
   return(result);
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009792:	f023 0301 	bic.w	r3, r3, #1
 8009796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3308      	adds	r3, #8
 800979e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e3      	bne.n	800977c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d118      	bne.n	80097ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f023 0310 	bic.w	r3, r3, #16
 80097d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097da:	61bb      	str	r3, [r7, #24]
 80097dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6979      	ldr	r1, [r7, #20]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	613b      	str	r3, [r7, #16]
   return(result);
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e6      	bne.n	80097bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009802:	bf00      	nop
 8009804:	3754      	adds	r7, #84	@ 0x54
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <__cvt>:
 800980e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009812:	ec57 6b10 	vmov	r6, r7, d0
 8009816:	2f00      	cmp	r7, #0
 8009818:	460c      	mov	r4, r1
 800981a:	4619      	mov	r1, r3
 800981c:	463b      	mov	r3, r7
 800981e:	bfb4      	ite	lt
 8009820:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009824:	2300      	movge	r3, #0
 8009826:	4691      	mov	r9, r2
 8009828:	bfbf      	itttt	lt
 800982a:	4632      	movlt	r2, r6
 800982c:	461f      	movlt	r7, r3
 800982e:	232d      	movlt	r3, #45	@ 0x2d
 8009830:	4616      	movlt	r6, r2
 8009832:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009836:	700b      	strb	r3, [r1, #0]
 8009838:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800983a:	f023 0820 	bic.w	r8, r3, #32
 800983e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009842:	d005      	beq.n	8009850 <__cvt+0x42>
 8009844:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009848:	d100      	bne.n	800984c <__cvt+0x3e>
 800984a:	3401      	adds	r4, #1
 800984c:	2102      	movs	r1, #2
 800984e:	e000      	b.n	8009852 <__cvt+0x44>
 8009850:	2103      	movs	r1, #3
 8009852:	ab03      	add	r3, sp, #12
 8009854:	4622      	mov	r2, r4
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	ab02      	add	r3, sp, #8
 800985a:	ec47 6b10 	vmov	d0, r6, r7
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	4653      	mov	r3, sl
 8009862:	f001 f89d 	bl	800a9a0 <_dtoa_r>
 8009866:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800986a:	4605      	mov	r5, r0
 800986c:	d119      	bne.n	80098a2 <__cvt+0x94>
 800986e:	f019 0f01 	tst.w	r9, #1
 8009872:	d00e      	beq.n	8009892 <__cvt+0x84>
 8009874:	eb00 0904 	add.w	r9, r0, r4
 8009878:	2200      	movs	r2, #0
 800987a:	2300      	movs	r3, #0
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	f7f7 f926 	bl	8000ad0 <__aeabi_dcmpeq>
 8009884:	b108      	cbz	r0, 800988a <__cvt+0x7c>
 8009886:	f8cd 900c 	str.w	r9, [sp, #12]
 800988a:	2230      	movs	r2, #48	@ 0x30
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	454b      	cmp	r3, r9
 8009890:	d31e      	bcc.n	80098d0 <__cvt+0xc2>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	4628      	mov	r0, r5
 8009896:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009898:	1b5b      	subs	r3, r3, r5
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	b004      	add	sp, #16
 800989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098a6:	eb00 0904 	add.w	r9, r0, r4
 80098aa:	d1e5      	bne.n	8009878 <__cvt+0x6a>
 80098ac:	7803      	ldrb	r3, [r0, #0]
 80098ae:	2b30      	cmp	r3, #48	@ 0x30
 80098b0:	d10a      	bne.n	80098c8 <__cvt+0xba>
 80098b2:	2200      	movs	r2, #0
 80098b4:	2300      	movs	r3, #0
 80098b6:	4630      	mov	r0, r6
 80098b8:	4639      	mov	r1, r7
 80098ba:	f7f7 f909 	bl	8000ad0 <__aeabi_dcmpeq>
 80098be:	b918      	cbnz	r0, 80098c8 <__cvt+0xba>
 80098c0:	f1c4 0401 	rsb	r4, r4, #1
 80098c4:	f8ca 4000 	str.w	r4, [sl]
 80098c8:	f8da 3000 	ldr.w	r3, [sl]
 80098cc:	4499      	add	r9, r3
 80098ce:	e7d3      	b.n	8009878 <__cvt+0x6a>
 80098d0:	1c59      	adds	r1, r3, #1
 80098d2:	9103      	str	r1, [sp, #12]
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	e7d9      	b.n	800988c <__cvt+0x7e>

080098d8 <__exponent>:
 80098d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098da:	2900      	cmp	r1, #0
 80098dc:	7002      	strb	r2, [r0, #0]
 80098de:	bfba      	itte	lt
 80098e0:	4249      	neglt	r1, r1
 80098e2:	232d      	movlt	r3, #45	@ 0x2d
 80098e4:	232b      	movge	r3, #43	@ 0x2b
 80098e6:	2909      	cmp	r1, #9
 80098e8:	7043      	strb	r3, [r0, #1]
 80098ea:	dd28      	ble.n	800993e <__exponent+0x66>
 80098ec:	f10d 0307 	add.w	r3, sp, #7
 80098f0:	270a      	movs	r7, #10
 80098f2:	461d      	mov	r5, r3
 80098f4:	461a      	mov	r2, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80098fc:	fb07 1416 	mls	r4, r7, r6, r1
 8009900:	3430      	adds	r4, #48	@ 0x30
 8009902:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009906:	460c      	mov	r4, r1
 8009908:	4631      	mov	r1, r6
 800990a:	2c63      	cmp	r4, #99	@ 0x63
 800990c:	dcf2      	bgt.n	80098f4 <__exponent+0x1c>
 800990e:	3130      	adds	r1, #48	@ 0x30
 8009910:	1e94      	subs	r4, r2, #2
 8009912:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009916:	1c41      	adds	r1, r0, #1
 8009918:	4623      	mov	r3, r4
 800991a:	42ab      	cmp	r3, r5
 800991c:	d30a      	bcc.n	8009934 <__exponent+0x5c>
 800991e:	f10d 0309 	add.w	r3, sp, #9
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	42ac      	cmp	r4, r5
 8009926:	bf88      	it	hi
 8009928:	2300      	movhi	r3, #0
 800992a:	3302      	adds	r3, #2
 800992c:	4403      	add	r3, r0
 800992e:	1a18      	subs	r0, r3, r0
 8009930:	b003      	add	sp, #12
 8009932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009934:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009938:	f801 6f01 	strb.w	r6, [r1, #1]!
 800993c:	e7ed      	b.n	800991a <__exponent+0x42>
 800993e:	2330      	movs	r3, #48	@ 0x30
 8009940:	3130      	adds	r1, #48	@ 0x30
 8009942:	7083      	strb	r3, [r0, #2]
 8009944:	1d03      	adds	r3, r0, #4
 8009946:	70c1      	strb	r1, [r0, #3]
 8009948:	e7f1      	b.n	800992e <__exponent+0x56>
	...

0800994c <_printf_float>:
 800994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009950:	b08d      	sub	sp, #52	@ 0x34
 8009952:	460c      	mov	r4, r1
 8009954:	4616      	mov	r6, r2
 8009956:	461f      	mov	r7, r3
 8009958:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800995c:	4605      	mov	r5, r0
 800995e:	f000 ff03 	bl	800a768 <_localeconv_r>
 8009962:	6803      	ldr	r3, [r0, #0]
 8009964:	4618      	mov	r0, r3
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	f7f6 fc86 	bl	8000278 <strlen>
 800996c:	2300      	movs	r3, #0
 800996e:	9005      	str	r0, [sp, #20]
 8009970:	930a      	str	r3, [sp, #40]	@ 0x28
 8009972:	f8d8 3000 	ldr.w	r3, [r8]
 8009976:	f894 a018 	ldrb.w	sl, [r4, #24]
 800997a:	3307      	adds	r3, #7
 800997c:	f8d4 b000 	ldr.w	fp, [r4]
 8009980:	f023 0307 	bic.w	r3, r3, #7
 8009984:	f103 0208 	add.w	r2, r3, #8
 8009988:	f8c8 2000 	str.w	r2, [r8]
 800998c:	f04f 32ff 	mov.w	r2, #4294967295
 8009990:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009994:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009998:	f8cd 8018 	str.w	r8, [sp, #24]
 800999c:	9307      	str	r3, [sp, #28]
 800999e:	4b9d      	ldr	r3, [pc, #628]	@ (8009c14 <_printf_float+0x2c8>)
 80099a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80099a8:	f7f7 f8c4 	bl	8000b34 <__aeabi_dcmpun>
 80099ac:	bb70      	cbnz	r0, 8009a0c <_printf_float+0xc0>
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295
 80099b2:	4b98      	ldr	r3, [pc, #608]	@ (8009c14 <_printf_float+0x2c8>)
 80099b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099b8:	f7f7 f89e 	bl	8000af8 <__aeabi_dcmple>
 80099bc:	bb30      	cbnz	r0, 8009a0c <_printf_float+0xc0>
 80099be:	2200      	movs	r2, #0
 80099c0:	2300      	movs	r3, #0
 80099c2:	4640      	mov	r0, r8
 80099c4:	4649      	mov	r1, r9
 80099c6:	f7f7 f88d 	bl	8000ae4 <__aeabi_dcmplt>
 80099ca:	b110      	cbz	r0, 80099d2 <_printf_float+0x86>
 80099cc:	232d      	movs	r3, #45	@ 0x2d
 80099ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099d2:	4a91      	ldr	r2, [pc, #580]	@ (8009c18 <_printf_float+0x2cc>)
 80099d4:	4b91      	ldr	r3, [pc, #580]	@ (8009c1c <_printf_float+0x2d0>)
 80099d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099da:	bf94      	ite	ls
 80099dc:	4690      	movls	r8, r2
 80099de:	4698      	movhi	r8, r3
 80099e0:	2303      	movs	r3, #3
 80099e2:	f04f 0900 	mov.w	r9, #0
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	f02b 0304 	bic.w	r3, fp, #4
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	4633      	mov	r3, r6
 80099f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099f2:	4621      	mov	r1, r4
 80099f4:	4628      	mov	r0, r5
 80099f6:	9700      	str	r7, [sp, #0]
 80099f8:	f000 f9d2 	bl	8009da0 <_printf_common>
 80099fc:	3001      	adds	r0, #1
 80099fe:	f040 808d 	bne.w	8009b1c <_printf_float+0x1d0>
 8009a02:	f04f 30ff 	mov.w	r0, #4294967295
 8009a06:	b00d      	add	sp, #52	@ 0x34
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	4642      	mov	r2, r8
 8009a0e:	464b      	mov	r3, r9
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f7 f88e 	bl	8000b34 <__aeabi_dcmpun>
 8009a18:	b140      	cbz	r0, 8009a2c <_printf_float+0xe0>
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	4a80      	ldr	r2, [pc, #512]	@ (8009c20 <_printf_float+0x2d4>)
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bfbc      	itt	lt
 8009a22:	232d      	movlt	r3, #45	@ 0x2d
 8009a24:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a28:	4b7e      	ldr	r3, [pc, #504]	@ (8009c24 <_printf_float+0x2d8>)
 8009a2a:	e7d4      	b.n	80099d6 <_printf_float+0x8a>
 8009a2c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a30:	6863      	ldr	r3, [r4, #4]
 8009a32:	9206      	str	r2, [sp, #24]
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	d13b      	bne.n	8009ab0 <_printf_float+0x164>
 8009a38:	2306      	movs	r3, #6
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a40:	2300      	movs	r3, #0
 8009a42:	4628      	mov	r0, r5
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	9303      	str	r3, [sp, #12]
 8009a48:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a4a:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a4e:	ab09      	add	r3, sp, #36	@ 0x24
 8009a50:	ec49 8b10 	vmov	d0, r8, r9
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a5a:	6861      	ldr	r1, [r4, #4]
 8009a5c:	f7ff fed7 	bl	800980e <__cvt>
 8009a60:	9b06      	ldr	r3, [sp, #24]
 8009a62:	4680      	mov	r8, r0
 8009a64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a66:	2b47      	cmp	r3, #71	@ 0x47
 8009a68:	d129      	bne.n	8009abe <_printf_float+0x172>
 8009a6a:	1cc8      	adds	r0, r1, #3
 8009a6c:	db02      	blt.n	8009a74 <_printf_float+0x128>
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	4299      	cmp	r1, r3
 8009a72:	dd41      	ble.n	8009af8 <_printf_float+0x1ac>
 8009a74:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a78:	fa5f fa8a 	uxtb.w	sl, sl
 8009a7c:	3901      	subs	r1, #1
 8009a7e:	4652      	mov	r2, sl
 8009a80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a84:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a86:	f7ff ff27 	bl	80098d8 <__exponent>
 8009a8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a8c:	4681      	mov	r9, r0
 8009a8e:	1813      	adds	r3, r2, r0
 8009a90:	2a01      	cmp	r2, #1
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	dc02      	bgt.n	8009a9c <_printf_float+0x150>
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	07d2      	lsls	r2, r2, #31
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_float+0x154>
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	6123      	str	r3, [r4, #16]
 8009aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d0a2      	beq.n	80099ee <_printf_float+0xa2>
 8009aa8:	232d      	movs	r3, #45	@ 0x2d
 8009aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aae:	e79e      	b.n	80099ee <_printf_float+0xa2>
 8009ab0:	9a06      	ldr	r2, [sp, #24]
 8009ab2:	2a47      	cmp	r2, #71	@ 0x47
 8009ab4:	d1c2      	bne.n	8009a3c <_printf_float+0xf0>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1c0      	bne.n	8009a3c <_printf_float+0xf0>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e7bd      	b.n	8009a3a <_printf_float+0xee>
 8009abe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ac2:	d9db      	bls.n	8009a7c <_printf_float+0x130>
 8009ac4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ac8:	d118      	bne.n	8009afc <_printf_float+0x1b0>
 8009aca:	2900      	cmp	r1, #0
 8009acc:	6863      	ldr	r3, [r4, #4]
 8009ace:	dd0b      	ble.n	8009ae8 <_printf_float+0x19c>
 8009ad0:	6121      	str	r1, [r4, #16]
 8009ad2:	b913      	cbnz	r3, 8009ada <_printf_float+0x18e>
 8009ad4:	6822      	ldr	r2, [r4, #0]
 8009ad6:	07d0      	lsls	r0, r2, #31
 8009ad8:	d502      	bpl.n	8009ae0 <_printf_float+0x194>
 8009ada:	3301      	adds	r3, #1
 8009adc:	440b      	add	r3, r1
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	f04f 0900 	mov.w	r9, #0
 8009ae4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ae6:	e7db      	b.n	8009aa0 <_printf_float+0x154>
 8009ae8:	b913      	cbnz	r3, 8009af0 <_printf_float+0x1a4>
 8009aea:	6822      	ldr	r2, [r4, #0]
 8009aec:	07d2      	lsls	r2, r2, #31
 8009aee:	d501      	bpl.n	8009af4 <_printf_float+0x1a8>
 8009af0:	3302      	adds	r3, #2
 8009af2:	e7f4      	b.n	8009ade <_printf_float+0x192>
 8009af4:	2301      	movs	r3, #1
 8009af6:	e7f2      	b.n	8009ade <_printf_float+0x192>
 8009af8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009afe:	4299      	cmp	r1, r3
 8009b00:	db05      	blt.n	8009b0e <_printf_float+0x1c2>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	6121      	str	r1, [r4, #16]
 8009b06:	07d8      	lsls	r0, r3, #31
 8009b08:	d5ea      	bpl.n	8009ae0 <_printf_float+0x194>
 8009b0a:	1c4b      	adds	r3, r1, #1
 8009b0c:	e7e7      	b.n	8009ade <_printf_float+0x192>
 8009b0e:	2900      	cmp	r1, #0
 8009b10:	bfd4      	ite	le
 8009b12:	f1c1 0202 	rsble	r2, r1, #2
 8009b16:	2201      	movgt	r2, #1
 8009b18:	4413      	add	r3, r2
 8009b1a:	e7e0      	b.n	8009ade <_printf_float+0x192>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	055a      	lsls	r2, r3, #21
 8009b20:	d407      	bmi.n	8009b32 <_printf_float+0x1e6>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	4642      	mov	r2, r8
 8009b26:	4631      	mov	r1, r6
 8009b28:	4628      	mov	r0, r5
 8009b2a:	47b8      	blx	r7
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d12b      	bne.n	8009b88 <_printf_float+0x23c>
 8009b30:	e767      	b.n	8009a02 <_printf_float+0xb6>
 8009b32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b36:	f240 80dd 	bls.w	8009cf4 <_printf_float+0x3a8>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b42:	f7f6 ffc5 	bl	8000ad0 <__aeabi_dcmpeq>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d033      	beq.n	8009bb2 <_printf_float+0x266>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4a36      	ldr	r2, [pc, #216]	@ (8009c28 <_printf_float+0x2dc>)
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b8      	blx	r7
 8009b54:	3001      	adds	r0, #1
 8009b56:	f43f af54 	beq.w	8009a02 <_printf_float+0xb6>
 8009b5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b5e:	4543      	cmp	r3, r8
 8009b60:	db02      	blt.n	8009b68 <_printf_float+0x21c>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	07d8      	lsls	r0, r3, #31
 8009b66:	d50f      	bpl.n	8009b88 <_printf_float+0x23c>
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b70:	47b8      	blx	r7
 8009b72:	3001      	adds	r0, #1
 8009b74:	f43f af45 	beq.w	8009a02 <_printf_float+0xb6>
 8009b78:	f04f 0900 	mov.w	r9, #0
 8009b7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b80:	f104 0a1a 	add.w	sl, r4, #26
 8009b84:	45c8      	cmp	r8, r9
 8009b86:	dc09      	bgt.n	8009b9c <_printf_float+0x250>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	079b      	lsls	r3, r3, #30
 8009b8c:	f100 8103 	bmi.w	8009d96 <_printf_float+0x44a>
 8009b90:	68e0      	ldr	r0, [r4, #12]
 8009b92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b94:	4298      	cmp	r0, r3
 8009b96:	bfb8      	it	lt
 8009b98:	4618      	movlt	r0, r3
 8009b9a:	e734      	b.n	8009a06 <_printf_float+0xba>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	4652      	mov	r2, sl
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f af2b 	beq.w	8009a02 <_printf_float+0xb6>
 8009bac:	f109 0901 	add.w	r9, r9, #1
 8009bb0:	e7e8      	b.n	8009b84 <_printf_float+0x238>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dc39      	bgt.n	8009c2c <_printf_float+0x2e0>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	4a1b      	ldr	r2, [pc, #108]	@ (8009c28 <_printf_float+0x2dc>)
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f af1d 	beq.w	8009a02 <_printf_float+0xb6>
 8009bc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009bcc:	ea59 0303 	orrs.w	r3, r9, r3
 8009bd0:	d102      	bne.n	8009bd8 <_printf_float+0x28c>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	07d9      	lsls	r1, r3, #31
 8009bd6:	d5d7      	bpl.n	8009b88 <_printf_float+0x23c>
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	f43f af0d 	beq.w	8009a02 <_printf_float+0xb6>
 8009be8:	f04f 0a00 	mov.w	sl, #0
 8009bec:	f104 0b1a 	add.w	fp, r4, #26
 8009bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf2:	425b      	negs	r3, r3
 8009bf4:	4553      	cmp	r3, sl
 8009bf6:	dc01      	bgt.n	8009bfc <_printf_float+0x2b0>
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	e793      	b.n	8009b24 <_printf_float+0x1d8>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	465a      	mov	r2, fp
 8009c00:	4631      	mov	r1, r6
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	f43f aefb 	beq.w	8009a02 <_printf_float+0xb6>
 8009c0c:	f10a 0a01 	add.w	sl, sl, #1
 8009c10:	e7ee      	b.n	8009bf0 <_printf_float+0x2a4>
 8009c12:	bf00      	nop
 8009c14:	7fefffff 	.word	0x7fefffff
 8009c18:	0800e0a8 	.word	0x0800e0a8
 8009c1c:	0800e0ac 	.word	0x0800e0ac
 8009c20:	0800e0b0 	.word	0x0800e0b0
 8009c24:	0800e0b4 	.word	0x0800e0b4
 8009c28:	0800e0b8 	.word	0x0800e0b8
 8009c2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c32:	4553      	cmp	r3, sl
 8009c34:	bfa8      	it	ge
 8009c36:	4653      	movge	r3, sl
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	4699      	mov	r9, r3
 8009c3c:	dc36      	bgt.n	8009cac <_printf_float+0x360>
 8009c3e:	f04f 0b00 	mov.w	fp, #0
 8009c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c46:	f104 021a 	add.w	r2, r4, #26
 8009c4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c4c:	9306      	str	r3, [sp, #24]
 8009c4e:	eba3 0309 	sub.w	r3, r3, r9
 8009c52:	455b      	cmp	r3, fp
 8009c54:	dc31      	bgt.n	8009cba <_printf_float+0x36e>
 8009c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c58:	459a      	cmp	sl, r3
 8009c5a:	dc3a      	bgt.n	8009cd2 <_printf_float+0x386>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	07da      	lsls	r2, r3, #31
 8009c60:	d437      	bmi.n	8009cd2 <_printf_float+0x386>
 8009c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c64:	ebaa 0903 	sub.w	r9, sl, r3
 8009c68:	9b06      	ldr	r3, [sp, #24]
 8009c6a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c6e:	4599      	cmp	r9, r3
 8009c70:	bfa8      	it	ge
 8009c72:	4699      	movge	r9, r3
 8009c74:	f1b9 0f00 	cmp.w	r9, #0
 8009c78:	dc33      	bgt.n	8009ce2 <_printf_float+0x396>
 8009c7a:	f04f 0800 	mov.w	r8, #0
 8009c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c82:	f104 0b1a 	add.w	fp, r4, #26
 8009c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c88:	ebaa 0303 	sub.w	r3, sl, r3
 8009c8c:	eba3 0309 	sub.w	r3, r3, r9
 8009c90:	4543      	cmp	r3, r8
 8009c92:	f77f af79 	ble.w	8009b88 <_printf_float+0x23c>
 8009c96:	2301      	movs	r3, #1
 8009c98:	465a      	mov	r2, fp
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f aeae 	beq.w	8009a02 <_printf_float+0xb6>
 8009ca6:	f108 0801 	add.w	r8, r8, #1
 8009caa:	e7ec      	b.n	8009c86 <_printf_float+0x33a>
 8009cac:	4642      	mov	r2, r8
 8009cae:	4631      	mov	r1, r6
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	47b8      	blx	r7
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d1c2      	bne.n	8009c3e <_printf_float+0x2f2>
 8009cb8:	e6a3      	b.n	8009a02 <_printf_float+0xb6>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	9206      	str	r2, [sp, #24]
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f43f ae9c 	beq.w	8009a02 <_printf_float+0xb6>
 8009cca:	f10b 0b01 	add.w	fp, fp, #1
 8009cce:	9a06      	ldr	r2, [sp, #24]
 8009cd0:	e7bb      	b.n	8009c4a <_printf_float+0x2fe>
 8009cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d1c0      	bne.n	8009c62 <_printf_float+0x316>
 8009ce0:	e68f      	b.n	8009a02 <_printf_float+0xb6>
 8009ce2:	9a06      	ldr	r2, [sp, #24]
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	4442      	add	r2, r8
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d1c3      	bne.n	8009c7a <_printf_float+0x32e>
 8009cf2:	e686      	b.n	8009a02 <_printf_float+0xb6>
 8009cf4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009cf8:	f1ba 0f01 	cmp.w	sl, #1
 8009cfc:	dc01      	bgt.n	8009d02 <_printf_float+0x3b6>
 8009cfe:	07db      	lsls	r3, r3, #31
 8009d00:	d536      	bpl.n	8009d70 <_printf_float+0x424>
 8009d02:	2301      	movs	r3, #1
 8009d04:	4642      	mov	r2, r8
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f43f ae78 	beq.w	8009a02 <_printf_float+0xb6>
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d1a:	47b8      	blx	r7
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	f43f ae70 	beq.w	8009a02 <_printf_float+0xb6>
 8009d22:	2200      	movs	r2, #0
 8009d24:	2300      	movs	r3, #0
 8009d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d2e:	f7f6 fecf 	bl	8000ad0 <__aeabi_dcmpeq>
 8009d32:	b9c0      	cbnz	r0, 8009d66 <_printf_float+0x41a>
 8009d34:	4653      	mov	r3, sl
 8009d36:	f108 0201 	add.w	r2, r8, #1
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	d10c      	bne.n	8009d5e <_printf_float+0x412>
 8009d44:	e65d      	b.n	8009a02 <_printf_float+0xb6>
 8009d46:	2301      	movs	r3, #1
 8009d48:	465a      	mov	r2, fp
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f ae56 	beq.w	8009a02 <_printf_float+0xb6>
 8009d56:	f108 0801 	add.w	r8, r8, #1
 8009d5a:	45d0      	cmp	r8, sl
 8009d5c:	dbf3      	blt.n	8009d46 <_printf_float+0x3fa>
 8009d5e:	464b      	mov	r3, r9
 8009d60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d64:	e6df      	b.n	8009b26 <_printf_float+0x1da>
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	f104 0b1a 	add.w	fp, r4, #26
 8009d6e:	e7f4      	b.n	8009d5a <_printf_float+0x40e>
 8009d70:	2301      	movs	r3, #1
 8009d72:	4642      	mov	r2, r8
 8009d74:	e7e1      	b.n	8009d3a <_printf_float+0x3ee>
 8009d76:	2301      	movs	r3, #1
 8009d78:	464a      	mov	r2, r9
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b8      	blx	r7
 8009d80:	3001      	adds	r0, #1
 8009d82:	f43f ae3e 	beq.w	8009a02 <_printf_float+0xb6>
 8009d86:	f108 0801 	add.w	r8, r8, #1
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d8e:	1a5b      	subs	r3, r3, r1
 8009d90:	4543      	cmp	r3, r8
 8009d92:	dcf0      	bgt.n	8009d76 <_printf_float+0x42a>
 8009d94:	e6fc      	b.n	8009b90 <_printf_float+0x244>
 8009d96:	f04f 0800 	mov.w	r8, #0
 8009d9a:	f104 0919 	add.w	r9, r4, #25
 8009d9e:	e7f4      	b.n	8009d8a <_printf_float+0x43e>

08009da0 <_printf_common>:
 8009da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da4:	4616      	mov	r6, r2
 8009da6:	4698      	mov	r8, r3
 8009da8:	688a      	ldr	r2, [r1, #8]
 8009daa:	4607      	mov	r7, r0
 8009dac:	690b      	ldr	r3, [r1, #16]
 8009dae:	460c      	mov	r4, r1
 8009db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	bfb8      	it	lt
 8009db8:	4613      	movlt	r3, r2
 8009dba:	6033      	str	r3, [r6, #0]
 8009dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009dc0:	b10a      	cbz	r2, 8009dc6 <_printf_common+0x26>
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	6033      	str	r3, [r6, #0]
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	0699      	lsls	r1, r3, #26
 8009dca:	bf42      	ittt	mi
 8009dcc:	6833      	ldrmi	r3, [r6, #0]
 8009dce:	3302      	addmi	r3, #2
 8009dd0:	6033      	strmi	r3, [r6, #0]
 8009dd2:	6825      	ldr	r5, [r4, #0]
 8009dd4:	f015 0506 	ands.w	r5, r5, #6
 8009dd8:	d106      	bne.n	8009de8 <_printf_common+0x48>
 8009dda:	f104 0a19 	add.w	sl, r4, #25
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	6832      	ldr	r2, [r6, #0]
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	42ab      	cmp	r3, r5
 8009de6:	dc2b      	bgt.n	8009e40 <_printf_common+0xa0>
 8009de8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dec:	6822      	ldr	r2, [r4, #0]
 8009dee:	3b00      	subs	r3, #0
 8009df0:	bf18      	it	ne
 8009df2:	2301      	movne	r3, #1
 8009df4:	0692      	lsls	r2, r2, #26
 8009df6:	d430      	bmi.n	8009e5a <_printf_common+0xba>
 8009df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dfc:	4641      	mov	r1, r8
 8009dfe:	4638      	mov	r0, r7
 8009e00:	47c8      	blx	r9
 8009e02:	3001      	adds	r0, #1
 8009e04:	d023      	beq.n	8009e4e <_printf_common+0xae>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	341a      	adds	r4, #26
 8009e0a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009e0e:	f003 0306 	and.w	r3, r3, #6
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	bf0a      	itet	eq
 8009e16:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009e1a:	2500      	movne	r5, #0
 8009e1c:	6833      	ldreq	r3, [r6, #0]
 8009e1e:	f04f 0600 	mov.w	r6, #0
 8009e22:	bf08      	it	eq
 8009e24:	1aed      	subeq	r5, r5, r3
 8009e26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e2a:	bf08      	it	eq
 8009e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e30:	4293      	cmp	r3, r2
 8009e32:	bfc4      	itt	gt
 8009e34:	1a9b      	subgt	r3, r3, r2
 8009e36:	18ed      	addgt	r5, r5, r3
 8009e38:	42b5      	cmp	r5, r6
 8009e3a:	d11a      	bne.n	8009e72 <_printf_common+0xd2>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e008      	b.n	8009e52 <_printf_common+0xb2>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4652      	mov	r2, sl
 8009e44:	4641      	mov	r1, r8
 8009e46:	4638      	mov	r0, r7
 8009e48:	47c8      	blx	r9
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d103      	bne.n	8009e56 <_printf_common+0xb6>
 8009e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e56:	3501      	adds	r5, #1
 8009e58:	e7c1      	b.n	8009dde <_printf_common+0x3e>
 8009e5a:	18e1      	adds	r1, r4, r3
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	2030      	movs	r0, #48	@ 0x30
 8009e60:	3302      	adds	r3, #2
 8009e62:	4422      	add	r2, r4
 8009e64:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e70:	e7c2      	b.n	8009df8 <_printf_common+0x58>
 8009e72:	2301      	movs	r3, #1
 8009e74:	4622      	mov	r2, r4
 8009e76:	4641      	mov	r1, r8
 8009e78:	4638      	mov	r0, r7
 8009e7a:	47c8      	blx	r9
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	d0e6      	beq.n	8009e4e <_printf_common+0xae>
 8009e80:	3601      	adds	r6, #1
 8009e82:	e7d9      	b.n	8009e38 <_printf_common+0x98>

08009e84 <_printf_i>:
 8009e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	7e0f      	ldrb	r7, [r1, #24]
 8009e8a:	4691      	mov	r9, r2
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	2f78      	cmp	r7, #120	@ 0x78
 8009e92:	469a      	mov	sl, r3
 8009e94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e9a:	d807      	bhi.n	8009eac <_printf_i+0x28>
 8009e9c:	2f62      	cmp	r7, #98	@ 0x62
 8009e9e:	d80a      	bhi.n	8009eb6 <_printf_i+0x32>
 8009ea0:	2f00      	cmp	r7, #0
 8009ea2:	f000 80d2 	beq.w	800a04a <_printf_i+0x1c6>
 8009ea6:	2f58      	cmp	r7, #88	@ 0x58
 8009ea8:	f000 80b9 	beq.w	800a01e <_printf_i+0x19a>
 8009eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009eb4:	e03a      	b.n	8009f2c <_printf_i+0xa8>
 8009eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009eba:	2b15      	cmp	r3, #21
 8009ebc:	d8f6      	bhi.n	8009eac <_printf_i+0x28>
 8009ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8009ec4 <_printf_i+0x40>)
 8009ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ec4:	08009f1d 	.word	0x08009f1d
 8009ec8:	08009f31 	.word	0x08009f31
 8009ecc:	08009ead 	.word	0x08009ead
 8009ed0:	08009ead 	.word	0x08009ead
 8009ed4:	08009ead 	.word	0x08009ead
 8009ed8:	08009ead 	.word	0x08009ead
 8009edc:	08009f31 	.word	0x08009f31
 8009ee0:	08009ead 	.word	0x08009ead
 8009ee4:	08009ead 	.word	0x08009ead
 8009ee8:	08009ead 	.word	0x08009ead
 8009eec:	08009ead 	.word	0x08009ead
 8009ef0:	0800a031 	.word	0x0800a031
 8009ef4:	08009f5b 	.word	0x08009f5b
 8009ef8:	08009feb 	.word	0x08009feb
 8009efc:	08009ead 	.word	0x08009ead
 8009f00:	08009ead 	.word	0x08009ead
 8009f04:	0800a053 	.word	0x0800a053
 8009f08:	08009ead 	.word	0x08009ead
 8009f0c:	08009f5b 	.word	0x08009f5b
 8009f10:	08009ead 	.word	0x08009ead
 8009f14:	08009ead 	.word	0x08009ead
 8009f18:	08009ff3 	.word	0x08009ff3
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	1d1a      	adds	r2, r3, #4
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6032      	str	r2, [r6, #0]
 8009f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e09d      	b.n	800a06c <_printf_i+0x1e8>
 8009f30:	6833      	ldr	r3, [r6, #0]
 8009f32:	6820      	ldr	r0, [r4, #0]
 8009f34:	1d19      	adds	r1, r3, #4
 8009f36:	6031      	str	r1, [r6, #0]
 8009f38:	0606      	lsls	r6, r0, #24
 8009f3a:	d501      	bpl.n	8009f40 <_printf_i+0xbc>
 8009f3c:	681d      	ldr	r5, [r3, #0]
 8009f3e:	e003      	b.n	8009f48 <_printf_i+0xc4>
 8009f40:	0645      	lsls	r5, r0, #25
 8009f42:	d5fb      	bpl.n	8009f3c <_printf_i+0xb8>
 8009f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	da03      	bge.n	8009f54 <_printf_i+0xd0>
 8009f4c:	232d      	movs	r3, #45	@ 0x2d
 8009f4e:	426d      	negs	r5, r5
 8009f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f54:	4859      	ldr	r0, [pc, #356]	@ (800a0bc <_printf_i+0x238>)
 8009f56:	230a      	movs	r3, #10
 8009f58:	e011      	b.n	8009f7e <_printf_i+0xfa>
 8009f5a:	6821      	ldr	r1, [r4, #0]
 8009f5c:	6833      	ldr	r3, [r6, #0]
 8009f5e:	0608      	lsls	r0, r1, #24
 8009f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f64:	d402      	bmi.n	8009f6c <_printf_i+0xe8>
 8009f66:	0649      	lsls	r1, r1, #25
 8009f68:	bf48      	it	mi
 8009f6a:	b2ad      	uxthmi	r5, r5
 8009f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f6e:	6033      	str	r3, [r6, #0]
 8009f70:	4852      	ldr	r0, [pc, #328]	@ (800a0bc <_printf_i+0x238>)
 8009f72:	bf14      	ite	ne
 8009f74:	230a      	movne	r3, #10
 8009f76:	2308      	moveq	r3, #8
 8009f78:	2100      	movs	r1, #0
 8009f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f7e:	6866      	ldr	r6, [r4, #4]
 8009f80:	2e00      	cmp	r6, #0
 8009f82:	60a6      	str	r6, [r4, #8]
 8009f84:	bfa2      	ittt	ge
 8009f86:	6821      	ldrge	r1, [r4, #0]
 8009f88:	f021 0104 	bicge.w	r1, r1, #4
 8009f8c:	6021      	strge	r1, [r4, #0]
 8009f8e:	b90d      	cbnz	r5, 8009f94 <_printf_i+0x110>
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	d04b      	beq.n	800a02c <_printf_i+0x1a8>
 8009f94:	4616      	mov	r6, r2
 8009f96:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f9a:	fb03 5711 	mls	r7, r3, r1, r5
 8009f9e:	5dc7      	ldrb	r7, [r0, r7]
 8009fa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fa4:	462f      	mov	r7, r5
 8009fa6:	460d      	mov	r5, r1
 8009fa8:	42bb      	cmp	r3, r7
 8009faa:	d9f4      	bls.n	8009f96 <_printf_i+0x112>
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d10b      	bne.n	8009fc8 <_printf_i+0x144>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	07df      	lsls	r7, r3, #31
 8009fb4:	d508      	bpl.n	8009fc8 <_printf_i+0x144>
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	6861      	ldr	r1, [r4, #4]
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	bfde      	ittt	le
 8009fbe:	2330      	movle	r3, #48	@ 0x30
 8009fc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fc8:	1b92      	subs	r2, r2, r6
 8009fca:	6122      	str	r2, [r4, #16]
 8009fcc:	464b      	mov	r3, r9
 8009fce:	aa03      	add	r2, sp, #12
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	f8cd a000 	str.w	sl, [sp]
 8009fd8:	f7ff fee2 	bl	8009da0 <_printf_common>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d14a      	bne.n	800a076 <_printf_i+0x1f2>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	b004      	add	sp, #16
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f043 0320 	orr.w	r3, r3, #32
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	2778      	movs	r7, #120	@ 0x78
 8009ff4:	4832      	ldr	r0, [pc, #200]	@ (800a0c0 <_printf_i+0x23c>)
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ffc:	061f      	lsls	r7, r3, #24
 8009ffe:	6831      	ldr	r1, [r6, #0]
 800a000:	f851 5b04 	ldr.w	r5, [r1], #4
 800a004:	d402      	bmi.n	800a00c <_printf_i+0x188>
 800a006:	065f      	lsls	r7, r3, #25
 800a008:	bf48      	it	mi
 800a00a:	b2ad      	uxthmi	r5, r5
 800a00c:	6031      	str	r1, [r6, #0]
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	bf44      	itt	mi
 800a012:	f043 0320 	orrmi.w	r3, r3, #32
 800a016:	6023      	strmi	r3, [r4, #0]
 800a018:	b11d      	cbz	r5, 800a022 <_printf_i+0x19e>
 800a01a:	2310      	movs	r3, #16
 800a01c:	e7ac      	b.n	8009f78 <_printf_i+0xf4>
 800a01e:	4827      	ldr	r0, [pc, #156]	@ (800a0bc <_printf_i+0x238>)
 800a020:	e7e9      	b.n	8009ff6 <_printf_i+0x172>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	f023 0320 	bic.w	r3, r3, #32
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	e7f6      	b.n	800a01a <_printf_i+0x196>
 800a02c:	4616      	mov	r6, r2
 800a02e:	e7bd      	b.n	8009fac <_printf_i+0x128>
 800a030:	6833      	ldr	r3, [r6, #0]
 800a032:	6825      	ldr	r5, [r4, #0]
 800a034:	1d18      	adds	r0, r3, #4
 800a036:	6961      	ldr	r1, [r4, #20]
 800a038:	6030      	str	r0, [r6, #0]
 800a03a:	062e      	lsls	r6, r5, #24
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0x1c0>
 800a040:	6019      	str	r1, [r3, #0]
 800a042:	e002      	b.n	800a04a <_printf_i+0x1c6>
 800a044:	0668      	lsls	r0, r5, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0x1bc>
 800a048:	8019      	strh	r1, [r3, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	4616      	mov	r6, r2
 800a04e:	6123      	str	r3, [r4, #16]
 800a050:	e7bc      	b.n	8009fcc <_printf_i+0x148>
 800a052:	6833      	ldr	r3, [r6, #0]
 800a054:	2100      	movs	r1, #0
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	6032      	str	r2, [r6, #0]
 800a05a:	681e      	ldr	r6, [r3, #0]
 800a05c:	6862      	ldr	r2, [r4, #4]
 800a05e:	4630      	mov	r0, r6
 800a060:	f000 fbf9 	bl	800a856 <memchr>
 800a064:	b108      	cbz	r0, 800a06a <_printf_i+0x1e6>
 800a066:	1b80      	subs	r0, r0, r6
 800a068:	6060      	str	r0, [r4, #4]
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	2300      	movs	r3, #0
 800a070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a074:	e7aa      	b.n	8009fcc <_printf_i+0x148>
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	4632      	mov	r2, r6
 800a07a:	4649      	mov	r1, r9
 800a07c:	4640      	mov	r0, r8
 800a07e:	47d0      	blx	sl
 800a080:	3001      	adds	r0, #1
 800a082:	d0ad      	beq.n	8009fe0 <_printf_i+0x15c>
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	079b      	lsls	r3, r3, #30
 800a088:	d413      	bmi.n	800a0b2 <_printf_i+0x22e>
 800a08a:	68e0      	ldr	r0, [r4, #12]
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	4298      	cmp	r0, r3
 800a090:	bfb8      	it	lt
 800a092:	4618      	movlt	r0, r3
 800a094:	e7a6      	b.n	8009fe4 <_printf_i+0x160>
 800a096:	2301      	movs	r3, #1
 800a098:	4632      	mov	r2, r6
 800a09a:	4649      	mov	r1, r9
 800a09c:	4640      	mov	r0, r8
 800a09e:	47d0      	blx	sl
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d09d      	beq.n	8009fe0 <_printf_i+0x15c>
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	9903      	ldr	r1, [sp, #12]
 800a0aa:	1a5b      	subs	r3, r3, r1
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dcf2      	bgt.n	800a096 <_printf_i+0x212>
 800a0b0:	e7eb      	b.n	800a08a <_printf_i+0x206>
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	f104 0619 	add.w	r6, r4, #25
 800a0b8:	e7f5      	b.n	800a0a6 <_printf_i+0x222>
 800a0ba:	bf00      	nop
 800a0bc:	0800e0ba 	.word	0x0800e0ba
 800a0c0:	0800e0cb 	.word	0x0800e0cb

0800a0c4 <_scanf_float>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	b087      	sub	sp, #28
 800a0ca:	4617      	mov	r7, r2
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	9303      	str	r3, [sp, #12]
 800a0d2:	688b      	ldr	r3, [r1, #8]
 800a0d4:	1e5a      	subs	r2, r3, #1
 800a0d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a0da:	460a      	mov	r2, r1
 800a0dc:	bf89      	itett	hi
 800a0de:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a0e2:	f04f 0b00 	movls.w	fp, #0
 800a0e6:	eb03 0b05 	addhi.w	fp, r3, r5
 800a0ea:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a0ee:	f04f 0500 	mov.w	r5, #0
 800a0f2:	bf88      	it	hi
 800a0f4:	608b      	strhi	r3, [r1, #8]
 800a0f6:	680b      	ldr	r3, [r1, #0]
 800a0f8:	46aa      	mov	sl, r5
 800a0fa:	46a9      	mov	r9, r5
 800a0fc:	9502      	str	r5, [sp, #8]
 800a0fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a102:	f842 3b1c 	str.w	r3, [r2], #28
 800a106:	4616      	mov	r6, r2
 800a108:	9201      	str	r2, [sp, #4]
 800a10a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a10e:	68a2      	ldr	r2, [r4, #8]
 800a110:	b152      	cbz	r2, 800a128 <_scanf_float+0x64>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2b4e      	cmp	r3, #78	@ 0x4e
 800a118:	d864      	bhi.n	800a1e4 <_scanf_float+0x120>
 800a11a:	2b40      	cmp	r3, #64	@ 0x40
 800a11c:	d83c      	bhi.n	800a198 <_scanf_float+0xd4>
 800a11e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a122:	b2c8      	uxtb	r0, r1
 800a124:	280e      	cmp	r0, #14
 800a126:	d93a      	bls.n	800a19e <_scanf_float+0xda>
 800a128:	f1b9 0f00 	cmp.w	r9, #0
 800a12c:	d003      	beq.n	800a136 <_scanf_float+0x72>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a13a:	f1ba 0f01 	cmp.w	sl, #1
 800a13e:	f200 8117 	bhi.w	800a370 <_scanf_float+0x2ac>
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	429e      	cmp	r6, r3
 800a146:	f200 8108 	bhi.w	800a35a <_scanf_float+0x296>
 800a14a:	2001      	movs	r0, #1
 800a14c:	b007      	add	sp, #28
 800a14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a152:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a156:	2a0d      	cmp	r2, #13
 800a158:	d8e6      	bhi.n	800a128 <_scanf_float+0x64>
 800a15a:	a101      	add	r1, pc, #4	@ (adr r1, 800a160 <_scanf_float+0x9c>)
 800a15c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a160:	0800a2a7 	.word	0x0800a2a7
 800a164:	0800a129 	.word	0x0800a129
 800a168:	0800a129 	.word	0x0800a129
 800a16c:	0800a129 	.word	0x0800a129
 800a170:	0800a307 	.word	0x0800a307
 800a174:	0800a2df 	.word	0x0800a2df
 800a178:	0800a129 	.word	0x0800a129
 800a17c:	0800a129 	.word	0x0800a129
 800a180:	0800a2b5 	.word	0x0800a2b5
 800a184:	0800a129 	.word	0x0800a129
 800a188:	0800a129 	.word	0x0800a129
 800a18c:	0800a129 	.word	0x0800a129
 800a190:	0800a129 	.word	0x0800a129
 800a194:	0800a26d 	.word	0x0800a26d
 800a198:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a19c:	e7db      	b.n	800a156 <_scanf_float+0x92>
 800a19e:	290e      	cmp	r1, #14
 800a1a0:	d8c2      	bhi.n	800a128 <_scanf_float+0x64>
 800a1a2:	a001      	add	r0, pc, #4	@ (adr r0, 800a1a8 <_scanf_float+0xe4>)
 800a1a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a1a8:	0800a25d 	.word	0x0800a25d
 800a1ac:	0800a129 	.word	0x0800a129
 800a1b0:	0800a25d 	.word	0x0800a25d
 800a1b4:	0800a2f3 	.word	0x0800a2f3
 800a1b8:	0800a129 	.word	0x0800a129
 800a1bc:	0800a205 	.word	0x0800a205
 800a1c0:	0800a243 	.word	0x0800a243
 800a1c4:	0800a243 	.word	0x0800a243
 800a1c8:	0800a243 	.word	0x0800a243
 800a1cc:	0800a243 	.word	0x0800a243
 800a1d0:	0800a243 	.word	0x0800a243
 800a1d4:	0800a243 	.word	0x0800a243
 800a1d8:	0800a243 	.word	0x0800a243
 800a1dc:	0800a243 	.word	0x0800a243
 800a1e0:	0800a243 	.word	0x0800a243
 800a1e4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1e6:	d809      	bhi.n	800a1fc <_scanf_float+0x138>
 800a1e8:	2b60      	cmp	r3, #96	@ 0x60
 800a1ea:	d8b2      	bhi.n	800a152 <_scanf_float+0x8e>
 800a1ec:	2b54      	cmp	r3, #84	@ 0x54
 800a1ee:	d07b      	beq.n	800a2e8 <_scanf_float+0x224>
 800a1f0:	2b59      	cmp	r3, #89	@ 0x59
 800a1f2:	d199      	bne.n	800a128 <_scanf_float+0x64>
 800a1f4:	2d07      	cmp	r5, #7
 800a1f6:	d197      	bne.n	800a128 <_scanf_float+0x64>
 800a1f8:	2508      	movs	r5, #8
 800a1fa:	e02c      	b.n	800a256 <_scanf_float+0x192>
 800a1fc:	2b74      	cmp	r3, #116	@ 0x74
 800a1fe:	d073      	beq.n	800a2e8 <_scanf_float+0x224>
 800a200:	2b79      	cmp	r3, #121	@ 0x79
 800a202:	e7f6      	b.n	800a1f2 <_scanf_float+0x12e>
 800a204:	6821      	ldr	r1, [r4, #0]
 800a206:	05c8      	lsls	r0, r1, #23
 800a208:	d51b      	bpl.n	800a242 <_scanf_float+0x17e>
 800a20a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a20e:	f109 0901 	add.w	r9, r9, #1
 800a212:	6021      	str	r1, [r4, #0]
 800a214:	f1bb 0f00 	cmp.w	fp, #0
 800a218:	d003      	beq.n	800a222 <_scanf_float+0x15e>
 800a21a:	3201      	adds	r2, #1
 800a21c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a220:	60a2      	str	r2, [r4, #8]
 800a222:	68a3      	ldr	r3, [r4, #8]
 800a224:	3b01      	subs	r3, #1
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	3301      	adds	r3, #1
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3b01      	subs	r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	607b      	str	r3, [r7, #4]
 800a236:	f340 8087 	ble.w	800a348 <_scanf_float+0x284>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	3301      	adds	r3, #1
 800a23e:	603b      	str	r3, [r7, #0]
 800a240:	e765      	b.n	800a10e <_scanf_float+0x4a>
 800a242:	eb1a 0105 	adds.w	r1, sl, r5
 800a246:	f47f af6f 	bne.w	800a128 <_scanf_float+0x64>
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	460d      	mov	r5, r1
 800a24e:	468a      	mov	sl, r1
 800a250:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a254:	6022      	str	r2, [r4, #0]
 800a256:	f806 3b01 	strb.w	r3, [r6], #1
 800a25a:	e7e2      	b.n	800a222 <_scanf_float+0x15e>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	0610      	lsls	r0, r2, #24
 800a260:	f57f af62 	bpl.w	800a128 <_scanf_float+0x64>
 800a264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a268:	6022      	str	r2, [r4, #0]
 800a26a:	e7f4      	b.n	800a256 <_scanf_float+0x192>
 800a26c:	f1ba 0f00 	cmp.w	sl, #0
 800a270:	d10e      	bne.n	800a290 <_scanf_float+0x1cc>
 800a272:	f1b9 0f00 	cmp.w	r9, #0
 800a276:	d10e      	bne.n	800a296 <_scanf_float+0x1d2>
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a27e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a282:	d108      	bne.n	800a296 <_scanf_float+0x1d2>
 800a284:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a288:	f04f 0a01 	mov.w	sl, #1
 800a28c:	6022      	str	r2, [r4, #0]
 800a28e:	e7e2      	b.n	800a256 <_scanf_float+0x192>
 800a290:	f1ba 0f02 	cmp.w	sl, #2
 800a294:	d055      	beq.n	800a342 <_scanf_float+0x27e>
 800a296:	2d01      	cmp	r5, #1
 800a298:	d002      	beq.n	800a2a0 <_scanf_float+0x1dc>
 800a29a:	2d04      	cmp	r5, #4
 800a29c:	f47f af44 	bne.w	800a128 <_scanf_float+0x64>
 800a2a0:	3501      	adds	r5, #1
 800a2a2:	b2ed      	uxtb	r5, r5
 800a2a4:	e7d7      	b.n	800a256 <_scanf_float+0x192>
 800a2a6:	f1ba 0f01 	cmp.w	sl, #1
 800a2aa:	f47f af3d 	bne.w	800a128 <_scanf_float+0x64>
 800a2ae:	f04f 0a02 	mov.w	sl, #2
 800a2b2:	e7d0      	b.n	800a256 <_scanf_float+0x192>
 800a2b4:	b97d      	cbnz	r5, 800a2d6 <_scanf_float+0x212>
 800a2b6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ba:	f47f af38 	bne.w	800a12e <_scanf_float+0x6a>
 800a2be:	6822      	ldr	r2, [r4, #0]
 800a2c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a2c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a2c8:	f040 8107 	bne.w	800a4da <_scanf_float+0x416>
 800a2cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2d0:	2501      	movs	r5, #1
 800a2d2:	6022      	str	r2, [r4, #0]
 800a2d4:	e7bf      	b.n	800a256 <_scanf_float+0x192>
 800a2d6:	2d03      	cmp	r5, #3
 800a2d8:	d0e2      	beq.n	800a2a0 <_scanf_float+0x1dc>
 800a2da:	2d05      	cmp	r5, #5
 800a2dc:	e7de      	b.n	800a29c <_scanf_float+0x1d8>
 800a2de:	2d02      	cmp	r5, #2
 800a2e0:	f47f af22 	bne.w	800a128 <_scanf_float+0x64>
 800a2e4:	2503      	movs	r5, #3
 800a2e6:	e7b6      	b.n	800a256 <_scanf_float+0x192>
 800a2e8:	2d06      	cmp	r5, #6
 800a2ea:	f47f af1d 	bne.w	800a128 <_scanf_float+0x64>
 800a2ee:	2507      	movs	r5, #7
 800a2f0:	e7b1      	b.n	800a256 <_scanf_float+0x192>
 800a2f2:	6822      	ldr	r2, [r4, #0]
 800a2f4:	0591      	lsls	r1, r2, #22
 800a2f6:	f57f af17 	bpl.w	800a128 <_scanf_float+0x64>
 800a2fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a2fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800a302:	6022      	str	r2, [r4, #0]
 800a304:	e7a7      	b.n	800a256 <_scanf_float+0x192>
 800a306:	6822      	ldr	r2, [r4, #0]
 800a308:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a30c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a310:	d006      	beq.n	800a320 <_scanf_float+0x25c>
 800a312:	0550      	lsls	r0, r2, #21
 800a314:	f57f af08 	bpl.w	800a128 <_scanf_float+0x64>
 800a318:	f1b9 0f00 	cmp.w	r9, #0
 800a31c:	f000 80dd 	beq.w	800a4da <_scanf_float+0x416>
 800a320:	0591      	lsls	r1, r2, #22
 800a322:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a326:	bf58      	it	pl
 800a328:	9902      	ldrpl	r1, [sp, #8]
 800a32a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a32e:	bf58      	it	pl
 800a330:	eba9 0101 	subpl.w	r1, r9, r1
 800a334:	6022      	str	r2, [r4, #0]
 800a336:	f04f 0900 	mov.w	r9, #0
 800a33a:	bf58      	it	pl
 800a33c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a340:	e789      	b.n	800a256 <_scanf_float+0x192>
 800a342:	f04f 0a03 	mov.w	sl, #3
 800a346:	e786      	b.n	800a256 <_scanf_float+0x192>
 800a348:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a34c:	4639      	mov	r1, r7
 800a34e:	4640      	mov	r0, r8
 800a350:	4798      	blx	r3
 800a352:	2800      	cmp	r0, #0
 800a354:	f43f aedb 	beq.w	800a10e <_scanf_float+0x4a>
 800a358:	e6e6      	b.n	800a128 <_scanf_float+0x64>
 800a35a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a35e:	463a      	mov	r2, r7
 800a360:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a364:	4640      	mov	r0, r8
 800a366:	4798      	blx	r3
 800a368:	6923      	ldr	r3, [r4, #16]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	6123      	str	r3, [r4, #16]
 800a36e:	e6e8      	b.n	800a142 <_scanf_float+0x7e>
 800a370:	1e6b      	subs	r3, r5, #1
 800a372:	2b06      	cmp	r3, #6
 800a374:	d824      	bhi.n	800a3c0 <_scanf_float+0x2fc>
 800a376:	2d02      	cmp	r5, #2
 800a378:	d836      	bhi.n	800a3e8 <_scanf_float+0x324>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	429e      	cmp	r6, r3
 800a37e:	f67f aee4 	bls.w	800a14a <_scanf_float+0x86>
 800a382:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a386:	463a      	mov	r2, r7
 800a388:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a38c:	4640      	mov	r0, r8
 800a38e:	4798      	blx	r3
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	3b01      	subs	r3, #1
 800a394:	6123      	str	r3, [r4, #16]
 800a396:	e7f0      	b.n	800a37a <_scanf_float+0x2b6>
 800a398:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a39c:	463a      	mov	r2, r7
 800a39e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	4798      	blx	r3
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3b0:	fa5f fa8a 	uxtb.w	sl, sl
 800a3b4:	f1ba 0f02 	cmp.w	sl, #2
 800a3b8:	d1ee      	bne.n	800a398 <_scanf_float+0x2d4>
 800a3ba:	3d03      	subs	r5, #3
 800a3bc:	b2ed      	uxtb	r5, r5
 800a3be:	1b76      	subs	r6, r6, r5
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	05da      	lsls	r2, r3, #23
 800a3c4:	d52f      	bpl.n	800a426 <_scanf_float+0x362>
 800a3c6:	055b      	lsls	r3, r3, #21
 800a3c8:	d511      	bpl.n	800a3ee <_scanf_float+0x32a>
 800a3ca:	9b01      	ldr	r3, [sp, #4]
 800a3cc:	429e      	cmp	r6, r3
 800a3ce:	f67f aebc 	bls.w	800a14a <_scanf_float+0x86>
 800a3d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3dc:	4640      	mov	r0, r8
 800a3de:	4798      	blx	r3
 800a3e0:	6923      	ldr	r3, [r4, #16]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	e7f0      	b.n	800a3ca <_scanf_float+0x306>
 800a3e8:	46aa      	mov	sl, r5
 800a3ea:	46b3      	mov	fp, r6
 800a3ec:	e7de      	b.n	800a3ac <_scanf_float+0x2e8>
 800a3ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3f2:	1e75      	subs	r5, r6, #1
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	2965      	cmp	r1, #101	@ 0x65
 800a3f8:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3fc:	6123      	str	r3, [r4, #16]
 800a3fe:	d00c      	beq.n	800a41a <_scanf_float+0x356>
 800a400:	2945      	cmp	r1, #69	@ 0x45
 800a402:	d00a      	beq.n	800a41a <_scanf_float+0x356>
 800a404:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a408:	463a      	mov	r2, r7
 800a40a:	4640      	mov	r0, r8
 800a40c:	1eb5      	subs	r5, r6, #2
 800a40e:	4798      	blx	r3
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a416:	3b01      	subs	r3, #1
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	462e      	mov	r6, r5
 800a41c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a420:	463a      	mov	r2, r7
 800a422:	4640      	mov	r0, r8
 800a424:	4798      	blx	r3
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	f012 0210 	ands.w	r2, r2, #16
 800a42c:	d001      	beq.n	800a432 <_scanf_float+0x36e>
 800a42e:	2000      	movs	r0, #0
 800a430:	e68c      	b.n	800a14c <_scanf_float+0x88>
 800a432:	7032      	strb	r2, [r6, #0]
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a43a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a43e:	d11c      	bne.n	800a47a <_scanf_float+0x3b6>
 800a440:	9b02      	ldr	r3, [sp, #8]
 800a442:	454b      	cmp	r3, r9
 800a444:	eba3 0209 	sub.w	r2, r3, r9
 800a448:	d123      	bne.n	800a492 <_scanf_float+0x3ce>
 800a44a:	2200      	movs	r2, #0
 800a44c:	9901      	ldr	r1, [sp, #4]
 800a44e:	4640      	mov	r0, r8
 800a450:	f002 fc2a 	bl	800cca8 <_strtod_r>
 800a454:	6821      	ldr	r1, [r4, #0]
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	f011 0f02 	tst.w	r1, #2
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	ec57 6b10 	vmov	r6, r7, d0
 800a462:	f103 0204 	add.w	r2, r3, #4
 800a466:	d01f      	beq.n	800a4a8 <_scanf_float+0x3e4>
 800a468:	9903      	ldr	r1, [sp, #12]
 800a46a:	600a      	str	r2, [r1, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	e9c3 6700 	strd	r6, r7, [r3]
 800a472:	68e3      	ldr	r3, [r4, #12]
 800a474:	3301      	adds	r3, #1
 800a476:	60e3      	str	r3, [r4, #12]
 800a478:	e7d9      	b.n	800a42e <_scanf_float+0x36a>
 800a47a:	9b04      	ldr	r3, [sp, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0e4      	beq.n	800a44a <_scanf_float+0x386>
 800a480:	9905      	ldr	r1, [sp, #20]
 800a482:	230a      	movs	r3, #10
 800a484:	4640      	mov	r0, r8
 800a486:	3101      	adds	r1, #1
 800a488:	f002 fc8e 	bl	800cda8 <_strtol_r>
 800a48c:	9b04      	ldr	r3, [sp, #16]
 800a48e:	9e05      	ldr	r6, [sp, #20]
 800a490:	1ac2      	subs	r2, r0, r3
 800a492:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a496:	4912      	ldr	r1, [pc, #72]	@ (800a4e0 <_scanf_float+0x41c>)
 800a498:	429e      	cmp	r6, r3
 800a49a:	bf28      	it	cs
 800a49c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f000 f8f5 	bl	800a690 <siprintf>
 800a4a6:	e7d0      	b.n	800a44a <_scanf_float+0x386>
 800a4a8:	f011 0f04 	tst.w	r1, #4
 800a4ac:	9903      	ldr	r1, [sp, #12]
 800a4ae:	600a      	str	r2, [r1, #0]
 800a4b0:	d1dc      	bne.n	800a46c <_scanf_float+0x3a8>
 800a4b2:	681d      	ldr	r5, [r3, #0]
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f6 fb3a 	bl	8000b34 <__aeabi_dcmpun>
 800a4c0:	b128      	cbz	r0, 800a4ce <_scanf_float+0x40a>
 800a4c2:	4808      	ldr	r0, [pc, #32]	@ (800a4e4 <_scanf_float+0x420>)
 800a4c4:	f000 f9d6 	bl	800a874 <nanf>
 800a4c8:	ed85 0a00 	vstr	s0, [r5]
 800a4cc:	e7d1      	b.n	800a472 <_scanf_float+0x3ae>
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	f7f6 fb8d 	bl	8000bf0 <__aeabi_d2f>
 800a4d6:	6028      	str	r0, [r5, #0]
 800a4d8:	e7cb      	b.n	800a472 <_scanf_float+0x3ae>
 800a4da:	f04f 0900 	mov.w	r9, #0
 800a4de:	e62a      	b.n	800a136 <_scanf_float+0x72>
 800a4e0:	0800e0dc 	.word	0x0800e0dc
 800a4e4:	0800e475 	.word	0x0800e475

0800a4e8 <std>:
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	6083      	str	r3, [r0, #8]
 800a4f0:	8181      	strh	r1, [r0, #12]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4f6:	81c2      	strh	r2, [r0, #14]
 800a4f8:	2208      	movs	r2, #8
 800a4fa:	6183      	str	r3, [r0, #24]
 800a4fc:	e9c0 3300 	strd	r3, r3, [r0]
 800a500:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a504:	305c      	adds	r0, #92	@ 0x5c
 800a506:	f000 f926 	bl	800a756 <memset>
 800a50a:	4b0d      	ldr	r3, [pc, #52]	@ (800a540 <std+0x58>)
 800a50c:	6224      	str	r4, [r4, #32]
 800a50e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a510:	4b0c      	ldr	r3, [pc, #48]	@ (800a544 <std+0x5c>)
 800a512:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a514:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <std+0x60>)
 800a516:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a518:	4b0c      	ldr	r3, [pc, #48]	@ (800a54c <std+0x64>)
 800a51a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a51c:	4b0c      	ldr	r3, [pc, #48]	@ (800a550 <std+0x68>)
 800a51e:	429c      	cmp	r4, r3
 800a520:	d006      	beq.n	800a530 <std+0x48>
 800a522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a526:	4294      	cmp	r4, r2
 800a528:	d002      	beq.n	800a530 <std+0x48>
 800a52a:	33d0      	adds	r3, #208	@ 0xd0
 800a52c:	429c      	cmp	r4, r3
 800a52e:	d105      	bne.n	800a53c <std+0x54>
 800a530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a538:	f000 b98a 	b.w	800a850 <__retarget_lock_init_recursive>
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	bf00      	nop
 800a540:	0800a6d1 	.word	0x0800a6d1
 800a544:	0800a6f3 	.word	0x0800a6f3
 800a548:	0800a72b 	.word	0x0800a72b
 800a54c:	0800a74f 	.word	0x0800a74f
 800a550:	200003f0 	.word	0x200003f0

0800a554 <stdio_exit_handler>:
 800a554:	4a02      	ldr	r2, [pc, #8]	@ (800a560 <stdio_exit_handler+0xc>)
 800a556:	4903      	ldr	r1, [pc, #12]	@ (800a564 <stdio_exit_handler+0x10>)
 800a558:	4803      	ldr	r0, [pc, #12]	@ (800a568 <stdio_exit_handler+0x14>)
 800a55a:	f000 b869 	b.w	800a630 <_fwalk_sglue>
 800a55e:	bf00      	nop
 800a560:	20000010 	.word	0x20000010
 800a564:	0800d3e9 	.word	0x0800d3e9
 800a568:	20000020 	.word	0x20000020

0800a56c <cleanup_stdio>:
 800a56c:	6841      	ldr	r1, [r0, #4]
 800a56e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a0 <cleanup_stdio+0x34>)
 800a570:	4299      	cmp	r1, r3
 800a572:	b510      	push	{r4, lr}
 800a574:	4604      	mov	r4, r0
 800a576:	d001      	beq.n	800a57c <cleanup_stdio+0x10>
 800a578:	f002 ff36 	bl	800d3e8 <_fflush_r>
 800a57c:	68a1      	ldr	r1, [r4, #8]
 800a57e:	4b09      	ldr	r3, [pc, #36]	@ (800a5a4 <cleanup_stdio+0x38>)
 800a580:	4299      	cmp	r1, r3
 800a582:	d002      	beq.n	800a58a <cleanup_stdio+0x1e>
 800a584:	4620      	mov	r0, r4
 800a586:	f002 ff2f 	bl	800d3e8 <_fflush_r>
 800a58a:	68e1      	ldr	r1, [r4, #12]
 800a58c:	4b06      	ldr	r3, [pc, #24]	@ (800a5a8 <cleanup_stdio+0x3c>)
 800a58e:	4299      	cmp	r1, r3
 800a590:	d004      	beq.n	800a59c <cleanup_stdio+0x30>
 800a592:	4620      	mov	r0, r4
 800a594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a598:	f002 bf26 	b.w	800d3e8 <_fflush_r>
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	bf00      	nop
 800a5a0:	200003f0 	.word	0x200003f0
 800a5a4:	20000458 	.word	0x20000458
 800a5a8:	200004c0 	.word	0x200004c0

0800a5ac <global_stdio_init.part.0>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a5dc <global_stdio_init.part.0+0x30>)
 800a5b0:	2104      	movs	r1, #4
 800a5b2:	4c0b      	ldr	r4, [pc, #44]	@ (800a5e0 <global_stdio_init.part.0+0x34>)
 800a5b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a5e4 <global_stdio_init.part.0+0x38>)
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f7ff ff94 	bl	800a4e8 <std>
 800a5c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	2109      	movs	r1, #9
 800a5c8:	f7ff ff8e 	bl	800a4e8 <std>
 800a5cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	2112      	movs	r1, #18
 800a5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d8:	f7ff bf86 	b.w	800a4e8 <std>
 800a5dc:	20000528 	.word	0x20000528
 800a5e0:	200003f0 	.word	0x200003f0
 800a5e4:	0800a555 	.word	0x0800a555

0800a5e8 <__sfp_lock_acquire>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	@ (800a5f0 <__sfp_lock_acquire+0x8>)
 800a5ea:	f000 b932 	b.w	800a852 <__retarget_lock_acquire_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	20000531 	.word	0x20000531

0800a5f4 <__sfp_lock_release>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	@ (800a5fc <__sfp_lock_release+0x8>)
 800a5f6:	f000 b92d 	b.w	800a854 <__retarget_lock_release_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	20000531 	.word	0x20000531

0800a600 <__sinit>:
 800a600:	b510      	push	{r4, lr}
 800a602:	4604      	mov	r4, r0
 800a604:	f7ff fff0 	bl	800a5e8 <__sfp_lock_acquire>
 800a608:	6a23      	ldr	r3, [r4, #32]
 800a60a:	b11b      	cbz	r3, 800a614 <__sinit+0x14>
 800a60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a610:	f7ff bff0 	b.w	800a5f4 <__sfp_lock_release>
 800a614:	4b04      	ldr	r3, [pc, #16]	@ (800a628 <__sinit+0x28>)
 800a616:	6223      	str	r3, [r4, #32]
 800a618:	4b04      	ldr	r3, [pc, #16]	@ (800a62c <__sinit+0x2c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f5      	bne.n	800a60c <__sinit+0xc>
 800a620:	f7ff ffc4 	bl	800a5ac <global_stdio_init.part.0>
 800a624:	e7f2      	b.n	800a60c <__sinit+0xc>
 800a626:	bf00      	nop
 800a628:	0800a56d 	.word	0x0800a56d
 800a62c:	20000528 	.word	0x20000528

0800a630 <_fwalk_sglue>:
 800a630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a634:	4607      	mov	r7, r0
 800a636:	4688      	mov	r8, r1
 800a638:	4614      	mov	r4, r2
 800a63a:	2600      	movs	r6, #0
 800a63c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a640:	f1b9 0901 	subs.w	r9, r9, #1
 800a644:	d505      	bpl.n	800a652 <_fwalk_sglue+0x22>
 800a646:	6824      	ldr	r4, [r4, #0]
 800a648:	2c00      	cmp	r4, #0
 800a64a:	d1f7      	bne.n	800a63c <_fwalk_sglue+0xc>
 800a64c:	4630      	mov	r0, r6
 800a64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a652:	89ab      	ldrh	r3, [r5, #12]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d907      	bls.n	800a668 <_fwalk_sglue+0x38>
 800a658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a65c:	3301      	adds	r3, #1
 800a65e:	d003      	beq.n	800a668 <_fwalk_sglue+0x38>
 800a660:	4629      	mov	r1, r5
 800a662:	4638      	mov	r0, r7
 800a664:	47c0      	blx	r8
 800a666:	4306      	orrs	r6, r0
 800a668:	3568      	adds	r5, #104	@ 0x68
 800a66a:	e7e9      	b.n	800a640 <_fwalk_sglue+0x10>

0800a66c <iprintf>:
 800a66c:	b40f      	push	{r0, r1, r2, r3}
 800a66e:	b507      	push	{r0, r1, r2, lr}
 800a670:	4906      	ldr	r1, [pc, #24]	@ (800a68c <iprintf+0x20>)
 800a672:	ab04      	add	r3, sp, #16
 800a674:	6808      	ldr	r0, [r1, #0]
 800a676:	f853 2b04 	ldr.w	r2, [r3], #4
 800a67a:	6881      	ldr	r1, [r0, #8]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	f002 fd17 	bl	800d0b0 <_vfiprintf_r>
 800a682:	b003      	add	sp, #12
 800a684:	f85d eb04 	ldr.w	lr, [sp], #4
 800a688:	b004      	add	sp, #16
 800a68a:	4770      	bx	lr
 800a68c:	2000001c 	.word	0x2000001c

0800a690 <siprintf>:
 800a690:	b40e      	push	{r1, r2, r3}
 800a692:	b500      	push	{lr}
 800a694:	b09c      	sub	sp, #112	@ 0x70
 800a696:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a69a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a69c:	9002      	str	r0, [sp, #8]
 800a69e:	9006      	str	r0, [sp, #24]
 800a6a0:	9107      	str	r1, [sp, #28]
 800a6a2:	9104      	str	r1, [sp, #16]
 800a6a4:	4808      	ldr	r0, [pc, #32]	@ (800a6c8 <siprintf+0x38>)
 800a6a6:	4909      	ldr	r1, [pc, #36]	@ (800a6cc <siprintf+0x3c>)
 800a6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ac:	9105      	str	r1, [sp, #20]
 800a6ae:	a902      	add	r1, sp, #8
 800a6b0:	6800      	ldr	r0, [r0, #0]
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	f002 fbd6 	bl	800ce64 <_svfiprintf_r>
 800a6b8:	9b02      	ldr	r3, [sp, #8]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	701a      	strb	r2, [r3, #0]
 800a6be:	b01c      	add	sp, #112	@ 0x70
 800a6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c4:	b003      	add	sp, #12
 800a6c6:	4770      	bx	lr
 800a6c8:	2000001c 	.word	0x2000001c
 800a6cc:	ffff0208 	.word	0xffff0208

0800a6d0 <__sread>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d8:	f000 f86c 	bl	800a7b4 <_read_r>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	bfab      	itete	ge
 800a6e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a6e4:	181b      	addge	r3, r3, r0
 800a6e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6ea:	bfac      	ite	ge
 800a6ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6ee:	81a3      	strhlt	r3, [r4, #12]
 800a6f0:	bd10      	pop	{r4, pc}

0800a6f2 <__swrite>:
 800a6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f6:	461f      	mov	r7, r3
 800a6f8:	898b      	ldrh	r3, [r1, #12]
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	05db      	lsls	r3, r3, #23
 800a700:	4616      	mov	r6, r2
 800a702:	d505      	bpl.n	800a710 <__swrite+0x1e>
 800a704:	2302      	movs	r3, #2
 800a706:	2200      	movs	r2, #0
 800a708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a70c:	f000 f840 	bl	800a790 <_lseek_r>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	4632      	mov	r2, r6
 800a714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a718:	4628      	mov	r0, r5
 800a71a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a71e:	81a3      	strh	r3, [r4, #12]
 800a720:	463b      	mov	r3, r7
 800a722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a726:	f000 b857 	b.w	800a7d8 <_write_r>

0800a72a <__sseek>:
 800a72a:	b510      	push	{r4, lr}
 800a72c:	460c      	mov	r4, r1
 800a72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a732:	f000 f82d 	bl	800a790 <_lseek_r>
 800a736:	1c43      	adds	r3, r0, #1
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	bf15      	itete	ne
 800a73c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a73e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a742:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a746:	81a3      	strheq	r3, [r4, #12]
 800a748:	bf18      	it	ne
 800a74a:	81a3      	strhne	r3, [r4, #12]
 800a74c:	bd10      	pop	{r4, pc}

0800a74e <__sclose>:
 800a74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a752:	f000 b80d 	b.w	800a770 <_close_r>

0800a756 <memset>:
 800a756:	4402      	add	r2, r0
 800a758:	4603      	mov	r3, r0
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d100      	bne.n	800a760 <memset+0xa>
 800a75e:	4770      	bx	lr
 800a760:	f803 1b01 	strb.w	r1, [r3], #1
 800a764:	e7f9      	b.n	800a75a <memset+0x4>
	...

0800a768 <_localeconv_r>:
 800a768:	4800      	ldr	r0, [pc, #0]	@ (800a76c <_localeconv_r+0x4>)
 800a76a:	4770      	bx	lr
 800a76c:	2000015c 	.word	0x2000015c

0800a770 <_close_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	2300      	movs	r3, #0
 800a774:	4d05      	ldr	r5, [pc, #20]	@ (800a78c <_close_r+0x1c>)
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	602b      	str	r3, [r5, #0]
 800a77c:	f7f7 f8e0 	bl	8001940 <_close>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_close_r+0x1a>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_close_r+0x1a>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	2000052c 	.word	0x2000052c

0800a790 <_lseek_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4604      	mov	r4, r0
 800a794:	4d06      	ldr	r5, [pc, #24]	@ (800a7b0 <_lseek_r+0x20>)
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f7 f8f5 	bl	800198e <_lseek>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_lseek_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_lseek_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	2000052c 	.word	0x2000052c

0800a7b4 <_read_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4d06      	ldr	r5, [pc, #24]	@ (800a7d4 <_read_r+0x20>)
 800a7ba:	4608      	mov	r0, r1
 800a7bc:	4611      	mov	r1, r2
 800a7be:	2200      	movs	r2, #0
 800a7c0:	602a      	str	r2, [r5, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f7f7 f883 	bl	80018ce <_read>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_read_r+0x1e>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_read_r+0x1e>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	2000052c 	.word	0x2000052c

0800a7d8 <_write_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4d06      	ldr	r5, [pc, #24]	@ (800a7f8 <_write_r+0x20>)
 800a7de:	4608      	mov	r0, r1
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	602a      	str	r2, [r5, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f7f7 f88e 	bl	8001908 <_write>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d102      	bne.n	800a7f6 <_write_r+0x1e>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	b103      	cbz	r3, 800a7f6 <_write_r+0x1e>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
 800a7f8:	2000052c 	.word	0x2000052c

0800a7fc <__errno>:
 800a7fc:	4b01      	ldr	r3, [pc, #4]	@ (800a804 <__errno+0x8>)
 800a7fe:	6818      	ldr	r0, [r3, #0]
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	2000001c 	.word	0x2000001c

0800a808 <__libc_init_array>:
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	4d0d      	ldr	r5, [pc, #52]	@ (800a840 <__libc_init_array+0x38>)
 800a80c:	2600      	movs	r6, #0
 800a80e:	4c0d      	ldr	r4, [pc, #52]	@ (800a844 <__libc_init_array+0x3c>)
 800a810:	1b64      	subs	r4, r4, r5
 800a812:	10a4      	asrs	r4, r4, #2
 800a814:	42a6      	cmp	r6, r4
 800a816:	d109      	bne.n	800a82c <__libc_init_array+0x24>
 800a818:	4d0b      	ldr	r5, [pc, #44]	@ (800a848 <__libc_init_array+0x40>)
 800a81a:	2600      	movs	r6, #0
 800a81c:	4c0b      	ldr	r4, [pc, #44]	@ (800a84c <__libc_init_array+0x44>)
 800a81e:	f003 fb91 	bl	800df44 <_init>
 800a822:	1b64      	subs	r4, r4, r5
 800a824:	10a4      	asrs	r4, r4, #2
 800a826:	42a6      	cmp	r6, r4
 800a828:	d105      	bne.n	800a836 <__libc_init_array+0x2e>
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a830:	3601      	adds	r6, #1
 800a832:	4798      	blx	r3
 800a834:	e7ee      	b.n	800a814 <__libc_init_array+0xc>
 800a836:	f855 3b04 	ldr.w	r3, [r5], #4
 800a83a:	3601      	adds	r6, #1
 800a83c:	4798      	blx	r3
 800a83e:	e7f2      	b.n	800a826 <__libc_init_array+0x1e>
 800a840:	0800e4e0 	.word	0x0800e4e0
 800a844:	0800e4e0 	.word	0x0800e4e0
 800a848:	0800e4e0 	.word	0x0800e4e0
 800a84c:	0800e4e4 	.word	0x0800e4e4

0800a850 <__retarget_lock_init_recursive>:
 800a850:	4770      	bx	lr

0800a852 <__retarget_lock_acquire_recursive>:
 800a852:	4770      	bx	lr

0800a854 <__retarget_lock_release_recursive>:
 800a854:	4770      	bx	lr

0800a856 <memchr>:
 800a856:	b2c9      	uxtb	r1, r1
 800a858:	4603      	mov	r3, r0
 800a85a:	4402      	add	r2, r0
 800a85c:	b510      	push	{r4, lr}
 800a85e:	4293      	cmp	r3, r2
 800a860:	4618      	mov	r0, r3
 800a862:	d101      	bne.n	800a868 <memchr+0x12>
 800a864:	2000      	movs	r0, #0
 800a866:	e003      	b.n	800a870 <memchr+0x1a>
 800a868:	7804      	ldrb	r4, [r0, #0]
 800a86a:	3301      	adds	r3, #1
 800a86c:	428c      	cmp	r4, r1
 800a86e:	d1f6      	bne.n	800a85e <memchr+0x8>
 800a870:	bd10      	pop	{r4, pc}
	...

0800a874 <nanf>:
 800a874:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a87c <nanf+0x8>
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	7fc00000 	.word	0x7fc00000

0800a880 <quorem>:
 800a880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	6903      	ldr	r3, [r0, #16]
 800a886:	4607      	mov	r7, r0
 800a888:	690c      	ldr	r4, [r1, #16]
 800a88a:	42a3      	cmp	r3, r4
 800a88c:	f2c0 8083 	blt.w	800a996 <quorem+0x116>
 800a890:	3c01      	subs	r4, #1
 800a892:	f100 0514 	add.w	r5, r0, #20
 800a896:	f101 0814 	add.w	r8, r1, #20
 800a89a:	00a3      	lsls	r3, r4, #2
 800a89c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8b8:	d331      	bcc.n	800a91e <quorem+0x9e>
 800a8ba:	f04f 0a00 	mov.w	sl, #0
 800a8be:	46c4      	mov	ip, r8
 800a8c0:	46ae      	mov	lr, r5
 800a8c2:	46d3      	mov	fp, sl
 800a8c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8c8:	b298      	uxth	r0, r3
 800a8ca:	45e1      	cmp	r9, ip
 800a8cc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a8d0:	fb06 a000 	mla	r0, r6, r0, sl
 800a8d4:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a8d8:	b280      	uxth	r0, r0
 800a8da:	fb06 2303 	mla	r3, r6, r3, r2
 800a8de:	f8de 2000 	ldr.w	r2, [lr]
 800a8e2:	b292      	uxth	r2, r2
 800a8e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8e8:	eba2 0200 	sub.w	r2, r2, r0
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	f8de 0000 	ldr.w	r0, [lr]
 800a8f2:	445a      	add	r2, fp
 800a8f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a8f8:	b292      	uxth	r2, r2
 800a8fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a8fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a902:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a906:	f84e 2b04 	str.w	r2, [lr], #4
 800a90a:	d2db      	bcs.n	800a8c4 <quorem+0x44>
 800a90c:	9b00      	ldr	r3, [sp, #0]
 800a90e:	58eb      	ldr	r3, [r5, r3]
 800a910:	b92b      	cbnz	r3, 800a91e <quorem+0x9e>
 800a912:	9b01      	ldr	r3, [sp, #4]
 800a914:	3b04      	subs	r3, #4
 800a916:	429d      	cmp	r5, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	d330      	bcc.n	800a97e <quorem+0xfe>
 800a91c:	613c      	str	r4, [r7, #16]
 800a91e:	4638      	mov	r0, r7
 800a920:	f001 f9c8 	bl	800bcb4 <__mcmp>
 800a924:	2800      	cmp	r0, #0
 800a926:	db26      	blt.n	800a976 <quorem+0xf6>
 800a928:	4629      	mov	r1, r5
 800a92a:	2000      	movs	r0, #0
 800a92c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a930:	f8d1 c000 	ldr.w	ip, [r1]
 800a934:	fa1f fe82 	uxth.w	lr, r2
 800a938:	45c1      	cmp	r9, r8
 800a93a:	fa1f f38c 	uxth.w	r3, ip
 800a93e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a942:	eba3 030e 	sub.w	r3, r3, lr
 800a946:	4403      	add	r3, r0
 800a948:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a956:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a95a:	f841 3b04 	str.w	r3, [r1], #4
 800a95e:	d2e5      	bcs.n	800a92c <quorem+0xac>
 800a960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a964:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a968:	b922      	cbnz	r2, 800a974 <quorem+0xf4>
 800a96a:	3b04      	subs	r3, #4
 800a96c:	429d      	cmp	r5, r3
 800a96e:	461a      	mov	r2, r3
 800a970:	d30b      	bcc.n	800a98a <quorem+0x10a>
 800a972:	613c      	str	r4, [r7, #16]
 800a974:	3601      	adds	r6, #1
 800a976:	4630      	mov	r0, r6
 800a978:	b003      	add	sp, #12
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	3b04      	subs	r3, #4
 800a982:	2a00      	cmp	r2, #0
 800a984:	d1ca      	bne.n	800a91c <quorem+0x9c>
 800a986:	3c01      	subs	r4, #1
 800a988:	e7c5      	b.n	800a916 <quorem+0x96>
 800a98a:	6812      	ldr	r2, [r2, #0]
 800a98c:	3b04      	subs	r3, #4
 800a98e:	2a00      	cmp	r2, #0
 800a990:	d1ef      	bne.n	800a972 <quorem+0xf2>
 800a992:	3c01      	subs	r4, #1
 800a994:	e7ea      	b.n	800a96c <quorem+0xec>
 800a996:	2000      	movs	r0, #0
 800a998:	e7ee      	b.n	800a978 <quorem+0xf8>
 800a99a:	0000      	movs	r0, r0
 800a99c:	0000      	movs	r0, r0
	...

0800a9a0 <_dtoa_r>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	69c7      	ldr	r7, [r0, #28]
 800a9a6:	b099      	sub	sp, #100	@ 0x64
 800a9a8:	4683      	mov	fp, r0
 800a9aa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a9ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9b2:	ec55 4b10 	vmov	r4, r5, d0
 800a9b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9ba:	b97f      	cbnz	r7, 800a9dc <_dtoa_r+0x3c>
 800a9bc:	2010      	movs	r0, #16
 800a9be:	f000 fdfd 	bl	800b5bc <malloc>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a9c8:	b920      	cbnz	r0, 800a9d4 <_dtoa_r+0x34>
 800a9ca:	4ba7      	ldr	r3, [pc, #668]	@ (800ac68 <_dtoa_r+0x2c8>)
 800a9cc:	21ef      	movs	r1, #239	@ 0xef
 800a9ce:	48a7      	ldr	r0, [pc, #668]	@ (800ac6c <_dtoa_r+0x2cc>)
 800a9d0:	f002 fe1a 	bl	800d608 <__assert_func>
 800a9d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a9d8:	6007      	str	r7, [r0, #0]
 800a9da:	60c7      	str	r7, [r0, #12]
 800a9dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9e0:	6819      	ldr	r1, [r3, #0]
 800a9e2:	b159      	cbz	r1, 800a9fc <_dtoa_r+0x5c>
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	4658      	mov	r0, fp
 800a9ea:	4093      	lsls	r3, r2
 800a9ec:	604a      	str	r2, [r1, #4]
 800a9ee:	608b      	str	r3, [r1, #8]
 800a9f0:	f000 feda 	bl	800b7a8 <_Bfree>
 800a9f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	1e2b      	subs	r3, r5, #0
 800a9fe:	bfb7      	itett	lt
 800aa00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa04:	2300      	movge	r3, #0
 800aa06:	2201      	movlt	r2, #1
 800aa08:	9303      	strlt	r3, [sp, #12]
 800aa0a:	bfa8      	it	ge
 800aa0c:	6033      	strge	r3, [r6, #0]
 800aa0e:	9f03      	ldr	r7, [sp, #12]
 800aa10:	4b97      	ldr	r3, [pc, #604]	@ (800ac70 <_dtoa_r+0x2d0>)
 800aa12:	bfb8      	it	lt
 800aa14:	6032      	strlt	r2, [r6, #0]
 800aa16:	43bb      	bics	r3, r7
 800aa18:	d112      	bne.n	800aa40 <_dtoa_r+0xa0>
 800aa1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa26:	4323      	orrs	r3, r4
 800aa28:	f000 854c 	beq.w	800b4c4 <_dtoa_r+0xb24>
 800aa2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa2e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac84 <_dtoa_r+0x2e4>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 854e 	beq.w	800b4d4 <_dtoa_r+0xb34>
 800aa38:	f10a 0303 	add.w	r3, sl, #3
 800aa3c:	f000 bd48 	b.w	800b4d0 <_dtoa_r+0xb30>
 800aa40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa44:	2200      	movs	r2, #0
 800aa46:	2300      	movs	r3, #0
 800aa48:	ec51 0b17 	vmov	r0, r1, d7
 800aa4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa50:	f7f6 f83e 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa54:	4680      	mov	r8, r0
 800aa56:	b158      	cbz	r0, 800aa70 <_dtoa_r+0xd0>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa60:	b113      	cbz	r3, 800aa68 <_dtoa_r+0xc8>
 800aa62:	4b84      	ldr	r3, [pc, #528]	@ (800ac74 <_dtoa_r+0x2d4>)
 800aa64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ac88 <_dtoa_r+0x2e8>
 800aa6c:	f000 bd32 	b.w	800b4d4 <_dtoa_r+0xb34>
 800aa70:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa74:	aa16      	add	r2, sp, #88	@ 0x58
 800aa76:	a917      	add	r1, sp, #92	@ 0x5c
 800aa78:	4658      	mov	r0, fp
 800aa7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa7e:	f001 fa41 	bl	800bf04 <__d2b>
 800aa82:	4681      	mov	r9, r0
 800aa84:	2e00      	cmp	r6, #0
 800aa86:	d075      	beq.n	800ab74 <_dtoa_r+0x1d4>
 800aa88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa8a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa8e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa96:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa9e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4b74      	ldr	r3, [pc, #464]	@ (800ac78 <_dtoa_r+0x2d8>)
 800aaa8:	f7f5 fbf2 	bl	8000290 <__aeabi_dsub>
 800aaac:	a368      	add	r3, pc, #416	@ (adr r3, 800ac50 <_dtoa_r+0x2b0>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	f7f5 fda5 	bl	8000600 <__aeabi_dmul>
 800aab6:	a368      	add	r3, pc, #416	@ (adr r3, 800ac58 <_dtoa_r+0x2b8>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fbea 	bl	8000294 <__adddf3>
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	4630      	mov	r0, r6
 800aac6:	f7f5 fd31 	bl	800052c <__aeabi_i2d>
 800aaca:	a365      	add	r3, pc, #404	@ (adr r3, 800ac60 <_dtoa_r+0x2c0>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7f5 fd96 	bl	8000600 <__aeabi_dmul>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	f7f5 fbda 	bl	8000294 <__adddf3>
 800aae0:	4604      	mov	r4, r0
 800aae2:	460d      	mov	r5, r1
 800aae4:	f7f6 f83c 	bl	8000b60 <__aeabi_d2iz>
 800aae8:	2200      	movs	r2, #0
 800aaea:	4607      	mov	r7, r0
 800aaec:	2300      	movs	r3, #0
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f5 fff7 	bl	8000ae4 <__aeabi_dcmplt>
 800aaf6:	b140      	cbz	r0, 800ab0a <_dtoa_r+0x16a>
 800aaf8:	4638      	mov	r0, r7
 800aafa:	f7f5 fd17 	bl	800052c <__aeabi_i2d>
 800aafe:	4622      	mov	r2, r4
 800ab00:	462b      	mov	r3, r5
 800ab02:	f7f5 ffe5 	bl	8000ad0 <__aeabi_dcmpeq>
 800ab06:	b900      	cbnz	r0, 800ab0a <_dtoa_r+0x16a>
 800ab08:	3f01      	subs	r7, #1
 800ab0a:	2f16      	cmp	r7, #22
 800ab0c:	d851      	bhi.n	800abb2 <_dtoa_r+0x212>
 800ab0e:	4b5b      	ldr	r3, [pc, #364]	@ (800ac7c <_dtoa_r+0x2dc>)
 800ab10:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	f7f5 ffe2 	bl	8000ae4 <__aeabi_dcmplt>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d048      	beq.n	800abb6 <_dtoa_r+0x216>
 800ab24:	3f01      	subs	r7, #1
 800ab26:	2300      	movs	r3, #0
 800ab28:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab2c:	1b9b      	subs	r3, r3, r6
 800ab2e:	1e5a      	subs	r2, r3, #1
 800ab30:	bf46      	itte	mi
 800ab32:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab36:	2300      	movmi	r3, #0
 800ab38:	f04f 0800 	movpl.w	r8, #0
 800ab3c:	9208      	str	r2, [sp, #32]
 800ab3e:	bf48      	it	mi
 800ab40:	9308      	strmi	r3, [sp, #32]
 800ab42:	2f00      	cmp	r7, #0
 800ab44:	db39      	blt.n	800abba <_dtoa_r+0x21a>
 800ab46:	9b08      	ldr	r3, [sp, #32]
 800ab48:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab4a:	443b      	add	r3, r7
 800ab4c:	9308      	str	r3, [sp, #32]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab54:	2b09      	cmp	r3, #9
 800ab56:	d864      	bhi.n	800ac22 <_dtoa_r+0x282>
 800ab58:	2b05      	cmp	r3, #5
 800ab5a:	bfc5      	ittet	gt
 800ab5c:	3b04      	subgt	r3, #4
 800ab5e:	2400      	movgt	r4, #0
 800ab60:	2401      	movle	r4, #1
 800ab62:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ab64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab66:	3b02      	subs	r3, #2
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d865      	bhi.n	800ac38 <_dtoa_r+0x298>
 800ab6c:	e8df f003 	tbb	[pc, r3]
 800ab70:	5737392c 	.word	0x5737392c
 800ab74:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab78:	441e      	add	r6, r3
 800ab7a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab7e:	2b20      	cmp	r3, #32
 800ab80:	bfc9      	itett	gt
 800ab82:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab86:	f1c3 0320 	rsble	r3, r3, #32
 800ab8a:	409f      	lslgt	r7, r3
 800ab8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab90:	bfd8      	it	le
 800ab92:	fa04 f003 	lslle.w	r0, r4, r3
 800ab96:	f106 36ff 	add.w	r6, r6, #4294967295
 800ab9a:	bfc4      	itt	gt
 800ab9c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aba0:	ea47 0003 	orrgt.w	r0, r7, r3
 800aba4:	f7f5 fcb2 	bl	800050c <__aeabi_ui2d>
 800aba8:	2201      	movs	r2, #1
 800abaa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800abae:	9214      	str	r2, [sp, #80]	@ 0x50
 800abb0:	e777      	b.n	800aaa2 <_dtoa_r+0x102>
 800abb2:	2301      	movs	r3, #1
 800abb4:	e7b8      	b.n	800ab28 <_dtoa_r+0x188>
 800abb6:	9012      	str	r0, [sp, #72]	@ 0x48
 800abb8:	e7b7      	b.n	800ab2a <_dtoa_r+0x18a>
 800abba:	427b      	negs	r3, r7
 800abbc:	eba8 0807 	sub.w	r8, r8, r7
 800abc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc2:	2300      	movs	r3, #0
 800abc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abc6:	e7c4      	b.n	800ab52 <_dtoa_r+0x1b2>
 800abc8:	2300      	movs	r3, #0
 800abca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dc35      	bgt.n	800ac3e <_dtoa_r+0x29e>
 800abd2:	2301      	movs	r3, #1
 800abd4:	461a      	mov	r2, r3
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	9307      	str	r3, [sp, #28]
 800abda:	920e      	str	r2, [sp, #56]	@ 0x38
 800abdc:	e00b      	b.n	800abf6 <_dtoa_r+0x256>
 800abde:	2301      	movs	r3, #1
 800abe0:	e7f3      	b.n	800abca <_dtoa_r+0x22a>
 800abe2:	2300      	movs	r3, #0
 800abe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abe8:	18fb      	adds	r3, r7, r3
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	2b01      	cmp	r3, #1
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	bfb8      	it	lt
 800abf4:	2301      	movlt	r3, #1
 800abf6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800abfa:	2100      	movs	r1, #0
 800abfc:	2204      	movs	r2, #4
 800abfe:	f102 0514 	add.w	r5, r2, #20
 800ac02:	429d      	cmp	r5, r3
 800ac04:	d91f      	bls.n	800ac46 <_dtoa_r+0x2a6>
 800ac06:	6041      	str	r1, [r0, #4]
 800ac08:	4658      	mov	r0, fp
 800ac0a:	f000 fd8d 	bl	800b728 <_Balloc>
 800ac0e:	4682      	mov	sl, r0
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d13b      	bne.n	800ac8c <_dtoa_r+0x2ec>
 800ac14:	4b1a      	ldr	r3, [pc, #104]	@ (800ac80 <_dtoa_r+0x2e0>)
 800ac16:	4602      	mov	r2, r0
 800ac18:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac1c:	e6d7      	b.n	800a9ce <_dtoa_r+0x2e>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e7e0      	b.n	800abe4 <_dtoa_r+0x244>
 800ac22:	2401      	movs	r4, #1
 800ac24:	2300      	movs	r3, #0
 800ac26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2e:	2200      	movs	r2, #0
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	9307      	str	r3, [sp, #28]
 800ac34:	2312      	movs	r3, #18
 800ac36:	e7d0      	b.n	800abda <_dtoa_r+0x23a>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac3c:	e7f5      	b.n	800ac2a <_dtoa_r+0x28a>
 800ac3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	9307      	str	r3, [sp, #28]
 800ac44:	e7d7      	b.n	800abf6 <_dtoa_r+0x256>
 800ac46:	3101      	adds	r1, #1
 800ac48:	0052      	lsls	r2, r2, #1
 800ac4a:	e7d8      	b.n	800abfe <_dtoa_r+0x25e>
 800ac4c:	f3af 8000 	nop.w
 800ac50:	636f4361 	.word	0x636f4361
 800ac54:	3fd287a7 	.word	0x3fd287a7
 800ac58:	8b60c8b3 	.word	0x8b60c8b3
 800ac5c:	3fc68a28 	.word	0x3fc68a28
 800ac60:	509f79fb 	.word	0x509f79fb
 800ac64:	3fd34413 	.word	0x3fd34413
 800ac68:	0800e0ee 	.word	0x0800e0ee
 800ac6c:	0800e105 	.word	0x0800e105
 800ac70:	7ff00000 	.word	0x7ff00000
 800ac74:	0800e0b9 	.word	0x0800e0b9
 800ac78:	3ff80000 	.word	0x3ff80000
 800ac7c:	0800e200 	.word	0x0800e200
 800ac80:	0800e15d 	.word	0x0800e15d
 800ac84:	0800e0ea 	.word	0x0800e0ea
 800ac88:	0800e0b8 	.word	0x0800e0b8
 800ac8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac90:	6018      	str	r0, [r3, #0]
 800ac92:	9b07      	ldr	r3, [sp, #28]
 800ac94:	2b0e      	cmp	r3, #14
 800ac96:	f200 80a4 	bhi.w	800ade2 <_dtoa_r+0x442>
 800ac9a:	2c00      	cmp	r4, #0
 800ac9c:	f000 80a1 	beq.w	800ade2 <_dtoa_r+0x442>
 800aca0:	2f00      	cmp	r7, #0
 800aca2:	dd33      	ble.n	800ad0c <_dtoa_r+0x36c>
 800aca4:	f007 020f 	and.w	r2, r7, #15
 800aca8:	4bac      	ldr	r3, [pc, #688]	@ (800af5c <_dtoa_r+0x5bc>)
 800acaa:	05f8      	lsls	r0, r7, #23
 800acac:	ea4f 1427 	mov.w	r4, r7, asr #4
 800acb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acb4:	ed93 7b00 	vldr	d7, [r3]
 800acb8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acbc:	d516      	bpl.n	800acec <_dtoa_r+0x34c>
 800acbe:	4ba8      	ldr	r3, [pc, #672]	@ (800af60 <_dtoa_r+0x5c0>)
 800acc0:	f004 040f 	and.w	r4, r4, #15
 800acc4:	2603      	movs	r6, #3
 800acc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acce:	f7f5 fdc1 	bl	8000854 <__aeabi_ddiv>
 800acd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acd6:	4da2      	ldr	r5, [pc, #648]	@ (800af60 <_dtoa_r+0x5c0>)
 800acd8:	b954      	cbnz	r4, 800acf0 <_dtoa_r+0x350>
 800acda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ace2:	f7f5 fdb7 	bl	8000854 <__aeabi_ddiv>
 800ace6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acea:	e028      	b.n	800ad3e <_dtoa_r+0x39e>
 800acec:	2602      	movs	r6, #2
 800acee:	e7f2      	b.n	800acd6 <_dtoa_r+0x336>
 800acf0:	07e1      	lsls	r1, r4, #31
 800acf2:	d508      	bpl.n	800ad06 <_dtoa_r+0x366>
 800acf4:	3601      	adds	r6, #1
 800acf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acfe:	f7f5 fc7f 	bl	8000600 <__aeabi_dmul>
 800ad02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad06:	1064      	asrs	r4, r4, #1
 800ad08:	3508      	adds	r5, #8
 800ad0a:	e7e5      	b.n	800acd8 <_dtoa_r+0x338>
 800ad0c:	f000 80d2 	beq.w	800aeb4 <_dtoa_r+0x514>
 800ad10:	427c      	negs	r4, r7
 800ad12:	4b92      	ldr	r3, [pc, #584]	@ (800af5c <_dtoa_r+0x5bc>)
 800ad14:	4d92      	ldr	r5, [pc, #584]	@ (800af60 <_dtoa_r+0x5c0>)
 800ad16:	2602      	movs	r6, #2
 800ad18:	f004 020f 	and.w	r2, r4, #15
 800ad1c:	1124      	asrs	r4, r4, #4
 800ad1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f7f5 fc69 	bl	8000600 <__aeabi_dmul>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad34:	2c00      	cmp	r4, #0
 800ad36:	f040 80b2 	bne.w	800ae9e <_dtoa_r+0x4fe>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1d3      	bne.n	800ace6 <_dtoa_r+0x346>
 800ad3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 80b7 	beq.w	800aeb8 <_dtoa_r+0x518>
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	4b85      	ldr	r3, [pc, #532]	@ (800af64 <_dtoa_r+0x5c4>)
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fec7 	bl	8000ae4 <__aeabi_dcmplt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	f000 80ae 	beq.w	800aeb8 <_dtoa_r+0x518>
 800ad5c:	9b07      	ldr	r3, [sp, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 80aa 	beq.w	800aeb8 <_dtoa_r+0x518>
 800ad64:	9b00      	ldr	r3, [sp, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dd37      	ble.n	800adda <_dtoa_r+0x43a>
 800ad6a:	1e7b      	subs	r3, r7, #1
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4629      	mov	r1, r5
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	3601      	adds	r6, #1
 800ad76:	4b7c      	ldr	r3, [pc, #496]	@ (800af68 <_dtoa_r+0x5c8>)
 800ad78:	f7f5 fc42 	bl	8000600 <__aeabi_dmul>
 800ad7c:	9c00      	ldr	r4, [sp, #0]
 800ad7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7f5 fbd2 	bl	800052c <__aeabi_i2d>
 800ad88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad8c:	f7f5 fc38 	bl	8000600 <__aeabi_dmul>
 800ad90:	2200      	movs	r2, #0
 800ad92:	4b76      	ldr	r3, [pc, #472]	@ (800af6c <_dtoa_r+0x5cc>)
 800ad94:	f7f5 fa7e 	bl	8000294 <__adddf3>
 800ad98:	4605      	mov	r5, r0
 800ad9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad9e:	2c00      	cmp	r4, #0
 800ada0:	f040 808d 	bne.w	800aebe <_dtoa_r+0x51e>
 800ada4:	2200      	movs	r2, #0
 800ada6:	4b72      	ldr	r3, [pc, #456]	@ (800af70 <_dtoa_r+0x5d0>)
 800ada8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adac:	f7f5 fa70 	bl	8000290 <__aeabi_dsub>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adb8:	462a      	mov	r2, r5
 800adba:	4633      	mov	r3, r6
 800adbc:	f7f5 feb0 	bl	8000b20 <__aeabi_dcmpgt>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	f040 828b 	bne.w	800b2dc <_dtoa_r+0x93c>
 800adc6:	462a      	mov	r2, r5
 800adc8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800adcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800add0:	f7f5 fe88 	bl	8000ae4 <__aeabi_dcmplt>
 800add4:	2800      	cmp	r0, #0
 800add6:	f040 8128 	bne.w	800b02a <_dtoa_r+0x68a>
 800adda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800adde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ade2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f2c0 815a 	blt.w	800b09e <_dtoa_r+0x6fe>
 800adea:	2f0e      	cmp	r7, #14
 800adec:	f300 8157 	bgt.w	800b09e <_dtoa_r+0x6fe>
 800adf0:	4b5a      	ldr	r3, [pc, #360]	@ (800af5c <_dtoa_r+0x5bc>)
 800adf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adf6:	ed93 7b00 	vldr	d7, [r3]
 800adfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	ed8d 7b00 	vstr	d7, [sp]
 800ae02:	da03      	bge.n	800ae0c <_dtoa_r+0x46c>
 800ae04:	9b07      	ldr	r3, [sp, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f340 8101 	ble.w	800b00e <_dtoa_r+0x66e>
 800ae0c:	4656      	mov	r6, sl
 800ae0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae16:	4620      	mov	r0, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	f7f5 fd1b 	bl	8000854 <__aeabi_ddiv>
 800ae1e:	f7f5 fe9f 	bl	8000b60 <__aeabi_d2iz>
 800ae22:	4680      	mov	r8, r0
 800ae24:	f7f5 fb82 	bl	800052c <__aeabi_i2d>
 800ae28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae2c:	f7f5 fbe8 	bl	8000600 <__aeabi_dmul>
 800ae30:	4602      	mov	r2, r0
 800ae32:	4620      	mov	r0, r4
 800ae34:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	f7f5 fa28 	bl	8000290 <__aeabi_dsub>
 800ae40:	9d07      	ldr	r5, [sp, #28]
 800ae42:	f806 4b01 	strb.w	r4, [r6], #1
 800ae46:	eba6 040a 	sub.w	r4, r6, sl
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	42a5      	cmp	r5, r4
 800ae50:	f040 8117 	bne.w	800b082 <_dtoa_r+0x6e2>
 800ae54:	f7f5 fa1e 	bl	8000294 <__adddf3>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae60:	f7f5 fe5e 	bl	8000b20 <__aeabi_dcmpgt>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f040 80f9 	bne.w	800b05c <_dtoa_r+0x6bc>
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae72:	f7f5 fe2d 	bl	8000ad0 <__aeabi_dcmpeq>
 800ae76:	b118      	cbz	r0, 800ae80 <_dtoa_r+0x4e0>
 800ae78:	f018 0f01 	tst.w	r8, #1
 800ae7c:	f040 80ee 	bne.w	800b05c <_dtoa_r+0x6bc>
 800ae80:	4649      	mov	r1, r9
 800ae82:	4658      	mov	r0, fp
 800ae84:	f000 fc90 	bl	800b7a8 <_Bfree>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	3701      	adds	r7, #1
 800ae8c:	7033      	strb	r3, [r6, #0]
 800ae8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae90:	601f      	str	r7, [r3, #0]
 800ae92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 831d 	beq.w	800b4d4 <_dtoa_r+0xb34>
 800ae9a:	601e      	str	r6, [r3, #0]
 800ae9c:	e31a      	b.n	800b4d4 <_dtoa_r+0xb34>
 800ae9e:	07e2      	lsls	r2, r4, #31
 800aea0:	d505      	bpl.n	800aeae <_dtoa_r+0x50e>
 800aea2:	3601      	adds	r6, #1
 800aea4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aea8:	f7f5 fbaa 	bl	8000600 <__aeabi_dmul>
 800aeac:	2301      	movs	r3, #1
 800aeae:	1064      	asrs	r4, r4, #1
 800aeb0:	3508      	adds	r5, #8
 800aeb2:	e73f      	b.n	800ad34 <_dtoa_r+0x394>
 800aeb4:	2602      	movs	r6, #2
 800aeb6:	e742      	b.n	800ad3e <_dtoa_r+0x39e>
 800aeb8:	9c07      	ldr	r4, [sp, #28]
 800aeba:	9704      	str	r7, [sp, #16]
 800aebc:	e761      	b.n	800ad82 <_dtoa_r+0x3e2>
 800aebe:	4b27      	ldr	r3, [pc, #156]	@ (800af5c <_dtoa_r+0x5bc>)
 800aec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aec6:	4454      	add	r4, sl
 800aec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aecc:	2900      	cmp	r1, #0
 800aece:	d053      	beq.n	800af78 <_dtoa_r+0x5d8>
 800aed0:	2000      	movs	r0, #0
 800aed2:	4928      	ldr	r1, [pc, #160]	@ (800af74 <_dtoa_r+0x5d4>)
 800aed4:	f7f5 fcbe 	bl	8000854 <__aeabi_ddiv>
 800aed8:	4633      	mov	r3, r6
 800aeda:	4656      	mov	r6, sl
 800aedc:	462a      	mov	r2, r5
 800aede:	f7f5 f9d7 	bl	8000290 <__aeabi_dsub>
 800aee2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeea:	f7f5 fe39 	bl	8000b60 <__aeabi_d2iz>
 800aeee:	4605      	mov	r5, r0
 800aef0:	f7f5 fb1c 	bl	800052c <__aeabi_i2d>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	3530      	adds	r5, #48	@ 0x30
 800aefa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aefe:	f7f5 f9c7 	bl	8000290 <__aeabi_dsub>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	f806 5b01 	strb.w	r5, [r6], #1
 800af0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af12:	f7f5 fde7 	bl	8000ae4 <__aeabi_dcmplt>
 800af16:	2800      	cmp	r0, #0
 800af18:	d171      	bne.n	800affe <_dtoa_r+0x65e>
 800af1a:	2000      	movs	r0, #0
 800af1c:	4911      	ldr	r1, [pc, #68]	@ (800af64 <_dtoa_r+0x5c4>)
 800af1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af22:	f7f5 f9b5 	bl	8000290 <__aeabi_dsub>
 800af26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af2a:	f7f5 fddb 	bl	8000ae4 <__aeabi_dcmplt>
 800af2e:	2800      	cmp	r0, #0
 800af30:	f040 8095 	bne.w	800b05e <_dtoa_r+0x6be>
 800af34:	42a6      	cmp	r6, r4
 800af36:	f43f af50 	beq.w	800adda <_dtoa_r+0x43a>
 800af3a:	2200      	movs	r2, #0
 800af3c:	4b0a      	ldr	r3, [pc, #40]	@ (800af68 <_dtoa_r+0x5c8>)
 800af3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af42:	f7f5 fb5d 	bl	8000600 <__aeabi_dmul>
 800af46:	2200      	movs	r2, #0
 800af48:	4b07      	ldr	r3, [pc, #28]	@ (800af68 <_dtoa_r+0x5c8>)
 800af4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af52:	f7f5 fb55 	bl	8000600 <__aeabi_dmul>
 800af56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af5a:	e7c4      	b.n	800aee6 <_dtoa_r+0x546>
 800af5c:	0800e200 	.word	0x0800e200
 800af60:	0800e1d8 	.word	0x0800e1d8
 800af64:	3ff00000 	.word	0x3ff00000
 800af68:	40240000 	.word	0x40240000
 800af6c:	401c0000 	.word	0x401c0000
 800af70:	40140000 	.word	0x40140000
 800af74:	3fe00000 	.word	0x3fe00000
 800af78:	4631      	mov	r1, r6
 800af7a:	4656      	mov	r6, sl
 800af7c:	4628      	mov	r0, r5
 800af7e:	f7f5 fb3f 	bl	8000600 <__aeabi_dmul>
 800af82:	9415      	str	r4, [sp, #84]	@ 0x54
 800af84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af8c:	f7f5 fde8 	bl	8000b60 <__aeabi_d2iz>
 800af90:	4605      	mov	r5, r0
 800af92:	f7f5 facb 	bl	800052c <__aeabi_i2d>
 800af96:	4602      	mov	r2, r0
 800af98:	3530      	adds	r5, #48	@ 0x30
 800af9a:	460b      	mov	r3, r1
 800af9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afa0:	f7f5 f976 	bl	8000290 <__aeabi_dsub>
 800afa4:	f806 5b01 	strb.w	r5, [r6], #1
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	42a6      	cmp	r6, r4
 800afae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	d124      	bne.n	800b002 <_dtoa_r+0x662>
 800afb8:	4bac      	ldr	r3, [pc, #688]	@ (800b26c <_dtoa_r+0x8cc>)
 800afba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afbe:	f7f5 f969 	bl	8000294 <__adddf3>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afca:	f7f5 fda9 	bl	8000b20 <__aeabi_dcmpgt>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d145      	bne.n	800b05e <_dtoa_r+0x6be>
 800afd2:	2000      	movs	r0, #0
 800afd4:	49a5      	ldr	r1, [pc, #660]	@ (800b26c <_dtoa_r+0x8cc>)
 800afd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800afda:	f7f5 f959 	bl	8000290 <__aeabi_dsub>
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe6:	f7f5 fd7d 	bl	8000ae4 <__aeabi_dcmplt>
 800afea:	2800      	cmp	r0, #0
 800afec:	f43f aef5 	beq.w	800adda <_dtoa_r+0x43a>
 800aff0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aff2:	1e73      	subs	r3, r6, #1
 800aff4:	9315      	str	r3, [sp, #84]	@ 0x54
 800aff6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800affa:	2b30      	cmp	r3, #48	@ 0x30
 800affc:	d0f8      	beq.n	800aff0 <_dtoa_r+0x650>
 800affe:	9f04      	ldr	r7, [sp, #16]
 800b000:	e73e      	b.n	800ae80 <_dtoa_r+0x4e0>
 800b002:	4b9b      	ldr	r3, [pc, #620]	@ (800b270 <_dtoa_r+0x8d0>)
 800b004:	f7f5 fafc 	bl	8000600 <__aeabi_dmul>
 800b008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b00c:	e7bc      	b.n	800af88 <_dtoa_r+0x5e8>
 800b00e:	d10c      	bne.n	800b02a <_dtoa_r+0x68a>
 800b010:	2200      	movs	r2, #0
 800b012:	4b98      	ldr	r3, [pc, #608]	@ (800b274 <_dtoa_r+0x8d4>)
 800b014:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b018:	f7f5 faf2 	bl	8000600 <__aeabi_dmul>
 800b01c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b020:	f7f5 fd74 	bl	8000b0c <__aeabi_dcmpge>
 800b024:	2800      	cmp	r0, #0
 800b026:	f000 8157 	beq.w	800b2d8 <_dtoa_r+0x938>
 800b02a:	2400      	movs	r4, #0
 800b02c:	4625      	mov	r5, r4
 800b02e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b030:	4656      	mov	r6, sl
 800b032:	43db      	mvns	r3, r3
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	2700      	movs	r7, #0
 800b038:	4621      	mov	r1, r4
 800b03a:	4658      	mov	r0, fp
 800b03c:	f000 fbb4 	bl	800b7a8 <_Bfree>
 800b040:	2d00      	cmp	r5, #0
 800b042:	d0dc      	beq.n	800affe <_dtoa_r+0x65e>
 800b044:	b12f      	cbz	r7, 800b052 <_dtoa_r+0x6b2>
 800b046:	42af      	cmp	r7, r5
 800b048:	d003      	beq.n	800b052 <_dtoa_r+0x6b2>
 800b04a:	4639      	mov	r1, r7
 800b04c:	4658      	mov	r0, fp
 800b04e:	f000 fbab 	bl	800b7a8 <_Bfree>
 800b052:	4629      	mov	r1, r5
 800b054:	4658      	mov	r0, fp
 800b056:	f000 fba7 	bl	800b7a8 <_Bfree>
 800b05a:	e7d0      	b.n	800affe <_dtoa_r+0x65e>
 800b05c:	9704      	str	r7, [sp, #16]
 800b05e:	4633      	mov	r3, r6
 800b060:	461e      	mov	r6, r3
 800b062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b066:	2a39      	cmp	r2, #57	@ 0x39
 800b068:	d107      	bne.n	800b07a <_dtoa_r+0x6da>
 800b06a:	459a      	cmp	sl, r3
 800b06c:	d1f8      	bne.n	800b060 <_dtoa_r+0x6c0>
 800b06e:	9a04      	ldr	r2, [sp, #16]
 800b070:	3201      	adds	r2, #1
 800b072:	9204      	str	r2, [sp, #16]
 800b074:	2230      	movs	r2, #48	@ 0x30
 800b076:	f88a 2000 	strb.w	r2, [sl]
 800b07a:	781a      	ldrb	r2, [r3, #0]
 800b07c:	3201      	adds	r2, #1
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	e7bd      	b.n	800affe <_dtoa_r+0x65e>
 800b082:	2200      	movs	r2, #0
 800b084:	4b7a      	ldr	r3, [pc, #488]	@ (800b270 <_dtoa_r+0x8d0>)
 800b086:	f7f5 fabb 	bl	8000600 <__aeabi_dmul>
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	460d      	mov	r5, r1
 800b092:	f7f5 fd1d 	bl	8000ad0 <__aeabi_dcmpeq>
 800b096:	2800      	cmp	r0, #0
 800b098:	f43f aebb 	beq.w	800ae12 <_dtoa_r+0x472>
 800b09c:	e6f0      	b.n	800ae80 <_dtoa_r+0x4e0>
 800b09e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	f000 80db 	beq.w	800b25c <_dtoa_r+0x8bc>
 800b0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0a8:	2a01      	cmp	r2, #1
 800b0aa:	f300 80bf 	bgt.w	800b22c <_dtoa_r+0x88c>
 800b0ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0b0:	2a00      	cmp	r2, #0
 800b0b2:	f000 80b7 	beq.w	800b224 <_dtoa_r+0x884>
 800b0b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b0ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0bc:	4646      	mov	r6, r8
 800b0be:	9a08      	ldr	r2, [sp, #32]
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	4498      	add	r8, r3
 800b0c6:	441a      	add	r2, r3
 800b0c8:	9208      	str	r2, [sp, #32]
 800b0ca:	f000 fc6d 	bl	800b9a8 <__i2b>
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	b15e      	cbz	r6, 800b0ea <_dtoa_r+0x74a>
 800b0d2:	9b08      	ldr	r3, [sp, #32]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dd08      	ble.n	800b0ea <_dtoa_r+0x74a>
 800b0d8:	42b3      	cmp	r3, r6
 800b0da:	9a08      	ldr	r2, [sp, #32]
 800b0dc:	bfa8      	it	ge
 800b0de:	4633      	movge	r3, r6
 800b0e0:	eba8 0803 	sub.w	r8, r8, r3
 800b0e4:	1af6      	subs	r6, r6, r3
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	9308      	str	r3, [sp, #32]
 800b0ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ec:	b1f3      	cbz	r3, 800b12c <_dtoa_r+0x78c>
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80b7 	beq.w	800b264 <_dtoa_r+0x8c4>
 800b0f6:	b18c      	cbz	r4, 800b11c <_dtoa_r+0x77c>
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	4658      	mov	r0, fp
 800b0fe:	f000 fd13 	bl	800bb28 <__pow5mult>
 800b102:	464a      	mov	r2, r9
 800b104:	4601      	mov	r1, r0
 800b106:	4605      	mov	r5, r0
 800b108:	4658      	mov	r0, fp
 800b10a:	f000 fc63 	bl	800b9d4 <__multiply>
 800b10e:	4649      	mov	r1, r9
 800b110:	9004      	str	r0, [sp, #16]
 800b112:	4658      	mov	r0, fp
 800b114:	f000 fb48 	bl	800b7a8 <_Bfree>
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	4699      	mov	r9, r3
 800b11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b11e:	1b1a      	subs	r2, r3, r4
 800b120:	d004      	beq.n	800b12c <_dtoa_r+0x78c>
 800b122:	4649      	mov	r1, r9
 800b124:	4658      	mov	r0, fp
 800b126:	f000 fcff 	bl	800bb28 <__pow5mult>
 800b12a:	4681      	mov	r9, r0
 800b12c:	2101      	movs	r1, #1
 800b12e:	4658      	mov	r0, fp
 800b130:	f000 fc3a 	bl	800b9a8 <__i2b>
 800b134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b136:	4604      	mov	r4, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 81cf 	beq.w	800b4dc <_dtoa_r+0xb3c>
 800b13e:	461a      	mov	r2, r3
 800b140:	4601      	mov	r1, r0
 800b142:	4658      	mov	r0, fp
 800b144:	f000 fcf0 	bl	800bb28 <__pow5mult>
 800b148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b14a:	4604      	mov	r4, r0
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	f300 8095 	bgt.w	800b27c <_dtoa_r+0x8dc>
 800b152:	9b02      	ldr	r3, [sp, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f040 8087 	bne.w	800b268 <_dtoa_r+0x8c8>
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b160:	2b00      	cmp	r3, #0
 800b162:	f040 8089 	bne.w	800b278 <_dtoa_r+0x8d8>
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b16c:	0d1b      	lsrs	r3, r3, #20
 800b16e:	051b      	lsls	r3, r3, #20
 800b170:	b12b      	cbz	r3, 800b17e <_dtoa_r+0x7de>
 800b172:	9b08      	ldr	r3, [sp, #32]
 800b174:	f108 0801 	add.w	r8, r8, #1
 800b178:	3301      	adds	r3, #1
 800b17a:	9308      	str	r3, [sp, #32]
 800b17c:	2301      	movs	r3, #1
 800b17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 81b0 	beq.w	800b4e8 <_dtoa_r+0xb48>
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b18e:	6918      	ldr	r0, [r3, #16]
 800b190:	f000 fbbe 	bl	800b910 <__hi0bits>
 800b194:	f1c0 0020 	rsb	r0, r0, #32
 800b198:	9b08      	ldr	r3, [sp, #32]
 800b19a:	4418      	add	r0, r3
 800b19c:	f010 001f 	ands.w	r0, r0, #31
 800b1a0:	d077      	beq.n	800b292 <_dtoa_r+0x8f2>
 800b1a2:	f1c0 0320 	rsb	r3, r0, #32
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	dd6b      	ble.n	800b282 <_dtoa_r+0x8e2>
 800b1aa:	f1c0 001c 	rsb	r0, r0, #28
 800b1ae:	9b08      	ldr	r3, [sp, #32]
 800b1b0:	4480      	add	r8, r0
 800b1b2:	4403      	add	r3, r0
 800b1b4:	4406      	add	r6, r0
 800b1b6:	9308      	str	r3, [sp, #32]
 800b1b8:	f1b8 0f00 	cmp.w	r8, #0
 800b1bc:	dd05      	ble.n	800b1ca <_dtoa_r+0x82a>
 800b1be:	4649      	mov	r1, r9
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	4658      	mov	r0, fp
 800b1c4:	f000 fd0a 	bl	800bbdc <__lshift>
 800b1c8:	4681      	mov	r9, r0
 800b1ca:	9b08      	ldr	r3, [sp, #32]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	dd05      	ble.n	800b1dc <_dtoa_r+0x83c>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	4658      	mov	r0, fp
 800b1d6:	f000 fd01 	bl	800bbdc <__lshift>
 800b1da:	4604      	mov	r4, r0
 800b1dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d059      	beq.n	800b296 <_dtoa_r+0x8f6>
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	4648      	mov	r0, r9
 800b1e6:	f000 fd65 	bl	800bcb4 <__mcmp>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	da53      	bge.n	800b296 <_dtoa_r+0x8f6>
 800b1ee:	1e7b      	subs	r3, r7, #1
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	220a      	movs	r2, #10
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f000 faf7 	bl	800b7ec <__multadd>
 800b1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b200:	4681      	mov	r9, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 8172 	beq.w	800b4ec <_dtoa_r+0xb4c>
 800b208:	2300      	movs	r3, #0
 800b20a:	4629      	mov	r1, r5
 800b20c:	220a      	movs	r2, #10
 800b20e:	4658      	mov	r0, fp
 800b210:	f000 faec 	bl	800b7ec <__multadd>
 800b214:	9b00      	ldr	r3, [sp, #0]
 800b216:	4605      	mov	r5, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dc67      	bgt.n	800b2ec <_dtoa_r+0x94c>
 800b21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b21e:	2b02      	cmp	r3, #2
 800b220:	dc41      	bgt.n	800b2a6 <_dtoa_r+0x906>
 800b222:	e063      	b.n	800b2ec <_dtoa_r+0x94c>
 800b224:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b22a:	e746      	b.n	800b0ba <_dtoa_r+0x71a>
 800b22c:	9b07      	ldr	r3, [sp, #28]
 800b22e:	1e5c      	subs	r4, r3, #1
 800b230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b232:	42a3      	cmp	r3, r4
 800b234:	bfb7      	itett	lt
 800b236:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b238:	1b1c      	subge	r4, r3, r4
 800b23a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b23c:	1ae3      	sublt	r3, r4, r3
 800b23e:	bfbe      	ittt	lt
 800b240:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b242:	2400      	movlt	r4, #0
 800b244:	18d2      	addlt	r2, r2, r3
 800b246:	9b07      	ldr	r3, [sp, #28]
 800b248:	bfb8      	it	lt
 800b24a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bfb5      	itete	lt
 800b250:	eba8 0603 	sublt.w	r6, r8, r3
 800b254:	4646      	movge	r6, r8
 800b256:	2300      	movlt	r3, #0
 800b258:	9b07      	ldrge	r3, [sp, #28]
 800b25a:	e730      	b.n	800b0be <_dtoa_r+0x71e>
 800b25c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b25e:	4646      	mov	r6, r8
 800b260:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b262:	e735      	b.n	800b0d0 <_dtoa_r+0x730>
 800b264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b266:	e75c      	b.n	800b122 <_dtoa_r+0x782>
 800b268:	2300      	movs	r3, #0
 800b26a:	e788      	b.n	800b17e <_dtoa_r+0x7de>
 800b26c:	3fe00000 	.word	0x3fe00000
 800b270:	40240000 	.word	0x40240000
 800b274:	40140000 	.word	0x40140000
 800b278:	9b02      	ldr	r3, [sp, #8]
 800b27a:	e780      	b.n	800b17e <_dtoa_r+0x7de>
 800b27c:	2300      	movs	r3, #0
 800b27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b280:	e782      	b.n	800b188 <_dtoa_r+0x7e8>
 800b282:	d099      	beq.n	800b1b8 <_dtoa_r+0x818>
 800b284:	331c      	adds	r3, #28
 800b286:	9a08      	ldr	r2, [sp, #32]
 800b288:	441a      	add	r2, r3
 800b28a:	4498      	add	r8, r3
 800b28c:	441e      	add	r6, r3
 800b28e:	9208      	str	r2, [sp, #32]
 800b290:	e792      	b.n	800b1b8 <_dtoa_r+0x818>
 800b292:	4603      	mov	r3, r0
 800b294:	e7f6      	b.n	800b284 <_dtoa_r+0x8e4>
 800b296:	9b07      	ldr	r3, [sp, #28]
 800b298:	9704      	str	r7, [sp, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dc20      	bgt.n	800b2e0 <_dtoa_r+0x940>
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	dd1e      	ble.n	800b2e4 <_dtoa_r+0x944>
 800b2a6:	9b00      	ldr	r3, [sp, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f47f aec0 	bne.w	800b02e <_dtoa_r+0x68e>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	2205      	movs	r2, #5
 800b2b2:	4658      	mov	r0, fp
 800b2b4:	f000 fa9a 	bl	800b7ec <__multadd>
 800b2b8:	4601      	mov	r1, r0
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4648      	mov	r0, r9
 800b2be:	f000 fcf9 	bl	800bcb4 <__mcmp>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f77f aeb3 	ble.w	800b02e <_dtoa_r+0x68e>
 800b2c8:	2331      	movs	r3, #49	@ 0x31
 800b2ca:	4656      	mov	r6, sl
 800b2cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b2d0:	9b04      	ldr	r3, [sp, #16]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	9304      	str	r3, [sp, #16]
 800b2d6:	e6ae      	b.n	800b036 <_dtoa_r+0x696>
 800b2d8:	9c07      	ldr	r4, [sp, #28]
 800b2da:	9704      	str	r7, [sp, #16]
 800b2dc:	4625      	mov	r5, r4
 800b2de:	e7f3      	b.n	800b2c8 <_dtoa_r+0x928>
 800b2e0:	9b07      	ldr	r3, [sp, #28]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 8104 	beq.w	800b4f4 <_dtoa_r+0xb54>
 800b2ec:	2e00      	cmp	r6, #0
 800b2ee:	dd05      	ble.n	800b2fc <_dtoa_r+0x95c>
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	4658      	mov	r0, fp
 800b2f6:	f000 fc71 	bl	800bbdc <__lshift>
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d05a      	beq.n	800b3b8 <_dtoa_r+0xa18>
 800b302:	6869      	ldr	r1, [r5, #4]
 800b304:	4658      	mov	r0, fp
 800b306:	f000 fa0f 	bl	800b728 <_Balloc>
 800b30a:	4606      	mov	r6, r0
 800b30c:	b928      	cbnz	r0, 800b31a <_dtoa_r+0x97a>
 800b30e:	4b84      	ldr	r3, [pc, #528]	@ (800b520 <_dtoa_r+0xb80>)
 800b310:	4602      	mov	r2, r0
 800b312:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b316:	f7ff bb5a 	b.w	800a9ce <_dtoa_r+0x2e>
 800b31a:	692a      	ldr	r2, [r5, #16]
 800b31c:	f105 010c 	add.w	r1, r5, #12
 800b320:	300c      	adds	r0, #12
 800b322:	3202      	adds	r2, #2
 800b324:	0092      	lsls	r2, r2, #2
 800b326:	f002 f957 	bl	800d5d8 <memcpy>
 800b32a:	2201      	movs	r2, #1
 800b32c:	4631      	mov	r1, r6
 800b32e:	4658      	mov	r0, fp
 800b330:	f000 fc54 	bl	800bbdc <__lshift>
 800b334:	f10a 0301 	add.w	r3, sl, #1
 800b338:	462f      	mov	r7, r5
 800b33a:	4605      	mov	r5, r0
 800b33c:	9307      	str	r3, [sp, #28]
 800b33e:	9b00      	ldr	r3, [sp, #0]
 800b340:	4453      	add	r3, sl
 800b342:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b344:	9b02      	ldr	r3, [sp, #8]
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b34c:	9b07      	ldr	r3, [sp, #28]
 800b34e:	4621      	mov	r1, r4
 800b350:	4648      	mov	r0, r9
 800b352:	3b01      	subs	r3, #1
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	f7ff fa93 	bl	800a880 <quorem>
 800b35a:	4639      	mov	r1, r7
 800b35c:	9002      	str	r0, [sp, #8]
 800b35e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b362:	4648      	mov	r0, r9
 800b364:	f000 fca6 	bl	800bcb4 <__mcmp>
 800b368:	462a      	mov	r2, r5
 800b36a:	9008      	str	r0, [sp, #32]
 800b36c:	4621      	mov	r1, r4
 800b36e:	4658      	mov	r0, fp
 800b370:	f000 fcbc 	bl	800bcec <__mdiff>
 800b374:	68c2      	ldr	r2, [r0, #12]
 800b376:	4606      	mov	r6, r0
 800b378:	bb02      	cbnz	r2, 800b3bc <_dtoa_r+0xa1c>
 800b37a:	4601      	mov	r1, r0
 800b37c:	4648      	mov	r0, r9
 800b37e:	f000 fc99 	bl	800bcb4 <__mcmp>
 800b382:	4602      	mov	r2, r0
 800b384:	4631      	mov	r1, r6
 800b386:	4658      	mov	r0, fp
 800b388:	920e      	str	r2, [sp, #56]	@ 0x38
 800b38a:	f000 fa0d 	bl	800b7a8 <_Bfree>
 800b38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b390:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b392:	9e07      	ldr	r6, [sp, #28]
 800b394:	ea43 0102 	orr.w	r1, r3, r2
 800b398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b39a:	4319      	orrs	r1, r3
 800b39c:	d110      	bne.n	800b3c0 <_dtoa_r+0xa20>
 800b39e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3a2:	d029      	beq.n	800b3f8 <_dtoa_r+0xa58>
 800b3a4:	9b08      	ldr	r3, [sp, #32]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	dd02      	ble.n	800b3b0 <_dtoa_r+0xa10>
 800b3aa:	9b02      	ldr	r3, [sp, #8]
 800b3ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b3b0:	9b00      	ldr	r3, [sp, #0]
 800b3b2:	f883 8000 	strb.w	r8, [r3]
 800b3b6:	e63f      	b.n	800b038 <_dtoa_r+0x698>
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	e7bb      	b.n	800b334 <_dtoa_r+0x994>
 800b3bc:	2201      	movs	r2, #1
 800b3be:	e7e1      	b.n	800b384 <_dtoa_r+0x9e4>
 800b3c0:	9b08      	ldr	r3, [sp, #32]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	db04      	blt.n	800b3d0 <_dtoa_r+0xa30>
 800b3c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3c8:	430b      	orrs	r3, r1
 800b3ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	d120      	bne.n	800b412 <_dtoa_r+0xa72>
 800b3d0:	2a00      	cmp	r2, #0
 800b3d2:	dded      	ble.n	800b3b0 <_dtoa_r+0xa10>
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	4658      	mov	r0, fp
 800b3da:	f000 fbff 	bl	800bbdc <__lshift>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4681      	mov	r9, r0
 800b3e2:	f000 fc67 	bl	800bcb4 <__mcmp>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	dc03      	bgt.n	800b3f2 <_dtoa_r+0xa52>
 800b3ea:	d1e1      	bne.n	800b3b0 <_dtoa_r+0xa10>
 800b3ec:	f018 0f01 	tst.w	r8, #1
 800b3f0:	d0de      	beq.n	800b3b0 <_dtoa_r+0xa10>
 800b3f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3f6:	d1d8      	bne.n	800b3aa <_dtoa_r+0xa0a>
 800b3f8:	2339      	movs	r3, #57	@ 0x39
 800b3fa:	9a00      	ldr	r2, [sp, #0]
 800b3fc:	7013      	strb	r3, [r2, #0]
 800b3fe:	4633      	mov	r3, r6
 800b400:	461e      	mov	r6, r3
 800b402:	3b01      	subs	r3, #1
 800b404:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b408:	2a39      	cmp	r2, #57	@ 0x39
 800b40a:	d052      	beq.n	800b4b2 <_dtoa_r+0xb12>
 800b40c:	3201      	adds	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	e612      	b.n	800b038 <_dtoa_r+0x698>
 800b412:	2a00      	cmp	r2, #0
 800b414:	dd07      	ble.n	800b426 <_dtoa_r+0xa86>
 800b416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b41a:	d0ed      	beq.n	800b3f8 <_dtoa_r+0xa58>
 800b41c:	f108 0301 	add.w	r3, r8, #1
 800b420:	9a00      	ldr	r2, [sp, #0]
 800b422:	7013      	strb	r3, [r2, #0]
 800b424:	e608      	b.n	800b038 <_dtoa_r+0x698>
 800b426:	9b07      	ldr	r3, [sp, #28]
 800b428:	9a07      	ldr	r2, [sp, #28]
 800b42a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b430:	4293      	cmp	r3, r2
 800b432:	d028      	beq.n	800b486 <_dtoa_r+0xae6>
 800b434:	4649      	mov	r1, r9
 800b436:	2300      	movs	r3, #0
 800b438:	220a      	movs	r2, #10
 800b43a:	4658      	mov	r0, fp
 800b43c:	f000 f9d6 	bl	800b7ec <__multadd>
 800b440:	42af      	cmp	r7, r5
 800b442:	4681      	mov	r9, r0
 800b444:	f04f 0300 	mov.w	r3, #0
 800b448:	f04f 020a 	mov.w	r2, #10
 800b44c:	4639      	mov	r1, r7
 800b44e:	4658      	mov	r0, fp
 800b450:	d107      	bne.n	800b462 <_dtoa_r+0xac2>
 800b452:	f000 f9cb 	bl	800b7ec <__multadd>
 800b456:	4607      	mov	r7, r0
 800b458:	4605      	mov	r5, r0
 800b45a:	9b07      	ldr	r3, [sp, #28]
 800b45c:	3301      	adds	r3, #1
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	e774      	b.n	800b34c <_dtoa_r+0x9ac>
 800b462:	f000 f9c3 	bl	800b7ec <__multadd>
 800b466:	4629      	mov	r1, r5
 800b468:	4607      	mov	r7, r0
 800b46a:	2300      	movs	r3, #0
 800b46c:	220a      	movs	r2, #10
 800b46e:	4658      	mov	r0, fp
 800b470:	f000 f9bc 	bl	800b7ec <__multadd>
 800b474:	4605      	mov	r5, r0
 800b476:	e7f0      	b.n	800b45a <_dtoa_r+0xaba>
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	2700      	movs	r7, #0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bfcc      	ite	gt
 800b480:	461e      	movgt	r6, r3
 800b482:	2601      	movle	r6, #1
 800b484:	4456      	add	r6, sl
 800b486:	4649      	mov	r1, r9
 800b488:	2201      	movs	r2, #1
 800b48a:	4658      	mov	r0, fp
 800b48c:	f000 fba6 	bl	800bbdc <__lshift>
 800b490:	4621      	mov	r1, r4
 800b492:	4681      	mov	r9, r0
 800b494:	f000 fc0e 	bl	800bcb4 <__mcmp>
 800b498:	2800      	cmp	r0, #0
 800b49a:	dcb0      	bgt.n	800b3fe <_dtoa_r+0xa5e>
 800b49c:	d102      	bne.n	800b4a4 <_dtoa_r+0xb04>
 800b49e:	f018 0f01 	tst.w	r8, #1
 800b4a2:	d1ac      	bne.n	800b3fe <_dtoa_r+0xa5e>
 800b4a4:	4633      	mov	r3, r6
 800b4a6:	461e      	mov	r6, r3
 800b4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4ac:	2a30      	cmp	r2, #48	@ 0x30
 800b4ae:	d0fa      	beq.n	800b4a6 <_dtoa_r+0xb06>
 800b4b0:	e5c2      	b.n	800b038 <_dtoa_r+0x698>
 800b4b2:	459a      	cmp	sl, r3
 800b4b4:	d1a4      	bne.n	800b400 <_dtoa_r+0xa60>
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	2331      	movs	r3, #49	@ 0x31
 800b4be:	f88a 3000 	strb.w	r3, [sl]
 800b4c2:	e5b9      	b.n	800b038 <_dtoa_r+0x698>
 800b4c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b524 <_dtoa_r+0xb84>
 800b4ca:	b11b      	cbz	r3, 800b4d4 <_dtoa_r+0xb34>
 800b4cc:	f10a 0308 	add.w	r3, sl, #8
 800b4d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	b019      	add	sp, #100	@ 0x64
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	f77f ae37 	ble.w	800b152 <_dtoa_r+0x7b2>
 800b4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	e655      	b.n	800b198 <_dtoa_r+0x7f8>
 800b4ec:	9b00      	ldr	r3, [sp, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f77f aed6 	ble.w	800b2a0 <_dtoa_r+0x900>
 800b4f4:	4656      	mov	r6, sl
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	4648      	mov	r0, r9
 800b4fa:	f7ff f9c1 	bl	800a880 <quorem>
 800b4fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b502:	9b00      	ldr	r3, [sp, #0]
 800b504:	f806 8b01 	strb.w	r8, [r6], #1
 800b508:	eba6 020a 	sub.w	r2, r6, sl
 800b50c:	4293      	cmp	r3, r2
 800b50e:	ddb3      	ble.n	800b478 <_dtoa_r+0xad8>
 800b510:	4649      	mov	r1, r9
 800b512:	2300      	movs	r3, #0
 800b514:	220a      	movs	r2, #10
 800b516:	4658      	mov	r0, fp
 800b518:	f000 f968 	bl	800b7ec <__multadd>
 800b51c:	4681      	mov	r9, r0
 800b51e:	e7ea      	b.n	800b4f6 <_dtoa_r+0xb56>
 800b520:	0800e15d 	.word	0x0800e15d
 800b524:	0800e0e1 	.word	0x0800e0e1

0800b528 <_free_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4605      	mov	r5, r0
 800b52c:	2900      	cmp	r1, #0
 800b52e:	d041      	beq.n	800b5b4 <_free_r+0x8c>
 800b530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b534:	1f0c      	subs	r4, r1, #4
 800b536:	2b00      	cmp	r3, #0
 800b538:	bfb8      	it	lt
 800b53a:	18e4      	addlt	r4, r4, r3
 800b53c:	f000 f8e8 	bl	800b710 <__malloc_lock>
 800b540:	4a1d      	ldr	r2, [pc, #116]	@ (800b5b8 <_free_r+0x90>)
 800b542:	6813      	ldr	r3, [r2, #0]
 800b544:	b933      	cbnz	r3, 800b554 <_free_r+0x2c>
 800b546:	6063      	str	r3, [r4, #4]
 800b548:	6014      	str	r4, [r2, #0]
 800b54a:	4628      	mov	r0, r5
 800b54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b550:	f000 b8e4 	b.w	800b71c <__malloc_unlock>
 800b554:	42a3      	cmp	r3, r4
 800b556:	d908      	bls.n	800b56a <_free_r+0x42>
 800b558:	6820      	ldr	r0, [r4, #0]
 800b55a:	1821      	adds	r1, r4, r0
 800b55c:	428b      	cmp	r3, r1
 800b55e:	bf01      	itttt	eq
 800b560:	6819      	ldreq	r1, [r3, #0]
 800b562:	685b      	ldreq	r3, [r3, #4]
 800b564:	1809      	addeq	r1, r1, r0
 800b566:	6021      	streq	r1, [r4, #0]
 800b568:	e7ed      	b.n	800b546 <_free_r+0x1e>
 800b56a:	461a      	mov	r2, r3
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	b10b      	cbz	r3, 800b574 <_free_r+0x4c>
 800b570:	42a3      	cmp	r3, r4
 800b572:	d9fa      	bls.n	800b56a <_free_r+0x42>
 800b574:	6811      	ldr	r1, [r2, #0]
 800b576:	1850      	adds	r0, r2, r1
 800b578:	42a0      	cmp	r0, r4
 800b57a:	d10b      	bne.n	800b594 <_free_r+0x6c>
 800b57c:	6820      	ldr	r0, [r4, #0]
 800b57e:	4401      	add	r1, r0
 800b580:	1850      	adds	r0, r2, r1
 800b582:	6011      	str	r1, [r2, #0]
 800b584:	4283      	cmp	r3, r0
 800b586:	d1e0      	bne.n	800b54a <_free_r+0x22>
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	4408      	add	r0, r1
 800b58e:	6053      	str	r3, [r2, #4]
 800b590:	6010      	str	r0, [r2, #0]
 800b592:	e7da      	b.n	800b54a <_free_r+0x22>
 800b594:	d902      	bls.n	800b59c <_free_r+0x74>
 800b596:	230c      	movs	r3, #12
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	e7d6      	b.n	800b54a <_free_r+0x22>
 800b59c:	6820      	ldr	r0, [r4, #0]
 800b59e:	1821      	adds	r1, r4, r0
 800b5a0:	428b      	cmp	r3, r1
 800b5a2:	bf02      	ittt	eq
 800b5a4:	6819      	ldreq	r1, [r3, #0]
 800b5a6:	685b      	ldreq	r3, [r3, #4]
 800b5a8:	1809      	addeq	r1, r1, r0
 800b5aa:	6063      	str	r3, [r4, #4]
 800b5ac:	bf08      	it	eq
 800b5ae:	6021      	streq	r1, [r4, #0]
 800b5b0:	6054      	str	r4, [r2, #4]
 800b5b2:	e7ca      	b.n	800b54a <_free_r+0x22>
 800b5b4:	bd38      	pop	{r3, r4, r5, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000538 	.word	0x20000538

0800b5bc <malloc>:
 800b5bc:	4b02      	ldr	r3, [pc, #8]	@ (800b5c8 <malloc+0xc>)
 800b5be:	4601      	mov	r1, r0
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	f000 b825 	b.w	800b610 <_malloc_r>
 800b5c6:	bf00      	nop
 800b5c8:	2000001c 	.word	0x2000001c

0800b5cc <sbrk_aligned>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	4e0f      	ldr	r6, [pc, #60]	@ (800b60c <sbrk_aligned+0x40>)
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	6831      	ldr	r1, [r6, #0]
 800b5d6:	b911      	cbnz	r1, 800b5de <sbrk_aligned+0x12>
 800b5d8:	f001 ffee 	bl	800d5b8 <_sbrk_r>
 800b5dc:	6030      	str	r0, [r6, #0]
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f001 ffe9 	bl	800d5b8 <_sbrk_r>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d103      	bne.n	800b5f2 <sbrk_aligned+0x26>
 800b5ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	bd70      	pop	{r4, r5, r6, pc}
 800b5f2:	1cc4      	adds	r4, r0, #3
 800b5f4:	f024 0403 	bic.w	r4, r4, #3
 800b5f8:	42a0      	cmp	r0, r4
 800b5fa:	d0f8      	beq.n	800b5ee <sbrk_aligned+0x22>
 800b5fc:	1a21      	subs	r1, r4, r0
 800b5fe:	4628      	mov	r0, r5
 800b600:	f001 ffda 	bl	800d5b8 <_sbrk_r>
 800b604:	3001      	adds	r0, #1
 800b606:	d1f2      	bne.n	800b5ee <sbrk_aligned+0x22>
 800b608:	e7ef      	b.n	800b5ea <sbrk_aligned+0x1e>
 800b60a:	bf00      	nop
 800b60c:	20000534 	.word	0x20000534

0800b610 <_malloc_r>:
 800b610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b614:	1ccd      	adds	r5, r1, #3
 800b616:	4606      	mov	r6, r0
 800b618:	f025 0503 	bic.w	r5, r5, #3
 800b61c:	3508      	adds	r5, #8
 800b61e:	2d0c      	cmp	r5, #12
 800b620:	bf38      	it	cc
 800b622:	250c      	movcc	r5, #12
 800b624:	2d00      	cmp	r5, #0
 800b626:	db01      	blt.n	800b62c <_malloc_r+0x1c>
 800b628:	42a9      	cmp	r1, r5
 800b62a:	d904      	bls.n	800b636 <_malloc_r+0x26>
 800b62c:	230c      	movs	r3, #12
 800b62e:	6033      	str	r3, [r6, #0]
 800b630:	2000      	movs	r0, #0
 800b632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b70c <_malloc_r+0xfc>
 800b63a:	f000 f869 	bl	800b710 <__malloc_lock>
 800b63e:	f8d8 3000 	ldr.w	r3, [r8]
 800b642:	461c      	mov	r4, r3
 800b644:	bb44      	cbnz	r4, 800b698 <_malloc_r+0x88>
 800b646:	4629      	mov	r1, r5
 800b648:	4630      	mov	r0, r6
 800b64a:	f7ff ffbf 	bl	800b5cc <sbrk_aligned>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	4604      	mov	r4, r0
 800b652:	d158      	bne.n	800b706 <_malloc_r+0xf6>
 800b654:	f8d8 4000 	ldr.w	r4, [r8]
 800b658:	4627      	mov	r7, r4
 800b65a:	2f00      	cmp	r7, #0
 800b65c:	d143      	bne.n	800b6e6 <_malloc_r+0xd6>
 800b65e:	2c00      	cmp	r4, #0
 800b660:	d04b      	beq.n	800b6fa <_malloc_r+0xea>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	4639      	mov	r1, r7
 800b666:	4630      	mov	r0, r6
 800b668:	eb04 0903 	add.w	r9, r4, r3
 800b66c:	f001 ffa4 	bl	800d5b8 <_sbrk_r>
 800b670:	4581      	cmp	r9, r0
 800b672:	d142      	bne.n	800b6fa <_malloc_r+0xea>
 800b674:	6821      	ldr	r1, [r4, #0]
 800b676:	4630      	mov	r0, r6
 800b678:	1a6d      	subs	r5, r5, r1
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7ff ffa6 	bl	800b5cc <sbrk_aligned>
 800b680:	3001      	adds	r0, #1
 800b682:	d03a      	beq.n	800b6fa <_malloc_r+0xea>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	442b      	add	r3, r5
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	f8d8 3000 	ldr.w	r3, [r8]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	bb62      	cbnz	r2, 800b6ec <_malloc_r+0xdc>
 800b692:	f8c8 7000 	str.w	r7, [r8]
 800b696:	e00f      	b.n	800b6b8 <_malloc_r+0xa8>
 800b698:	6822      	ldr	r2, [r4, #0]
 800b69a:	1b52      	subs	r2, r2, r5
 800b69c:	d420      	bmi.n	800b6e0 <_malloc_r+0xd0>
 800b69e:	2a0b      	cmp	r2, #11
 800b6a0:	d917      	bls.n	800b6d2 <_malloc_r+0xc2>
 800b6a2:	1961      	adds	r1, r4, r5
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	6025      	str	r5, [r4, #0]
 800b6a8:	bf18      	it	ne
 800b6aa:	6059      	strne	r1, [r3, #4]
 800b6ac:	6863      	ldr	r3, [r4, #4]
 800b6ae:	bf08      	it	eq
 800b6b0:	f8c8 1000 	streq.w	r1, [r8]
 800b6b4:	5162      	str	r2, [r4, r5]
 800b6b6:	604b      	str	r3, [r1, #4]
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f000 f82f 	bl	800b71c <__malloc_unlock>
 800b6be:	f104 000b 	add.w	r0, r4, #11
 800b6c2:	1d23      	adds	r3, r4, #4
 800b6c4:	f020 0007 	bic.w	r0, r0, #7
 800b6c8:	1ac2      	subs	r2, r0, r3
 800b6ca:	bf1c      	itt	ne
 800b6cc:	1a1b      	subne	r3, r3, r0
 800b6ce:	50a3      	strne	r3, [r4, r2]
 800b6d0:	e7af      	b.n	800b632 <_malloc_r+0x22>
 800b6d2:	6862      	ldr	r2, [r4, #4]
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	bf0c      	ite	eq
 800b6d8:	f8c8 2000 	streq.w	r2, [r8]
 800b6dc:	605a      	strne	r2, [r3, #4]
 800b6de:	e7eb      	b.n	800b6b8 <_malloc_r+0xa8>
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	6864      	ldr	r4, [r4, #4]
 800b6e4:	e7ae      	b.n	800b644 <_malloc_r+0x34>
 800b6e6:	463c      	mov	r4, r7
 800b6e8:	687f      	ldr	r7, [r7, #4]
 800b6ea:	e7b6      	b.n	800b65a <_malloc_r+0x4a>
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	d1fb      	bne.n	800b6ec <_malloc_r+0xdc>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	6053      	str	r3, [r2, #4]
 800b6f8:	e7de      	b.n	800b6b8 <_malloc_r+0xa8>
 800b6fa:	230c      	movs	r3, #12
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	6033      	str	r3, [r6, #0]
 800b700:	f000 f80c 	bl	800b71c <__malloc_unlock>
 800b704:	e794      	b.n	800b630 <_malloc_r+0x20>
 800b706:	6005      	str	r5, [r0, #0]
 800b708:	e7d6      	b.n	800b6b8 <_malloc_r+0xa8>
 800b70a:	bf00      	nop
 800b70c:	20000538 	.word	0x20000538

0800b710 <__malloc_lock>:
 800b710:	4801      	ldr	r0, [pc, #4]	@ (800b718 <__malloc_lock+0x8>)
 800b712:	f7ff b89e 	b.w	800a852 <__retarget_lock_acquire_recursive>
 800b716:	bf00      	nop
 800b718:	20000530 	.word	0x20000530

0800b71c <__malloc_unlock>:
 800b71c:	4801      	ldr	r0, [pc, #4]	@ (800b724 <__malloc_unlock+0x8>)
 800b71e:	f7ff b899 	b.w	800a854 <__retarget_lock_release_recursive>
 800b722:	bf00      	nop
 800b724:	20000530 	.word	0x20000530

0800b728 <_Balloc>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	69c6      	ldr	r6, [r0, #28]
 800b72c:	4604      	mov	r4, r0
 800b72e:	460d      	mov	r5, r1
 800b730:	b976      	cbnz	r6, 800b750 <_Balloc+0x28>
 800b732:	2010      	movs	r0, #16
 800b734:	f7ff ff42 	bl	800b5bc <malloc>
 800b738:	4602      	mov	r2, r0
 800b73a:	61e0      	str	r0, [r4, #28]
 800b73c:	b920      	cbnz	r0, 800b748 <_Balloc+0x20>
 800b73e:	4b18      	ldr	r3, [pc, #96]	@ (800b7a0 <_Balloc+0x78>)
 800b740:	216b      	movs	r1, #107	@ 0x6b
 800b742:	4818      	ldr	r0, [pc, #96]	@ (800b7a4 <_Balloc+0x7c>)
 800b744:	f001 ff60 	bl	800d608 <__assert_func>
 800b748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b74c:	6006      	str	r6, [r0, #0]
 800b74e:	60c6      	str	r6, [r0, #12]
 800b750:	69e6      	ldr	r6, [r4, #28]
 800b752:	68f3      	ldr	r3, [r6, #12]
 800b754:	b183      	cbz	r3, 800b778 <_Balloc+0x50>
 800b756:	69e3      	ldr	r3, [r4, #28]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b75e:	b9b8      	cbnz	r0, 800b790 <_Balloc+0x68>
 800b760:	2101      	movs	r1, #1
 800b762:	4620      	mov	r0, r4
 800b764:	fa01 f605 	lsl.w	r6, r1, r5
 800b768:	1d72      	adds	r2, r6, #5
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	f001 ff6a 	bl	800d644 <_calloc_r>
 800b770:	b160      	cbz	r0, 800b78c <_Balloc+0x64>
 800b772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b776:	e00e      	b.n	800b796 <_Balloc+0x6e>
 800b778:	2221      	movs	r2, #33	@ 0x21
 800b77a:	2104      	movs	r1, #4
 800b77c:	4620      	mov	r0, r4
 800b77e:	f001 ff61 	bl	800d644 <_calloc_r>
 800b782:	69e3      	ldr	r3, [r4, #28]
 800b784:	60f0      	str	r0, [r6, #12]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e4      	bne.n	800b756 <_Balloc+0x2e>
 800b78c:	2000      	movs	r0, #0
 800b78e:	bd70      	pop	{r4, r5, r6, pc}
 800b790:	6802      	ldr	r2, [r0, #0]
 800b792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b796:	2300      	movs	r3, #0
 800b798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b79c:	e7f7      	b.n	800b78e <_Balloc+0x66>
 800b79e:	bf00      	nop
 800b7a0:	0800e0ee 	.word	0x0800e0ee
 800b7a4:	0800e16e 	.word	0x0800e16e

0800b7a8 <_Bfree>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	69c6      	ldr	r6, [r0, #28]
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	b976      	cbnz	r6, 800b7d0 <_Bfree+0x28>
 800b7b2:	2010      	movs	r0, #16
 800b7b4:	f7ff ff02 	bl	800b5bc <malloc>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	61e8      	str	r0, [r5, #28]
 800b7bc:	b920      	cbnz	r0, 800b7c8 <_Bfree+0x20>
 800b7be:	4b09      	ldr	r3, [pc, #36]	@ (800b7e4 <_Bfree+0x3c>)
 800b7c0:	218f      	movs	r1, #143	@ 0x8f
 800b7c2:	4809      	ldr	r0, [pc, #36]	@ (800b7e8 <_Bfree+0x40>)
 800b7c4:	f001 ff20 	bl	800d608 <__assert_func>
 800b7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7cc:	6006      	str	r6, [r0, #0]
 800b7ce:	60c6      	str	r6, [r0, #12]
 800b7d0:	b13c      	cbz	r4, 800b7e2 <_Bfree+0x3a>
 800b7d2:	69eb      	ldr	r3, [r5, #28]
 800b7d4:	6862      	ldr	r2, [r4, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7dc:	6021      	str	r1, [r4, #0]
 800b7de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	0800e0ee 	.word	0x0800e0ee
 800b7e8:	0800e16e 	.word	0x0800e16e

0800b7ec <__multadd>:
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	f101 0c14 	add.w	ip, r1, #20
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	461e      	mov	r6, r3
 800b7fa:	690d      	ldr	r5, [r1, #16]
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f8dc 3000 	ldr.w	r3, [ip]
 800b802:	3001      	adds	r0, #1
 800b804:	b299      	uxth	r1, r3
 800b806:	4285      	cmp	r5, r0
 800b808:	fb02 6101 	mla	r1, r2, r1, r6
 800b80c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b810:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b814:	b289      	uxth	r1, r1
 800b816:	fb02 3306 	mla	r3, r2, r6, r3
 800b81a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b81e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b822:	f84c 1b04 	str.w	r1, [ip], #4
 800b826:	dcea      	bgt.n	800b7fe <__multadd+0x12>
 800b828:	b30e      	cbz	r6, 800b86e <__multadd+0x82>
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	42ab      	cmp	r3, r5
 800b82e:	dc19      	bgt.n	800b864 <__multadd+0x78>
 800b830:	6861      	ldr	r1, [r4, #4]
 800b832:	4638      	mov	r0, r7
 800b834:	3101      	adds	r1, #1
 800b836:	f7ff ff77 	bl	800b728 <_Balloc>
 800b83a:	4680      	mov	r8, r0
 800b83c:	b928      	cbnz	r0, 800b84a <__multadd+0x5e>
 800b83e:	4602      	mov	r2, r0
 800b840:	4b0c      	ldr	r3, [pc, #48]	@ (800b874 <__multadd+0x88>)
 800b842:	21ba      	movs	r1, #186	@ 0xba
 800b844:	480c      	ldr	r0, [pc, #48]	@ (800b878 <__multadd+0x8c>)
 800b846:	f001 fedf 	bl	800d608 <__assert_func>
 800b84a:	6922      	ldr	r2, [r4, #16]
 800b84c:	f104 010c 	add.w	r1, r4, #12
 800b850:	300c      	adds	r0, #12
 800b852:	3202      	adds	r2, #2
 800b854:	0092      	lsls	r2, r2, #2
 800b856:	f001 febf 	bl	800d5d8 <memcpy>
 800b85a:	4621      	mov	r1, r4
 800b85c:	4644      	mov	r4, r8
 800b85e:	4638      	mov	r0, r7
 800b860:	f7ff ffa2 	bl	800b7a8 <_Bfree>
 800b864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b868:	3501      	adds	r5, #1
 800b86a:	615e      	str	r6, [r3, #20]
 800b86c:	6125      	str	r5, [r4, #16]
 800b86e:	4620      	mov	r0, r4
 800b870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b874:	0800e15d 	.word	0x0800e15d
 800b878:	0800e16e 	.word	0x0800e16e

0800b87c <__s2b>:
 800b87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b880:	4615      	mov	r5, r2
 800b882:	461f      	mov	r7, r3
 800b884:	2209      	movs	r2, #9
 800b886:	3308      	adds	r3, #8
 800b888:	460c      	mov	r4, r1
 800b88a:	4606      	mov	r6, r0
 800b88c:	2100      	movs	r1, #0
 800b88e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b892:	2201      	movs	r2, #1
 800b894:	429a      	cmp	r2, r3
 800b896:	db09      	blt.n	800b8ac <__s2b+0x30>
 800b898:	4630      	mov	r0, r6
 800b89a:	f7ff ff45 	bl	800b728 <_Balloc>
 800b89e:	b940      	cbnz	r0, 800b8b2 <__s2b+0x36>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	4b19      	ldr	r3, [pc, #100]	@ (800b908 <__s2b+0x8c>)
 800b8a4:	21d3      	movs	r1, #211	@ 0xd3
 800b8a6:	4819      	ldr	r0, [pc, #100]	@ (800b90c <__s2b+0x90>)
 800b8a8:	f001 feae 	bl	800d608 <__assert_func>
 800b8ac:	0052      	lsls	r2, r2, #1
 800b8ae:	3101      	adds	r1, #1
 800b8b0:	e7f0      	b.n	800b894 <__s2b+0x18>
 800b8b2:	9b08      	ldr	r3, [sp, #32]
 800b8b4:	2d09      	cmp	r5, #9
 800b8b6:	6143      	str	r3, [r0, #20]
 800b8b8:	f04f 0301 	mov.w	r3, #1
 800b8bc:	6103      	str	r3, [r0, #16]
 800b8be:	dd16      	ble.n	800b8ee <__s2b+0x72>
 800b8c0:	f104 0909 	add.w	r9, r4, #9
 800b8c4:	442c      	add	r4, r5
 800b8c6:	46c8      	mov	r8, r9
 800b8c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	220a      	movs	r2, #10
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	3b30      	subs	r3, #48	@ 0x30
 800b8d4:	f7ff ff8a 	bl	800b7ec <__multadd>
 800b8d8:	45a0      	cmp	r8, r4
 800b8da:	d1f5      	bne.n	800b8c8 <__s2b+0x4c>
 800b8dc:	f1a5 0408 	sub.w	r4, r5, #8
 800b8e0:	444c      	add	r4, r9
 800b8e2:	1b2d      	subs	r5, r5, r4
 800b8e4:	1963      	adds	r3, r4, r5
 800b8e6:	42bb      	cmp	r3, r7
 800b8e8:	db04      	blt.n	800b8f4 <__s2b+0x78>
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	340a      	adds	r4, #10
 800b8f0:	2509      	movs	r5, #9
 800b8f2:	e7f6      	b.n	800b8e2 <__s2b+0x66>
 800b8f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	220a      	movs	r2, #10
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	3b30      	subs	r3, #48	@ 0x30
 800b900:	f7ff ff74 	bl	800b7ec <__multadd>
 800b904:	e7ee      	b.n	800b8e4 <__s2b+0x68>
 800b906:	bf00      	nop
 800b908:	0800e15d 	.word	0x0800e15d
 800b90c:	0800e16e 	.word	0x0800e16e

0800b910 <__hi0bits>:
 800b910:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b914:	4603      	mov	r3, r0
 800b916:	bf36      	itet	cc
 800b918:	0403      	lslcc	r3, r0, #16
 800b91a:	2000      	movcs	r0, #0
 800b91c:	2010      	movcc	r0, #16
 800b91e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b922:	bf3c      	itt	cc
 800b924:	021b      	lslcc	r3, r3, #8
 800b926:	3008      	addcc	r0, #8
 800b928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b92c:	bf3c      	itt	cc
 800b92e:	011b      	lslcc	r3, r3, #4
 800b930:	3004      	addcc	r0, #4
 800b932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b936:	bf3c      	itt	cc
 800b938:	009b      	lslcc	r3, r3, #2
 800b93a:	3002      	addcc	r0, #2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	db05      	blt.n	800b94c <__hi0bits+0x3c>
 800b940:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b944:	f100 0001 	add.w	r0, r0, #1
 800b948:	bf08      	it	eq
 800b94a:	2020      	moveq	r0, #32
 800b94c:	4770      	bx	lr

0800b94e <__lo0bits>:
 800b94e:	6803      	ldr	r3, [r0, #0]
 800b950:	4602      	mov	r2, r0
 800b952:	f013 0007 	ands.w	r0, r3, #7
 800b956:	d00b      	beq.n	800b970 <__lo0bits+0x22>
 800b958:	07d9      	lsls	r1, r3, #31
 800b95a:	d421      	bmi.n	800b9a0 <__lo0bits+0x52>
 800b95c:	0798      	lsls	r0, r3, #30
 800b95e:	bf47      	ittee	mi
 800b960:	085b      	lsrmi	r3, r3, #1
 800b962:	2001      	movmi	r0, #1
 800b964:	089b      	lsrpl	r3, r3, #2
 800b966:	2002      	movpl	r0, #2
 800b968:	bf4c      	ite	mi
 800b96a:	6013      	strmi	r3, [r2, #0]
 800b96c:	6013      	strpl	r3, [r2, #0]
 800b96e:	4770      	bx	lr
 800b970:	b299      	uxth	r1, r3
 800b972:	b909      	cbnz	r1, 800b978 <__lo0bits+0x2a>
 800b974:	0c1b      	lsrs	r3, r3, #16
 800b976:	2010      	movs	r0, #16
 800b978:	b2d9      	uxtb	r1, r3
 800b97a:	b909      	cbnz	r1, 800b980 <__lo0bits+0x32>
 800b97c:	3008      	adds	r0, #8
 800b97e:	0a1b      	lsrs	r3, r3, #8
 800b980:	0719      	lsls	r1, r3, #28
 800b982:	bf04      	itt	eq
 800b984:	091b      	lsreq	r3, r3, #4
 800b986:	3004      	addeq	r0, #4
 800b988:	0799      	lsls	r1, r3, #30
 800b98a:	bf04      	itt	eq
 800b98c:	089b      	lsreq	r3, r3, #2
 800b98e:	3002      	addeq	r0, #2
 800b990:	07d9      	lsls	r1, r3, #31
 800b992:	d403      	bmi.n	800b99c <__lo0bits+0x4e>
 800b994:	085b      	lsrs	r3, r3, #1
 800b996:	f100 0001 	add.w	r0, r0, #1
 800b99a:	d003      	beq.n	800b9a4 <__lo0bits+0x56>
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	4770      	bx	lr
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	4770      	bx	lr
 800b9a4:	2020      	movs	r0, #32
 800b9a6:	4770      	bx	lr

0800b9a8 <__i2b>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	f7ff febb 	bl	800b728 <_Balloc>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	b928      	cbnz	r0, 800b9c2 <__i2b+0x1a>
 800b9b6:	4b05      	ldr	r3, [pc, #20]	@ (800b9cc <__i2b+0x24>)
 800b9b8:	f240 1145 	movw	r1, #325	@ 0x145
 800b9bc:	4804      	ldr	r0, [pc, #16]	@ (800b9d0 <__i2b+0x28>)
 800b9be:	f001 fe23 	bl	800d608 <__assert_func>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	6144      	str	r4, [r0, #20]
 800b9c6:	6103      	str	r3, [r0, #16]
 800b9c8:	bd10      	pop	{r4, pc}
 800b9ca:	bf00      	nop
 800b9cc:	0800e15d 	.word	0x0800e15d
 800b9d0:	0800e16e 	.word	0x0800e16e

0800b9d4 <__multiply>:
 800b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	4614      	mov	r4, r2
 800b9da:	690a      	ldr	r2, [r1, #16]
 800b9dc:	460f      	mov	r7, r1
 800b9de:	b085      	sub	sp, #20
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	bfa2      	ittt	ge
 800b9e6:	4623      	movge	r3, r4
 800b9e8:	460c      	movge	r4, r1
 800b9ea:	461f      	movge	r7, r3
 800b9ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b9f0:	68a3      	ldr	r3, [r4, #8]
 800b9f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b9f6:	6861      	ldr	r1, [r4, #4]
 800b9f8:	eb0a 0609 	add.w	r6, sl, r9
 800b9fc:	42b3      	cmp	r3, r6
 800b9fe:	bfb8      	it	lt
 800ba00:	3101      	addlt	r1, #1
 800ba02:	f7ff fe91 	bl	800b728 <_Balloc>
 800ba06:	b930      	cbnz	r0, 800ba16 <__multiply+0x42>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	4b45      	ldr	r3, [pc, #276]	@ (800bb20 <__multiply+0x14c>)
 800ba0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba10:	4844      	ldr	r0, [pc, #272]	@ (800bb24 <__multiply+0x150>)
 800ba12:	f001 fdf9 	bl	800d608 <__assert_func>
 800ba16:	f100 0514 	add.w	r5, r0, #20
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba20:	462b      	mov	r3, r5
 800ba22:	4543      	cmp	r3, r8
 800ba24:	d321      	bcc.n	800ba6a <__multiply+0x96>
 800ba26:	f107 0114 	add.w	r1, r7, #20
 800ba2a:	f104 0214 	add.w	r2, r4, #20
 800ba2e:	f104 0715 	add.w	r7, r4, #21
 800ba32:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba36:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba3a:	9302      	str	r3, [sp, #8]
 800ba3c:	1b13      	subs	r3, r2, r4
 800ba3e:	3b15      	subs	r3, #21
 800ba40:	f023 0303 	bic.w	r3, r3, #3
 800ba44:	3304      	adds	r3, #4
 800ba46:	42ba      	cmp	r2, r7
 800ba48:	bf38      	it	cc
 800ba4a:	2304      	movcc	r3, #4
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	9b02      	ldr	r3, [sp, #8]
 800ba50:	9103      	str	r1, [sp, #12]
 800ba52:	428b      	cmp	r3, r1
 800ba54:	d80c      	bhi.n	800ba70 <__multiply+0x9c>
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	dd03      	ble.n	800ba62 <__multiply+0x8e>
 800ba5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d05b      	beq.n	800bb1a <__multiply+0x146>
 800ba62:	6106      	str	r6, [r0, #16]
 800ba64:	b005      	add	sp, #20
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	f843 2b04 	str.w	r2, [r3], #4
 800ba6e:	e7d8      	b.n	800ba22 <__multiply+0x4e>
 800ba70:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba74:	f1ba 0f00 	cmp.w	sl, #0
 800ba78:	d024      	beq.n	800bac4 <__multiply+0xf0>
 800ba7a:	f104 0e14 	add.w	lr, r4, #20
 800ba7e:	46a9      	mov	r9, r5
 800ba80:	f04f 0c00 	mov.w	ip, #0
 800ba84:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba88:	f8d9 3000 	ldr.w	r3, [r9]
 800ba8c:	fa1f fb87 	uxth.w	fp, r7
 800ba90:	4572      	cmp	r2, lr
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba9c:	f8d9 7000 	ldr.w	r7, [r9]
 800baa0:	4463      	add	r3, ip
 800baa2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800baa6:	fb0a c70b 	mla	r7, sl, fp, ip
 800baaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800baae:	b29b      	uxth	r3, r3
 800bab0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bab4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bab8:	f849 3b04 	str.w	r3, [r9], #4
 800babc:	d8e2      	bhi.n	800ba84 <__multiply+0xb0>
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	f845 c003 	str.w	ip, [r5, r3]
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	3104      	adds	r1, #4
 800bac8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bacc:	f1b9 0f00 	cmp.w	r9, #0
 800bad0:	d021      	beq.n	800bb16 <__multiply+0x142>
 800bad2:	682b      	ldr	r3, [r5, #0]
 800bad4:	f104 0c14 	add.w	ip, r4, #20
 800bad8:	46ae      	mov	lr, r5
 800bada:	f04f 0a00 	mov.w	sl, #0
 800bade:	f8bc b000 	ldrh.w	fp, [ip]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bae8:	fb09 770b 	mla	r7, r9, fp, r7
 800baec:	4457      	add	r7, sl
 800baee:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800baf2:	f84e 3b04 	str.w	r3, [lr], #4
 800baf6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bafa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bafe:	f8be 3000 	ldrh.w	r3, [lr]
 800bb02:	4562      	cmp	r2, ip
 800bb04:	fb09 330a 	mla	r3, r9, sl, r3
 800bb08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb10:	d8e5      	bhi.n	800bade <__multiply+0x10a>
 800bb12:	9f01      	ldr	r7, [sp, #4]
 800bb14:	51eb      	str	r3, [r5, r7]
 800bb16:	3504      	adds	r5, #4
 800bb18:	e799      	b.n	800ba4e <__multiply+0x7a>
 800bb1a:	3e01      	subs	r6, #1
 800bb1c:	e79b      	b.n	800ba56 <__multiply+0x82>
 800bb1e:	bf00      	nop
 800bb20:	0800e15d 	.word	0x0800e15d
 800bb24:	0800e16e 	.word	0x0800e16e

0800bb28 <__pow5mult>:
 800bb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	4615      	mov	r5, r2
 800bb2e:	f012 0203 	ands.w	r2, r2, #3
 800bb32:	4607      	mov	r7, r0
 800bb34:	460e      	mov	r6, r1
 800bb36:	d007      	beq.n	800bb48 <__pow5mult+0x20>
 800bb38:	3a01      	subs	r2, #1
 800bb3a:	4c25      	ldr	r4, [pc, #148]	@ (800bbd0 <__pow5mult+0xa8>)
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb42:	f7ff fe53 	bl	800b7ec <__multadd>
 800bb46:	4606      	mov	r6, r0
 800bb48:	10ad      	asrs	r5, r5, #2
 800bb4a:	d03d      	beq.n	800bbc8 <__pow5mult+0xa0>
 800bb4c:	69fc      	ldr	r4, [r7, #28]
 800bb4e:	b97c      	cbnz	r4, 800bb70 <__pow5mult+0x48>
 800bb50:	2010      	movs	r0, #16
 800bb52:	f7ff fd33 	bl	800b5bc <malloc>
 800bb56:	4602      	mov	r2, r0
 800bb58:	61f8      	str	r0, [r7, #28]
 800bb5a:	b928      	cbnz	r0, 800bb68 <__pow5mult+0x40>
 800bb5c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbd4 <__pow5mult+0xac>)
 800bb5e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb62:	481d      	ldr	r0, [pc, #116]	@ (800bbd8 <__pow5mult+0xb0>)
 800bb64:	f001 fd50 	bl	800d608 <__assert_func>
 800bb68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb6c:	6004      	str	r4, [r0, #0]
 800bb6e:	60c4      	str	r4, [r0, #12]
 800bb70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb78:	b94c      	cbnz	r4, 800bb8e <__pow5mult+0x66>
 800bb7a:	f240 2171 	movw	r1, #625	@ 0x271
 800bb7e:	4638      	mov	r0, r7
 800bb80:	f7ff ff12 	bl	800b9a8 <__i2b>
 800bb84:	2300      	movs	r3, #0
 800bb86:	4604      	mov	r4, r0
 800bb88:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	f04f 0900 	mov.w	r9, #0
 800bb92:	07eb      	lsls	r3, r5, #31
 800bb94:	d50a      	bpl.n	800bbac <__pow5mult+0x84>
 800bb96:	4631      	mov	r1, r6
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	f7ff ff1a 	bl	800b9d4 <__multiply>
 800bba0:	4680      	mov	r8, r0
 800bba2:	4631      	mov	r1, r6
 800bba4:	4638      	mov	r0, r7
 800bba6:	4646      	mov	r6, r8
 800bba8:	f7ff fdfe 	bl	800b7a8 <_Bfree>
 800bbac:	106d      	asrs	r5, r5, #1
 800bbae:	d00b      	beq.n	800bbc8 <__pow5mult+0xa0>
 800bbb0:	6820      	ldr	r0, [r4, #0]
 800bbb2:	b938      	cbnz	r0, 800bbc4 <__pow5mult+0x9c>
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f7ff ff0b 	bl	800b9d4 <__multiply>
 800bbbe:	6020      	str	r0, [r4, #0]
 800bbc0:	f8c0 9000 	str.w	r9, [r0]
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	e7e4      	b.n	800bb92 <__pow5mult+0x6a>
 800bbc8:	4630      	mov	r0, r6
 800bbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbce:	bf00      	nop
 800bbd0:	0800e1c8 	.word	0x0800e1c8
 800bbd4:	0800e0ee 	.word	0x0800e0ee
 800bbd8:	0800e16e 	.word	0x0800e16e

0800bbdc <__lshift>:
 800bbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	4607      	mov	r7, r0
 800bbe4:	4691      	mov	r9, r2
 800bbe6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbea:	6923      	ldr	r3, [r4, #16]
 800bbec:	6849      	ldr	r1, [r1, #4]
 800bbee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	f108 0601 	add.w	r6, r8, #1
 800bbf8:	42b3      	cmp	r3, r6
 800bbfa:	db0b      	blt.n	800bc14 <__lshift+0x38>
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff fd93 	bl	800b728 <_Balloc>
 800bc02:	4605      	mov	r5, r0
 800bc04:	b948      	cbnz	r0, 800bc1a <__lshift+0x3e>
 800bc06:	4602      	mov	r2, r0
 800bc08:	4b28      	ldr	r3, [pc, #160]	@ (800bcac <__lshift+0xd0>)
 800bc0a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc0e:	4828      	ldr	r0, [pc, #160]	@ (800bcb0 <__lshift+0xd4>)
 800bc10:	f001 fcfa 	bl	800d608 <__assert_func>
 800bc14:	3101      	adds	r1, #1
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	e7ee      	b.n	800bbf8 <__lshift+0x1c>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f100 0114 	add.w	r1, r0, #20
 800bc20:	f100 0210 	add.w	r2, r0, #16
 800bc24:	4618      	mov	r0, r3
 800bc26:	4553      	cmp	r3, sl
 800bc28:	db33      	blt.n	800bc92 <__lshift+0xb6>
 800bc2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc2e:	f104 0314 	add.w	r3, r4, #20
 800bc32:	6920      	ldr	r0, [r4, #16]
 800bc34:	f019 091f 	ands.w	r9, r9, #31
 800bc38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc40:	d02b      	beq.n	800bc9a <__lshift+0xbe>
 800bc42:	f1c9 0e20 	rsb	lr, r9, #32
 800bc46:	468a      	mov	sl, r1
 800bc48:	2200      	movs	r2, #0
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc50:	4310      	orrs	r0, r2
 800bc52:	f84a 0b04 	str.w	r0, [sl], #4
 800bc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5a:	459c      	cmp	ip, r3
 800bc5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc60:	d8f3      	bhi.n	800bc4a <__lshift+0x6e>
 800bc62:	ebac 0304 	sub.w	r3, ip, r4
 800bc66:	f104 0015 	add.w	r0, r4, #21
 800bc6a:	3b15      	subs	r3, #21
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	3304      	adds	r3, #4
 800bc72:	4584      	cmp	ip, r0
 800bc74:	bf38      	it	cc
 800bc76:	2304      	movcc	r3, #4
 800bc78:	50ca      	str	r2, [r1, r3]
 800bc7a:	b10a      	cbz	r2, 800bc80 <__lshift+0xa4>
 800bc7c:	f108 0602 	add.w	r6, r8, #2
 800bc80:	3e01      	subs	r6, #1
 800bc82:	4638      	mov	r0, r7
 800bc84:	4621      	mov	r1, r4
 800bc86:	612e      	str	r6, [r5, #16]
 800bc88:	f7ff fd8e 	bl	800b7a8 <_Bfree>
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc92:	3301      	adds	r3, #1
 800bc94:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc98:	e7c5      	b.n	800bc26 <__lshift+0x4a>
 800bc9a:	3904      	subs	r1, #4
 800bc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca0:	459c      	cmp	ip, r3
 800bca2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bca6:	d8f9      	bhi.n	800bc9c <__lshift+0xc0>
 800bca8:	e7ea      	b.n	800bc80 <__lshift+0xa4>
 800bcaa:	bf00      	nop
 800bcac:	0800e15d 	.word	0x0800e15d
 800bcb0:	0800e16e 	.word	0x0800e16e

0800bcb4 <__mcmp>:
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	690a      	ldr	r2, [r1, #16]
 800bcb8:	6900      	ldr	r0, [r0, #16]
 800bcba:	1a80      	subs	r0, r0, r2
 800bcbc:	b530      	push	{r4, r5, lr}
 800bcbe:	d10e      	bne.n	800bcde <__mcmp+0x2a>
 800bcc0:	3314      	adds	r3, #20
 800bcc2:	3114      	adds	r1, #20
 800bcc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcd4:	4295      	cmp	r5, r2
 800bcd6:	d003      	beq.n	800bce0 <__mcmp+0x2c>
 800bcd8:	d205      	bcs.n	800bce6 <__mcmp+0x32>
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	bd30      	pop	{r4, r5, pc}
 800bce0:	42a3      	cmp	r3, r4
 800bce2:	d3f3      	bcc.n	800bccc <__mcmp+0x18>
 800bce4:	e7fb      	b.n	800bcde <__mcmp+0x2a>
 800bce6:	2001      	movs	r0, #1
 800bce8:	e7f9      	b.n	800bcde <__mcmp+0x2a>
	...

0800bcec <__mdiff>:
 800bcec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	4689      	mov	r9, r1
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4614      	mov	r4, r2
 800bcf8:	4648      	mov	r0, r9
 800bcfa:	f7ff ffdb 	bl	800bcb4 <__mcmp>
 800bcfe:	1e05      	subs	r5, r0, #0
 800bd00:	d112      	bne.n	800bd28 <__mdiff+0x3c>
 800bd02:	4629      	mov	r1, r5
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fd0f 	bl	800b728 <_Balloc>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	b928      	cbnz	r0, 800bd1a <__mdiff+0x2e>
 800bd0e:	4b41      	ldr	r3, [pc, #260]	@ (800be14 <__mdiff+0x128>)
 800bd10:	f240 2137 	movw	r1, #567	@ 0x237
 800bd14:	4840      	ldr	r0, [pc, #256]	@ (800be18 <__mdiff+0x12c>)
 800bd16:	f001 fc77 	bl	800d608 <__assert_func>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd20:	4610      	mov	r0, r2
 800bd22:	b003      	add	sp, #12
 800bd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd28:	bfbc      	itt	lt
 800bd2a:	464b      	movlt	r3, r9
 800bd2c:	46a1      	movlt	r9, r4
 800bd2e:	4630      	mov	r0, r6
 800bd30:	bfb8      	it	lt
 800bd32:	2501      	movlt	r5, #1
 800bd34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd38:	bfb4      	ite	lt
 800bd3a:	461c      	movlt	r4, r3
 800bd3c:	2500      	movge	r5, #0
 800bd3e:	f7ff fcf3 	bl	800b728 <_Balloc>
 800bd42:	4602      	mov	r2, r0
 800bd44:	b918      	cbnz	r0, 800bd4e <__mdiff+0x62>
 800bd46:	4b33      	ldr	r3, [pc, #204]	@ (800be14 <__mdiff+0x128>)
 800bd48:	f240 2145 	movw	r1, #581	@ 0x245
 800bd4c:	e7e2      	b.n	800bd14 <__mdiff+0x28>
 800bd4e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd52:	f104 0e14 	add.w	lr, r4, #20
 800bd56:	6926      	ldr	r6, [r4, #16]
 800bd58:	f100 0b14 	add.w	fp, r0, #20
 800bd5c:	60c5      	str	r5, [r0, #12]
 800bd5e:	f109 0514 	add.w	r5, r9, #20
 800bd62:	f109 0310 	add.w	r3, r9, #16
 800bd66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd6e:	46d9      	mov	r9, fp
 800bd70:	f04f 0c00 	mov.w	ip, #0
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd7c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd80:	4576      	cmp	r6, lr
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	fa1f f38a 	uxth.w	r3, sl
 800bd88:	4619      	mov	r1, r3
 800bd8a:	b283      	uxth	r3, r0
 800bd8c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bd90:	eba1 0303 	sub.w	r3, r1, r3
 800bd94:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd98:	4463      	add	r3, ip
 800bd9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bda4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bda8:	f849 3b04 	str.w	r3, [r9], #4
 800bdac:	d8e3      	bhi.n	800bd76 <__mdiff+0x8a>
 800bdae:	1b33      	subs	r3, r6, r4
 800bdb0:	3415      	adds	r4, #21
 800bdb2:	3b15      	subs	r3, #21
 800bdb4:	f023 0303 	bic.w	r3, r3, #3
 800bdb8:	3304      	adds	r3, #4
 800bdba:	42a6      	cmp	r6, r4
 800bdbc:	bf38      	it	cc
 800bdbe:	2304      	movcc	r3, #4
 800bdc0:	441d      	add	r5, r3
 800bdc2:	445b      	add	r3, fp
 800bdc4:	462c      	mov	r4, r5
 800bdc6:	461e      	mov	r6, r3
 800bdc8:	4544      	cmp	r4, r8
 800bdca:	d30e      	bcc.n	800bdea <__mdiff+0xfe>
 800bdcc:	f108 0103 	add.w	r1, r8, #3
 800bdd0:	1b49      	subs	r1, r1, r5
 800bdd2:	3d03      	subs	r5, #3
 800bdd4:	f021 0103 	bic.w	r1, r1, #3
 800bdd8:	45a8      	cmp	r8, r5
 800bdda:	bf38      	it	cc
 800bddc:	2100      	movcc	r1, #0
 800bdde:	440b      	add	r3, r1
 800bde0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bde4:	b199      	cbz	r1, 800be0e <__mdiff+0x122>
 800bde6:	6117      	str	r7, [r2, #16]
 800bde8:	e79a      	b.n	800bd20 <__mdiff+0x34>
 800bdea:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdee:	46e6      	mov	lr, ip
 800bdf0:	fa1f fc81 	uxth.w	ip, r1
 800bdf4:	0c08      	lsrs	r0, r1, #16
 800bdf6:	4471      	add	r1, lr
 800bdf8:	44f4      	add	ip, lr
 800bdfa:	b289      	uxth	r1, r1
 800bdfc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be08:	f846 1b04 	str.w	r1, [r6], #4
 800be0c:	e7dc      	b.n	800bdc8 <__mdiff+0xdc>
 800be0e:	3f01      	subs	r7, #1
 800be10:	e7e6      	b.n	800bde0 <__mdiff+0xf4>
 800be12:	bf00      	nop
 800be14:	0800e15d 	.word	0x0800e15d
 800be18:	0800e16e 	.word	0x0800e16e

0800be1c <__ulp>:
 800be1c:	b082      	sub	sp, #8
 800be1e:	4b11      	ldr	r3, [pc, #68]	@ (800be64 <__ulp+0x48>)
 800be20:	ed8d 0b00 	vstr	d0, [sp]
 800be24:	9a01      	ldr	r2, [sp, #4]
 800be26:	4013      	ands	r3, r2
 800be28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dc08      	bgt.n	800be42 <__ulp+0x26>
 800be30:	425b      	negs	r3, r3
 800be32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be3a:	da04      	bge.n	800be46 <__ulp+0x2a>
 800be3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be40:	4113      	asrs	r3, r2
 800be42:	2200      	movs	r2, #0
 800be44:	e008      	b.n	800be58 <__ulp+0x3c>
 800be46:	f1a2 0314 	sub.w	r3, r2, #20
 800be4a:	2b1e      	cmp	r3, #30
 800be4c:	bfd6      	itet	le
 800be4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be52:	2201      	movgt	r2, #1
 800be54:	40da      	lsrle	r2, r3
 800be56:	2300      	movs	r3, #0
 800be58:	4619      	mov	r1, r3
 800be5a:	4610      	mov	r0, r2
 800be5c:	ec41 0b10 	vmov	d0, r0, r1
 800be60:	b002      	add	sp, #8
 800be62:	4770      	bx	lr
 800be64:	7ff00000 	.word	0x7ff00000

0800be68 <__b2d>:
 800be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6c:	6906      	ldr	r6, [r0, #16]
 800be6e:	f100 0814 	add.w	r8, r0, #20
 800be72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be76:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be7a:	1f37      	subs	r7, r6, #4
 800be7c:	4610      	mov	r0, r2
 800be7e:	f7ff fd47 	bl	800b910 <__hi0bits>
 800be82:	f1c0 0320 	rsb	r3, r0, #32
 800be86:	280a      	cmp	r0, #10
 800be88:	600b      	str	r3, [r1, #0]
 800be8a:	491d      	ldr	r1, [pc, #116]	@ (800bf00 <__b2d+0x98>)
 800be8c:	dc16      	bgt.n	800bebc <__b2d+0x54>
 800be8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800be92:	45b8      	cmp	r8, r7
 800be94:	f100 0015 	add.w	r0, r0, #21
 800be98:	fa22 f30c 	lsr.w	r3, r2, ip
 800be9c:	fa02 f000 	lsl.w	r0, r2, r0
 800bea0:	ea43 0501 	orr.w	r5, r3, r1
 800bea4:	bf34      	ite	cc
 800bea6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800beaa:	2300      	movcs	r3, #0
 800beac:	fa23 f30c 	lsr.w	r3, r3, ip
 800beb0:	4303      	orrs	r3, r0
 800beb2:	461c      	mov	r4, r3
 800beb4:	ec45 4b10 	vmov	d0, r4, r5
 800beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bebc:	45b8      	cmp	r8, r7
 800bebe:	bf3a      	itte	cc
 800bec0:	f1a6 0708 	subcc.w	r7, r6, #8
 800bec4:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bec8:	2300      	movcs	r3, #0
 800beca:	380b      	subs	r0, #11
 800becc:	d014      	beq.n	800bef8 <__b2d+0x90>
 800bece:	f1c0 0120 	rsb	r1, r0, #32
 800bed2:	4082      	lsls	r2, r0
 800bed4:	4547      	cmp	r7, r8
 800bed6:	fa23 f401 	lsr.w	r4, r3, r1
 800beda:	fa03 f300 	lsl.w	r3, r3, r0
 800bede:	ea42 0204 	orr.w	r2, r2, r4
 800bee2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bee6:	bf8c      	ite	hi
 800bee8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800beec:	2200      	movls	r2, #0
 800beee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bef2:	40ca      	lsrs	r2, r1
 800bef4:	4313      	orrs	r3, r2
 800bef6:	e7dc      	b.n	800beb2 <__b2d+0x4a>
 800bef8:	ea42 0501 	orr.w	r5, r2, r1
 800befc:	e7d9      	b.n	800beb2 <__b2d+0x4a>
 800befe:	bf00      	nop
 800bf00:	3ff00000 	.word	0x3ff00000

0800bf04 <__d2b>:
 800bf04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf08:	460f      	mov	r7, r1
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	ec59 8b10 	vmov	r8, r9, d0
 800bf12:	f7ff fc09 	bl	800b728 <_Balloc>
 800bf16:	4604      	mov	r4, r0
 800bf18:	b930      	cbnz	r0, 800bf28 <__d2b+0x24>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	4b23      	ldr	r3, [pc, #140]	@ (800bfac <__d2b+0xa8>)
 800bf1e:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf22:	4823      	ldr	r0, [pc, #140]	@ (800bfb0 <__d2b+0xac>)
 800bf24:	f001 fb70 	bl	800d608 <__assert_func>
 800bf28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf30:	b10d      	cbz	r5, 800bf36 <__d2b+0x32>
 800bf32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	f1b8 0300 	subs.w	r3, r8, #0
 800bf3c:	d023      	beq.n	800bf86 <__d2b+0x82>
 800bf3e:	4668      	mov	r0, sp
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	f7ff fd04 	bl	800b94e <__lo0bits>
 800bf46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf4a:	b1d0      	cbz	r0, 800bf82 <__d2b+0x7e>
 800bf4c:	f1c0 0320 	rsb	r3, r0, #32
 800bf50:	fa02 f303 	lsl.w	r3, r2, r3
 800bf54:	40c2      	lsrs	r2, r0
 800bf56:	430b      	orrs	r3, r1
 800bf58:	9201      	str	r2, [sp, #4]
 800bf5a:	6163      	str	r3, [r4, #20]
 800bf5c:	9b01      	ldr	r3, [sp, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	61a3      	str	r3, [r4, #24]
 800bf62:	bf0c      	ite	eq
 800bf64:	2201      	moveq	r2, #1
 800bf66:	2202      	movne	r2, #2
 800bf68:	6122      	str	r2, [r4, #16]
 800bf6a:	b1a5      	cbz	r5, 800bf96 <__d2b+0x92>
 800bf6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf70:	4405      	add	r5, r0
 800bf72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf76:	603d      	str	r5, [r7, #0]
 800bf78:	6030      	str	r0, [r6, #0]
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	b003      	add	sp, #12
 800bf7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf82:	6161      	str	r1, [r4, #20]
 800bf84:	e7ea      	b.n	800bf5c <__d2b+0x58>
 800bf86:	a801      	add	r0, sp, #4
 800bf88:	f7ff fce1 	bl	800b94e <__lo0bits>
 800bf8c:	9b01      	ldr	r3, [sp, #4]
 800bf8e:	3020      	adds	r0, #32
 800bf90:	2201      	movs	r2, #1
 800bf92:	6163      	str	r3, [r4, #20]
 800bf94:	e7e8      	b.n	800bf68 <__d2b+0x64>
 800bf96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf9e:	6038      	str	r0, [r7, #0]
 800bfa0:	6918      	ldr	r0, [r3, #16]
 800bfa2:	f7ff fcb5 	bl	800b910 <__hi0bits>
 800bfa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfaa:	e7e5      	b.n	800bf78 <__d2b+0x74>
 800bfac:	0800e15d 	.word	0x0800e15d
 800bfb0:	0800e16e 	.word	0x0800e16e

0800bfb4 <__ratio>:
 800bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	e9cd 1000 	strd	r1, r0, [sp]
 800bfbe:	a902      	add	r1, sp, #8
 800bfc0:	f7ff ff52 	bl	800be68 <__b2d>
 800bfc4:	a903      	add	r1, sp, #12
 800bfc6:	9800      	ldr	r0, [sp, #0]
 800bfc8:	ec55 4b10 	vmov	r4, r5, d0
 800bfcc:	f7ff ff4c 	bl	800be68 <__b2d>
 800bfd0:	9b01      	ldr	r3, [sp, #4]
 800bfd2:	462f      	mov	r7, r5
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	6919      	ldr	r1, [r3, #16]
 800bfd8:	9b00      	ldr	r3, [sp, #0]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	1ac9      	subs	r1, r1, r3
 800bfde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bfe2:	ec5b ab10 	vmov	sl, fp, d0
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	46d9      	mov	r9, fp
 800bfea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	bfcd      	iteet	gt
 800bff2:	462a      	movgt	r2, r5
 800bff4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bff8:	465a      	movle	r2, fp
 800bffa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bffe:	bfd8      	it	le
 800c000:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c004:	4652      	mov	r2, sl
 800c006:	4639      	mov	r1, r7
 800c008:	464b      	mov	r3, r9
 800c00a:	f7f4 fc23 	bl	8000854 <__aeabi_ddiv>
 800c00e:	ec41 0b10 	vmov	d0, r0, r1
 800c012:	b005      	add	sp, #20
 800c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c018 <__copybits>:
 800c018:	3901      	subs	r1, #1
 800c01a:	f102 0314 	add.w	r3, r2, #20
 800c01e:	1149      	asrs	r1, r1, #5
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	3101      	adds	r1, #1
 800c024:	6914      	ldr	r4, [r2, #16]
 800c026:	1f05      	subs	r5, r0, #4
 800c028:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c02c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c030:	42a3      	cmp	r3, r4
 800c032:	d30c      	bcc.n	800c04e <__copybits+0x36>
 800c034:	1aa3      	subs	r3, r4, r2
 800c036:	3211      	adds	r2, #17
 800c038:	3b11      	subs	r3, #17
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	42a2      	cmp	r2, r4
 800c040:	bf88      	it	hi
 800c042:	2300      	movhi	r3, #0
 800c044:	4418      	add	r0, r3
 800c046:	2300      	movs	r3, #0
 800c048:	4288      	cmp	r0, r1
 800c04a:	d305      	bcc.n	800c058 <__copybits+0x40>
 800c04c:	bd70      	pop	{r4, r5, r6, pc}
 800c04e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c052:	f845 6f04 	str.w	r6, [r5, #4]!
 800c056:	e7eb      	b.n	800c030 <__copybits+0x18>
 800c058:	f840 3b04 	str.w	r3, [r0], #4
 800c05c:	e7f4      	b.n	800c048 <__copybits+0x30>

0800c05e <__any_on>:
 800c05e:	f100 0214 	add.w	r2, r0, #20
 800c062:	114b      	asrs	r3, r1, #5
 800c064:	6900      	ldr	r0, [r0, #16]
 800c066:	4298      	cmp	r0, r3
 800c068:	b510      	push	{r4, lr}
 800c06a:	db11      	blt.n	800c090 <__any_on+0x32>
 800c06c:	dd0a      	ble.n	800c084 <__any_on+0x26>
 800c06e:	f011 011f 	ands.w	r1, r1, #31
 800c072:	d007      	beq.n	800c084 <__any_on+0x26>
 800c074:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c078:	fa24 f001 	lsr.w	r0, r4, r1
 800c07c:	fa00 f101 	lsl.w	r1, r0, r1
 800c080:	428c      	cmp	r4, r1
 800c082:	d10b      	bne.n	800c09c <__any_on+0x3e>
 800c084:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c088:	4293      	cmp	r3, r2
 800c08a:	d803      	bhi.n	800c094 <__any_on+0x36>
 800c08c:	2000      	movs	r0, #0
 800c08e:	bd10      	pop	{r4, pc}
 800c090:	4603      	mov	r3, r0
 800c092:	e7f7      	b.n	800c084 <__any_on+0x26>
 800c094:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c098:	2900      	cmp	r1, #0
 800c09a:	d0f5      	beq.n	800c088 <__any_on+0x2a>
 800c09c:	2001      	movs	r0, #1
 800c09e:	e7f6      	b.n	800c08e <__any_on+0x30>

0800c0a0 <sulp>:
 800c0a0:	b570      	push	{r4, r5, r6, lr}
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	4616      	mov	r6, r2
 800c0a8:	ec45 4b10 	vmov	d0, r4, r5
 800c0ac:	f7ff feb6 	bl	800be1c <__ulp>
 800c0b0:	ec51 0b10 	vmov	r0, r1, d0
 800c0b4:	b17e      	cbz	r6, 800c0d6 <sulp+0x36>
 800c0b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c0ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	dd09      	ble.n	800c0d6 <sulp+0x36>
 800c0c2:	051b      	lsls	r3, r3, #20
 800c0c4:	2400      	movs	r4, #0
 800c0c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c0d0:	462b      	mov	r3, r5
 800c0d2:	f7f4 fa95 	bl	8000600 <__aeabi_dmul>
 800c0d6:	ec41 0b10 	vmov	d0, r0, r1
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	0000      	movs	r0, r0
	...

0800c0e0 <_strtod_l>:
 800c0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e4:	b09f      	sub	sp, #124	@ 0x7c
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	f04f 0a00 	mov.w	sl, #0
 800c0ec:	f04f 0b00 	mov.w	fp, #0
 800c0f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	9005      	str	r0, [sp, #20]
 800c0f6:	921a      	str	r2, [sp, #104]	@ 0x68
 800c0f8:	460a      	mov	r2, r1
 800c0fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0fc:	7811      	ldrb	r1, [r2, #0]
 800c0fe:	292b      	cmp	r1, #43	@ 0x2b
 800c100:	d04a      	beq.n	800c198 <_strtod_l+0xb8>
 800c102:	d838      	bhi.n	800c176 <_strtod_l+0x96>
 800c104:	290d      	cmp	r1, #13
 800c106:	d832      	bhi.n	800c16e <_strtod_l+0x8e>
 800c108:	2908      	cmp	r1, #8
 800c10a:	d832      	bhi.n	800c172 <_strtod_l+0x92>
 800c10c:	2900      	cmp	r1, #0
 800c10e:	d03b      	beq.n	800c188 <_strtod_l+0xa8>
 800c110:	2200      	movs	r2, #0
 800c112:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c114:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c116:	782a      	ldrb	r2, [r5, #0]
 800c118:	2a30      	cmp	r2, #48	@ 0x30
 800c11a:	f040 80b3 	bne.w	800c284 <_strtod_l+0x1a4>
 800c11e:	786a      	ldrb	r2, [r5, #1]
 800c120:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c124:	2a58      	cmp	r2, #88	@ 0x58
 800c126:	d16e      	bne.n	800c206 <_strtod_l+0x126>
 800c128:	9302      	str	r3, [sp, #8]
 800c12a:	a919      	add	r1, sp, #100	@ 0x64
 800c12c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c12e:	4a90      	ldr	r2, [pc, #576]	@ (800c370 <_strtod_l+0x290>)
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	ab1a      	add	r3, sp, #104	@ 0x68
 800c134:	9805      	ldr	r0, [sp, #20]
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c13a:	f001 fafd 	bl	800d738 <__gethex>
 800c13e:	f010 060f 	ands.w	r6, r0, #15
 800c142:	4604      	mov	r4, r0
 800c144:	d005      	beq.n	800c152 <_strtod_l+0x72>
 800c146:	2e06      	cmp	r6, #6
 800c148:	d128      	bne.n	800c19c <_strtod_l+0xbc>
 800c14a:	3501      	adds	r5, #1
 800c14c:	2300      	movs	r3, #0
 800c14e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c150:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c154:	2b00      	cmp	r3, #0
 800c156:	f040 858e 	bne.w	800cc76 <_strtod_l+0xb96>
 800c15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c15c:	b1cb      	cbz	r3, 800c192 <_strtod_l+0xb2>
 800c15e:	4652      	mov	r2, sl
 800c160:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c164:	ec43 2b10 	vmov	d0, r2, r3
 800c168:	b01f      	add	sp, #124	@ 0x7c
 800c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16e:	2920      	cmp	r1, #32
 800c170:	d1ce      	bne.n	800c110 <_strtod_l+0x30>
 800c172:	3201      	adds	r2, #1
 800c174:	e7c1      	b.n	800c0fa <_strtod_l+0x1a>
 800c176:	292d      	cmp	r1, #45	@ 0x2d
 800c178:	d1ca      	bne.n	800c110 <_strtod_l+0x30>
 800c17a:	2101      	movs	r1, #1
 800c17c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c17e:	1c51      	adds	r1, r2, #1
 800c180:	9119      	str	r1, [sp, #100]	@ 0x64
 800c182:	7852      	ldrb	r2, [r2, #1]
 800c184:	2a00      	cmp	r2, #0
 800c186:	d1c5      	bne.n	800c114 <_strtod_l+0x34>
 800c188:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c18a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f040 8570 	bne.w	800cc72 <_strtod_l+0xb92>
 800c192:	4652      	mov	r2, sl
 800c194:	465b      	mov	r3, fp
 800c196:	e7e5      	b.n	800c164 <_strtod_l+0x84>
 800c198:	2100      	movs	r1, #0
 800c19a:	e7ef      	b.n	800c17c <_strtod_l+0x9c>
 800c19c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c19e:	b13a      	cbz	r2, 800c1b0 <_strtod_l+0xd0>
 800c1a0:	2135      	movs	r1, #53	@ 0x35
 800c1a2:	a81c      	add	r0, sp, #112	@ 0x70
 800c1a4:	f7ff ff38 	bl	800c018 <__copybits>
 800c1a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1aa:	9805      	ldr	r0, [sp, #20]
 800c1ac:	f7ff fafc 	bl	800b7a8 <_Bfree>
 800c1b0:	3e01      	subs	r6, #1
 800c1b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c1b4:	2e04      	cmp	r6, #4
 800c1b6:	d806      	bhi.n	800c1c6 <_strtod_l+0xe6>
 800c1b8:	e8df f006 	tbb	[pc, r6]
 800c1bc:	201d0314 	.word	0x201d0314
 800c1c0:	14          	.byte	0x14
 800c1c1:	00          	.byte	0x00
 800c1c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c1c6:	05e1      	lsls	r1, r4, #23
 800c1c8:	bf48      	it	mi
 800c1ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1d2:	0d1b      	lsrs	r3, r3, #20
 800c1d4:	051b      	lsls	r3, r3, #20
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1bb      	bne.n	800c152 <_strtod_l+0x72>
 800c1da:	f7fe fb0f 	bl	800a7fc <__errno>
 800c1de:	2322      	movs	r3, #34	@ 0x22
 800c1e0:	6003      	str	r3, [r0, #0]
 800c1e2:	e7b6      	b.n	800c152 <_strtod_l+0x72>
 800c1e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c1e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c1ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c1f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c1f4:	e7e7      	b.n	800c1c6 <_strtod_l+0xe6>
 800c1f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c378 <_strtod_l+0x298>
 800c1fa:	e7e4      	b.n	800c1c6 <_strtod_l+0xe6>
 800c1fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c200:	f04f 3aff 	mov.w	sl, #4294967295
 800c204:	e7df      	b.n	800c1c6 <_strtod_l+0xe6>
 800c206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	2b30      	cmp	r3, #48	@ 0x30
 800c210:	d0f9      	beq.n	800c206 <_strtod_l+0x126>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d09d      	beq.n	800c152 <_strtod_l+0x72>
 800c216:	2301      	movs	r3, #1
 800c218:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21a:	220a      	movs	r2, #10
 800c21c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c21e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c220:	2300      	movs	r3, #0
 800c222:	461f      	mov	r7, r3
 800c224:	9308      	str	r3, [sp, #32]
 800c226:	930a      	str	r3, [sp, #40]	@ 0x28
 800c228:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c22a:	7805      	ldrb	r5, [r0, #0]
 800c22c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c230:	b2d9      	uxtb	r1, r3
 800c232:	2909      	cmp	r1, #9
 800c234:	d928      	bls.n	800c288 <_strtod_l+0x1a8>
 800c236:	2201      	movs	r2, #1
 800c238:	494e      	ldr	r1, [pc, #312]	@ (800c374 <_strtod_l+0x294>)
 800c23a:	f001 f9ab 	bl	800d594 <strncmp>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d033      	beq.n	800c2aa <_strtod_l+0x1ca>
 800c242:	2000      	movs	r0, #0
 800c244:	462a      	mov	r2, r5
 800c246:	463d      	mov	r5, r7
 800c248:	4681      	mov	r9, r0
 800c24a:	4603      	mov	r3, r0
 800c24c:	2a65      	cmp	r2, #101	@ 0x65
 800c24e:	d001      	beq.n	800c254 <_strtod_l+0x174>
 800c250:	2a45      	cmp	r2, #69	@ 0x45
 800c252:	d114      	bne.n	800c27e <_strtod_l+0x19e>
 800c254:	b91d      	cbnz	r5, 800c25e <_strtod_l+0x17e>
 800c256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c258:	4302      	orrs	r2, r0
 800c25a:	d095      	beq.n	800c188 <_strtod_l+0xa8>
 800c25c:	2500      	movs	r5, #0
 800c25e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c260:	1c62      	adds	r2, r4, #1
 800c262:	9219      	str	r2, [sp, #100]	@ 0x64
 800c264:	7862      	ldrb	r2, [r4, #1]
 800c266:	2a2b      	cmp	r2, #43	@ 0x2b
 800c268:	d078      	beq.n	800c35c <_strtod_l+0x27c>
 800c26a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c26c:	d07c      	beq.n	800c368 <_strtod_l+0x288>
 800c26e:	f04f 0c00 	mov.w	ip, #0
 800c272:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c276:	2909      	cmp	r1, #9
 800c278:	f240 8084 	bls.w	800c384 <_strtod_l+0x2a4>
 800c27c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c27e:	f04f 0800 	mov.w	r8, #0
 800c282:	e0a4      	b.n	800c3ce <_strtod_l+0x2ee>
 800c284:	2300      	movs	r3, #0
 800c286:	e7c7      	b.n	800c218 <_strtod_l+0x138>
 800c288:	2f08      	cmp	r7, #8
 800c28a:	f100 0001 	add.w	r0, r0, #1
 800c28e:	f107 0701 	add.w	r7, r7, #1
 800c292:	bfd5      	itete	le
 800c294:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c296:	9908      	ldrgt	r1, [sp, #32]
 800c298:	fb02 3301 	mlale	r3, r2, r1, r3
 800c29c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c2a0:	bfd4      	ite	le
 800c2a2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c2a4:	9308      	strgt	r3, [sp, #32]
 800c2a6:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2a8:	e7be      	b.n	800c228 <_strtod_l+0x148>
 800c2aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2b0:	785a      	ldrb	r2, [r3, #1]
 800c2b2:	b37f      	cbz	r7, 800c314 <_strtod_l+0x234>
 800c2b4:	4681      	mov	r9, r0
 800c2b6:	463d      	mov	r5, r7
 800c2b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c2bc:	2b09      	cmp	r3, #9
 800c2be:	d912      	bls.n	800c2e6 <_strtod_l+0x206>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e7c3      	b.n	800c24c <_strtod_l+0x16c>
 800c2c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2cc:	785a      	ldrb	r2, [r3, #1]
 800c2ce:	2a30      	cmp	r2, #48	@ 0x30
 800c2d0:	d0f8      	beq.n	800c2c4 <_strtod_l+0x1e4>
 800c2d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c2d6:	2b08      	cmp	r3, #8
 800c2d8:	f200 84d2 	bhi.w	800cc80 <_strtod_l+0xba0>
 800c2dc:	4681      	mov	r9, r0
 800c2de:	2000      	movs	r0, #0
 800c2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2e2:	4605      	mov	r5, r0
 800c2e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2e6:	3a30      	subs	r2, #48	@ 0x30
 800c2e8:	f100 0301 	add.w	r3, r0, #1
 800c2ec:	d02a      	beq.n	800c344 <_strtod_l+0x264>
 800c2ee:	4499      	add	r9, r3
 800c2f0:	eb00 0c05 	add.w	ip, r0, r5
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	210a      	movs	r1, #10
 800c2f8:	4563      	cmp	r3, ip
 800c2fa:	d10d      	bne.n	800c318 <_strtod_l+0x238>
 800c2fc:	1c69      	adds	r1, r5, #1
 800c2fe:	4401      	add	r1, r0
 800c300:	4428      	add	r0, r5
 800c302:	2808      	cmp	r0, #8
 800c304:	dc16      	bgt.n	800c334 <_strtod_l+0x254>
 800c306:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c308:	230a      	movs	r3, #10
 800c30a:	fb03 2300 	mla	r3, r3, r0, r2
 800c30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c310:	2300      	movs	r3, #0
 800c312:	e018      	b.n	800c346 <_strtod_l+0x266>
 800c314:	4638      	mov	r0, r7
 800c316:	e7da      	b.n	800c2ce <_strtod_l+0x1ee>
 800c318:	2b08      	cmp	r3, #8
 800c31a:	f103 0301 	add.w	r3, r3, #1
 800c31e:	dc03      	bgt.n	800c328 <_strtod_l+0x248>
 800c320:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c322:	434e      	muls	r6, r1
 800c324:	960a      	str	r6, [sp, #40]	@ 0x28
 800c326:	e7e7      	b.n	800c2f8 <_strtod_l+0x218>
 800c328:	2b10      	cmp	r3, #16
 800c32a:	bfde      	ittt	le
 800c32c:	9e08      	ldrle	r6, [sp, #32]
 800c32e:	434e      	mulle	r6, r1
 800c330:	9608      	strle	r6, [sp, #32]
 800c332:	e7e1      	b.n	800c2f8 <_strtod_l+0x218>
 800c334:	280f      	cmp	r0, #15
 800c336:	dceb      	bgt.n	800c310 <_strtod_l+0x230>
 800c338:	9808      	ldr	r0, [sp, #32]
 800c33a:	230a      	movs	r3, #10
 800c33c:	fb03 2300 	mla	r3, r3, r0, r2
 800c340:	9308      	str	r3, [sp, #32]
 800c342:	e7e5      	b.n	800c310 <_strtod_l+0x230>
 800c344:	4629      	mov	r1, r5
 800c346:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c348:	460d      	mov	r5, r1
 800c34a:	1c50      	adds	r0, r2, #1
 800c34c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c34e:	4618      	mov	r0, r3
 800c350:	7852      	ldrb	r2, [r2, #1]
 800c352:	e7b1      	b.n	800c2b8 <_strtod_l+0x1d8>
 800c354:	f04f 0900 	mov.w	r9, #0
 800c358:	2301      	movs	r3, #1
 800c35a:	e77c      	b.n	800c256 <_strtod_l+0x176>
 800c35c:	f04f 0c00 	mov.w	ip, #0
 800c360:	1ca2      	adds	r2, r4, #2
 800c362:	9219      	str	r2, [sp, #100]	@ 0x64
 800c364:	78a2      	ldrb	r2, [r4, #2]
 800c366:	e784      	b.n	800c272 <_strtod_l+0x192>
 800c368:	f04f 0c01 	mov.w	ip, #1
 800c36c:	e7f8      	b.n	800c360 <_strtod_l+0x280>
 800c36e:	bf00      	nop
 800c370:	0800e2e0 	.word	0x0800e2e0
 800c374:	0800e2c8 	.word	0x0800e2c8
 800c378:	7ff00000 	.word	0x7ff00000
 800c37c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c37e:	1c51      	adds	r1, r2, #1
 800c380:	9119      	str	r1, [sp, #100]	@ 0x64
 800c382:	7852      	ldrb	r2, [r2, #1]
 800c384:	2a30      	cmp	r2, #48	@ 0x30
 800c386:	d0f9      	beq.n	800c37c <_strtod_l+0x29c>
 800c388:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c38c:	2908      	cmp	r1, #8
 800c38e:	f63f af76 	bhi.w	800c27e <_strtod_l+0x19e>
 800c392:	3a30      	subs	r2, #48	@ 0x30
 800c394:	f04f 080a 	mov.w	r8, #10
 800c398:	920e      	str	r2, [sp, #56]	@ 0x38
 800c39a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c39c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c39e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3a0:	1c56      	adds	r6, r2, #1
 800c3a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800c3a4:	7852      	ldrb	r2, [r2, #1]
 800c3a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c3aa:	f1be 0f09 	cmp.w	lr, #9
 800c3ae:	d939      	bls.n	800c424 <_strtod_l+0x344>
 800c3b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c3b6:	1a76      	subs	r6, r6, r1
 800c3b8:	2e08      	cmp	r6, #8
 800c3ba:	dc03      	bgt.n	800c3c4 <_strtod_l+0x2e4>
 800c3bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3be:	4588      	cmp	r8, r1
 800c3c0:	bfa8      	it	ge
 800c3c2:	4688      	movge	r8, r1
 800c3c4:	f1bc 0f00 	cmp.w	ip, #0
 800c3c8:	d001      	beq.n	800c3ce <_strtod_l+0x2ee>
 800c3ca:	f1c8 0800 	rsb	r8, r8, #0
 800c3ce:	2d00      	cmp	r5, #0
 800c3d0:	d14e      	bne.n	800c470 <_strtod_l+0x390>
 800c3d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3d4:	4308      	orrs	r0, r1
 800c3d6:	f47f aebc 	bne.w	800c152 <_strtod_l+0x72>
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f47f aed4 	bne.w	800c188 <_strtod_l+0xa8>
 800c3e0:	2a69      	cmp	r2, #105	@ 0x69
 800c3e2:	d028      	beq.n	800c436 <_strtod_l+0x356>
 800c3e4:	dc25      	bgt.n	800c432 <_strtod_l+0x352>
 800c3e6:	2a49      	cmp	r2, #73	@ 0x49
 800c3e8:	d025      	beq.n	800c436 <_strtod_l+0x356>
 800c3ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800c3ec:	f47f aecc 	bne.w	800c188 <_strtod_l+0xa8>
 800c3f0:	499b      	ldr	r1, [pc, #620]	@ (800c660 <_strtod_l+0x580>)
 800c3f2:	a819      	add	r0, sp, #100	@ 0x64
 800c3f4:	f001 fbc0 	bl	800db78 <__match>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	f43f aec5 	beq.w	800c188 <_strtod_l+0xa8>
 800c3fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b28      	cmp	r3, #40	@ 0x28
 800c404:	d12e      	bne.n	800c464 <_strtod_l+0x384>
 800c406:	aa1c      	add	r2, sp, #112	@ 0x70
 800c408:	4996      	ldr	r1, [pc, #600]	@ (800c664 <_strtod_l+0x584>)
 800c40a:	a819      	add	r0, sp, #100	@ 0x64
 800c40c:	f001 fbc8 	bl	800dba0 <__hexnan>
 800c410:	2805      	cmp	r0, #5
 800c412:	d127      	bne.n	800c464 <_strtod_l+0x384>
 800c414:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c416:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c41a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c41e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c422:	e696      	b.n	800c152 <_strtod_l+0x72>
 800c424:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c426:	fb08 2101 	mla	r1, r8, r1, r2
 800c42a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c42e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c430:	e7b5      	b.n	800c39e <_strtod_l+0x2be>
 800c432:	2a6e      	cmp	r2, #110	@ 0x6e
 800c434:	e7da      	b.n	800c3ec <_strtod_l+0x30c>
 800c436:	498c      	ldr	r1, [pc, #560]	@ (800c668 <_strtod_l+0x588>)
 800c438:	a819      	add	r0, sp, #100	@ 0x64
 800c43a:	f001 fb9d 	bl	800db78 <__match>
 800c43e:	2800      	cmp	r0, #0
 800c440:	f43f aea2 	beq.w	800c188 <_strtod_l+0xa8>
 800c444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c446:	a819      	add	r0, sp, #100	@ 0x64
 800c448:	4988      	ldr	r1, [pc, #544]	@ (800c66c <_strtod_l+0x58c>)
 800c44a:	3b01      	subs	r3, #1
 800c44c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c44e:	f001 fb93 	bl	800db78 <__match>
 800c452:	b910      	cbnz	r0, 800c45a <_strtod_l+0x37a>
 800c454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c456:	3301      	adds	r3, #1
 800c458:	9319      	str	r3, [sp, #100]	@ 0x64
 800c45a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c67c <_strtod_l+0x59c>
 800c45e:	f04f 0a00 	mov.w	sl, #0
 800c462:	e676      	b.n	800c152 <_strtod_l+0x72>
 800c464:	4882      	ldr	r0, [pc, #520]	@ (800c670 <_strtod_l+0x590>)
 800c466:	f001 f8c7 	bl	800d5f8 <nan>
 800c46a:	ec5b ab10 	vmov	sl, fp, d0
 800c46e:	e670      	b.n	800c152 <_strtod_l+0x72>
 800c470:	eba8 0309 	sub.w	r3, r8, r9
 800c474:	2f00      	cmp	r7, #0
 800c476:	bf08      	it	eq
 800c478:	462f      	moveq	r7, r5
 800c47a:	2d10      	cmp	r5, #16
 800c47c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c47e:	462c      	mov	r4, r5
 800c480:	9309      	str	r3, [sp, #36]	@ 0x24
 800c482:	bfa8      	it	ge
 800c484:	2410      	movge	r4, #16
 800c486:	f7f4 f841 	bl	800050c <__aeabi_ui2d>
 800c48a:	2d09      	cmp	r5, #9
 800c48c:	4682      	mov	sl, r0
 800c48e:	468b      	mov	fp, r1
 800c490:	dc13      	bgt.n	800c4ba <_strtod_l+0x3da>
 800c492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c494:	2b00      	cmp	r3, #0
 800c496:	f43f ae5c 	beq.w	800c152 <_strtod_l+0x72>
 800c49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c49c:	dd78      	ble.n	800c590 <_strtod_l+0x4b0>
 800c49e:	2b16      	cmp	r3, #22
 800c4a0:	dc5f      	bgt.n	800c562 <_strtod_l+0x482>
 800c4a2:	4974      	ldr	r1, [pc, #464]	@ (800c674 <_strtod_l+0x594>)
 800c4a4:	4652      	mov	r2, sl
 800c4a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4aa:	465b      	mov	r3, fp
 800c4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4b0:	f7f4 f8a6 	bl	8000600 <__aeabi_dmul>
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	468b      	mov	fp, r1
 800c4b8:	e64b      	b.n	800c152 <_strtod_l+0x72>
 800c4ba:	4b6e      	ldr	r3, [pc, #440]	@ (800c674 <_strtod_l+0x594>)
 800c4bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c4c4:	f7f4 f89c 	bl	8000600 <__aeabi_dmul>
 800c4c8:	4682      	mov	sl, r0
 800c4ca:	468b      	mov	fp, r1
 800c4cc:	9808      	ldr	r0, [sp, #32]
 800c4ce:	f7f4 f81d 	bl	800050c <__aeabi_ui2d>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4650      	mov	r0, sl
 800c4d8:	4659      	mov	r1, fp
 800c4da:	f7f3 fedb 	bl	8000294 <__adddf3>
 800c4de:	2d0f      	cmp	r5, #15
 800c4e0:	4682      	mov	sl, r0
 800c4e2:	468b      	mov	fp, r1
 800c4e4:	ddd5      	ble.n	800c492 <_strtod_l+0x3b2>
 800c4e6:	1b2c      	subs	r4, r5, r4
 800c4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ea:	441c      	add	r4, r3
 800c4ec:	2c00      	cmp	r4, #0
 800c4ee:	f340 8096 	ble.w	800c61e <_strtod_l+0x53e>
 800c4f2:	f014 030f 	ands.w	r3, r4, #15
 800c4f6:	d00a      	beq.n	800c50e <_strtod_l+0x42e>
 800c4f8:	495e      	ldr	r1, [pc, #376]	@ (800c674 <_strtod_l+0x594>)
 800c4fa:	4652      	mov	r2, sl
 800c4fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c500:	465b      	mov	r3, fp
 800c502:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c506:	f7f4 f87b 	bl	8000600 <__aeabi_dmul>
 800c50a:	4682      	mov	sl, r0
 800c50c:	468b      	mov	fp, r1
 800c50e:	f034 040f 	bics.w	r4, r4, #15
 800c512:	d073      	beq.n	800c5fc <_strtod_l+0x51c>
 800c514:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c518:	dd48      	ble.n	800c5ac <_strtod_l+0x4cc>
 800c51a:	2400      	movs	r4, #0
 800c51c:	46a0      	mov	r8, r4
 800c51e:	46a1      	mov	r9, r4
 800c520:	940a      	str	r4, [sp, #40]	@ 0x28
 800c522:	2322      	movs	r3, #34	@ 0x22
 800c524:	9a05      	ldr	r2, [sp, #20]
 800c526:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c67c <_strtod_l+0x59c>
 800c52a:	f04f 0a00 	mov.w	sl, #0
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c532:	2b00      	cmp	r3, #0
 800c534:	f43f ae0d 	beq.w	800c152 <_strtod_l+0x72>
 800c538:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c53a:	9805      	ldr	r0, [sp, #20]
 800c53c:	f7ff f934 	bl	800b7a8 <_Bfree>
 800c540:	4649      	mov	r1, r9
 800c542:	9805      	ldr	r0, [sp, #20]
 800c544:	f7ff f930 	bl	800b7a8 <_Bfree>
 800c548:	4641      	mov	r1, r8
 800c54a:	9805      	ldr	r0, [sp, #20]
 800c54c:	f7ff f92c 	bl	800b7a8 <_Bfree>
 800c550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c552:	9805      	ldr	r0, [sp, #20]
 800c554:	f7ff f928 	bl	800b7a8 <_Bfree>
 800c558:	4621      	mov	r1, r4
 800c55a:	9805      	ldr	r0, [sp, #20]
 800c55c:	f7ff f924 	bl	800b7a8 <_Bfree>
 800c560:	e5f7      	b.n	800c152 <_strtod_l+0x72>
 800c562:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c568:	4293      	cmp	r3, r2
 800c56a:	dbbc      	blt.n	800c4e6 <_strtod_l+0x406>
 800c56c:	f1c5 050f 	rsb	r5, r5, #15
 800c570:	4c40      	ldr	r4, [pc, #256]	@ (800c674 <_strtod_l+0x594>)
 800c572:	4652      	mov	r2, sl
 800c574:	465b      	mov	r3, fp
 800c576:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c57a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c57e:	f7f4 f83f 	bl	8000600 <__aeabi_dmul>
 800c582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c584:	1b5d      	subs	r5, r3, r5
 800c586:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c58a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c58e:	e78f      	b.n	800c4b0 <_strtod_l+0x3d0>
 800c590:	3316      	adds	r3, #22
 800c592:	dba8      	blt.n	800c4e6 <_strtod_l+0x406>
 800c594:	eba9 0808 	sub.w	r8, r9, r8
 800c598:	4b36      	ldr	r3, [pc, #216]	@ (800c674 <_strtod_l+0x594>)
 800c59a:	4650      	mov	r0, sl
 800c59c:	4659      	mov	r1, fp
 800c59e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c5a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c5a6:	f7f4 f955 	bl	8000854 <__aeabi_ddiv>
 800c5aa:	e783      	b.n	800c4b4 <_strtod_l+0x3d4>
 800c5ac:	4b32      	ldr	r3, [pc, #200]	@ (800c678 <_strtod_l+0x598>)
 800c5ae:	1124      	asrs	r4, r4, #4
 800c5b0:	4650      	mov	r0, sl
 800c5b2:	4659      	mov	r1, fp
 800c5b4:	9308      	str	r3, [sp, #32]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	461e      	mov	r6, r3
 800c5ba:	2c01      	cmp	r4, #1
 800c5bc:	dc21      	bgt.n	800c602 <_strtod_l+0x522>
 800c5be:	b10b      	cbz	r3, 800c5c4 <_strtod_l+0x4e4>
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	468b      	mov	fp, r1
 800c5c4:	492c      	ldr	r1, [pc, #176]	@ (800c678 <_strtod_l+0x598>)
 800c5c6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c5d0:	465b      	mov	r3, fp
 800c5d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5d6:	f7f4 f813 	bl	8000600 <__aeabi_dmul>
 800c5da:	4b28      	ldr	r3, [pc, #160]	@ (800c67c <_strtod_l+0x59c>)
 800c5dc:	460a      	mov	r2, r1
 800c5de:	4682      	mov	sl, r0
 800c5e0:	400b      	ands	r3, r1
 800c5e2:	4927      	ldr	r1, [pc, #156]	@ (800c680 <_strtod_l+0x5a0>)
 800c5e4:	428b      	cmp	r3, r1
 800c5e6:	d898      	bhi.n	800c51a <_strtod_l+0x43a>
 800c5e8:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c5ec:	428b      	cmp	r3, r1
 800c5ee:	bf86      	itte	hi
 800c5f0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c684 <_strtod_l+0x5a4>
 800c5f4:	f04f 3aff 	movhi.w	sl, #4294967295
 800c5f8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	9308      	str	r3, [sp, #32]
 800c600:	e07a      	b.n	800c6f8 <_strtod_l+0x618>
 800c602:	07e2      	lsls	r2, r4, #31
 800c604:	d505      	bpl.n	800c612 <_strtod_l+0x532>
 800c606:	9b08      	ldr	r3, [sp, #32]
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	f7f3 fff8 	bl	8000600 <__aeabi_dmul>
 800c610:	2301      	movs	r3, #1
 800c612:	9a08      	ldr	r2, [sp, #32]
 800c614:	3601      	adds	r6, #1
 800c616:	1064      	asrs	r4, r4, #1
 800c618:	3208      	adds	r2, #8
 800c61a:	9208      	str	r2, [sp, #32]
 800c61c:	e7cd      	b.n	800c5ba <_strtod_l+0x4da>
 800c61e:	d0ed      	beq.n	800c5fc <_strtod_l+0x51c>
 800c620:	4264      	negs	r4, r4
 800c622:	f014 020f 	ands.w	r2, r4, #15
 800c626:	d00a      	beq.n	800c63e <_strtod_l+0x55e>
 800c628:	4b12      	ldr	r3, [pc, #72]	@ (800c674 <_strtod_l+0x594>)
 800c62a:	4650      	mov	r0, sl
 800c62c:	4659      	mov	r1, fp
 800c62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f7f4 f90d 	bl	8000854 <__aeabi_ddiv>
 800c63a:	4682      	mov	sl, r0
 800c63c:	468b      	mov	fp, r1
 800c63e:	1124      	asrs	r4, r4, #4
 800c640:	d0dc      	beq.n	800c5fc <_strtod_l+0x51c>
 800c642:	2c1f      	cmp	r4, #31
 800c644:	dd20      	ble.n	800c688 <_strtod_l+0x5a8>
 800c646:	2400      	movs	r4, #0
 800c648:	46a0      	mov	r8, r4
 800c64a:	46a1      	mov	r9, r4
 800c64c:	940a      	str	r4, [sp, #40]	@ 0x28
 800c64e:	2322      	movs	r3, #34	@ 0x22
 800c650:	9a05      	ldr	r2, [sp, #20]
 800c652:	f04f 0a00 	mov.w	sl, #0
 800c656:	f04f 0b00 	mov.w	fp, #0
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	e768      	b.n	800c530 <_strtod_l+0x450>
 800c65e:	bf00      	nop
 800c660:	0800e0b5 	.word	0x0800e0b5
 800c664:	0800e2cc 	.word	0x0800e2cc
 800c668:	0800e0ad 	.word	0x0800e0ad
 800c66c:	0800e0e4 	.word	0x0800e0e4
 800c670:	0800e475 	.word	0x0800e475
 800c674:	0800e200 	.word	0x0800e200
 800c678:	0800e1d8 	.word	0x0800e1d8
 800c67c:	7ff00000 	.word	0x7ff00000
 800c680:	7ca00000 	.word	0x7ca00000
 800c684:	7fefffff 	.word	0x7fefffff
 800c688:	f014 0310 	ands.w	r3, r4, #16
 800c68c:	4650      	mov	r0, sl
 800c68e:	4659      	mov	r1, fp
 800c690:	4ea9      	ldr	r6, [pc, #676]	@ (800c938 <_strtod_l+0x858>)
 800c692:	bf18      	it	ne
 800c694:	236a      	movne	r3, #106	@ 0x6a
 800c696:	9308      	str	r3, [sp, #32]
 800c698:	2300      	movs	r3, #0
 800c69a:	07e2      	lsls	r2, r4, #31
 800c69c:	d504      	bpl.n	800c6a8 <_strtod_l+0x5c8>
 800c69e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6a2:	f7f3 ffad 	bl	8000600 <__aeabi_dmul>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	1064      	asrs	r4, r4, #1
 800c6aa:	f106 0608 	add.w	r6, r6, #8
 800c6ae:	d1f4      	bne.n	800c69a <_strtod_l+0x5ba>
 800c6b0:	b10b      	cbz	r3, 800c6b6 <_strtod_l+0x5d6>
 800c6b2:	4682      	mov	sl, r0
 800c6b4:	468b      	mov	fp, r1
 800c6b6:	9b08      	ldr	r3, [sp, #32]
 800c6b8:	b1b3      	cbz	r3, 800c6e8 <_strtod_l+0x608>
 800c6ba:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c6be:	4659      	mov	r1, fp
 800c6c0:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	dd0f      	ble.n	800c6e8 <_strtod_l+0x608>
 800c6c8:	2b1f      	cmp	r3, #31
 800c6ca:	dd55      	ble.n	800c778 <_strtod_l+0x698>
 800c6cc:	2b34      	cmp	r3, #52	@ 0x34
 800c6ce:	f04f 0a00 	mov.w	sl, #0
 800c6d2:	bfdb      	ittet	le
 800c6d4:	f04f 33ff 	movle.w	r3, #4294967295
 800c6d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c6dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c6e0:	4093      	lslle	r3, r2
 800c6e2:	bfd8      	it	le
 800c6e4:	ea03 0b01 	andle.w	fp, r3, r1
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	4650      	mov	r0, sl
 800c6ee:	4659      	mov	r1, fp
 800c6f0:	f7f4 f9ee 	bl	8000ad0 <__aeabi_dcmpeq>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d1a6      	bne.n	800c646 <_strtod_l+0x566>
 800c6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6fa:	463a      	mov	r2, r7
 800c6fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	462b      	mov	r3, r5
 800c702:	9805      	ldr	r0, [sp, #20]
 800c704:	f7ff f8ba 	bl	800b87c <__s2b>
 800c708:	900a      	str	r0, [sp, #40]	@ 0x28
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f43f af05 	beq.w	800c51a <_strtod_l+0x43a>
 800c710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c712:	eba9 0308 	sub.w	r3, r9, r8
 800c716:	2400      	movs	r4, #0
 800c718:	2a00      	cmp	r2, #0
 800c71a:	46a0      	mov	r8, r4
 800c71c:	bfa8      	it	ge
 800c71e:	2300      	movge	r3, #0
 800c720:	9312      	str	r3, [sp, #72]	@ 0x48
 800c722:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c726:	9316      	str	r3, [sp, #88]	@ 0x58
 800c728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c72a:	9805      	ldr	r0, [sp, #20]
 800c72c:	6859      	ldr	r1, [r3, #4]
 800c72e:	f7fe fffb 	bl	800b728 <_Balloc>
 800c732:	4681      	mov	r9, r0
 800c734:	2800      	cmp	r0, #0
 800c736:	f43f aef4 	beq.w	800c522 <_strtod_l+0x442>
 800c73a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c73c:	300c      	adds	r0, #12
 800c73e:	691a      	ldr	r2, [r3, #16]
 800c740:	f103 010c 	add.w	r1, r3, #12
 800c744:	3202      	adds	r2, #2
 800c746:	0092      	lsls	r2, r2, #2
 800c748:	f000 ff46 	bl	800d5d8 <memcpy>
 800c74c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c74e:	a91b      	add	r1, sp, #108	@ 0x6c
 800c750:	9805      	ldr	r0, [sp, #20]
 800c752:	ec4b ab10 	vmov	d0, sl, fp
 800c756:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c75a:	f7ff fbd3 	bl	800bf04 <__d2b>
 800c75e:	901a      	str	r0, [sp, #104]	@ 0x68
 800c760:	2800      	cmp	r0, #0
 800c762:	f43f aede 	beq.w	800c522 <_strtod_l+0x442>
 800c766:	2101      	movs	r1, #1
 800c768:	9805      	ldr	r0, [sp, #20]
 800c76a:	f7ff f91d 	bl	800b9a8 <__i2b>
 800c76e:	4680      	mov	r8, r0
 800c770:	b948      	cbnz	r0, 800c786 <_strtod_l+0x6a6>
 800c772:	f04f 0800 	mov.w	r8, #0
 800c776:	e6d4      	b.n	800c522 <_strtod_l+0x442>
 800c778:	f04f 32ff 	mov.w	r2, #4294967295
 800c77c:	fa02 f303 	lsl.w	r3, r2, r3
 800c780:	ea03 0a0a 	and.w	sl, r3, sl
 800c784:	e7b0      	b.n	800c6e8 <_strtod_l+0x608>
 800c786:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c788:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	bfa9      	itett	ge
 800c78e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c790:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c792:	18ef      	addge	r7, r5, r3
 800c794:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c796:	bfb8      	it	lt
 800c798:	1b5e      	sublt	r6, r3, r5
 800c79a:	9b08      	ldr	r3, [sp, #32]
 800c79c:	bfb8      	it	lt
 800c79e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c7a0:	1aed      	subs	r5, r5, r3
 800c7a2:	4b66      	ldr	r3, [pc, #408]	@ (800c93c <_strtod_l+0x85c>)
 800c7a4:	4415      	add	r5, r2
 800c7a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c7aa:	3d01      	subs	r5, #1
 800c7ac:	429d      	cmp	r5, r3
 800c7ae:	da4f      	bge.n	800c850 <_strtod_l+0x770>
 800c7b0:	1b5b      	subs	r3, r3, r5
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	2b1f      	cmp	r3, #31
 800c7b6:	eba2 0203 	sub.w	r2, r2, r3
 800c7ba:	dc3d      	bgt.n	800c838 <_strtod_l+0x758>
 800c7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7c6:	18bd      	adds	r5, r7, r2
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	4416      	add	r6, r2
 800c7cc:	42af      	cmp	r7, r5
 800c7ce:	441e      	add	r6, r3
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	bfa8      	it	ge
 800c7d4:	462b      	movge	r3, r5
 800c7d6:	42b3      	cmp	r3, r6
 800c7d8:	bfa8      	it	ge
 800c7da:	4633      	movge	r3, r6
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bfc2      	ittt	gt
 800c7e0:	1aed      	subgt	r5, r5, r3
 800c7e2:	1af6      	subgt	r6, r6, r3
 800c7e4:	1aff      	subgt	r7, r7, r3
 800c7e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dd16      	ble.n	800c81a <_strtod_l+0x73a>
 800c7ec:	4641      	mov	r1, r8
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	9805      	ldr	r0, [sp, #20]
 800c7f2:	f7ff f999 	bl	800bb28 <__pow5mult>
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d0ba      	beq.n	800c772 <_strtod_l+0x692>
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c800:	9805      	ldr	r0, [sp, #20]
 800c802:	f7ff f8e7 	bl	800b9d4 <__multiply>
 800c806:	900e      	str	r0, [sp, #56]	@ 0x38
 800c808:	2800      	cmp	r0, #0
 800c80a:	f43f ae8a 	beq.w	800c522 <_strtod_l+0x442>
 800c80e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c810:	9805      	ldr	r0, [sp, #20]
 800c812:	f7fe ffc9 	bl	800b7a8 <_Bfree>
 800c816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c818:	931a      	str	r3, [sp, #104]	@ 0x68
 800c81a:	2d00      	cmp	r5, #0
 800c81c:	dc1d      	bgt.n	800c85a <_strtod_l+0x77a>
 800c81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c820:	2b00      	cmp	r3, #0
 800c822:	dd23      	ble.n	800c86c <_strtod_l+0x78c>
 800c824:	4649      	mov	r1, r9
 800c826:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c828:	9805      	ldr	r0, [sp, #20]
 800c82a:	f7ff f97d 	bl	800bb28 <__pow5mult>
 800c82e:	4681      	mov	r9, r0
 800c830:	b9e0      	cbnz	r0, 800c86c <_strtod_l+0x78c>
 800c832:	f04f 0900 	mov.w	r9, #0
 800c836:	e674      	b.n	800c522 <_strtod_l+0x442>
 800c838:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c83c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c83e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c842:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c846:	35e2      	adds	r5, #226	@ 0xe2
 800c848:	fa01 f305 	lsl.w	r3, r1, r5
 800c84c:	9310      	str	r3, [sp, #64]	@ 0x40
 800c84e:	e7ba      	b.n	800c7c6 <_strtod_l+0x6e6>
 800c850:	2300      	movs	r3, #0
 800c852:	9310      	str	r3, [sp, #64]	@ 0x40
 800c854:	2301      	movs	r3, #1
 800c856:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c858:	e7b5      	b.n	800c7c6 <_strtod_l+0x6e6>
 800c85a:	462a      	mov	r2, r5
 800c85c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c85e:	9805      	ldr	r0, [sp, #20]
 800c860:	f7ff f9bc 	bl	800bbdc <__lshift>
 800c864:	901a      	str	r0, [sp, #104]	@ 0x68
 800c866:	2800      	cmp	r0, #0
 800c868:	d1d9      	bne.n	800c81e <_strtod_l+0x73e>
 800c86a:	e65a      	b.n	800c522 <_strtod_l+0x442>
 800c86c:	2e00      	cmp	r6, #0
 800c86e:	dd07      	ble.n	800c880 <_strtod_l+0x7a0>
 800c870:	4649      	mov	r1, r9
 800c872:	4632      	mov	r2, r6
 800c874:	9805      	ldr	r0, [sp, #20]
 800c876:	f7ff f9b1 	bl	800bbdc <__lshift>
 800c87a:	4681      	mov	r9, r0
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d0d8      	beq.n	800c832 <_strtod_l+0x752>
 800c880:	2f00      	cmp	r7, #0
 800c882:	dd08      	ble.n	800c896 <_strtod_l+0x7b6>
 800c884:	4641      	mov	r1, r8
 800c886:	463a      	mov	r2, r7
 800c888:	9805      	ldr	r0, [sp, #20]
 800c88a:	f7ff f9a7 	bl	800bbdc <__lshift>
 800c88e:	4680      	mov	r8, r0
 800c890:	2800      	cmp	r0, #0
 800c892:	f43f ae46 	beq.w	800c522 <_strtod_l+0x442>
 800c896:	464a      	mov	r2, r9
 800c898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c89a:	9805      	ldr	r0, [sp, #20]
 800c89c:	f7ff fa26 	bl	800bcec <__mdiff>
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	f43f ae3d 	beq.w	800c522 <_strtod_l+0x442>
 800c8a8:	68c3      	ldr	r3, [r0, #12]
 800c8aa:	4641      	mov	r1, r8
 800c8ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60c3      	str	r3, [r0, #12]
 800c8b2:	f7ff f9ff 	bl	800bcb4 <__mcmp>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	da46      	bge.n	800c948 <_strtod_l+0x868>
 800c8ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8bc:	ea53 030a 	orrs.w	r3, r3, sl
 800c8c0:	d16c      	bne.n	800c99c <_strtod_l+0x8bc>
 800c8c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d168      	bne.n	800c99c <_strtod_l+0x8bc>
 800c8ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8ce:	0d1b      	lsrs	r3, r3, #20
 800c8d0:	051b      	lsls	r3, r3, #20
 800c8d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8d6:	d961      	bls.n	800c99c <_strtod_l+0x8bc>
 800c8d8:	6963      	ldr	r3, [r4, #20]
 800c8da:	b913      	cbnz	r3, 800c8e2 <_strtod_l+0x802>
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	dd5c      	ble.n	800c99c <_strtod_l+0x8bc>
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	9805      	ldr	r0, [sp, #20]
 800c8e8:	f7ff f978 	bl	800bbdc <__lshift>
 800c8ec:	4641      	mov	r1, r8
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	f7ff f9e0 	bl	800bcb4 <__mcmp>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	dd51      	ble.n	800c99c <_strtod_l+0x8bc>
 800c8f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8fc:	9a08      	ldr	r2, [sp, #32]
 800c8fe:	0d1b      	lsrs	r3, r3, #20
 800c900:	051b      	lsls	r3, r3, #20
 800c902:	2a00      	cmp	r2, #0
 800c904:	d06b      	beq.n	800c9de <_strtod_l+0x8fe>
 800c906:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c90a:	d868      	bhi.n	800c9de <_strtod_l+0x8fe>
 800c90c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c910:	f67f ae9d 	bls.w	800c64e <_strtod_l+0x56e>
 800c914:	4b0a      	ldr	r3, [pc, #40]	@ (800c940 <_strtod_l+0x860>)
 800c916:	4650      	mov	r0, sl
 800c918:	4659      	mov	r1, fp
 800c91a:	2200      	movs	r2, #0
 800c91c:	f7f3 fe70 	bl	8000600 <__aeabi_dmul>
 800c920:	4b08      	ldr	r3, [pc, #32]	@ (800c944 <_strtod_l+0x864>)
 800c922:	4682      	mov	sl, r0
 800c924:	468b      	mov	fp, r1
 800c926:	400b      	ands	r3, r1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f47f ae05 	bne.w	800c538 <_strtod_l+0x458>
 800c92e:	2322      	movs	r3, #34	@ 0x22
 800c930:	9a05      	ldr	r2, [sp, #20]
 800c932:	6013      	str	r3, [r2, #0]
 800c934:	e600      	b.n	800c538 <_strtod_l+0x458>
 800c936:	bf00      	nop
 800c938:	0800e2f8 	.word	0x0800e2f8
 800c93c:	fffffc02 	.word	0xfffffc02
 800c940:	39500000 	.word	0x39500000
 800c944:	7ff00000 	.word	0x7ff00000
 800c948:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c94c:	d165      	bne.n	800ca1a <_strtod_l+0x93a>
 800c94e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c950:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c954:	b35a      	cbz	r2, 800c9ae <_strtod_l+0x8ce>
 800c956:	4a9e      	ldr	r2, [pc, #632]	@ (800cbd0 <_strtod_l+0xaf0>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d12b      	bne.n	800c9b4 <_strtod_l+0x8d4>
 800c95c:	9b08      	ldr	r3, [sp, #32]
 800c95e:	4651      	mov	r1, sl
 800c960:	b303      	cbz	r3, 800c9a4 <_strtod_l+0x8c4>
 800c962:	465a      	mov	r2, fp
 800c964:	4b9b      	ldr	r3, [pc, #620]	@ (800cbd4 <_strtod_l+0xaf4>)
 800c966:	4013      	ands	r3, r2
 800c968:	f04f 32ff 	mov.w	r2, #4294967295
 800c96c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c970:	d81b      	bhi.n	800c9aa <_strtod_l+0x8ca>
 800c972:	0d1b      	lsrs	r3, r3, #20
 800c974:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c978:	fa02 f303 	lsl.w	r3, r2, r3
 800c97c:	4299      	cmp	r1, r3
 800c97e:	d119      	bne.n	800c9b4 <_strtod_l+0x8d4>
 800c980:	4b95      	ldr	r3, [pc, #596]	@ (800cbd8 <_strtod_l+0xaf8>)
 800c982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c984:	429a      	cmp	r2, r3
 800c986:	d102      	bne.n	800c98e <_strtod_l+0x8ae>
 800c988:	3101      	adds	r1, #1
 800c98a:	f43f adca 	beq.w	800c522 <_strtod_l+0x442>
 800c98e:	4b91      	ldr	r3, [pc, #580]	@ (800cbd4 <_strtod_l+0xaf4>)
 800c990:	f04f 0a00 	mov.w	sl, #0
 800c994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c996:	401a      	ands	r2, r3
 800c998:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c99c:	9b08      	ldr	r3, [sp, #32]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1b8      	bne.n	800c914 <_strtod_l+0x834>
 800c9a2:	e5c9      	b.n	800c538 <_strtod_l+0x458>
 800c9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a8:	e7e8      	b.n	800c97c <_strtod_l+0x89c>
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	e7e6      	b.n	800c97c <_strtod_l+0x89c>
 800c9ae:	ea53 030a 	orrs.w	r3, r3, sl
 800c9b2:	d0a1      	beq.n	800c8f8 <_strtod_l+0x818>
 800c9b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9b6:	b1db      	cbz	r3, 800c9f0 <_strtod_l+0x910>
 800c9b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9ba:	4213      	tst	r3, r2
 800c9bc:	d0ee      	beq.n	800c99c <_strtod_l+0x8bc>
 800c9be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9c0:	4650      	mov	r0, sl
 800c9c2:	9a08      	ldr	r2, [sp, #32]
 800c9c4:	4659      	mov	r1, fp
 800c9c6:	b1bb      	cbz	r3, 800c9f8 <_strtod_l+0x918>
 800c9c8:	f7ff fb6a 	bl	800c0a0 <sulp>
 800c9cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9d0:	ec53 2b10 	vmov	r2, r3, d0
 800c9d4:	f7f3 fc5e 	bl	8000294 <__adddf3>
 800c9d8:	4682      	mov	sl, r0
 800c9da:	468b      	mov	fp, r1
 800c9dc:	e7de      	b.n	800c99c <_strtod_l+0x8bc>
 800c9de:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c9e2:	f04f 3aff 	mov.w	sl, #4294967295
 800c9e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c9ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c9ee:	e7d5      	b.n	800c99c <_strtod_l+0x8bc>
 800c9f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9f2:	ea13 0f0a 	tst.w	r3, sl
 800c9f6:	e7e1      	b.n	800c9bc <_strtod_l+0x8dc>
 800c9f8:	f7ff fb52 	bl	800c0a0 <sulp>
 800c9fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca00:	ec53 2b10 	vmov	r2, r3, d0
 800ca04:	f7f3 fc44 	bl	8000290 <__aeabi_dsub>
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	468b      	mov	fp, r1
 800ca10:	f7f4 f85e 	bl	8000ad0 <__aeabi_dcmpeq>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d0c1      	beq.n	800c99c <_strtod_l+0x8bc>
 800ca18:	e619      	b.n	800c64e <_strtod_l+0x56e>
 800ca1a:	4641      	mov	r1, r8
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f7ff fac9 	bl	800bfb4 <__ratio>
 800ca22:	2200      	movs	r2, #0
 800ca24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca28:	ec57 6b10 	vmov	r6, r7, d0
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	4639      	mov	r1, r7
 800ca30:	f7f4 f862 	bl	8000af8 <__aeabi_dcmple>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d06f      	beq.n	800cb18 <_strtod_l+0xa38>
 800ca38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d17a      	bne.n	800cb34 <_strtod_l+0xa54>
 800ca3e:	f1ba 0f00 	cmp.w	sl, #0
 800ca42:	d158      	bne.n	800caf6 <_strtod_l+0xa16>
 800ca44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d15a      	bne.n	800cb04 <_strtod_l+0xa24>
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4b62      	ldr	r3, [pc, #392]	@ (800cbdc <_strtod_l+0xafc>)
 800ca52:	4630      	mov	r0, r6
 800ca54:	4639      	mov	r1, r7
 800ca56:	f7f4 f845 	bl	8000ae4 <__aeabi_dcmplt>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d159      	bne.n	800cb12 <_strtod_l+0xa32>
 800ca5e:	4630      	mov	r0, r6
 800ca60:	4639      	mov	r1, r7
 800ca62:	2200      	movs	r2, #0
 800ca64:	4b5e      	ldr	r3, [pc, #376]	@ (800cbe0 <_strtod_l+0xb00>)
 800ca66:	f7f3 fdcb 	bl	8000600 <__aeabi_dmul>
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca72:	9606      	str	r6, [sp, #24]
 800ca74:	9307      	str	r3, [sp, #28]
 800ca76:	4d57      	ldr	r5, [pc, #348]	@ (800cbd4 <_strtod_l+0xaf4>)
 800ca78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca82:	401d      	ands	r5, r3
 800ca84:	4b57      	ldr	r3, [pc, #348]	@ (800cbe4 <_strtod_l+0xb04>)
 800ca86:	429d      	cmp	r5, r3
 800ca88:	f040 80b0 	bne.w	800cbec <_strtod_l+0xb0c>
 800ca8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca8e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ca92:	ec4b ab10 	vmov	d0, sl, fp
 800ca96:	f7ff f9c1 	bl	800be1c <__ulp>
 800ca9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca9e:	ec51 0b10 	vmov	r0, r1, d0
 800caa2:	f7f3 fdad 	bl	8000600 <__aeabi_dmul>
 800caa6:	4652      	mov	r2, sl
 800caa8:	465b      	mov	r3, fp
 800caaa:	f7f3 fbf3 	bl	8000294 <__adddf3>
 800caae:	460b      	mov	r3, r1
 800cab0:	4948      	ldr	r1, [pc, #288]	@ (800cbd4 <_strtod_l+0xaf4>)
 800cab2:	4682      	mov	sl, r0
 800cab4:	4a4c      	ldr	r2, [pc, #304]	@ (800cbe8 <_strtod_l+0xb08>)
 800cab6:	4019      	ands	r1, r3
 800cab8:	4291      	cmp	r1, r2
 800caba:	d942      	bls.n	800cb42 <_strtod_l+0xa62>
 800cabc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cabe:	4b46      	ldr	r3, [pc, #280]	@ (800cbd8 <_strtod_l+0xaf8>)
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d103      	bne.n	800cacc <_strtod_l+0x9ec>
 800cac4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cac6:	3301      	adds	r3, #1
 800cac8:	f43f ad2b 	beq.w	800c522 <_strtod_l+0x442>
 800cacc:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800cbd8 <_strtod_l+0xaf8>
 800cad0:	f04f 3aff 	mov.w	sl, #4294967295
 800cad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cad6:	9805      	ldr	r0, [sp, #20]
 800cad8:	f7fe fe66 	bl	800b7a8 <_Bfree>
 800cadc:	4649      	mov	r1, r9
 800cade:	9805      	ldr	r0, [sp, #20]
 800cae0:	f7fe fe62 	bl	800b7a8 <_Bfree>
 800cae4:	4641      	mov	r1, r8
 800cae6:	9805      	ldr	r0, [sp, #20]
 800cae8:	f7fe fe5e 	bl	800b7a8 <_Bfree>
 800caec:	4621      	mov	r1, r4
 800caee:	9805      	ldr	r0, [sp, #20]
 800caf0:	f7fe fe5a 	bl	800b7a8 <_Bfree>
 800caf4:	e618      	b.n	800c728 <_strtod_l+0x648>
 800caf6:	f1ba 0f01 	cmp.w	sl, #1
 800cafa:	d103      	bne.n	800cb04 <_strtod_l+0xa24>
 800cafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f43f ada5 	beq.w	800c64e <_strtod_l+0x56e>
 800cb04:	2600      	movs	r6, #0
 800cb06:	4f35      	ldr	r7, [pc, #212]	@ (800cbdc <_strtod_l+0xafc>)
 800cb08:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800cbb0 <_strtod_l+0xad0>
 800cb0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb10:	e7b1      	b.n	800ca76 <_strtod_l+0x996>
 800cb12:	2600      	movs	r6, #0
 800cb14:	4f32      	ldr	r7, [pc, #200]	@ (800cbe0 <_strtod_l+0xb00>)
 800cb16:	e7aa      	b.n	800ca6e <_strtod_l+0x98e>
 800cb18:	4b31      	ldr	r3, [pc, #196]	@ (800cbe0 <_strtod_l+0xb00>)
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f7f3 fd6e 	bl	8000600 <__aeabi_dmul>
 800cb24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb26:	4606      	mov	r6, r0
 800cb28:	460f      	mov	r7, r1
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d09f      	beq.n	800ca6e <_strtod_l+0x98e>
 800cb2e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb32:	e7a0      	b.n	800ca76 <_strtod_l+0x996>
 800cb34:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800cbb8 <_strtod_l+0xad8>
 800cb38:	ec57 6b17 	vmov	r6, r7, d7
 800cb3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb40:	e799      	b.n	800ca76 <_strtod_l+0x996>
 800cb42:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb46:	9b08      	ldr	r3, [sp, #32]
 800cb48:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1c1      	bne.n	800cad4 <_strtod_l+0x9f4>
 800cb50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb54:	0d1b      	lsrs	r3, r3, #20
 800cb56:	051b      	lsls	r3, r3, #20
 800cb58:	429d      	cmp	r5, r3
 800cb5a:	d1bb      	bne.n	800cad4 <_strtod_l+0x9f4>
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f7f4 f8ae 	bl	8000cc0 <__aeabi_d2lz>
 800cb64:	f7f3 fd1e 	bl	80005a4 <__aeabi_l2d>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	4639      	mov	r1, r7
 800cb70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb74:	f7f3 fb8c 	bl	8000290 <__aeabi_dsub>
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	ea46 060a 	orr.w	r6, r6, sl
 800cb80:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb86:	431e      	orrs	r6, r3
 800cb88:	d06d      	beq.n	800cc66 <_strtod_l+0xb86>
 800cb8a:	a30d      	add	r3, pc, #52	@ (adr r3, 800cbc0 <_strtod_l+0xae0>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f7f3 ffa8 	bl	8000ae4 <__aeabi_dcmplt>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	f47f accf 	bne.w	800c538 <_strtod_l+0x458>
 800cb9a:	a30b      	add	r3, pc, #44	@ (adr r3, 800cbc8 <_strtod_l+0xae8>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cba4:	f7f3 ffbc 	bl	8000b20 <__aeabi_dcmpgt>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d093      	beq.n	800cad4 <_strtod_l+0x9f4>
 800cbac:	e4c4      	b.n	800c538 <_strtod_l+0x458>
 800cbae:	bf00      	nop
 800cbb0:	00000000 	.word	0x00000000
 800cbb4:	bff00000 	.word	0xbff00000
 800cbb8:	00000000 	.word	0x00000000
 800cbbc:	3ff00000 	.word	0x3ff00000
 800cbc0:	94a03595 	.word	0x94a03595
 800cbc4:	3fdfffff 	.word	0x3fdfffff
 800cbc8:	35afe535 	.word	0x35afe535
 800cbcc:	3fe00000 	.word	0x3fe00000
 800cbd0:	000fffff 	.word	0x000fffff
 800cbd4:	7ff00000 	.word	0x7ff00000
 800cbd8:	7fefffff 	.word	0x7fefffff
 800cbdc:	3ff00000 	.word	0x3ff00000
 800cbe0:	3fe00000 	.word	0x3fe00000
 800cbe4:	7fe00000 	.word	0x7fe00000
 800cbe8:	7c9fffff 	.word	0x7c9fffff
 800cbec:	9b08      	ldr	r3, [sp, #32]
 800cbee:	b323      	cbz	r3, 800cc3a <_strtod_l+0xb5a>
 800cbf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cbf4:	d821      	bhi.n	800cc3a <_strtod_l+0xb5a>
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	a327      	add	r3, pc, #156	@ (adr r3, 800cc98 <_strtod_l+0xbb8>)
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	f7f3 ff7a 	bl	8000af8 <__aeabi_dcmple>
 800cc04:	b1a0      	cbz	r0, 800cc30 <_strtod_l+0xb50>
 800cc06:	4639      	mov	r1, r7
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f7f3 ffd1 	bl	8000bb0 <__aeabi_d2uiz>
 800cc0e:	2801      	cmp	r0, #1
 800cc10:	bf38      	it	cc
 800cc12:	2001      	movcc	r0, #1
 800cc14:	f7f3 fc7a 	bl	800050c <__aeabi_ui2d>
 800cc18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	b9fb      	cbnz	r3, 800cc60 <_strtod_l+0xb80>
 800cc20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc24:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc26:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc36:	1b5b      	subs	r3, r3, r5
 800cc38:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc42:	f7ff f8eb 	bl	800be1c <__ulp>
 800cc46:	4650      	mov	r0, sl
 800cc48:	4659      	mov	r1, fp
 800cc4a:	ec53 2b10 	vmov	r2, r3, d0
 800cc4e:	f7f3 fcd7 	bl	8000600 <__aeabi_dmul>
 800cc52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc56:	f7f3 fb1d 	bl	8000294 <__adddf3>
 800cc5a:	4682      	mov	sl, r0
 800cc5c:	468b      	mov	fp, r1
 800cc5e:	e772      	b.n	800cb46 <_strtod_l+0xa66>
 800cc60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cc64:	e7e0      	b.n	800cc28 <_strtod_l+0xb48>
 800cc66:	a30e      	add	r3, pc, #56	@ (adr r3, 800cca0 <_strtod_l+0xbc0>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7f3 ff3a 	bl	8000ae4 <__aeabi_dcmplt>
 800cc70:	e79a      	b.n	800cba8 <_strtod_l+0xac8>
 800cc72:	2300      	movs	r3, #0
 800cc74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc78:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	f7ff ba6d 	b.w	800c15a <_strtod_l+0x7a>
 800cc80:	2a65      	cmp	r2, #101	@ 0x65
 800cc82:	f43f ab67 	beq.w	800c354 <_strtod_l+0x274>
 800cc86:	2a45      	cmp	r2, #69	@ 0x45
 800cc88:	f43f ab64 	beq.w	800c354 <_strtod_l+0x274>
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	f7ff bba0 	b.w	800c3d2 <_strtod_l+0x2f2>
 800cc92:	bf00      	nop
 800cc94:	f3af 8000 	nop.w
 800cc98:	ffc00000 	.word	0xffc00000
 800cc9c:	41dfffff 	.word	0x41dfffff
 800cca0:	94a03595 	.word	0x94a03595
 800cca4:	3fcfffff 	.word	0x3fcfffff

0800cca8 <_strtod_r>:
 800cca8:	4b01      	ldr	r3, [pc, #4]	@ (800ccb0 <_strtod_r+0x8>)
 800ccaa:	f7ff ba19 	b.w	800c0e0 <_strtod_l>
 800ccae:	bf00      	nop
 800ccb0:	2000006c 	.word	0x2000006c

0800ccb4 <_strtol_l.constprop.0>:
 800ccb4:	2b24      	cmp	r3, #36	@ 0x24
 800ccb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccba:	4686      	mov	lr, r0
 800ccbc:	4690      	mov	r8, r2
 800ccbe:	d801      	bhi.n	800ccc4 <_strtol_l.constprop.0+0x10>
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d106      	bne.n	800ccd2 <_strtol_l.constprop.0+0x1e>
 800ccc4:	f7fd fd9a 	bl	800a7fc <__errno>
 800ccc8:	2316      	movs	r3, #22
 800ccca:	6003      	str	r3, [r0, #0]
 800cccc:	2000      	movs	r0, #0
 800ccce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd2:	460d      	mov	r5, r1
 800ccd4:	4833      	ldr	r0, [pc, #204]	@ (800cda4 <_strtol_l.constprop.0+0xf0>)
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccdc:	5d06      	ldrb	r6, [r0, r4]
 800ccde:	f016 0608 	ands.w	r6, r6, #8
 800cce2:	d1f8      	bne.n	800ccd6 <_strtol_l.constprop.0+0x22>
 800cce4:	2c2d      	cmp	r4, #45	@ 0x2d
 800cce6:	d12d      	bne.n	800cd44 <_strtol_l.constprop.0+0x90>
 800cce8:	782c      	ldrb	r4, [r5, #0]
 800ccea:	2601      	movs	r6, #1
 800ccec:	1c95      	adds	r5, r2, #2
 800ccee:	f033 0210 	bics.w	r2, r3, #16
 800ccf2:	d109      	bne.n	800cd08 <_strtol_l.constprop.0+0x54>
 800ccf4:	2c30      	cmp	r4, #48	@ 0x30
 800ccf6:	d12a      	bne.n	800cd4e <_strtol_l.constprop.0+0x9a>
 800ccf8:	782a      	ldrb	r2, [r5, #0]
 800ccfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccfe:	2a58      	cmp	r2, #88	@ 0x58
 800cd00:	d125      	bne.n	800cd4e <_strtol_l.constprop.0+0x9a>
 800cd02:	786c      	ldrb	r4, [r5, #1]
 800cd04:	2310      	movs	r3, #16
 800cd06:	3502      	adds	r5, #2
 800cd08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd12:	4610      	mov	r0, r2
 800cd14:	fbbc f9f3 	udiv	r9, ip, r3
 800cd18:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cd20:	2f09      	cmp	r7, #9
 800cd22:	d81b      	bhi.n	800cd5c <_strtol_l.constprop.0+0xa8>
 800cd24:	463c      	mov	r4, r7
 800cd26:	42a3      	cmp	r3, r4
 800cd28:	dd27      	ble.n	800cd7a <_strtol_l.constprop.0+0xc6>
 800cd2a:	1c57      	adds	r7, r2, #1
 800cd2c:	d007      	beq.n	800cd3e <_strtol_l.constprop.0+0x8a>
 800cd2e:	4581      	cmp	r9, r0
 800cd30:	d320      	bcc.n	800cd74 <_strtol_l.constprop.0+0xc0>
 800cd32:	d101      	bne.n	800cd38 <_strtol_l.constprop.0+0x84>
 800cd34:	45a2      	cmp	sl, r4
 800cd36:	db1d      	blt.n	800cd74 <_strtol_l.constprop.0+0xc0>
 800cd38:	fb00 4003 	mla	r0, r0, r3, r4
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd42:	e7eb      	b.n	800cd1c <_strtol_l.constprop.0+0x68>
 800cd44:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd46:	bf04      	itt	eq
 800cd48:	782c      	ldrbeq	r4, [r5, #0]
 800cd4a:	1c95      	addeq	r5, r2, #2
 800cd4c:	e7cf      	b.n	800ccee <_strtol_l.constprop.0+0x3a>
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1da      	bne.n	800cd08 <_strtol_l.constprop.0+0x54>
 800cd52:	2c30      	cmp	r4, #48	@ 0x30
 800cd54:	bf0c      	ite	eq
 800cd56:	2308      	moveq	r3, #8
 800cd58:	230a      	movne	r3, #10
 800cd5a:	e7d5      	b.n	800cd08 <_strtol_l.constprop.0+0x54>
 800cd5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cd60:	2f19      	cmp	r7, #25
 800cd62:	d801      	bhi.n	800cd68 <_strtol_l.constprop.0+0xb4>
 800cd64:	3c37      	subs	r4, #55	@ 0x37
 800cd66:	e7de      	b.n	800cd26 <_strtol_l.constprop.0+0x72>
 800cd68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cd6c:	2f19      	cmp	r7, #25
 800cd6e:	d804      	bhi.n	800cd7a <_strtol_l.constprop.0+0xc6>
 800cd70:	3c57      	subs	r4, #87	@ 0x57
 800cd72:	e7d8      	b.n	800cd26 <_strtol_l.constprop.0+0x72>
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	e7e1      	b.n	800cd3e <_strtol_l.constprop.0+0x8a>
 800cd7a:	1c53      	adds	r3, r2, #1
 800cd7c:	d108      	bne.n	800cd90 <_strtol_l.constprop.0+0xdc>
 800cd7e:	2322      	movs	r3, #34	@ 0x22
 800cd80:	4660      	mov	r0, ip
 800cd82:	f8ce 3000 	str.w	r3, [lr]
 800cd86:	f1b8 0f00 	cmp.w	r8, #0
 800cd8a:	d0a0      	beq.n	800ccce <_strtol_l.constprop.0+0x1a>
 800cd8c:	1e69      	subs	r1, r5, #1
 800cd8e:	e006      	b.n	800cd9e <_strtol_l.constprop.0+0xea>
 800cd90:	b106      	cbz	r6, 800cd94 <_strtol_l.constprop.0+0xe0>
 800cd92:	4240      	negs	r0, r0
 800cd94:	f1b8 0f00 	cmp.w	r8, #0
 800cd98:	d099      	beq.n	800ccce <_strtol_l.constprop.0+0x1a>
 800cd9a:	2a00      	cmp	r2, #0
 800cd9c:	d1f6      	bne.n	800cd8c <_strtol_l.constprop.0+0xd8>
 800cd9e:	f8c8 1000 	str.w	r1, [r8]
 800cda2:	e794      	b.n	800ccce <_strtol_l.constprop.0+0x1a>
 800cda4:	0800e321 	.word	0x0800e321

0800cda8 <_strtol_r>:
 800cda8:	f7ff bf84 	b.w	800ccb4 <_strtol_l.constprop.0>

0800cdac <__ssputs_r>:
 800cdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb0:	461f      	mov	r7, r3
 800cdb2:	688e      	ldr	r6, [r1, #8]
 800cdb4:	4682      	mov	sl, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	42be      	cmp	r6, r7
 800cdba:	4690      	mov	r8, r2
 800cdbc:	680b      	ldr	r3, [r1, #0]
 800cdbe:	d82d      	bhi.n	800ce1c <__ssputs_r+0x70>
 800cdc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cdc8:	d026      	beq.n	800ce18 <__ssputs_r+0x6c>
 800cdca:	6965      	ldr	r5, [r4, #20]
 800cdcc:	6909      	ldr	r1, [r1, #16]
 800cdce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdd2:	eba3 0901 	sub.w	r9, r3, r1
 800cdd6:	1c7b      	adds	r3, r7, #1
 800cdd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cddc:	444b      	add	r3, r9
 800cdde:	106d      	asrs	r5, r5, #1
 800cde0:	429d      	cmp	r5, r3
 800cde2:	bf38      	it	cc
 800cde4:	461d      	movcc	r5, r3
 800cde6:	0553      	lsls	r3, r2, #21
 800cde8:	d527      	bpl.n	800ce3a <__ssputs_r+0x8e>
 800cdea:	4629      	mov	r1, r5
 800cdec:	f7fe fc10 	bl	800b610 <_malloc_r>
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	b360      	cbz	r0, 800ce4e <__ssputs_r+0xa2>
 800cdf4:	464a      	mov	r2, r9
 800cdf6:	6921      	ldr	r1, [r4, #16]
 800cdf8:	f000 fbee 	bl	800d5d8 <memcpy>
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce06:	81a3      	strh	r3, [r4, #12]
 800ce08:	6126      	str	r6, [r4, #16]
 800ce0a:	444e      	add	r6, r9
 800ce0c:	6165      	str	r5, [r4, #20]
 800ce0e:	eba5 0509 	sub.w	r5, r5, r9
 800ce12:	6026      	str	r6, [r4, #0]
 800ce14:	463e      	mov	r6, r7
 800ce16:	60a5      	str	r5, [r4, #8]
 800ce18:	42be      	cmp	r6, r7
 800ce1a:	d900      	bls.n	800ce1e <__ssputs_r+0x72>
 800ce1c:	463e      	mov	r6, r7
 800ce1e:	4632      	mov	r2, r6
 800ce20:	4641      	mov	r1, r8
 800ce22:	6820      	ldr	r0, [r4, #0]
 800ce24:	f000 fb9c 	bl	800d560 <memmove>
 800ce28:	68a3      	ldr	r3, [r4, #8]
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	1b9b      	subs	r3, r3, r6
 800ce2e:	60a3      	str	r3, [r4, #8]
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	4433      	add	r3, r6
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	f000 ff5d 	bl	800dcfa <_realloc_r>
 800ce40:	4606      	mov	r6, r0
 800ce42:	2800      	cmp	r0, #0
 800ce44:	d1e0      	bne.n	800ce08 <__ssputs_r+0x5c>
 800ce46:	6921      	ldr	r1, [r4, #16]
 800ce48:	4650      	mov	r0, sl
 800ce4a:	f7fe fb6d 	bl	800b528 <_free_r>
 800ce4e:	230c      	movs	r3, #12
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	f8ca 3000 	str.w	r3, [sl]
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	e7e9      	b.n	800ce36 <__ssputs_r+0x8a>
	...

0800ce64 <_svfiprintf_r>:
 800ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce68:	4698      	mov	r8, r3
 800ce6a:	898b      	ldrh	r3, [r1, #12]
 800ce6c:	b09d      	sub	sp, #116	@ 0x74
 800ce6e:	4607      	mov	r7, r0
 800ce70:	061b      	lsls	r3, r3, #24
 800ce72:	460d      	mov	r5, r1
 800ce74:	4614      	mov	r4, r2
 800ce76:	d510      	bpl.n	800ce9a <_svfiprintf_r+0x36>
 800ce78:	690b      	ldr	r3, [r1, #16]
 800ce7a:	b973      	cbnz	r3, 800ce9a <_svfiprintf_r+0x36>
 800ce7c:	2140      	movs	r1, #64	@ 0x40
 800ce7e:	f7fe fbc7 	bl	800b610 <_malloc_r>
 800ce82:	6028      	str	r0, [r5, #0]
 800ce84:	6128      	str	r0, [r5, #16]
 800ce86:	b930      	cbnz	r0, 800ce96 <_svfiprintf_r+0x32>
 800ce88:	230c      	movs	r3, #12
 800ce8a:	603b      	str	r3, [r7, #0]
 800ce8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce90:	b01d      	add	sp, #116	@ 0x74
 800ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce96:	2340      	movs	r3, #64	@ 0x40
 800ce98:	616b      	str	r3, [r5, #20]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea0:	f04f 0901 	mov.w	r9, #1
 800cea4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800d048 <_svfiprintf_r+0x1e4>
 800cea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceaa:	2320      	movs	r3, #32
 800ceac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ceb0:	2330      	movs	r3, #48	@ 0x30
 800ceb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ceb6:	4623      	mov	r3, r4
 800ceb8:	469a      	mov	sl, r3
 800ceba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cebe:	b10a      	cbz	r2, 800cec4 <_svfiprintf_r+0x60>
 800cec0:	2a25      	cmp	r2, #37	@ 0x25
 800cec2:	d1f9      	bne.n	800ceb8 <_svfiprintf_r+0x54>
 800cec4:	ebba 0b04 	subs.w	fp, sl, r4
 800cec8:	d00b      	beq.n	800cee2 <_svfiprintf_r+0x7e>
 800ceca:	465b      	mov	r3, fp
 800cecc:	4622      	mov	r2, r4
 800cece:	4629      	mov	r1, r5
 800ced0:	4638      	mov	r0, r7
 800ced2:	f7ff ff6b 	bl	800cdac <__ssputs_r>
 800ced6:	3001      	adds	r0, #1
 800ced8:	f000 80a7 	beq.w	800d02a <_svfiprintf_r+0x1c6>
 800cedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cede:	445a      	add	r2, fp
 800cee0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cee2:	f89a 3000 	ldrb.w	r3, [sl]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 809f 	beq.w	800d02a <_svfiprintf_r+0x1c6>
 800ceec:	2300      	movs	r3, #0
 800ceee:	f04f 32ff 	mov.w	r2, #4294967295
 800cef2:	f10a 0a01 	add.w	sl, sl, #1
 800cef6:	9304      	str	r3, [sp, #16]
 800cef8:	9307      	str	r3, [sp, #28]
 800cefa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cefe:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf04:	4654      	mov	r4, sl
 800cf06:	2205      	movs	r2, #5
 800cf08:	484f      	ldr	r0, [pc, #316]	@ (800d048 <_svfiprintf_r+0x1e4>)
 800cf0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0e:	f7fd fca2 	bl	800a856 <memchr>
 800cf12:	9a04      	ldr	r2, [sp, #16]
 800cf14:	b9d8      	cbnz	r0, 800cf4e <_svfiprintf_r+0xea>
 800cf16:	06d0      	lsls	r0, r2, #27
 800cf18:	bf44      	itt	mi
 800cf1a:	2320      	movmi	r3, #32
 800cf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf20:	0711      	lsls	r1, r2, #28
 800cf22:	bf44      	itt	mi
 800cf24:	232b      	movmi	r3, #43	@ 0x2b
 800cf26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf30:	d015      	beq.n	800cf5e <_svfiprintf_r+0xfa>
 800cf32:	9a07      	ldr	r2, [sp, #28]
 800cf34:	4654      	mov	r4, sl
 800cf36:	2000      	movs	r0, #0
 800cf38:	f04f 0c0a 	mov.w	ip, #10
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf42:	3b30      	subs	r3, #48	@ 0x30
 800cf44:	2b09      	cmp	r3, #9
 800cf46:	d94b      	bls.n	800cfe0 <_svfiprintf_r+0x17c>
 800cf48:	b1b0      	cbz	r0, 800cf78 <_svfiprintf_r+0x114>
 800cf4a:	9207      	str	r2, [sp, #28]
 800cf4c:	e014      	b.n	800cf78 <_svfiprintf_r+0x114>
 800cf4e:	eba0 0308 	sub.w	r3, r0, r8
 800cf52:	46a2      	mov	sl, r4
 800cf54:	fa09 f303 	lsl.w	r3, r9, r3
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	e7d2      	b.n	800cf04 <_svfiprintf_r+0xa0>
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	1d19      	adds	r1, r3, #4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	9103      	str	r1, [sp, #12]
 800cf68:	bfbb      	ittet	lt
 800cf6a:	425b      	neglt	r3, r3
 800cf6c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf70:	9307      	strge	r3, [sp, #28]
 800cf72:	9307      	strlt	r3, [sp, #28]
 800cf74:	bfb8      	it	lt
 800cf76:	9204      	strlt	r2, [sp, #16]
 800cf78:	7823      	ldrb	r3, [r4, #0]
 800cf7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf7c:	d10a      	bne.n	800cf94 <_svfiprintf_r+0x130>
 800cf7e:	7863      	ldrb	r3, [r4, #1]
 800cf80:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf82:	d132      	bne.n	800cfea <_svfiprintf_r+0x186>
 800cf84:	9b03      	ldr	r3, [sp, #12]
 800cf86:	3402      	adds	r4, #2
 800cf88:	1d1a      	adds	r2, r3, #4
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf90:	9203      	str	r2, [sp, #12]
 800cf92:	9305      	str	r3, [sp, #20]
 800cf94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d058 <_svfiprintf_r+0x1f4>
 800cf98:	2203      	movs	r2, #3
 800cf9a:	7821      	ldrb	r1, [r4, #0]
 800cf9c:	4650      	mov	r0, sl
 800cf9e:	f7fd fc5a 	bl	800a856 <memchr>
 800cfa2:	b138      	cbz	r0, 800cfb4 <_svfiprintf_r+0x150>
 800cfa4:	eba0 000a 	sub.w	r0, r0, sl
 800cfa8:	2240      	movs	r2, #64	@ 0x40
 800cfaa:	9b04      	ldr	r3, [sp, #16]
 800cfac:	3401      	adds	r4, #1
 800cfae:	4082      	lsls	r2, r0
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	9304      	str	r3, [sp, #16]
 800cfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb8:	2206      	movs	r2, #6
 800cfba:	4824      	ldr	r0, [pc, #144]	@ (800d04c <_svfiprintf_r+0x1e8>)
 800cfbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfc0:	f7fd fc49 	bl	800a856 <memchr>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d036      	beq.n	800d036 <_svfiprintf_r+0x1d2>
 800cfc8:	4b21      	ldr	r3, [pc, #132]	@ (800d050 <_svfiprintf_r+0x1ec>)
 800cfca:	bb1b      	cbnz	r3, 800d014 <_svfiprintf_r+0x1b0>
 800cfcc:	9b03      	ldr	r3, [sp, #12]
 800cfce:	3307      	adds	r3, #7
 800cfd0:	f023 0307 	bic.w	r3, r3, #7
 800cfd4:	3308      	adds	r3, #8
 800cfd6:	9303      	str	r3, [sp, #12]
 800cfd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfda:	4433      	add	r3, r6
 800cfdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfde:	e76a      	b.n	800ceb6 <_svfiprintf_r+0x52>
 800cfe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	e7a8      	b.n	800cf3c <_svfiprintf_r+0xd8>
 800cfea:	2300      	movs	r3, #0
 800cfec:	3401      	adds	r4, #1
 800cfee:	f04f 0c0a 	mov.w	ip, #10
 800cff2:	4619      	mov	r1, r3
 800cff4:	9305      	str	r3, [sp, #20]
 800cff6:	4620      	mov	r0, r4
 800cff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cffc:	3a30      	subs	r2, #48	@ 0x30
 800cffe:	2a09      	cmp	r2, #9
 800d000:	d903      	bls.n	800d00a <_svfiprintf_r+0x1a6>
 800d002:	2b00      	cmp	r3, #0
 800d004:	d0c6      	beq.n	800cf94 <_svfiprintf_r+0x130>
 800d006:	9105      	str	r1, [sp, #20]
 800d008:	e7c4      	b.n	800cf94 <_svfiprintf_r+0x130>
 800d00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d00e:	4604      	mov	r4, r0
 800d010:	2301      	movs	r3, #1
 800d012:	e7f0      	b.n	800cff6 <_svfiprintf_r+0x192>
 800d014:	ab03      	add	r3, sp, #12
 800d016:	462a      	mov	r2, r5
 800d018:	a904      	add	r1, sp, #16
 800d01a:	4638      	mov	r0, r7
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	4b0d      	ldr	r3, [pc, #52]	@ (800d054 <_svfiprintf_r+0x1f0>)
 800d020:	f7fc fc94 	bl	800994c <_printf_float>
 800d024:	1c42      	adds	r2, r0, #1
 800d026:	4606      	mov	r6, r0
 800d028:	d1d6      	bne.n	800cfd8 <_svfiprintf_r+0x174>
 800d02a:	89ab      	ldrh	r3, [r5, #12]
 800d02c:	065b      	lsls	r3, r3, #25
 800d02e:	f53f af2d 	bmi.w	800ce8c <_svfiprintf_r+0x28>
 800d032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d034:	e72c      	b.n	800ce90 <_svfiprintf_r+0x2c>
 800d036:	ab03      	add	r3, sp, #12
 800d038:	462a      	mov	r2, r5
 800d03a:	a904      	add	r1, sp, #16
 800d03c:	4638      	mov	r0, r7
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	4b04      	ldr	r3, [pc, #16]	@ (800d054 <_svfiprintf_r+0x1f0>)
 800d042:	f7fc ff1f 	bl	8009e84 <_printf_i>
 800d046:	e7ed      	b.n	800d024 <_svfiprintf_r+0x1c0>
 800d048:	0800e421 	.word	0x0800e421
 800d04c:	0800e42b 	.word	0x0800e42b
 800d050:	0800994d 	.word	0x0800994d
 800d054:	0800cdad 	.word	0x0800cdad
 800d058:	0800e427 	.word	0x0800e427

0800d05c <__sfputc_r>:
 800d05c:	6893      	ldr	r3, [r2, #8]
 800d05e:	3b01      	subs	r3, #1
 800d060:	2b00      	cmp	r3, #0
 800d062:	6093      	str	r3, [r2, #8]
 800d064:	b410      	push	{r4}
 800d066:	da08      	bge.n	800d07a <__sfputc_r+0x1e>
 800d068:	6994      	ldr	r4, [r2, #24]
 800d06a:	42a3      	cmp	r3, r4
 800d06c:	db01      	blt.n	800d072 <__sfputc_r+0x16>
 800d06e:	290a      	cmp	r1, #10
 800d070:	d103      	bne.n	800d07a <__sfputc_r+0x1e>
 800d072:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d076:	f000 b9df 	b.w	800d438 <__swbuf_r>
 800d07a:	6813      	ldr	r3, [r2, #0]
 800d07c:	1c58      	adds	r0, r3, #1
 800d07e:	6010      	str	r0, [r2, #0]
 800d080:	4608      	mov	r0, r1
 800d082:	7019      	strb	r1, [r3, #0]
 800d084:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <__sfputs_r>:
 800d08a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08c:	4606      	mov	r6, r0
 800d08e:	460f      	mov	r7, r1
 800d090:	4614      	mov	r4, r2
 800d092:	18d5      	adds	r5, r2, r3
 800d094:	42ac      	cmp	r4, r5
 800d096:	d101      	bne.n	800d09c <__sfputs_r+0x12>
 800d098:	2000      	movs	r0, #0
 800d09a:	e007      	b.n	800d0ac <__sfputs_r+0x22>
 800d09c:	463a      	mov	r2, r7
 800d09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f7ff ffda 	bl	800d05c <__sfputc_r>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d1f3      	bne.n	800d094 <__sfputs_r+0xa>
 800d0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0b0 <_vfiprintf_r>:
 800d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	460d      	mov	r5, r1
 800d0b6:	b09d      	sub	sp, #116	@ 0x74
 800d0b8:	4614      	mov	r4, r2
 800d0ba:	4698      	mov	r8, r3
 800d0bc:	4606      	mov	r6, r0
 800d0be:	b118      	cbz	r0, 800d0c8 <_vfiprintf_r+0x18>
 800d0c0:	6a03      	ldr	r3, [r0, #32]
 800d0c2:	b90b      	cbnz	r3, 800d0c8 <_vfiprintf_r+0x18>
 800d0c4:	f7fd fa9c 	bl	800a600 <__sinit>
 800d0c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0ca:	07d9      	lsls	r1, r3, #31
 800d0cc:	d405      	bmi.n	800d0da <_vfiprintf_r+0x2a>
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	059a      	lsls	r2, r3, #22
 800d0d2:	d402      	bmi.n	800d0da <_vfiprintf_r+0x2a>
 800d0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0d6:	f7fd fbbc 	bl	800a852 <__retarget_lock_acquire_recursive>
 800d0da:	89ab      	ldrh	r3, [r5, #12]
 800d0dc:	071b      	lsls	r3, r3, #28
 800d0de:	d501      	bpl.n	800d0e4 <_vfiprintf_r+0x34>
 800d0e0:	692b      	ldr	r3, [r5, #16]
 800d0e2:	b99b      	cbnz	r3, 800d10c <_vfiprintf_r+0x5c>
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f000 f9e4 	bl	800d4b4 <__swsetup_r>
 800d0ec:	b170      	cbz	r0, 800d10c <_vfiprintf_r+0x5c>
 800d0ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0f0:	07dc      	lsls	r4, r3, #31
 800d0f2:	d504      	bpl.n	800d0fe <_vfiprintf_r+0x4e>
 800d0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f8:	b01d      	add	sp, #116	@ 0x74
 800d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fe:	89ab      	ldrh	r3, [r5, #12]
 800d100:	0598      	lsls	r0, r3, #22
 800d102:	d4f7      	bmi.n	800d0f4 <_vfiprintf_r+0x44>
 800d104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d106:	f7fd fba5 	bl	800a854 <__retarget_lock_release_recursive>
 800d10a:	e7f3      	b.n	800d0f4 <_vfiprintf_r+0x44>
 800d10c:	2300      	movs	r3, #0
 800d10e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d112:	f04f 0901 	mov.w	r9, #1
 800d116:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d2cc <_vfiprintf_r+0x21c>
 800d11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11c:	2320      	movs	r3, #32
 800d11e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d122:	2330      	movs	r3, #48	@ 0x30
 800d124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d128:	4623      	mov	r3, r4
 800d12a:	469a      	mov	sl, r3
 800d12c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d130:	b10a      	cbz	r2, 800d136 <_vfiprintf_r+0x86>
 800d132:	2a25      	cmp	r2, #37	@ 0x25
 800d134:	d1f9      	bne.n	800d12a <_vfiprintf_r+0x7a>
 800d136:	ebba 0b04 	subs.w	fp, sl, r4
 800d13a:	d00b      	beq.n	800d154 <_vfiprintf_r+0xa4>
 800d13c:	465b      	mov	r3, fp
 800d13e:	4622      	mov	r2, r4
 800d140:	4629      	mov	r1, r5
 800d142:	4630      	mov	r0, r6
 800d144:	f7ff ffa1 	bl	800d08a <__sfputs_r>
 800d148:	3001      	adds	r0, #1
 800d14a:	f000 80a7 	beq.w	800d29c <_vfiprintf_r+0x1ec>
 800d14e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d150:	445a      	add	r2, fp
 800d152:	9209      	str	r2, [sp, #36]	@ 0x24
 800d154:	f89a 3000 	ldrb.w	r3, [sl]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 809f 	beq.w	800d29c <_vfiprintf_r+0x1ec>
 800d15e:	2300      	movs	r3, #0
 800d160:	f04f 32ff 	mov.w	r2, #4294967295
 800d164:	f10a 0a01 	add.w	sl, sl, #1
 800d168:	9304      	str	r3, [sp, #16]
 800d16a:	9307      	str	r3, [sp, #28]
 800d16c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d170:	931a      	str	r3, [sp, #104]	@ 0x68
 800d172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d176:	4654      	mov	r4, sl
 800d178:	2205      	movs	r2, #5
 800d17a:	4854      	ldr	r0, [pc, #336]	@ (800d2cc <_vfiprintf_r+0x21c>)
 800d17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d180:	f7fd fb69 	bl	800a856 <memchr>
 800d184:	9a04      	ldr	r2, [sp, #16]
 800d186:	b9d8      	cbnz	r0, 800d1c0 <_vfiprintf_r+0x110>
 800d188:	06d1      	lsls	r1, r2, #27
 800d18a:	bf44      	itt	mi
 800d18c:	2320      	movmi	r3, #32
 800d18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d192:	0713      	lsls	r3, r2, #28
 800d194:	bf44      	itt	mi
 800d196:	232b      	movmi	r3, #43	@ 0x2b
 800d198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d19c:	f89a 3000 	ldrb.w	r3, [sl]
 800d1a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1a2:	d015      	beq.n	800d1d0 <_vfiprintf_r+0x120>
 800d1a4:	9a07      	ldr	r2, [sp, #28]
 800d1a6:	4654      	mov	r4, sl
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	f04f 0c0a 	mov.w	ip, #10
 800d1ae:	4621      	mov	r1, r4
 800d1b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1b4:	3b30      	subs	r3, #48	@ 0x30
 800d1b6:	2b09      	cmp	r3, #9
 800d1b8:	d94b      	bls.n	800d252 <_vfiprintf_r+0x1a2>
 800d1ba:	b1b0      	cbz	r0, 800d1ea <_vfiprintf_r+0x13a>
 800d1bc:	9207      	str	r2, [sp, #28]
 800d1be:	e014      	b.n	800d1ea <_vfiprintf_r+0x13a>
 800d1c0:	eba0 0308 	sub.w	r3, r0, r8
 800d1c4:	46a2      	mov	sl, r4
 800d1c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	9304      	str	r3, [sp, #16]
 800d1ce:	e7d2      	b.n	800d176 <_vfiprintf_r+0xc6>
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	1d19      	adds	r1, r3, #4
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	9103      	str	r1, [sp, #12]
 800d1da:	bfbb      	ittet	lt
 800d1dc:	425b      	neglt	r3, r3
 800d1de:	f042 0202 	orrlt.w	r2, r2, #2
 800d1e2:	9307      	strge	r3, [sp, #28]
 800d1e4:	9307      	strlt	r3, [sp, #28]
 800d1e6:	bfb8      	it	lt
 800d1e8:	9204      	strlt	r2, [sp, #16]
 800d1ea:	7823      	ldrb	r3, [r4, #0]
 800d1ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1ee:	d10a      	bne.n	800d206 <_vfiprintf_r+0x156>
 800d1f0:	7863      	ldrb	r3, [r4, #1]
 800d1f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1f4:	d132      	bne.n	800d25c <_vfiprintf_r+0x1ac>
 800d1f6:	9b03      	ldr	r3, [sp, #12]
 800d1f8:	3402      	adds	r4, #2
 800d1fa:	1d1a      	adds	r2, r3, #4
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d202:	9203      	str	r2, [sp, #12]
 800d204:	9305      	str	r3, [sp, #20]
 800d206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2dc <_vfiprintf_r+0x22c>
 800d20a:	2203      	movs	r2, #3
 800d20c:	7821      	ldrb	r1, [r4, #0]
 800d20e:	4650      	mov	r0, sl
 800d210:	f7fd fb21 	bl	800a856 <memchr>
 800d214:	b138      	cbz	r0, 800d226 <_vfiprintf_r+0x176>
 800d216:	eba0 000a 	sub.w	r0, r0, sl
 800d21a:	2240      	movs	r2, #64	@ 0x40
 800d21c:	9b04      	ldr	r3, [sp, #16]
 800d21e:	3401      	adds	r4, #1
 800d220:	4082      	lsls	r2, r0
 800d222:	4313      	orrs	r3, r2
 800d224:	9304      	str	r3, [sp, #16]
 800d226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d22a:	2206      	movs	r2, #6
 800d22c:	4828      	ldr	r0, [pc, #160]	@ (800d2d0 <_vfiprintf_r+0x220>)
 800d22e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d232:	f7fd fb10 	bl	800a856 <memchr>
 800d236:	2800      	cmp	r0, #0
 800d238:	d03f      	beq.n	800d2ba <_vfiprintf_r+0x20a>
 800d23a:	4b26      	ldr	r3, [pc, #152]	@ (800d2d4 <_vfiprintf_r+0x224>)
 800d23c:	bb1b      	cbnz	r3, 800d286 <_vfiprintf_r+0x1d6>
 800d23e:	9b03      	ldr	r3, [sp, #12]
 800d240:	3307      	adds	r3, #7
 800d242:	f023 0307 	bic.w	r3, r3, #7
 800d246:	3308      	adds	r3, #8
 800d248:	9303      	str	r3, [sp, #12]
 800d24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d24c:	443b      	add	r3, r7
 800d24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d250:	e76a      	b.n	800d128 <_vfiprintf_r+0x78>
 800d252:	fb0c 3202 	mla	r2, ip, r2, r3
 800d256:	460c      	mov	r4, r1
 800d258:	2001      	movs	r0, #1
 800d25a:	e7a8      	b.n	800d1ae <_vfiprintf_r+0xfe>
 800d25c:	2300      	movs	r3, #0
 800d25e:	3401      	adds	r4, #1
 800d260:	f04f 0c0a 	mov.w	ip, #10
 800d264:	4619      	mov	r1, r3
 800d266:	9305      	str	r3, [sp, #20]
 800d268:	4620      	mov	r0, r4
 800d26a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d26e:	3a30      	subs	r2, #48	@ 0x30
 800d270:	2a09      	cmp	r2, #9
 800d272:	d903      	bls.n	800d27c <_vfiprintf_r+0x1cc>
 800d274:	2b00      	cmp	r3, #0
 800d276:	d0c6      	beq.n	800d206 <_vfiprintf_r+0x156>
 800d278:	9105      	str	r1, [sp, #20]
 800d27a:	e7c4      	b.n	800d206 <_vfiprintf_r+0x156>
 800d27c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d280:	4604      	mov	r4, r0
 800d282:	2301      	movs	r3, #1
 800d284:	e7f0      	b.n	800d268 <_vfiprintf_r+0x1b8>
 800d286:	ab03      	add	r3, sp, #12
 800d288:	462a      	mov	r2, r5
 800d28a:	a904      	add	r1, sp, #16
 800d28c:	4630      	mov	r0, r6
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	4b11      	ldr	r3, [pc, #68]	@ (800d2d8 <_vfiprintf_r+0x228>)
 800d292:	f7fc fb5b 	bl	800994c <_printf_float>
 800d296:	4607      	mov	r7, r0
 800d298:	1c78      	adds	r0, r7, #1
 800d29a:	d1d6      	bne.n	800d24a <_vfiprintf_r+0x19a>
 800d29c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d29e:	07d9      	lsls	r1, r3, #31
 800d2a0:	d405      	bmi.n	800d2ae <_vfiprintf_r+0x1fe>
 800d2a2:	89ab      	ldrh	r3, [r5, #12]
 800d2a4:	059a      	lsls	r2, r3, #22
 800d2a6:	d402      	bmi.n	800d2ae <_vfiprintf_r+0x1fe>
 800d2a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2aa:	f7fd fad3 	bl	800a854 <__retarget_lock_release_recursive>
 800d2ae:	89ab      	ldrh	r3, [r5, #12]
 800d2b0:	065b      	lsls	r3, r3, #25
 800d2b2:	f53f af1f 	bmi.w	800d0f4 <_vfiprintf_r+0x44>
 800d2b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2b8:	e71e      	b.n	800d0f8 <_vfiprintf_r+0x48>
 800d2ba:	ab03      	add	r3, sp, #12
 800d2bc:	462a      	mov	r2, r5
 800d2be:	a904      	add	r1, sp, #16
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	4b04      	ldr	r3, [pc, #16]	@ (800d2d8 <_vfiprintf_r+0x228>)
 800d2c6:	f7fc fddd 	bl	8009e84 <_printf_i>
 800d2ca:	e7e4      	b.n	800d296 <_vfiprintf_r+0x1e6>
 800d2cc:	0800e421 	.word	0x0800e421
 800d2d0:	0800e42b 	.word	0x0800e42b
 800d2d4:	0800994d 	.word	0x0800994d
 800d2d8:	0800d08b 	.word	0x0800d08b
 800d2dc:	0800e427 	.word	0x0800e427

0800d2e0 <__sflush_r>:
 800d2e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e8:	0716      	lsls	r6, r2, #28
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	d454      	bmi.n	800d39a <__sflush_r+0xba>
 800d2f0:	684b      	ldr	r3, [r1, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	dc02      	bgt.n	800d2fc <__sflush_r+0x1c>
 800d2f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dd48      	ble.n	800d38e <__sflush_r+0xae>
 800d2fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2fe:	2e00      	cmp	r6, #0
 800d300:	d045      	beq.n	800d38e <__sflush_r+0xae>
 800d302:	2300      	movs	r3, #0
 800d304:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d308:	682f      	ldr	r7, [r5, #0]
 800d30a:	6a21      	ldr	r1, [r4, #32]
 800d30c:	602b      	str	r3, [r5, #0]
 800d30e:	d030      	beq.n	800d372 <__sflush_r+0x92>
 800d310:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d312:	89a3      	ldrh	r3, [r4, #12]
 800d314:	0759      	lsls	r1, r3, #29
 800d316:	d505      	bpl.n	800d324 <__sflush_r+0x44>
 800d318:	6863      	ldr	r3, [r4, #4]
 800d31a:	1ad2      	subs	r2, r2, r3
 800d31c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d31e:	b10b      	cbz	r3, 800d324 <__sflush_r+0x44>
 800d320:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d322:	1ad2      	subs	r2, r2, r3
 800d324:	2300      	movs	r3, #0
 800d326:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d328:	6a21      	ldr	r1, [r4, #32]
 800d32a:	4628      	mov	r0, r5
 800d32c:	47b0      	blx	r6
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	d106      	bne.n	800d342 <__sflush_r+0x62>
 800d334:	6829      	ldr	r1, [r5, #0]
 800d336:	291d      	cmp	r1, #29
 800d338:	d82b      	bhi.n	800d392 <__sflush_r+0xb2>
 800d33a:	4a2a      	ldr	r2, [pc, #168]	@ (800d3e4 <__sflush_r+0x104>)
 800d33c:	410a      	asrs	r2, r1
 800d33e:	07d6      	lsls	r6, r2, #31
 800d340:	d427      	bmi.n	800d392 <__sflush_r+0xb2>
 800d342:	2200      	movs	r2, #0
 800d344:	04d9      	lsls	r1, r3, #19
 800d346:	6062      	str	r2, [r4, #4]
 800d348:	6922      	ldr	r2, [r4, #16]
 800d34a:	6022      	str	r2, [r4, #0]
 800d34c:	d504      	bpl.n	800d358 <__sflush_r+0x78>
 800d34e:	1c42      	adds	r2, r0, #1
 800d350:	d101      	bne.n	800d356 <__sflush_r+0x76>
 800d352:	682b      	ldr	r3, [r5, #0]
 800d354:	b903      	cbnz	r3, 800d358 <__sflush_r+0x78>
 800d356:	6560      	str	r0, [r4, #84]	@ 0x54
 800d358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d35a:	602f      	str	r7, [r5, #0]
 800d35c:	b1b9      	cbz	r1, 800d38e <__sflush_r+0xae>
 800d35e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d362:	4299      	cmp	r1, r3
 800d364:	d002      	beq.n	800d36c <__sflush_r+0x8c>
 800d366:	4628      	mov	r0, r5
 800d368:	f7fe f8de 	bl	800b528 <_free_r>
 800d36c:	2300      	movs	r3, #0
 800d36e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d370:	e00d      	b.n	800d38e <__sflush_r+0xae>
 800d372:	2301      	movs	r3, #1
 800d374:	4628      	mov	r0, r5
 800d376:	47b0      	blx	r6
 800d378:	4602      	mov	r2, r0
 800d37a:	1c50      	adds	r0, r2, #1
 800d37c:	d1c9      	bne.n	800d312 <__sflush_r+0x32>
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d0c6      	beq.n	800d312 <__sflush_r+0x32>
 800d384:	2b1d      	cmp	r3, #29
 800d386:	d001      	beq.n	800d38c <__sflush_r+0xac>
 800d388:	2b16      	cmp	r3, #22
 800d38a:	d11d      	bne.n	800d3c8 <__sflush_r+0xe8>
 800d38c:	602f      	str	r7, [r5, #0]
 800d38e:	2000      	movs	r0, #0
 800d390:	e021      	b.n	800d3d6 <__sflush_r+0xf6>
 800d392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d396:	b21b      	sxth	r3, r3
 800d398:	e01a      	b.n	800d3d0 <__sflush_r+0xf0>
 800d39a:	690f      	ldr	r7, [r1, #16]
 800d39c:	2f00      	cmp	r7, #0
 800d39e:	d0f6      	beq.n	800d38e <__sflush_r+0xae>
 800d3a0:	0793      	lsls	r3, r2, #30
 800d3a2:	680e      	ldr	r6, [r1, #0]
 800d3a4:	600f      	str	r7, [r1, #0]
 800d3a6:	bf0c      	ite	eq
 800d3a8:	694b      	ldreq	r3, [r1, #20]
 800d3aa:	2300      	movne	r3, #0
 800d3ac:	eba6 0807 	sub.w	r8, r6, r7
 800d3b0:	608b      	str	r3, [r1, #8]
 800d3b2:	f1b8 0f00 	cmp.w	r8, #0
 800d3b6:	ddea      	ble.n	800d38e <__sflush_r+0xae>
 800d3b8:	4643      	mov	r3, r8
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	6a21      	ldr	r1, [r4, #32]
 800d3be:	4628      	mov	r0, r5
 800d3c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3c2:	47b0      	blx	r6
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	dc08      	bgt.n	800d3da <__sflush_r+0xfa>
 800d3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d4:	81a3      	strh	r3, [r4, #12]
 800d3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3da:	4407      	add	r7, r0
 800d3dc:	eba8 0800 	sub.w	r8, r8, r0
 800d3e0:	e7e7      	b.n	800d3b2 <__sflush_r+0xd2>
 800d3e2:	bf00      	nop
 800d3e4:	dfbffffe 	.word	0xdfbffffe

0800d3e8 <_fflush_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	690b      	ldr	r3, [r1, #16]
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	b913      	cbnz	r3, 800d3f8 <_fflush_r+0x10>
 800d3f2:	2500      	movs	r5, #0
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	b118      	cbz	r0, 800d402 <_fflush_r+0x1a>
 800d3fa:	6a03      	ldr	r3, [r0, #32]
 800d3fc:	b90b      	cbnz	r3, 800d402 <_fflush_r+0x1a>
 800d3fe:	f7fd f8ff 	bl	800a600 <__sinit>
 800d402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0f3      	beq.n	800d3f2 <_fflush_r+0xa>
 800d40a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d40c:	07d0      	lsls	r0, r2, #31
 800d40e:	d404      	bmi.n	800d41a <_fflush_r+0x32>
 800d410:	0599      	lsls	r1, r3, #22
 800d412:	d402      	bmi.n	800d41a <_fflush_r+0x32>
 800d414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d416:	f7fd fa1c 	bl	800a852 <__retarget_lock_acquire_recursive>
 800d41a:	4628      	mov	r0, r5
 800d41c:	4621      	mov	r1, r4
 800d41e:	f7ff ff5f 	bl	800d2e0 <__sflush_r>
 800d422:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d424:	4605      	mov	r5, r0
 800d426:	07da      	lsls	r2, r3, #31
 800d428:	d4e4      	bmi.n	800d3f4 <_fflush_r+0xc>
 800d42a:	89a3      	ldrh	r3, [r4, #12]
 800d42c:	059b      	lsls	r3, r3, #22
 800d42e:	d4e1      	bmi.n	800d3f4 <_fflush_r+0xc>
 800d430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d432:	f7fd fa0f 	bl	800a854 <__retarget_lock_release_recursive>
 800d436:	e7dd      	b.n	800d3f4 <_fflush_r+0xc>

0800d438 <__swbuf_r>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	460e      	mov	r6, r1
 800d43c:	4614      	mov	r4, r2
 800d43e:	4605      	mov	r5, r0
 800d440:	b118      	cbz	r0, 800d44a <__swbuf_r+0x12>
 800d442:	6a03      	ldr	r3, [r0, #32]
 800d444:	b90b      	cbnz	r3, 800d44a <__swbuf_r+0x12>
 800d446:	f7fd f8db 	bl	800a600 <__sinit>
 800d44a:	69a3      	ldr	r3, [r4, #24]
 800d44c:	60a3      	str	r3, [r4, #8]
 800d44e:	89a3      	ldrh	r3, [r4, #12]
 800d450:	071a      	lsls	r2, r3, #28
 800d452:	d501      	bpl.n	800d458 <__swbuf_r+0x20>
 800d454:	6923      	ldr	r3, [r4, #16]
 800d456:	b943      	cbnz	r3, 800d46a <__swbuf_r+0x32>
 800d458:	4621      	mov	r1, r4
 800d45a:	4628      	mov	r0, r5
 800d45c:	f000 f82a 	bl	800d4b4 <__swsetup_r>
 800d460:	b118      	cbz	r0, 800d46a <__swbuf_r+0x32>
 800d462:	f04f 37ff 	mov.w	r7, #4294967295
 800d466:	4638      	mov	r0, r7
 800d468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	b2f6      	uxtb	r6, r6
 800d46e:	6922      	ldr	r2, [r4, #16]
 800d470:	4637      	mov	r7, r6
 800d472:	1a98      	subs	r0, r3, r2
 800d474:	6963      	ldr	r3, [r4, #20]
 800d476:	4283      	cmp	r3, r0
 800d478:	dc05      	bgt.n	800d486 <__swbuf_r+0x4e>
 800d47a:	4621      	mov	r1, r4
 800d47c:	4628      	mov	r0, r5
 800d47e:	f7ff ffb3 	bl	800d3e8 <_fflush_r>
 800d482:	2800      	cmp	r0, #0
 800d484:	d1ed      	bne.n	800d462 <__swbuf_r+0x2a>
 800d486:	68a3      	ldr	r3, [r4, #8]
 800d488:	3b01      	subs	r3, #1
 800d48a:	60a3      	str	r3, [r4, #8]
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	6022      	str	r2, [r4, #0]
 800d492:	701e      	strb	r6, [r3, #0]
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	6962      	ldr	r2, [r4, #20]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d004      	beq.n	800d4a6 <__swbuf_r+0x6e>
 800d49c:	89a3      	ldrh	r3, [r4, #12]
 800d49e:	07db      	lsls	r3, r3, #31
 800d4a0:	d5e1      	bpl.n	800d466 <__swbuf_r+0x2e>
 800d4a2:	2e0a      	cmp	r6, #10
 800d4a4:	d1df      	bne.n	800d466 <__swbuf_r+0x2e>
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f7ff ff9d 	bl	800d3e8 <_fflush_r>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d0d9      	beq.n	800d466 <__swbuf_r+0x2e>
 800d4b2:	e7d6      	b.n	800d462 <__swbuf_r+0x2a>

0800d4b4 <__swsetup_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	4b29      	ldr	r3, [pc, #164]	@ (800d55c <__swsetup_r+0xa8>)
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	6818      	ldr	r0, [r3, #0]
 800d4be:	b118      	cbz	r0, 800d4c8 <__swsetup_r+0x14>
 800d4c0:	6a03      	ldr	r3, [r0, #32]
 800d4c2:	b90b      	cbnz	r3, 800d4c8 <__swsetup_r+0x14>
 800d4c4:	f7fd f89c 	bl	800a600 <__sinit>
 800d4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4cc:	0719      	lsls	r1, r3, #28
 800d4ce:	d422      	bmi.n	800d516 <__swsetup_r+0x62>
 800d4d0:	06da      	lsls	r2, r3, #27
 800d4d2:	d407      	bmi.n	800d4e4 <__swsetup_r+0x30>
 800d4d4:	2209      	movs	r2, #9
 800d4d6:	602a      	str	r2, [r5, #0]
 800d4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	e033      	b.n	800d54c <__swsetup_r+0x98>
 800d4e4:	0758      	lsls	r0, r3, #29
 800d4e6:	d512      	bpl.n	800d50e <__swsetup_r+0x5a>
 800d4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4ea:	b141      	cbz	r1, 800d4fe <__swsetup_r+0x4a>
 800d4ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4f0:	4299      	cmp	r1, r3
 800d4f2:	d002      	beq.n	800d4fa <__swsetup_r+0x46>
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7fe f817 	bl	800b528 <_free_r>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4fe:	89a3      	ldrh	r3, [r4, #12]
 800d500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d504:	81a3      	strh	r3, [r4, #12]
 800d506:	2300      	movs	r3, #0
 800d508:	6063      	str	r3, [r4, #4]
 800d50a:	6923      	ldr	r3, [r4, #16]
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	f043 0308 	orr.w	r3, r3, #8
 800d514:	81a3      	strh	r3, [r4, #12]
 800d516:	6923      	ldr	r3, [r4, #16]
 800d518:	b94b      	cbnz	r3, 800d52e <__swsetup_r+0x7a>
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d524:	d003      	beq.n	800d52e <__swsetup_r+0x7a>
 800d526:	4621      	mov	r1, r4
 800d528:	4628      	mov	r0, r5
 800d52a:	f000 fc58 	bl	800ddde <__smakebuf_r>
 800d52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d532:	f013 0201 	ands.w	r2, r3, #1
 800d536:	d00a      	beq.n	800d54e <__swsetup_r+0x9a>
 800d538:	2200      	movs	r2, #0
 800d53a:	60a2      	str	r2, [r4, #8]
 800d53c:	6962      	ldr	r2, [r4, #20]
 800d53e:	4252      	negs	r2, r2
 800d540:	61a2      	str	r2, [r4, #24]
 800d542:	6922      	ldr	r2, [r4, #16]
 800d544:	b942      	cbnz	r2, 800d558 <__swsetup_r+0xa4>
 800d546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d54a:	d1c5      	bne.n	800d4d8 <__swsetup_r+0x24>
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	0799      	lsls	r1, r3, #30
 800d550:	bf58      	it	pl
 800d552:	6962      	ldrpl	r2, [r4, #20]
 800d554:	60a2      	str	r2, [r4, #8]
 800d556:	e7f4      	b.n	800d542 <__swsetup_r+0x8e>
 800d558:	2000      	movs	r0, #0
 800d55a:	e7f7      	b.n	800d54c <__swsetup_r+0x98>
 800d55c:	2000001c 	.word	0x2000001c

0800d560 <memmove>:
 800d560:	4288      	cmp	r0, r1
 800d562:	b510      	push	{r4, lr}
 800d564:	eb01 0402 	add.w	r4, r1, r2
 800d568:	d902      	bls.n	800d570 <memmove+0x10>
 800d56a:	4284      	cmp	r4, r0
 800d56c:	4623      	mov	r3, r4
 800d56e:	d807      	bhi.n	800d580 <memmove+0x20>
 800d570:	1e43      	subs	r3, r0, #1
 800d572:	42a1      	cmp	r1, r4
 800d574:	d008      	beq.n	800d588 <memmove+0x28>
 800d576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d57a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d57e:	e7f8      	b.n	800d572 <memmove+0x12>
 800d580:	4402      	add	r2, r0
 800d582:	4601      	mov	r1, r0
 800d584:	428a      	cmp	r2, r1
 800d586:	d100      	bne.n	800d58a <memmove+0x2a>
 800d588:	bd10      	pop	{r4, pc}
 800d58a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d58e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d592:	e7f7      	b.n	800d584 <memmove+0x24>

0800d594 <strncmp>:
 800d594:	b510      	push	{r4, lr}
 800d596:	b16a      	cbz	r2, 800d5b4 <strncmp+0x20>
 800d598:	3901      	subs	r1, #1
 800d59a:	1884      	adds	r4, r0, r2
 800d59c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d103      	bne.n	800d5b0 <strncmp+0x1c>
 800d5a8:	42a0      	cmp	r0, r4
 800d5aa:	d001      	beq.n	800d5b0 <strncmp+0x1c>
 800d5ac:	2a00      	cmp	r2, #0
 800d5ae:	d1f5      	bne.n	800d59c <strncmp+0x8>
 800d5b0:	1ad0      	subs	r0, r2, r3
 800d5b2:	bd10      	pop	{r4, pc}
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	e7fc      	b.n	800d5b2 <strncmp+0x1e>

0800d5b8 <_sbrk_r>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	4d05      	ldr	r5, [pc, #20]	@ (800d5d4 <_sbrk_r+0x1c>)
 800d5be:	4604      	mov	r4, r0
 800d5c0:	4608      	mov	r0, r1
 800d5c2:	602b      	str	r3, [r5, #0]
 800d5c4:	f7f4 f9f0 	bl	80019a8 <_sbrk>
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d102      	bne.n	800d5d2 <_sbrk_r+0x1a>
 800d5cc:	682b      	ldr	r3, [r5, #0]
 800d5ce:	b103      	cbz	r3, 800d5d2 <_sbrk_r+0x1a>
 800d5d0:	6023      	str	r3, [r4, #0]
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	2000052c 	.word	0x2000052c

0800d5d8 <memcpy>:
 800d5d8:	440a      	add	r2, r1
 800d5da:	1e43      	subs	r3, r0, #1
 800d5dc:	4291      	cmp	r1, r2
 800d5de:	d100      	bne.n	800d5e2 <memcpy+0xa>
 800d5e0:	4770      	bx	lr
 800d5e2:	b510      	push	{r4, lr}
 800d5e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5e8:	4291      	cmp	r1, r2
 800d5ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5ee:	d1f9      	bne.n	800d5e4 <memcpy+0xc>
 800d5f0:	bd10      	pop	{r4, pc}
 800d5f2:	0000      	movs	r0, r0
 800d5f4:	0000      	movs	r0, r0
	...

0800d5f8 <nan>:
 800d5f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d600 <nan+0x8>
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	00000000 	.word	0x00000000
 800d604:	7ff80000 	.word	0x7ff80000

0800d608 <__assert_func>:
 800d608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d60a:	4614      	mov	r4, r2
 800d60c:	461a      	mov	r2, r3
 800d60e:	4b09      	ldr	r3, [pc, #36]	@ (800d634 <__assert_func+0x2c>)
 800d610:	4605      	mov	r5, r0
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	68d8      	ldr	r0, [r3, #12]
 800d616:	b954      	cbnz	r4, 800d62e <__assert_func+0x26>
 800d618:	4b07      	ldr	r3, [pc, #28]	@ (800d638 <__assert_func+0x30>)
 800d61a:	461c      	mov	r4, r3
 800d61c:	9100      	str	r1, [sp, #0]
 800d61e:	4907      	ldr	r1, [pc, #28]	@ (800d63c <__assert_func+0x34>)
 800d620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d624:	462b      	mov	r3, r5
 800d626:	f000 fba3 	bl	800dd70 <fiprintf>
 800d62a:	f000 fc37 	bl	800de9c <abort>
 800d62e:	4b04      	ldr	r3, [pc, #16]	@ (800d640 <__assert_func+0x38>)
 800d630:	e7f4      	b.n	800d61c <__assert_func+0x14>
 800d632:	bf00      	nop
 800d634:	2000001c 	.word	0x2000001c
 800d638:	0800e475 	.word	0x0800e475
 800d63c:	0800e447 	.word	0x0800e447
 800d640:	0800e43a 	.word	0x0800e43a

0800d644 <_calloc_r>:
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	fba1 5402 	umull	r5, r4, r1, r2
 800d64a:	b93c      	cbnz	r4, 800d65c <_calloc_r+0x18>
 800d64c:	4629      	mov	r1, r5
 800d64e:	f7fd ffdf 	bl	800b610 <_malloc_r>
 800d652:	4606      	mov	r6, r0
 800d654:	b928      	cbnz	r0, 800d662 <_calloc_r+0x1e>
 800d656:	2600      	movs	r6, #0
 800d658:	4630      	mov	r0, r6
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	220c      	movs	r2, #12
 800d65e:	6002      	str	r2, [r0, #0]
 800d660:	e7f9      	b.n	800d656 <_calloc_r+0x12>
 800d662:	462a      	mov	r2, r5
 800d664:	4621      	mov	r1, r4
 800d666:	f7fd f876 	bl	800a756 <memset>
 800d66a:	e7f5      	b.n	800d658 <_calloc_r+0x14>

0800d66c <rshift>:
 800d66c:	6903      	ldr	r3, [r0, #16]
 800d66e:	114a      	asrs	r2, r1, #5
 800d670:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d678:	f100 0414 	add.w	r4, r0, #20
 800d67c:	dd45      	ble.n	800d70a <rshift+0x9e>
 800d67e:	f011 011f 	ands.w	r1, r1, #31
 800d682:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d686:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d68a:	d10c      	bne.n	800d6a6 <rshift+0x3a>
 800d68c:	f100 0710 	add.w	r7, r0, #16
 800d690:	4629      	mov	r1, r5
 800d692:	42b1      	cmp	r1, r6
 800d694:	d334      	bcc.n	800d700 <rshift+0x94>
 800d696:	1a9b      	subs	r3, r3, r2
 800d698:	1eea      	subs	r2, r5, #3
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4296      	cmp	r6, r2
 800d69e:	bf38      	it	cc
 800d6a0:	2300      	movcc	r3, #0
 800d6a2:	4423      	add	r3, r4
 800d6a4:	e015      	b.n	800d6d2 <rshift+0x66>
 800d6a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6aa:	f1c1 0820 	rsb	r8, r1, #32
 800d6ae:	f105 0e04 	add.w	lr, r5, #4
 800d6b2:	46a1      	mov	r9, r4
 800d6b4:	40cf      	lsrs	r7, r1
 800d6b6:	4576      	cmp	r6, lr
 800d6b8:	46f4      	mov	ip, lr
 800d6ba:	d815      	bhi.n	800d6e8 <rshift+0x7c>
 800d6bc:	1a9a      	subs	r2, r3, r2
 800d6be:	3501      	adds	r5, #1
 800d6c0:	0092      	lsls	r2, r2, #2
 800d6c2:	3a04      	subs	r2, #4
 800d6c4:	42ae      	cmp	r6, r5
 800d6c6:	bf38      	it	cc
 800d6c8:	2200      	movcc	r2, #0
 800d6ca:	18a3      	adds	r3, r4, r2
 800d6cc:	50a7      	str	r7, [r4, r2]
 800d6ce:	b107      	cbz	r7, 800d6d2 <rshift+0x66>
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	1b1a      	subs	r2, r3, r4
 800d6d4:	42a3      	cmp	r3, r4
 800d6d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d6da:	bf08      	it	eq
 800d6dc:	2300      	moveq	r3, #0
 800d6de:	6102      	str	r2, [r0, #16]
 800d6e0:	bf08      	it	eq
 800d6e2:	6143      	streq	r3, [r0, #20]
 800d6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6e8:	f8dc c000 	ldr.w	ip, [ip]
 800d6ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800d6f0:	ea4c 0707 	orr.w	r7, ip, r7
 800d6f4:	f849 7b04 	str.w	r7, [r9], #4
 800d6f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6fc:	40cf      	lsrs	r7, r1
 800d6fe:	e7da      	b.n	800d6b6 <rshift+0x4a>
 800d700:	f851 cb04 	ldr.w	ip, [r1], #4
 800d704:	f847 cf04 	str.w	ip, [r7, #4]!
 800d708:	e7c3      	b.n	800d692 <rshift+0x26>
 800d70a:	4623      	mov	r3, r4
 800d70c:	e7e1      	b.n	800d6d2 <rshift+0x66>

0800d70e <__hexdig_fun>:
 800d70e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d712:	2b09      	cmp	r3, #9
 800d714:	d802      	bhi.n	800d71c <__hexdig_fun+0xe>
 800d716:	3820      	subs	r0, #32
 800d718:	b2c0      	uxtb	r0, r0
 800d71a:	4770      	bx	lr
 800d71c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d720:	2b05      	cmp	r3, #5
 800d722:	d801      	bhi.n	800d728 <__hexdig_fun+0x1a>
 800d724:	3847      	subs	r0, #71	@ 0x47
 800d726:	e7f7      	b.n	800d718 <__hexdig_fun+0xa>
 800d728:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d72c:	2b05      	cmp	r3, #5
 800d72e:	d801      	bhi.n	800d734 <__hexdig_fun+0x26>
 800d730:	3827      	subs	r0, #39	@ 0x27
 800d732:	e7f1      	b.n	800d718 <__hexdig_fun+0xa>
 800d734:	2000      	movs	r0, #0
 800d736:	4770      	bx	lr

0800d738 <__gethex>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	b085      	sub	sp, #20
 800d73e:	468a      	mov	sl, r1
 800d740:	4690      	mov	r8, r2
 800d742:	9302      	str	r3, [sp, #8]
 800d744:	680b      	ldr	r3, [r1, #0]
 800d746:	9001      	str	r0, [sp, #4]
 800d748:	1c9c      	adds	r4, r3, #2
 800d74a:	46a1      	mov	r9, r4
 800d74c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d750:	2830      	cmp	r0, #48	@ 0x30
 800d752:	d0fa      	beq.n	800d74a <__gethex+0x12>
 800d754:	eba9 0303 	sub.w	r3, r9, r3
 800d758:	f1a3 0b02 	sub.w	fp, r3, #2
 800d75c:	f7ff ffd7 	bl	800d70e <__hexdig_fun>
 800d760:	4605      	mov	r5, r0
 800d762:	2800      	cmp	r0, #0
 800d764:	d166      	bne.n	800d834 <__gethex+0xfc>
 800d766:	2201      	movs	r2, #1
 800d768:	499e      	ldr	r1, [pc, #632]	@ (800d9e4 <__gethex+0x2ac>)
 800d76a:	4648      	mov	r0, r9
 800d76c:	f7ff ff12 	bl	800d594 <strncmp>
 800d770:	4607      	mov	r7, r0
 800d772:	2800      	cmp	r0, #0
 800d774:	d165      	bne.n	800d842 <__gethex+0x10a>
 800d776:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d77a:	4626      	mov	r6, r4
 800d77c:	f7ff ffc7 	bl	800d70e <__hexdig_fun>
 800d780:	2800      	cmp	r0, #0
 800d782:	d060      	beq.n	800d846 <__gethex+0x10e>
 800d784:	4623      	mov	r3, r4
 800d786:	7818      	ldrb	r0, [r3, #0]
 800d788:	4699      	mov	r9, r3
 800d78a:	3301      	adds	r3, #1
 800d78c:	2830      	cmp	r0, #48	@ 0x30
 800d78e:	d0fa      	beq.n	800d786 <__gethex+0x4e>
 800d790:	f7ff ffbd 	bl	800d70e <__hexdig_fun>
 800d794:	fab0 f580 	clz	r5, r0
 800d798:	f04f 0b01 	mov.w	fp, #1
 800d79c:	096d      	lsrs	r5, r5, #5
 800d79e:	464a      	mov	r2, r9
 800d7a0:	4616      	mov	r6, r2
 800d7a2:	3201      	adds	r2, #1
 800d7a4:	7830      	ldrb	r0, [r6, #0]
 800d7a6:	f7ff ffb2 	bl	800d70e <__hexdig_fun>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d1f8      	bne.n	800d7a0 <__gethex+0x68>
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	498c      	ldr	r1, [pc, #560]	@ (800d9e4 <__gethex+0x2ac>)
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f7ff feee 	bl	800d594 <strncmp>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d13e      	bne.n	800d83a <__gethex+0x102>
 800d7bc:	b944      	cbnz	r4, 800d7d0 <__gethex+0x98>
 800d7be:	1c74      	adds	r4, r6, #1
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	4616      	mov	r6, r2
 800d7c4:	3201      	adds	r2, #1
 800d7c6:	7830      	ldrb	r0, [r6, #0]
 800d7c8:	f7ff ffa1 	bl	800d70e <__hexdig_fun>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d1f8      	bne.n	800d7c2 <__gethex+0x8a>
 800d7d0:	1ba4      	subs	r4, r4, r6
 800d7d2:	00a7      	lsls	r7, r4, #2
 800d7d4:	7833      	ldrb	r3, [r6, #0]
 800d7d6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d7da:	2b50      	cmp	r3, #80	@ 0x50
 800d7dc:	d13d      	bne.n	800d85a <__gethex+0x122>
 800d7de:	7873      	ldrb	r3, [r6, #1]
 800d7e0:	2b2b      	cmp	r3, #43	@ 0x2b
 800d7e2:	d032      	beq.n	800d84a <__gethex+0x112>
 800d7e4:	2b2d      	cmp	r3, #45	@ 0x2d
 800d7e6:	d033      	beq.n	800d850 <__gethex+0x118>
 800d7e8:	1c71      	adds	r1, r6, #1
 800d7ea:	2400      	movs	r4, #0
 800d7ec:	7808      	ldrb	r0, [r1, #0]
 800d7ee:	f7ff ff8e 	bl	800d70e <__hexdig_fun>
 800d7f2:	1e43      	subs	r3, r0, #1
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	2b18      	cmp	r3, #24
 800d7f8:	d82f      	bhi.n	800d85a <__gethex+0x122>
 800d7fa:	f1a0 0210 	sub.w	r2, r0, #16
 800d7fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d802:	f7ff ff84 	bl	800d70e <__hexdig_fun>
 800d806:	f100 3cff 	add.w	ip, r0, #4294967295
 800d80a:	230a      	movs	r3, #10
 800d80c:	fa5f fc8c 	uxtb.w	ip, ip
 800d810:	f1bc 0f18 	cmp.w	ip, #24
 800d814:	d91e      	bls.n	800d854 <__gethex+0x11c>
 800d816:	b104      	cbz	r4, 800d81a <__gethex+0xe2>
 800d818:	4252      	negs	r2, r2
 800d81a:	4417      	add	r7, r2
 800d81c:	f8ca 1000 	str.w	r1, [sl]
 800d820:	b1ed      	cbz	r5, 800d85e <__gethex+0x126>
 800d822:	f1bb 0f00 	cmp.w	fp, #0
 800d826:	bf0c      	ite	eq
 800d828:	2506      	moveq	r5, #6
 800d82a:	2500      	movne	r5, #0
 800d82c:	4628      	mov	r0, r5
 800d82e:	b005      	add	sp, #20
 800d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d834:	2500      	movs	r5, #0
 800d836:	462c      	mov	r4, r5
 800d838:	e7b1      	b.n	800d79e <__gethex+0x66>
 800d83a:	2c00      	cmp	r4, #0
 800d83c:	d1c8      	bne.n	800d7d0 <__gethex+0x98>
 800d83e:	4627      	mov	r7, r4
 800d840:	e7c8      	b.n	800d7d4 <__gethex+0x9c>
 800d842:	464e      	mov	r6, r9
 800d844:	462f      	mov	r7, r5
 800d846:	2501      	movs	r5, #1
 800d848:	e7c4      	b.n	800d7d4 <__gethex+0x9c>
 800d84a:	2400      	movs	r4, #0
 800d84c:	1cb1      	adds	r1, r6, #2
 800d84e:	e7cd      	b.n	800d7ec <__gethex+0xb4>
 800d850:	2401      	movs	r4, #1
 800d852:	e7fb      	b.n	800d84c <__gethex+0x114>
 800d854:	fb03 0002 	mla	r0, r3, r2, r0
 800d858:	e7cf      	b.n	800d7fa <__gethex+0xc2>
 800d85a:	4631      	mov	r1, r6
 800d85c:	e7de      	b.n	800d81c <__gethex+0xe4>
 800d85e:	eba6 0309 	sub.w	r3, r6, r9
 800d862:	4629      	mov	r1, r5
 800d864:	3b01      	subs	r3, #1
 800d866:	2b07      	cmp	r3, #7
 800d868:	dc0a      	bgt.n	800d880 <__gethex+0x148>
 800d86a:	9801      	ldr	r0, [sp, #4]
 800d86c:	f7fd ff5c 	bl	800b728 <_Balloc>
 800d870:	4604      	mov	r4, r0
 800d872:	b940      	cbnz	r0, 800d886 <__gethex+0x14e>
 800d874:	4b5c      	ldr	r3, [pc, #368]	@ (800d9e8 <__gethex+0x2b0>)
 800d876:	4602      	mov	r2, r0
 800d878:	21e4      	movs	r1, #228	@ 0xe4
 800d87a:	485c      	ldr	r0, [pc, #368]	@ (800d9ec <__gethex+0x2b4>)
 800d87c:	f7ff fec4 	bl	800d608 <__assert_func>
 800d880:	3101      	adds	r1, #1
 800d882:	105b      	asrs	r3, r3, #1
 800d884:	e7ef      	b.n	800d866 <__gethex+0x12e>
 800d886:	f100 0a14 	add.w	sl, r0, #20
 800d88a:	2300      	movs	r3, #0
 800d88c:	4655      	mov	r5, sl
 800d88e:	469b      	mov	fp, r3
 800d890:	45b1      	cmp	r9, r6
 800d892:	d337      	bcc.n	800d904 <__gethex+0x1cc>
 800d894:	f845 bb04 	str.w	fp, [r5], #4
 800d898:	eba5 050a 	sub.w	r5, r5, sl
 800d89c:	4658      	mov	r0, fp
 800d89e:	10ad      	asrs	r5, r5, #2
 800d8a0:	6125      	str	r5, [r4, #16]
 800d8a2:	016d      	lsls	r5, r5, #5
 800d8a4:	f7fe f834 	bl	800b910 <__hi0bits>
 800d8a8:	f8d8 6000 	ldr.w	r6, [r8]
 800d8ac:	1a2d      	subs	r5, r5, r0
 800d8ae:	42b5      	cmp	r5, r6
 800d8b0:	dd54      	ble.n	800d95c <__gethex+0x224>
 800d8b2:	1bad      	subs	r5, r5, r6
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	f7fe fbd1 	bl	800c05e <__any_on>
 800d8bc:	4681      	mov	r9, r0
 800d8be:	b178      	cbz	r0, 800d8e0 <__gethex+0x1a8>
 800d8c0:	1e6b      	subs	r3, r5, #1
 800d8c2:	f04f 0901 	mov.w	r9, #1
 800d8c6:	1159      	asrs	r1, r3, #5
 800d8c8:	f003 021f 	and.w	r2, r3, #31
 800d8cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d8d0:	fa09 f202 	lsl.w	r2, r9, r2
 800d8d4:	420a      	tst	r2, r1
 800d8d6:	d003      	beq.n	800d8e0 <__gethex+0x1a8>
 800d8d8:	454b      	cmp	r3, r9
 800d8da:	dc36      	bgt.n	800d94a <__gethex+0x212>
 800d8dc:	f04f 0902 	mov.w	r9, #2
 800d8e0:	442f      	add	r7, r5
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f7ff fec1 	bl	800d66c <rshift>
 800d8ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8ee:	42bb      	cmp	r3, r7
 800d8f0:	da42      	bge.n	800d978 <__gethex+0x240>
 800d8f2:	4621      	mov	r1, r4
 800d8f4:	9801      	ldr	r0, [sp, #4]
 800d8f6:	f7fd ff57 	bl	800b7a8 <_Bfree>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8fe:	25a3      	movs	r5, #163	@ 0xa3
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	e793      	b.n	800d82c <__gethex+0xf4>
 800d904:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d908:	2a2e      	cmp	r2, #46	@ 0x2e
 800d90a:	d012      	beq.n	800d932 <__gethex+0x1fa>
 800d90c:	2b20      	cmp	r3, #32
 800d90e:	d104      	bne.n	800d91a <__gethex+0x1e2>
 800d910:	f845 bb04 	str.w	fp, [r5], #4
 800d914:	f04f 0b00 	mov.w	fp, #0
 800d918:	465b      	mov	r3, fp
 800d91a:	7830      	ldrb	r0, [r6, #0]
 800d91c:	9303      	str	r3, [sp, #12]
 800d91e:	f7ff fef6 	bl	800d70e <__hexdig_fun>
 800d922:	9b03      	ldr	r3, [sp, #12]
 800d924:	f000 000f 	and.w	r0, r0, #15
 800d928:	4098      	lsls	r0, r3
 800d92a:	3304      	adds	r3, #4
 800d92c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d930:	e7ae      	b.n	800d890 <__gethex+0x158>
 800d932:	45b1      	cmp	r9, r6
 800d934:	d8ea      	bhi.n	800d90c <__gethex+0x1d4>
 800d936:	2201      	movs	r2, #1
 800d938:	492a      	ldr	r1, [pc, #168]	@ (800d9e4 <__gethex+0x2ac>)
 800d93a:	4630      	mov	r0, r6
 800d93c:	9303      	str	r3, [sp, #12]
 800d93e:	f7ff fe29 	bl	800d594 <strncmp>
 800d942:	9b03      	ldr	r3, [sp, #12]
 800d944:	2800      	cmp	r0, #0
 800d946:	d1e1      	bne.n	800d90c <__gethex+0x1d4>
 800d948:	e7a2      	b.n	800d890 <__gethex+0x158>
 800d94a:	1ea9      	subs	r1, r5, #2
 800d94c:	4620      	mov	r0, r4
 800d94e:	f7fe fb86 	bl	800c05e <__any_on>
 800d952:	2800      	cmp	r0, #0
 800d954:	d0c2      	beq.n	800d8dc <__gethex+0x1a4>
 800d956:	f04f 0903 	mov.w	r9, #3
 800d95a:	e7c1      	b.n	800d8e0 <__gethex+0x1a8>
 800d95c:	da09      	bge.n	800d972 <__gethex+0x23a>
 800d95e:	1b75      	subs	r5, r6, r5
 800d960:	4621      	mov	r1, r4
 800d962:	9801      	ldr	r0, [sp, #4]
 800d964:	462a      	mov	r2, r5
 800d966:	1b7f      	subs	r7, r7, r5
 800d968:	f7fe f938 	bl	800bbdc <__lshift>
 800d96c:	4604      	mov	r4, r0
 800d96e:	f100 0a14 	add.w	sl, r0, #20
 800d972:	f04f 0900 	mov.w	r9, #0
 800d976:	e7b8      	b.n	800d8ea <__gethex+0x1b2>
 800d978:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d97c:	42bd      	cmp	r5, r7
 800d97e:	dd6f      	ble.n	800da60 <__gethex+0x328>
 800d980:	1bed      	subs	r5, r5, r7
 800d982:	42ae      	cmp	r6, r5
 800d984:	dc34      	bgt.n	800d9f0 <__gethex+0x2b8>
 800d986:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d022      	beq.n	800d9d4 <__gethex+0x29c>
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d024      	beq.n	800d9dc <__gethex+0x2a4>
 800d992:	2b01      	cmp	r3, #1
 800d994:	d115      	bne.n	800d9c2 <__gethex+0x28a>
 800d996:	42ae      	cmp	r6, r5
 800d998:	d113      	bne.n	800d9c2 <__gethex+0x28a>
 800d99a:	2e01      	cmp	r6, #1
 800d99c:	d10b      	bne.n	800d9b6 <__gethex+0x27e>
 800d99e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9a2:	2562      	movs	r5, #98	@ 0x62
 800d9a4:	9a02      	ldr	r2, [sp, #8]
 800d9a6:	6013      	str	r3, [r2, #0]
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	6123      	str	r3, [r4, #16]
 800d9ac:	f8ca 3000 	str.w	r3, [sl]
 800d9b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9b2:	601c      	str	r4, [r3, #0]
 800d9b4:	e73a      	b.n	800d82c <__gethex+0xf4>
 800d9b6:	1e71      	subs	r1, r6, #1
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f7fe fb50 	bl	800c05e <__any_on>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d1ed      	bne.n	800d99e <__gethex+0x266>
 800d9c2:	4621      	mov	r1, r4
 800d9c4:	9801      	ldr	r0, [sp, #4]
 800d9c6:	f7fd feef 	bl	800b7a8 <_Bfree>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9ce:	2550      	movs	r5, #80	@ 0x50
 800d9d0:	6013      	str	r3, [r2, #0]
 800d9d2:	e72b      	b.n	800d82c <__gethex+0xf4>
 800d9d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1f3      	bne.n	800d9c2 <__gethex+0x28a>
 800d9da:	e7e0      	b.n	800d99e <__gethex+0x266>
 800d9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d1dd      	bne.n	800d99e <__gethex+0x266>
 800d9e2:	e7ee      	b.n	800d9c2 <__gethex+0x28a>
 800d9e4:	0800e2c8 	.word	0x0800e2c8
 800d9e8:	0800e15d 	.word	0x0800e15d
 800d9ec:	0800e476 	.word	0x0800e476
 800d9f0:	1e6f      	subs	r7, r5, #1
 800d9f2:	f1b9 0f00 	cmp.w	r9, #0
 800d9f6:	d130      	bne.n	800da5a <__gethex+0x322>
 800d9f8:	b127      	cbz	r7, 800da04 <__gethex+0x2cc>
 800d9fa:	4639      	mov	r1, r7
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f7fe fb2e 	bl	800c05e <__any_on>
 800da02:	4681      	mov	r9, r0
 800da04:	117a      	asrs	r2, r7, #5
 800da06:	2301      	movs	r3, #1
 800da08:	f007 071f 	and.w	r7, r7, #31
 800da0c:	4629      	mov	r1, r5
 800da0e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da12:	4620      	mov	r0, r4
 800da14:	40bb      	lsls	r3, r7
 800da16:	1b76      	subs	r6, r6, r5
 800da18:	2502      	movs	r5, #2
 800da1a:	4213      	tst	r3, r2
 800da1c:	bf18      	it	ne
 800da1e:	f049 0902 	orrne.w	r9, r9, #2
 800da22:	f7ff fe23 	bl	800d66c <rshift>
 800da26:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da2a:	f1b9 0f00 	cmp.w	r9, #0
 800da2e:	d047      	beq.n	800dac0 <__gethex+0x388>
 800da30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da34:	2b02      	cmp	r3, #2
 800da36:	d015      	beq.n	800da64 <__gethex+0x32c>
 800da38:	2b03      	cmp	r3, #3
 800da3a:	d017      	beq.n	800da6c <__gethex+0x334>
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d109      	bne.n	800da54 <__gethex+0x31c>
 800da40:	f019 0f02 	tst.w	r9, #2
 800da44:	d006      	beq.n	800da54 <__gethex+0x31c>
 800da46:	f8da 3000 	ldr.w	r3, [sl]
 800da4a:	ea49 0903 	orr.w	r9, r9, r3
 800da4e:	f019 0f01 	tst.w	r9, #1
 800da52:	d10e      	bne.n	800da72 <__gethex+0x33a>
 800da54:	f045 0510 	orr.w	r5, r5, #16
 800da58:	e032      	b.n	800dac0 <__gethex+0x388>
 800da5a:	f04f 0901 	mov.w	r9, #1
 800da5e:	e7d1      	b.n	800da04 <__gethex+0x2cc>
 800da60:	2501      	movs	r5, #1
 800da62:	e7e2      	b.n	800da2a <__gethex+0x2f2>
 800da64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da66:	f1c3 0301 	rsb	r3, r3, #1
 800da6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d0f0      	beq.n	800da54 <__gethex+0x31c>
 800da72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da76:	f104 0314 	add.w	r3, r4, #20
 800da7a:	f04f 0c00 	mov.w	ip, #0
 800da7e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da82:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da86:	4618      	mov	r0, r3
 800da88:	f853 2b04 	ldr.w	r2, [r3], #4
 800da8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da90:	d01b      	beq.n	800daca <__gethex+0x392>
 800da92:	3201      	adds	r2, #1
 800da94:	6002      	str	r2, [r0, #0]
 800da96:	2d02      	cmp	r5, #2
 800da98:	f104 0314 	add.w	r3, r4, #20
 800da9c:	d13c      	bne.n	800db18 <__gethex+0x3e0>
 800da9e:	f8d8 2000 	ldr.w	r2, [r8]
 800daa2:	3a01      	subs	r2, #1
 800daa4:	42b2      	cmp	r2, r6
 800daa6:	d109      	bne.n	800dabc <__gethex+0x384>
 800daa8:	1171      	asrs	r1, r6, #5
 800daaa:	2201      	movs	r2, #1
 800daac:	f006 061f 	and.w	r6, r6, #31
 800dab0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dab4:	fa02 f606 	lsl.w	r6, r2, r6
 800dab8:	421e      	tst	r6, r3
 800daba:	d13a      	bne.n	800db32 <__gethex+0x3fa>
 800dabc:	f045 0520 	orr.w	r5, r5, #32
 800dac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dac2:	601c      	str	r4, [r3, #0]
 800dac4:	9b02      	ldr	r3, [sp, #8]
 800dac6:	601f      	str	r7, [r3, #0]
 800dac8:	e6b0      	b.n	800d82c <__gethex+0xf4>
 800daca:	4299      	cmp	r1, r3
 800dacc:	f843 cc04 	str.w	ip, [r3, #-4]
 800dad0:	d8d9      	bhi.n	800da86 <__gethex+0x34e>
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	459b      	cmp	fp, r3
 800dad6:	db17      	blt.n	800db08 <__gethex+0x3d0>
 800dad8:	6861      	ldr	r1, [r4, #4]
 800dada:	9801      	ldr	r0, [sp, #4]
 800dadc:	3101      	adds	r1, #1
 800dade:	f7fd fe23 	bl	800b728 <_Balloc>
 800dae2:	4681      	mov	r9, r0
 800dae4:	b918      	cbnz	r0, 800daee <__gethex+0x3b6>
 800dae6:	4b1a      	ldr	r3, [pc, #104]	@ (800db50 <__gethex+0x418>)
 800dae8:	4602      	mov	r2, r0
 800daea:	2184      	movs	r1, #132	@ 0x84
 800daec:	e6c5      	b.n	800d87a <__gethex+0x142>
 800daee:	6922      	ldr	r2, [r4, #16]
 800daf0:	f104 010c 	add.w	r1, r4, #12
 800daf4:	300c      	adds	r0, #12
 800daf6:	3202      	adds	r2, #2
 800daf8:	0092      	lsls	r2, r2, #2
 800dafa:	f7ff fd6d 	bl	800d5d8 <memcpy>
 800dafe:	4621      	mov	r1, r4
 800db00:	464c      	mov	r4, r9
 800db02:	9801      	ldr	r0, [sp, #4]
 800db04:	f7fd fe50 	bl	800b7a8 <_Bfree>
 800db08:	6923      	ldr	r3, [r4, #16]
 800db0a:	1c5a      	adds	r2, r3, #1
 800db0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db10:	6122      	str	r2, [r4, #16]
 800db12:	2201      	movs	r2, #1
 800db14:	615a      	str	r2, [r3, #20]
 800db16:	e7be      	b.n	800da96 <__gethex+0x35e>
 800db18:	6922      	ldr	r2, [r4, #16]
 800db1a:	455a      	cmp	r2, fp
 800db1c:	dd0b      	ble.n	800db36 <__gethex+0x3fe>
 800db1e:	2101      	movs	r1, #1
 800db20:	4620      	mov	r0, r4
 800db22:	f7ff fda3 	bl	800d66c <rshift>
 800db26:	3701      	adds	r7, #1
 800db28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db2c:	42bb      	cmp	r3, r7
 800db2e:	f6ff aee0 	blt.w	800d8f2 <__gethex+0x1ba>
 800db32:	2501      	movs	r5, #1
 800db34:	e7c2      	b.n	800dabc <__gethex+0x384>
 800db36:	f016 061f 	ands.w	r6, r6, #31
 800db3a:	d0fa      	beq.n	800db32 <__gethex+0x3fa>
 800db3c:	4453      	add	r3, sl
 800db3e:	f1c6 0620 	rsb	r6, r6, #32
 800db42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db46:	f7fd fee3 	bl	800b910 <__hi0bits>
 800db4a:	42b0      	cmp	r0, r6
 800db4c:	dbe7      	blt.n	800db1e <__gethex+0x3e6>
 800db4e:	e7f0      	b.n	800db32 <__gethex+0x3fa>
 800db50:	0800e15d 	.word	0x0800e15d

0800db54 <L_shift>:
 800db54:	f1c2 0208 	rsb	r2, r2, #8
 800db58:	0092      	lsls	r2, r2, #2
 800db5a:	b570      	push	{r4, r5, r6, lr}
 800db5c:	f1c2 0620 	rsb	r6, r2, #32
 800db60:	6843      	ldr	r3, [r0, #4]
 800db62:	6804      	ldr	r4, [r0, #0]
 800db64:	fa03 f506 	lsl.w	r5, r3, r6
 800db68:	40d3      	lsrs	r3, r2
 800db6a:	432c      	orrs	r4, r5
 800db6c:	6004      	str	r4, [r0, #0]
 800db6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800db72:	4288      	cmp	r0, r1
 800db74:	d3f4      	bcc.n	800db60 <L_shift+0xc>
 800db76:	bd70      	pop	{r4, r5, r6, pc}

0800db78 <__match>:
 800db78:	6803      	ldr	r3, [r0, #0]
 800db7a:	3301      	adds	r3, #1
 800db7c:	b530      	push	{r4, r5, lr}
 800db7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db82:	b914      	cbnz	r4, 800db8a <__match+0x12>
 800db84:	6003      	str	r3, [r0, #0]
 800db86:	2001      	movs	r0, #1
 800db88:	bd30      	pop	{r4, r5, pc}
 800db8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800db92:	2d19      	cmp	r5, #25
 800db94:	bf98      	it	ls
 800db96:	3220      	addls	r2, #32
 800db98:	42a2      	cmp	r2, r4
 800db9a:	d0f0      	beq.n	800db7e <__match+0x6>
 800db9c:	2000      	movs	r0, #0
 800db9e:	e7f3      	b.n	800db88 <__match+0x10>

0800dba0 <__hexnan>:
 800dba0:	680b      	ldr	r3, [r1, #0]
 800dba2:	6801      	ldr	r1, [r0, #0]
 800dba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba8:	115e      	asrs	r6, r3, #5
 800dbaa:	f013 031f 	ands.w	r3, r3, #31
 800dbae:	f04f 0500 	mov.w	r5, #0
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbb8:	4682      	mov	sl, r0
 800dbba:	4690      	mov	r8, r2
 800dbbc:	46ab      	mov	fp, r5
 800dbbe:	bf18      	it	ne
 800dbc0:	3604      	addne	r6, #4
 800dbc2:	9301      	str	r3, [sp, #4]
 800dbc4:	9502      	str	r5, [sp, #8]
 800dbc6:	1f37      	subs	r7, r6, #4
 800dbc8:	f846 5c04 	str.w	r5, [r6, #-4]
 800dbcc:	46b9      	mov	r9, r7
 800dbce:	463c      	mov	r4, r7
 800dbd0:	1c4b      	adds	r3, r1, #1
 800dbd2:	784a      	ldrb	r2, [r1, #1]
 800dbd4:	9303      	str	r3, [sp, #12]
 800dbd6:	b342      	cbz	r2, 800dc2a <__hexnan+0x8a>
 800dbd8:	4610      	mov	r0, r2
 800dbda:	9105      	str	r1, [sp, #20]
 800dbdc:	9204      	str	r2, [sp, #16]
 800dbde:	f7ff fd96 	bl	800d70e <__hexdig_fun>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d151      	bne.n	800dc8a <__hexnan+0xea>
 800dbe6:	9a04      	ldr	r2, [sp, #16]
 800dbe8:	9905      	ldr	r1, [sp, #20]
 800dbea:	2a20      	cmp	r2, #32
 800dbec:	d818      	bhi.n	800dc20 <__hexnan+0x80>
 800dbee:	9b02      	ldr	r3, [sp, #8]
 800dbf0:	459b      	cmp	fp, r3
 800dbf2:	dd13      	ble.n	800dc1c <__hexnan+0x7c>
 800dbf4:	454c      	cmp	r4, r9
 800dbf6:	d206      	bcs.n	800dc06 <__hexnan+0x66>
 800dbf8:	2d07      	cmp	r5, #7
 800dbfa:	dc04      	bgt.n	800dc06 <__hexnan+0x66>
 800dbfc:	462a      	mov	r2, r5
 800dbfe:	4649      	mov	r1, r9
 800dc00:	4620      	mov	r0, r4
 800dc02:	f7ff ffa7 	bl	800db54 <L_shift>
 800dc06:	4544      	cmp	r4, r8
 800dc08:	d951      	bls.n	800dcae <__hexnan+0x10e>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f1a4 0904 	sub.w	r9, r4, #4
 800dc10:	f8cd b008 	str.w	fp, [sp, #8]
 800dc14:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc18:	461d      	mov	r5, r3
 800dc1a:	464c      	mov	r4, r9
 800dc1c:	9903      	ldr	r1, [sp, #12]
 800dc1e:	e7d7      	b.n	800dbd0 <__hexnan+0x30>
 800dc20:	2a29      	cmp	r2, #41	@ 0x29
 800dc22:	d156      	bne.n	800dcd2 <__hexnan+0x132>
 800dc24:	3102      	adds	r1, #2
 800dc26:	f8ca 1000 	str.w	r1, [sl]
 800dc2a:	f1bb 0f00 	cmp.w	fp, #0
 800dc2e:	d050      	beq.n	800dcd2 <__hexnan+0x132>
 800dc30:	454c      	cmp	r4, r9
 800dc32:	d206      	bcs.n	800dc42 <__hexnan+0xa2>
 800dc34:	2d07      	cmp	r5, #7
 800dc36:	dc04      	bgt.n	800dc42 <__hexnan+0xa2>
 800dc38:	462a      	mov	r2, r5
 800dc3a:	4649      	mov	r1, r9
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f7ff ff89 	bl	800db54 <L_shift>
 800dc42:	4544      	cmp	r4, r8
 800dc44:	d935      	bls.n	800dcb2 <__hexnan+0x112>
 800dc46:	f1a8 0204 	sub.w	r2, r8, #4
 800dc4a:	4623      	mov	r3, r4
 800dc4c:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc50:	429f      	cmp	r7, r3
 800dc52:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc56:	d2f9      	bcs.n	800dc4c <__hexnan+0xac>
 800dc58:	1b3b      	subs	r3, r7, r4
 800dc5a:	3e03      	subs	r6, #3
 800dc5c:	3401      	adds	r4, #1
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f023 0303 	bic.w	r3, r3, #3
 800dc64:	3304      	adds	r3, #4
 800dc66:	42b4      	cmp	r4, r6
 800dc68:	bf88      	it	hi
 800dc6a:	2304      	movhi	r3, #4
 800dc6c:	4443      	add	r3, r8
 800dc6e:	f843 2b04 	str.w	r2, [r3], #4
 800dc72:	429f      	cmp	r7, r3
 800dc74:	d2fb      	bcs.n	800dc6e <__hexnan+0xce>
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	b91b      	cbnz	r3, 800dc82 <__hexnan+0xe2>
 800dc7a:	4547      	cmp	r7, r8
 800dc7c:	d127      	bne.n	800dcce <__hexnan+0x12e>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	603b      	str	r3, [r7, #0]
 800dc82:	2005      	movs	r0, #5
 800dc84:	b007      	add	sp, #28
 800dc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8a:	3501      	adds	r5, #1
 800dc8c:	f10b 0b01 	add.w	fp, fp, #1
 800dc90:	2d08      	cmp	r5, #8
 800dc92:	dd05      	ble.n	800dca0 <__hexnan+0x100>
 800dc94:	4544      	cmp	r4, r8
 800dc96:	d9c1      	bls.n	800dc1c <__hexnan+0x7c>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	3c04      	subs	r4, #4
 800dc9c:	2501      	movs	r5, #1
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	6822      	ldr	r2, [r4, #0]
 800dca2:	f000 000f 	and.w	r0, r0, #15
 800dca6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcaa:	6020      	str	r0, [r4, #0]
 800dcac:	e7b6      	b.n	800dc1c <__hexnan+0x7c>
 800dcae:	2508      	movs	r5, #8
 800dcb0:	e7b4      	b.n	800dc1c <__hexnan+0x7c>
 800dcb2:	9b01      	ldr	r3, [sp, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d0de      	beq.n	800dc76 <__hexnan+0xd6>
 800dcb8:	f1c3 0320 	rsb	r3, r3, #32
 800dcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc0:	40da      	lsrs	r2, r3
 800dcc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	f846 3c04 	str.w	r3, [r6, #-4]
 800dccc:	e7d3      	b.n	800dc76 <__hexnan+0xd6>
 800dcce:	3f04      	subs	r7, #4
 800dcd0:	e7d1      	b.n	800dc76 <__hexnan+0xd6>
 800dcd2:	2004      	movs	r0, #4
 800dcd4:	e7d6      	b.n	800dc84 <__hexnan+0xe4>

0800dcd6 <__ascii_mbtowc>:
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	b901      	cbnz	r1, 800dcdc <__ascii_mbtowc+0x6>
 800dcda:	a901      	add	r1, sp, #4
 800dcdc:	b142      	cbz	r2, 800dcf0 <__ascii_mbtowc+0x1a>
 800dcde:	b14b      	cbz	r3, 800dcf4 <__ascii_mbtowc+0x1e>
 800dce0:	7813      	ldrb	r3, [r2, #0]
 800dce2:	600b      	str	r3, [r1, #0]
 800dce4:	7812      	ldrb	r2, [r2, #0]
 800dce6:	1e10      	subs	r0, r2, #0
 800dce8:	bf18      	it	ne
 800dcea:	2001      	movne	r0, #1
 800dcec:	b002      	add	sp, #8
 800dcee:	4770      	bx	lr
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	e7fb      	b.n	800dcec <__ascii_mbtowc+0x16>
 800dcf4:	f06f 0001 	mvn.w	r0, #1
 800dcf8:	e7f8      	b.n	800dcec <__ascii_mbtowc+0x16>

0800dcfa <_realloc_r>:
 800dcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfe:	4680      	mov	r8, r0
 800dd00:	4615      	mov	r5, r2
 800dd02:	460c      	mov	r4, r1
 800dd04:	b921      	cbnz	r1, 800dd10 <_realloc_r+0x16>
 800dd06:	4611      	mov	r1, r2
 800dd08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0c:	f7fd bc80 	b.w	800b610 <_malloc_r>
 800dd10:	b92a      	cbnz	r2, 800dd1e <_realloc_r+0x24>
 800dd12:	f7fd fc09 	bl	800b528 <_free_r>
 800dd16:	2400      	movs	r4, #0
 800dd18:	4620      	mov	r0, r4
 800dd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd1e:	f000 f8c4 	bl	800deaa <_malloc_usable_size_r>
 800dd22:	4285      	cmp	r5, r0
 800dd24:	4606      	mov	r6, r0
 800dd26:	d802      	bhi.n	800dd2e <_realloc_r+0x34>
 800dd28:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd2c:	d8f4      	bhi.n	800dd18 <_realloc_r+0x1e>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4640      	mov	r0, r8
 800dd32:	f7fd fc6d 	bl	800b610 <_malloc_r>
 800dd36:	4607      	mov	r7, r0
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d0ec      	beq.n	800dd16 <_realloc_r+0x1c>
 800dd3c:	42b5      	cmp	r5, r6
 800dd3e:	462a      	mov	r2, r5
 800dd40:	4621      	mov	r1, r4
 800dd42:	bf28      	it	cs
 800dd44:	4632      	movcs	r2, r6
 800dd46:	f7ff fc47 	bl	800d5d8 <memcpy>
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	463c      	mov	r4, r7
 800dd50:	f7fd fbea 	bl	800b528 <_free_r>
 800dd54:	e7e0      	b.n	800dd18 <_realloc_r+0x1e>

0800dd56 <__ascii_wctomb>:
 800dd56:	4603      	mov	r3, r0
 800dd58:	4608      	mov	r0, r1
 800dd5a:	b141      	cbz	r1, 800dd6e <__ascii_wctomb+0x18>
 800dd5c:	2aff      	cmp	r2, #255	@ 0xff
 800dd5e:	d904      	bls.n	800dd6a <__ascii_wctomb+0x14>
 800dd60:	228a      	movs	r2, #138	@ 0x8a
 800dd62:	f04f 30ff 	mov.w	r0, #4294967295
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	4770      	bx	lr
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	700a      	strb	r2, [r1, #0]
 800dd6e:	4770      	bx	lr

0800dd70 <fiprintf>:
 800dd70:	b40e      	push	{r1, r2, r3}
 800dd72:	b503      	push	{r0, r1, lr}
 800dd74:	ab03      	add	r3, sp, #12
 800dd76:	4601      	mov	r1, r0
 800dd78:	4805      	ldr	r0, [pc, #20]	@ (800dd90 <fiprintf+0x20>)
 800dd7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd7e:	6800      	ldr	r0, [r0, #0]
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	f7ff f995 	bl	800d0b0 <_vfiprintf_r>
 800dd86:	b002      	add	sp, #8
 800dd88:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd8c:	b003      	add	sp, #12
 800dd8e:	4770      	bx	lr
 800dd90:	2000001c 	.word	0x2000001c

0800dd94 <__swhatbuf_r>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	460c      	mov	r4, r1
 800dd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd9c:	b096      	sub	sp, #88	@ 0x58
 800dd9e:	4615      	mov	r5, r2
 800dda0:	2900      	cmp	r1, #0
 800dda2:	461e      	mov	r6, r3
 800dda4:	da0c      	bge.n	800ddc0 <__swhatbuf_r+0x2c>
 800dda6:	89a3      	ldrh	r3, [r4, #12]
 800dda8:	2100      	movs	r1, #0
 800ddaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddae:	bf14      	ite	ne
 800ddb0:	2340      	movne	r3, #64	@ 0x40
 800ddb2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	6031      	str	r1, [r6, #0]
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	b016      	add	sp, #88	@ 0x58
 800ddbe:	bd70      	pop	{r4, r5, r6, pc}
 800ddc0:	466a      	mov	r2, sp
 800ddc2:	f000 f849 	bl	800de58 <_fstat_r>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	dbed      	blt.n	800dda6 <__swhatbuf_r+0x12>
 800ddca:	9901      	ldr	r1, [sp, #4]
 800ddcc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddd0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddd4:	4259      	negs	r1, r3
 800ddd6:	4159      	adcs	r1, r3
 800ddd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dddc:	e7eb      	b.n	800ddb6 <__swhatbuf_r+0x22>

0800ddde <__smakebuf_r>:
 800ddde:	898b      	ldrh	r3, [r1, #12]
 800dde0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dde2:	079d      	lsls	r5, r3, #30
 800dde4:	4606      	mov	r6, r0
 800dde6:	460c      	mov	r4, r1
 800dde8:	d507      	bpl.n	800ddfa <__smakebuf_r+0x1c>
 800ddea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddee:	6023      	str	r3, [r4, #0]
 800ddf0:	6123      	str	r3, [r4, #16]
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	6163      	str	r3, [r4, #20]
 800ddf6:	b003      	add	sp, #12
 800ddf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddfa:	ab01      	add	r3, sp, #4
 800ddfc:	466a      	mov	r2, sp
 800ddfe:	f7ff ffc9 	bl	800dd94 <__swhatbuf_r>
 800de02:	9f00      	ldr	r7, [sp, #0]
 800de04:	4605      	mov	r5, r0
 800de06:	4630      	mov	r0, r6
 800de08:	4639      	mov	r1, r7
 800de0a:	f7fd fc01 	bl	800b610 <_malloc_r>
 800de0e:	b948      	cbnz	r0, 800de24 <__smakebuf_r+0x46>
 800de10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de14:	059a      	lsls	r2, r3, #22
 800de16:	d4ee      	bmi.n	800ddf6 <__smakebuf_r+0x18>
 800de18:	f023 0303 	bic.w	r3, r3, #3
 800de1c:	f043 0302 	orr.w	r3, r3, #2
 800de20:	81a3      	strh	r3, [r4, #12]
 800de22:	e7e2      	b.n	800ddea <__smakebuf_r+0xc>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	6020      	str	r0, [r4, #0]
 800de28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de2c:	81a3      	strh	r3, [r4, #12]
 800de2e:	9b01      	ldr	r3, [sp, #4]
 800de30:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de34:	b15b      	cbz	r3, 800de4e <__smakebuf_r+0x70>
 800de36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de3a:	4630      	mov	r0, r6
 800de3c:	f000 f81e 	bl	800de7c <_isatty_r>
 800de40:	b128      	cbz	r0, 800de4e <__smakebuf_r+0x70>
 800de42:	89a3      	ldrh	r3, [r4, #12]
 800de44:	f023 0303 	bic.w	r3, r3, #3
 800de48:	f043 0301 	orr.w	r3, r3, #1
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	431d      	orrs	r5, r3
 800de52:	81a5      	strh	r5, [r4, #12]
 800de54:	e7cf      	b.n	800ddf6 <__smakebuf_r+0x18>
	...

0800de58 <_fstat_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	2300      	movs	r3, #0
 800de5c:	4d06      	ldr	r5, [pc, #24]	@ (800de78 <_fstat_r+0x20>)
 800de5e:	4604      	mov	r4, r0
 800de60:	4608      	mov	r0, r1
 800de62:	4611      	mov	r1, r2
 800de64:	602b      	str	r3, [r5, #0]
 800de66:	f7f3 fd77 	bl	8001958 <_fstat>
 800de6a:	1c43      	adds	r3, r0, #1
 800de6c:	d102      	bne.n	800de74 <_fstat_r+0x1c>
 800de6e:	682b      	ldr	r3, [r5, #0]
 800de70:	b103      	cbz	r3, 800de74 <_fstat_r+0x1c>
 800de72:	6023      	str	r3, [r4, #0]
 800de74:	bd38      	pop	{r3, r4, r5, pc}
 800de76:	bf00      	nop
 800de78:	2000052c 	.word	0x2000052c

0800de7c <_isatty_r>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	2300      	movs	r3, #0
 800de80:	4d05      	ldr	r5, [pc, #20]	@ (800de98 <_isatty_r+0x1c>)
 800de82:	4604      	mov	r4, r0
 800de84:	4608      	mov	r0, r1
 800de86:	602b      	str	r3, [r5, #0]
 800de88:	f7f3 fd76 	bl	8001978 <_isatty>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d102      	bne.n	800de96 <_isatty_r+0x1a>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	b103      	cbz	r3, 800de96 <_isatty_r+0x1a>
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	bd38      	pop	{r3, r4, r5, pc}
 800de98:	2000052c 	.word	0x2000052c

0800de9c <abort>:
 800de9c:	2006      	movs	r0, #6
 800de9e:	b508      	push	{r3, lr}
 800dea0:	f000 f834 	bl	800df0c <raise>
 800dea4:	2001      	movs	r0, #1
 800dea6:	f7f3 fd07 	bl	80018b8 <_exit>

0800deaa <_malloc_usable_size_r>:
 800deaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deae:	1f18      	subs	r0, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	bfbc      	itt	lt
 800deb4:	580b      	ldrlt	r3, [r1, r0]
 800deb6:	18c0      	addlt	r0, r0, r3
 800deb8:	4770      	bx	lr

0800deba <_raise_r>:
 800deba:	291f      	cmp	r1, #31
 800debc:	b538      	push	{r3, r4, r5, lr}
 800debe:	4605      	mov	r5, r0
 800dec0:	460c      	mov	r4, r1
 800dec2:	d904      	bls.n	800dece <_raise_r+0x14>
 800dec4:	2316      	movs	r3, #22
 800dec6:	6003      	str	r3, [r0, #0]
 800dec8:	f04f 30ff 	mov.w	r0, #4294967295
 800decc:	bd38      	pop	{r3, r4, r5, pc}
 800dece:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ded0:	b112      	cbz	r2, 800ded8 <_raise_r+0x1e>
 800ded2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ded6:	b94b      	cbnz	r3, 800deec <_raise_r+0x32>
 800ded8:	4628      	mov	r0, r5
 800deda:	f000 f831 	bl	800df40 <_getpid_r>
 800dede:	4622      	mov	r2, r4
 800dee0:	4601      	mov	r1, r0
 800dee2:	4628      	mov	r0, r5
 800dee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dee8:	f000 b818 	b.w	800df1c <_kill_r>
 800deec:	2b01      	cmp	r3, #1
 800deee:	d00a      	beq.n	800df06 <_raise_r+0x4c>
 800def0:	1c59      	adds	r1, r3, #1
 800def2:	d103      	bne.n	800defc <_raise_r+0x42>
 800def4:	2316      	movs	r3, #22
 800def6:	6003      	str	r3, [r0, #0]
 800def8:	2001      	movs	r0, #1
 800defa:	e7e7      	b.n	800decc <_raise_r+0x12>
 800defc:	2100      	movs	r1, #0
 800defe:	4620      	mov	r0, r4
 800df00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df04:	4798      	blx	r3
 800df06:	2000      	movs	r0, #0
 800df08:	e7e0      	b.n	800decc <_raise_r+0x12>
	...

0800df0c <raise>:
 800df0c:	4b02      	ldr	r3, [pc, #8]	@ (800df18 <raise+0xc>)
 800df0e:	4601      	mov	r1, r0
 800df10:	6818      	ldr	r0, [r3, #0]
 800df12:	f7ff bfd2 	b.w	800deba <_raise_r>
 800df16:	bf00      	nop
 800df18:	2000001c 	.word	0x2000001c

0800df1c <_kill_r>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	2300      	movs	r3, #0
 800df20:	4d06      	ldr	r5, [pc, #24]	@ (800df3c <_kill_r+0x20>)
 800df22:	4604      	mov	r4, r0
 800df24:	4608      	mov	r0, r1
 800df26:	4611      	mov	r1, r2
 800df28:	602b      	str	r3, [r5, #0]
 800df2a:	f7f3 fcb5 	bl	8001898 <_kill>
 800df2e:	1c43      	adds	r3, r0, #1
 800df30:	d102      	bne.n	800df38 <_kill_r+0x1c>
 800df32:	682b      	ldr	r3, [r5, #0]
 800df34:	b103      	cbz	r3, 800df38 <_kill_r+0x1c>
 800df36:	6023      	str	r3, [r4, #0]
 800df38:	bd38      	pop	{r3, r4, r5, pc}
 800df3a:	bf00      	nop
 800df3c:	2000052c 	.word	0x2000052c

0800df40 <_getpid_r>:
 800df40:	f7f3 bca2 	b.w	8001888 <_getpid>

0800df44 <_init>:
 800df44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df46:	bf00      	nop
 800df48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df4a:	bc08      	pop	{r3}
 800df4c:	469e      	mov	lr, r3
 800df4e:	4770      	bx	lr

0800df50 <_fini>:
 800df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df52:	bf00      	nop
 800df54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df56:	bc08      	pop	{r3}
 800df58:	469e      	mov	lr, r3
 800df5a:	4770      	bx	lr
