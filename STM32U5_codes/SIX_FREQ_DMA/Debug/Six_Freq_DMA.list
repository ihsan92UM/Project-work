
Six_Freq_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014f  0800ad08  0800ad08  0000bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae58  0800ae58  0000be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae60  0800ae60  0000be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ae64  0800ae64  0000be64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  20000000  0800ae68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000870  2000007c  0800aee4  0000c07c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200008ec  0800aee4  0000c8ec  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018be1  00000000  00000000  0000c0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dbd  00000000  00000000  00024c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015f8  00000000  00000000  00027a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000112b  00000000  00000000  00029048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f852  00000000  00000000  0002a173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bab7  00000000  00000000  000599c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012c059  00000000  00000000  0007547c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a14d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065a0  00000000  00000000  001a1518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001a7ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000007c 	.word	0x2000007c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800acf0 	.word	0x0800acf0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000080 	.word	0x20000080
 8000274:	0800acf0 	.word	0x0800acf0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b0a0      	sub	sp, #128	@ 0x80
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f001 fe35 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800059a:	f000 f983 	bl	80008a4 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f927 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fde9 	bl	8001178 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005a6:	f000 f989 	bl	80008bc <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 80005aa:	f000 f9cf 	bl	800094c <MX_ICACHE_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9e1 	bl	8000974 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b2:	f000 fa8f 	bl	8000ad4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005b6:	f000 fb19 	bl	8000bec <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ba:	f000 fba3 	bl	8000d04 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005be:	f000 fc2d 	bl	8000e1c <MX_TIM5_Init>
  MX_TIM8_Init();
 80005c2:	f000 fcb7 	bl	8000f34 <MX_TIM8_Init>
  MX_TIM15_Init();
 80005c6:	f000 fd47 	bl	8001058 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

#define TIMER_CLK_HZ 160000000

uint16_t Channel_0[8] = {0};
 80005ca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
uint16_t Channel_1[8] = {0};
 80005d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
uint16_t Channel_2[8] = {0};
 80005e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
uint16_t Channel_3[8] = {0};
 80005f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
uint16_t Channel_4[8] = {0};
 8000602:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
uint16_t Channel_5[8] = {0};
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]


TIM1->CCR1 = 5;
 800061e:	4b69      	ldr	r3, [pc, #420]	@ (80007c4 <main+0x234>)
 8000620:	2205      	movs	r2, #5
 8000622:	635a      	str	r2, [r3, #52]	@ 0x34
if (HAL_TIM_Base_Start(&htim1) != HAL_OK){
 8000624:	4868      	ldr	r0, [pc, #416]	@ (80007c8 <main+0x238>)
 8000626:	f006 fdcf 	bl	80071c8 <HAL_TIM_Base_Start>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0xa4>

	  Error_Handler();
 8000630:	f000 fdda 	bl	80011e8 <Error_Handler>
}

if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK){
 8000634:	2100      	movs	r1, #0
 8000636:	4864      	ldr	r0, [pc, #400]	@ (80007c8 <main+0x238>)
 8000638:	f006 fec0 	bl	80073bc <HAL_TIM_PWM_Start>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0xb6>

	  Error_Handler();
 8000642:	f000 fdd1 	bl	80011e8 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 8000646:	4861      	ldr	r0, [pc, #388]	@ (80007cc <main+0x23c>)
 8000648:	f006 fdbe 	bl	80071c8 <HAL_TIM_Base_Start>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <main+0xc6>

	  Error_Handler();
 8000652:	f000 fdc9 	bl	80011e8 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim3) != HAL_OK){
 8000656:	485e      	ldr	r0, [pc, #376]	@ (80007d0 <main+0x240>)
 8000658:	f006 fdb6 	bl	80071c8 <HAL_TIM_Base_Start>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <main+0xd6>

	  Error_Handler();
 8000662:	f000 fdc1 	bl	80011e8 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim4) != HAL_OK){
 8000666:	485b      	ldr	r0, [pc, #364]	@ (80007d4 <main+0x244>)
 8000668:	f006 fdae 	bl	80071c8 <HAL_TIM_Base_Start>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <main+0xe6>

	  Error_Handler();
 8000672:	f000 fdb9 	bl	80011e8 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim5) != HAL_OK){
 8000676:	4858      	ldr	r0, [pc, #352]	@ (80007d8 <main+0x248>)
 8000678:	f006 fda6 	bl	80071c8 <HAL_TIM_Base_Start>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <main+0xf6>

	  Error_Handler();
 8000682:	f000 fdb1 	bl	80011e8 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim8) != HAL_OK){
 8000686:	4855      	ldr	r0, [pc, #340]	@ (80007dc <main+0x24c>)
 8000688:	f006 fd9e 	bl	80071c8 <HAL_TIM_Base_Start>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <main+0x106>

	  Error_Handler();
 8000692:	f000 fda9 	bl	80011e8 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim15) != HAL_OK){
 8000696:	4852      	ldr	r0, [pc, #328]	@ (80007e0 <main+0x250>)
 8000698:	f006 fd96 	bl	80071c8 <HAL_TIM_Base_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <main+0x116>

	  Error_Handler();
 80006a2:	f000 fda1 	bl	80011e8 <Error_Handler>
}


HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,(uint32_t*)&Channel_0, 8);
 80006a6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80006aa:	2308      	movs	r3, #8
 80006ac:	2100      	movs	r1, #0
 80006ae:	4847      	ldr	r0, [pc, #284]	@ (80007cc <main+0x23c>)
 80006b0:	f007 f838 	bl	8007724 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t*)&Channel_1, 8);
 80006b4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80006b8:	2308      	movs	r3, #8
 80006ba:	2100      	movs	r1, #0
 80006bc:	4844      	ldr	r0, [pc, #272]	@ (80007d0 <main+0x240>)
 80006be:	f007 f831 	bl	8007724 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1,(uint32_t*)&Channel_2, 8);  // TIM4 - PB6
 80006c2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80006c6:	2308      	movs	r3, #8
 80006c8:	2100      	movs	r1, #0
 80006ca:	4842      	ldr	r0, [pc, #264]	@ (80007d4 <main+0x244>)
 80006cc:	f007 f82a 	bl	8007724 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1,(uint32_t*)&Channel_3, 8);  // TIM5 - PA0
 80006d0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80006d4:	2308      	movs	r3, #8
 80006d6:	2100      	movs	r1, #0
 80006d8:	483f      	ldr	r0, [pc, #252]	@ (80007d8 <main+0x248>)
 80006da:	f007 f823 	bl	8007724 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1,(uint32_t*)&Channel_4, 8);
 80006de:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80006e2:	2308      	movs	r3, #8
 80006e4:	2100      	movs	r1, #0
 80006e6:	483d      	ldr	r0, [pc, #244]	@ (80007dc <main+0x24c>)
 80006e8:	f007 f81c 	bl	8007724 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1,(uint32_t*)&Channel_5, 8); // TIM15 - PA2
 80006ec:	f107 021c 	add.w	r2, r7, #28
 80006f0:	2308      	movs	r3, #8
 80006f2:	2100      	movs	r1, #0
 80006f4:	483a      	ldr	r0, [pc, #232]	@ (80007e0 <main+0x250>)
 80006f6:	f007 f815 	bl	8007724 <HAL_TIM_IC_Start_DMA>

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f001 fbcc 	bl	8001e98 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000700:	2101      	movs	r1, #1
 8000702:	2000      	movs	r0, #0
 8000704:	f001 fc04 	bl	8001f10 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000708:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <main+0x254>)
 800070a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000710:	4b34      	ldr	r3, [pc, #208]	@ (80007e4 <main+0x254>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000716:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <main+0x254>)
 8000718:	2200      	movs	r2, #0
 800071a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800071c:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <main+0x254>)
 800071e:	2200      	movs	r2, #0
 8000720:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000722:	4b30      	ldr	r3, [pc, #192]	@ (80007e4 <main+0x254>)
 8000724:	2200      	movs	r2, #0
 8000726:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000728:	492e      	ldr	r1, [pc, #184]	@ (80007e4 <main+0x254>)
 800072a:	2000      	movs	r0, #0
 800072c:	f001 fc8a 	bl	8002044 <BSP_COM_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <main+0x1aa>
  {
    Error_Handler();
 8000736:	f000 fd57 	bl	80011e8 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 800073a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073e:	f001 fe27 	bl	8002390 <HAL_Delay>

	uint16_t *channels[6] = {Channel_0, Channel_1, Channel_2, Channel_3, Channel_4, Channel_5};
 8000742:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < 6; i++) {
 8000766:	2300      	movs	r3, #0
 8000768:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800076a:	e027      	b.n	80007bc <main+0x22c>
		if (channels[i][0] == 0) {
 800076c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	3380      	adds	r3, #128	@ 0x80
 8000772:	443b      	add	r3, r7
 8000774:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x1f8>
			printf("Channel_%d = 0\n\r", i);
 800077e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000780:	4819      	ldr	r0, [pc, #100]	@ (80007e8 <main+0x258>)
 8000782:	f009 fc35 	bl	8009ff0 <iprintf>
 8000786:	e00b      	b.n	80007a0 <main+0x210>
		} else {
			printf("Channel_%d = %d \n\r", i, channels[i][0]);
 8000788:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	3380      	adds	r3, #128	@ 0x80
 800078e:	443b      	add	r3, r7
 8000790:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800079a:	4814      	ldr	r0, [pc, #80]	@ (80007ec <main+0x25c>)
 800079c:	f009 fc28 	bl	8009ff0 <iprintf>
		}
		memset(channels[i], 0, sizeof(Channel_0));
 80007a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	3380      	adds	r3, #128	@ 0x80
 80007a6:	443b      	add	r3, r7
 80007a8:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80007ac:	2210      	movs	r2, #16
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f009 fc72 	bl	800a09a <memset>
	for (int i = 0; i < 6; i++) {
 80007b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007b8:	3301      	adds	r3, #1
 80007ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80007bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007be:	2b05      	cmp	r3, #5
 80007c0:	ddd4      	ble.n	800076c <main+0x1dc>
  {
 80007c2:	e7ba      	b.n	800073a <main+0x1aa>
 80007c4:	40012c00 	.word	0x40012c00
 80007c8:	200000a8 	.word	0x200000a8
 80007cc:	200000f4 	.word	0x200000f4
 80007d0:	20000140 	.word	0x20000140
 80007d4:	2000018c 	.word	0x2000018c
 80007d8:	200001d8 	.word	0x200001d8
 80007dc:	20000224 	.word	0x20000224
 80007e0:	20000270 	.word	0x20000270
 80007e4:	20000098 	.word	0x20000098
 80007e8:	0800ad08 	.word	0x0800ad08
 80007ec:	0800ad1c 	.word	0x0800ad1c

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	@ 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f009 fc4b 	bl	800a09a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000814:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000818:	f003 fba6 	bl	8003f68 <HAL_PWREx_ControlVoltageScaling>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000822:	f000 fce1 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000830:	2310      	movs	r3, #16
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000834:	2302      	movs	r3, #2
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000844:	230a      	movs	r3, #10
 8000846:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000854:	230c      	movs	r3, #12
 8000856:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fc5d 	bl	8004120 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800086c:	f000 fcbc 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	231f      	movs	r3, #31
 8000872:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2303      	movs	r3, #3
 8000876:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2104      	movs	r1, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fb23 	bl	8004ed8 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000898:	f000 fca6 	bl	80011e8 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3778      	adds	r7, #120	@ 0x78
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008a8:	2002      	movs	r0, #2
 80008aa:	f003 fbe9 	bl	8004080 <HAL_PWREx_ConfigSupply>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemPower_Config+0x14>
  {
    Error_Handler();
 80008b4:	f000 fc98 	bl	80011e8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_GPDMA1_Init+0x8c>)
 80008c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000948 <MX_GPDMA1_Init+0x8c>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_GPDMA1_Init+0x8c>)
 80008d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	201d      	movs	r0, #29
 80008e6:	f001 fe2f 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80008ea:	201d      	movs	r0, #29
 80008ec:	f001 fe46 	bl	800257c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	201e      	movs	r0, #30
 80008f6:	f001 fe27 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80008fa:	201e      	movs	r0, #30
 80008fc:	f001 fe3e 	bl	800257c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	201f      	movs	r0, #31
 8000906:	f001 fe1f 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800090a:	201f      	movs	r0, #31
 800090c:	f001 fe36 	bl	800257c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	2020      	movs	r0, #32
 8000916:	f001 fe17 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800091a:	2020      	movs	r0, #32
 800091c:	f001 fe2e 	bl	800257c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2021      	movs	r0, #33	@ 0x21
 8000926:	f001 fe0f 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 800092a:	2021      	movs	r0, #33	@ 0x21
 800092c:	f001 fe26 	bl	800257c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2022      	movs	r0, #34	@ 0x22
 8000936:	f001 fe07 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 800093a:	2022      	movs	r0, #34	@ 0x22
 800093c:	f001 fe1e 	bl	800257c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	46020c00 	.word	0x46020c00

0800094c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000950:	2000      	movs	r0, #0
 8000952:	f003 fad9 	bl	8003f08 <HAL_ICACHE_ConfigAssociativityMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800095c:	f000 fc44 	bl	80011e8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000960:	f003 faf2 	bl	8003f48 <HAL_ICACHE_Enable>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800096a:	f000 fc3d 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	@ 0x70
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2234      	movs	r2, #52	@ 0x34
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f009 fb73 	bl	800a09a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b4:	4b45      	ldr	r3, [pc, #276]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009b6:	4a46      	ldr	r2, [pc, #280]	@ (8000ad0 <MX_TIM1_Init+0x15c>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80009ba:	4b44      	ldr	r3, [pc, #272]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009bc:	220f      	movs	r2, #15
 80009be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b42      	ldr	r3, [pc, #264]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80009c6:	4b41      	ldr	r3, [pc, #260]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009c8:	2263      	movs	r2, #99	@ 0x63
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b3f      	ldr	r3, [pc, #252]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b3e      	ldr	r3, [pc, #248]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b3c      	ldr	r3, [pc, #240]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009de:	483b      	ldr	r0, [pc, #236]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009e0:	f006 fb9a 	bl	8007118 <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009ea:	f000 fbfd 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009f8:	4619      	mov	r1, r3
 80009fa:	4834      	ldr	r0, [pc, #208]	@ (8000acc <MX_TIM1_Init+0x158>)
 80009fc:	f007 fa3c 	bl	8007e78 <HAL_TIM_ConfigClockSource>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a06:	f000 fbef 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a0a:	4830      	ldr	r0, [pc, #192]	@ (8000acc <MX_TIM1_Init+0x158>)
 8000a0c:	f006 fc74 	bl	80072f8 <HAL_TIM_PWM_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a16:	f000 fbe7 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4827      	ldr	r0, [pc, #156]	@ (8000acc <MX_TIM1_Init+0x158>)
 8000a2e:	f008 fc21 	bl	8009274 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000a38:	f000 fbd6 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	2360      	movs	r3, #96	@ 0x60
 8000a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	@ (8000acc <MX_TIM1_Init+0x158>)
 8000a62:	f007 f8f5 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000a6c:	f000 fbbc 	bl	80011e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4807      	ldr	r0, [pc, #28]	@ (8000acc <MX_TIM1_Init+0x158>)
 8000aae:	f008 fca3 	bl	80093f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000ab8:	f000 fb96 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000abc:	4803      	ldr	r0, [pc, #12]	@ (8000acc <MX_TIM1_Init+0x158>)
 8000abe:	f001 f837 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 8000ac2:	bf00      	nop
 8000ac4:	3770      	adds	r7, #112	@ 0x70
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000a8 	.word	0x200000a8
 8000ad0:	40012c00 	.word	0x40012c00

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b090      	sub	sp, #64	@ 0x40
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b18:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	482b      	ldr	r0, [pc, #172]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b3a:	f006 faed 	bl	8007118 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b44:	f000 fb50 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b52:	4619      	mov	r1, r3
 8000b54:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b56:	f007 f98f 	bl	8007e78 <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b60:	f000 fb42 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b64:	4820      	ldr	r0, [pc, #128]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b66:	f006 fd7b 	bl	8007660 <HAL_TIM_IC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b70:	f000 fb3a 	bl	80011e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b74:	2304      	movs	r3, #4
 8000b76:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b78:	2350      	movs	r3, #80	@ 0x50
 8000b7a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000b8c:	f007 fa76 	bl	800807c <HAL_TIM_SlaveConfigSynchro>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000b96:	f000 fb27 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000baa:	f008 fb63 	bl	8009274 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8000bb4:	f000 fb18 	bl	80011e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_TIM2_Init+0x114>)
 8000bd0:	f006 ffa2 	bl	8007b18 <HAL_TIM_IC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000bda:	f000 fb05 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	@ 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000f4 	.word	0x200000f4

08000bec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b090      	sub	sp, #64	@ 0x40
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c28:	4b34      	ldr	r3, [pc, #208]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c2a:	4a35      	ldr	r2, [pc, #212]	@ (8000d00 <MX_TIM3_Init+0x114>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c2e:	4b33      	ldr	r3, [pc, #204]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b31      	ldr	r3, [pc, #196]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8000c3a:	4b30      	ldr	r3, [pc, #192]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c4e:	482b      	ldr	r0, [pc, #172]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c50:	f006 fa62 	bl	8007118 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000c5a:	f000 fac5 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4824      	ldr	r0, [pc, #144]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c6c:	f007 f904 	bl	8007e78 <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000c76:	f000 fab7 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c7a:	4820      	ldr	r0, [pc, #128]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000c7c:	f006 fcf0 	bl	8007660 <HAL_TIM_IC_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c86:	f000 faaf 	bl	80011e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c8e:	2350      	movs	r3, #80	@ 0x50
 8000c90:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4816      	ldr	r0, [pc, #88]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000ca2:	f007 f9eb 	bl	800807c <HAL_TIM_SlaveConfigSynchro>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8000cac:	f000 fa9c 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480f      	ldr	r0, [pc, #60]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000cc0:	f008 fad8 	bl	8009274 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8000cca:	f000 fa8d 	bl	80011e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_TIM3_Init+0x110>)
 8000ce6:	f006 ff17 	bl	8007b18 <HAL_TIM_IC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8000cf0:	f000 fa7a 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3740      	adds	r7, #64	@ 0x40
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000140 	.word	0x20000140
 8000d00:	40000400 	.word	0x40000400

08000d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b090      	sub	sp, #64	@ 0x40
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d40:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d42:	4a35      	ldr	r2, [pc, #212]	@ (8000e18 <MX_TIM4_Init+0x114>)
 8000d44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d46:	4b33      	ldr	r3, [pc, #204]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b31      	ldr	r3, [pc, #196]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4294967295;
 8000d52:	4b30      	ldr	r3, [pc, #192]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d66:	482b      	ldr	r0, [pc, #172]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d68:	f006 f9d6 	bl	8007118 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000d72:	f000 fa39 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d80:	4619      	mov	r1, r3
 8000d82:	4824      	ldr	r0, [pc, #144]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d84:	f007 f878 	bl	8007e78 <HAL_TIM_ConfigClockSource>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000d8e:	f000 fa2b 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000d92:	4820      	ldr	r0, [pc, #128]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000d94:	f006 fc64 	bl	8007660 <HAL_TIM_IC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d9e:	f000 fa23 	bl	80011e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000da2:	2304      	movs	r3, #4
 8000da4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000da6:	2350      	movs	r3, #80	@ 0x50
 8000da8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4816      	ldr	r0, [pc, #88]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000dba:	f007 f95f 	bl	800807c <HAL_TIM_SlaveConfigSynchro>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8000dc4:	f000 fa10 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000dd8:	f008 fa4c 	bl	8009274 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8000de2:	f000 fa01 	bl	80011e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_TIM4_Init+0x110>)
 8000dfe:	f006 fe8b 	bl	8007b18 <HAL_TIM_IC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8000e08:	f000 f9ee 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3740      	adds	r7, #64	@ 0x40
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000018c 	.word	0x2000018c
 8000e18:	40000800 	.word	0x40000800

08000e1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b090      	sub	sp, #64	@ 0x40
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e58:	4b34      	ldr	r3, [pc, #208]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e5a:	4a35      	ldr	r2, [pc, #212]	@ (8000f30 <MX_TIM5_Init+0x114>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e5e:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b31      	ldr	r3, [pc, #196]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e6a:	4b30      	ldr	r3, [pc, #192]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e7e:	482b      	ldr	r0, [pc, #172]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e80:	f006 f94a 	bl	8007118 <HAL_TIM_Base_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000e8a:	f000 f9ad 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4824      	ldr	r0, [pc, #144]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000e9c:	f006 ffec 	bl	8007e78 <HAL_TIM_ConfigClockSource>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000ea6:	f000 f99f 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000eaa:	4820      	ldr	r0, [pc, #128]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000eac:	f006 fbd8 	bl	8007660 <HAL_TIM_IC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000eb6:	f000 f997 	bl	80011e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ebe:	2350      	movs	r3, #80	@ 0x50
 8000ec0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000ed2:	f007 f8d3 	bl	800807c <HAL_TIM_SlaveConfigSynchro>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8000edc:	f000 f984 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	480f      	ldr	r0, [pc, #60]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000ef0:	f008 f9c0 	bl	8009274 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM5_Init+0xe2>
  {
    Error_Handler();
 8000efa:	f000 f975 	bl	80011e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f02:	2301      	movs	r3, #1
 8000f04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_TIM5_Init+0x110>)
 8000f16:	f006 fdff 	bl	8007b18 <HAL_TIM_IC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8000f20:	f000 f962 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3740      	adds	r7, #64	@ 0x40
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200001d8 	.word	0x200001d8
 8000f30:	40000c00 	.word	0x40000c00

08000f34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	@ 0x40
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f70:	4b37      	ldr	r3, [pc, #220]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f72:	4a38      	ldr	r2, [pc, #224]	@ (8001054 <MX_TIM8_Init+0x120>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f76:	4b36      	ldr	r3, [pc, #216]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b34      	ldr	r3, [pc, #208]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f82:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f9c:	482c      	ldr	r0, [pc, #176]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000f9e:	f006 f8bb 	bl	8007118 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000fa8:	f000 f91e 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4825      	ldr	r0, [pc, #148]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000fba:	f006 ff5d 	bl	8007e78 <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000fc4:	f000 f910 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000fc8:	4821      	ldr	r0, [pc, #132]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000fca:	f006 fb49 	bl	8007660 <HAL_TIM_IC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000fd4:	f000 f908 	bl	80011e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000fdc:	2350      	movs	r3, #80	@ 0x50
 8000fde:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4818      	ldr	r0, [pc, #96]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8000ff0:	f007 f844 	bl	800807c <HAL_TIM_SlaveConfigSynchro>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000ffa:	f000 f8f5 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	480f      	ldr	r0, [pc, #60]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8001012:	f008 f92f 	bl	8009274 <HAL_TIMEx_MasterConfigSynchronization>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 800101c:	f000 f8e4 	bl	80011e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001024:	2301      	movs	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_TIM8_Init+0x11c>)
 8001038:	f006 fd6e 	bl	8007b18 <HAL_TIM_IC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001042:	f000 f8d1 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3740      	adds	r7, #64	@ 0x40
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000224 	.word	0x20000224
 8001054:	40013400 	.word	0x40013400

08001058 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b090      	sub	sp, #64	@ 0x40
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001094:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <MX_TIM15_Init+0x118>)
 8001096:	4a37      	ldr	r2, [pc, #220]	@ (8001174 <MX_TIM15_Init+0x11c>)
 8001098:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800109a:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <MX_TIM15_Init+0x118>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b33      	ldr	r3, [pc, #204]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80010a6:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80010c0:	482b      	ldr	r0, [pc, #172]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010c2:	f006 f829 	bl	8007118 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80010cc:	f000 f88c 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010da:	4619      	mov	r1, r3
 80010dc:	4824      	ldr	r0, [pc, #144]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010de:	f006 fecb 	bl	8007e78 <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80010e8:	f000 f87e 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80010ec:	4820      	ldr	r0, [pc, #128]	@ (8001170 <MX_TIM15_Init+0x118>)
 80010ee:	f006 fab7 	bl	8007660 <HAL_TIM_IC_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 80010f8:	f000 f876 	bl	80011e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010fc:	2304      	movs	r3, #4
 80010fe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001100:	2350      	movs	r3, #80	@ 0x50
 8001102:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4817      	ldr	r0, [pc, #92]	@ (8001170 <MX_TIM15_Init+0x118>)
 8001114:	f006 ffb2 	bl	800807c <HAL_TIM_SlaveConfigSynchro>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 800111e:	f000 f863 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	480f      	ldr	r0, [pc, #60]	@ (8001170 <MX_TIM15_Init+0x118>)
 8001132:	f008 f89f 	bl	8009274 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 800113c:	f000 f854 	bl	80011e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001144:	2301      	movs	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <MX_TIM15_Init+0x118>)
 8001158:	f006 fcde 	bl	8007b18 <HAL_TIM_IC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001162:	f000 f841 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3740      	adds	r7, #64	@ 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000270 	.word	0x20000270
 8001174:	40014000 	.word	0x40014000

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 8001180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001184:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 8001190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 800119e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a2:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 80011ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_GPIO_Init+0x6c>)
 80011cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	46020c00 	.word	0x46020c00

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_MspInit+0x30>)
 80011fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001200:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <HAL_MspInit+0x30>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_MspInit+0x30>)
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	46020c00 	.word	0x46020c00

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0b0      	sub	sp, #192	@ 0xc0
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(htim_base->Instance==TIM1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a60      	ldr	r2, [pc, #384]	@ (80013c8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d110      	bne.n	800126c <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800124a:	4b60      	ldr	r3, [pc, #384]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 800124c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001250:	4a5e      	ldr	r2, [pc, #376]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 8001252:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001256:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800125a:	4b5c      	ldr	r3, [pc, #368]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 800125c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001268:	f000 bc4f 	b.w	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
  else if(htim_base->Instance==TIM2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001274:	f040 80b6 	bne.w	80013e4 <HAL_TIM_Base_MspInit+0x1bc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001278:	4b54      	ldr	r3, [pc, #336]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 800127a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800127e:	4a53      	ldr	r2, [pc, #332]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001288:	4b50      	ldr	r3, [pc, #320]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 800128a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 8001298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129c:	4a4b      	ldr	r2, [pc, #300]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a6:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <HAL_TIM_Base_MspInit+0x1a4>)
 80012a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012d8:	4619      	mov	r1, r3
 80012da:	483d      	ldr	r0, [pc, #244]	@ (80013d0 <HAL_TIM_Base_MspInit+0x1a8>)
 80012dc:	f002 fc3c 	bl	8003b58 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80012e0:	2321      	movs	r3, #33	@ 0x21
 80012e2:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_CH1;
 80012e4:	2338      	movs	r3, #56	@ 0x38
 80012e6:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ec:	2300      	movs	r3, #0
 80012ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80012f0:	2300      	movs	r3, #0
 80012f2:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80012f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80012f8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80012fa:	2301      	movs	r3, #1
 80012fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80012fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001302:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.SrcBurstLength = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.DestBurstLength = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800130c:	2300      	movs	r3, #0
 800130e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001310:	2300      	movs	r3, #0
 8001312:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001314:	2300      	movs	r3, #0
 8001316:	677b      	str	r3, [r7, #116]	@ 0x74
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	67bb      	str	r3, [r7, #120]	@ 0x78
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001322:	2300      	movs	r3, #0
 8001324:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001326:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800132a:	492a      	ldr	r1, [pc, #168]	@ (80013d4 <HAL_TIM_Base_MspInit+0x1ac>)
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fdc9 	bl	8002ec4 <HAL_DMAEx_List_BuildNode>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_TIM_Base_MspInit+0x114>
      Error_Handler();
 8001338:	f7ff ff56 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800133c:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <HAL_TIM_Base_MspInit+0x1ac>)
 800133e:	2100      	movs	r1, #0
 8001340:	4825      	ldr	r0, [pc, #148]	@ (80013d8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001342:	f001 fdd5 	bl	8002ef0 <HAL_DMAEx_List_InsertNode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_TIM_Base_MspInit+0x128>
      Error_Handler();
 800134c:	f7ff ff4c 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001350:	4821      	ldr	r0, [pc, #132]	@ (80013d8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001352:	f001 fe96 	bl	8003082 <HAL_DMAEx_List_SetCircularMode>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_TIM_Base_MspInit+0x138>
      Error_Handler();
 800135c:	f7ff ff44 	bl	80011e8 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001364:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 8001368:	2200      	movs	r2, #0
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 8001374:	2200      	movs	r2, #0
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 8001380:	2281      	movs	r2, #129	@ 0x81
 8001382:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001384:	4815      	ldr	r0, [pc, #84]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 8001386:	f001 fbdd 	bl	8002b44 <HAL_DMAEx_List_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_TIM_Base_MspInit+0x16c>
      Error_Handler();
 8001390:	f7ff ff2a 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001394:	4910      	ldr	r1, [pc, #64]	@ (80013d8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001396:	4811      	ldr	r0, [pc, #68]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 8001398:	f001 fed4 	bl	8003144 <HAL_DMAEx_List_LinkQ>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_TIM_Base_MspInit+0x17e>
      Error_Handler();
 80013a2:	f7ff ff21 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel0);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80013b2:	2110      	movs	r1, #16
 80013b4:	4809      	ldr	r0, [pc, #36]	@ (80013dc <HAL_TIM_Base_MspInit+0x1b4>)
 80013b6:	f001 fb64 	bl	8002a82 <HAL_DMA_ConfigChannelAttributes>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 83a4 	beq.w	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
      Error_Handler();
 80013c2:	f7ff ff11 	bl	80011e8 <Error_Handler>
}
 80013c6:	e3a0      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
 80013c8:	40012c00 	.word	0x40012c00
 80013cc:	46020c00 	.word	0x46020c00
 80013d0:	42020000 	.word	0x42020000
 80013d4:	200002bc 	.word	0x200002bc
 80013d8:	200002e0 	.word	0x200002e0
 80013dc:	200002f8 	.word	0x200002f8
 80013e0:	40020050 	.word	0x40020050
  else if(htim_base->Instance==TIM3)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4aab      	ldr	r2, [pc, #684]	@ (8001698 <HAL_TIM_Base_MspInit+0x470>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f040 80a7 	bne.w	800153e <HAL_TIM_Base_MspInit+0x316>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f0:	4baa      	ldr	r3, [pc, #680]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 80013f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013f6:	4aa9      	ldr	r2, [pc, #676]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001400:	4ba6      	ldr	r3, [pc, #664]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 8001402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	633b      	str	r3, [r7, #48]	@ 0x30
 800140c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4ba3      	ldr	r3, [pc, #652]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 8001410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001414:	4aa1      	ldr	r2, [pc, #644]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800141e:	4b9f      	ldr	r3, [pc, #636]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 8001420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800142a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800142c:	2340      	movs	r3, #64	@ 0x40
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800144e:	4619      	mov	r1, r3
 8001450:	4893      	ldr	r0, [pc, #588]	@ (80016a0 <HAL_TIM_Base_MspInit+0x478>)
 8001452:	f002 fb81 	bl	8003b58 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001456:	2321      	movs	r3, #33	@ 0x21
 8001458:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM3_CH1;
 800145a:	233d      	movs	r3, #61	@ 0x3d
 800145c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800145e:	2300      	movs	r3, #0
 8001460:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	2300      	movs	r3, #0
 8001464:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001466:	2300      	movs	r3, #0
 8001468:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800146a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800146e:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001470:	2301      	movs	r3, #1
 8001472:	65bb      	str	r3, [r7, #88]	@ 0x58
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001478:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.SrcBurstLength = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.DestBurstLength = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001482:	2300      	movs	r3, #0
 8001484:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001486:	2300      	movs	r3, #0
 8001488:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.Init.Mode = DMA_NORMAL;
 800148a:	2300      	movs	r3, #0
 800148c:	677b      	str	r3, [r7, #116]	@ 0x74
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	67bb      	str	r3, [r7, #120]	@ 0x78
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001498:	2300      	movs	r3, #0
 800149a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800149c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014a0:	4980      	ldr	r1, [pc, #512]	@ (80016a4 <HAL_TIM_Base_MspInit+0x47c>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fd0e 	bl	8002ec4 <HAL_DMAEx_List_BuildNode>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_TIM_Base_MspInit+0x28a>
      Error_Handler();
 80014ae:	f7ff fe9b 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80014b2:	4a7c      	ldr	r2, [pc, #496]	@ (80016a4 <HAL_TIM_Base_MspInit+0x47c>)
 80014b4:	2100      	movs	r1, #0
 80014b6:	487c      	ldr	r0, [pc, #496]	@ (80016a8 <HAL_TIM_Base_MspInit+0x480>)
 80014b8:	f001 fd1a 	bl	8002ef0 <HAL_DMAEx_List_InsertNode>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_TIM_Base_MspInit+0x29e>
      Error_Handler();
 80014c2:	f7ff fe91 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80014c6:	4878      	ldr	r0, [pc, #480]	@ (80016a8 <HAL_TIM_Base_MspInit+0x480>)
 80014c8:	f001 fddb 	bl	8003082 <HAL_DMAEx_List_SetCircularMode>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_TIM_Base_MspInit+0x2ae>
      Error_Handler();
 80014d2:	f7ff fe89 	bl	80011e8 <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80014d6:	4b75      	ldr	r3, [pc, #468]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 80014d8:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <HAL_TIM_Base_MspInit+0x488>)
 80014da:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80014dc:	4b73      	ldr	r3, [pc, #460]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 80014de:	2200      	movs	r2, #0
 80014e0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80014e2:	4b72      	ldr	r3, [pc, #456]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80014e8:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80014ee:	4b6f      	ldr	r3, [pc, #444]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80014f4:	4b6d      	ldr	r3, [pc, #436]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 80014f6:	2281      	movs	r2, #129	@ 0x81
 80014f8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80014fa:	486c      	ldr	r0, [pc, #432]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 80014fc:	f001 fb22 	bl	8002b44 <HAL_DMAEx_List_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_TIM_Base_MspInit+0x2e2>
      Error_Handler();
 8001506:	f7ff fe6f 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 800150a:	4967      	ldr	r1, [pc, #412]	@ (80016a8 <HAL_TIM_Base_MspInit+0x480>)
 800150c:	4867      	ldr	r0, [pc, #412]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 800150e:	f001 fe19 	bl	8003144 <HAL_DMAEx_List_LinkQ>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_TIM_Base_MspInit+0x2f4>
      Error_Handler();
 8001518:	f7ff fe66 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a63      	ldr	r2, [pc, #396]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
 8001522:	4a62      	ldr	r2, [pc, #392]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001528:	2110      	movs	r1, #16
 800152a:	4860      	ldr	r0, [pc, #384]	@ (80016ac <HAL_TIM_Base_MspInit+0x484>)
 800152c:	f001 faa9 	bl	8002a82 <HAL_DMA_ConfigChannelAttributes>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 82e9 	beq.w	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
      Error_Handler();
 8001538:	f7ff fe56 	bl	80011e8 <Error_Handler>
}
 800153c:	e2e5      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
  else if(htim_base->Instance==TIM4)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a5c      	ldr	r2, [pc, #368]	@ (80016b4 <HAL_TIM_Base_MspInit+0x48c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	f040 80c1 	bne.w	80016cc <HAL_TIM_Base_MspInit+0x4a4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800154a:	4b54      	ldr	r3, [pc, #336]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 800154c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001550:	4a52      	ldr	r2, [pc, #328]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800155a:	4b50      	ldr	r3, [pc, #320]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 800155c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b4c      	ldr	r3, [pc, #304]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 800156a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156e:	4a4b      	ldr	r2, [pc, #300]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001578:	4b48      	ldr	r3, [pc, #288]	@ (800169c <HAL_TIM_Base_MspInit+0x474>)
 800157a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001586:	2340      	movs	r3, #64	@ 0x40
 8001588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015a8:	4619      	mov	r1, r3
 80015aa:	4843      	ldr	r0, [pc, #268]	@ (80016b8 <HAL_TIM_Base_MspInit+0x490>)
 80015ac:	f002 fad4 	bl	8003b58 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80015b0:	2321      	movs	r3, #33	@ 0x21
 80015b2:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM4_CH1;
 80015b4:	2343      	movs	r3, #67	@ 0x43
 80015b6:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015b8:	2300      	movs	r3, #0
 80015ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015bc:	2300      	movs	r3, #0
 80015be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80015c0:	2300      	movs	r3, #0
 80015c2:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80015c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80015c8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80015ca:	2301      	movs	r3, #1
 80015cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80015ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.SrcBurstLength = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.DestBurstLength = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80015dc:	2300      	movs	r3, #0
 80015de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80015e0:	2300      	movs	r3, #0
 80015e2:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.Init.Mode = DMA_NORMAL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	677b      	str	r3, [r7, #116]	@ 0x74
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	67bb      	str	r3, [r7, #120]	@ 0x78
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80015f2:	2300      	movs	r3, #0
 80015f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel2) != HAL_OK)
 80015f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015fa:	4930      	ldr	r1, [pc, #192]	@ (80016bc <HAL_TIM_Base_MspInit+0x494>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fc61 	bl	8002ec4 <HAL_DMAEx_List_BuildNode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_TIM_Base_MspInit+0x3e4>
      Error_Handler();
 8001608:	f7ff fdee 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel2, NULL, &Node_GPDMA1_Channel2) != HAL_OK)
 800160c:	4a2b      	ldr	r2, [pc, #172]	@ (80016bc <HAL_TIM_Base_MspInit+0x494>)
 800160e:	2100      	movs	r1, #0
 8001610:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <HAL_TIM_Base_MspInit+0x498>)
 8001612:	f001 fc6d 	bl	8002ef0 <HAL_DMAEx_List_InsertNode>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_TIM_Base_MspInit+0x3f8>
      Error_Handler();
 800161c:	f7ff fde4 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel2) != HAL_OK)
 8001620:	4827      	ldr	r0, [pc, #156]	@ (80016c0 <HAL_TIM_Base_MspInit+0x498>)
 8001622:	f001 fd2e 	bl	8003082 <HAL_DMAEx_List_SetCircularMode>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_TIM_Base_MspInit+0x408>
      Error_Handler();
 800162c:	f7ff fddc 	bl	80011e8 <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001630:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 8001632:	4a25      	ldr	r2, [pc, #148]	@ (80016c8 <HAL_TIM_Base_MspInit+0x4a0>)
 8001634:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 8001638:	2200      	movs	r2, #0
 800163a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel2.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 800163e:	2200      	movs	r2, #0
 8001640:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel2.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 8001644:	2200      	movs	r2, #0
 8001646:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel2.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001648:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel2.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 8001650:	2281      	movs	r2, #129	@ 0x81
 8001652:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001654:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 8001656:	f001 fa75 	bl	8002b44 <HAL_DMAEx_List_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_TIM_Base_MspInit+0x43c>
      Error_Handler();
 8001660:	f7ff fdc2 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel2, &List_GPDMA1_Channel2) != HAL_OK)
 8001664:	4916      	ldr	r1, [pc, #88]	@ (80016c0 <HAL_TIM_Base_MspInit+0x498>)
 8001666:	4817      	ldr	r0, [pc, #92]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 8001668:	f001 fd6c 	bl	8003144 <HAL_DMAEx_List_LinkQ>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_TIM_Base_MspInit+0x44e>
      Error_Handler();
 8001672:	f7ff fdb9 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel2);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
 800167c:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001682:	2110      	movs	r1, #16
 8001684:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <HAL_TIM_Base_MspInit+0x49c>)
 8001686:	f001 f9fc 	bl	8002a82 <HAL_DMA_ConfigChannelAttributes>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 823c 	beq.w	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
      Error_Handler();
 8001692:	f7ff fda9 	bl	80011e8 <Error_Handler>
}
 8001696:	e238      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
 8001698:	40000400 	.word	0x40000400
 800169c:	46020c00 	.word	0x46020c00
 80016a0:	42020000 	.word	0x42020000
 80016a4:	20000370 	.word	0x20000370
 80016a8:	20000394 	.word	0x20000394
 80016ac:	200003ac 	.word	0x200003ac
 80016b0:	400200d0 	.word	0x400200d0
 80016b4:	40000800 	.word	0x40000800
 80016b8:	42020400 	.word	0x42020400
 80016bc:	20000424 	.word	0x20000424
 80016c0:	20000448 	.word	0x20000448
 80016c4:	20000460 	.word	0x20000460
 80016c8:	40020150 	.word	0x40020150
  else if(htim_base->Instance==TIM5)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4aab      	ldr	r2, [pc, #684]	@ (8001980 <HAL_TIM_Base_MspInit+0x758>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f040 80a7 	bne.w	8001826 <HAL_TIM_Base_MspInit+0x5fe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016d8:	4baa      	ldr	r3, [pc, #680]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 80016da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016de:	4aa9      	ldr	r2, [pc, #676]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 80016ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4ba3      	ldr	r3, [pc, #652]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fc:	4aa1      	ldr	r2, [pc, #644]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001706:	4b9f      	ldr	r3, [pc, #636]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001714:	2301      	movs	r3, #1
 8001716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001736:	4619      	mov	r1, r3
 8001738:	4893      	ldr	r0, [pc, #588]	@ (8001988 <HAL_TIM_Base_MspInit+0x760>)
 800173a:	f002 fa0d 	bl	8003b58 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800173e:	2321      	movs	r3, #33	@ 0x21
 8001740:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM5_CH1;
 8001742:	2348      	movs	r3, #72	@ 0x48
 8001744:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001746:	2300      	movs	r3, #0
 8001748:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174a:	2300      	movs	r3, #0
 800174c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800174e:	2300      	movs	r3, #0
 8001750:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001752:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001756:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001758:	2301      	movs	r3, #1
 800175a:	65bb      	str	r3, [r7, #88]	@ 0x58
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800175c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001760:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.SrcBurstLength = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.DestBurstLength = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800176a:	2300      	movs	r3, #0
 800176c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800176e:	2300      	movs	r3, #0
 8001770:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001772:	2300      	movs	r3, #0
 8001774:	677b      	str	r3, [r7, #116]	@ 0x74
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	67bb      	str	r3, [r7, #120]	@ 0x78
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001780:	2300      	movs	r3, #0
 8001782:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8001784:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001788:	4980      	ldr	r1, [pc, #512]	@ (800198c <HAL_TIM_Base_MspInit+0x764>)
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fb9a 	bl	8002ec4 <HAL_DMAEx_List_BuildNode>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_TIM_Base_MspInit+0x572>
      Error_Handler();
 8001796:	f7ff fd27 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 800179a:	4a7c      	ldr	r2, [pc, #496]	@ (800198c <HAL_TIM_Base_MspInit+0x764>)
 800179c:	2100      	movs	r1, #0
 800179e:	487c      	ldr	r0, [pc, #496]	@ (8001990 <HAL_TIM_Base_MspInit+0x768>)
 80017a0:	f001 fba6 	bl	8002ef0 <HAL_DMAEx_List_InsertNode>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_TIM_Base_MspInit+0x586>
      Error_Handler();
 80017aa:	f7ff fd1d 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80017ae:	4878      	ldr	r0, [pc, #480]	@ (8001990 <HAL_TIM_Base_MspInit+0x768>)
 80017b0:	f001 fc67 	bl	8003082 <HAL_DMAEx_List_SetCircularMode>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_TIM_Base_MspInit+0x596>
      Error_Handler();
 80017ba:	f7ff fd15 	bl	80011e8 <Error_Handler>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80017be:	4b75      	ldr	r3, [pc, #468]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017c0:	4a75      	ldr	r2, [pc, #468]	@ (8001998 <HAL_TIM_Base_MspInit+0x770>)
 80017c2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80017c4:	4b73      	ldr	r3, [pc, #460]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80017ca:	4b72      	ldr	r3, [pc, #456]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80017d0:	4b70      	ldr	r3, [pc, #448]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80017dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017de:	2281      	movs	r2, #129	@ 0x81
 80017e0:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80017e2:	486c      	ldr	r0, [pc, #432]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017e4:	f001 f9ae 	bl	8002b44 <HAL_DMAEx_List_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_TIM_Base_MspInit+0x5ca>
      Error_Handler();
 80017ee:	f7ff fcfb 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80017f2:	4967      	ldr	r1, [pc, #412]	@ (8001990 <HAL_TIM_Base_MspInit+0x768>)
 80017f4:	4867      	ldr	r0, [pc, #412]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 80017f6:	f001 fca5 	bl	8003144 <HAL_DMAEx_List_LinkQ>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_TIM_Base_MspInit+0x5dc>
      Error_Handler();
 8001800:	f7ff fcf2 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel3);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a63      	ldr	r2, [pc, #396]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
 800180a:	4a62      	ldr	r2, [pc, #392]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001810:	2110      	movs	r1, #16
 8001812:	4860      	ldr	r0, [pc, #384]	@ (8001994 <HAL_TIM_Base_MspInit+0x76c>)
 8001814:	f001 f935 	bl	8002a82 <HAL_DMA_ConfigChannelAttributes>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8175 	beq.w	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
      Error_Handler();
 8001820:	f7ff fce2 	bl	80011e8 <Error_Handler>
}
 8001824:	e171      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
  else if(htim_base->Instance==TIM8)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a5c      	ldr	r2, [pc, #368]	@ (800199c <HAL_TIM_Base_MspInit+0x774>)
 800182c:	4293      	cmp	r3, r2
 800182e:	f040 80c1 	bne.w	80019b4 <HAL_TIM_Base_MspInit+0x78c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001832:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 8001834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001838:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 800183a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800183e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001842:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 8001844:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 8001852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001856:	4a4b      	ldr	r2, [pc, #300]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001860:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <HAL_TIM_Base_MspInit+0x75c>)
 8001862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800186e:	2340      	movs	r3, #64	@ 0x40
 8001870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001890:	4619      	mov	r1, r3
 8001892:	4843      	ldr	r0, [pc, #268]	@ (80019a0 <HAL_TIM_Base_MspInit+0x778>)
 8001894:	f002 f960 	bl	8003b58 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001898:	2321      	movs	r3, #33	@ 0x21
 800189a:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM8_CH1;
 800189c:	2331      	movs	r3, #49	@ 0x31
 800189e:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80018a8:	2300      	movs	r3, #0
 80018aa:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80018ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018b0:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018b2:	2301      	movs	r3, #1
 80018b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.SrcBurstLength = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.DestBurstLength = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018c8:	2300      	movs	r3, #0
 80018ca:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.Init.Mode = DMA_NORMAL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	677b      	str	r3, [r7, #116]	@ 0x74
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80018da:	2300      	movs	r3, #0
 80018dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 80018de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018e2:	4930      	ldr	r1, [pc, #192]	@ (80019a4 <HAL_TIM_Base_MspInit+0x77c>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 faed 	bl	8002ec4 <HAL_DMAEx_List_BuildNode>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_TIM_Base_MspInit+0x6cc>
      Error_Handler();
 80018f0:	f7ff fc7a 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 80018f4:	4a2b      	ldr	r2, [pc, #172]	@ (80019a4 <HAL_TIM_Base_MspInit+0x77c>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	482b      	ldr	r0, [pc, #172]	@ (80019a8 <HAL_TIM_Base_MspInit+0x780>)
 80018fa:	f001 faf9 	bl	8002ef0 <HAL_DMAEx_List_InsertNode>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_TIM_Base_MspInit+0x6e0>
      Error_Handler();
 8001904:	f7ff fc70 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8001908:	4827      	ldr	r0, [pc, #156]	@ (80019a8 <HAL_TIM_Base_MspInit+0x780>)
 800190a:	f001 fbba 	bl	8003082 <HAL_DMAEx_List_SetCircularMode>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_TIM_Base_MspInit+0x6f0>
      Error_Handler();
 8001914:	f7ff fc68 	bl	80011e8 <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 800191a:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <HAL_TIM_Base_MspInit+0x788>)
 800191c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800191e:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 8001920:	2200      	movs	r2, #0
 8001922:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 8001926:	2200      	movs	r2, #0
 8001928:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 800192c:	2200      	movs	r2, #0
 800192e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001930:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 8001932:	2200      	movs	r2, #0
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001936:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 8001938:	2281      	movs	r2, #129	@ 0x81
 800193a:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 800193c:	481b      	ldr	r0, [pc, #108]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 800193e:	f001 f901 	bl	8002b44 <HAL_DMAEx_List_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_TIM_Base_MspInit+0x724>
      Error_Handler();
 8001948:	f7ff fc4e 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 800194c:	4916      	ldr	r1, [pc, #88]	@ (80019a8 <HAL_TIM_Base_MspInit+0x780>)
 800194e:	4817      	ldr	r0, [pc, #92]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 8001950:	f001 fbf8 	bl	8003144 <HAL_DMAEx_List_LinkQ>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_TIM_Base_MspInit+0x736>
      Error_Handler();
 800195a:	f7ff fc45 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel4);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 800196a:	2110      	movs	r1, #16
 800196c:	480f      	ldr	r0, [pc, #60]	@ (80019ac <HAL_TIM_Base_MspInit+0x784>)
 800196e:	f001 f888 	bl	8002a82 <HAL_DMA_ConfigChannelAttributes>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80c8 	beq.w	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
      Error_Handler();
 800197a:	f7ff fc35 	bl	80011e8 <Error_Handler>
}
 800197e:	e0c4      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
 8001980:	40000c00 	.word	0x40000c00
 8001984:	46020c00 	.word	0x46020c00
 8001988:	42020000 	.word	0x42020000
 800198c:	200004d8 	.word	0x200004d8
 8001990:	200004fc 	.word	0x200004fc
 8001994:	20000514 	.word	0x20000514
 8001998:	400201d0 	.word	0x400201d0
 800199c:	40013400 	.word	0x40013400
 80019a0:	42020800 	.word	0x42020800
 80019a4:	2000058c 	.word	0x2000058c
 80019a8:	200005b0 	.word	0x200005b0
 80019ac:	200005c8 	.word	0x200005c8
 80019b0:	40020250 	.word	0x40020250
  else if(htim_base->Instance==TIM15)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a56      	ldr	r2, [pc, #344]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8ec>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	f040 80a5 	bne.w	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019c0:	4b55      	ldr	r3, [pc, #340]	@ (8001b18 <HAL_TIM_Base_MspInit+0x8f0>)
 80019c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019c6:	4a54      	ldr	r2, [pc, #336]	@ (8001b18 <HAL_TIM_Base_MspInit+0x8f0>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80019d0:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <HAL_TIM_Base_MspInit+0x8f0>)
 80019d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <HAL_TIM_Base_MspInit+0x8f0>)
 80019e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b18 <HAL_TIM_Base_MspInit+0x8f0>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <HAL_TIM_Base_MspInit+0x8f0>)
 80019f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fc:	2304      	movs	r3, #4
 80019fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001a14:	230e      	movs	r3, #14
 8001a16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a1e:	4619      	mov	r1, r3
 8001a20:	483e      	ldr	r0, [pc, #248]	@ (8001b1c <HAL_TIM_Base_MspInit+0x8f4>)
 8001a22:	f002 f899 	bl	8003b58 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001a26:	2321      	movs	r3, #33	@ 0x21
 8001a28:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM15_CH1;
 8001a2a:	234e      	movs	r3, #78	@ 0x4e
 8001a2c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a32:	2300      	movs	r3, #0
 8001a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001a36:	2300      	movs	r3, #0
 8001a38:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001a3a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001a3e:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001a40:	2301      	movs	r3, #1
 8001a42:	65bb      	str	r3, [r7, #88]	@ 0x58
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001a44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.SrcBurstLength = 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.DestBurstLength = 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a56:	2300      	movs	r3, #0
 8001a58:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	677b      	str	r3, [r7, #116]	@ 0x74
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	67bb      	str	r3, [r7, #120]	@ 0x78
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 8001a6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a70:	492b      	ldr	r1, [pc, #172]	@ (8001b20 <HAL_TIM_Base_MspInit+0x8f8>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fa26 	bl	8002ec4 <HAL_DMAEx_List_BuildNode>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_TIM_Base_MspInit+0x85a>
      Error_Handler();
 8001a7e:	f7ff fbb3 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 8001a82:	4a27      	ldr	r2, [pc, #156]	@ (8001b20 <HAL_TIM_Base_MspInit+0x8f8>)
 8001a84:	2100      	movs	r1, #0
 8001a86:	4827      	ldr	r0, [pc, #156]	@ (8001b24 <HAL_TIM_Base_MspInit+0x8fc>)
 8001a88:	f001 fa32 	bl	8002ef0 <HAL_DMAEx_List_InsertNode>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_TIM_Base_MspInit+0x86e>
      Error_Handler();
 8001a92:	f7ff fba9 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8001a96:	4823      	ldr	r0, [pc, #140]	@ (8001b24 <HAL_TIM_Base_MspInit+0x8fc>)
 8001a98:	f001 faf3 	bl	8003082 <HAL_DMAEx_List_SetCircularMode>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_TIM_Base_MspInit+0x87e>
      Error_Handler();
 8001aa2:	f7ff fba1 	bl	80011e8 <Error_Handler>
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001aa8:	4a20      	ldr	r2, [pc, #128]	@ (8001b2c <HAL_TIM_Base_MspInit+0x904>)
 8001aaa:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001ac6:	2281      	movs	r2, #129	@ 0x81
 8001ac8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8001aca:	4817      	ldr	r0, [pc, #92]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001acc:	f001 f83a 	bl	8002b44 <HAL_DMAEx_List_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_TIM_Base_MspInit+0x8b2>
      Error_Handler();
 8001ad6:	f7ff fb87 	bl	80011e8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 8001ada:	4912      	ldr	r1, [pc, #72]	@ (8001b24 <HAL_TIM_Base_MspInit+0x8fc>)
 8001adc:	4812      	ldr	r0, [pc, #72]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001ade:	f001 fb31 	bl	8003144 <HAL_DMAEx_List_LinkQ>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_MspInit+0x8c4>
      Error_Handler();
 8001ae8:	f7ff fb7e 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel5);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001af2:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001af8:	2110      	movs	r1, #16
 8001afa:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <HAL_TIM_Base_MspInit+0x900>)
 8001afc:	f000 ffc1 	bl	8002a82 <HAL_DMA_ConfigChannelAttributes>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_TIM_Base_MspInit+0x8e2>
      Error_Handler();
 8001b06:	f7ff fb6f 	bl	80011e8 <Error_Handler>
}
 8001b0a:	bf00      	nop
 8001b0c:	37c0      	adds	r7, #192	@ 0xc0
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40014000 	.word	0x40014000
 8001b18:	46020c00 	.word	0x46020c00
 8001b1c:	42020000 	.word	0x42020000
 8001b20:	20000640 	.word	0x20000640
 8001b24:	20000664 	.word	0x20000664
 8001b28:	2000067c 	.word	0x2000067c
 8001b2c:	400202d0 	.word	0x400202d0

08001b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a13      	ldr	r2, [pc, #76]	@ (8001b9c <HAL_TIM_MspPostInit+0x6c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d11f      	bne.n	8001b92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <HAL_TIM_MspPostInit+0x70>)
 8001b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b58:	4a11      	ldr	r2, [pc, #68]	@ (8001ba0 <HAL_TIM_MspPostInit+0x70>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_TIM_MspPostInit+0x70>)
 8001b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <HAL_TIM_MspPostInit+0x74>)
 8001b8e:	f001 ffe3 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	46020c00 	.word	0x46020c00
 8001ba4:	42020000 	.word	0x42020000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <NMI_Handler+0x4>

08001bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <MemManage_Handler+0x4>

08001bc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfe:	f000 fba7 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f9f8 	bl	8002000 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001c1a:	f000 fdd1 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002f8 	.word	0x200002f8

08001c28 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001c2e:	f000 fdc7 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200003ac 	.word	0x200003ac

08001c3c <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <GPDMA1_Channel2_IRQHandler+0x10>)
 8001c42:	f000 fdbd 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000460 	.word	0x20000460

08001c50 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <GPDMA1_Channel3_IRQHandler+0x10>)
 8001c56:	f000 fdb3 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000514 	.word	0x20000514

08001c64 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <GPDMA1_Channel4_IRQHandler+0x10>)
 8001c6a:	f000 fda9 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200005c8 	.word	0x200005c8

08001c78 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001c7e:	f000 fd9f 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000067c 	.word	0x2000067c

08001c8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00a      	b.n	8001cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9e:	f3af 8000 	nop.w
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	b2ca      	uxtb	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf0      	blt.n	8001c9e <_read+0x12>
  }

  return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e009      	b.n	8001cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fa13 	bl	800210c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf1      	blt.n	8001cd8 <_write+0x12>
  }
  return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:

int _close(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d26:	605a      	str	r2, [r3, #4]
  return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_isatty>:

int _isatty(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f008 f9ce 	bl	800a138 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20040000 	.word	0x20040000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	200006f4 	.word	0x200006f4
 8001dd0:	200008f0 	.word	0x200008f0

08001dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <SystemInit+0x68>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dde:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <SystemInit+0x68>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <SystemInit+0x6c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <SystemInit+0x6c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <SystemInit+0x6c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <SystemInit+0x6c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <SystemInit+0x6c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	@ (8001e40 <SystemInit+0x6c>)
 8001e06:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001e0a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001e0e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <SystemInit+0x6c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <SystemInit+0x6c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <SystemInit+0x6c>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <SystemInit+0x6c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <SystemInit+0x68>)
 8001e2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e2e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00
 8001e40:	46020c00 	.word	0x46020c00

08001e44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e44:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e48:	f7ff ffc4 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480c      	ldr	r0, [pc, #48]	@ (8001e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490d      	ldr	r1, [pc, #52]	@ (8001e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0a      	ldr	r4, [pc, #40]	@ (8001e90 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e72:	f008 f967 	bl	800a144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e76:	f7fe fb8b 	bl	8000590 <main>

08001e7a <LoopForever>:

LoopForever:
    b LoopForever
 8001e7a:	e7fe      	b.n	8001e7a <LoopForever>
  ldr   r0, =_estack
 8001e7c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e88:	0800ae68 	.word	0x0800ae68
  ldr r2, =_sbss
 8001e8c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e90:	200008ec 	.word	0x200008ec

08001e94 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC1_IRQHandler>
	...

08001e98 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001eac:	f06f 0301 	mvn.w	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb2:	e023      	b.n	8001efc <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <BSP_LED_Init+0x70>)
 8001ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec0:	4a11      	ldr	r2, [pc, #68]	@ (8001f08 <BSP_LED_Init+0x70>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <BSP_LED_Init+0x70>)
 8001ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001ed8:	2320      	movs	r3, #32
 8001eda:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <BSP_LED_Init+0x74>)
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	f107 0210 	add.w	r2, r7, #16
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fe2e 	bl	8003b58 <HAL_GPIO_Init>
  }

  return ret;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3728      	adds	r7, #40	@ 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	46020c00 	.word	0x46020c00
 8001f0c:	20000008 	.word	0x20000008

08001f10 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001f20:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <BSP_PB_Init+0xd4>)
 8001f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f26:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe4 <BSP_PB_Init+0xd4>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f30:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe4 <BSP_PB_Init+0xd4>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f42:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001f44:	2302      	movs	r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <BSP_PB_Init+0xd8>)
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	f107 020c 	add.w	r2, r7, #12
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fdf7 	bl	8003b58 <HAL_GPIO_Init>
 8001f6a:	e036      	b.n	8001fda <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <BSP_PB_Init+0xdc>)
 8001f6e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe8 <BSP_PB_Init+0xd8>)
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	f107 020c 	add.w	r2, r7, #12
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fdea 	bl	8003b58 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001f84:	79fa      	ldrb	r2, [r7, #7]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <BSP_PB_Init+0xe0>)
 8001f90:	441a      	add	r2, r3
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	4917      	ldr	r1, [pc, #92]	@ (8001ff4 <BSP_PB_Init+0xe4>)
 8001f96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f001 fd7e 	bl	8003a9e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <BSP_PB_Init+0xe0>)
 8001fae:	1898      	adds	r0, r3, r2
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4a11      	ldr	r2, [pc, #68]	@ (8001ff8 <BSP_PB_Init+0xe8>)
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f001 fd43 	bl	8003a46 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001fc0:	2018      	movs	r0, #24
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <BSP_PB_Init+0xec>)
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f000 fabb 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001fd2:	2318      	movs	r3, #24
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fad1 	bl	800257c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	46020c00 	.word	0x46020c00
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	10110000 	.word	0x10110000
 8001ff0:	200006f8 	.word	0x200006f8
 8001ff4:	0800ad88 	.word	0x0800ad88
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	20000014 	.word	0x20000014

08002000 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800200a:	79fa      	ldrb	r2, [r7, #7]
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <BSP_PB_IRQHandler+0x28>)
 8002016:	4413      	add	r3, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f001 fd55 	bl	8003ac8 <HAL_EXTI_IRQHandler>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200006f8 	.word	0x200006f8

0800202c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800205a:	f06f 0301 	mvn.w	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e018      	b.n	8002094 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	2294      	movs	r2, #148	@ 0x94
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <BSP_COM_Init+0x5c>)
 800206c:	4413      	add	r3, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f870 	bl	8002154 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	2294      	movs	r2, #148	@ 0x94
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	4a08      	ldr	r2, [pc, #32]	@ (80020a0 <BSP_COM_Init+0x5c>)
 800207e:	4413      	add	r3, r2
 8002080:	6839      	ldr	r1, [r7, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f80e 	bl	80020a4 <MX_USART1_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800208e:	f06f 0303 	mvn.w	r3, #3
 8002092:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000704 	.word	0x20000704

080020a4 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80020ae:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <MX_USART1_Init+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	220c      	movs	r2, #12
 80020c2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	895b      	ldrh	r3, [r3, #10]
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	891b      	ldrh	r3, [r3, #8]
 80020da:	461a      	mov	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	899b      	ldrh	r3, [r3, #12]
 80020e4:	461a      	mov	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020f0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f007 fa17 	bl	800952c <HAL_UART_Init>
 80020fe:	4603      	mov	r3, r0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000004 	.word	0x20000004

0800210c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002114:	4b09      	ldr	r3, [pc, #36]	@ (800213c <__io_putchar+0x30>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	2394      	movs	r3, #148	@ 0x94
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <__io_putchar+0x34>)
 8002122:	1898      	adds	r0, r3, r2
 8002124:	1d39      	adds	r1, r7, #4
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	2201      	movs	r2, #1
 800212c:	f007 fa58 	bl	80095e0 <HAL_UART_Transmit>
  return ch;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000798 	.word	0x20000798
 8002140:	20000704 	.word	0x20000704

08002144 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ff6f 	bl	800202c <BSP_PB_Callback>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800215c:	4b27      	ldr	r3, [pc, #156]	@ (80021fc <COM1_MspInit+0xa8>)
 800215e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002162:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <COM1_MspInit+0xa8>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800216c:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <COM1_MspInit+0xa8>)
 800216e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800217a:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <COM1_MspInit+0xa8>)
 800217c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002180:	4a1e      	ldr	r2, [pc, #120]	@ (80021fc <COM1_MspInit+0xa8>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <COM1_MspInit+0xa8>)
 800218c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <COM1_MspInit+0xa8>)
 800219a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800219e:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <COM1_MspInit+0xa8>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021a4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <COM1_MspInit+0xa8>)
 80021aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80021b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80021c0:	2302      	movs	r3, #2
 80021c2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80021c8:	2307      	movs	r3, #7
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	480b      	ldr	r0, [pc, #44]	@ (8002200 <COM1_MspInit+0xac>)
 80021d4:	f001 fcc0 	bl	8003b58 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80021d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80021e2:	2307      	movs	r3, #7
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4804      	ldr	r0, [pc, #16]	@ (8002200 <COM1_MspInit+0xac>)
 80021ee:	f001 fcb3 	bl	8003b58 <HAL_GPIO_Init>
}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	46020c00 	.word	0x46020c00
 8002200:	42020000 	.word	0x42020000

08002204 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_Init+0x50>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_Init+0x50>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f98c 	bl	8002532 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800221a:	f003 f84f 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800221e:	4602      	mov	r2, r0
 8002220:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_Init+0x54>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	490c      	ldr	r1, [pc, #48]	@ (800225c <HAL_Init+0x58>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <HAL_Init+0x5c>)
 8002232:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002234:	2004      	movs	r0, #4
 8002236:	f000 f9d1 	bl	80025dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800223a:	200f      	movs	r0, #15
 800223c:	f000 f812 	bl	8002264 <HAL_InitTick>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e002      	b.n	8002250 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800224a:	f7fe ffd3 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40022000 	.word	0x40022000
 8002258:	46020c00 	.word	0x46020c00
 800225c:	0800ad30 	.word	0x0800ad30
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002270:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_InitTick+0xdc>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e05c      	b.n	8002336 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800227c:	4b31      	ldr	r3, [pc, #196]	@ (8002344 <HAL_InitTick+0xe0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b04      	cmp	r3, #4
 8002286:	d10c      	bne.n	80022a2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002288:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_InitTick+0xe4>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_InitTick+0xdc>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e037      	b.n	8002312 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80022a2:	f000 f9f3 	bl	800268c <HAL_SYSTICK_GetCLKSourceConfig>
 80022a6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d023      	beq.n	80022f6 <HAL_InitTick+0x92>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d82d      	bhi.n	8002310 <HAL_InitTick+0xac>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_InitTick+0x5e>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d00d      	beq.n	80022dc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80022c0:	e026      	b.n	8002310 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80022c2:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <HAL_InitTick+0xe4>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_InitTick+0xdc>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80022d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	60fb      	str	r3, [r7, #12]
        break;
 80022da:	e01a      	b.n	8002312 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_InitTick+0xdc>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	60fb      	str	r3, [r7, #12]
        break;
 80022f4:	e00d      	b.n	8002312 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_InitTick+0xdc>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002300:	fbb3 f3f2 	udiv	r3, r3, r2
 8002304:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	60fb      	str	r3, [r7, #12]
        break;
 800230e:	e000      	b.n	8002312 <HAL_InitTick+0xae>
        break;
 8002310:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f940 	bl	8002598 <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e009      	b.n	8002336 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002322:	2200      	movs	r2, #0
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	f04f 30ff 	mov.w	r0, #4294967295
 800232a:	f000 f90d 	bl	8002548 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800232e:	4a07      	ldr	r2, [pc, #28]	@ (800234c <HAL_InitTick+0xe8>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000001c 	.word	0x2000001c
 8002344:	e000e010 	.word	0xe000e010
 8002348:	20000000 	.word	0x20000000
 800234c:	20000018 	.word	0x20000018

08002350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_IncTick+0x20>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_IncTick+0x24>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <HAL_IncTick+0x24>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	2000001c 	.word	0x2000001c
 8002374:	2000079c 	.word	0x2000079c

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	@ (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000079c 	.word	0x2000079c

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d005      	beq.n	80023b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_Delay+0x44>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b6:	bf00      	nop
 80023b8:	f7ff ffde 	bl	8002378 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8f7      	bhi.n	80023b8 <HAL_Delay+0x28>
  {
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000001c 	.word	0x2000001c

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	@ (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4907      	ldr	r1, [pc, #28]	@ (8002474 <__NVIC_EnableIRQ+0x38>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	@ (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	@ (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	@ 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff4c 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002556:	f7ff ff63 	bl	8002420 <__NVIC_GetPriorityGrouping>
 800255a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	6978      	ldr	r0, [r7, #20]
 8002562:	f7ff ffb3 	bl	80024cc <NVIC_EncodePriority>
 8002566:	4602      	mov	r2, r0
 8002568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff82 	bl	8002478 <__NVIC_SetPriority>
}
 8002574:	bf00      	nop
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff56 	bl	800243c <__NVIC_EnableIRQ>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a8:	d301      	bcc.n	80025ae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00d      	b.n	80025ca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_SYSTICK_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_SYSTICK_Config+0x40>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_SYSTICK_Config+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <HAL_SYSTICK_Config+0x40>)
 80025c2:	f043 0303 	orr.w	r3, r3, #3
 80025c6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d844      	bhi.n	8002674 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80025ea:	a201      	add	r2, pc, #4	@ (adr r2, 80025f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002613 	.word	0x08002613
 80025f4:	08002631 	.word	0x08002631
 80025f8:	08002653 	.word	0x08002653
 80025fc:	08002675 	.word	0x08002675
 8002600:	08002605 	.word	0x08002605
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002604:	4b1f      	ldr	r3, [pc, #124]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1e      	ldr	r2, [pc, #120]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6013      	str	r3, [r2, #0]
      break;
 8002610:	e031      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002612:	4b1c      	ldr	r3, [pc, #112]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1b      	ldr	r2, [pc, #108]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002624:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002626:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800262a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800262e:	e022      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002636:	f023 0304 	bic.w	r3, r3, #4
 800263a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002642:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002648:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800264c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002650:	e011      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002664:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002668:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800266a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002672:	e000      	b.n	8002676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002674:	bf00      	nop
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010
 8002688:	46020c00 	.word	0x46020c00

0800268c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800269e:	2304      	movs	r3, #4
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	e021      	b.n	80026e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026aa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80026ae:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026b6:	d011      	beq.n	80026dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026be:	d810      	bhi.n	80026e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026cc:	d003      	beq.n	80026d6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80026ce:	e008      	b.n	80026e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
        break;
 80026d4:	e008      	b.n	80026e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80026d6:	2301      	movs	r3, #1
 80026d8:	607b      	str	r3, [r7, #4]
        break;
 80026da:	e005      	b.n	80026e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80026dc:	2302      	movs	r3, #2
 80026de:	607b      	str	r3, [r7, #4]
        break;
 80026e0:	e002      	b.n	80026e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
        break;
 80026e6:	bf00      	nop
    }
  }
  return systick_source;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e010 	.word	0xe000e010
 80026fc:	46020c00 	.word	0x46020c00

08002700 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e04f      	b.n	80027b8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_DMA_Start_IT+0x26>
 8002722:	2302      	movs	r3, #2
 8002724:	e048      	b.n	80027b8 <HAL_DMA_Start_IT+0xb8>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d136      	bne.n	80027a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f9d3 	bl	8002afa <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002762:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002792:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e007      	b.n	80027b8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80027d0:	f023 030f 	bic.w	r3, r3, #15
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027de:	3b50      	subs	r3, #80	@ 0x50
 80027e0:	09db      	lsrs	r3, r3, #7
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2201      	movs	r2, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 813b 	beq.w	8002a76 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d011      	beq.n	8002832 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002824:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002856:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285c:	f043 0202 	orr.w	r2, r3, #2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002888:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	f043 0204 	orr.w	r2, r3, #4
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d011      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028ba:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f043 0208 	orr.w	r2, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00c      	beq.n	80028fe <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ec:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d04c      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002922:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b04      	cmp	r3, #4
 800292e:	d12e      	bne.n	800298e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800293e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0202 	orr.w	r2, r2, #2
 800294e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002968:	2201      	movs	r2, #1
 800296a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2200      	movs	r2, #0
 8002972:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d07a      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
        }

        return;
 800298c:	e075      	b.n	8002a7a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2205      	movs	r2, #5
 8002992:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d039      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d032      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d012      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d116      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d111      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ee:	2201      	movs	r2, #1
 80029f0:	731a      	strb	r2, [r3, #12]
 80029f2:	e008      	b.n	8002a06 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002a0e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d025      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0202 	orr.w	r2, r2, #2
 8002a3e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a58:	2201      	movs	r2, #1
 8002a5a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e002      	b.n	8002a7c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002a7a:	bf00      	nop
    }
  }
}
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e02b      	b.n	8002aee <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002a9e:	f023 030f 	bic.w	r3, r3, #15
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	3b50      	subs	r3, #80	@ 0x50
 8002aae:	09db      	lsrs	r3, r3, #7
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f003 0311 	and.w	r3, r3, #17
 8002acc:	2b11      	cmp	r3, #17
 8002ace:	d106      	bne.n	8002ade <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	e006      	b.n	8002aec <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	b291      	uxth	r1, r2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002b26:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff fc14 	bl	8002378 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0db      	b.n	8002d14 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6e      	ldr	r2, [pc, #440]	@ (8002d1c <HAL_DMAEx_List_Init+0x1d8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	f000 809f 	beq.w	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6c      	ldr	r2, [pc, #432]	@ (8002d20 <HAL_DMAEx_List_Init+0x1dc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	f000 8099 	beq.w	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6a      	ldr	r2, [pc, #424]	@ (8002d24 <HAL_DMAEx_List_Init+0x1e0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f000 8093 	beq.w	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a68      	ldr	r2, [pc, #416]	@ (8002d28 <HAL_DMAEx_List_Init+0x1e4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	f000 808d 	beq.w	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a66      	ldr	r2, [pc, #408]	@ (8002d2c <HAL_DMAEx_List_Init+0x1e8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a64      	ldr	r2, [pc, #400]	@ (8002d30 <HAL_DMAEx_List_Init+0x1ec>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	f000 8081 	beq.w	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a62      	ldr	r2, [pc, #392]	@ (8002d34 <HAL_DMAEx_List_Init+0x1f0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d07b      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a61      	ldr	r2, [pc, #388]	@ (8002d38 <HAL_DMAEx_List_Init+0x1f4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d076      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8002d3c <HAL_DMAEx_List_Init+0x1f8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d071      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d40 <HAL_DMAEx_List_Init+0x1fc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d06c      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8002d44 <HAL_DMAEx_List_Init+0x200>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d067      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5b      	ldr	r2, [pc, #364]	@ (8002d48 <HAL_DMAEx_List_Init+0x204>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d062      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a59      	ldr	r2, [pc, #356]	@ (8002d4c <HAL_DMAEx_List_Init+0x208>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d05d      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a58      	ldr	r2, [pc, #352]	@ (8002d50 <HAL_DMAEx_List_Init+0x20c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d058      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <HAL_DMAEx_List_Init+0x210>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d053      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a55      	ldr	r2, [pc, #340]	@ (8002d58 <HAL_DMAEx_List_Init+0x214>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04e      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a53      	ldr	r2, [pc, #332]	@ (8002d5c <HAL_DMAEx_List_Init+0x218>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d049      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a52      	ldr	r2, [pc, #328]	@ (8002d60 <HAL_DMAEx_List_Init+0x21c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d044      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a50      	ldr	r2, [pc, #320]	@ (8002d64 <HAL_DMAEx_List_Init+0x220>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d03f      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a4f      	ldr	r2, [pc, #316]	@ (8002d68 <HAL_DMAEx_List_Init+0x224>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d03a      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a4d      	ldr	r2, [pc, #308]	@ (8002d6c <HAL_DMAEx_List_Init+0x228>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d035      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002d70 <HAL_DMAEx_List_Init+0x22c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d030      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	@ (8002d74 <HAL_DMAEx_List_Init+0x230>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02b      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a49      	ldr	r2, [pc, #292]	@ (8002d78 <HAL_DMAEx_List_Init+0x234>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d026      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a47      	ldr	r2, [pc, #284]	@ (8002d7c <HAL_DMAEx_List_Init+0x238>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d021      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a46      	ldr	r2, [pc, #280]	@ (8002d80 <HAL_DMAEx_List_Init+0x23c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d01c      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a44      	ldr	r2, [pc, #272]	@ (8002d84 <HAL_DMAEx_List_Init+0x240>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d017      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a43      	ldr	r2, [pc, #268]	@ (8002d88 <HAL_DMAEx_List_Init+0x244>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d012      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a41      	ldr	r2, [pc, #260]	@ (8002d8c <HAL_DMAEx_List_Init+0x248>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	@ (8002d90 <HAL_DMAEx_List_Init+0x24c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d008      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3e      	ldr	r2, [pc, #248]	@ (8002d94 <HAL_DMAEx_List_Init+0x250>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_DMAEx_List_Init+0x162>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8002d98 <HAL_DMAEx_List_Init+0x254>)
 8002ca4:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0206 	orr.w	r2, r2, #6
 8002cc4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002cc8:	f7ff fb56 	bl	8002378 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d908      	bls.n	8002ce8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2210      	movs	r2, #16
 8002cda:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e015      	b.n	8002d14 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e8      	bne.n	8002cc8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 faba 	bl	8003270 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40020050 	.word	0x40020050
 8002d20:	50020050 	.word	0x50020050
 8002d24:	400200d0 	.word	0x400200d0
 8002d28:	500200d0 	.word	0x500200d0
 8002d2c:	40020150 	.word	0x40020150
 8002d30:	50020150 	.word	0x50020150
 8002d34:	400201d0 	.word	0x400201d0
 8002d38:	500201d0 	.word	0x500201d0
 8002d3c:	40020250 	.word	0x40020250
 8002d40:	50020250 	.word	0x50020250
 8002d44:	400202d0 	.word	0x400202d0
 8002d48:	500202d0 	.word	0x500202d0
 8002d4c:	40020350 	.word	0x40020350
 8002d50:	50020350 	.word	0x50020350
 8002d54:	400203d0 	.word	0x400203d0
 8002d58:	500203d0 	.word	0x500203d0
 8002d5c:	40020450 	.word	0x40020450
 8002d60:	50020450 	.word	0x50020450
 8002d64:	400204d0 	.word	0x400204d0
 8002d68:	500204d0 	.word	0x500204d0
 8002d6c:	40020550 	.word	0x40020550
 8002d70:	50020550 	.word	0x50020550
 8002d74:	400205d0 	.word	0x400205d0
 8002d78:	500205d0 	.word	0x500205d0
 8002d7c:	40020650 	.word	0x40020650
 8002d80:	50020650 	.word	0x50020650
 8002d84:	400206d0 	.word	0x400206d0
 8002d88:	500206d0 	.word	0x500206d0
 8002d8c:	40020750 	.word	0x40020750
 8002d90:	50020750 	.word	0x50020750
 8002d94:	400207d0 	.word	0x400207d0
 8002d98:	500207d0 	.word	0x500207d0

08002d9c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_DMAEx_List_Start_IT+0x16>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e082      	b.n	8002ebc <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002dbc:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d005      	beq.n	8002ddc <HAL_DMAEx_List_Start_IT+0x40>
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d16a      	bne.n	8002eac <HAL_DMAEx_List_Start_IT+0x110>
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d067      	beq.n	8002eac <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d157      	bne.n	8002e98 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_DMAEx_List_Start_IT+0x5a>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e062      	b.n	8002ebc <HAL_DMAEx_List_Start_IT+0x120>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002e2a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e42:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e5a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f107 010c 	add.w	r1, r7, #12
 8002e66:	2200      	movs	r2, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fd1d 	bl	80038a8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	0c0b      	lsrs	r3, r1, #16
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e007      	b.n	8002ebc <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2240      	movs	r2, #64	@ 0x40
 8002eb0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_DMAEx_List_BuildNode+0x16>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e004      	b.n	8002ee8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb1d 	bl	8003520 <DMA_List_BuildNode>

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	@ 0x30
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_DMAEx_List_InsertNode+0x18>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b6      	b.n	800307a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d104      	bne.n	8002f1e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2204      	movs	r2, #4
 8002f18:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0ad      	b.n	800307a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fc52 	bl	80037d0 <DMA_List_CheckNodesBaseAddresses>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2205      	movs	r2, #5
 8002f36:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e09e      	b.n	800307a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fc73 	bl	8003830 <DMA_List_CheckNodesTypes>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2204      	movs	r2, #4
 8002f54:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e08f      	b.n	800307a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8002f66:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fc99 	bl	80038a8 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e06c      	b.n	800306c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa4:	4319      	orrs	r1, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	e05b      	b.n	800306c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fca:	4319      	orrs	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e043      	b.n	8003062 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fc8e 	bl	8003908 <DMA_List_FindNode>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d132      	bne.n	8003058 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d11a      	bne.n	8003032 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	461a      	mov	r2, r3
 800300a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800300e:	4013      	ands	r3, r2
 8003010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003014:	4319      	orrs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003022:	4013      	ands	r3, r2
 8003024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003028:	4319      	orrs	r1, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003030:	e017      	b.n	8003062 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003048:	4013      	ands	r3, r2
 800304a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800304c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800304e:	4319      	orrs	r1, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003056:	e004      	b.n	8003062 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2206      	movs	r2, #6
 800305c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e00b      	b.n	800307a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3730      	adds	r7, #48	@ 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08a      	sub	sp, #40	@ 0x28
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e052      	b.n	800313a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e049      	b.n	800313a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d101      	bne.n	80030be <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e03d      	b.n	800313a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2204      	movs	r2, #4
 80030c2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e038      	b.n	800313a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d104      	bne.n	80030da <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2204      	movs	r2, #4
 80030d4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e02f      	b.n	800313a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f107 0220 	add.w	r2, r7, #32
 80030ee:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fbd8 	bl	80038a8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	461a      	mov	r2, r3
 8003102:	2100      	movs	r1, #0
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fbff 	bl	8003908 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003114:	4013      	ands	r3, r2
 8003116:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4610      	mov	r0, r2
 800311c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800311e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003120:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3728      	adds	r7, #40	@ 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_DMAEx_List_LinkQ+0x16>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e072      	b.n	8003244 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003164:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d002      	beq.n	8003178 <HAL_DMAEx_List_LinkQ+0x34>
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d108      	bne.n	800318a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2240      	movs	r2, #64	@ 0x40
 800317c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e05c      	b.n	8003244 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	7b1b      	ldrb	r3, [r3, #12]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d104      	bne.n	800319e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e052      	b.n	8003244 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003250 <HAL_DMAEx_List_LinkQ+0x10c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMAEx_List_LinkQ+0xaa>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a29      	ldr	r2, [pc, #164]	@ (8003254 <HAL_DMAEx_List_LinkQ+0x110>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMAEx_List_LinkQ+0xaa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <HAL_DMAEx_List_LinkQ+0x114>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMAEx_List_LinkQ+0xaa>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a26      	ldr	r2, [pc, #152]	@ (800325c <HAL_DMAEx_List_LinkQ+0x118>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMAEx_List_LinkQ+0xaa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a25      	ldr	r2, [pc, #148]	@ (8003260 <HAL_DMAEx_List_LinkQ+0x11c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMAEx_List_LinkQ+0xaa>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a23      	ldr	r2, [pc, #140]	@ (8003264 <HAL_DMAEx_List_LinkQ+0x120>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMAEx_List_LinkQ+0xaa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a22      	ldr	r2, [pc, #136]	@ (8003268 <HAL_DMAEx_List_LinkQ+0x124>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMAEx_List_LinkQ+0xaa>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a20      	ldr	r2, [pc, #128]	@ (800326c <HAL_DMAEx_List_LinkQ+0x128>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_DMAEx_List_LinkQ+0xae>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_DMAEx_List_LinkQ+0xb0>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2203      	movs	r2, #3
 800320a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e019      	b.n	8003244 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003214:	2b81      	cmp	r3, #129	@ 0x81
 8003216:	d108      	bne.n	800322a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2204      	movs	r2, #4
 8003224:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e00c      	b.n	8003244 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2204      	movs	r2, #4
 8003236:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e003      	b.n	8003244 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40020650 	.word	0x40020650
 8003254:	50020650 	.word	0x50020650
 8003258:	400206d0 	.word	0x400206d0
 800325c:	500206d0 	.word	0x500206d0
 8003260:	40020750 	.word	0x40020750
 8003264:	50020750 	.word	0x50020750
 8003268:	400207d0 	.word	0x400207d0
 800326c:	500207d0 	.word	0x500207d0

08003270 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a85      	ldr	r2, [pc, #532]	@ (80034a0 <DMA_List_Init+0x230>)
 800328a:	4293      	cmp	r3, r2
 800328c:	f000 80a0 	beq.w	80033d0 <DMA_List_Init+0x160>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a83      	ldr	r2, [pc, #524]	@ (80034a4 <DMA_List_Init+0x234>)
 8003296:	4293      	cmp	r3, r2
 8003298:	f000 809a 	beq.w	80033d0 <DMA_List_Init+0x160>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a81      	ldr	r2, [pc, #516]	@ (80034a8 <DMA_List_Init+0x238>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f000 8094 	beq.w	80033d0 <DMA_List_Init+0x160>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a7f      	ldr	r2, [pc, #508]	@ (80034ac <DMA_List_Init+0x23c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f000 808e 	beq.w	80033d0 <DMA_List_Init+0x160>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a7d      	ldr	r2, [pc, #500]	@ (80034b0 <DMA_List_Init+0x240>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f000 8088 	beq.w	80033d0 <DMA_List_Init+0x160>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a7b      	ldr	r2, [pc, #492]	@ (80034b4 <DMA_List_Init+0x244>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f000 8082 	beq.w	80033d0 <DMA_List_Init+0x160>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a79      	ldr	r2, [pc, #484]	@ (80034b8 <DMA_List_Init+0x248>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d07c      	beq.n	80033d0 <DMA_List_Init+0x160>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a78      	ldr	r2, [pc, #480]	@ (80034bc <DMA_List_Init+0x24c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d077      	beq.n	80033d0 <DMA_List_Init+0x160>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a76      	ldr	r2, [pc, #472]	@ (80034c0 <DMA_List_Init+0x250>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d072      	beq.n	80033d0 <DMA_List_Init+0x160>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a75      	ldr	r2, [pc, #468]	@ (80034c4 <DMA_List_Init+0x254>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d06d      	beq.n	80033d0 <DMA_List_Init+0x160>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a73      	ldr	r2, [pc, #460]	@ (80034c8 <DMA_List_Init+0x258>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d068      	beq.n	80033d0 <DMA_List_Init+0x160>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a72      	ldr	r2, [pc, #456]	@ (80034cc <DMA_List_Init+0x25c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d063      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a70      	ldr	r2, [pc, #448]	@ (80034d0 <DMA_List_Init+0x260>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d05e      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6f      	ldr	r2, [pc, #444]	@ (80034d4 <DMA_List_Init+0x264>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d059      	beq.n	80033d0 <DMA_List_Init+0x160>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6d      	ldr	r2, [pc, #436]	@ (80034d8 <DMA_List_Init+0x268>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d054      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6c      	ldr	r2, [pc, #432]	@ (80034dc <DMA_List_Init+0x26c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d04f      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a6a      	ldr	r2, [pc, #424]	@ (80034e0 <DMA_List_Init+0x270>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d04a      	beq.n	80033d0 <DMA_List_Init+0x160>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a69      	ldr	r2, [pc, #420]	@ (80034e4 <DMA_List_Init+0x274>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d045      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a67      	ldr	r2, [pc, #412]	@ (80034e8 <DMA_List_Init+0x278>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d040      	beq.n	80033d0 <DMA_List_Init+0x160>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a66      	ldr	r2, [pc, #408]	@ (80034ec <DMA_List_Init+0x27c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d03b      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a64      	ldr	r2, [pc, #400]	@ (80034f0 <DMA_List_Init+0x280>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d036      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a63      	ldr	r2, [pc, #396]	@ (80034f4 <DMA_List_Init+0x284>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d031      	beq.n	80033d0 <DMA_List_Init+0x160>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a61      	ldr	r2, [pc, #388]	@ (80034f8 <DMA_List_Init+0x288>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02c      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a60      	ldr	r2, [pc, #384]	@ (80034fc <DMA_List_Init+0x28c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d027      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5e      	ldr	r2, [pc, #376]	@ (8003500 <DMA_List_Init+0x290>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <DMA_List_Init+0x160>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5d      	ldr	r2, [pc, #372]	@ (8003504 <DMA_List_Init+0x294>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d01d      	beq.n	80033d0 <DMA_List_Init+0x160>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <DMA_List_Init+0x298>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <DMA_List_Init+0x160>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5a      	ldr	r2, [pc, #360]	@ (800350c <DMA_List_Init+0x29c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <DMA_List_Init+0x160>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a58      	ldr	r2, [pc, #352]	@ (8003510 <DMA_List_Init+0x2a0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <DMA_List_Init+0x160>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a57      	ldr	r2, [pc, #348]	@ (8003514 <DMA_List_Init+0x2a4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <DMA_List_Init+0x160>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a55      	ldr	r2, [pc, #340]	@ (8003518 <DMA_List_Init+0x2a8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <DMA_List_Init+0x160>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a54      	ldr	r2, [pc, #336]	@ (800351c <DMA_List_Init+0x2ac>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <DMA_List_Init+0x164>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <DMA_List_Init+0x166>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a36      	ldr	r2, [pc, #216]	@ (8003500 <DMA_List_Init+0x290>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <DMA_List_Init+0x202>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a34      	ldr	r2, [pc, #208]	@ (8003504 <DMA_List_Init+0x294>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01d      	beq.n	8003472 <DMA_List_Init+0x202>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a33      	ldr	r2, [pc, #204]	@ (8003508 <DMA_List_Init+0x298>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d018      	beq.n	8003472 <DMA_List_Init+0x202>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a31      	ldr	r2, [pc, #196]	@ (800350c <DMA_List_Init+0x29c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <DMA_List_Init+0x202>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a30      	ldr	r2, [pc, #192]	@ (8003510 <DMA_List_Init+0x2a0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00e      	beq.n	8003472 <DMA_List_Init+0x202>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2e      	ldr	r2, [pc, #184]	@ (8003514 <DMA_List_Init+0x2a4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d009      	beq.n	8003472 <DMA_List_Init+0x202>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2d      	ldr	r2, [pc, #180]	@ (8003518 <DMA_List_Init+0x2a8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <DMA_List_Init+0x202>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2b      	ldr	r2, [pc, #172]	@ (800351c <DMA_List_Init+0x2ac>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <DMA_List_Init+0x206>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <DMA_List_Init+0x208>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2200      	movs	r2, #0
 800348a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2200      	movs	r2, #0
 8003492:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40020050 	.word	0x40020050
 80034a4:	50020050 	.word	0x50020050
 80034a8:	400200d0 	.word	0x400200d0
 80034ac:	500200d0 	.word	0x500200d0
 80034b0:	40020150 	.word	0x40020150
 80034b4:	50020150 	.word	0x50020150
 80034b8:	400201d0 	.word	0x400201d0
 80034bc:	500201d0 	.word	0x500201d0
 80034c0:	40020250 	.word	0x40020250
 80034c4:	50020250 	.word	0x50020250
 80034c8:	400202d0 	.word	0x400202d0
 80034cc:	500202d0 	.word	0x500202d0
 80034d0:	40020350 	.word	0x40020350
 80034d4:	50020350 	.word	0x50020350
 80034d8:	400203d0 	.word	0x400203d0
 80034dc:	500203d0 	.word	0x500203d0
 80034e0:	40020450 	.word	0x40020450
 80034e4:	50020450 	.word	0x50020450
 80034e8:	400204d0 	.word	0x400204d0
 80034ec:	500204d0 	.word	0x500204d0
 80034f0:	40020550 	.word	0x40020550
 80034f4:	50020550 	.word	0x50020550
 80034f8:	400205d0 	.word	0x400205d0
 80034fc:	500205d0 	.word	0x500205d0
 8003500:	40020650 	.word	0x40020650
 8003504:	50020650 	.word	0x50020650
 8003508:	400206d0 	.word	0x400206d0
 800350c:	500206d0 	.word	0x500206d0
 8003510:	40020750 	.word	0x40020750
 8003514:	50020750 	.word	0x50020750
 8003518:	400207d0 	.word	0x400207d0
 800351c:	500207d0 	.word	0x500207d0

08003520 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003532:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003538:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800353e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003544:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	051b      	lsls	r3, r3, #20
 800356c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003570:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	3b01      	subs	r3, #1
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800357e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003580:	431a      	orrs	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	f240 237f 	movw	r3, #639	@ 0x27f
 8003592:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003594:	431a      	orrs	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	d10c      	bne.n	80035be <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d011      	beq.n	80035d4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	e00a      	b.n	80035d4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c6:	d105      	bne.n	80035d4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00f      	beq.n	80035fc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80035f4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80035f6:	431a      	orrs	r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003600:	b29a      	uxth	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04e      	beq.n	80036b0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	3b01      	subs	r3, #1
 800361c:	0419      	lsls	r1, r3, #16
 800361e:	4b6a      	ldr	r3, [pc, #424]	@ (80037c8 <DMA_List_BuildNode+0x2a8>)
 8003620:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003622:	431a      	orrs	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362c:	2b00      	cmp	r3, #0
 800362e:	da06      	bge.n	800363e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e005      	b.n	800364a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364e:	2b00      	cmp	r3, #0
 8003650:	da06      	bge.n	8003660 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	e005      	b.n	800366c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	2b00      	cmp	r3, #0
 8003672:	da06      	bge.n	8003682 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e005      	b.n	800368e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003692:	2b00      	cmp	r3, #0
 8003694:	da06      	bge.n	80036a4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	609a      	str	r2, [r3, #8]
 80036a2:	e005      	b.n	80036b0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05d      	beq.n	8003788 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da09      	bge.n	80036e8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	425b      	negs	r3, r3
 80036da:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	615a      	str	r2, [r3, #20]
 80036e6:	e005      	b.n	80036f4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ec:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da0d      	bge.n	8003718 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003700:	425b      	negs	r3, r3
 8003702:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	0419      	lsls	r1, r3, #16
 800370c:	4b2f      	ldr	r3, [pc, #188]	@ (80037cc <DMA_List_BuildNode+0x2ac>)
 800370e:	400b      	ands	r3, r1
 8003710:	431a      	orrs	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	615a      	str	r2, [r3, #20]
 8003716:	e009      	b.n	800372c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	0419      	lsls	r1, r3, #16
 8003722:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <DMA_List_BuildNode+0x2ac>)
 8003724:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003726:	431a      	orrs	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003730:	2b00      	cmp	r3, #0
 8003732:	da08      	bge.n	8003746 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	425b      	negs	r3, r3
 800373a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	b29a      	uxth	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	619a      	str	r2, [r3, #24]
 8003744:	e004      	b.n	8003750 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	2b00      	cmp	r3, #0
 8003756:	da0b      	bge.n	8003770 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	425b      	negs	r3, r3
 800375e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003768:	431a      	orrs	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	619a      	str	r2, [r3, #24]
 800376e:	e007      	b.n	8003780 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800377a:	431a      	orrs	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
 8003786:	e002      	b.n	800378e <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80037ae:	e005      	b.n	80037bc <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	621a      	str	r2, [r3, #32]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	07ff0000 	.word	0x07ff0000
 80037cc:	1fff0000 	.word	0x1fff0000

080037d0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	0c1b      	lsrs	r3, r3, #16
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e00a      	b.n	8003812 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e004      	b.n	8003812 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e00e      	b.n	800386e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e006      	b.n	800386e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003880:	2302      	movs	r3, #2
 8003882:	e00b      	b.n	800389c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8003896:	2303      	movs	r3, #3
 8003898:	e000      	b.n	800389c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00c      	beq.n	80038da <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003900 <DMA_List_GetCLLRNodeInfo+0x58>)
 80038ca:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00f      	beq.n	80038f2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80038d8:	e00b      	b.n	80038f2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4a08      	ldr	r2, [pc, #32]	@ (8003904 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80038e4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2205      	movs	r2, #5
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	fe010000 	.word	0xfe010000
 8003904:	f8010000 	.word	0xf8010000

08003908 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d142      	bne.n	80039b2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800392c:	e01d      	b.n	800396a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e00f      	b.n	8003964 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4413      	add	r3, r2
 8003954:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800395c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	429a      	cmp	r2, r3
 8003972:	d3dc      	bcc.n	800392e <DMA_List_FindNode+0x26>
 8003974:	e029      	b.n	80039ca <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e00f      	b.n	80039ac <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4413      	add	r3, r2
 800399c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80039a4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d206      	bcs.n	80039ca <DMA_List_FindNode+0xc2>
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039c2:	4013      	ands	r3, r2
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d1d5      	bne.n	8003976 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039d6:	4013      	ands	r3, r2
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02b      	b.n	8003a3a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	041b      	lsls	r3, r3, #16
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00f      	beq.n	8003a38 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a24:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003a28:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	@ 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d011      	beq.n	8003a82 <HAL_EXTI_RegisterCallback+0x3c>
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	dc13      	bgt.n	8003a8a <HAL_EXTI_RegisterCallback+0x44>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_EXTI_RegisterCallback+0x26>
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d007      	beq.n	8003a7a <HAL_EXTI_RegisterCallback+0x34>
 8003a6a:	e00e      	b.n	8003a8a <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	609a      	str	r2, [r3, #8]
      break;
 8003a78:	e00a      	b.n	8003a90 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]
      break;
 8003a80:	e006      	b.n	8003a90 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
      break;
 8003a88:	e002      	b.n	8003a90 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8e:	bf00      	nop
  }

  return status;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e003      	b.n	8003aba <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	4b17      	ldr	r3, [pc, #92]	@ (8003b50 <HAL_EXTI_IRQHandler+0x88>)
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <HAL_EXTI_IRQHandler+0x8c>)
 8003b20:	4413      	add	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4798      	blx	r3
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	4602200c 	.word	0x4602200c
 8003b54:	46022010 	.word	0x46022010

08003b58 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	@ 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b6a:	e1ba      	b.n	8003ee2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2101      	movs	r1, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 81aa 	beq.w	8003edc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a55      	ldr	r2, [pc, #340]	@ (8003ce0 <HAL_GPIO_Init+0x188>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d15d      	bne.n	8003c4c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003b96:	2201      	movs	r2, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0201 	and.w	r2, r3, #1
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003bc0:	4a48      	ldr	r2, [pc, #288]	@ (8003ce4 <HAL_GPIO_Init+0x18c>)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bc8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003bca:	4a46      	ldr	r2, [pc, #280]	@ (8003ce4 <HAL_GPIO_Init+0x18c>)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	08da      	lsrs	r2, r3, #3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	3208      	adds	r2, #8
 8003bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	220f      	movs	r2, #15
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220b      	movs	r2, #11
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	08da      	lsrs	r2, r3, #3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3208      	adds	r2, #8
 8003c16:	69f9      	ldr	r1, [r7, #28]
 8003c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2202      	movs	r2, #2
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e067      	b.n	8003d1c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x104>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b12      	cmp	r3, #18
 8003c5a:	d145      	bne.n	8003ce8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	08da      	lsrs	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3208      	adds	r2, #8
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	220f      	movs	r2, #15
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	69f9      	ldr	r1, [r7, #28]
 8003ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e01e      	b.n	8003d1c <HAL_GPIO_Init+0x1c4>
 8003cde:	bf00      	nop
 8003ce0:	46020000 	.word	0x46020000
 8003ce4:	0800ad8c 	.word	0x0800ad8c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0203 	and.w	r2, r3, #3
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d00b      	beq.n	8003d3c <HAL_GPIO_Init+0x1e4>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d007      	beq.n	8003d3c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d30:	2b11      	cmp	r3, #17
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b12      	cmp	r3, #18
 8003d3a:	d130      	bne.n	8003d9e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	2203      	movs	r2, #3
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003d72:	2201      	movs	r2, #1
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	f003 0201 	and.w	r2, r3, #1
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d017      	beq.n	8003dd6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	2203      	movs	r2, #3
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d07c      	beq.n	8003edc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003de2:	4a47      	ldr	r2, [pc, #284]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3318      	adds	r3, #24
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	220f      	movs	r2, #15
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0a9a      	lsrs	r2, r3, #10
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <HAL_GPIO_Init+0x3ac>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	f002 0203 	and.w	r2, r2, #3
 8003e14:	00d2      	lsls	r2, r2, #3
 8003e16:	4093      	lsls	r3, r2
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003e1e:	4938      	ldr	r1, [pc, #224]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	3318      	adds	r3, #24
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003e2c:	4b34      	ldr	r3, [pc, #208]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003e50:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003e56:	4b2a      	ldr	r3, [pc, #168]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003e7a:	4a21      	ldr	r2, [pc, #132]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003e80:	4b1f      	ldr	r3, [pc, #124]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e86:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003ea6:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003eae:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <HAL_GPIO_Init+0x3a8>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f47f ae3d 	bne.w	8003b6c <HAL_GPIO_Init+0x14>
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	3724      	adds	r7, #36	@ 0x24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	46022000 	.word	0x46022000
 8003f04:	002f7f7f 	.word	0x002f7f7f

08003f08 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e007      	b.n	8003f36 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003f26:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 0204 	bic.w	r2, r3, #4
 8003f2e:	4905      	ldr	r1, [pc, #20]	@ (8003f44 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40030400 	.word	0x40030400

08003f48 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <HAL_ICACHE_Enable+0x1c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <HAL_ICACHE_Enable+0x1c>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40030400 	.word	0x40030400

08003f68 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003f70:	4b39      	ldr	r3, [pc, #228]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f78:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d10b      	bne.n	8003f9a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f88:	d905      	bls.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f8a:	4b33      	ldr	r3, [pc, #204]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a32      	ldr	r2, [pc, #200]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f94:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e057      	b.n	800404a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa0:	d90a      	bls.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	4a2a      	ldr	r2, [pc, #168]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb4:	60d3      	str	r3, [r2, #12]
 8003fb6:	e007      	b.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003fb8:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003fc0:	4925      	ldr	r1, [pc, #148]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fc8:	4b24      	ldr	r3, [pc, #144]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a24      	ldr	r2, [pc, #144]	@ (8004060 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	2232      	movs	r2, #50	@ 0x32
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	4a21      	ldr	r2, [pc, #132]	@ (8004060 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003fe6:	e002      	b.n	8003fee <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003fee:	4b1a      	ldr	r3, [pc, #104]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f3      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01b      	beq.n	800403e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004006:	4b15      	ldr	r3, [pc, #84]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	2232      	movs	r2, #50	@ 0x32
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	4a11      	ldr	r2, [pc, #68]	@ (8004060 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004024:	e002      	b.n	800402c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b01      	subs	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800402c:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f3      	bne.n	8004026 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e000      	b.n	800404a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	46020800 	.word	0x46020800
 800405c:	20000000 	.word	0x20000000
 8004060:	10624dd3 	.word	0x10624dd3

08004064 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004068:	4b04      	ldr	r3, [pc, #16]	@ (800407c <HAL_PWREx_GetVoltageRange+0x18>)
 800406a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	46020800 	.word	0x46020800

08004080 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004088:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <HAL_PWREx_ConfigSupply+0x94>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <HAL_PWREx_ConfigSupply+0x98>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	2232      	movs	r2, #50	@ 0x32
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	4a1f      	ldr	r2, [pc, #124]	@ (8004118 <HAL_PWREx_ConfigSupply+0x98>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	099b      	lsrs	r3, r3, #6
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d113      	bne.n	80040d4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80040ac:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_PWREx_ConfigSupply+0x9c>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a1a      	ldr	r2, [pc, #104]	@ (800411c <HAL_PWREx_ConfigSupply+0x9c>)
 80040b2:	f023 0302 	bic.w	r3, r3, #2
 80040b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040b8:	e002      	b.n	80040c0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040c0:	4b16      	ldr	r3, [pc, #88]	@ (800411c <HAL_PWREx_ConfigSupply+0x9c>)
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d116      	bne.n	80040fa <HAL_PWREx_ConfigSupply+0x7a>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f3      	bne.n	80040ba <HAL_PWREx_ConfigSupply+0x3a>
 80040d2:	e012      	b.n	80040fa <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <HAL_PWREx_ConfigSupply+0x9c>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a10      	ldr	r2, [pc, #64]	@ (800411c <HAL_PWREx_ConfigSupply+0x9c>)
 80040da:	f043 0302 	orr.w	r3, r3, #2
 80040de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040e0:	e002      	b.n	80040e8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040e8:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <HAL_PWREx_ConfigSupply+0x9c>)
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <HAL_PWREx_ConfigSupply+0x7a>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f3      	bne.n	80040e2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e000      	b.n	8004106 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000000 	.word	0x20000000
 8004118:	10624dd3 	.word	0x10624dd3
 800411c:	46020800 	.word	0x46020800

08004120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08e      	sub	sp, #56	@ 0x38
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f000 bec8 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	4b99      	ldr	r3, [pc, #612]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004144:	4b96      	ldr	r3, [pc, #600]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 816c 	beq.w	8004434 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_RCC_OscConfig+0x52>
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	2b0c      	cmp	r3, #12
 8004166:	f040 80de 	bne.w	8004326 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800416a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 80da 	bne.w	8004326 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f000 bea5 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004184:	4b86      	ldr	r3, [pc, #536]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_RCC_OscConfig+0x7a>
 8004190:	4b83      	ldr	r3, [pc, #524]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004198:	e005      	b.n	80041a6 <HAL_RCC_OscConfig+0x86>
 800419a:	4b81      	ldr	r3, [pc, #516]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800419c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d255      	bcs.n	8004256 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f9d9 	bl	800556c <RCC_SetFlashLatencyFromMSIRange>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f000 be82 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80041c6:	4b76      	ldr	r3, [pc, #472]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	4a75      	ldr	r2, [pc, #468]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80041cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041d0:	6093      	str	r3, [r2, #8]
 80041d2:	4b73      	ldr	r3, [pc, #460]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	4970      	ldr	r1, [pc, #448]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041ec:	d309      	bcc.n	8004202 <HAL_RCC_OscConfig+0xe2>
 80041ee:	4b6c      	ldr	r3, [pc, #432]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 021f 	bic.w	r2, r3, #31
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4969      	ldr	r1, [pc, #420]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60cb      	str	r3, [r1, #12]
 8004200:	e07e      	b.n	8004300 <HAL_RCC_OscConfig+0x1e0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	da0a      	bge.n	8004220 <HAL_RCC_OscConfig+0x100>
 800420a:	4b65      	ldr	r3, [pc, #404]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	015b      	lsls	r3, r3, #5
 8004218:	4961      	ldr	r1, [pc, #388]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800421a:	4313      	orrs	r3, r2
 800421c:	60cb      	str	r3, [r1, #12]
 800421e:	e06f      	b.n	8004300 <HAL_RCC_OscConfig+0x1e0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004228:	d30a      	bcc.n	8004240 <HAL_RCC_OscConfig+0x120>
 800422a:	4b5d      	ldr	r3, [pc, #372]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	4959      	ldr	r1, [pc, #356]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800423a:	4313      	orrs	r3, r2
 800423c:	60cb      	str	r3, [r1, #12]
 800423e:	e05f      	b.n	8004300 <HAL_RCC_OscConfig+0x1e0>
 8004240:	4b57      	ldr	r3, [pc, #348]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	03db      	lsls	r3, r3, #15
 800424e:	4954      	ldr	r1, [pc, #336]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004250:	4313      	orrs	r3, r2
 8004252:	60cb      	str	r3, [r1, #12]
 8004254:	e054      	b.n	8004300 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004256:	4b52      	ldr	r3, [pc, #328]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4a51      	ldr	r2, [pc, #324]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800425c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004260:	6093      	str	r3, [r2, #8]
 8004262:	4b4f      	ldr	r3, [pc, #316]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	494c      	ldr	r1, [pc, #304]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800427c:	d309      	bcc.n	8004292 <HAL_RCC_OscConfig+0x172>
 800427e:	4b48      	ldr	r3, [pc, #288]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 021f 	bic.w	r2, r3, #31
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4945      	ldr	r1, [pc, #276]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800428c:	4313      	orrs	r3, r2
 800428e:	60cb      	str	r3, [r1, #12]
 8004290:	e028      	b.n	80042e4 <HAL_RCC_OscConfig+0x1c4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	da0a      	bge.n	80042b0 <HAL_RCC_OscConfig+0x190>
 800429a:	4b41      	ldr	r3, [pc, #260]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	493d      	ldr	r1, [pc, #244]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60cb      	str	r3, [r1, #12]
 80042ae:	e019      	b.n	80042e4 <HAL_RCC_OscConfig+0x1c4>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b8:	d30a      	bcc.n	80042d0 <HAL_RCC_OscConfig+0x1b0>
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	4935      	ldr	r1, [pc, #212]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60cb      	str	r3, [r1, #12]
 80042ce:	e009      	b.n	80042e4 <HAL_RCC_OscConfig+0x1c4>
 80042d0:	4b33      	ldr	r3, [pc, #204]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	03db      	lsls	r3, r3, #15
 80042de:	4930      	ldr	r1, [pc, #192]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f93c 	bl	800556c <RCC_SetFlashLatencyFromMSIRange>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f000 bde5 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004300:	f001 f8de 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004304:	4b27      	ldr	r3, [pc, #156]	@ (80043a4 <HAL_RCC_OscConfig+0x284>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd ffab 	bl	8002264 <HAL_InitTick>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 808a 	beq.w	8004432 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800431e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004322:	f000 bdd2 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d066      	beq.n	80043fc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800432e:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1b      	ldr	r2, [pc, #108]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800433a:	f7fe f81d 	bl	8002378 <HAL_GetTick>
 800433e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004340:	e009      	b.n	8004356 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004342:	f7fe f819 	bl	8002378 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d902      	bls.n	8004356 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	f000 bdba 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004356:	4b12      	ldr	r3, [pc, #72]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ef      	beq.n	8004342 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004362:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4a0e      	ldr	r2, [pc, #56]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004368:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800436c:	6093      	str	r3, [r2, #8]
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	4909      	ldr	r1, [pc, #36]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004388:	d30e      	bcc.n	80043a8 <HAL_RCC_OscConfig+0x288>
 800438a:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 021f 	bic.w	r2, r3, #31
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4902      	ldr	r1, [pc, #8]	@ (80043a0 <HAL_RCC_OscConfig+0x280>)
 8004398:	4313      	orrs	r3, r2
 800439a:	60cb      	str	r3, [r1, #12]
 800439c:	e04a      	b.n	8004434 <HAL_RCC_OscConfig+0x314>
 800439e:	bf00      	nop
 80043a0:	46020c00 	.word	0x46020c00
 80043a4:	20000018 	.word	0x20000018
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	da0a      	bge.n	80043c6 <HAL_RCC_OscConfig+0x2a6>
 80043b0:	4b98      	ldr	r3, [pc, #608]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	015b      	lsls	r3, r3, #5
 80043be:	4995      	ldr	r1, [pc, #596]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60cb      	str	r3, [r1, #12]
 80043c4:	e036      	b.n	8004434 <HAL_RCC_OscConfig+0x314>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ce:	d30a      	bcc.n	80043e6 <HAL_RCC_OscConfig+0x2c6>
 80043d0:	4b90      	ldr	r3, [pc, #576]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	498d      	ldr	r1, [pc, #564]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60cb      	str	r3, [r1, #12]
 80043e4:	e026      	b.n	8004434 <HAL_RCC_OscConfig+0x314>
 80043e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	03db      	lsls	r3, r3, #15
 80043f4:	4987      	ldr	r1, [pc, #540]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60cb      	str	r3, [r1, #12]
 80043fa:	e01b      	b.n	8004434 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80043fc:	4b85      	ldr	r3, [pc, #532]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a84      	ldr	r2, [pc, #528]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004408:	f7fd ffb6 	bl	8002378 <HAL_GetTick>
 800440c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800440e:	e009      	b.n	8004424 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004410:	f7fd ffb2 	bl	8002378 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d902      	bls.n	8004424 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	f000 bd53 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004424:	4b7b      	ldr	r3, [pc, #492]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ef      	bne.n	8004410 <HAL_RCC_OscConfig+0x2f0>
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004432:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 808b 	beq.w	8004558 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	2b08      	cmp	r3, #8
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x334>
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d109      	bne.n	8004462 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004450:	2b03      	cmp	r3, #3
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d17d      	bne.n	8004558 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f000 bd34 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x35a>
 800446c:	4b69      	ldr	r3, [pc, #420]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a68      	ldr	r2, [pc, #416]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e041      	b.n	80044fe <HAL_RCC_OscConfig+0x3de>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004482:	d112      	bne.n	80044aa <HAL_RCC_OscConfig+0x38a>
 8004484:	4b63      	ldr	r3, [pc, #396]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a62      	ldr	r2, [pc, #392]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b60      	ldr	r3, [pc, #384]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a5f      	ldr	r2, [pc, #380]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004496:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b5d      	ldr	r3, [pc, #372]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e029      	b.n	80044fe <HAL_RCC_OscConfig+0x3de>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80044b2:	d112      	bne.n	80044da <HAL_RCC_OscConfig+0x3ba>
 80044b4:	4b57      	ldr	r3, [pc, #348]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a56      	ldr	r2, [pc, #344]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b54      	ldr	r3, [pc, #336]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a53      	ldr	r2, [pc, #332]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b51      	ldr	r3, [pc, #324]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a50      	ldr	r2, [pc, #320]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e011      	b.n	80044fe <HAL_RCC_OscConfig+0x3de>
 80044da:	4b4e      	ldr	r3, [pc, #312]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a4d      	ldr	r2, [pc, #308]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b48      	ldr	r3, [pc, #288]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a47      	ldr	r2, [pc, #284]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d014      	beq.n	8004530 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004506:	f7fd ff37 	bl	8002378 <HAL_GetTick>
 800450a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450c:	e009      	b.n	8004522 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450e:	f7fd ff33 	bl	8002378 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b64      	cmp	r3, #100	@ 0x64
 800451a:	d902      	bls.n	8004522 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	f000 bcd4 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004522:	4b3c      	ldr	r3, [pc, #240]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ef      	beq.n	800450e <HAL_RCC_OscConfig+0x3ee>
 800452e:	e013      	b.n	8004558 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004530:	f7fd ff22 	bl	8002378 <HAL_GetTick>
 8004534:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	e009      	b.n	800454c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004538:	f7fd ff1e 	bl	8002378 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	@ 0x64
 8004544:	d902      	bls.n	800454c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	f000 bcbf 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454c:	4b31      	ldr	r3, [pc, #196]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ef      	bne.n	8004538 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05f      	beq.n	8004624 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	2b04      	cmp	r3, #4
 8004568:	d005      	beq.n	8004576 <HAL_RCC_OscConfig+0x456>
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	2b0c      	cmp	r3, #12
 800456e:	d114      	bne.n	800459a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	2b02      	cmp	r3, #2
 8004574:	d111      	bne.n	800459a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f000 bca3 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b23      	ldr	r3, [pc, #140]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	4920      	ldr	r1, [pc, #128]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004598:	e044      	b.n	8004624 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d024      	beq.n	80045ec <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80045a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045ae:	f7fd fee3 	bl	8002378 <HAL_GetTick>
 80045b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b4:	e009      	b.n	80045ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b6:	f7fd fedf 	bl	8002378 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d902      	bls.n	80045ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	f000 bc80 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80045d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	490b      	ldr	r1, [pc, #44]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	610b      	str	r3, [r1, #16]
 80045ea:	e01b      	b.n	8004624 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80045ec:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045f8:	f7fd febe 	bl	8002378 <HAL_GetTick>
 80045fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd feba 	bl	8002378 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d904      	bls.n	8004618 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	f000 bc5b 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
 8004614:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004618:	4baf      	ldr	r3, [pc, #700]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ed      	bne.n	8004600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80c8 	beq.w	80047c2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004638:	4ba7      	ldr	r3, [pc, #668]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 800463a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d111      	bne.n	800466a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004646:	4ba4      	ldr	r3, [pc, #656]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800464c:	4aa2      	ldr	r2, [pc, #648]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 800464e:	f043 0304 	orr.w	r3, r3, #4
 8004652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004656:	4ba0      	ldr	r3, [pc, #640]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800466a:	4b9c      	ldr	r3, [pc, #624]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d119      	bne.n	80046aa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004676:	4b99      	ldr	r3, [pc, #612]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 8004678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467a:	4a98      	ldr	r2, [pc, #608]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fd fe79 	bl	8002378 <HAL_GetTick>
 8004686:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004688:	e009      	b.n	800469e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468a:	f7fd fe75 	bl	8002378 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d902      	bls.n	800469e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	f000 bc16 	b.w	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800469e:	4b8f      	ldr	r3, [pc, #572]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ef      	beq.n	800468a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d05f      	beq.n	8004772 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80046b2:	4b89      	ldr	r3, [pc, #548]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80046b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d037      	beq.n	8004738 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e3f4      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01b      	beq.n	8004722 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80046ea:	4b7b      	ldr	r3, [pc, #492]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80046ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046f0:	4a79      	ldr	r2, [pc, #484]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80046f2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80046f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80046fa:	f7fd fe3d 	bl	8002378 <HAL_GetTick>
 80046fe:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004702:	f7fd fe39 	bl	8002378 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b05      	cmp	r3, #5
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e3da      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004714:	4b70      	ldr	r3, [pc, #448]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800471a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1ef      	bne.n	8004702 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004722:	4b6d      	ldr	r3, [pc, #436]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004728:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	4969      	ldr	r1, [pc, #420]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004738:	4b67      	ldr	r3, [pc, #412]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 800473a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800473e:	4a66      	ldr	r2, [pc, #408]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004740:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004748:	f7fd fe16 	bl	8002378 <HAL_GetTick>
 800474c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004750:	f7fd fe12 	bl	8002378 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b05      	cmp	r3, #5
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e3b3      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004762:	4b5d      	ldr	r3, [pc, #372]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <HAL_RCC_OscConfig+0x630>
 8004770:	e01b      	b.n	80047aa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004772:	4b59      	ldr	r3, [pc, #356]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004778:	4a57      	ldr	r2, [pc, #348]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 800477a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800477e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004782:	f7fd fdf9 	bl	8002378 <HAL_GetTick>
 8004786:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478a:	f7fd fdf5 	bl	8002378 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b05      	cmp	r3, #5
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e396      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800479c:	4b4e      	ldr	r3, [pc, #312]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 800479e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1ef      	bne.n	800478a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b2:	4b49      	ldr	r3, [pc, #292]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80047b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b8:	4a47      	ldr	r2, [pc, #284]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80047ba:	f023 0304 	bic.w	r3, r3, #4
 80047be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8111 	beq.w	80049f2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d6:	4b40      	ldr	r3, [pc, #256]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d111      	bne.n	8004808 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e4:	4b3c      	ldr	r3, [pc, #240]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80047e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ea:	4a3b      	ldr	r2, [pc, #236]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047f4:	4b38      	ldr	r3, [pc, #224]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80047f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004808:	4b34      	ldr	r3, [pc, #208]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d118      	bne.n	8004846 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004814:	4b31      	ldr	r3, [pc, #196]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	4a30      	ldr	r2, [pc, #192]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004820:	f7fd fdaa 	bl	8002378 <HAL_GetTick>
 8004824:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004828:	f7fd fda6 	bl	8002378 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e347      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800483a:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <HAL_RCC_OscConfig+0x7bc>)
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01f      	beq.n	8004892 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d010      	beq.n	8004880 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800485e:	4b1e      	ldr	r3, [pc, #120]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004864:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800486e:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004874:	4a18      	ldr	r2, [pc, #96]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800487e:	e018      	b.n	80048b2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004880:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004886:	4a14      	ldr	r2, [pc, #80]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004890:	e00f      	b.n	80048b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004892:	4b11      	ldr	r3, [pc, #68]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 8004894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004898:	4a0f      	ldr	r2, [pc, #60]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048a2:	4b0d      	ldr	r3, [pc, #52]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80048a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a8:	4a0b      	ldr	r2, [pc, #44]	@ (80048d8 <HAL_RCC_OscConfig+0x7b8>)
 80048aa:	f023 0304 	bic.w	r3, r3, #4
 80048ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d057      	beq.n	800496a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80048ba:	f7fd fd5d 	bl	8002378 <HAL_GetTick>
 80048be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c0:	e00e      	b.n	80048e0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c2:	f7fd fd59 	bl	8002378 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d905      	bls.n	80048e0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e2f8      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
 80048d8:	46020c00 	.word	0x46020c00
 80048dc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e0:	4b9c      	ldr	r3, [pc, #624]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 80048e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0e9      	beq.n	80048c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01b      	beq.n	8004932 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048fa:	4b96      	ldr	r3, [pc, #600]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 80048fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004900:	4a94      	ldr	r2, [pc, #592]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004906:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800490a:	e00a      	b.n	8004922 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fd fd34 	bl	8002378 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e2d3      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004922:	4b8c      	ldr	r3, [pc, #560]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ed      	beq.n	800490c <HAL_RCC_OscConfig+0x7ec>
 8004930:	e053      	b.n	80049da <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004932:	4b88      	ldr	r3, [pc, #544]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004938:	4a86      	ldr	r2, [pc, #536]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 800493a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800493e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fd fd18 	bl	8002378 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e2b7      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800495a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 800495c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ed      	bne.n	8004944 <HAL_RCC_OscConfig+0x824>
 8004968:	e037      	b.n	80049da <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800496a:	f7fd fd05 	bl	8002378 <HAL_GetTick>
 800496e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004970:	e00a      	b.n	8004988 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004972:	f7fd fd01 	bl	8002378 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e2a0      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004988:	4b72      	ldr	r3, [pc, #456]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 800498a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ed      	bne.n	8004972 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004996:	4b6f      	ldr	r3, [pc, #444]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800499c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01a      	beq.n	80049da <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 80049a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 80049ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fd fcdf 	bl	8002378 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e27e      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049cc:	4b61      	ldr	r3, [pc, #388]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 80049ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ed      	bne.n	80049b6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 80049e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 80049ea:	f023 0304 	bic.w	r3, r3, #4
 80049ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d036      	beq.n	8004a6c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d019      	beq.n	8004a3a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004a06:	4b53      	ldr	r3, [pc, #332]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a52      	ldr	r2, [pc, #328]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a10:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a12:	f7fd fcb1 	bl	8002378 <HAL_GetTick>
 8004a16:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a1a:	f7fd fcad 	bl	8002378 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e24e      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a2c:	4b49      	ldr	r3, [pc, #292]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x8fa>
 8004a38:	e018      	b.n	8004a6c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004a3a:	4b46      	ldr	r3, [pc, #280]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a45      	ldr	r2, [pc, #276]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a44:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a46:	f7fd fc97 	bl	8002378 <HAL_GetTick>
 8004a4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a4e:	f7fd fc93 	bl	8002378 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e234      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a60:	4b3c      	ldr	r3, [pc, #240]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d036      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d019      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a80:	4b34      	ldr	r3, [pc, #208]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a33      	ldr	r2, [pc, #204]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004a86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a8c:	f7fd fc74 	bl	8002378 <HAL_GetTick>
 8004a90:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a94:	f7fd fc70 	bl	8002378 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e211      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x974>
 8004ab2:	e018      	b.n	8004ae6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004ab4:	4b27      	ldr	r3, [pc, #156]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a26      	ldr	r2, [pc, #152]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004abe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ac0:	f7fd fc5a 	bl	8002378 <HAL_GetTick>
 8004ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004ac8:	f7fd fc56 	bl	8002378 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1f7      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ada:	4b1e      	ldr	r3, [pc, #120]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d07f      	beq.n	8004bf2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d062      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004afa:	4b16      	ldr	r3, [pc, #88]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4a15      	ldr	r2, [pc, #84]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004b00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b04:	6093      	str	r3, [r2, #8]
 8004b06:	4b13      	ldr	r3, [pc, #76]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	4910      	ldr	r1, [pc, #64]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b20:	d309      	bcc.n	8004b36 <HAL_RCC_OscConfig+0xa16>
 8004b22:	4b0c      	ldr	r3, [pc, #48]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f023 021f 	bic.w	r2, r3, #31
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4909      	ldr	r1, [pc, #36]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60cb      	str	r3, [r1, #12]
 8004b34:	e02a      	b.n	8004b8c <HAL_RCC_OscConfig+0xa6c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	da0c      	bge.n	8004b58 <HAL_RCC_OscConfig+0xa38>
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	015b      	lsls	r3, r3, #5
 8004b4c:	4901      	ldr	r1, [pc, #4]	@ (8004b54 <HAL_RCC_OscConfig+0xa34>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60cb      	str	r3, [r1, #12]
 8004b52:	e01b      	b.n	8004b8c <HAL_RCC_OscConfig+0xa6c>
 8004b54:	46020c00 	.word	0x46020c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b60:	d30a      	bcc.n	8004b78 <HAL_RCC_OscConfig+0xa58>
 8004b62:	4ba1      	ldr	r3, [pc, #644]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	499d      	ldr	r1, [pc, #628]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60cb      	str	r3, [r1, #12]
 8004b76:	e009      	b.n	8004b8c <HAL_RCC_OscConfig+0xa6c>
 8004b78:	4b9b      	ldr	r3, [pc, #620]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	03db      	lsls	r3, r3, #15
 8004b86:	4998      	ldr	r1, [pc, #608]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b8c:	4b96      	ldr	r3, [pc, #600]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a95      	ldr	r2, [pc, #596]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004b92:	f043 0310 	orr.w	r3, r3, #16
 8004b96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b98:	f7fd fbee 	bl	8002378 <HAL_GetTick>
 8004b9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004ba0:	f7fd fbea 	bl	8002378 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e18b      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xa80>
 8004bbe:	e018      	b.n	8004bf2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004bc0:	4b89      	ldr	r3, [pc, #548]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a88      	ldr	r2, [pc, #544]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004bcc:	f7fd fbd4 	bl	8002378 <HAL_GetTick>
 8004bd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004bd4:	f7fd fbd0 	bl	8002378 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e171      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004be6:	4b80      	ldr	r3, [pc, #512]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8166 	beq.w	8004ec8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c02:	4b79      	ldr	r3, [pc, #484]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	f000 80f2 	beq.w	8004df4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	f040 80c5 	bne.w	8004da4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b73      	ldr	r3, [pc, #460]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a72      	ldr	r2, [pc, #456]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c26:	f7fd fba7 	bl	8002378 <HAL_GetTick>
 8004c2a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2e:	f7fd fba3 	bl	8002378 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e144      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c40:	4b69      	ldr	r3, [pc, #420]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f0      	bne.n	8004c2e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4c:	4b66      	ldr	r3, [pc, #408]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d111      	bne.n	8004c7e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	4b63      	ldr	r3, [pc, #396]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c60:	4a61      	ldr	r2, [pc, #388]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dec <HAL_RCC_OscConfig+0xccc>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c8a:	d102      	bne.n	8004c92 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c92:	4b56      	ldr	r3, [pc, #344]	@ (8004dec <HAL_RCC_OscConfig+0xccc>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4a55      	ldr	r2, [pc, #340]	@ (8004dec <HAL_RCC_OscConfig+0xccc>)
 8004c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c9c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c9e:	4b52      	ldr	r3, [pc, #328]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cb2:	3a01      	subs	r2, #1
 8004cb4:	0212      	lsls	r2, r2, #8
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	494a      	ldr	r1, [pc, #296]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cc4:	4b48      	ldr	r3, [pc, #288]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cc8:	4b49      	ldr	r3, [pc, #292]	@ (8004df0 <HAL_RCC_OscConfig+0xcd0>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cd0:	3a01      	subs	r2, #1
 8004cd2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	0252      	lsls	r2, r2, #9
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	0412      	lsls	r2, r2, #16
 8004cea:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004cf4:	3a01      	subs	r2, #1
 8004cf6:	0612      	lsls	r2, r2, #24
 8004cf8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	493a      	ldr	r1, [pc, #232]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004d04:	4b38      	ldr	r3, [pc, #224]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	4a37      	ldr	r2, [pc, #220]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d0a:	f023 0310 	bic.w	r3, r3, #16
 8004d0e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d14:	4a34      	ldr	r2, [pc, #208]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004d1a:	4b33      	ldr	r3, [pc, #204]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1e:	4a32      	ldr	r2, [pc, #200]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d20:	f043 0310 	orr.w	r3, r3, #16
 8004d24:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004d26:	4b30      	ldr	r3, [pc, #192]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f023 020c 	bic.w	r2, r3, #12
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	492d      	ldr	r1, [pc, #180]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004d38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d40:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <HAL_RCC_OscConfig+0xccc>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a29      	ldr	r2, [pc, #164]	@ (8004dec <HAL_RCC_OscConfig+0xccc>)
 8004d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d4a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004d4c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4b24      	ldr	r3, [pc, #144]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d5a:	4a23      	ldr	r2, [pc, #140]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1f      	ldr	r2, [pc, #124]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d70:	f7fd fb02 	bl	8002378 <HAL_GetTick>
 8004d74:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fd fafe 	bl	8002378 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e09f      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d8a:	4b17      	ldr	r3, [pc, #92]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d96:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9a:	4a13      	ldr	r2, [pc, #76]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004da0:	6293      	str	r3, [r2, #40]	@ 0x28
 8004da2:	e091      	b.n	8004ec8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004da4:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a0f      	ldr	r2, [pc, #60]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004db0:	f7fd fae2 	bl	8002378 <HAL_GetTick>
 8004db4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd fade 	bl	8002378 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e07f      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004dd6:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	4a03      	ldr	r2, [pc, #12]	@ (8004de8 <HAL_RCC_OscConfig+0xcc8>)
 8004ddc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004de0:	f023 0303 	bic.w	r3, r3, #3
 8004de4:	6293      	str	r3, [r2, #40]	@ 0x28
 8004de6:	e06f      	b.n	8004ec8 <HAL_RCC_OscConfig+0xda8>
 8004de8:	46020c00 	.word	0x46020c00
 8004dec:	46020800 	.word	0x46020800
 8004df0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004df4:	4b37      	ldr	r3, [pc, #220]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dfa:	4b36      	ldr	r3, [pc, #216]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d039      	beq.n	8004e7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d132      	bne.n	8004e7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d129      	bne.n	8004e7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d122      	bne.n	8004e7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e40:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d11a      	bne.n	8004e7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	0a5b      	lsrs	r3, r3, #9
 8004e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d111      	bne.n	8004e7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e64:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d108      	bne.n	8004e7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	0e1b      	lsrs	r3, r3, #24
 8004e6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e024      	b.n	8004eca <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e80:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e84:	08db      	lsrs	r3, r3, #3
 8004e86:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d01a      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e92:	4b10      	ldr	r3, [pc, #64]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	4a0f      	ldr	r2, [pc, #60]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004e98:	f023 0310 	bic.w	r3, r3, #16
 8004e9c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9e:	f7fd fa6b 	bl	8002378 <HAL_GetTick>
 8004ea2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004ea4:	bf00      	nop
 8004ea6:	f7fd fa67 	bl	8002378 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d0f9      	beq.n	8004ea6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb6:	4a07      	ldr	r2, [pc, #28]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	4a04      	ldr	r2, [pc, #16]	@ (8004ed4 <HAL_RCC_OscConfig+0xdb4>)
 8004ec2:	f043 0310 	orr.w	r3, r3, #16
 8004ec6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3738      	adds	r7, #56	@ 0x38
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	46020c00 	.word	0x46020c00

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e1d9      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b9b      	ldr	r3, [pc, #620]	@ (800515c <HAL_RCC_ClockConfig+0x284>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d910      	bls.n	8004f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b98      	ldr	r3, [pc, #608]	@ (800515c <HAL_RCC_ClockConfig+0x284>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 020f 	bic.w	r2, r3, #15
 8004f02:	4996      	ldr	r1, [pc, #600]	@ (800515c <HAL_RCC_ClockConfig+0x284>)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b94      	ldr	r3, [pc, #592]	@ (800515c <HAL_RCC_ClockConfig+0x284>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e1c1      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d010      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	4b8c      	ldr	r3, [pc, #560]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d908      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004f38:	4b89      	ldr	r3, [pc, #548]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	4986      	ldr	r1, [pc, #536]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d012      	beq.n	8004f7c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	4b81      	ldr	r3, [pc, #516]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d909      	bls.n	8004f7c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f68:	4b7d      	ldr	r3, [pc, #500]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	497a      	ldr	r1, [pc, #488]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d010      	beq.n	8004faa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	4b74      	ldr	r3, [pc, #464]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d908      	bls.n	8004faa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f98:	4b71      	ldr	r3, [pc, #452]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	496e      	ldr	r1, [pc, #440]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	4b69      	ldr	r3, [pc, #420]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d908      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004fc6:	4b66      	ldr	r3, [pc, #408]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 020f 	bic.w	r2, r3, #15
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4963      	ldr	r1, [pc, #396]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80d2 	beq.w	800518a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d143      	bne.n	800507a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8004ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005000:	4b57      	ldr	r3, [pc, #348]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8005002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005006:	4a56      	ldr	r2, [pc, #344]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8005008:	f043 0304 	orr.w	r3, r3, #4
 800500c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005010:	4b53      	ldr	r3, [pc, #332]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8005012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800501e:	2301      	movs	r3, #1
 8005020:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005022:	f7fd f9a9 	bl	8002378 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005028:	4b4e      	ldr	r3, [pc, #312]	@ (8005164 <HAL_RCC_ClockConfig+0x28c>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00f      	beq.n	8005054 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005036:	f7fd f99f 	bl	8002378 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e12b      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005048:	4b46      	ldr	r3, [pc, #280]	@ (8005164 <HAL_RCC_ClockConfig+0x28c>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800505a:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 800505c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005060:	4a3f      	ldr	r2, [pc, #252]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8005062:	f023 0304 	bic.w	r3, r3, #4
 8005066:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800506a:	4b3d      	ldr	r3, [pc, #244]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d121      	bne.n	80050ba <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e112      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005082:	4b37      	ldr	r3, [pc, #220]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d115      	bne.n	80050ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e106      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800509a:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0fa      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0f2      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80050ba:	4b29      	ldr	r3, [pc, #164]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f023 0203 	bic.w	r2, r3, #3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4926      	ldr	r1, [pc, #152]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80050cc:	f7fd f954 	bl	8002378 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d112      	bne.n	8005100 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050dc:	f7fd f94c 	bl	8002378 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0d6      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 030c 	and.w	r3, r3, #12
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d1ee      	bne.n	80050dc <HAL_RCC_ClockConfig+0x204>
 80050fe:	e044      	b.n	800518a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d112      	bne.n	800512e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510a:	f7fd f935 	bl	8002378 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e0bf      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005120:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d1ee      	bne.n	800510a <HAL_RCC_ClockConfig+0x232>
 800512c:	e02d      	b.n	800518a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d123      	bne.n	800517e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fd f91e 	bl	8002378 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0a8      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800514e:	4b04      	ldr	r3, [pc, #16]	@ (8005160 <HAL_RCC_ClockConfig+0x288>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ee      	bne.n	8005138 <HAL_RCC_ClockConfig+0x260>
 800515a:	e016      	b.n	800518a <HAL_RCC_ClockConfig+0x2b2>
 800515c:	40022000 	.word	0x40022000
 8005160:	46020c00 	.word	0x46020c00
 8005164:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005168:	f7fd f906 	bl	8002378 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e090      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800517e:	4b4a      	ldr	r3, [pc, #296]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b04      	cmp	r3, #4
 8005188:	d1ee      	bne.n	8005168 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	4b43      	ldr	r3, [pc, #268]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d208      	bcs.n	80051b8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80051a6:	4b40      	ldr	r3, [pc, #256]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 020f 	bic.w	r2, r3, #15
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	493d      	ldr	r1, [pc, #244]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b8:	4b3c      	ldr	r3, [pc, #240]	@ (80052ac <HAL_RCC_ClockConfig+0x3d4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d210      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c6:	4b39      	ldr	r3, [pc, #228]	@ (80052ac <HAL_RCC_ClockConfig+0x3d4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 020f 	bic.w	r2, r3, #15
 80051ce:	4937      	ldr	r1, [pc, #220]	@ (80052ac <HAL_RCC_ClockConfig+0x3d4>)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b35      	ldr	r3, [pc, #212]	@ (80052ac <HAL_RCC_ClockConfig+0x3d4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e05b      	b.n	80052a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	4b2b      	ldr	r3, [pc, #172]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005200:	429a      	cmp	r2, r3
 8005202:	d208      	bcs.n	8005216 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005204:	4b28      	ldr	r3, [pc, #160]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4925      	ldr	r1, [pc, #148]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005212:	4313      	orrs	r3, r2
 8005214:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d012      	beq.n	8005248 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	4b20      	ldr	r3, [pc, #128]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005230:	429a      	cmp	r2, r3
 8005232:	d209      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005234:	4b1c      	ldr	r3, [pc, #112]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	4919      	ldr	r1, [pc, #100]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005244:	4313      	orrs	r3, r2
 8005246:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d010      	beq.n	8005276 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005260:	429a      	cmp	r2, r3
 8005262:	d208      	bcs.n	8005276 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005264:	4b10      	ldr	r3, [pc, #64]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	490d      	ldr	r1, [pc, #52]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005272:	4313      	orrs	r3, r2
 8005274:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005276:	f000 f821 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800527a:	4602      	mov	r2, r0
 800527c:	4b0a      	ldr	r3, [pc, #40]	@ (80052a8 <HAL_RCC_ClockConfig+0x3d0>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	490a      	ldr	r1, [pc, #40]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d8>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	4a09      	ldr	r2, [pc, #36]	@ (80052b4 <HAL_RCC_ClockConfig+0x3dc>)
 800528e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005290:	4b09      	ldr	r3, [pc, #36]	@ (80052b8 <HAL_RCC_ClockConfig+0x3e0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fc ffe5 	bl	8002264 <HAL_InitTick>
 800529a:	4603      	mov	r3, r0
 800529c:	73fb      	strb	r3, [r7, #15]

  return status;
 800529e:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	46020c00 	.word	0x46020c00
 80052ac:	40022000 	.word	0x40022000
 80052b0:	0800ad30 	.word	0x0800ad30
 80052b4:	20000000 	.word	0x20000000
 80052b8:	20000018 	.word	0x20000018

080052bc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b08b      	sub	sp, #44	@ 0x2c
 80052c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ca:	4b78      	ldr	r3, [pc, #480]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052d4:	4b75      	ldr	r3, [pc, #468]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0x34>
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d121      	bne.n	800532e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d11e      	bne.n	800532e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052f0:	4b6e      	ldr	r3, [pc, #440]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d107      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052fc:	4b6b      	ldr	r3, [pc, #428]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005302:	0b1b      	lsrs	r3, r3, #12
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
 800530a:	e005      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800530c:	4b67      	ldr	r3, [pc, #412]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	0f1b      	lsrs	r3, r3, #28
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005318:	4a65      	ldr	r2, [pc, #404]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d110      	bne.n	800534a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800532c:	e00d      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800532e:	4b5f      	ldr	r3, [pc, #380]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b04      	cmp	r3, #4
 8005338:	d102      	bne.n	8005340 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800533a:	4b5e      	ldr	r3, [pc, #376]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	e004      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b08      	cmp	r3, #8
 8005344:	d101      	bne.n	800534a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005346:	4b5b      	ldr	r3, [pc, #364]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005348:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	f040 80a5 	bne.w	800549c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005352:	4b56      	ldr	r3, [pc, #344]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	0a1b      	lsrs	r3, r3, #8
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800536a:	4b50      	ldr	r3, [pc, #320]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005376:	4b4d      	ldr	r3, [pc, #308]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537a:	08db      	lsrs	r3, r3, #3
 800537c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b02      	cmp	r3, #2
 8005396:	d003      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0xe4>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d022      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x128>
 800539e:	e043      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80054b8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b3e      	ldr	r3, [pc, #248]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80053c6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80054bc <HAL_RCC_GetSysClockFreq+0x200>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053e2:	e046      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80054b8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	4b2d      	ldr	r3, [pc, #180]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005406:	ed97 6a01 	vldr	s12, [r7, #4]
 800540a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80054bc <HAL_RCC_GetSysClockFreq+0x200>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005426:	e024      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005440:	4b1a      	ldr	r3, [pc, #104]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005448:	ee07 3a90 	vmov	s15, r3
 800544c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005450:	ed97 6a01 	vldr	s12, [r7, #4]
 8005454:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80054bc <HAL_RCC_GetSysClockFreq+0x200>
 8005458:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800545c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005464:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005470:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005472:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005476:	0e1b      	lsrs	r3, r3, #24
 8005478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800547c:	3301      	adds	r3, #1
 800547e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800548a:	edd7 6a07 	vldr	s13, [r7, #28]
 800548e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005496:	ee17 3a90 	vmov	r3, s15
 800549a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800549c:	6a3b      	ldr	r3, [r7, #32]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	372c      	adds	r7, #44	@ 0x2c
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	46020c00 	.word	0x46020c00
 80054b0:	0800ad48 	.word	0x0800ad48
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	4b742400 	.word	0x4b742400
 80054bc:	46000000 	.word	0x46000000

080054c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80054c4:	f7ff fefa 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b07      	ldr	r3, [pc, #28]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x28>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	4906      	ldr	r1, [pc, #24]	@ (80054ec <HAL_RCC_GetHCLKFreq+0x2c>)
 80054d4:	5ccb      	ldrb	r3, [r1, r3]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	4a05      	ldr	r2, [pc, #20]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x30>)
 80054dc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80054de:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x30>)
 80054e0:	681b      	ldr	r3, [r3, #0]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	46020c00 	.word	0x46020c00
 80054ec:	0800ad30 	.word	0x0800ad30
 80054f0:	20000000 	.word	0x20000000

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80054f8:	f7ff ffe2 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	46020c00 	.word	0x46020c00
 8005518:	0800ad40 	.word	0x0800ad40

0800551c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005520:	f7ff ffce 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b05      	ldr	r3, [pc, #20]	@ (800553c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4903      	ldr	r1, [pc, #12]	@ (8005540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	46020c00 	.word	0x46020c00
 8005540:	0800ad40 	.word	0x0800ad40

08005544 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005548:	f7ff ffba 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4903      	ldr	r1, [pc, #12]	@ (8005568 <HAL_RCC_GetPCLK3Freq+0x24>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	46020c00 	.word	0x46020c00
 8005568:	0800ad40 	.word	0x0800ad40

0800556c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005574:	4b3e      	ldr	r3, [pc, #248]	@ (8005670 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005582:	f7fe fd6f 	bl	8004064 <HAL_PWREx_GetVoltageRange>
 8005586:	6178      	str	r0, [r7, #20]
 8005588:	e019      	b.n	80055be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800558a:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800558c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005590:	4a37      	ldr	r2, [pc, #220]	@ (8005670 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005592:	f043 0304 	orr.w	r3, r3, #4
 8005596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800559a:	4b35      	ldr	r3, [pc, #212]	@ (8005670 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800559c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055a8:	f7fe fd5c 	bl	8004064 <HAL_PWREx_GetVoltageRange>
 80055ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055ae:	4b30      	ldr	r3, [pc, #192]	@ (8005670 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005670 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055b6:	f023 0304 	bic.w	r3, r3, #4
 80055ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055c4:	d003      	beq.n	80055ce <RCC_SetFlashLatencyFromMSIRange+0x62>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055cc:	d109      	bne.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055d4:	d202      	bcs.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80055d6:	2301      	movs	r3, #1
 80055d8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055da:	e033      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055e0:	e030      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055e8:	d208      	bcs.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f0:	d102      	bne.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055f2:	2303      	movs	r3, #3
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	e025      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e035      	b.n	8005668 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005602:	d90f      	bls.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005610:	d902      	bls.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	e015      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005618:	2301      	movs	r3, #1
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e012      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e00f      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800562a:	d109      	bne.n	8005640 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005632:	d102      	bne.n	800563a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005634:	2301      	movs	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e004      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800563a:	2302      	movs	r3, #2
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e001      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005640:	2301      	movs	r3, #1
 8005642:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005644:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 020f 	bic.w	r2, r3, #15
 800564c:	4909      	ldr	r1, [pc, #36]	@ (8005674 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005654:	4b07      	ldr	r3, [pc, #28]	@ (8005674 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	429a      	cmp	r2, r3
 8005660:	d001      	beq.n	8005666 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	46020c00 	.word	0x46020c00
 8005674:	40022000 	.word	0x40022000

08005678 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	@ 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005680:	4ba6      	ldr	r3, [pc, #664]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005688:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800568a:	4ba4      	ldr	r3, [pc, #656]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800568c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005694:	4ba1      	ldr	r3, [pc, #644]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	3301      	adds	r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80056a2:	4b9e      	ldr	r3, [pc, #632]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80056ae:	4b9b      	ldr	r3, [pc, #620]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b2:	08db      	lsrs	r3, r3, #3
 80056b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d062      	beq.n	8005796 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	f200 8081 	bhi.w	80057da <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d024      	beq.n	8005728 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d17a      	bne.n	80057da <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005920 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b89      	ldr	r3, [pc, #548]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005706:	ed97 6a02 	vldr	s12, [r7, #8]
 800570a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005924 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005726:	e08f      	b.n	8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005728:	4b7c      	ldr	r3, [pc, #496]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005734:	4b79      	ldr	r3, [pc, #484]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	0f1b      	lsrs	r3, r3, #28
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	e006      	b.n	800574e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005740:	4b76      	ldr	r3, [pc, #472]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	0f1b      	lsrs	r3, r3, #28
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	4a76      	ldr	r2, [pc, #472]	@ (8005928 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005774:	ed97 6a02 	vldr	s12, [r7, #8]
 8005778:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005924 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800577c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005788:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800578c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005790:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005794:	e058      	b.n	8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005920 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80057a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a8:	4b5c      	ldr	r3, [pc, #368]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80057bc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005924 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057d8:	e036      	b.n	8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057da:	4b50      	ldr	r3, [pc, #320]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80057e6:	4b4d      	ldr	r3, [pc, #308]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	0f1b      	lsrs	r3, r3, #28
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80057f2:	4b4a      	ldr	r3, [pc, #296]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057f8:	041b      	lsls	r3, r3, #16
 80057fa:	0f1b      	lsrs	r3, r3, #28
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	4a49      	ldr	r2, [pc, #292]	@ (8005928 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	ee07 3a90 	vmov	s15, r3
 8005814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a02 	vldr	s12, [r7, #8]
 800582a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005924 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005846:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005848:	4b34      	ldr	r3, [pc, #208]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d017      	beq.n	8005884 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005854:	4b31      	ldr	r3, [pc, #196]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005858:	0a5b      	lsrs	r3, r3, #9
 800585a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800586a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800586e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800587a:	ee17 2a90 	vmov	r2, s15
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e002      	b.n	800588a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800588a:	4b24      	ldr	r3, [pc, #144]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d017      	beq.n	80058c6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005896:	4b21      	ldr	r3, [pc, #132]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	0c1b      	lsrs	r3, r3, #16
 800589c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80058a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058bc:	ee17 2a90 	vmov	r2, s15
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	e002      	b.n	80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80058cc:	4b13      	ldr	r3, [pc, #76]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058d8:	4b10      	ldr	r3, [pc, #64]	@ (800591c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058dc:	0e1b      	lsrs	r3, r3, #24
 80058de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80058ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fe:	ee17 2a90 	vmov	r2, s15
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005906:	e002      	b.n	800590e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
}
 800590e:	bf00      	nop
 8005910:	3724      	adds	r7, #36	@ 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	46020c00 	.word	0x46020c00
 8005920:	4b742400 	.word	0x4b742400
 8005924:	46000000 	.word	0x46000000
 8005928:	0800ad48 	.word	0x0800ad48

0800592c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800592c:	b480      	push	{r7}
 800592e:	b089      	sub	sp, #36	@ 0x24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005934:	4ba6      	ldr	r3, [pc, #664]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800593e:	4ba4      	ldr	r3, [pc, #656]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005948:	4ba1      	ldr	r3, [pc, #644]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	3301      	adds	r3, #1
 8005954:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005956:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005962:	4b9b      	ldr	r3, [pc, #620]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	08db      	lsrs	r3, r3, #3
 8005968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b03      	cmp	r3, #3
 8005982:	d062      	beq.n	8005a4a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b03      	cmp	r3, #3
 8005988:	f200 8081 	bhi.w	8005a8e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d024      	beq.n	80059dc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d17a      	bne.n	8005a8e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80059a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059aa:	4b89      	ldr	r3, [pc, #548]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80059be:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059da:	e08f      	b.n	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80059dc:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80059e8:	4b79      	ldr	r3, [pc, #484]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	0f1b      	lsrs	r3, r3, #28
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	e006      	b.n	8005a02 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80059f4:	4b76      	ldr	r3, [pc, #472]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	0f1b      	lsrs	r3, r3, #28
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	4a76      	ldr	r2, [pc, #472]	@ (8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	ee07 3a90 	vmov	s15, r3
 8005a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a28:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a2c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a48:	e058      	b.n	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	ee07 3a90 	vmov	s15, r3
 8005a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a54:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a64:	ee07 3a90 	vmov	s15, r3
 8005a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a70:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a8c:	e036      	b.n	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005a8e:	4b50      	ldr	r3, [pc, #320]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	0f1b      	lsrs	r3, r3, #28
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	e006      	b.n	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	0f1b      	lsrs	r3, r3, #28
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	4a49      	ldr	r2, [pc, #292]	@ (8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	ee07 3a90 	vmov	s15, r3
 8005ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ade:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005afa:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005afc:	4b34      	ldr	r3, [pc, #208]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d017      	beq.n	8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b08:	4b31      	ldr	r3, [pc, #196]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0c:	0a5b      	lsrs	r3, r3, #9
 8005b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2e:	ee17 2a90 	vmov	r2, s15
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e002      	b.n	8005b3e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005b3e:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d017      	beq.n	8005b7a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b4a:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4e:	0c1b      	lsrs	r3, r3, #16
 8005b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005b5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b60:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b70:	ee17 2a90 	vmov	r2, s15
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	e002      	b.n	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005b80:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	0e1b      	lsrs	r3, r3, #24
 8005b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005b9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb2:	ee17 2a90 	vmov	r2, s15
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bba:	e002      	b.n	8005bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	609a      	str	r2, [r3, #8]
}
 8005bc2:	bf00      	nop
 8005bc4:	3724      	adds	r7, #36	@ 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	46020c00 	.word	0x46020c00
 8005bd4:	4b742400 	.word	0x4b742400
 8005bd8:	46000000 	.word	0x46000000
 8005bdc:	0800ad48 	.word	0x0800ad48

08005be0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b089      	sub	sp, #36	@ 0x24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005be8:	4ba6      	ldr	r3, [pc, #664]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005bf2:	4ba4      	ldr	r3, [pc, #656]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005bfc:	4ba1      	ldr	r3, [pc, #644]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	3301      	adds	r3, #1
 8005c08:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005c16:	4b9b      	ldr	r3, [pc, #620]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d062      	beq.n	8005cfe <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	f200 8081 	bhi.w	8005d42 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d024      	beq.n	8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d17a      	bne.n	8005d42 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b89      	ldr	r3, [pc, #548]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c72:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005c8e:	e08f      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c90:	4b7c      	ldr	r3, [pc, #496]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005c9c:	4b79      	ldr	r3, [pc, #484]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	0f1b      	lsrs	r3, r3, #28
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	e006      	b.n	8005cb6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005ca8:	4b76      	ldr	r3, [pc, #472]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	0f1b      	lsrs	r3, r3, #28
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	4a76      	ldr	r2, [pc, #472]	@ (8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbc:	ee07 3a90 	vmov	s15, r3
 8005cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ce0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cfc:	e058      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d08:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d10:	4b5c      	ldr	r3, [pc, #368]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d20:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d24:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d40:	e036      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d42:	4b50      	ldr	r3, [pc, #320]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0f1b      	lsrs	r3, r3, #28
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	e006      	b.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	0f1b      	lsrs	r3, r3, #28
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	4a49      	ldr	r2, [pc, #292]	@ (8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d92:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dae:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005db0:	4b34      	ldr	r3, [pc, #208]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d017      	beq.n	8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dbc:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc0:	0a5b      	lsrs	r3, r3, #9
 8005dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de2:	ee17 2a90 	vmov	r2, s15
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e002      	b.n	8005df2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005df2:	4b24      	ldr	r3, [pc, #144]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d017      	beq.n	8005e2e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dfe:	4b21      	ldr	r3, [pc, #132]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e14:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 2a90 	vmov	r2, s15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005e34:	4b13      	ldr	r3, [pc, #76]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d017      	beq.n	8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e40:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e44:	0e1b      	lsrs	r3, r3, #24
 8005e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e66:	ee17 2a90 	vmov	r2, s15
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e6e:	e002      	b.n	8005e76 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	609a      	str	r2, [r3, #8]
}
 8005e76:	bf00      	nop
 8005e78:	3724      	adds	r7, #36	@ 0x24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	46020c00 	.word	0x46020c00
 8005e88:	4b742400 	.word	0x4b742400
 8005e8c:	46000000 	.word	0x46000000
 8005e90:	0800ad48 	.word	0x0800ad48

08005e94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	@ 0x38
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	d145      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005eaa:	4b9b      	ldr	r3, [pc, #620]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005eb6:	4b98      	ldr	r3, [pc, #608]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d108      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eca:	d104      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed2:	f001 b912 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005ed6:	4b90      	ldr	r3, [pc, #576]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ee4:	d114      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eec:	d110      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005eee:	4b8a      	ldr	r3, [pc, #552]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005efc:	d103      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005efe:	23fa      	movs	r3, #250	@ 0xfa
 8005f00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f02:	f001 b8fa 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f06:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f0c:	f001 b8f5 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005f10:	4b81      	ldr	r3, [pc, #516]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f24:	d103      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005f26:	4b7d      	ldr	r3, [pc, #500]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2a:	f001 b8e6 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f32:	f001 b8e2 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	d151      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f42:	4b75      	ldr	r3, [pc, #468]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f48:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005f4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	2b80      	cmp	r3, #128	@ 0x80
 8005f52:	d035      	beq.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	2b80      	cmp	r3, #128	@ 0x80
 8005f58:	d841      	bhi.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	2b60      	cmp	r3, #96	@ 0x60
 8005f5e:	d02a      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	2b60      	cmp	r3, #96	@ 0x60
 8005f64:	d83b      	bhi.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d009      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	d835      	bhi.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d012      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005f7e:	e02e      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fb77 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f8e:	f001 b8b4 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f92:	f107 0318 	add.w	r3, r7, #24
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff fcc8 	bl	800592c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fa0:	f001 b8ab 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa4:	f107 030c 	add.w	r3, r7, #12
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fe19 	bl	8005be0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fb2:	f001 b8a2 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005fb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fbc:	f001 b89d 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fc0:	4b55      	ldr	r3, [pc, #340]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fcc:	d103      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005fce:	4b54      	ldr	r3, [pc, #336]	@ (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fd2:	f001 b892 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fda:	f001 b88e 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fe2:	f001 b88a 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fea:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	d126      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005ff2:	4b49      	ldr	r3, [pc, #292]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ffc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005ffe:	4b46      	ldr	r3, [pc, #280]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600a:	d106      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d103      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8006012:	4b43      	ldr	r3, [pc, #268]	@ (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
 8006016:	f001 b870 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800601a:	4b3f      	ldr	r3, [pc, #252]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006026:	d107      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800602e:	d103      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8006030:	4b3c      	ldr	r3, [pc, #240]	@ (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006032:	637b      	str	r3, [r7, #52]	@ 0x34
 8006034:	f001 b861 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	637b      	str	r3, [r7, #52]	@ 0x34
 800603c:	f001 b85d 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006044:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006048:	430b      	orrs	r3, r1
 800604a:	d171      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800604c:	4b32      	ldr	r3, [pc, #200]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800604e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006052:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006056:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800605e:	d034      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006066:	d853      	bhi.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800606e:	d00b      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006076:	d84b      	bhi.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	2b00      	cmp	r3, #0
 800607c:	d016      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006084:	d009      	beq.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8006086:	e043      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff faf3 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006096:	f001 b830 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800609a:	f107 0318 	add.w	r3, r7, #24
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fc44 	bl	800592c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060a8:	f001 b827 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80060ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b8:	d103      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 80060ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060be:	f001 b81c 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060c6:	f001 b818 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80060ca:	4b13      	ldr	r3, [pc, #76]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d118      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060d6:	4b10      	ldr	r3, [pc, #64]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80060e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	0e1b      	lsrs	r3, r3, #24
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	e006      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 80060ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060f4:	041b      	lsls	r3, r3, #16
 80060f6:	0e1b      	lsrs	r3, r3, #24
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	4a0b      	ldr	r2, [pc, #44]	@ (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80060fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006102:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006104:	f000 bff9 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800610c:	f000 bff5 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006114:	f000 bff1 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006118:	46020c00 	.word	0x46020c00
 800611c:	0007a120 	.word	0x0007a120
 8006120:	00f42400 	.word	0x00f42400
 8006124:	007a1200 	.word	0x007a1200
 8006128:	02dc6c00 	.word	0x02dc6c00
 800612c:	0800ad48 	.word	0x0800ad48
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006134:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006138:	430b      	orrs	r3, r1
 800613a:	d17f      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800613c:	4ba8      	ldr	r3, [pc, #672]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800613e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006146:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	2b00      	cmp	r3, #0
 800614c:	d165      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800614e:	4ba4      	ldr	r3, [pc, #656]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006154:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006158:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006160:	d034      	beq.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006168:	d853      	bhi.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006170:	d00b      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006178:	d84b      	bhi.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d016      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006186:	d009      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006188:	e043      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800618a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fa72 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006196:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006198:	f000 bfaf 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619c:	f107 0318 	add.w	r3, r7, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff fbc3 	bl	800592c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061aa:	f000 bfa6 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80061ae:	4b8c      	ldr	r3, [pc, #560]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ba:	d103      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 80061bc:	4b89      	ldr	r3, [pc, #548]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80061c0:	f000 bf9b 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061c8:	f000 bf97 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80061cc:	4b84      	ldr	r3, [pc, #528]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	d118      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061d8:	4b81      	ldr	r3, [pc, #516]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80061e4:	4b7e      	ldr	r3, [pc, #504]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	0e1b      	lsrs	r3, r3, #24
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	e006      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80061f0:	4b7b      	ldr	r3, [pc, #492]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	0e1b      	lsrs	r3, r3, #24
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	4a7a      	ldr	r2, [pc, #488]	@ (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006206:	f000 bf78 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800620e:	f000 bf74 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006216:	f000 bf70 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006220:	d108      	bne.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fa26 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006230:	f000 bf63 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	637b      	str	r3, [r7, #52]	@ 0x34
 8006238:	f000 bf5f 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800623c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006240:	1e51      	subs	r1, r2, #1
 8006242:	430b      	orrs	r3, r1
 8006244:	d136      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006246:	4b66      	ldr	r3, [pc, #408]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006258:	f7ff f960 	bl	800551c <HAL_RCC_GetPCLK2Freq>
 800625c:	6378      	str	r0, [r7, #52]	@ 0x34
 800625e:	f000 bf4c 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	2b01      	cmp	r3, #1
 8006266:	d104      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006268:	f7ff f828 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800626c:	6378      	str	r0, [r7, #52]	@ 0x34
 800626e:	f000 bf44 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006272:	4b5b      	ldr	r3, [pc, #364]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627e:	d106      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	2b02      	cmp	r3, #2
 8006284:	d103      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8006286:	4b59      	ldr	r3, [pc, #356]	@ (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
 800628a:	f000 bf36 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800628e:	4b54      	ldr	r3, [pc, #336]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d107      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d104      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a8:	f000 bf27 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b0:	f000 bf23 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80062b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b8:	1f11      	subs	r1, r2, #4
 80062ba:	430b      	orrs	r3, r1
 80062bc:	d136      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062be:	4b48      	ldr	r3, [pc, #288]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80062c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7ff f910 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80062d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80062d6:	f000 bf10 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d104      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062e0:	f7fe ffec 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 80062e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80062e6:	f000 bf08 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062ea:	4b3d      	ldr	r3, [pc, #244]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f6:	d106      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d103      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80062fe:	4b3b      	ldr	r3, [pc, #236]	@ (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
 8006302:	f000 befa 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006306:	4b36      	ldr	r3, [pc, #216]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b02      	cmp	r3, #2
 8006312:	d107      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	2b30      	cmp	r3, #48	@ 0x30
 8006318:	d104      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006320:	f000 beeb 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
 8006328:	f000 bee7 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800632c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006330:	f1a2 0108 	sub.w	r1, r2, #8
 8006334:	430b      	orrs	r3, r1
 8006336:	d136      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006338:	4b29      	ldr	r3, [pc, #164]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800633a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800633e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006342:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800634a:	f7ff f8d3 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 800634e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006350:	f000 bed3 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	2b40      	cmp	r3, #64	@ 0x40
 8006358:	d104      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800635a:	f7fe ffaf 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800635e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006360:	f000 becb 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006364:	4b1e      	ldr	r3, [pc, #120]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006370:	d106      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	2b80      	cmp	r3, #128	@ 0x80
 8006376:	d103      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8006378:	4b1c      	ldr	r3, [pc, #112]	@ (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
 800637c:	f000 bebd 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006380:	4b17      	ldr	r3, [pc, #92]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d107      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	2bc0      	cmp	r3, #192	@ 0xc0
 8006392:	d104      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8006394:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006398:	637b      	str	r3, [r7, #52]	@ 0x34
 800639a:	f000 beae 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a2:	f000 beaa 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80063a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063aa:	f1a2 0110 	sub.w	r1, r2, #16
 80063ae:	430b      	orrs	r3, r1
 80063b0:	d141      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80063b2:	4b0b      	ldr	r3, [pc, #44]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063c4:	f7ff f896 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80063c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80063ca:	f000 be96 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063d6:	f7fe ff71 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 80063da:	6378      	str	r0, [r7, #52]	@ 0x34
 80063dc:	f000 be8d 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80063e0:	46020c00 	.word	0x46020c00
 80063e4:	02dc6c00 	.word	0x02dc6c00
 80063e8:	0800ad48 	.word	0x0800ad48
 80063ec:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80063f0:	4baa      	ldr	r3, [pc, #680]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063fc:	d107      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006404:	d103      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006406:	4ba6      	ldr	r3, [pc, #664]	@ (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34
 800640a:	f000 be76 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800640e:	4ba3      	ldr	r3, [pc, #652]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b02      	cmp	r3, #2
 800641a:	d108      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006422:	d104      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8006424:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
 800642a:	f000 be66 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
 8006432:	f000 be62 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643a:	f1a2 0120 	sub.w	r1, r2, #32
 800643e:	430b      	orrs	r3, r1
 8006440:	d158      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006442:	4b96      	ldr	r3, [pc, #600]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006454:	f7ff f876 	bl	8005544 <HAL_RCC_GetPCLK3Freq>
 8006458:	6378      	str	r0, [r7, #52]	@ 0x34
 800645a:	f000 be4e 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d104      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006464:	f7fe ff2a 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006468:	6378      	str	r0, [r7, #52]	@ 0x34
 800646a:	f000 be46 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800646e:	4b8b      	ldr	r3, [pc, #556]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647a:	d106      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	2b02      	cmp	r3, #2
 8006480:	d103      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8006482:	4b87      	ldr	r3, [pc, #540]	@ (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
 8006486:	f000 be38 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800648a:	4b84      	ldr	r3, [pc, #528]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800648c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b02      	cmp	r3, #2
 8006496:	d107      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	2b03      	cmp	r3, #3
 800649c:	d104      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800649e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a4:	f000 be29 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80064a8:	4b7c      	ldr	r3, [pc, #496]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d11b      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d118      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064ba:	4b78      	ldr	r3, [pc, #480]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80064c6:	4b75      	ldr	r3, [pc, #468]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	0e1b      	lsrs	r3, r3, #24
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	e006      	b.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80064d2:	4b72      	ldr	r3, [pc, #456]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064d8:	041b      	lsls	r3, r3, #16
 80064da:	0e1b      	lsrs	r3, r3, #24
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	4a70      	ldr	r2, [pc, #448]	@ (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80064e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e8:	f000 be07 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f0:	f000 be03 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80064f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064fc:	430b      	orrs	r3, r1
 80064fe:	d16c      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006500:	4b66      	ldr	r3, [pc, #408]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006506:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800650a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006512:	d104      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006514:	f7fe fed2 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006518:	6378      	str	r0, [r7, #52]	@ 0x34
 800651a:	f000 bdee 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006524:	d108      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006526:	f107 0318 	add.w	r3, r7, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff f9fe 	bl	800592c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	637b      	str	r3, [r7, #52]	@ 0x34
 8006534:	f000 bde1 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800653e:	f7fe ffbf 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 8006542:	6378      	str	r0, [r7, #52]	@ 0x34
 8006544:	f000 bdd9 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800654e:	d122      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006550:	4b52      	ldr	r3, [pc, #328]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b20      	cmp	r3, #32
 800655a:	d118      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800655c:	4b4f      	ldr	r3, [pc, #316]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006568:	4b4c      	ldr	r3, [pc, #304]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	0e1b      	lsrs	r3, r3, #24
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	e006      	b.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006574:	4b49      	ldr	r3, [pc, #292]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800657a:	041b      	lsls	r3, r3, #16
 800657c:	0e1b      	lsrs	r3, r3, #24
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	4a48      	ldr	r2, [pc, #288]	@ (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	f000 bdb6 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	637b      	str	r3, [r7, #52]	@ 0x34
 8006592:	f000 bdb2 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006596:	4b41      	ldr	r3, [pc, #260]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065a2:	d107      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80065a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065aa:	d103      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80065ac:	4b3c      	ldr	r3, [pc, #240]	@ (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b0:	f000 bda3 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80065b4:	4b39      	ldr	r3, [pc, #228]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c0:	d107      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c8:	d103      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80065ca:	4b35      	ldr	r3, [pc, #212]	@ (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ce:	f000 bd94 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d6:	f000 bd90 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80065da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065de:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80065e2:	430b      	orrs	r3, r1
 80065e4:	d160      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80065e6:	4b2d      	ldr	r3, [pc, #180]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d84c      	bhi.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006639 	.word	0x08006639
 8006604:	08006615 	.word	0x08006615
 8006608:	08006627 	.word	0x08006627
 800660c:	08006643 	.word	0x08006643
 8006610:	0800664d 	.word	0x0800664d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff f82d 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006622:	f000 bd6a 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006626:	f107 030c 	add.w	r3, r7, #12
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fad8 	bl	8005be0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006634:	f000 bd61 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006638:	f7fe ff42 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 800663c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800663e:	f000 bd5c 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006642:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006646:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006648:	f000 bd57 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800664c:	4b13      	ldr	r3, [pc, #76]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b20      	cmp	r3, #32
 8006656:	d118      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006658:	4b10      	ldr	r3, [pc, #64]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006664:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	0e1b      	lsrs	r3, r3, #24
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	e006      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	0e1b      	lsrs	r3, r3, #24
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	4a09      	ldr	r2, [pc, #36]	@ (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006686:	f000 bd38 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800668e:	f000 bd34 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006696:	f000 bd30 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800669a:	bf00      	nop
 800669c:	46020c00 	.word	0x46020c00
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	0800ad48 	.word	0x0800ad48
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80066a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ac:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80066b0:	430b      	orrs	r3, r1
 80066b2:	d167      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80066b4:	4ba0      	ldr	r3, [pc, #640]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80066b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066ba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80066be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066c6:	d036      	beq.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066ce:	d855      	bhi.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066d6:	d029      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066de:	d84d      	bhi.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066e6:	d013      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ee:	d845      	bhi.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d015      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066fc:	d13e      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe ffb8 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800670c:	f000 bcf5 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006710:	f107 030c 	add.w	r3, r7, #12
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fa63 	bl	8005be0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800671e:	f000 bcec 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006722:	f7fe fecd 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 8006726:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006728:	f000 bce7 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800672c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006732:	f000 bce2 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006736:	4b80      	ldr	r3, [pc, #512]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b20      	cmp	r3, #32
 8006740:	d118      	bne.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006742:	4b7d      	ldr	r3, [pc, #500]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800674e:	4b7a      	ldr	r3, [pc, #488]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	0e1b      	lsrs	r3, r3, #24
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	e006      	b.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800675a:	4b77      	ldr	r3, [pc, #476]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800675c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	0e1b      	lsrs	r3, r3, #24
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	4a74      	ldr	r2, [pc, #464]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800676a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006770:	f000 bcc3 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006778:	f000 bcbf 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006780:	f000 bcbb 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006788:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800678c:	430b      	orrs	r3, r1
 800678e:	d14c      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006790:	4b69      	ldr	r3, [pc, #420]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006796:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800679a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067a2:	f7fe fea7 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80067a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80067a8:	f000 bca7 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b2:	d104      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067b4:	f7fe fd82 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 80067b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80067ba:	f000 bc9e 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80067be:	4b5e      	ldr	r3, [pc, #376]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ca:	d107      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d2:	d103      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80067d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80067d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d8:	f000 bc8f 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80067dc:	4b56      	ldr	r3, [pc, #344]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d11c      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ee:	d118      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067f0:	4b51      	ldr	r3, [pc, #324]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80067fc:	4b4e      	ldr	r3, [pc, #312]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	e006      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8006808:	4b4b      	ldr	r3, [pc, #300]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800680a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	0e1b      	lsrs	r3, r3, #24
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	4a49      	ldr	r2, [pc, #292]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681c:	637b      	str	r3, [r7, #52]	@ 0x34
 800681e:	f000 bc6c 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
 8006826:	f000 bc68 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800682a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682e:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006832:	430b      	orrs	r3, r1
 8006834:	d14c      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006836:	4b40      	ldr	r3, [pc, #256]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800683c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006840:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fe fe54 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 800684c:	6378      	str	r0, [r7, #52]	@ 0x34
 800684e:	f000 bc54 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006858:	d104      	bne.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800685a:	f7fe fd2f 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800685e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006860:	f000 bc4b 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006864:	4b34      	ldr	r3, [pc, #208]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006870:	d107      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006878:	d103      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 800687a:	4b31      	ldr	r3, [pc, #196]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
 800687e:	f000 bc3c 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006882:	4b2d      	ldr	r3, [pc, #180]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b20      	cmp	r3, #32
 800688c:	d11c      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006894:	d118      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006896:	4b28      	ldr	r3, [pc, #160]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80068a2:	4b25      	ldr	r3, [pc, #148]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	0e1b      	lsrs	r3, r3, #24
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	e006      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 80068ae:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	0e1b      	lsrs	r3, r3, #24
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80068be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c4:	f000 bc19 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80068cc:	f000 bc15 	b.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80068d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d4:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80068d8:	430b      	orrs	r3, r1
 80068da:	d157      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80068dc:	4b16      	ldr	r3, [pc, #88]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80068ec:	d02a      	beq.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80068f2:	d848      	bhi.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	2b80      	cmp	r3, #128	@ 0x80
 80068f8:	d00d      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	2b80      	cmp	r3, #128	@ 0x80
 80068fe:	d842      	bhi.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	d011      	beq.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800690c:	e03b      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800690e:	f7fe fe19 	bl	8005544 <HAL_RCC_GetPCLK3Freq>
 8006912:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006914:	e3f1      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006916:	4b08      	ldr	r3, [pc, #32]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800691e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006922:	d102      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8006924:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006928:	e3e7      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800692e:	e3e4      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006930:	f7fe fcc4 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006934:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006936:	e3e0      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006938:	46020c00 	.word	0x46020c00
 800693c:	0800ad48 	.word	0x0800ad48
 8006940:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006944:	4ba3      	ldr	r3, [pc, #652]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b20      	cmp	r3, #32
 800694e:	d117      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006950:	4ba0      	ldr	r3, [pc, #640]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 800695c:	4b9d      	ldr	r3, [pc, #628]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	0e1b      	lsrs	r3, r3, #24
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	e006      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8006968:	4b9a      	ldr	r3, [pc, #616]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800696a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800696e:	041b      	lsls	r3, r3, #16
 8006970:	0e1b      	lsrs	r3, r3, #24
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	4a98      	ldr	r2, [pc, #608]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800697e:	e3bc      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006984:	e3b9      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800698a:	e3b6      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800698c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006990:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006994:	430b      	orrs	r3, r1
 8006996:	d147      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006998:	4b8e      	ldr	r3, [pc, #568]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800699a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800699e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069aa:	f7fe fda3 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80069ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80069b0:	e3a3      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069b8:	d103      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069ba:	f7fe fc7f 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 80069be:	6378      	str	r0, [r7, #52]	@ 0x34
 80069c0:	e39b      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80069c2:	4b84      	ldr	r3, [pc, #528]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ce:	d106      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d6:	d102      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80069d8:	4b80      	ldr	r3, [pc, #512]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
 80069dc:	e38d      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80069de:	4b7d      	ldr	r3, [pc, #500]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d11b      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80069f0:	d117      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069f2:	4b78      	ldr	r3, [pc, #480]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80069fe:	4b75      	ldr	r3, [pc, #468]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	0e1b      	lsrs	r3, r3, #24
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	e006      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006a0a:	4b72      	ldr	r3, [pc, #456]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	0e1b      	lsrs	r3, r3, #24
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	4a6f      	ldr	r2, [pc, #444]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a20:	e36b      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a26:	e368      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a30:	430b      	orrs	r3, r1
 8006a32:	d164      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006a34:	4b67      	ldr	r3, [pc, #412]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d120      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a46:	4b63      	ldr	r3, [pc, #396]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d117      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a52:	4b60      	ldr	r3, [pc, #384]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	0e1b      	lsrs	r3, r3, #24
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	e006      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8006a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	0e1b      	lsrs	r3, r3, #24
 8006a74:	f003 030f 	and.w	r3, r3, #15
 8006a78:	4a57      	ldr	r2, [pc, #348]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a80:	e33b      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a86:	e338      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006a88:	4b52      	ldr	r3, [pc, #328]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a96:	d112      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a9e:	d10e      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aae:	d102      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8006ab0:	23fa      	movs	r3, #250	@ 0xfa
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ab4:	e321      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ab6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006abc:	e31d      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006abe:	4b45      	ldr	r3, [pc, #276]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aca:	d106      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad2:	d102      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8006ad4:	4b41      	ldr	r3, [pc, #260]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad8:	e30f      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006ada:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d107      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aee:	d103      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8006af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af6:	e300      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afc:	e2fd      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b02:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006b06:	430b      	orrs	r3, r1
 8006b08:	d16a      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006b0a:	4b32      	ldr	r3, [pc, #200]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d120      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d117      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b28:	4b2a      	ldr	r3, [pc, #168]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006b34:	4b27      	ldr	r3, [pc, #156]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	e006      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006b40:	4b24      	ldr	r3, [pc, #144]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	0e1b      	lsrs	r3, r3, #24
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	4a22      	ldr	r2, [pc, #136]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b56:	e2d0      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5c:	e2cd      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b6c:	d112      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b74:	d10e      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b76:	4b17      	ldr	r3, [pc, #92]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b84:	d102      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006b86:	23fa      	movs	r3, #250	@ 0xfa
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b8a:	e2b6      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b92:	e2b2      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006b94:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba8:	d102      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006baa:	4b0c      	ldr	r3, [pc, #48]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bae:	e2a4      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006bb0:	4b08      	ldr	r3, [pc, #32]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d107      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bc4:	d103      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bcc:	e295      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd2:	e292      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006bd4:	46020c00 	.word	0x46020c00
 8006bd8:	0800ad48 	.word	0x0800ad48
 8006bdc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006be8:	430b      	orrs	r3, r1
 8006bea:	d147      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bec:	4b9a      	ldr	r3, [pc, #616]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006bf6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bfe:	f7fe fc79 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8006c02:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c04:	e279      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006c06:	4b94      	ldr	r3, [pc, #592]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c14:	d112      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c1c:	d10e      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8006c2e:	23fa      	movs	r3, #250	@ 0xfa
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c32:	e262      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c3a:	e25e      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006c3c:	4b86      	ldr	r3, [pc, #536]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c48:	d106      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c50:	d102      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8006c52:	4b82      	ldr	r3, [pc, #520]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c56:	e250      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006c58:	4b7f      	ldr	r3, [pc, #508]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d107      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c6c:	d103      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8006c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c74:	e241      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	e23e      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c80:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006c84:	430b      	orrs	r3, r1
 8006c86:	d12d      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006c88:	4b73      	ldr	r3, [pc, #460]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c8e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006c94:	4b70      	ldr	r3, [pc, #448]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ca0:	d105      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8006ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cac:	e225      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe fcdc 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc4:	e219      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ccc:	d107      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cce:	f107 0318 	add.w	r3, r7, #24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fe2a 	bl	800592c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cdc:	e20d      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce2:	e20a      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006cec:	430b      	orrs	r3, r1
 8006cee:	d156      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006cf0:	4b59      	ldr	r3, [pc, #356]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cf6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006cfa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d02:	d028      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d0a:	d845      	bhi.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d12:	d013      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d1a:	d83d      	bhi.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d28:	d004      	beq.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8006d2a:	e035      	b.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006d2c:	f7fe fbf6 	bl	800551c <HAL_RCC_GetPCLK2Freq>
 8006d30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d32:	e1e2      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d34:	f7fe fac2 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006d38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d3a:	e1de      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d3c:	4b46      	ldr	r3, [pc, #280]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d48:	d102      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8006d4a:	4b44      	ldr	r3, [pc, #272]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006d4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d4e:	e1d4      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d54:	e1d1      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d56:	4b40      	ldr	r3, [pc, #256]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d117      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d62:	4b3d      	ldr	r3, [pc, #244]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8006d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	0e1b      	lsrs	r3, r3, #24
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006d7a:	4b37      	ldr	r3, [pc, #220]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	0e1b      	lsrs	r3, r3, #24
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	4a35      	ldr	r2, [pc, #212]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8006d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d90:	e1b3      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d96:	e1b0      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d9c:	e1ad      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006da6:	430b      	orrs	r3, r1
 8006da8:	d15c      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006daa:	4b2b      	ldr	r3, [pc, #172]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006db4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dbc:	d028      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dc4:	d845      	bhi.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dcc:	d013      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dd4:	d83d      	bhi.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de2:	d004      	beq.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8006de4:	e035      	b.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006de6:	f7fe fb85 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8006dea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006dec:	e185      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006dee:	f7fe fa65 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006df2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006df4:	e181      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006df6:	4b18      	ldr	r3, [pc, #96]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e02:	d102      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8006e04:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e08:	e177      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e0e:	e174      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e10:	4b11      	ldr	r3, [pc, #68]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d117      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8006e28:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	0e1b      	lsrs	r3, r3, #24
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	e006      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8006e34:	4b08      	ldr	r3, [pc, #32]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	0e1b      	lsrs	r3, r3, #24
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	4a07      	ldr	r2, [pc, #28]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8006e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e4a:	e156      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e50:	e153      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e56:	e150      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006e58:	46020c00 	.word	0x46020c00
 8006e5c:	00f42400 	.word	0x00f42400
 8006e60:	0800ad48 	.word	0x0800ad48
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e68:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	d176      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006e70:	4ba4      	ldr	r3, [pc, #656]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e76:	f003 0318 	and.w	r3, r3, #24
 8006e7a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	2b18      	cmp	r3, #24
 8006e80:	d86a      	bhi.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006eed 	.word	0x08006eed
 8006e8c:	08006f59 	.word	0x08006f59
 8006e90:	08006f59 	.word	0x08006f59
 8006e94:	08006f59 	.word	0x08006f59
 8006e98:	08006f59 	.word	0x08006f59
 8006e9c:	08006f59 	.word	0x08006f59
 8006ea0:	08006f59 	.word	0x08006f59
 8006ea4:	08006f59 	.word	0x08006f59
 8006ea8:	08006ef5 	.word	0x08006ef5
 8006eac:	08006f59 	.word	0x08006f59
 8006eb0:	08006f59 	.word	0x08006f59
 8006eb4:	08006f59 	.word	0x08006f59
 8006eb8:	08006f59 	.word	0x08006f59
 8006ebc:	08006f59 	.word	0x08006f59
 8006ec0:	08006f59 	.word	0x08006f59
 8006ec4:	08006f59 	.word	0x08006f59
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f59 	.word	0x08006f59
 8006ed4:	08006f59 	.word	0x08006f59
 8006ed8:	08006f59 	.word	0x08006f59
 8006edc:	08006f59 	.word	0x08006f59
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f59 	.word	0x08006f59
 8006ee8:	08006f17 	.word	0x08006f17
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006eec:	f7fe fb2a 	bl	8005544 <HAL_RCC_GetPCLK3Freq>
 8006ef0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ef2:	e102      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ef4:	f7fe f9e2 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006ef8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006efa:	e0fe      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006efc:	4b81      	ldr	r3, [pc, #516]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f08:	d102      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8006f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8006f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f0e:	e0f4      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f14:	e0f1      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f16:	4b7b      	ldr	r3, [pc, #492]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d117      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f22:	4b78      	ldr	r3, [pc, #480]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006f2e:	4b75      	ldr	r3, [pc, #468]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	0e1b      	lsrs	r3, r3, #24
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	e006      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8006f3a:	4b72      	ldr	r3, [pc, #456]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	0e1b      	lsrs	r3, r3, #24
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	4a70      	ldr	r2, [pc, #448]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8006f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f50:	e0d3      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f56:	e0d0      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f5c:	e0cd      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f62:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006f66:	430b      	orrs	r3, r1
 8006f68:	d155      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f6a:	4b66      	ldr	r3, [pc, #408]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f7c:	d013      	beq.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f84:	d844      	bhi.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f8c:	d013      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f94:	d83c      	bhi.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d014      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa2:	d014      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8006fa4:	e034      	b.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa6:	f107 0318 	add.w	r3, r7, #24
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fcbe 	bl	800592c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fb4:	e0a1      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fb5c 	bl	8005678 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fc4:	e099      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006fc6:	f7fe f979 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006fca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fcc:	e095      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fce:	4b4d      	ldr	r3, [pc, #308]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	d117      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fda:	4b4a      	ldr	r3, [pc, #296]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d005      	beq.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8006fe6:	4b47      	ldr	r3, [pc, #284]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	0e1b      	lsrs	r3, r3, #24
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	e006      	b.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8006ff2:	4b44      	ldr	r3, [pc, #272]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ff8:	041b      	lsls	r3, r3, #16
 8006ffa:	0e1b      	lsrs	r3, r3, #24
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	4a42      	ldr	r2, [pc, #264]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007008:	e077      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800700e:	e074      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007014:	e071      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800701e:	430b      	orrs	r3, r1
 8007020:	d131      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007022:	4b38      	ldr	r3, [pc, #224]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800702c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800702e:	4b35      	ldr	r3, [pc, #212]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b02      	cmp	r3, #2
 800703a:	d106      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8007042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007046:	637b      	str	r3, [r7, #52]	@ 0x34
 8007048:	e057      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800704a:	4b2e      	ldr	r3, [pc, #184]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800704c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007058:	d112      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007060:	d10e      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007062:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800706c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007070:	d102      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8007072:	23fa      	movs	r3, #250	@ 0xfa
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007076:	e040      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007078:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800707c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800707e:	e03c      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	637b      	str	r3, [r7, #52]	@ 0x34
 8007084:	e039      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800708e:	430b      	orrs	r3, r1
 8007090:	d131      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007092:	4b1c      	ldr	r3, [pc, #112]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007098:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800709c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800709e:	4b19      	ldr	r3, [pc, #100]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070aa:	d105      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 80070b2:	4b17      	ldr	r3, [pc, #92]	@ (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 80070b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b6:	e020      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80070b8:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c4:	d106      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070cc:	d102      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 80070ce:	4b11      	ldr	r3, [pc, #68]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d2:	e012      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80070d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e0:	d106      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e8:	d102      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 80070ea:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80070ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ee:	e004      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f4:	e001      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80070fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3738      	adds	r7, #56	@ 0x38
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	46020c00 	.word	0x46020c00
 8007108:	00f42400 	.word	0x00f42400
 800710c:	0800ad48 	.word	0x0800ad48
 8007110:	02dc6c00 	.word	0x02dc6c00
 8007114:	016e3600 	.word	0x016e3600

08007118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e049      	b.n	80071be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fa f872 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f001 f8dc 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d001      	beq.n	80071e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e06a      	b.n	80072b6 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a35      	ldr	r2, [pc, #212]	@ (80072c4 <HAL_TIM_Base_Start+0xfc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d040      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a34      	ldr	r2, [pc, #208]	@ (80072c8 <HAL_TIM_Base_Start+0x100>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d03b      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007204:	d036      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800720e:	d031      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a2d      	ldr	r2, [pc, #180]	@ (80072cc <HAL_TIM_Base_Start+0x104>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d02c      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2c      	ldr	r2, [pc, #176]	@ (80072d0 <HAL_TIM_Base_Start+0x108>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d027      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a2a      	ldr	r2, [pc, #168]	@ (80072d4 <HAL_TIM_Base_Start+0x10c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d022      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a29      	ldr	r2, [pc, #164]	@ (80072d8 <HAL_TIM_Base_Start+0x110>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d01d      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a27      	ldr	r2, [pc, #156]	@ (80072dc <HAL_TIM_Base_Start+0x114>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d018      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a26      	ldr	r2, [pc, #152]	@ (80072e0 <HAL_TIM_Base_Start+0x118>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a24      	ldr	r2, [pc, #144]	@ (80072e4 <HAL_TIM_Base_Start+0x11c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00e      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a23      	ldr	r2, [pc, #140]	@ (80072e8 <HAL_TIM_Base_Start+0x120>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a21      	ldr	r2, [pc, #132]	@ (80072ec <HAL_TIM_Base_Start+0x124>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d004      	beq.n	8007274 <HAL_TIM_Base_Start+0xac>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a20      	ldr	r2, [pc, #128]	@ (80072f0 <HAL_TIM_Base_Start+0x128>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d115      	bne.n	80072a0 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	4b1e      	ldr	r3, [pc, #120]	@ (80072f4 <HAL_TIM_Base_Start+0x12c>)
 800727c:	4013      	ands	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b06      	cmp	r3, #6
 8007284:	d015      	beq.n	80072b2 <HAL_TIM_Base_Start+0xea>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800728c:	d011      	beq.n	80072b2 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	e008      	b.n	80072b2 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	e000      	b.n	80072b4 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	50012c00 	.word	0x50012c00
 80072cc:	40000400 	.word	0x40000400
 80072d0:	50000400 	.word	0x50000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	50000800 	.word	0x50000800
 80072dc:	40000c00 	.word	0x40000c00
 80072e0:	50000c00 	.word	0x50000c00
 80072e4:	40013400 	.word	0x40013400
 80072e8:	50013400 	.word	0x50013400
 80072ec:	40014000 	.word	0x40014000
 80072f0:	50014000 	.word	0x50014000
 80072f4:	00010007 	.word	0x00010007

080072f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e049      	b.n	800739e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f841 	bl	80073a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f000 ffec 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d109      	bne.n	80073e0 <HAL_TIM_PWM_Start+0x24>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e03c      	b.n	800745a <HAL_TIM_PWM_Start+0x9e>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d109      	bne.n	80073fa <HAL_TIM_PWM_Start+0x3e>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	bf14      	ite	ne
 80073f2:	2301      	movne	r3, #1
 80073f4:	2300      	moveq	r3, #0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	e02f      	b.n	800745a <HAL_TIM_PWM_Start+0x9e>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d109      	bne.n	8007414 <HAL_TIM_PWM_Start+0x58>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	bf14      	ite	ne
 800740c:	2301      	movne	r3, #1
 800740e:	2300      	moveq	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e022      	b.n	800745a <HAL_TIM_PWM_Start+0x9e>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b0c      	cmp	r3, #12
 8007418:	d109      	bne.n	800742e <HAL_TIM_PWM_Start+0x72>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e015      	b.n	800745a <HAL_TIM_PWM_Start+0x9e>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b10      	cmp	r3, #16
 8007432:	d109      	bne.n	8007448 <HAL_TIM_PWM_Start+0x8c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e008      	b.n	800745a <HAL_TIM_PWM_Start+0x9e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	bf14      	ite	ne
 8007454:	2301      	movne	r3, #1
 8007456:	2300      	moveq	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e0d8      	b.n	8007614 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <HAL_TIM_PWM_Start+0xb6>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007470:	e023      	b.n	80074ba <HAL_TIM_PWM_Start+0xfe>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b04      	cmp	r3, #4
 8007476:	d104      	bne.n	8007482 <HAL_TIM_PWM_Start+0xc6>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007480:	e01b      	b.n	80074ba <HAL_TIM_PWM_Start+0xfe>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d104      	bne.n	8007492 <HAL_TIM_PWM_Start+0xd6>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007490:	e013      	b.n	80074ba <HAL_TIM_PWM_Start+0xfe>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b0c      	cmp	r3, #12
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_PWM_Start+0xe6>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074a0:	e00b      	b.n	80074ba <HAL_TIM_PWM_Start+0xfe>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b10      	cmp	r3, #16
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_PWM_Start+0xf6>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074b0:	e003      	b.n	80074ba <HAL_TIM_PWM_Start+0xfe>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2201      	movs	r2, #1
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 feb0 	bl	8009228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a53      	ldr	r2, [pc, #332]	@ (800761c <HAL_TIM_PWM_Start+0x260>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d02c      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a52      	ldr	r2, [pc, #328]	@ (8007620 <HAL_TIM_PWM_Start+0x264>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d027      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a50      	ldr	r2, [pc, #320]	@ (8007624 <HAL_TIM_PWM_Start+0x268>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d022      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a4f      	ldr	r2, [pc, #316]	@ (8007628 <HAL_TIM_PWM_Start+0x26c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d01d      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a4d      	ldr	r2, [pc, #308]	@ (800762c <HAL_TIM_PWM_Start+0x270>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d018      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a4c      	ldr	r2, [pc, #304]	@ (8007630 <HAL_TIM_PWM_Start+0x274>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d013      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a4a      	ldr	r2, [pc, #296]	@ (8007634 <HAL_TIM_PWM_Start+0x278>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00e      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a49      	ldr	r2, [pc, #292]	@ (8007638 <HAL_TIM_PWM_Start+0x27c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d009      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a47      	ldr	r2, [pc, #284]	@ (800763c <HAL_TIM_PWM_Start+0x280>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <HAL_TIM_PWM_Start+0x170>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a46      	ldr	r2, [pc, #280]	@ (8007640 <HAL_TIM_PWM_Start+0x284>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d101      	bne.n	8007530 <HAL_TIM_PWM_Start+0x174>
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <HAL_TIM_PWM_Start+0x176>
 8007530:	2300      	movs	r3, #0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007544:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a34      	ldr	r2, [pc, #208]	@ (800761c <HAL_TIM_PWM_Start+0x260>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d040      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a32      	ldr	r2, [pc, #200]	@ (8007620 <HAL_TIM_PWM_Start+0x264>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d03b      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007562:	d036      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800756c:	d031      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a34      	ldr	r2, [pc, #208]	@ (8007644 <HAL_TIM_PWM_Start+0x288>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d02c      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a32      	ldr	r2, [pc, #200]	@ (8007648 <HAL_TIM_PWM_Start+0x28c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d027      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a31      	ldr	r2, [pc, #196]	@ (800764c <HAL_TIM_PWM_Start+0x290>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d022      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a2f      	ldr	r2, [pc, #188]	@ (8007650 <HAL_TIM_PWM_Start+0x294>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01d      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a2e      	ldr	r2, [pc, #184]	@ (8007654 <HAL_TIM_PWM_Start+0x298>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d018      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007658 <HAL_TIM_PWM_Start+0x29c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007624 <HAL_TIM_PWM_Start+0x268>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007628 <HAL_TIM_PWM_Start+0x26c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d009      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a1a      	ldr	r2, [pc, #104]	@ (800762c <HAL_TIM_PWM_Start+0x270>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x216>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a18      	ldr	r2, [pc, #96]	@ (8007630 <HAL_TIM_PWM_Start+0x274>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d115      	bne.n	80075fe <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	4b20      	ldr	r3, [pc, #128]	@ (800765c <HAL_TIM_PWM_Start+0x2a0>)
 80075da:	4013      	ands	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b06      	cmp	r3, #6
 80075e2:	d015      	beq.n	8007610 <HAL_TIM_PWM_Start+0x254>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ea:	d011      	beq.n	8007610 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fc:	e008      	b.n	8007610 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0201 	orr.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e000      	b.n	8007612 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40012c00 	.word	0x40012c00
 8007620:	50012c00 	.word	0x50012c00
 8007624:	40013400 	.word	0x40013400
 8007628:	50013400 	.word	0x50013400
 800762c:	40014000 	.word	0x40014000
 8007630:	50014000 	.word	0x50014000
 8007634:	40014400 	.word	0x40014400
 8007638:	50014400 	.word	0x50014400
 800763c:	40014800 	.word	0x40014800
 8007640:	50014800 	.word	0x50014800
 8007644:	40000400 	.word	0x40000400
 8007648:	50000400 	.word	0x50000400
 800764c:	40000800 	.word	0x40000800
 8007650:	50000800 	.word	0x50000800
 8007654:	40000c00 	.word	0x40000c00
 8007658:	50000c00 	.word	0x50000c00
 800765c:	00010007 	.word	0x00010007

08007660 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e049      	b.n	8007706 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f841 	bl	800770e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f000 fe38 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <HAL_TIM_IC_Start_DMA+0x22>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007742:	b2db      	uxtb	r3, r3
 8007744:	e023      	b.n	800778e <HAL_TIM_IC_Start_DMA+0x6a>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b04      	cmp	r3, #4
 800774a:	d104      	bne.n	8007756 <HAL_TIM_IC_Start_DMA+0x32>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007752:	b2db      	uxtb	r3, r3
 8007754:	e01b      	b.n	800778e <HAL_TIM_IC_Start_DMA+0x6a>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b08      	cmp	r3, #8
 800775a:	d104      	bne.n	8007766 <HAL_TIM_IC_Start_DMA+0x42>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007762:	b2db      	uxtb	r3, r3
 8007764:	e013      	b.n	800778e <HAL_TIM_IC_Start_DMA+0x6a>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b0c      	cmp	r3, #12
 800776a:	d104      	bne.n	8007776 <HAL_TIM_IC_Start_DMA+0x52>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007772:	b2db      	uxtb	r3, r3
 8007774:	e00b      	b.n	800778e <HAL_TIM_IC_Start_DMA+0x6a>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b10      	cmp	r3, #16
 800777a:	d104      	bne.n	8007786 <HAL_TIM_IC_Start_DMA+0x62>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e003      	b.n	800778e <HAL_TIM_IC_Start_DMA+0x6a>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800778c:	b2db      	uxtb	r3, r3
 800778e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d104      	bne.n	80077a0 <HAL_TIM_IC_Start_DMA+0x7c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800779c:	b2db      	uxtb	r3, r3
 800779e:	e013      	b.n	80077c8 <HAL_TIM_IC_Start_DMA+0xa4>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d104      	bne.n	80077b0 <HAL_TIM_IC_Start_DMA+0x8c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	e00b      	b.n	80077c8 <HAL_TIM_IC_Start_DMA+0xa4>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d104      	bne.n	80077c0 <HAL_TIM_IC_Start_DMA+0x9c>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	e003      	b.n	80077c8 <HAL_TIM_IC_Start_DMA+0xa4>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80077ca:	7dbb      	ldrb	r3, [r7, #22]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d002      	beq.n	80077d6 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80077d0:	7d7b      	ldrb	r3, [r7, #21]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d101      	bne.n	80077da <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
 80077d8:	e17a      	b.n	8007ad0 <HAL_TIM_IC_Start_DMA+0x3ac>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80077da:	7dbb      	ldrb	r3, [r7, #22]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d153      	bne.n	8007888 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80077e0:	7d7b      	ldrb	r3, [r7, #21]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d150      	bne.n	8007888 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_TIM_IC_Start_DMA+0xce>
 80077ec:	887b      	ldrh	r3, [r7, #2]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e16c      	b.n	8007ad0 <HAL_TIM_IC_Start_DMA+0x3ac>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_IC_Start_DMA+0xe2>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007804:	e023      	b.n	800784e <HAL_TIM_IC_Start_DMA+0x12a>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b04      	cmp	r3, #4
 800780a:	d104      	bne.n	8007816 <HAL_TIM_IC_Start_DMA+0xf2>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007814:	e01b      	b.n	800784e <HAL_TIM_IC_Start_DMA+0x12a>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b08      	cmp	r3, #8
 800781a:	d104      	bne.n	8007826 <HAL_TIM_IC_Start_DMA+0x102>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007824:	e013      	b.n	800784e <HAL_TIM_IC_Start_DMA+0x12a>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b0c      	cmp	r3, #12
 800782a:	d104      	bne.n	8007836 <HAL_TIM_IC_Start_DMA+0x112>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007834:	e00b      	b.n	800784e <HAL_TIM_IC_Start_DMA+0x12a>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b10      	cmp	r3, #16
 800783a:	d104      	bne.n	8007846 <HAL_TIM_IC_Start_DMA+0x122>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007844:	e003      	b.n	800784e <HAL_TIM_IC_Start_DMA+0x12a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <HAL_TIM_IC_Start_DMA+0x13a>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 800785c:	e016      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b04      	cmp	r3, #4
 8007862:	d104      	bne.n	800786e <HAL_TIM_IC_Start_DMA+0x14a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 800786c:	e00e      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b08      	cmp	r3, #8
 8007872:	d104      	bne.n	800787e <HAL_TIM_IC_Start_DMA+0x15a>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 800787c:	e006      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8007886:	e001      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e121      	b.n	8007ad0 <HAL_TIM_IC_Start_DMA+0x3ac>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2201      	movs	r2, #1
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	4618      	mov	r0, r3
 8007896:	f001 fcc7 	bl	8009228 <TIM_CCxChannelCmd>

  switch (Channel)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b0c      	cmp	r3, #12
 800789e:	f200 80ad 	bhi.w	80079fc <HAL_TIM_IC_Start_DMA+0x2d8>
 80078a2:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <HAL_TIM_IC_Start_DMA+0x184>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078dd 	.word	0x080078dd
 80078ac:	080079fd 	.word	0x080079fd
 80078b0:	080079fd 	.word	0x080079fd
 80078b4:	080079fd 	.word	0x080079fd
 80078b8:	08007925 	.word	0x08007925
 80078bc:	080079fd 	.word	0x080079fd
 80078c0:	080079fd 	.word	0x080079fd
 80078c4:	080079fd 	.word	0x080079fd
 80078c8:	0800796d 	.word	0x0800796d
 80078cc:	080079fd 	.word	0x080079fd
 80078d0:	080079fd 	.word	0x080079fd
 80078d4:	080079fd 	.word	0x080079fd
 80078d8:	080079b5 	.word	0x080079b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ad8 <HAL_TIM_IC_Start_DMA+0x3b4>)
 80078e2:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e8:	4a7c      	ldr	r2, [pc, #496]	@ (8007adc <HAL_TIM_IC_Start_DMA+0x3b8>)
 80078ea:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	4a7b      	ldr	r2, [pc, #492]	@ (8007ae0 <HAL_TIM_IC_Start_DMA+0x3bc>)
 80078f2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3334      	adds	r3, #52	@ 0x34
 80078fe:	4619      	mov	r1, r3
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	f000 fbfc 	bl	8008100 <TIM_DMA_Start_IT>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e0de      	b.n	8007ad0 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007920:	60da      	str	r2, [r3, #12]
      break;
 8007922:	e06e      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007928:	4a6b      	ldr	r2, [pc, #428]	@ (8007ad8 <HAL_TIM_IC_Start_DMA+0x3b4>)
 800792a:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007930:	4a6a      	ldr	r2, [pc, #424]	@ (8007adc <HAL_TIM_IC_Start_DMA+0x3b8>)
 8007932:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	4a69      	ldr	r2, [pc, #420]	@ (8007ae0 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800793a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3338      	adds	r3, #56	@ 0x38
 8007946:	4619      	mov	r1, r3
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	887b      	ldrh	r3, [r7, #2]
 800794c:	f000 fbd8 	bl	8008100 <TIM_DMA_Start_IT>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e0ba      	b.n	8007ad0 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007968:	60da      	str	r2, [r3, #12]
      break;
 800796a:	e04a      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	4a59      	ldr	r2, [pc, #356]	@ (8007ad8 <HAL_TIM_IC_Start_DMA+0x3b4>)
 8007972:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007978:	4a58      	ldr	r2, [pc, #352]	@ (8007adc <HAL_TIM_IC_Start_DMA+0x3b8>)
 800797a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	4a57      	ldr	r2, [pc, #348]	@ (8007ae0 <HAL_TIM_IC_Start_DMA+0x3bc>)
 8007982:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	333c      	adds	r3, #60	@ 0x3c
 800798e:	4619      	mov	r1, r3
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	887b      	ldrh	r3, [r7, #2]
 8007994:	f000 fbb4 	bl	8008100 <TIM_DMA_Start_IT>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e096      	b.n	8007ad0 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079b0:	60da      	str	r2, [r3, #12]
      break;
 80079b2:	e026      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b8:	4a47      	ldr	r2, [pc, #284]	@ (8007ad8 <HAL_TIM_IC_Start_DMA+0x3b4>)
 80079ba:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c0:	4a46      	ldr	r2, [pc, #280]	@ (8007adc <HAL_TIM_IC_Start_DMA+0x3b8>)
 80079c2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c8:	4a45      	ldr	r2, [pc, #276]	@ (8007ae0 <HAL_TIM_IC_Start_DMA+0x3bc>)
 80079ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3340      	adds	r3, #64	@ 0x40
 80079d6:	4619      	mov	r1, r3
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	887b      	ldrh	r3, [r7, #2]
 80079dc:	f000 fb90 	bl	8008100 <TIM_DMA_Start_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e072      	b.n	8007ad0 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079f8:	60da      	str	r2, [r3, #12]
      break;
 80079fa:	e002      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007a00:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a37      	ldr	r2, [pc, #220]	@ (8007ae4 <HAL_TIM_IC_Start_DMA+0x3c0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d040      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a35      	ldr	r2, [pc, #212]	@ (8007ae8 <HAL_TIM_IC_Start_DMA+0x3c4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d03b      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1e:	d036      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a28:	d031      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8007aec <HAL_TIM_IC_Start_DMA+0x3c8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d02c      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a2d      	ldr	r2, [pc, #180]	@ (8007af0 <HAL_TIM_IC_Start_DMA+0x3cc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d027      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a2c      	ldr	r2, [pc, #176]	@ (8007af4 <HAL_TIM_IC_Start_DMA+0x3d0>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d022      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8007af8 <HAL_TIM_IC_Start_DMA+0x3d4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01d      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a29      	ldr	r2, [pc, #164]	@ (8007afc <HAL_TIM_IC_Start_DMA+0x3d8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d018      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a27      	ldr	r2, [pc, #156]	@ (8007b00 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d013      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a26      	ldr	r2, [pc, #152]	@ (8007b04 <HAL_TIM_IC_Start_DMA+0x3e0>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00e      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a24      	ldr	r2, [pc, #144]	@ (8007b08 <HAL_TIM_IC_Start_DMA+0x3e4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d009      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a23      	ldr	r2, [pc, #140]	@ (8007b0c <HAL_TIM_IC_Start_DMA+0x3e8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d004      	beq.n	8007a8e <HAL_TIM_IC_Start_DMA+0x36a>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a21      	ldr	r2, [pc, #132]	@ (8007b10 <HAL_TIM_IC_Start_DMA+0x3ec>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d115      	bne.n	8007aba <HAL_TIM_IC_Start_DMA+0x396>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	4b1f      	ldr	r3, [pc, #124]	@ (8007b14 <HAL_TIM_IC_Start_DMA+0x3f0>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b06      	cmp	r3, #6
 8007a9e:	d015      	beq.n	8007acc <HAL_TIM_IC_Start_DMA+0x3a8>
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa6:	d011      	beq.n	8007acc <HAL_TIM_IC_Start_DMA+0x3a8>
    {
      __HAL_TIM_ENABLE(htim);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab8:	e008      	b.n	8007acc <HAL_TIM_IC_Start_DMA+0x3a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0201 	orr.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e000      	b.n	8007ace <HAL_TIM_IC_Start_DMA+0x3aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007acc:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	08008245 	.word	0x08008245
 8007adc:	080082ad 	.word	0x080082ad
 8007ae0:	080081b3 	.word	0x080081b3
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	50012c00 	.word	0x50012c00
 8007aec:	40000400 	.word	0x40000400
 8007af0:	50000400 	.word	0x50000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	50000800 	.word	0x50000800
 8007afc:	40000c00 	.word	0x40000c00
 8007b00:	50000c00 	.word	0x50000c00
 8007b04:	40013400 	.word	0x40013400
 8007b08:	50013400 	.word	0x50013400
 8007b0c:	40014000 	.word	0x40014000
 8007b10:	50014000 	.word	0x50014000
 8007b14:	00010007 	.word	0x00010007

08007b18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e088      	b.n	8007c48 <HAL_TIM_IC_ConfigChannel+0x130>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d11b      	bne.n	8007b7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007b54:	f001 f980 	bl	8008e58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 020c 	bic.w	r2, r2, #12
 8007b66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6999      	ldr	r1, [r3, #24]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	619a      	str	r2, [r3, #24]
 8007b7a:	e060      	b.n	8007c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d11c      	bne.n	8007bbc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007b92:	f001 fa26 	bl	8008fe2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007ba4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6999      	ldr	r1, [r3, #24]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	021a      	lsls	r2, r3, #8
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	619a      	str	r2, [r3, #24]
 8007bba:	e040      	b.n	8007c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b08      	cmp	r3, #8
 8007bc0:	d11b      	bne.n	8007bfa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007bd2:	f001 fa73 	bl	80090bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69da      	ldr	r2, [r3, #28]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 020c 	bic.w	r2, r2, #12
 8007be4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69d9      	ldr	r1, [r3, #28]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	61da      	str	r2, [r3, #28]
 8007bf8:	e021      	b.n	8007c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b0c      	cmp	r3, #12
 8007bfe:	d11c      	bne.n	8007c3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007c10:	f001 fa90 	bl	8009134 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69da      	ldr	r2, [r3, #28]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	69d9      	ldr	r1, [r3, #28]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	021a      	lsls	r2, r3, #8
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	61da      	str	r2, [r3, #28]
 8007c38:	e001      	b.n	8007c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e0ff      	b.n	8007e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b14      	cmp	r3, #20
 8007c7a:	f200 80f0 	bhi.w	8007e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007e5f 	.word	0x08007e5f
 8007c8c:	08007e5f 	.word	0x08007e5f
 8007c90:	08007e5f 	.word	0x08007e5f
 8007c94:	08007d19 	.word	0x08007d19
 8007c98:	08007e5f 	.word	0x08007e5f
 8007c9c:	08007e5f 	.word	0x08007e5f
 8007ca0:	08007e5f 	.word	0x08007e5f
 8007ca4:	08007d5b 	.word	0x08007d5b
 8007ca8:	08007e5f 	.word	0x08007e5f
 8007cac:	08007e5f 	.word	0x08007e5f
 8007cb0:	08007e5f 	.word	0x08007e5f
 8007cb4:	08007d9b 	.word	0x08007d9b
 8007cb8:	08007e5f 	.word	0x08007e5f
 8007cbc:	08007e5f 	.word	0x08007e5f
 8007cc0:	08007e5f 	.word	0x08007e5f
 8007cc4:	08007ddd 	.word	0x08007ddd
 8007cc8:	08007e5f 	.word	0x08007e5f
 8007ccc:	08007e5f 	.word	0x08007e5f
 8007cd0:	08007e5f 	.word	0x08007e5f
 8007cd4:	08007e1d 	.word	0x08007e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fc18 	bl	8008514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0208 	orr.w	r2, r2, #8
 8007cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0204 	bic.w	r2, r2, #4
 8007d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6999      	ldr	r1, [r3, #24]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	691a      	ldr	r2, [r3, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	619a      	str	r2, [r3, #24]
      break;
 8007d16:	e0a5      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fcba 	bl	8008698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6999      	ldr	r1, [r3, #24]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	021a      	lsls	r2, r3, #8
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	619a      	str	r2, [r3, #24]
      break;
 8007d58:	e084      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fd49 	bl	80087f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0208 	orr.w	r2, r2, #8
 8007d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0204 	bic.w	r2, r2, #4
 8007d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69d9      	ldr	r1, [r3, #28]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	61da      	str	r2, [r3, #28]
      break;
 8007d98:	e064      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fdd7 	bl	8008954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69d9      	ldr	r1, [r3, #28]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	021a      	lsls	r2, r3, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	61da      	str	r2, [r3, #28]
      break;
 8007dda:	e043      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fe66 	bl	8008ab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0204 	bic.w	r2, r2, #4
 8007e06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e1a:	e023      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fec8 	bl	8008bb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e5c:	e002      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
      break;
 8007e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop

08007e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_TIM_ConfigClockSource+0x1c>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e0e6      	b.n	8008062 <HAL_TIM_ConfigClockSource+0x1ea>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007eb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a67      	ldr	r2, [pc, #412]	@ (800806c <HAL_TIM_ConfigClockSource+0x1f4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	f000 80b1 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007ed4:	4a65      	ldr	r2, [pc, #404]	@ (800806c <HAL_TIM_ConfigClockSource+0x1f4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	f200 80b6 	bhi.w	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007edc:	4a64      	ldr	r2, [pc, #400]	@ (8008070 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	f000 80a9 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007ee4:	4a62      	ldr	r2, [pc, #392]	@ (8008070 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	f200 80ae 	bhi.w	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007eec:	4a61      	ldr	r2, [pc, #388]	@ (8008074 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	f000 80a1 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007ef4:	4a5f      	ldr	r2, [pc, #380]	@ (8008074 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	f200 80a6 	bhi.w	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007efc:	4a5e      	ldr	r2, [pc, #376]	@ (8008078 <HAL_TIM_ConfigClockSource+0x200>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	f000 8099 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007f04:	4a5c      	ldr	r2, [pc, #368]	@ (8008078 <HAL_TIM_ConfigClockSource+0x200>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	f200 809e 	bhi.w	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f10:	f000 8091 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007f14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f18:	f200 8096 	bhi.w	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f20:	f000 8089 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f28:	f200 808e 	bhi.w	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f30:	d03e      	beq.n	8007fb0 <HAL_TIM_ConfigClockSource+0x138>
 8007f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f36:	f200 8087 	bhi.w	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f3e:	f000 8086 	beq.w	800804e <HAL_TIM_ConfigClockSource+0x1d6>
 8007f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f46:	d87f      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f48:	2b70      	cmp	r3, #112	@ 0x70
 8007f4a:	d01a      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x10a>
 8007f4c:	2b70      	cmp	r3, #112	@ 0x70
 8007f4e:	d87b      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f50:	2b60      	cmp	r3, #96	@ 0x60
 8007f52:	d050      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x17e>
 8007f54:	2b60      	cmp	r3, #96	@ 0x60
 8007f56:	d877      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f58:	2b50      	cmp	r3, #80	@ 0x50
 8007f5a:	d03c      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0x15e>
 8007f5c:	2b50      	cmp	r3, #80	@ 0x50
 8007f5e:	d873      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f60:	2b40      	cmp	r3, #64	@ 0x40
 8007f62:	d058      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0x19e>
 8007f64:	2b40      	cmp	r3, #64	@ 0x40
 8007f66:	d86f      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f68:	2b30      	cmp	r3, #48	@ 0x30
 8007f6a:	d064      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007f6c:	2b30      	cmp	r3, #48	@ 0x30
 8007f6e:	d86b      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d060      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d867      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d05c      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d05a      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x1be>
 8007f80:	e062      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f92:	f001 f929 	bl	80091e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	609a      	str	r2, [r3, #8]
      break;
 8007fae:	e04f      	b.n	8008050 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fc0:	f001 f912 	bl	80091e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fd2:	609a      	str	r2, [r3, #8]
      break;
 8007fd4:	e03c      	b.n	8008050 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f000 ffce 	bl	8008f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2150      	movs	r1, #80	@ 0x50
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 f8dd 	bl	80091ae <TIM_ITRx_SetConfig>
      break;
 8007ff4:	e02c      	b.n	8008050 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008002:	461a      	mov	r2, r3
 8008004:	f001 f82a 	bl	800905c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2160      	movs	r1, #96	@ 0x60
 800800e:	4618      	mov	r0, r3
 8008010:	f001 f8cd 	bl	80091ae <TIM_ITRx_SetConfig>
      break;
 8008014:	e01c      	b.n	8008050 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008022:	461a      	mov	r2, r3
 8008024:	f000 ffae 	bl	8008f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2140      	movs	r1, #64	@ 0x40
 800802e:	4618      	mov	r0, r3
 8008030:	f001 f8bd 	bl	80091ae <TIM_ITRx_SetConfig>
      break;
 8008034:	e00c      	b.n	8008050 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f001 f8b4 	bl	80091ae <TIM_ITRx_SetConfig>
      break;
 8008046:	e003      	b.n	8008050 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	73fb      	strb	r3, [r7, #15]
      break;
 800804c:	e000      	b.n	8008050 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800804e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	00100070 	.word	0x00100070
 8008070:	00100040 	.word	0x00100040
 8008074:	00100030 	.word	0x00100030
 8008078:	00100020 	.word	0x00100020

0800807c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008090:	2302      	movs	r3, #2
 8008092:	e031      	b.n	80080f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fe0a 	bl	8008cc0 <TIM_SlaveTimer_SetConfig>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e018      	b.n	80080f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080d4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080e4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d020      	beq.n	800815c <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800811e:	2b00      	cmp	r3, #0
 8008120:	d019      	beq.n	8008156 <TIM_DMA_Start_IT+0x56>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d014      	beq.n	8008156 <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f7fa fe26 	bl	8002d9c <HAL_DMAEx_List_Start_IT>
 8008150:	4603      	mov	r3, r0
 8008152:	75fb      	strb	r3, [r7, #23]
 8008154:	e00a      	b.n	800816c <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]
 800815a:	e007      	b.n	800816c <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	68b9      	ldr	r1, [r7, #8]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7fa facc 	bl	8002700 <HAL_DMA_Start_IT>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800816c:	7dfb      	ldrb	r3, [r7, #23]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d107      	bne.n	80081da <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081d8:	e02a      	b.n	8008230 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d107      	bne.n	80081f4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2202      	movs	r2, #2
 80081e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081f2:	e01d      	b.n	8008230 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d107      	bne.n	800820e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2204      	movs	r2, #4
 8008202:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800820c:	e010      	b.n	8008230 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	429a      	cmp	r2, r3
 8008216:	d107      	bne.n	8008228 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2208      	movs	r2, #8
 800821c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008226:	e003      	b.n	8008230 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff ffb4 	bl	800819e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	771a      	strb	r2, [r3, #28]
}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008250:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	429a      	cmp	r2, r3
 800825a:	d103      	bne.n	8008264 <TIM_DMACaptureCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	771a      	strb	r2, [r3, #28]
 8008262:	e019      	b.n	8008298 <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d103      	bne.n	8008276 <TIM_DMACaptureCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2202      	movs	r2, #2
 8008272:	771a      	strb	r2, [r3, #28]
 8008274:	e010      	b.n	8008298 <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d103      	bne.n	8008288 <TIM_DMACaptureCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2204      	movs	r2, #4
 8008284:	771a      	strb	r2, [r3, #28]
 8008286:	e007      	b.n	8008298 <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	429a      	cmp	r2, r3
 8008290:	d102      	bne.n	8008298 <TIM_DMACaptureCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2208      	movs	r2, #8
 8008296:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff ff6c 	bl	8008176 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	771a      	strb	r2, [r3, #28]
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d103      	bne.n	80082cc <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	771a      	strb	r2, [r3, #28]
 80082ca:	e019      	b.n	8008300 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d103      	bne.n	80082de <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2202      	movs	r2, #2
 80082da:	771a      	strb	r2, [r3, #28]
 80082dc:	e010      	b.n	8008300 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d103      	bne.n	80082f0 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2204      	movs	r2, #4
 80082ec:	771a      	strb	r2, [r3, #28]
 80082ee:	e007      	b.n	8008300 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d102      	bne.n	8008300 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2208      	movs	r2, #8
 80082fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff ff42 	bl	800818a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	771a      	strb	r2, [r3, #28]
}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a6b      	ldr	r2, [pc, #428]	@ (80084d4 <TIM_Base_SetConfig+0x1c0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d02b      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a6a      	ldr	r2, [pc, #424]	@ (80084d8 <TIM_Base_SetConfig+0x1c4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d027      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800833a:	d023      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008342:	d01f      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a65      	ldr	r2, [pc, #404]	@ (80084dc <TIM_Base_SetConfig+0x1c8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d01b      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a64      	ldr	r2, [pc, #400]	@ (80084e0 <TIM_Base_SetConfig+0x1cc>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d017      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a63      	ldr	r2, [pc, #396]	@ (80084e4 <TIM_Base_SetConfig+0x1d0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d013      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a62      	ldr	r2, [pc, #392]	@ (80084e8 <TIM_Base_SetConfig+0x1d4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00f      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a61      	ldr	r2, [pc, #388]	@ (80084ec <TIM_Base_SetConfig+0x1d8>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00b      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a60      	ldr	r2, [pc, #384]	@ (80084f0 <TIM_Base_SetConfig+0x1dc>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d007      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a5f      	ldr	r2, [pc, #380]	@ (80084f4 <TIM_Base_SetConfig+0x1e0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_Base_SetConfig+0x70>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a5e      	ldr	r2, [pc, #376]	@ (80084f8 <TIM_Base_SetConfig+0x1e4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d108      	bne.n	8008396 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800838a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a4e      	ldr	r2, [pc, #312]	@ (80084d4 <TIM_Base_SetConfig+0x1c0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d043      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a4d      	ldr	r2, [pc, #308]	@ (80084d8 <TIM_Base_SetConfig+0x1c4>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d03f      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ac:	d03b      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083b4:	d037      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a48      	ldr	r2, [pc, #288]	@ (80084dc <TIM_Base_SetConfig+0x1c8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d033      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a47      	ldr	r2, [pc, #284]	@ (80084e0 <TIM_Base_SetConfig+0x1cc>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d02f      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a46      	ldr	r2, [pc, #280]	@ (80084e4 <TIM_Base_SetConfig+0x1d0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d02b      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a45      	ldr	r2, [pc, #276]	@ (80084e8 <TIM_Base_SetConfig+0x1d4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d027      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a44      	ldr	r2, [pc, #272]	@ (80084ec <TIM_Base_SetConfig+0x1d8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d023      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a43      	ldr	r2, [pc, #268]	@ (80084f0 <TIM_Base_SetConfig+0x1dc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01f      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a42      	ldr	r2, [pc, #264]	@ (80084f4 <TIM_Base_SetConfig+0x1e0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01b      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a41      	ldr	r2, [pc, #260]	@ (80084f8 <TIM_Base_SetConfig+0x1e4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d017      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a40      	ldr	r2, [pc, #256]	@ (80084fc <TIM_Base_SetConfig+0x1e8>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d013      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a3f      	ldr	r2, [pc, #252]	@ (8008500 <TIM_Base_SetConfig+0x1ec>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00f      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a3e      	ldr	r2, [pc, #248]	@ (8008504 <TIM_Base_SetConfig+0x1f0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00b      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a3d      	ldr	r2, [pc, #244]	@ (8008508 <TIM_Base_SetConfig+0x1f4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d007      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a3c      	ldr	r2, [pc, #240]	@ (800850c <TIM_Base_SetConfig+0x1f8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d003      	beq.n	8008426 <TIM_Base_SetConfig+0x112>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a3b      	ldr	r2, [pc, #236]	@ (8008510 <TIM_Base_SetConfig+0x1fc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d108      	bne.n	8008438 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800842c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a1e      	ldr	r2, [pc, #120]	@ (80084d4 <TIM_Base_SetConfig+0x1c0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d023      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1d      	ldr	r2, [pc, #116]	@ (80084d8 <TIM_Base_SetConfig+0x1c4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d01f      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a22      	ldr	r2, [pc, #136]	@ (80084f4 <TIM_Base_SetConfig+0x1e0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d01b      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a21      	ldr	r2, [pc, #132]	@ (80084f8 <TIM_Base_SetConfig+0x1e4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d017      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a20      	ldr	r2, [pc, #128]	@ (80084fc <TIM_Base_SetConfig+0x1e8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d013      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a1f      	ldr	r2, [pc, #124]	@ (8008500 <TIM_Base_SetConfig+0x1ec>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00f      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a1e      	ldr	r2, [pc, #120]	@ (8008504 <TIM_Base_SetConfig+0x1f0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00b      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a1d      	ldr	r2, [pc, #116]	@ (8008508 <TIM_Base_SetConfig+0x1f4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d007      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a1c      	ldr	r2, [pc, #112]	@ (800850c <TIM_Base_SetConfig+0x1f8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_Base_SetConfig+0x192>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008510 <TIM_Base_SetConfig+0x1fc>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d103      	bne.n	80084ae <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f043 0204 	orr.w	r2, r3, #4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	601a      	str	r2, [r3, #0]
}
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	40012c00 	.word	0x40012c00
 80084d8:	50012c00 	.word	0x50012c00
 80084dc:	40000400 	.word	0x40000400
 80084e0:	50000400 	.word	0x50000400
 80084e4:	40000800 	.word	0x40000800
 80084e8:	50000800 	.word	0x50000800
 80084ec:	40000c00 	.word	0x40000c00
 80084f0:	50000c00 	.word	0x50000c00
 80084f4:	40013400 	.word	0x40013400
 80084f8:	50013400 	.word	0x50013400
 80084fc:	40014000 	.word	0x40014000
 8008500:	50014000 	.word	0x50014000
 8008504:	40014400 	.word	0x40014400
 8008508:	50014400 	.word	0x50014400
 800850c:	40014800 	.word	0x40014800
 8008510:	50014800 	.word	0x50014800

08008514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	f023 0201 	bic.w	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0302 	bic.w	r3, r3, #2
 8008560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a40      	ldr	r2, [pc, #256]	@ (8008670 <TIM_OC1_SetConfig+0x15c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d023      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a3f      	ldr	r2, [pc, #252]	@ (8008674 <TIM_OC1_SetConfig+0x160>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d01f      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a3e      	ldr	r2, [pc, #248]	@ (8008678 <TIM_OC1_SetConfig+0x164>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d01b      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a3d      	ldr	r2, [pc, #244]	@ (800867c <TIM_OC1_SetConfig+0x168>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d017      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a3c      	ldr	r2, [pc, #240]	@ (8008680 <TIM_OC1_SetConfig+0x16c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d013      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a3b      	ldr	r2, [pc, #236]	@ (8008684 <TIM_OC1_SetConfig+0x170>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00f      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a3a      	ldr	r2, [pc, #232]	@ (8008688 <TIM_OC1_SetConfig+0x174>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00b      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a39      	ldr	r2, [pc, #228]	@ (800868c <TIM_OC1_SetConfig+0x178>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d007      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a38      	ldr	r2, [pc, #224]	@ (8008690 <TIM_OC1_SetConfig+0x17c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_OC1_SetConfig+0xa8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a37      	ldr	r2, [pc, #220]	@ (8008694 <TIM_OC1_SetConfig+0x180>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d10c      	bne.n	80085d6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f023 0308 	bic.w	r3, r3, #8
 80085c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f023 0304 	bic.w	r3, r3, #4
 80085d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a25      	ldr	r2, [pc, #148]	@ (8008670 <TIM_OC1_SetConfig+0x15c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d023      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a24      	ldr	r2, [pc, #144]	@ (8008674 <TIM_OC1_SetConfig+0x160>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d01f      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a23      	ldr	r2, [pc, #140]	@ (8008678 <TIM_OC1_SetConfig+0x164>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d01b      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a22      	ldr	r2, [pc, #136]	@ (800867c <TIM_OC1_SetConfig+0x168>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d017      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a21      	ldr	r2, [pc, #132]	@ (8008680 <TIM_OC1_SetConfig+0x16c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d013      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a20      	ldr	r2, [pc, #128]	@ (8008684 <TIM_OC1_SetConfig+0x170>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d00f      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a1f      	ldr	r2, [pc, #124]	@ (8008688 <TIM_OC1_SetConfig+0x174>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00b      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a1e      	ldr	r2, [pc, #120]	@ (800868c <TIM_OC1_SetConfig+0x178>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d007      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a1d      	ldr	r2, [pc, #116]	@ (8008690 <TIM_OC1_SetConfig+0x17c>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d003      	beq.n	8008626 <TIM_OC1_SetConfig+0x112>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a1c      	ldr	r2, [pc, #112]	@ (8008694 <TIM_OC1_SetConfig+0x180>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d111      	bne.n	800864a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800862c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	621a      	str	r2, [r3, #32]
}
 8008664:	bf00      	nop
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	40012c00 	.word	0x40012c00
 8008674:	50012c00 	.word	0x50012c00
 8008678:	40013400 	.word	0x40013400
 800867c:	50013400 	.word	0x50013400
 8008680:	40014000 	.word	0x40014000
 8008684:	50014000 	.word	0x50014000
 8008688:	40014400 	.word	0x40014400
 800868c:	50014400 	.word	0x50014400
 8008690:	40014800 	.word	0x40014800
 8008694:	50014800 	.word	0x50014800

08008698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	f023 0210 	bic.w	r2, r3, #16
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	021b      	lsls	r3, r3, #8
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f023 0320 	bic.w	r3, r3, #32
 80086e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a36      	ldr	r2, [pc, #216]	@ (80087d0 <TIM_OC2_SetConfig+0x138>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00b      	beq.n	8008714 <TIM_OC2_SetConfig+0x7c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a35      	ldr	r2, [pc, #212]	@ (80087d4 <TIM_OC2_SetConfig+0x13c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_OC2_SetConfig+0x7c>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a34      	ldr	r2, [pc, #208]	@ (80087d8 <TIM_OC2_SetConfig+0x140>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_OC2_SetConfig+0x7c>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a33      	ldr	r2, [pc, #204]	@ (80087dc <TIM_OC2_SetConfig+0x144>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10d      	bne.n	8008730 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800871a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800872e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a27      	ldr	r2, [pc, #156]	@ (80087d0 <TIM_OC2_SetConfig+0x138>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d023      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a26      	ldr	r2, [pc, #152]	@ (80087d4 <TIM_OC2_SetConfig+0x13c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d01f      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a25      	ldr	r2, [pc, #148]	@ (80087d8 <TIM_OC2_SetConfig+0x140>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d01b      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a24      	ldr	r2, [pc, #144]	@ (80087dc <TIM_OC2_SetConfig+0x144>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d017      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a23      	ldr	r2, [pc, #140]	@ (80087e0 <TIM_OC2_SetConfig+0x148>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d013      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a22      	ldr	r2, [pc, #136]	@ (80087e4 <TIM_OC2_SetConfig+0x14c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00f      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a21      	ldr	r2, [pc, #132]	@ (80087e8 <TIM_OC2_SetConfig+0x150>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a20      	ldr	r2, [pc, #128]	@ (80087ec <TIM_OC2_SetConfig+0x154>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a1f      	ldr	r2, [pc, #124]	@ (80087f0 <TIM_OC2_SetConfig+0x158>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC2_SetConfig+0xe8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1e      	ldr	r2, [pc, #120]	@ (80087f4 <TIM_OC2_SetConfig+0x15c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d113      	bne.n	80087a8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	50012c00 	.word	0x50012c00
 80087d8:	40013400 	.word	0x40013400
 80087dc:	50013400 	.word	0x50013400
 80087e0:	40014000 	.word	0x40014000
 80087e4:	50014000 	.word	0x50014000
 80087e8:	40014400 	.word	0x40014400
 80087ec:	50014400 	.word	0x50014400
 80087f0:	40014800 	.word	0x40014800
 80087f4:	50014800 	.word	0x50014800

080087f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800882a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a35      	ldr	r2, [pc, #212]	@ (800892c <TIM_OC3_SetConfig+0x134>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00b      	beq.n	8008872 <TIM_OC3_SetConfig+0x7a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a34      	ldr	r2, [pc, #208]	@ (8008930 <TIM_OC3_SetConfig+0x138>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d007      	beq.n	8008872 <TIM_OC3_SetConfig+0x7a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a33      	ldr	r2, [pc, #204]	@ (8008934 <TIM_OC3_SetConfig+0x13c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d003      	beq.n	8008872 <TIM_OC3_SetConfig+0x7a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a32      	ldr	r2, [pc, #200]	@ (8008938 <TIM_OC3_SetConfig+0x140>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d10d      	bne.n	800888e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800888c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a26      	ldr	r2, [pc, #152]	@ (800892c <TIM_OC3_SetConfig+0x134>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d023      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a25      	ldr	r2, [pc, #148]	@ (8008930 <TIM_OC3_SetConfig+0x138>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d01f      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a24      	ldr	r2, [pc, #144]	@ (8008934 <TIM_OC3_SetConfig+0x13c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01b      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a23      	ldr	r2, [pc, #140]	@ (8008938 <TIM_OC3_SetConfig+0x140>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d017      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a22      	ldr	r2, [pc, #136]	@ (800893c <TIM_OC3_SetConfig+0x144>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a21      	ldr	r2, [pc, #132]	@ (8008940 <TIM_OC3_SetConfig+0x148>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d00f      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a20      	ldr	r2, [pc, #128]	@ (8008944 <TIM_OC3_SetConfig+0x14c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00b      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008948 <TIM_OC3_SetConfig+0x150>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d007      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a1e      	ldr	r2, [pc, #120]	@ (800894c <TIM_OC3_SetConfig+0x154>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d003      	beq.n	80088de <TIM_OC3_SetConfig+0xe6>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008950 <TIM_OC3_SetConfig+0x158>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d113      	bne.n	8008906 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	621a      	str	r2, [r3, #32]
}
 8008920:	bf00      	nop
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	40012c00 	.word	0x40012c00
 8008930:	50012c00 	.word	0x50012c00
 8008934:	40013400 	.word	0x40013400
 8008938:	50013400 	.word	0x50013400
 800893c:	40014000 	.word	0x40014000
 8008940:	50014000 	.word	0x50014000
 8008944:	40014400 	.word	0x40014400
 8008948:	50014400 	.word	0x50014400
 800894c:	40014800 	.word	0x40014800
 8008950:	50014800 	.word	0x50014800

08008954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a1b      	ldr	r3, [r3, #32]
 8008968:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800898e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	031b      	lsls	r3, r3, #12
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a36      	ldr	r2, [pc, #216]	@ (8008a8c <TIM_OC4_SetConfig+0x138>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00b      	beq.n	80089d0 <TIM_OC4_SetConfig+0x7c>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a35      	ldr	r2, [pc, #212]	@ (8008a90 <TIM_OC4_SetConfig+0x13c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d007      	beq.n	80089d0 <TIM_OC4_SetConfig+0x7c>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a34      	ldr	r2, [pc, #208]	@ (8008a94 <TIM_OC4_SetConfig+0x140>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d003      	beq.n	80089d0 <TIM_OC4_SetConfig+0x7c>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a33      	ldr	r2, [pc, #204]	@ (8008a98 <TIM_OC4_SetConfig+0x144>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d10d      	bne.n	80089ec <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	031b      	lsls	r3, r3, #12
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a27      	ldr	r2, [pc, #156]	@ (8008a8c <TIM_OC4_SetConfig+0x138>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d023      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a26      	ldr	r2, [pc, #152]	@ (8008a90 <TIM_OC4_SetConfig+0x13c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d01f      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a25      	ldr	r2, [pc, #148]	@ (8008a94 <TIM_OC4_SetConfig+0x140>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d01b      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a24      	ldr	r2, [pc, #144]	@ (8008a98 <TIM_OC4_SetConfig+0x144>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d017      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a23      	ldr	r2, [pc, #140]	@ (8008a9c <TIM_OC4_SetConfig+0x148>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d013      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a22      	ldr	r2, [pc, #136]	@ (8008aa0 <TIM_OC4_SetConfig+0x14c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00f      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a21      	ldr	r2, [pc, #132]	@ (8008aa4 <TIM_OC4_SetConfig+0x150>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00b      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a20      	ldr	r2, [pc, #128]	@ (8008aa8 <TIM_OC4_SetConfig+0x154>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d007      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <TIM_OC4_SetConfig+0x158>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_OC4_SetConfig+0xe8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab0 <TIM_OC4_SetConfig+0x15c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d113      	bne.n	8008a64 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	019b      	lsls	r3, r3, #6
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	019b      	lsls	r3, r3, #6
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	621a      	str	r2, [r3, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	40012c00 	.word	0x40012c00
 8008a90:	50012c00 	.word	0x50012c00
 8008a94:	40013400 	.word	0x40013400
 8008a98:	50013400 	.word	0x50013400
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	50014000 	.word	0x50014000
 8008aa4:	40014400 	.word	0x40014400
 8008aa8:	50014400 	.word	0x50014400
 8008aac:	40014800 	.word	0x40014800
 8008ab0:	50014800 	.word	0x50014800

08008ab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008af8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a21      	ldr	r2, [pc, #132]	@ (8008b90 <TIM_OC5_SetConfig+0xdc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d023      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a20      	ldr	r2, [pc, #128]	@ (8008b94 <TIM_OC5_SetConfig+0xe0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d01f      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a1f      	ldr	r2, [pc, #124]	@ (8008b98 <TIM_OC5_SetConfig+0xe4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d01b      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a1e      	ldr	r2, [pc, #120]	@ (8008b9c <TIM_OC5_SetConfig+0xe8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d017      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <TIM_OC5_SetConfig+0xec>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d013      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba4 <TIM_OC5_SetConfig+0xf0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00f      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba8 <TIM_OC5_SetConfig+0xf4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d00b      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1a      	ldr	r2, [pc, #104]	@ (8008bac <TIM_OC5_SetConfig+0xf8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d007      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a19      	ldr	r2, [pc, #100]	@ (8008bb0 <TIM_OC5_SetConfig+0xfc>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d003      	beq.n	8008b56 <TIM_OC5_SetConfig+0xa2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a18      	ldr	r2, [pc, #96]	@ (8008bb4 <TIM_OC5_SetConfig+0x100>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d109      	bne.n	8008b6a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	621a      	str	r2, [r3, #32]
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	40012c00 	.word	0x40012c00
 8008b94:	50012c00 	.word	0x50012c00
 8008b98:	40013400 	.word	0x40013400
 8008b9c:	50013400 	.word	0x50013400
 8008ba0:	40014000 	.word	0x40014000
 8008ba4:	50014000 	.word	0x50014000
 8008ba8:	40014400 	.word	0x40014400
 8008bac:	50014400 	.word	0x50014400
 8008bb0:	40014800 	.word	0x40014800
 8008bb4:	50014800 	.word	0x50014800

08008bb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	021b      	lsls	r3, r3, #8
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	051b      	lsls	r3, r3, #20
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a22      	ldr	r2, [pc, #136]	@ (8008c98 <TIM_OC6_SetConfig+0xe0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d023      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a21      	ldr	r2, [pc, #132]	@ (8008c9c <TIM_OC6_SetConfig+0xe4>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d01f      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a20      	ldr	r2, [pc, #128]	@ (8008ca0 <TIM_OC6_SetConfig+0xe8>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d01b      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca4 <TIM_OC6_SetConfig+0xec>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d017      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ca8 <TIM_OC6_SetConfig+0xf0>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d013      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1d      	ldr	r2, [pc, #116]	@ (8008cac <TIM_OC6_SetConfig+0xf4>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00f      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb0 <TIM_OC6_SetConfig+0xf8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00b      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1b      	ldr	r2, [pc, #108]	@ (8008cb4 <TIM_OC6_SetConfig+0xfc>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d007      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb8 <TIM_OC6_SetConfig+0x100>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d003      	beq.n	8008c5c <TIM_OC6_SetConfig+0xa4>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a19      	ldr	r2, [pc, #100]	@ (8008cbc <TIM_OC6_SetConfig+0x104>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d109      	bne.n	8008c70 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	029b      	lsls	r3, r3, #10
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	621a      	str	r2, [r3, #32]
}
 8008c8a:	bf00      	nop
 8008c8c:	371c      	adds	r7, #28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40012c00 	.word	0x40012c00
 8008c9c:	50012c00 	.word	0x50012c00
 8008ca0:	40013400 	.word	0x40013400
 8008ca4:	50013400 	.word	0x50013400
 8008ca8:	40014000 	.word	0x40014000
 8008cac:	50014000 	.word	0x50014000
 8008cb0:	40014400 	.word	0x40014400
 8008cb4:	50014400 	.word	0x50014400
 8008cb8:	40014800 	.word	0x40014800
 8008cbc:	50014800 	.word	0x50014800

08008cc0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cf2:	f023 0307 	bic.w	r3, r3, #7
 8008cf6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8008e48 <TIM_SlaveTimer_SetConfig+0x188>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	f000 8092 	beq.w	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d16:	4a4c      	ldr	r2, [pc, #304]	@ (8008e48 <TIM_SlaveTimer_SetConfig+0x188>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	f200 808b 	bhi.w	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d1e:	4a4b      	ldr	r2, [pc, #300]	@ (8008e4c <TIM_SlaveTimer_SetConfig+0x18c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	f000 808a 	beq.w	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d26:	4a49      	ldr	r2, [pc, #292]	@ (8008e4c <TIM_SlaveTimer_SetConfig+0x18c>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	f200 8083 	bhi.w	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d2e:	4a48      	ldr	r2, [pc, #288]	@ (8008e50 <TIM_SlaveTimer_SetConfig+0x190>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	f000 8082 	beq.w	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d36:	4a46      	ldr	r2, [pc, #280]	@ (8008e50 <TIM_SlaveTimer_SetConfig+0x190>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d87b      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d3c:	4a45      	ldr	r2, [pc, #276]	@ (8008e54 <TIM_SlaveTimer_SetConfig+0x194>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d07b      	beq.n	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d42:	4a44      	ldr	r2, [pc, #272]	@ (8008e54 <TIM_SlaveTimer_SetConfig+0x194>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d875      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d4c:	d075      	beq.n	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d4e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d52:	d86f      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d58:	d06f      	beq.n	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d5e:	d869      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d60:	2b70      	cmp	r3, #112	@ 0x70
 8008d62:	d01a      	beq.n	8008d9a <TIM_SlaveTimer_SetConfig+0xda>
 8008d64:	2b70      	cmp	r3, #112	@ 0x70
 8008d66:	d865      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d68:	2b60      	cmp	r3, #96	@ 0x60
 8008d6a:	d059      	beq.n	8008e20 <TIM_SlaveTimer_SetConfig+0x160>
 8008d6c:	2b60      	cmp	r3, #96	@ 0x60
 8008d6e:	d861      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d70:	2b50      	cmp	r3, #80	@ 0x50
 8008d72:	d04b      	beq.n	8008e0c <TIM_SlaveTimer_SetConfig+0x14c>
 8008d74:	2b50      	cmp	r3, #80	@ 0x50
 8008d76:	d85d      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d78:	2b40      	cmp	r3, #64	@ 0x40
 8008d7a:	d019      	beq.n	8008db0 <TIM_SlaveTimer_SetConfig+0xf0>
 8008d7c:	2b40      	cmp	r3, #64	@ 0x40
 8008d7e:	d859      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d80:	2b30      	cmp	r3, #48	@ 0x30
 8008d82:	d05a      	beq.n	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d84:	2b30      	cmp	r3, #48	@ 0x30
 8008d86:	d855      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d056      	beq.n	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d851      	bhi.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d052      	beq.n	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d94:	2b10      	cmp	r3, #16
 8008d96:	d050      	beq.n	8008e3a <TIM_SlaveTimer_SetConfig+0x17a>
 8008d98:	e04c      	b.n	8008e34 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008daa:	f000 fa1d 	bl	80091e8 <TIM_ETR_SetConfig>
      break;
 8008dae:	e045      	b.n	8008e3c <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b05      	cmp	r3, #5
 8008db6:	d004      	beq.n	8008dc2 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008dbc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008dc0:	d101      	bne.n	8008dc6 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e03b      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6a1a      	ldr	r2, [r3, #32]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0201 	bic.w	r2, r2, #1
 8008ddc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	621a      	str	r2, [r3, #32]
      break;
 8008e0a:	e017      	b.n	8008e3c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f000 f8b3 	bl	8008f84 <TIM_TI1_ConfigInputStage>
      break;
 8008e1e:	e00d      	b.n	8008e3c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	f000 f915 	bl	800905c <TIM_TI2_ConfigInputStage>
      break;
 8008e32:	e003      	b.n	8008e3c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	e000      	b.n	8008e3c <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8008e3a:	bf00      	nop
  }

  return status;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	00100070 	.word	0x00100070
 8008e4c:	00100040 	.word	0x00100040
 8008e50:	00100030 	.word	0x00100030
 8008e54:	00100020 	.word	0x00100020

08008e58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	f023 0201 	bic.w	r2, r3, #1
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4a34      	ldr	r2, [pc, #208]	@ (8008f54 <TIM_TI1_SetConfig+0xfc>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d033      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4a33      	ldr	r2, [pc, #204]	@ (8008f58 <TIM_TI1_SetConfig+0x100>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d02f      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e94:	d02b      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e9c:	d027      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8008f5c <TIM_TI1_SetConfig+0x104>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d023      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8008f60 <TIM_TI1_SetConfig+0x108>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d01f      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8008f64 <TIM_TI1_SetConfig+0x10c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d01b      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8008f68 <TIM_TI1_SetConfig+0x110>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d017      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8008f6c <TIM_TI1_SetConfig+0x114>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4a29      	ldr	r2, [pc, #164]	@ (8008f70 <TIM_TI1_SetConfig+0x118>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00f      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4a28      	ldr	r2, [pc, #160]	@ (8008f74 <TIM_TI1_SetConfig+0x11c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00b      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4a27      	ldr	r2, [pc, #156]	@ (8008f78 <TIM_TI1_SetConfig+0x120>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d007      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4a26      	ldr	r2, [pc, #152]	@ (8008f7c <TIM_TI1_SetConfig+0x124>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d003      	beq.n	8008eee <TIM_TI1_SetConfig+0x96>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a25      	ldr	r2, [pc, #148]	@ (8008f80 <TIM_TI1_SetConfig+0x128>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d101      	bne.n	8008ef2 <TIM_TI1_SetConfig+0x9a>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <TIM_TI1_SetConfig+0x9c>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	e003      	b.n	8008f12 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f043 0301 	orr.w	r3, r3, #1
 8008f10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f023 030a 	bic.w	r3, r3, #10
 8008f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f003 030a 	and.w	r3, r3, #10
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	621a      	str	r2, [r3, #32]
}
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40012c00 	.word	0x40012c00
 8008f58:	50012c00 	.word	0x50012c00
 8008f5c:	40000400 	.word	0x40000400
 8008f60:	50000400 	.word	0x50000400
 8008f64:	40000800 	.word	0x40000800
 8008f68:	50000800 	.word	0x50000800
 8008f6c:	40000c00 	.word	0x40000c00
 8008f70:	50000c00 	.word	0x50000c00
 8008f74:	40013400 	.word	0x40013400
 8008f78:	50013400 	.word	0x50013400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	50014000 	.word	0x50014000

08008f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f023 0201 	bic.w	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f023 030a 	bic.w	r3, r3, #10
 8008fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	621a      	str	r2, [r3, #32]
}
 8008fd6:	bf00      	nop
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b087      	sub	sp, #28
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
 8008fee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	f023 0210 	bic.w	r2, r3, #16
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800900e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	031b      	lsls	r3, r3, #12
 8009026:	b29b      	uxth	r3, r3
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	4313      	orrs	r3, r2
 800902c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009034:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	621a      	str	r2, [r3, #32]
}
 8009050:	bf00      	nop
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	f023 0210 	bic.w	r2, r3, #16
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	031b      	lsls	r3, r3, #12
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009098:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	011b      	lsls	r3, r3, #4
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	621a      	str	r2, [r3, #32]
}
 80090b0:	bf00      	nop
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f023 0303 	bic.w	r3, r3, #3
 80090e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800910c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	621a      	str	r2, [r3, #32]
}
 8009128:	bf00      	nop
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009160:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009172:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	031b      	lsls	r3, r3, #12
 8009178:	b29b      	uxth	r3, r3
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4313      	orrs	r3, r2
 800917e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009186:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	031b      	lsls	r3, r3, #12
 800918c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	4313      	orrs	r3, r2
 8009194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	621a      	str	r2, [r3, #32]
}
 80091a2:	bf00      	nop
 80091a4:	371c      	adds	r7, #28
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80091c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f043 0307 	orr.w	r3, r3, #7
 80091d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	609a      	str	r2, [r3, #8]
}
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	021a      	lsls	r2, r3, #8
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	431a      	orrs	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4313      	orrs	r3, r2
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	bf00      	nop
 800921e:	371c      	adds	r7, #28
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f003 031f 	and.w	r3, r3, #31
 800923a:	2201      	movs	r2, #1
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a1a      	ldr	r2, [r3, #32]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	43db      	mvns	r3, r3
 800924a:	401a      	ands	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a1a      	ldr	r2, [r3, #32]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f003 031f 	and.w	r3, r3, #31
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	fa01 f303 	lsl.w	r3, r1, r3
 8009260:	431a      	orrs	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	621a      	str	r2, [r3, #32]
}
 8009266:	bf00      	nop
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
	...

08009274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009288:	2302      	movs	r3, #2
 800928a:	e097      	b.n	80093bc <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a45      	ldr	r2, [pc, #276]	@ (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00e      	beq.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a44      	ldr	r2, [pc, #272]	@ (80093cc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d009      	beq.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a42      	ldr	r2, [pc, #264]	@ (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d004      	beq.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a41      	ldr	r2, [pc, #260]	@ (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d108      	bne.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80092ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a2f      	ldr	r2, [pc, #188]	@ (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d040      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a2e      	ldr	r2, [pc, #184]	@ (80093cc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d03b      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009320:	d036      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932a:	d031      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a29      	ldr	r2, [pc, #164]	@ (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d02c      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a28      	ldr	r2, [pc, #160]	@ (80093dc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d027      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a26      	ldr	r2, [pc, #152]	@ (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d022      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a25      	ldr	r2, [pc, #148]	@ (80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d01d      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a23      	ldr	r2, [pc, #140]	@ (80093e8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d018      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a22      	ldr	r2, [pc, #136]	@ (80093ec <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d013      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a18      	ldr	r2, [pc, #96]	@ (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00e      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a17      	ldr	r2, [pc, #92]	@ (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d009      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a1b      	ldr	r2, [pc, #108]	@ (80093f0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d004      	beq.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a1a      	ldr	r2, [pc, #104]	@ (80093f4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d10c      	bne.n	80093aa <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	40012c00 	.word	0x40012c00
 80093cc:	50012c00 	.word	0x50012c00
 80093d0:	40013400 	.word	0x40013400
 80093d4:	50013400 	.word	0x50013400
 80093d8:	40000400 	.word	0x40000400
 80093dc:	50000400 	.word	0x50000400
 80093e0:	40000800 	.word	0x40000800
 80093e4:	50000800 	.word	0x50000800
 80093e8:	40000c00 	.word	0x40000c00
 80093ec:	50000c00 	.word	0x50000c00
 80093f0:	40014000 	.word	0x40014000
 80093f4:	50014000 	.word	0x50014000

080093f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009410:	2302      	movs	r3, #2
 8009412:	e07d      	b.n	8009510 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	4313      	orrs	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4313      	orrs	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a1e      	ldr	r2, [pc, #120]	@ (800951c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d00e      	beq.n	80094c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009520 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d009      	beq.n	80094c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009524 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d004      	beq.n	80094c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a1a      	ldr	r2, [pc, #104]	@ (8009528 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d11c      	bne.n	80094fe <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ce:	051b      	lsls	r3, r3, #20
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	40012c00 	.word	0x40012c00
 8009520:	50012c00 	.word	0x50012c00
 8009524:	40013400 	.word	0x40013400
 8009528:	50013400 	.word	0x50013400

0800952c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e042      	b.n	80095c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009544:	2b00      	cmp	r3, #0
 8009546:	d106      	bne.n	8009556 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f83b 	bl	80095cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2224      	movs	r2, #36	@ 0x24
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 0201 	bic.w	r2, r2, #1
 800956c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fa58 	bl	8009a2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f8bd 	bl	80096fc <UART_SetConfig>
 8009582:	4603      	mov	r3, r0
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e01b      	b.n	80095c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800959a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0201 	orr.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fad7 	bl	8009b70 <UART_CheckIdleState>
 80095c2:	4603      	mov	r3, r0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08a      	sub	sp, #40	@ 0x28
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d17b      	bne.n	80096f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <HAL_UART_Transmit+0x26>
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e074      	b.n	80096f4 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2221      	movs	r2, #33	@ 0x21
 8009616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800961a:	f7f8 fead 	bl	8002378 <HAL_GetTick>
 800961e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	88fa      	ldrh	r2, [r7, #6]
 8009624:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	88fa      	ldrh	r2, [r7, #6]
 800962c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009638:	d108      	bne.n	800964c <HAL_UART_Transmit+0x6c>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d104      	bne.n	800964c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	61bb      	str	r3, [r7, #24]
 800964a:	e003      	b.n	8009654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009650:	2300      	movs	r3, #0
 8009652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009654:	e030      	b.n	80096b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2200      	movs	r2, #0
 800965e:	2180      	movs	r1, #128	@ 0x80
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 fb2f 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e03d      	b.n	80096f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10b      	bne.n	8009696 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800968c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	3302      	adds	r3, #2
 8009692:	61bb      	str	r3, [r7, #24]
 8009694:	e007      	b.n	80096a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	781a      	ldrb	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	3301      	adds	r3, #1
 80096a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096be:	b29b      	uxth	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1c8      	bne.n	8009656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2200      	movs	r2, #0
 80096cc:	2140      	movs	r1, #64	@ 0x40
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 faf8 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d005      	beq.n	80096e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e006      	b.n	80096f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2220      	movs	r2, #32
 80096ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	e000      	b.n	80096f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80096f2:	2302      	movs	r3, #2
  }
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009700:	b094      	sub	sp, #80	@ 0x50
 8009702:	af00      	add	r7, sp, #0
 8009704:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800970c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	4b9b      	ldr	r3, [pc, #620]	@ (8009980 <UART_SetConfig+0x284>)
 8009712:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	431a      	orrs	r2, r3
 800971e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	431a      	orrs	r2, r3
 8009724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	4313      	orrs	r3, r2
 800972a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4994      	ldr	r1, [pc, #592]	@ (8009984 <UART_SetConfig+0x288>)
 8009734:	4019      	ands	r1, r3
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800973c:	430b      	orrs	r3, r1
 800973e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	68d9      	ldr	r1, [r3, #12]
 800974e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	ea40 0301 	orr.w	r3, r0, r1
 8009756:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800975e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	4b87      	ldr	r3, [pc, #540]	@ (8009980 <UART_SetConfig+0x284>)
 8009764:	429a      	cmp	r2, r3
 8009766:	d009      	beq.n	800977c <UART_SetConfig+0x80>
 8009768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	4b86      	ldr	r3, [pc, #536]	@ (8009988 <UART_SetConfig+0x28c>)
 800976e:	429a      	cmp	r2, r3
 8009770:	d004      	beq.n	800977c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009774:	6a1a      	ldr	r2, [r3, #32]
 8009776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009778:	4313      	orrs	r3, r2
 800977a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009786:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800978a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009790:	430b      	orrs	r3, r1
 8009792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979a:	f023 000f 	bic.w	r0, r3, #15
 800979e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80097a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	ea40 0301 	orr.w	r3, r0, r1
 80097aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	4b76      	ldr	r3, [pc, #472]	@ (800998c <UART_SetConfig+0x290>)
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d102      	bne.n	80097bc <UART_SetConfig+0xc0>
 80097b6:	2301      	movs	r3, #1
 80097b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ba:	e021      	b.n	8009800 <UART_SetConfig+0x104>
 80097bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	4b73      	ldr	r3, [pc, #460]	@ (8009990 <UART_SetConfig+0x294>)
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d102      	bne.n	80097cc <UART_SetConfig+0xd0>
 80097c6:	2304      	movs	r3, #4
 80097c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ca:	e019      	b.n	8009800 <UART_SetConfig+0x104>
 80097cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	4b70      	ldr	r3, [pc, #448]	@ (8009994 <UART_SetConfig+0x298>)
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d102      	bne.n	80097dc <UART_SetConfig+0xe0>
 80097d6:	2308      	movs	r3, #8
 80097d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097da:	e011      	b.n	8009800 <UART_SetConfig+0x104>
 80097dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	4b6d      	ldr	r3, [pc, #436]	@ (8009998 <UART_SetConfig+0x29c>)
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d102      	bne.n	80097ec <UART_SetConfig+0xf0>
 80097e6:	2310      	movs	r3, #16
 80097e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ea:	e009      	b.n	8009800 <UART_SetConfig+0x104>
 80097ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	4b63      	ldr	r3, [pc, #396]	@ (8009980 <UART_SetConfig+0x284>)
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d102      	bne.n	80097fc <UART_SetConfig+0x100>
 80097f6:	2320      	movs	r3, #32
 80097f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097fa:	e001      	b.n	8009800 <UART_SetConfig+0x104>
 80097fc:	2300      	movs	r3, #0
 80097fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4b5e      	ldr	r3, [pc, #376]	@ (8009980 <UART_SetConfig+0x284>)
 8009806:	429a      	cmp	r2, r3
 8009808:	d004      	beq.n	8009814 <UART_SetConfig+0x118>
 800980a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b5e      	ldr	r3, [pc, #376]	@ (8009988 <UART_SetConfig+0x28c>)
 8009810:	429a      	cmp	r2, r3
 8009812:	d172      	bne.n	80098fa <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009816:	2200      	movs	r2, #0
 8009818:	623b      	str	r3, [r7, #32]
 800981a:	627a      	str	r2, [r7, #36]	@ 0x24
 800981c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009820:	f7fc fb38 	bl	8005e94 <HAL_RCCEx_GetPeriphCLKFreq>
 8009824:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80e7 	beq.w	80099fc <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009832:	4a5a      	ldr	r2, [pc, #360]	@ (800999c <UART_SetConfig+0x2a0>)
 8009834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009838:	461a      	mov	r2, r3
 800983a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800983c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009840:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	4413      	add	r3, r2
 800984c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800984e:	429a      	cmp	r2, r3
 8009850:	d305      	bcc.n	800985e <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800985a:	429a      	cmp	r2, r3
 800985c:	d903      	bls.n	8009866 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009864:	e048      	b.n	80098f8 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009868:	2200      	movs	r2, #0
 800986a:	61bb      	str	r3, [r7, #24]
 800986c:	61fa      	str	r2, [r7, #28]
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009872:	4a4a      	ldr	r2, [pc, #296]	@ (800999c <UART_SetConfig+0x2a0>)
 8009874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009878:	b29b      	uxth	r3, r3
 800987a:	2200      	movs	r2, #0
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	617a      	str	r2, [r7, #20]
 8009880:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009884:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009888:	f7f6 fcf6 	bl	8000278 <__aeabi_uldivmod>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4610      	mov	r0, r2
 8009892:	4619      	mov	r1, r3
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	020b      	lsls	r3, r1, #8
 800989e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098a2:	0202      	lsls	r2, r0, #8
 80098a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098a6:	6849      	ldr	r1, [r1, #4]
 80098a8:	0849      	lsrs	r1, r1, #1
 80098aa:	2000      	movs	r0, #0
 80098ac:	460c      	mov	r4, r1
 80098ae:	4605      	mov	r5, r0
 80098b0:	eb12 0804 	adds.w	r8, r2, r4
 80098b4:	eb43 0905 	adc.w	r9, r3, r5
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	60bb      	str	r3, [r7, #8]
 80098c0:	60fa      	str	r2, [r7, #12]
 80098c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098c6:	4640      	mov	r0, r8
 80098c8:	4649      	mov	r1, r9
 80098ca:	f7f6 fcd5 	bl	8000278 <__aeabi_uldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4613      	mov	r3, r2
 80098d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098dc:	d308      	bcc.n	80098f0 <UART_SetConfig+0x1f4>
 80098de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098e4:	d204      	bcs.n	80098f0 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098ec:	60da      	str	r2, [r3, #12]
 80098ee:	e003      	b.n	80098f8 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80098f6:	e081      	b.n	80099fc <UART_SetConfig+0x300>
 80098f8:	e080      	b.n	80099fc <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009902:	d14d      	bne.n	80099a0 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009906:	2200      	movs	r2, #0
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009910:	f7fc fac0 	bl	8005e94 <HAL_RCCEx_GetPeriphCLKFreq>
 8009914:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	d06f      	beq.n	80099fc <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800991c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009920:	4a1e      	ldr	r2, [pc, #120]	@ (800999c <UART_SetConfig+0x2a0>)
 8009922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009926:	461a      	mov	r2, r3
 8009928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800992a:	fbb3 f3f2 	udiv	r3, r3, r2
 800992e:	005a      	lsls	r2, r3, #1
 8009930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	085b      	lsrs	r3, r3, #1
 8009936:	441a      	add	r2, r3
 8009938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009944:	2b0f      	cmp	r3, #15
 8009946:	d916      	bls.n	8009976 <UART_SetConfig+0x27a>
 8009948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800994a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800994e:	d212      	bcs.n	8009976 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009952:	b29b      	uxth	r3, r3
 8009954:	f023 030f 	bic.w	r3, r3, #15
 8009958:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800995a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995c:	085b      	lsrs	r3, r3, #1
 800995e:	b29b      	uxth	r3, r3
 8009960:	f003 0307 	and.w	r3, r3, #7
 8009964:	b29a      	uxth	r2, r3
 8009966:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009968:	4313      	orrs	r3, r2
 800996a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800996c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009972:	60da      	str	r2, [r3, #12]
 8009974:	e042      	b.n	80099fc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800997c:	e03e      	b.n	80099fc <UART_SetConfig+0x300>
 800997e:	bf00      	nop
 8009980:	46002400 	.word	0x46002400
 8009984:	cfff69f3 	.word	0xcfff69f3
 8009988:	56002400 	.word	0x56002400
 800998c:	40013800 	.word	0x40013800
 8009990:	40004800 	.word	0x40004800
 8009994:	40004c00 	.word	0x40004c00
 8009998:	40005000 	.word	0x40005000
 800999c:	0800ae0c 	.word	0x0800ae0c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80099a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a2:	2200      	movs	r2, #0
 80099a4:	469a      	mov	sl, r3
 80099a6:	4693      	mov	fp, r2
 80099a8:	4650      	mov	r0, sl
 80099aa:	4659      	mov	r1, fp
 80099ac:	f7fc fa72 	bl	8005e94 <HAL_RCCEx_GetPeriphCLKFreq>
 80099b0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80099b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d021      	beq.n	80099fc <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009a28 <UART_SetConfig+0x32c>)
 80099be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c2:	461a      	mov	r2, r3
 80099c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	085b      	lsrs	r3, r3, #1
 80099d0:	441a      	add	r2, r3
 80099d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099de:	2b0f      	cmp	r3, #15
 80099e0:	d909      	bls.n	80099f6 <UART_SetConfig+0x2fa>
 80099e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099e8:	d205      	bcs.n	80099f6 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60da      	str	r2, [r3, #12]
 80099f4:	e002      	b.n	80099fc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	2201      	movs	r2, #1
 8009a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a06:	2201      	movs	r2, #1
 8009a08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	2200      	movs	r2, #0
 8009a10:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a14:	2200      	movs	r2, #0
 8009a16:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3750      	adds	r7, #80	@ 0x50
 8009a20:	46bd      	mov	sp, r7
 8009a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a26:	bf00      	nop
 8009a28:	0800ae0c 	.word	0x0800ae0c

08009a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a38:	f003 0308 	and.w	r3, r3, #8
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00a      	beq.n	8009a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	430a      	orrs	r2, r1
 8009a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00a      	beq.n	8009a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac0:	f003 0310 	and.w	r3, r3, #16
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00a      	beq.n	8009ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01a      	beq.n	8009b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b2a:	d10a      	bne.n	8009b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	605a      	str	r2, [r3, #4]
  }
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b098      	sub	sp, #96	@ 0x60
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b80:	f7f8 fbfa 	bl	8002378 <HAL_GetTick>
 8009b84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0308 	and.w	r3, r3, #8
 8009b90:	2b08      	cmp	r3, #8
 8009b92:	d12f      	bne.n	8009bf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f88e 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d022      	beq.n	8009bf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb6:	e853 3f00 	ldrex	r3, [r3]
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e6      	bne.n	8009bae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e063      	b.n	8009cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d149      	bne.n	8009c96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f857 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d03c      	beq.n	8009c96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	623b      	str	r3, [r7, #32]
   return(result);
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e6      	bne.n	8009c1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3308      	adds	r3, #8
 8009c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 0301 	bic.w	r3, r3, #1
 8009c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c6e:	61fa      	str	r2, [r7, #28]
 8009c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	69b9      	ldr	r1, [r7, #24]
 8009c74:	69fa      	ldr	r2, [r7, #28]
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e5      	bne.n	8009c4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e012      	b.n	8009cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3758      	adds	r7, #88	@ 0x58
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cd4:	e04f      	b.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d04b      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cde:	f7f8 fb4b 	bl	8002378 <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d302      	bcc.n	8009cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e04e      	b.n	8009d96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d037      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b80      	cmp	r3, #128	@ 0x80
 8009d0a:	d034      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b40      	cmp	r3, #64	@ 0x40
 8009d10:	d031      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d110      	bne.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2208      	movs	r2, #8
 8009d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 f838 	bl	8009d9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2208      	movs	r2, #8
 8009d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e029      	b.n	8009d96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d50:	d111      	bne.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 f81e 	bl	8009d9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e00f      	b.n	8009d96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	bf0c      	ite	eq
 8009d86:	2301      	moveq	r3, #1
 8009d88:	2300      	movne	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d0a0      	beq.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b095      	sub	sp, #84	@ 0x54
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009dca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e6      	bne.n	8009da6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3308      	adds	r3, #8
 8009dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dee:	f023 0301 	bic.w	r3, r3, #1
 8009df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3308      	adds	r3, #8
 8009dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e3      	bne.n	8009dd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d118      	bne.n	8009e4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	f023 0310 	bic.w	r3, r3, #16
 8009e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e36:	61bb      	str	r3, [r7, #24]
 8009e38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6979      	ldr	r1, [r7, #20]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	613b      	str	r3, [r7, #16]
   return(result);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e5e:	bf00      	nop
 8009e60:	3754      	adds	r7, #84	@ 0x54
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
	...

08009e6c <std>:
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	b510      	push	{r4, lr}
 8009e70:	4604      	mov	r4, r0
 8009e72:	6083      	str	r3, [r0, #8]
 8009e74:	8181      	strh	r1, [r0, #12]
 8009e76:	4619      	mov	r1, r3
 8009e78:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e7a:	81c2      	strh	r2, [r0, #14]
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	6183      	str	r3, [r0, #24]
 8009e80:	e9c0 3300 	strd	r3, r3, [r0]
 8009e84:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e88:	305c      	adds	r0, #92	@ 0x5c
 8009e8a:	f000 f906 	bl	800a09a <memset>
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <std+0x58>)
 8009e90:	6224      	str	r4, [r4, #32]
 8009e92:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e94:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec8 <std+0x5c>)
 8009e96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e98:	4b0c      	ldr	r3, [pc, #48]	@ (8009ecc <std+0x60>)
 8009e9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed0 <std+0x64>)
 8009e9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed4 <std+0x68>)
 8009ea2:	429c      	cmp	r4, r3
 8009ea4:	d006      	beq.n	8009eb4 <std+0x48>
 8009ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009eaa:	4294      	cmp	r4, r2
 8009eac:	d002      	beq.n	8009eb4 <std+0x48>
 8009eae:	33d0      	adds	r3, #208	@ 0xd0
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	d105      	bne.n	8009ec0 <std+0x54>
 8009eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ebc:	f000 b966 	b.w	800a18c <__retarget_lock_init_recursive>
 8009ec0:	bd10      	pop	{r4, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0800a015 	.word	0x0800a015
 8009ec8:	0800a037 	.word	0x0800a037
 8009ecc:	0800a06f 	.word	0x0800a06f
 8009ed0:	0800a093 	.word	0x0800a093
 8009ed4:	200007a0 	.word	0x200007a0

08009ed8 <stdio_exit_handler>:
 8009ed8:	4a02      	ldr	r2, [pc, #8]	@ (8009ee4 <stdio_exit_handler+0xc>)
 8009eda:	4903      	ldr	r1, [pc, #12]	@ (8009ee8 <stdio_exit_handler+0x10>)
 8009edc:	4803      	ldr	r0, [pc, #12]	@ (8009eec <stdio_exit_handler+0x14>)
 8009ede:	f000 b869 	b.w	8009fb4 <_fwalk_sglue>
 8009ee2:	bf00      	nop
 8009ee4:	20000020 	.word	0x20000020
 8009ee8:	0800aa35 	.word	0x0800aa35
 8009eec:	20000030 	.word	0x20000030

08009ef0 <cleanup_stdio>:
 8009ef0:	6841      	ldr	r1, [r0, #4]
 8009ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8009f24 <cleanup_stdio+0x34>)
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	4604      	mov	r4, r0
 8009efa:	d001      	beq.n	8009f00 <cleanup_stdio+0x10>
 8009efc:	f000 fd9a 	bl	800aa34 <_fflush_r>
 8009f00:	68a1      	ldr	r1, [r4, #8]
 8009f02:	4b09      	ldr	r3, [pc, #36]	@ (8009f28 <cleanup_stdio+0x38>)
 8009f04:	4299      	cmp	r1, r3
 8009f06:	d002      	beq.n	8009f0e <cleanup_stdio+0x1e>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 fd93 	bl	800aa34 <_fflush_r>
 8009f0e:	68e1      	ldr	r1, [r4, #12]
 8009f10:	4b06      	ldr	r3, [pc, #24]	@ (8009f2c <cleanup_stdio+0x3c>)
 8009f12:	4299      	cmp	r1, r3
 8009f14:	d004      	beq.n	8009f20 <cleanup_stdio+0x30>
 8009f16:	4620      	mov	r0, r4
 8009f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f1c:	f000 bd8a 	b.w	800aa34 <_fflush_r>
 8009f20:	bd10      	pop	{r4, pc}
 8009f22:	bf00      	nop
 8009f24:	200007a0 	.word	0x200007a0
 8009f28:	20000808 	.word	0x20000808
 8009f2c:	20000870 	.word	0x20000870

08009f30 <global_stdio_init.part.0>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	4b0b      	ldr	r3, [pc, #44]	@ (8009f60 <global_stdio_init.part.0+0x30>)
 8009f34:	2104      	movs	r1, #4
 8009f36:	4c0b      	ldr	r4, [pc, #44]	@ (8009f64 <global_stdio_init.part.0+0x34>)
 8009f38:	4a0b      	ldr	r2, [pc, #44]	@ (8009f68 <global_stdio_init.part.0+0x38>)
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f7ff ff94 	bl	8009e6c <std>
 8009f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f48:	2201      	movs	r2, #1
 8009f4a:	2109      	movs	r1, #9
 8009f4c:	f7ff ff8e 	bl	8009e6c <std>
 8009f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f54:	2202      	movs	r2, #2
 8009f56:	2112      	movs	r1, #18
 8009f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f5c:	f7ff bf86 	b.w	8009e6c <std>
 8009f60:	200008d8 	.word	0x200008d8
 8009f64:	200007a0 	.word	0x200007a0
 8009f68:	08009ed9 	.word	0x08009ed9

08009f6c <__sfp_lock_acquire>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	@ (8009f74 <__sfp_lock_acquire+0x8>)
 8009f6e:	f000 b90e 	b.w	800a18e <__retarget_lock_acquire_recursive>
 8009f72:	bf00      	nop
 8009f74:	200008e1 	.word	0x200008e1

08009f78 <__sfp_lock_release>:
 8009f78:	4801      	ldr	r0, [pc, #4]	@ (8009f80 <__sfp_lock_release+0x8>)
 8009f7a:	f000 b909 	b.w	800a190 <__retarget_lock_release_recursive>
 8009f7e:	bf00      	nop
 8009f80:	200008e1 	.word	0x200008e1

08009f84 <__sinit>:
 8009f84:	b510      	push	{r4, lr}
 8009f86:	4604      	mov	r4, r0
 8009f88:	f7ff fff0 	bl	8009f6c <__sfp_lock_acquire>
 8009f8c:	6a23      	ldr	r3, [r4, #32]
 8009f8e:	b11b      	cbz	r3, 8009f98 <__sinit+0x14>
 8009f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f94:	f7ff bff0 	b.w	8009f78 <__sfp_lock_release>
 8009f98:	4b04      	ldr	r3, [pc, #16]	@ (8009fac <__sinit+0x28>)
 8009f9a:	6223      	str	r3, [r4, #32]
 8009f9c:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <__sinit+0x2c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f5      	bne.n	8009f90 <__sinit+0xc>
 8009fa4:	f7ff ffc4 	bl	8009f30 <global_stdio_init.part.0>
 8009fa8:	e7f2      	b.n	8009f90 <__sinit+0xc>
 8009faa:	bf00      	nop
 8009fac:	08009ef1 	.word	0x08009ef1
 8009fb0:	200008d8 	.word	0x200008d8

08009fb4 <_fwalk_sglue>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	4607      	mov	r7, r0
 8009fba:	4688      	mov	r8, r1
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc8:	d505      	bpl.n	8009fd6 <_fwalk_sglue+0x22>
 8009fca:	6824      	ldr	r4, [r4, #0]
 8009fcc:	2c00      	cmp	r4, #0
 8009fce:	d1f7      	bne.n	8009fc0 <_fwalk_sglue+0xc>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d907      	bls.n	8009fec <_fwalk_sglue+0x38>
 8009fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	d003      	beq.n	8009fec <_fwalk_sglue+0x38>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	47c0      	blx	r8
 8009fea:	4306      	orrs	r6, r0
 8009fec:	3568      	adds	r5, #104	@ 0x68
 8009fee:	e7e9      	b.n	8009fc4 <_fwalk_sglue+0x10>

08009ff0 <iprintf>:
 8009ff0:	b40f      	push	{r0, r1, r2, r3}
 8009ff2:	b507      	push	{r0, r1, r2, lr}
 8009ff4:	4906      	ldr	r1, [pc, #24]	@ (800a010 <iprintf+0x20>)
 8009ff6:	ab04      	add	r3, sp, #16
 8009ff8:	6808      	ldr	r0, [r1, #0]
 8009ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffe:	6881      	ldr	r1, [r0, #8]
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	f000 f9e9 	bl	800a3d8 <_vfiprintf_r>
 800a006:	b003      	add	sp, #12
 800a008:	f85d eb04 	ldr.w	lr, [sp], #4
 800a00c:	b004      	add	sp, #16
 800a00e:	4770      	bx	lr
 800a010:	2000002c 	.word	0x2000002c

0800a014 <__sread>:
 800a014:	b510      	push	{r4, lr}
 800a016:	460c      	mov	r4, r1
 800a018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01c:	f000 f868 	bl	800a0f0 <_read_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	bfab      	itete	ge
 800a024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a026:	89a3      	ldrhlt	r3, [r4, #12]
 800a028:	181b      	addge	r3, r3, r0
 800a02a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a02e:	bfac      	ite	ge
 800a030:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a032:	81a3      	strhlt	r3, [r4, #12]
 800a034:	bd10      	pop	{r4, pc}

0800a036 <__swrite>:
 800a036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a03a:	461f      	mov	r7, r3
 800a03c:	898b      	ldrh	r3, [r1, #12]
 800a03e:	4605      	mov	r5, r0
 800a040:	460c      	mov	r4, r1
 800a042:	05db      	lsls	r3, r3, #23
 800a044:	4616      	mov	r6, r2
 800a046:	d505      	bpl.n	800a054 <__swrite+0x1e>
 800a048:	2302      	movs	r3, #2
 800a04a:	2200      	movs	r2, #0
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	f000 f83c 	bl	800a0cc <_lseek_r>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	4632      	mov	r2, r6
 800a058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a05c:	4628      	mov	r0, r5
 800a05e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	463b      	mov	r3, r7
 800a066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	f000 b853 	b.w	800a114 <_write_r>

0800a06e <__sseek>:
 800a06e:	b510      	push	{r4, lr}
 800a070:	460c      	mov	r4, r1
 800a072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a076:	f000 f829 	bl	800a0cc <_lseek_r>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	bf15      	itete	ne
 800a080:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a08a:	81a3      	strheq	r3, [r4, #12]
 800a08c:	bf18      	it	ne
 800a08e:	81a3      	strhne	r3, [r4, #12]
 800a090:	bd10      	pop	{r4, pc}

0800a092 <__sclose>:
 800a092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a096:	f000 b809 	b.w	800a0ac <_close_r>

0800a09a <memset>:
 800a09a:	4402      	add	r2, r0
 800a09c:	4603      	mov	r3, r0
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d100      	bne.n	800a0a4 <memset+0xa>
 800a0a2:	4770      	bx	lr
 800a0a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a0a8:	e7f9      	b.n	800a09e <memset+0x4>
	...

0800a0ac <_close_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4d05      	ldr	r5, [pc, #20]	@ (800a0c8 <_close_r+0x1c>)
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	4608      	mov	r0, r1
 800a0b6:	602b      	str	r3, [r5, #0]
 800a0b8:	f7f7 fe21 	bl	8001cfe <_close>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d102      	bne.n	800a0c6 <_close_r+0x1a>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	b103      	cbz	r3, 800a0c6 <_close_r+0x1a>
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	200008dc 	.word	0x200008dc

0800a0cc <_lseek_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4d06      	ldr	r5, [pc, #24]	@ (800a0ec <_lseek_r+0x20>)
 800a0d2:	4608      	mov	r0, r1
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	602a      	str	r2, [r5, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f7f7 fe36 	bl	8001d4c <_lseek>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_lseek_r+0x1e>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_lseek_r+0x1e>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	200008dc 	.word	0x200008dc

0800a0f0 <_read_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4d06      	ldr	r5, [pc, #24]	@ (800a110 <_read_r+0x20>)
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f7f7 fdc4 	bl	8001c8c <_read>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_read_r+0x1e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_read_r+0x1e>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	200008dc 	.word	0x200008dc

0800a114 <_write_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4604      	mov	r4, r0
 800a118:	4d06      	ldr	r5, [pc, #24]	@ (800a134 <_write_r+0x20>)
 800a11a:	4608      	mov	r0, r1
 800a11c:	4611      	mov	r1, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	602a      	str	r2, [r5, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	f7f7 fdcf 	bl	8001cc6 <_write>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_write_r+0x1e>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_write_r+0x1e>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	200008dc 	.word	0x200008dc

0800a138 <__errno>:
 800a138:	4b01      	ldr	r3, [pc, #4]	@ (800a140 <__errno+0x8>)
 800a13a:	6818      	ldr	r0, [r3, #0]
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	2000002c 	.word	0x2000002c

0800a144 <__libc_init_array>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	4d0d      	ldr	r5, [pc, #52]	@ (800a17c <__libc_init_array+0x38>)
 800a148:	2600      	movs	r6, #0
 800a14a:	4c0d      	ldr	r4, [pc, #52]	@ (800a180 <__libc_init_array+0x3c>)
 800a14c:	1b64      	subs	r4, r4, r5
 800a14e:	10a4      	asrs	r4, r4, #2
 800a150:	42a6      	cmp	r6, r4
 800a152:	d109      	bne.n	800a168 <__libc_init_array+0x24>
 800a154:	4d0b      	ldr	r5, [pc, #44]	@ (800a184 <__libc_init_array+0x40>)
 800a156:	2600      	movs	r6, #0
 800a158:	4c0b      	ldr	r4, [pc, #44]	@ (800a188 <__libc_init_array+0x44>)
 800a15a:	f000 fdc9 	bl	800acf0 <_init>
 800a15e:	1b64      	subs	r4, r4, r5
 800a160:	10a4      	asrs	r4, r4, #2
 800a162:	42a6      	cmp	r6, r4
 800a164:	d105      	bne.n	800a172 <__libc_init_array+0x2e>
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16c:	3601      	adds	r6, #1
 800a16e:	4798      	blx	r3
 800a170:	e7ee      	b.n	800a150 <__libc_init_array+0xc>
 800a172:	f855 3b04 	ldr.w	r3, [r5], #4
 800a176:	3601      	adds	r6, #1
 800a178:	4798      	blx	r3
 800a17a:	e7f2      	b.n	800a162 <__libc_init_array+0x1e>
 800a17c:	0800ae60 	.word	0x0800ae60
 800a180:	0800ae60 	.word	0x0800ae60
 800a184:	0800ae60 	.word	0x0800ae60
 800a188:	0800ae64 	.word	0x0800ae64

0800a18c <__retarget_lock_init_recursive>:
 800a18c:	4770      	bx	lr

0800a18e <__retarget_lock_acquire_recursive>:
 800a18e:	4770      	bx	lr

0800a190 <__retarget_lock_release_recursive>:
 800a190:	4770      	bx	lr
	...

0800a194 <_free_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4605      	mov	r5, r0
 800a198:	2900      	cmp	r1, #0
 800a19a:	d041      	beq.n	800a220 <_free_r+0x8c>
 800a19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a0:	1f0c      	subs	r4, r1, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	bfb8      	it	lt
 800a1a6:	18e4      	addlt	r4, r4, r3
 800a1a8:	f000 f8e0 	bl	800a36c <__malloc_lock>
 800a1ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a224 <_free_r+0x90>)
 800a1ae:	6813      	ldr	r3, [r2, #0]
 800a1b0:	b933      	cbnz	r3, 800a1c0 <_free_r+0x2c>
 800a1b2:	6063      	str	r3, [r4, #4]
 800a1b4:	6014      	str	r4, [r2, #0]
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1bc:	f000 b8dc 	b.w	800a378 <__malloc_unlock>
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	d908      	bls.n	800a1d6 <_free_r+0x42>
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	1821      	adds	r1, r4, r0
 800a1c8:	428b      	cmp	r3, r1
 800a1ca:	bf01      	itttt	eq
 800a1cc:	6819      	ldreq	r1, [r3, #0]
 800a1ce:	685b      	ldreq	r3, [r3, #4]
 800a1d0:	1809      	addeq	r1, r1, r0
 800a1d2:	6021      	streq	r1, [r4, #0]
 800a1d4:	e7ed      	b.n	800a1b2 <_free_r+0x1e>
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	b10b      	cbz	r3, 800a1e0 <_free_r+0x4c>
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	d9fa      	bls.n	800a1d6 <_free_r+0x42>
 800a1e0:	6811      	ldr	r1, [r2, #0]
 800a1e2:	1850      	adds	r0, r2, r1
 800a1e4:	42a0      	cmp	r0, r4
 800a1e6:	d10b      	bne.n	800a200 <_free_r+0x6c>
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	4401      	add	r1, r0
 800a1ec:	1850      	adds	r0, r2, r1
 800a1ee:	6011      	str	r1, [r2, #0]
 800a1f0:	4283      	cmp	r3, r0
 800a1f2:	d1e0      	bne.n	800a1b6 <_free_r+0x22>
 800a1f4:	6818      	ldr	r0, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4408      	add	r0, r1
 800a1fa:	6053      	str	r3, [r2, #4]
 800a1fc:	6010      	str	r0, [r2, #0]
 800a1fe:	e7da      	b.n	800a1b6 <_free_r+0x22>
 800a200:	d902      	bls.n	800a208 <_free_r+0x74>
 800a202:	230c      	movs	r3, #12
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	e7d6      	b.n	800a1b6 <_free_r+0x22>
 800a208:	6820      	ldr	r0, [r4, #0]
 800a20a:	1821      	adds	r1, r4, r0
 800a20c:	428b      	cmp	r3, r1
 800a20e:	bf02      	ittt	eq
 800a210:	6819      	ldreq	r1, [r3, #0]
 800a212:	685b      	ldreq	r3, [r3, #4]
 800a214:	1809      	addeq	r1, r1, r0
 800a216:	6063      	str	r3, [r4, #4]
 800a218:	bf08      	it	eq
 800a21a:	6021      	streq	r1, [r4, #0]
 800a21c:	6054      	str	r4, [r2, #4]
 800a21e:	e7ca      	b.n	800a1b6 <_free_r+0x22>
 800a220:	bd38      	pop	{r3, r4, r5, pc}
 800a222:	bf00      	nop
 800a224:	200008e8 	.word	0x200008e8

0800a228 <sbrk_aligned>:
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	4e0f      	ldr	r6, [pc, #60]	@ (800a268 <sbrk_aligned+0x40>)
 800a22c:	460c      	mov	r4, r1
 800a22e:	4605      	mov	r5, r0
 800a230:	6831      	ldr	r1, [r6, #0]
 800a232:	b911      	cbnz	r1, 800a23a <sbrk_aligned+0x12>
 800a234:	f000 fcba 	bl	800abac <_sbrk_r>
 800a238:	6030      	str	r0, [r6, #0]
 800a23a:	4621      	mov	r1, r4
 800a23c:	4628      	mov	r0, r5
 800a23e:	f000 fcb5 	bl	800abac <_sbrk_r>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	d103      	bne.n	800a24e <sbrk_aligned+0x26>
 800a246:	f04f 34ff 	mov.w	r4, #4294967295
 800a24a:	4620      	mov	r0, r4
 800a24c:	bd70      	pop	{r4, r5, r6, pc}
 800a24e:	1cc4      	adds	r4, r0, #3
 800a250:	f024 0403 	bic.w	r4, r4, #3
 800a254:	42a0      	cmp	r0, r4
 800a256:	d0f8      	beq.n	800a24a <sbrk_aligned+0x22>
 800a258:	1a21      	subs	r1, r4, r0
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 fca6 	bl	800abac <_sbrk_r>
 800a260:	3001      	adds	r0, #1
 800a262:	d1f2      	bne.n	800a24a <sbrk_aligned+0x22>
 800a264:	e7ef      	b.n	800a246 <sbrk_aligned+0x1e>
 800a266:	bf00      	nop
 800a268:	200008e4 	.word	0x200008e4

0800a26c <_malloc_r>:
 800a26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a270:	1ccd      	adds	r5, r1, #3
 800a272:	4606      	mov	r6, r0
 800a274:	f025 0503 	bic.w	r5, r5, #3
 800a278:	3508      	adds	r5, #8
 800a27a:	2d0c      	cmp	r5, #12
 800a27c:	bf38      	it	cc
 800a27e:	250c      	movcc	r5, #12
 800a280:	2d00      	cmp	r5, #0
 800a282:	db01      	blt.n	800a288 <_malloc_r+0x1c>
 800a284:	42a9      	cmp	r1, r5
 800a286:	d904      	bls.n	800a292 <_malloc_r+0x26>
 800a288:	230c      	movs	r3, #12
 800a28a:	6033      	str	r3, [r6, #0]
 800a28c:	2000      	movs	r0, #0
 800a28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a368 <_malloc_r+0xfc>
 800a296:	f000 f869 	bl	800a36c <__malloc_lock>
 800a29a:	f8d8 3000 	ldr.w	r3, [r8]
 800a29e:	461c      	mov	r4, r3
 800a2a0:	bb44      	cbnz	r4, 800a2f4 <_malloc_r+0x88>
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f7ff ffbf 	bl	800a228 <sbrk_aligned>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	d158      	bne.n	800a362 <_malloc_r+0xf6>
 800a2b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a2b4:	4627      	mov	r7, r4
 800a2b6:	2f00      	cmp	r7, #0
 800a2b8:	d143      	bne.n	800a342 <_malloc_r+0xd6>
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	d04b      	beq.n	800a356 <_malloc_r+0xea>
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	eb04 0903 	add.w	r9, r4, r3
 800a2c8:	f000 fc70 	bl	800abac <_sbrk_r>
 800a2cc:	4581      	cmp	r9, r0
 800a2ce:	d142      	bne.n	800a356 <_malloc_r+0xea>
 800a2d0:	6821      	ldr	r1, [r4, #0]
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	1a6d      	subs	r5, r5, r1
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7ff ffa6 	bl	800a228 <sbrk_aligned>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d03a      	beq.n	800a356 <_malloc_r+0xea>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	442b      	add	r3, r5
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	bb62      	cbnz	r2, 800a348 <_malloc_r+0xdc>
 800a2ee:	f8c8 7000 	str.w	r7, [r8]
 800a2f2:	e00f      	b.n	800a314 <_malloc_r+0xa8>
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	1b52      	subs	r2, r2, r5
 800a2f8:	d420      	bmi.n	800a33c <_malloc_r+0xd0>
 800a2fa:	2a0b      	cmp	r2, #11
 800a2fc:	d917      	bls.n	800a32e <_malloc_r+0xc2>
 800a2fe:	1961      	adds	r1, r4, r5
 800a300:	42a3      	cmp	r3, r4
 800a302:	6025      	str	r5, [r4, #0]
 800a304:	bf18      	it	ne
 800a306:	6059      	strne	r1, [r3, #4]
 800a308:	6863      	ldr	r3, [r4, #4]
 800a30a:	bf08      	it	eq
 800a30c:	f8c8 1000 	streq.w	r1, [r8]
 800a310:	5162      	str	r2, [r4, r5]
 800a312:	604b      	str	r3, [r1, #4]
 800a314:	4630      	mov	r0, r6
 800a316:	f000 f82f 	bl	800a378 <__malloc_unlock>
 800a31a:	f104 000b 	add.w	r0, r4, #11
 800a31e:	1d23      	adds	r3, r4, #4
 800a320:	f020 0007 	bic.w	r0, r0, #7
 800a324:	1ac2      	subs	r2, r0, r3
 800a326:	bf1c      	itt	ne
 800a328:	1a1b      	subne	r3, r3, r0
 800a32a:	50a3      	strne	r3, [r4, r2]
 800a32c:	e7af      	b.n	800a28e <_malloc_r+0x22>
 800a32e:	6862      	ldr	r2, [r4, #4]
 800a330:	42a3      	cmp	r3, r4
 800a332:	bf0c      	ite	eq
 800a334:	f8c8 2000 	streq.w	r2, [r8]
 800a338:	605a      	strne	r2, [r3, #4]
 800a33a:	e7eb      	b.n	800a314 <_malloc_r+0xa8>
 800a33c:	4623      	mov	r3, r4
 800a33e:	6864      	ldr	r4, [r4, #4]
 800a340:	e7ae      	b.n	800a2a0 <_malloc_r+0x34>
 800a342:	463c      	mov	r4, r7
 800a344:	687f      	ldr	r7, [r7, #4]
 800a346:	e7b6      	b.n	800a2b6 <_malloc_r+0x4a>
 800a348:	461a      	mov	r2, r3
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	d1fb      	bne.n	800a348 <_malloc_r+0xdc>
 800a350:	2300      	movs	r3, #0
 800a352:	6053      	str	r3, [r2, #4]
 800a354:	e7de      	b.n	800a314 <_malloc_r+0xa8>
 800a356:	230c      	movs	r3, #12
 800a358:	4630      	mov	r0, r6
 800a35a:	6033      	str	r3, [r6, #0]
 800a35c:	f000 f80c 	bl	800a378 <__malloc_unlock>
 800a360:	e794      	b.n	800a28c <_malloc_r+0x20>
 800a362:	6005      	str	r5, [r0, #0]
 800a364:	e7d6      	b.n	800a314 <_malloc_r+0xa8>
 800a366:	bf00      	nop
 800a368:	200008e8 	.word	0x200008e8

0800a36c <__malloc_lock>:
 800a36c:	4801      	ldr	r0, [pc, #4]	@ (800a374 <__malloc_lock+0x8>)
 800a36e:	f7ff bf0e 	b.w	800a18e <__retarget_lock_acquire_recursive>
 800a372:	bf00      	nop
 800a374:	200008e0 	.word	0x200008e0

0800a378 <__malloc_unlock>:
 800a378:	4801      	ldr	r0, [pc, #4]	@ (800a380 <__malloc_unlock+0x8>)
 800a37a:	f7ff bf09 	b.w	800a190 <__retarget_lock_release_recursive>
 800a37e:	bf00      	nop
 800a380:	200008e0 	.word	0x200008e0

0800a384 <__sfputc_r>:
 800a384:	6893      	ldr	r3, [r2, #8]
 800a386:	3b01      	subs	r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	6093      	str	r3, [r2, #8]
 800a38c:	b410      	push	{r4}
 800a38e:	da08      	bge.n	800a3a2 <__sfputc_r+0x1e>
 800a390:	6994      	ldr	r4, [r2, #24]
 800a392:	42a3      	cmp	r3, r4
 800a394:	db01      	blt.n	800a39a <__sfputc_r+0x16>
 800a396:	290a      	cmp	r1, #10
 800a398:	d103      	bne.n	800a3a2 <__sfputc_r+0x1e>
 800a39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a39e:	f000 bb71 	b.w	800aa84 <__swbuf_r>
 800a3a2:	6813      	ldr	r3, [r2, #0]
 800a3a4:	1c58      	adds	r0, r3, #1
 800a3a6:	6010      	str	r0, [r2, #0]
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	7019      	strb	r1, [r3, #0]
 800a3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <__sfputs_r>:
 800a3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	460f      	mov	r7, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	18d5      	adds	r5, r2, r3
 800a3bc:	42ac      	cmp	r4, r5
 800a3be:	d101      	bne.n	800a3c4 <__sfputs_r+0x12>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e007      	b.n	800a3d4 <__sfputs_r+0x22>
 800a3c4:	463a      	mov	r2, r7
 800a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ffda 	bl	800a384 <__sfputc_r>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d1f3      	bne.n	800a3bc <__sfputs_r+0xa>
 800a3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3d8 <_vfiprintf_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	460d      	mov	r5, r1
 800a3de:	b09d      	sub	sp, #116	@ 0x74
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	4698      	mov	r8, r3
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	b118      	cbz	r0, 800a3f0 <_vfiprintf_r+0x18>
 800a3e8:	6a03      	ldr	r3, [r0, #32]
 800a3ea:	b90b      	cbnz	r3, 800a3f0 <_vfiprintf_r+0x18>
 800a3ec:	f7ff fdca 	bl	8009f84 <__sinit>
 800a3f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3f2:	07d9      	lsls	r1, r3, #31
 800a3f4:	d405      	bmi.n	800a402 <_vfiprintf_r+0x2a>
 800a3f6:	89ab      	ldrh	r3, [r5, #12]
 800a3f8:	059a      	lsls	r2, r3, #22
 800a3fa:	d402      	bmi.n	800a402 <_vfiprintf_r+0x2a>
 800a3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3fe:	f7ff fec6 	bl	800a18e <__retarget_lock_acquire_recursive>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	071b      	lsls	r3, r3, #28
 800a406:	d501      	bpl.n	800a40c <_vfiprintf_r+0x34>
 800a408:	692b      	ldr	r3, [r5, #16]
 800a40a:	b99b      	cbnz	r3, 800a434 <_vfiprintf_r+0x5c>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4630      	mov	r0, r6
 800a410:	f000 fb76 	bl	800ab00 <__swsetup_r>
 800a414:	b170      	cbz	r0, 800a434 <_vfiprintf_r+0x5c>
 800a416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a418:	07dc      	lsls	r4, r3, #31
 800a41a:	d504      	bpl.n	800a426 <_vfiprintf_r+0x4e>
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	b01d      	add	sp, #116	@ 0x74
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	0598      	lsls	r0, r3, #22
 800a42a:	d4f7      	bmi.n	800a41c <_vfiprintf_r+0x44>
 800a42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a42e:	f7ff feaf 	bl	800a190 <__retarget_lock_release_recursive>
 800a432:	e7f3      	b.n	800a41c <_vfiprintf_r+0x44>
 800a434:	2300      	movs	r3, #0
 800a436:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43a:	f04f 0901 	mov.w	r9, #1
 800a43e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a5f4 <_vfiprintf_r+0x21c>
 800a442:	9309      	str	r3, [sp, #36]	@ 0x24
 800a444:	2320      	movs	r3, #32
 800a446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a44a:	2330      	movs	r3, #48	@ 0x30
 800a44c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a450:	4623      	mov	r3, r4
 800a452:	469a      	mov	sl, r3
 800a454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a458:	b10a      	cbz	r2, 800a45e <_vfiprintf_r+0x86>
 800a45a:	2a25      	cmp	r2, #37	@ 0x25
 800a45c:	d1f9      	bne.n	800a452 <_vfiprintf_r+0x7a>
 800a45e:	ebba 0b04 	subs.w	fp, sl, r4
 800a462:	d00b      	beq.n	800a47c <_vfiprintf_r+0xa4>
 800a464:	465b      	mov	r3, fp
 800a466:	4622      	mov	r2, r4
 800a468:	4629      	mov	r1, r5
 800a46a:	4630      	mov	r0, r6
 800a46c:	f7ff ffa1 	bl	800a3b2 <__sfputs_r>
 800a470:	3001      	adds	r0, #1
 800a472:	f000 80a7 	beq.w	800a5c4 <_vfiprintf_r+0x1ec>
 800a476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a478:	445a      	add	r2, fp
 800a47a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a47c:	f89a 3000 	ldrb.w	r3, [sl]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 809f 	beq.w	800a5c4 <_vfiprintf_r+0x1ec>
 800a486:	2300      	movs	r3, #0
 800a488:	f04f 32ff 	mov.w	r2, #4294967295
 800a48c:	f10a 0a01 	add.w	sl, sl, #1
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a498:	931a      	str	r3, [sp, #104]	@ 0x68
 800a49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49e:	4654      	mov	r4, sl
 800a4a0:	2205      	movs	r2, #5
 800a4a2:	4854      	ldr	r0, [pc, #336]	@ (800a5f4 <_vfiprintf_r+0x21c>)
 800a4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a8:	f000 fb90 	bl	800abcc <memchr>
 800a4ac:	9a04      	ldr	r2, [sp, #16]
 800a4ae:	b9d8      	cbnz	r0, 800a4e8 <_vfiprintf_r+0x110>
 800a4b0:	06d1      	lsls	r1, r2, #27
 800a4b2:	bf44      	itt	mi
 800a4b4:	2320      	movmi	r3, #32
 800a4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4ba:	0713      	lsls	r3, r2, #28
 800a4bc:	bf44      	itt	mi
 800a4be:	232b      	movmi	r3, #43	@ 0x2b
 800a4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ca:	d015      	beq.n	800a4f8 <_vfiprintf_r+0x120>
 800a4cc:	9a07      	ldr	r2, [sp, #28]
 800a4ce:	4654      	mov	r4, sl
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	f04f 0c0a 	mov.w	ip, #10
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4dc:	3b30      	subs	r3, #48	@ 0x30
 800a4de:	2b09      	cmp	r3, #9
 800a4e0:	d94b      	bls.n	800a57a <_vfiprintf_r+0x1a2>
 800a4e2:	b1b0      	cbz	r0, 800a512 <_vfiprintf_r+0x13a>
 800a4e4:	9207      	str	r2, [sp, #28]
 800a4e6:	e014      	b.n	800a512 <_vfiprintf_r+0x13a>
 800a4e8:	eba0 0308 	sub.w	r3, r0, r8
 800a4ec:	46a2      	mov	sl, r4
 800a4ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	e7d2      	b.n	800a49e <_vfiprintf_r+0xc6>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	1d19      	adds	r1, r3, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	9103      	str	r1, [sp, #12]
 800a502:	bfbb      	ittet	lt
 800a504:	425b      	neglt	r3, r3
 800a506:	f042 0202 	orrlt.w	r2, r2, #2
 800a50a:	9307      	strge	r3, [sp, #28]
 800a50c:	9307      	strlt	r3, [sp, #28]
 800a50e:	bfb8      	it	lt
 800a510:	9204      	strlt	r2, [sp, #16]
 800a512:	7823      	ldrb	r3, [r4, #0]
 800a514:	2b2e      	cmp	r3, #46	@ 0x2e
 800a516:	d10a      	bne.n	800a52e <_vfiprintf_r+0x156>
 800a518:	7863      	ldrb	r3, [r4, #1]
 800a51a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a51c:	d132      	bne.n	800a584 <_vfiprintf_r+0x1ac>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	3402      	adds	r4, #2
 800a522:	1d1a      	adds	r2, r3, #4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a52a:	9203      	str	r2, [sp, #12]
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a604 <_vfiprintf_r+0x22c>
 800a532:	2203      	movs	r2, #3
 800a534:	7821      	ldrb	r1, [r4, #0]
 800a536:	4650      	mov	r0, sl
 800a538:	f000 fb48 	bl	800abcc <memchr>
 800a53c:	b138      	cbz	r0, 800a54e <_vfiprintf_r+0x176>
 800a53e:	eba0 000a 	sub.w	r0, r0, sl
 800a542:	2240      	movs	r2, #64	@ 0x40
 800a544:	9b04      	ldr	r3, [sp, #16]
 800a546:	3401      	adds	r4, #1
 800a548:	4082      	lsls	r2, r0
 800a54a:	4313      	orrs	r3, r2
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	2206      	movs	r2, #6
 800a554:	4828      	ldr	r0, [pc, #160]	@ (800a5f8 <_vfiprintf_r+0x220>)
 800a556:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a55a:	f000 fb37 	bl	800abcc <memchr>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d03f      	beq.n	800a5e2 <_vfiprintf_r+0x20a>
 800a562:	4b26      	ldr	r3, [pc, #152]	@ (800a5fc <_vfiprintf_r+0x224>)
 800a564:	bb1b      	cbnz	r3, 800a5ae <_vfiprintf_r+0x1d6>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	3307      	adds	r3, #7
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	3308      	adds	r3, #8
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a574:	443b      	add	r3, r7
 800a576:	9309      	str	r3, [sp, #36]	@ 0x24
 800a578:	e76a      	b.n	800a450 <_vfiprintf_r+0x78>
 800a57a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a57e:	460c      	mov	r4, r1
 800a580:	2001      	movs	r0, #1
 800a582:	e7a8      	b.n	800a4d6 <_vfiprintf_r+0xfe>
 800a584:	2300      	movs	r3, #0
 800a586:	3401      	adds	r4, #1
 800a588:	f04f 0c0a 	mov.w	ip, #10
 800a58c:	4619      	mov	r1, r3
 800a58e:	9305      	str	r3, [sp, #20]
 800a590:	4620      	mov	r0, r4
 800a592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a596:	3a30      	subs	r2, #48	@ 0x30
 800a598:	2a09      	cmp	r2, #9
 800a59a:	d903      	bls.n	800a5a4 <_vfiprintf_r+0x1cc>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0c6      	beq.n	800a52e <_vfiprintf_r+0x156>
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	e7c4      	b.n	800a52e <_vfiprintf_r+0x156>
 800a5a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e7f0      	b.n	800a590 <_vfiprintf_r+0x1b8>
 800a5ae:	ab03      	add	r3, sp, #12
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	a904      	add	r1, sp, #16
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	4b11      	ldr	r3, [pc, #68]	@ (800a600 <_vfiprintf_r+0x228>)
 800a5ba:	f3af 8000 	nop.w
 800a5be:	4607      	mov	r7, r0
 800a5c0:	1c78      	adds	r0, r7, #1
 800a5c2:	d1d6      	bne.n	800a572 <_vfiprintf_r+0x19a>
 800a5c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5c6:	07d9      	lsls	r1, r3, #31
 800a5c8:	d405      	bmi.n	800a5d6 <_vfiprintf_r+0x1fe>
 800a5ca:	89ab      	ldrh	r3, [r5, #12]
 800a5cc:	059a      	lsls	r2, r3, #22
 800a5ce:	d402      	bmi.n	800a5d6 <_vfiprintf_r+0x1fe>
 800a5d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5d2:	f7ff fddd 	bl	800a190 <__retarget_lock_release_recursive>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	065b      	lsls	r3, r3, #25
 800a5da:	f53f af1f 	bmi.w	800a41c <_vfiprintf_r+0x44>
 800a5de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5e0:	e71e      	b.n	800a420 <_vfiprintf_r+0x48>
 800a5e2:	ab03      	add	r3, sp, #12
 800a5e4:	462a      	mov	r2, r5
 800a5e6:	a904      	add	r1, sp, #16
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	4b04      	ldr	r3, [pc, #16]	@ (800a600 <_vfiprintf_r+0x228>)
 800a5ee:	f000 f87d 	bl	800a6ec <_printf_i>
 800a5f2:	e7e4      	b.n	800a5be <_vfiprintf_r+0x1e6>
 800a5f4:	0800ae24 	.word	0x0800ae24
 800a5f8:	0800ae2e 	.word	0x0800ae2e
 800a5fc:	00000000 	.word	0x00000000
 800a600:	0800a3b3 	.word	0x0800a3b3
 800a604:	0800ae2a 	.word	0x0800ae2a

0800a608 <_printf_common>:
 800a608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	4616      	mov	r6, r2
 800a60e:	4698      	mov	r8, r3
 800a610:	688a      	ldr	r2, [r1, #8]
 800a612:	4607      	mov	r7, r0
 800a614:	690b      	ldr	r3, [r1, #16]
 800a616:	460c      	mov	r4, r1
 800a618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a61c:	4293      	cmp	r3, r2
 800a61e:	bfb8      	it	lt
 800a620:	4613      	movlt	r3, r2
 800a622:	6033      	str	r3, [r6, #0]
 800a624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a628:	b10a      	cbz	r2, 800a62e <_printf_common+0x26>
 800a62a:	3301      	adds	r3, #1
 800a62c:	6033      	str	r3, [r6, #0]
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	0699      	lsls	r1, r3, #26
 800a632:	bf42      	ittt	mi
 800a634:	6833      	ldrmi	r3, [r6, #0]
 800a636:	3302      	addmi	r3, #2
 800a638:	6033      	strmi	r3, [r6, #0]
 800a63a:	6825      	ldr	r5, [r4, #0]
 800a63c:	f015 0506 	ands.w	r5, r5, #6
 800a640:	d106      	bne.n	800a650 <_printf_common+0x48>
 800a642:	f104 0a19 	add.w	sl, r4, #25
 800a646:	68e3      	ldr	r3, [r4, #12]
 800a648:	6832      	ldr	r2, [r6, #0]
 800a64a:	1a9b      	subs	r3, r3, r2
 800a64c:	42ab      	cmp	r3, r5
 800a64e:	dc2b      	bgt.n	800a6a8 <_printf_common+0xa0>
 800a650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a654:	6822      	ldr	r2, [r4, #0]
 800a656:	3b00      	subs	r3, #0
 800a658:	bf18      	it	ne
 800a65a:	2301      	movne	r3, #1
 800a65c:	0692      	lsls	r2, r2, #26
 800a65e:	d430      	bmi.n	800a6c2 <_printf_common+0xba>
 800a660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a664:	4641      	mov	r1, r8
 800a666:	4638      	mov	r0, r7
 800a668:	47c8      	blx	r9
 800a66a:	3001      	adds	r0, #1
 800a66c:	d023      	beq.n	800a6b6 <_printf_common+0xae>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	341a      	adds	r4, #26
 800a672:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a676:	f003 0306 	and.w	r3, r3, #6
 800a67a:	2b04      	cmp	r3, #4
 800a67c:	bf0a      	itet	eq
 800a67e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a682:	2500      	movne	r5, #0
 800a684:	6833      	ldreq	r3, [r6, #0]
 800a686:	f04f 0600 	mov.w	r6, #0
 800a68a:	bf08      	it	eq
 800a68c:	1aed      	subeq	r5, r5, r3
 800a68e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a692:	bf08      	it	eq
 800a694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a698:	4293      	cmp	r3, r2
 800a69a:	bfc4      	itt	gt
 800a69c:	1a9b      	subgt	r3, r3, r2
 800a69e:	18ed      	addgt	r5, r5, r3
 800a6a0:	42b5      	cmp	r5, r6
 800a6a2:	d11a      	bne.n	800a6da <_printf_common+0xd2>
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e008      	b.n	800a6ba <_printf_common+0xb2>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	4641      	mov	r1, r8
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	47c8      	blx	r9
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	d103      	bne.n	800a6be <_printf_common+0xb6>
 800a6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	3501      	adds	r5, #1
 800a6c0:	e7c1      	b.n	800a646 <_printf_common+0x3e>
 800a6c2:	18e1      	adds	r1, r4, r3
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	2030      	movs	r0, #48	@ 0x30
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	4422      	add	r2, r4
 800a6cc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a6d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6d8:	e7c2      	b.n	800a660 <_printf_common+0x58>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4641      	mov	r1, r8
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	47c8      	blx	r9
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d0e6      	beq.n	800a6b6 <_printf_common+0xae>
 800a6e8:	3601      	adds	r6, #1
 800a6ea:	e7d9      	b.n	800a6a0 <_printf_common+0x98>

0800a6ec <_printf_i>:
 800a6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	7e0f      	ldrb	r7, [r1, #24]
 800a6f2:	4691      	mov	r9, r2
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	2f78      	cmp	r7, #120	@ 0x78
 800a6fa:	469a      	mov	sl, r3
 800a6fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a702:	d807      	bhi.n	800a714 <_printf_i+0x28>
 800a704:	2f62      	cmp	r7, #98	@ 0x62
 800a706:	d80a      	bhi.n	800a71e <_printf_i+0x32>
 800a708:	2f00      	cmp	r7, #0
 800a70a:	f000 80d2 	beq.w	800a8b2 <_printf_i+0x1c6>
 800a70e:	2f58      	cmp	r7, #88	@ 0x58
 800a710:	f000 80b9 	beq.w	800a886 <_printf_i+0x19a>
 800a714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a71c:	e03a      	b.n	800a794 <_printf_i+0xa8>
 800a71e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a722:	2b15      	cmp	r3, #21
 800a724:	d8f6      	bhi.n	800a714 <_printf_i+0x28>
 800a726:	a101      	add	r1, pc, #4	@ (adr r1, 800a72c <_printf_i+0x40>)
 800a728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a72c:	0800a785 	.word	0x0800a785
 800a730:	0800a799 	.word	0x0800a799
 800a734:	0800a715 	.word	0x0800a715
 800a738:	0800a715 	.word	0x0800a715
 800a73c:	0800a715 	.word	0x0800a715
 800a740:	0800a715 	.word	0x0800a715
 800a744:	0800a799 	.word	0x0800a799
 800a748:	0800a715 	.word	0x0800a715
 800a74c:	0800a715 	.word	0x0800a715
 800a750:	0800a715 	.word	0x0800a715
 800a754:	0800a715 	.word	0x0800a715
 800a758:	0800a899 	.word	0x0800a899
 800a75c:	0800a7c3 	.word	0x0800a7c3
 800a760:	0800a853 	.word	0x0800a853
 800a764:	0800a715 	.word	0x0800a715
 800a768:	0800a715 	.word	0x0800a715
 800a76c:	0800a8bb 	.word	0x0800a8bb
 800a770:	0800a715 	.word	0x0800a715
 800a774:	0800a7c3 	.word	0x0800a7c3
 800a778:	0800a715 	.word	0x0800a715
 800a77c:	0800a715 	.word	0x0800a715
 800a780:	0800a85b 	.word	0x0800a85b
 800a784:	6833      	ldr	r3, [r6, #0]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6032      	str	r2, [r6, #0]
 800a78c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a794:	2301      	movs	r3, #1
 800a796:	e09d      	b.n	800a8d4 <_printf_i+0x1e8>
 800a798:	6833      	ldr	r3, [r6, #0]
 800a79a:	6820      	ldr	r0, [r4, #0]
 800a79c:	1d19      	adds	r1, r3, #4
 800a79e:	6031      	str	r1, [r6, #0]
 800a7a0:	0606      	lsls	r6, r0, #24
 800a7a2:	d501      	bpl.n	800a7a8 <_printf_i+0xbc>
 800a7a4:	681d      	ldr	r5, [r3, #0]
 800a7a6:	e003      	b.n	800a7b0 <_printf_i+0xc4>
 800a7a8:	0645      	lsls	r5, r0, #25
 800a7aa:	d5fb      	bpl.n	800a7a4 <_printf_i+0xb8>
 800a7ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	da03      	bge.n	800a7bc <_printf_i+0xd0>
 800a7b4:	232d      	movs	r3, #45	@ 0x2d
 800a7b6:	426d      	negs	r5, r5
 800a7b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7bc:	4859      	ldr	r0, [pc, #356]	@ (800a924 <_printf_i+0x238>)
 800a7be:	230a      	movs	r3, #10
 800a7c0:	e011      	b.n	800a7e6 <_printf_i+0xfa>
 800a7c2:	6821      	ldr	r1, [r4, #0]
 800a7c4:	6833      	ldr	r3, [r6, #0]
 800a7c6:	0608      	lsls	r0, r1, #24
 800a7c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a7cc:	d402      	bmi.n	800a7d4 <_printf_i+0xe8>
 800a7ce:	0649      	lsls	r1, r1, #25
 800a7d0:	bf48      	it	mi
 800a7d2:	b2ad      	uxthmi	r5, r5
 800a7d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7d6:	6033      	str	r3, [r6, #0]
 800a7d8:	4852      	ldr	r0, [pc, #328]	@ (800a924 <_printf_i+0x238>)
 800a7da:	bf14      	ite	ne
 800a7dc:	230a      	movne	r3, #10
 800a7de:	2308      	moveq	r3, #8
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7e6:	6866      	ldr	r6, [r4, #4]
 800a7e8:	2e00      	cmp	r6, #0
 800a7ea:	60a6      	str	r6, [r4, #8]
 800a7ec:	bfa2      	ittt	ge
 800a7ee:	6821      	ldrge	r1, [r4, #0]
 800a7f0:	f021 0104 	bicge.w	r1, r1, #4
 800a7f4:	6021      	strge	r1, [r4, #0]
 800a7f6:	b90d      	cbnz	r5, 800a7fc <_printf_i+0x110>
 800a7f8:	2e00      	cmp	r6, #0
 800a7fa:	d04b      	beq.n	800a894 <_printf_i+0x1a8>
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800a802:	fb03 5711 	mls	r7, r3, r1, r5
 800a806:	5dc7      	ldrb	r7, [r0, r7]
 800a808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a80c:	462f      	mov	r7, r5
 800a80e:	460d      	mov	r5, r1
 800a810:	42bb      	cmp	r3, r7
 800a812:	d9f4      	bls.n	800a7fe <_printf_i+0x112>
 800a814:	2b08      	cmp	r3, #8
 800a816:	d10b      	bne.n	800a830 <_printf_i+0x144>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	07df      	lsls	r7, r3, #31
 800a81c:	d508      	bpl.n	800a830 <_printf_i+0x144>
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	4299      	cmp	r1, r3
 800a824:	bfde      	ittt	le
 800a826:	2330      	movle	r3, #48	@ 0x30
 800a828:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a82c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a830:	1b92      	subs	r2, r2, r6
 800a832:	6122      	str	r2, [r4, #16]
 800a834:	464b      	mov	r3, r9
 800a836:	aa03      	add	r2, sp, #12
 800a838:	4621      	mov	r1, r4
 800a83a:	4640      	mov	r0, r8
 800a83c:	f8cd a000 	str.w	sl, [sp]
 800a840:	f7ff fee2 	bl	800a608 <_printf_common>
 800a844:	3001      	adds	r0, #1
 800a846:	d14a      	bne.n	800a8de <_printf_i+0x1f2>
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	b004      	add	sp, #16
 800a84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	f043 0320 	orr.w	r3, r3, #32
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	2778      	movs	r7, #120	@ 0x78
 800a85c:	4832      	ldr	r0, [pc, #200]	@ (800a928 <_printf_i+0x23c>)
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a864:	061f      	lsls	r7, r3, #24
 800a866:	6831      	ldr	r1, [r6, #0]
 800a868:	f851 5b04 	ldr.w	r5, [r1], #4
 800a86c:	d402      	bmi.n	800a874 <_printf_i+0x188>
 800a86e:	065f      	lsls	r7, r3, #25
 800a870:	bf48      	it	mi
 800a872:	b2ad      	uxthmi	r5, r5
 800a874:	6031      	str	r1, [r6, #0]
 800a876:	07d9      	lsls	r1, r3, #31
 800a878:	bf44      	itt	mi
 800a87a:	f043 0320 	orrmi.w	r3, r3, #32
 800a87e:	6023      	strmi	r3, [r4, #0]
 800a880:	b11d      	cbz	r5, 800a88a <_printf_i+0x19e>
 800a882:	2310      	movs	r3, #16
 800a884:	e7ac      	b.n	800a7e0 <_printf_i+0xf4>
 800a886:	4827      	ldr	r0, [pc, #156]	@ (800a924 <_printf_i+0x238>)
 800a888:	e7e9      	b.n	800a85e <_printf_i+0x172>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	f023 0320 	bic.w	r3, r3, #32
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	e7f6      	b.n	800a882 <_printf_i+0x196>
 800a894:	4616      	mov	r6, r2
 800a896:	e7bd      	b.n	800a814 <_printf_i+0x128>
 800a898:	6833      	ldr	r3, [r6, #0]
 800a89a:	6825      	ldr	r5, [r4, #0]
 800a89c:	1d18      	adds	r0, r3, #4
 800a89e:	6961      	ldr	r1, [r4, #20]
 800a8a0:	6030      	str	r0, [r6, #0]
 800a8a2:	062e      	lsls	r6, r5, #24
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	d501      	bpl.n	800a8ac <_printf_i+0x1c0>
 800a8a8:	6019      	str	r1, [r3, #0]
 800a8aa:	e002      	b.n	800a8b2 <_printf_i+0x1c6>
 800a8ac:	0668      	lsls	r0, r5, #25
 800a8ae:	d5fb      	bpl.n	800a8a8 <_printf_i+0x1bc>
 800a8b0:	8019      	strh	r1, [r3, #0]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	4616      	mov	r6, r2
 800a8b6:	6123      	str	r3, [r4, #16]
 800a8b8:	e7bc      	b.n	800a834 <_printf_i+0x148>
 800a8ba:	6833      	ldr	r3, [r6, #0]
 800a8bc:	2100      	movs	r1, #0
 800a8be:	1d1a      	adds	r2, r3, #4
 800a8c0:	6032      	str	r2, [r6, #0]
 800a8c2:	681e      	ldr	r6, [r3, #0]
 800a8c4:	6862      	ldr	r2, [r4, #4]
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 f980 	bl	800abcc <memchr>
 800a8cc:	b108      	cbz	r0, 800a8d2 <_printf_i+0x1e6>
 800a8ce:	1b80      	subs	r0, r0, r6
 800a8d0:	6060      	str	r0, [r4, #4]
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	6123      	str	r3, [r4, #16]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8dc:	e7aa      	b.n	800a834 <_printf_i+0x148>
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	47d0      	blx	sl
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d0ad      	beq.n	800a848 <_printf_i+0x15c>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	079b      	lsls	r3, r3, #30
 800a8f0:	d413      	bmi.n	800a91a <_printf_i+0x22e>
 800a8f2:	68e0      	ldr	r0, [r4, #12]
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	4298      	cmp	r0, r3
 800a8f8:	bfb8      	it	lt
 800a8fa:	4618      	movlt	r0, r3
 800a8fc:	e7a6      	b.n	800a84c <_printf_i+0x160>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4632      	mov	r2, r6
 800a902:	4649      	mov	r1, r9
 800a904:	4640      	mov	r0, r8
 800a906:	47d0      	blx	sl
 800a908:	3001      	adds	r0, #1
 800a90a:	d09d      	beq.n	800a848 <_printf_i+0x15c>
 800a90c:	3501      	adds	r5, #1
 800a90e:	68e3      	ldr	r3, [r4, #12]
 800a910:	9903      	ldr	r1, [sp, #12]
 800a912:	1a5b      	subs	r3, r3, r1
 800a914:	42ab      	cmp	r3, r5
 800a916:	dcf2      	bgt.n	800a8fe <_printf_i+0x212>
 800a918:	e7eb      	b.n	800a8f2 <_printf_i+0x206>
 800a91a:	2500      	movs	r5, #0
 800a91c:	f104 0619 	add.w	r6, r4, #25
 800a920:	e7f5      	b.n	800a90e <_printf_i+0x222>
 800a922:	bf00      	nop
 800a924:	0800ae35 	.word	0x0800ae35
 800a928:	0800ae46 	.word	0x0800ae46

0800a92c <__sflush_r>:
 800a92c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	0716      	lsls	r6, r2, #28
 800a936:	4605      	mov	r5, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	d454      	bmi.n	800a9e6 <__sflush_r+0xba>
 800a93c:	684b      	ldr	r3, [r1, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	dc02      	bgt.n	800a948 <__sflush_r+0x1c>
 800a942:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	dd48      	ble.n	800a9da <__sflush_r+0xae>
 800a948:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	d045      	beq.n	800a9da <__sflush_r+0xae>
 800a94e:	2300      	movs	r3, #0
 800a950:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a954:	682f      	ldr	r7, [r5, #0]
 800a956:	6a21      	ldr	r1, [r4, #32]
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	d030      	beq.n	800a9be <__sflush_r+0x92>
 800a95c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	0759      	lsls	r1, r3, #29
 800a962:	d505      	bpl.n	800a970 <__sflush_r+0x44>
 800a964:	6863      	ldr	r3, [r4, #4]
 800a966:	1ad2      	subs	r2, r2, r3
 800a968:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a96a:	b10b      	cbz	r3, 800a970 <__sflush_r+0x44>
 800a96c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a96e:	1ad2      	subs	r2, r2, r3
 800a970:	2300      	movs	r3, #0
 800a972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a974:	6a21      	ldr	r1, [r4, #32]
 800a976:	4628      	mov	r0, r5
 800a978:	47b0      	blx	r6
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	d106      	bne.n	800a98e <__sflush_r+0x62>
 800a980:	6829      	ldr	r1, [r5, #0]
 800a982:	291d      	cmp	r1, #29
 800a984:	d82b      	bhi.n	800a9de <__sflush_r+0xb2>
 800a986:	4a2a      	ldr	r2, [pc, #168]	@ (800aa30 <__sflush_r+0x104>)
 800a988:	410a      	asrs	r2, r1
 800a98a:	07d6      	lsls	r6, r2, #31
 800a98c:	d427      	bmi.n	800a9de <__sflush_r+0xb2>
 800a98e:	2200      	movs	r2, #0
 800a990:	04d9      	lsls	r1, r3, #19
 800a992:	6062      	str	r2, [r4, #4]
 800a994:	6922      	ldr	r2, [r4, #16]
 800a996:	6022      	str	r2, [r4, #0]
 800a998:	d504      	bpl.n	800a9a4 <__sflush_r+0x78>
 800a99a:	1c42      	adds	r2, r0, #1
 800a99c:	d101      	bne.n	800a9a2 <__sflush_r+0x76>
 800a99e:	682b      	ldr	r3, [r5, #0]
 800a9a0:	b903      	cbnz	r3, 800a9a4 <__sflush_r+0x78>
 800a9a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9a6:	602f      	str	r7, [r5, #0]
 800a9a8:	b1b9      	cbz	r1, 800a9da <__sflush_r+0xae>
 800a9aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9ae:	4299      	cmp	r1, r3
 800a9b0:	d002      	beq.n	800a9b8 <__sflush_r+0x8c>
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7ff fbee 	bl	800a194 <_free_r>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9bc:	e00d      	b.n	800a9da <__sflush_r+0xae>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b0      	blx	r6
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	1c50      	adds	r0, r2, #1
 800a9c8:	d1c9      	bne.n	800a95e <__sflush_r+0x32>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0c6      	beq.n	800a95e <__sflush_r+0x32>
 800a9d0:	2b1d      	cmp	r3, #29
 800a9d2:	d001      	beq.n	800a9d8 <__sflush_r+0xac>
 800a9d4:	2b16      	cmp	r3, #22
 800a9d6:	d11d      	bne.n	800aa14 <__sflush_r+0xe8>
 800a9d8:	602f      	str	r7, [r5, #0]
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e021      	b.n	800aa22 <__sflush_r+0xf6>
 800a9de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9e2:	b21b      	sxth	r3, r3
 800a9e4:	e01a      	b.n	800aa1c <__sflush_r+0xf0>
 800a9e6:	690f      	ldr	r7, [r1, #16]
 800a9e8:	2f00      	cmp	r7, #0
 800a9ea:	d0f6      	beq.n	800a9da <__sflush_r+0xae>
 800a9ec:	0793      	lsls	r3, r2, #30
 800a9ee:	680e      	ldr	r6, [r1, #0]
 800a9f0:	600f      	str	r7, [r1, #0]
 800a9f2:	bf0c      	ite	eq
 800a9f4:	694b      	ldreq	r3, [r1, #20]
 800a9f6:	2300      	movne	r3, #0
 800a9f8:	eba6 0807 	sub.w	r8, r6, r7
 800a9fc:	608b      	str	r3, [r1, #8]
 800a9fe:	f1b8 0f00 	cmp.w	r8, #0
 800aa02:	ddea      	ble.n	800a9da <__sflush_r+0xae>
 800aa04:	4643      	mov	r3, r8
 800aa06:	463a      	mov	r2, r7
 800aa08:	6a21      	ldr	r1, [r4, #32]
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa0e:	47b0      	blx	r6
 800aa10:	2800      	cmp	r0, #0
 800aa12:	dc08      	bgt.n	800aa26 <__sflush_r+0xfa>
 800aa14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa26:	4407      	add	r7, r0
 800aa28:	eba8 0800 	sub.w	r8, r8, r0
 800aa2c:	e7e7      	b.n	800a9fe <__sflush_r+0xd2>
 800aa2e:	bf00      	nop
 800aa30:	dfbffffe 	.word	0xdfbffffe

0800aa34 <_fflush_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	690b      	ldr	r3, [r1, #16]
 800aa38:	4605      	mov	r5, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	b913      	cbnz	r3, 800aa44 <_fflush_r+0x10>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	4628      	mov	r0, r5
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	b118      	cbz	r0, 800aa4e <_fflush_r+0x1a>
 800aa46:	6a03      	ldr	r3, [r0, #32]
 800aa48:	b90b      	cbnz	r3, 800aa4e <_fflush_r+0x1a>
 800aa4a:	f7ff fa9b 	bl	8009f84 <__sinit>
 800aa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d0f3      	beq.n	800aa3e <_fflush_r+0xa>
 800aa56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa58:	07d0      	lsls	r0, r2, #31
 800aa5a:	d404      	bmi.n	800aa66 <_fflush_r+0x32>
 800aa5c:	0599      	lsls	r1, r3, #22
 800aa5e:	d402      	bmi.n	800aa66 <_fflush_r+0x32>
 800aa60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa62:	f7ff fb94 	bl	800a18e <__retarget_lock_acquire_recursive>
 800aa66:	4628      	mov	r0, r5
 800aa68:	4621      	mov	r1, r4
 800aa6a:	f7ff ff5f 	bl	800a92c <__sflush_r>
 800aa6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa70:	4605      	mov	r5, r0
 800aa72:	07da      	lsls	r2, r3, #31
 800aa74:	d4e4      	bmi.n	800aa40 <_fflush_r+0xc>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	059b      	lsls	r3, r3, #22
 800aa7a:	d4e1      	bmi.n	800aa40 <_fflush_r+0xc>
 800aa7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa7e:	f7ff fb87 	bl	800a190 <__retarget_lock_release_recursive>
 800aa82:	e7dd      	b.n	800aa40 <_fflush_r+0xc>

0800aa84 <__swbuf_r>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	460e      	mov	r6, r1
 800aa88:	4614      	mov	r4, r2
 800aa8a:	4605      	mov	r5, r0
 800aa8c:	b118      	cbz	r0, 800aa96 <__swbuf_r+0x12>
 800aa8e:	6a03      	ldr	r3, [r0, #32]
 800aa90:	b90b      	cbnz	r3, 800aa96 <__swbuf_r+0x12>
 800aa92:	f7ff fa77 	bl	8009f84 <__sinit>
 800aa96:	69a3      	ldr	r3, [r4, #24]
 800aa98:	60a3      	str	r3, [r4, #8]
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	071a      	lsls	r2, r3, #28
 800aa9e:	d501      	bpl.n	800aaa4 <__swbuf_r+0x20>
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	b943      	cbnz	r3, 800aab6 <__swbuf_r+0x32>
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f000 f82a 	bl	800ab00 <__swsetup_r>
 800aaac:	b118      	cbz	r0, 800aab6 <__swbuf_r+0x32>
 800aaae:	f04f 37ff 	mov.w	r7, #4294967295
 800aab2:	4638      	mov	r0, r7
 800aab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	b2f6      	uxtb	r6, r6
 800aaba:	6922      	ldr	r2, [r4, #16]
 800aabc:	4637      	mov	r7, r6
 800aabe:	1a98      	subs	r0, r3, r2
 800aac0:	6963      	ldr	r3, [r4, #20]
 800aac2:	4283      	cmp	r3, r0
 800aac4:	dc05      	bgt.n	800aad2 <__swbuf_r+0x4e>
 800aac6:	4621      	mov	r1, r4
 800aac8:	4628      	mov	r0, r5
 800aaca:	f7ff ffb3 	bl	800aa34 <_fflush_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d1ed      	bne.n	800aaae <__swbuf_r+0x2a>
 800aad2:	68a3      	ldr	r3, [r4, #8]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	60a3      	str	r3, [r4, #8]
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	6022      	str	r2, [r4, #0]
 800aade:	701e      	strb	r6, [r3, #0]
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	6962      	ldr	r2, [r4, #20]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d004      	beq.n	800aaf2 <__swbuf_r+0x6e>
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	07db      	lsls	r3, r3, #31
 800aaec:	d5e1      	bpl.n	800aab2 <__swbuf_r+0x2e>
 800aaee:	2e0a      	cmp	r6, #10
 800aaf0:	d1df      	bne.n	800aab2 <__swbuf_r+0x2e>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f7ff ff9d 	bl	800aa34 <_fflush_r>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d0d9      	beq.n	800aab2 <__swbuf_r+0x2e>
 800aafe:	e7d6      	b.n	800aaae <__swbuf_r+0x2a>

0800ab00 <__swsetup_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4b29      	ldr	r3, [pc, #164]	@ (800aba8 <__swsetup_r+0xa8>)
 800ab04:	4605      	mov	r5, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	6818      	ldr	r0, [r3, #0]
 800ab0a:	b118      	cbz	r0, 800ab14 <__swsetup_r+0x14>
 800ab0c:	6a03      	ldr	r3, [r0, #32]
 800ab0e:	b90b      	cbnz	r3, 800ab14 <__swsetup_r+0x14>
 800ab10:	f7ff fa38 	bl	8009f84 <__sinit>
 800ab14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab18:	0719      	lsls	r1, r3, #28
 800ab1a:	d422      	bmi.n	800ab62 <__swsetup_r+0x62>
 800ab1c:	06da      	lsls	r2, r3, #27
 800ab1e:	d407      	bmi.n	800ab30 <__swsetup_r+0x30>
 800ab20:	2209      	movs	r2, #9
 800ab22:	602a      	str	r2, [r5, #0]
 800ab24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	e033      	b.n	800ab98 <__swsetup_r+0x98>
 800ab30:	0758      	lsls	r0, r3, #29
 800ab32:	d512      	bpl.n	800ab5a <__swsetup_r+0x5a>
 800ab34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab36:	b141      	cbz	r1, 800ab4a <__swsetup_r+0x4a>
 800ab38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	d002      	beq.n	800ab46 <__swsetup_r+0x46>
 800ab40:	4628      	mov	r0, r5
 800ab42:	f7ff fb27 	bl	800a194 <_free_r>
 800ab46:	2300      	movs	r3, #0
 800ab48:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab50:	81a3      	strh	r3, [r4, #12]
 800ab52:	2300      	movs	r3, #0
 800ab54:	6063      	str	r3, [r4, #4]
 800ab56:	6923      	ldr	r3, [r4, #16]
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f043 0308 	orr.w	r3, r3, #8
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	6923      	ldr	r3, [r4, #16]
 800ab64:	b94b      	cbnz	r3, 800ab7a <__swsetup_r+0x7a>
 800ab66:	89a3      	ldrh	r3, [r4, #12]
 800ab68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab70:	d003      	beq.n	800ab7a <__swsetup_r+0x7a>
 800ab72:	4621      	mov	r1, r4
 800ab74:	4628      	mov	r0, r5
 800ab76:	f000 f85c 	bl	800ac32 <__smakebuf_r>
 800ab7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7e:	f013 0201 	ands.w	r2, r3, #1
 800ab82:	d00a      	beq.n	800ab9a <__swsetup_r+0x9a>
 800ab84:	2200      	movs	r2, #0
 800ab86:	60a2      	str	r2, [r4, #8]
 800ab88:	6962      	ldr	r2, [r4, #20]
 800ab8a:	4252      	negs	r2, r2
 800ab8c:	61a2      	str	r2, [r4, #24]
 800ab8e:	6922      	ldr	r2, [r4, #16]
 800ab90:	b942      	cbnz	r2, 800aba4 <__swsetup_r+0xa4>
 800ab92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab96:	d1c5      	bne.n	800ab24 <__swsetup_r+0x24>
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	0799      	lsls	r1, r3, #30
 800ab9c:	bf58      	it	pl
 800ab9e:	6962      	ldrpl	r2, [r4, #20]
 800aba0:	60a2      	str	r2, [r4, #8]
 800aba2:	e7f4      	b.n	800ab8e <__swsetup_r+0x8e>
 800aba4:	2000      	movs	r0, #0
 800aba6:	e7f7      	b.n	800ab98 <__swsetup_r+0x98>
 800aba8:	2000002c 	.word	0x2000002c

0800abac <_sbrk_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	2300      	movs	r3, #0
 800abb0:	4d05      	ldr	r5, [pc, #20]	@ (800abc8 <_sbrk_r+0x1c>)
 800abb2:	4604      	mov	r4, r0
 800abb4:	4608      	mov	r0, r1
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	f7f7 f8d6 	bl	8001d68 <_sbrk>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_sbrk_r+0x1a>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_sbrk_r+0x1a>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	200008dc 	.word	0x200008dc

0800abcc <memchr>:
 800abcc:	b2c9      	uxtb	r1, r1
 800abce:	4603      	mov	r3, r0
 800abd0:	4402      	add	r2, r0
 800abd2:	b510      	push	{r4, lr}
 800abd4:	4293      	cmp	r3, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	d101      	bne.n	800abde <memchr+0x12>
 800abda:	2000      	movs	r0, #0
 800abdc:	e003      	b.n	800abe6 <memchr+0x1a>
 800abde:	7804      	ldrb	r4, [r0, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	428c      	cmp	r4, r1
 800abe4:	d1f6      	bne.n	800abd4 <memchr+0x8>
 800abe6:	bd10      	pop	{r4, pc}

0800abe8 <__swhatbuf_r>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	460c      	mov	r4, r1
 800abec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf0:	b096      	sub	sp, #88	@ 0x58
 800abf2:	4615      	mov	r5, r2
 800abf4:	2900      	cmp	r1, #0
 800abf6:	461e      	mov	r6, r3
 800abf8:	da0c      	bge.n	800ac14 <__swhatbuf_r+0x2c>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	2100      	movs	r1, #0
 800abfe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac02:	bf14      	ite	ne
 800ac04:	2340      	movne	r3, #64	@ 0x40
 800ac06:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	6031      	str	r1, [r6, #0]
 800ac0e:	602b      	str	r3, [r5, #0]
 800ac10:	b016      	add	sp, #88	@ 0x58
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	466a      	mov	r2, sp
 800ac16:	f000 f849 	bl	800acac <_fstat_r>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	dbed      	blt.n	800abfa <__swhatbuf_r+0x12>
 800ac1e:	9901      	ldr	r1, [sp, #4]
 800ac20:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac24:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac28:	4259      	negs	r1, r3
 800ac2a:	4159      	adcs	r1, r3
 800ac2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac30:	e7eb      	b.n	800ac0a <__swhatbuf_r+0x22>

0800ac32 <__smakebuf_r>:
 800ac32:	898b      	ldrh	r3, [r1, #12]
 800ac34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac36:	079d      	lsls	r5, r3, #30
 800ac38:	4606      	mov	r6, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	d507      	bpl.n	800ac4e <__smakebuf_r+0x1c>
 800ac3e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac42:	6023      	str	r3, [r4, #0]
 800ac44:	6123      	str	r3, [r4, #16]
 800ac46:	2301      	movs	r3, #1
 800ac48:	6163      	str	r3, [r4, #20]
 800ac4a:	b003      	add	sp, #12
 800ac4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4e:	ab01      	add	r3, sp, #4
 800ac50:	466a      	mov	r2, sp
 800ac52:	f7ff ffc9 	bl	800abe8 <__swhatbuf_r>
 800ac56:	9f00      	ldr	r7, [sp, #0]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	f7ff fb05 	bl	800a26c <_malloc_r>
 800ac62:	b948      	cbnz	r0, 800ac78 <__smakebuf_r+0x46>
 800ac64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac68:	059a      	lsls	r2, r3, #22
 800ac6a:	d4ee      	bmi.n	800ac4a <__smakebuf_r+0x18>
 800ac6c:	f023 0303 	bic.w	r3, r3, #3
 800ac70:	f043 0302 	orr.w	r3, r3, #2
 800ac74:	81a3      	strh	r3, [r4, #12]
 800ac76:	e7e2      	b.n	800ac3e <__smakebuf_r+0xc>
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	6020      	str	r0, [r4, #0]
 800ac7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac88:	b15b      	cbz	r3, 800aca2 <__smakebuf_r+0x70>
 800ac8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f000 f81e 	bl	800acd0 <_isatty_r>
 800ac94:	b128      	cbz	r0, 800aca2 <__smakebuf_r+0x70>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	f023 0303 	bic.w	r3, r3, #3
 800ac9c:	f043 0301 	orr.w	r3, r3, #1
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	89a3      	ldrh	r3, [r4, #12]
 800aca4:	431d      	orrs	r5, r3
 800aca6:	81a5      	strh	r5, [r4, #12]
 800aca8:	e7cf      	b.n	800ac4a <__smakebuf_r+0x18>
	...

0800acac <_fstat_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	2300      	movs	r3, #0
 800acb0:	4d06      	ldr	r5, [pc, #24]	@ (800accc <_fstat_r+0x20>)
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	4611      	mov	r1, r2
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	f7f7 f82c 	bl	8001d16 <_fstat>
 800acbe:	1c43      	adds	r3, r0, #1
 800acc0:	d102      	bne.n	800acc8 <_fstat_r+0x1c>
 800acc2:	682b      	ldr	r3, [r5, #0]
 800acc4:	b103      	cbz	r3, 800acc8 <_fstat_r+0x1c>
 800acc6:	6023      	str	r3, [r4, #0]
 800acc8:	bd38      	pop	{r3, r4, r5, pc}
 800acca:	bf00      	nop
 800accc:	200008dc 	.word	0x200008dc

0800acd0 <_isatty_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	2300      	movs	r3, #0
 800acd4:	4d05      	ldr	r5, [pc, #20]	@ (800acec <_isatty_r+0x1c>)
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f7f7 f82b 	bl	8001d36 <_isatty>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_isatty_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_isatty_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	200008dc 	.word	0x200008dc

0800acf0 <_init>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr

0800acfc <_fini>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr
