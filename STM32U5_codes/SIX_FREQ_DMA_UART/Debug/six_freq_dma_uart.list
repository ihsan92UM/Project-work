
six_freq_dma_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa54  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  0800ac8c  0800ac8c  0000bc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ade8  0800ade8  0000bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800adf0  0800adf0  0000bdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800adf4  0800adf4  0000bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  20000000  0800adf8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000928  2000007c  0800ae74  0000c07c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200009a4  0800ae74  0000c9a4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a657  00000000  00000000  0000c0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003093  00000000  00000000  00026709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c0  00000000  00000000  000297a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011c5  00000000  00000000  0002ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002fad6  00000000  00000000  0002c025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cacd  00000000  00000000  0005bafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012c35f  00000000  00000000  000785c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a4927  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068f8  00000000  00000000  001a496c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001ab264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000007c 	.word	0x2000007c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800ac74 	.word	0x0800ac74

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000080 	.word	0x20000080
 8000274:	0800ac74 	.word	0x0800ac74

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sendCapacitanceData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendCapacitanceData() {
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af04      	add	r7, sp, #16
    // Access the first value of each channel
    uint16_t values[6] = {
        Channels[0][0],  // First value of Channel_0
 8000596:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <sendCapacitanceData+0xc0>)
 8000598:	881b      	ldrh	r3, [r3, #0]
    uint16_t values[6] = {
 800059a:	803b      	strh	r3, [r7, #0]
        Channels[1][0],  // First value of Channel_1
 800059c:	4b2c      	ldr	r3, [pc, #176]	@ (8000650 <sendCapacitanceData+0xc0>)
 800059e:	8a1b      	ldrh	r3, [r3, #16]
    uint16_t values[6] = {
 80005a0:	807b      	strh	r3, [r7, #2]
        Channels[2][0],  // First value of Channel_2
 80005a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000650 <sendCapacitanceData+0xc0>)
 80005a4:	8c1b      	ldrh	r3, [r3, #32]
    uint16_t values[6] = {
 80005a6:	80bb      	strh	r3, [r7, #4]
        Channels[3][0],  // First value of Channel_3
 80005a8:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <sendCapacitanceData+0xc0>)
 80005aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
    uint16_t values[6] = {
 80005ac:	80fb      	strh	r3, [r7, #6]
        Channels[4][0],  // First value of Channel_4
 80005ae:	4b28      	ldr	r3, [pc, #160]	@ (8000650 <sendCapacitanceData+0xc0>)
 80005b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
    uint16_t values[6] = {
 80005b4:	813b      	strh	r3, [r7, #8]
        Channels[5][0]   // First value of Channel_5
 80005b6:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <sendCapacitanceData+0xc0>)
 80005b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
    uint16_t values[6] = {
 80005bc:	817b      	strh	r3, [r7, #10]
    };

    // Debug: Print the values before sending
    printf("Sending: %d, %d, %d, %d, %d, %d\n",
           values[0], values[1], values[2],
 80005be:	883b      	ldrh	r3, [r7, #0]
    printf("Sending: %d, %d, %d, %d, %d, %d\n",
 80005c0:	4618      	mov	r0, r3
           values[0], values[1], values[2],
 80005c2:	887b      	ldrh	r3, [r7, #2]
    printf("Sending: %d, %d, %d, %d, %d, %d\n",
 80005c4:	461c      	mov	r4, r3
           values[0], values[1], values[2],
 80005c6:	88bb      	ldrh	r3, [r7, #4]
    printf("Sending: %d, %d, %d, %d, %d, %d\n",
 80005c8:	461d      	mov	r5, r3
           values[3], values[4], values[5]);
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	893a      	ldrh	r2, [r7, #8]
 80005ce:	8979      	ldrh	r1, [r7, #10]
    printf("Sending: %d, %d, %d, %d, %d, %d\n",
 80005d0:	9102      	str	r1, [sp, #8]
 80005d2:	9201      	str	r2, [sp, #4]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	462b      	mov	r3, r5
 80005d8:	4622      	mov	r2, r4
 80005da:	4601      	mov	r1, r0
 80005dc:	481d      	ldr	r0, [pc, #116]	@ (8000654 <sendCapacitanceData+0xc4>)
 80005de:	f009 fcc9 	bl	8009f74 <iprintf>

    txBuffer[0] = 0xAA;  // Start byte
 80005e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <sendCapacitanceData+0xc8>)
 80005e4:	22aa      	movs	r2, #170	@ 0xaa
 80005e6:	701a      	strb	r2, [r3, #0]

    // Copy uint16_t values into the buffer as uint8_t bytes
    for (int i = 0; i < 6; i++) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e01c      	b.n	8000628 <sendCapacitanceData+0x98>
        txBuffer[1 + 2 * i] = (values[i] >> 8) & 0xFF;  // High byte
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	3310      	adds	r3, #16
 80005f4:	443b      	add	r3, r7
 80005f6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	3301      	adds	r3, #1
 8000604:	b2d1      	uxtb	r1, r2
 8000606:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <sendCapacitanceData+0xc8>)
 8000608:	54d1      	strb	r1, [r2, r3]
        txBuffer[2 + 2 * i] = values[i] & 0xFF;         // Low byte
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	3310      	adds	r3, #16
 8000610:	443b      	add	r3, r7
 8000612:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	b2d1      	uxtb	r1, r2
 800061e:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <sendCapacitanceData+0xc8>)
 8000620:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 6; i++) {
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b05      	cmp	r3, #5
 800062c:	dddf      	ble.n	80005ee <sendCapacitanceData+0x5e>
    }

    txBuffer[13] = 0x55;  // End byte
 800062e:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <sendCapacitanceData+0xc8>)
 8000630:	2255      	movs	r2, #85	@ 0x55
 8000632:	735a      	strb	r2, [r3, #13]
    txBuffer[14] = 0x00;  // Optional: Checksum (e.g., XOR of all data bytes)
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <sendCapacitanceData+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	739a      	strb	r2, [r3, #14]

    // Send the data over UART
    HAL_UART_Transmit(&huart3, txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	220f      	movs	r2, #15
 8000640:	4905      	ldr	r1, [pc, #20]	@ (8000658 <sendCapacitanceData+0xc8>)
 8000642:	4806      	ldr	r0, [pc, #24]	@ (800065c <sendCapacitanceData+0xcc>)
 8000644:	f008 fe8c 	bl	8009360 <HAL_UART_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bdb0      	pop	{r4, r5, r7, pc}
 8000650:	2000073c 	.word	0x2000073c
 8000654:	0800ac8c 	.word	0x0800ac8c
 8000658:	2000079c 	.word	0x2000079c
 800065c:	200006a8 	.word	0x200006a8

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f001 fd62 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000668:	f000 f906 	bl	8000878 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f8aa 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 fce6 	bl	8001040 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000674:	f000 f90c 	bl	8000890 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8000678:	f000 f952 	bl	8000920 <MX_ICACHE_Init>
  MX_TIM2_Init();
 800067c:	f000 f964 	bl	8000948 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000680:	f000 f9ee 	bl	8000a60 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000684:	f000 fa78 	bl	8000b78 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000688:	f000 fb02 	bl	8000c90 <MX_TIM5_Init>
  MX_TIM8_Init();
 800068c:	f000 fb6a 	bl	8000d64 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000690:	f000 fbfa 	bl	8000e88 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8000694:	f000 fc88 	bl	8000fa8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

#define TIMER_CLK_HZ 160000000


if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 8000698:	483d      	ldr	r0, [pc, #244]	@ (8000790 <main+0x130>)
 800069a:	f007 fb97 	bl	8007dcc <HAL_TIM_Base_Start>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x48>

	  Error_Handler();
 80006a4:	f000 fd04 	bl	80010b0 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim3) != HAL_OK){
 80006a8:	483a      	ldr	r0, [pc, #232]	@ (8000794 <main+0x134>)
 80006aa:	f007 fb8f 	bl	8007dcc <HAL_TIM_Base_Start>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <main+0x58>

	  Error_Handler();
 80006b4:	f000 fcfc 	bl	80010b0 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim4) != HAL_OK){
 80006b8:	4837      	ldr	r0, [pc, #220]	@ (8000798 <main+0x138>)
 80006ba:	f007 fb87 	bl	8007dcc <HAL_TIM_Base_Start>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <main+0x68>

	  Error_Handler();
 80006c4:	f000 fcf4 	bl	80010b0 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim5) != HAL_OK){
 80006c8:	4834      	ldr	r0, [pc, #208]	@ (800079c <main+0x13c>)
 80006ca:	f007 fb7f 	bl	8007dcc <HAL_TIM_Base_Start>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <main+0x78>

	  Error_Handler();
 80006d4:	f000 fcec 	bl	80010b0 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim8) != HAL_OK){
 80006d8:	4831      	ldr	r0, [pc, #196]	@ (80007a0 <main+0x140>)
 80006da:	f007 fb77 	bl	8007dcc <HAL_TIM_Base_Start>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <main+0x88>

	  Error_Handler();
 80006e4:	f000 fce4 	bl	80010b0 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim15) != HAL_OK){
 80006e8:	482e      	ldr	r0, [pc, #184]	@ (80007a4 <main+0x144>)
 80006ea:	f007 fb6f 	bl	8007dcc <HAL_TIM_Base_Start>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <main+0x98>

	  Error_Handler();
 80006f4:	f000 fcdc 	bl	80010b0 <Error_Handler>
}


  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&Channels[0], 8);  // Channel_0
 80006f8:	2308      	movs	r3, #8
 80006fa:	4a2b      	ldr	r2, [pc, #172]	@ (80007a8 <main+0x148>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4824      	ldr	r0, [pc, #144]	@ (8000790 <main+0x130>)
 8000700:	f007 fc5e 	bl	8007fc0 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)&Channels[1], 8);  // Channel_1
 8000704:	2308      	movs	r3, #8
 8000706:	4a29      	ldr	r2, [pc, #164]	@ (80007ac <main+0x14c>)
 8000708:	2100      	movs	r1, #0
 800070a:	4822      	ldr	r0, [pc, #136]	@ (8000794 <main+0x134>)
 800070c:	f007 fc58 	bl	8007fc0 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)&Channels[2], 8);  // Channel_2 (TIM4 - PB6)
 8000710:	2308      	movs	r3, #8
 8000712:	4a27      	ldr	r2, [pc, #156]	@ (80007b0 <main+0x150>)
 8000714:	2100      	movs	r1, #0
 8000716:	4820      	ldr	r0, [pc, #128]	@ (8000798 <main+0x138>)
 8000718:	f007 fc52 	bl	8007fc0 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1, (uint32_t*)&Channels[3], 8);  // Channel_3 (TIM5 - PA0)
 800071c:	2308      	movs	r3, #8
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <main+0x154>)
 8000720:	2100      	movs	r1, #0
 8000722:	481e      	ldr	r0, [pc, #120]	@ (800079c <main+0x13c>)
 8000724:	f007 fc4c 	bl	8007fc0 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t*)&Channels[4], 8);  // Channel_4
 8000728:	2308      	movs	r3, #8
 800072a:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <main+0x158>)
 800072c:	2100      	movs	r1, #0
 800072e:	481c      	ldr	r0, [pc, #112]	@ (80007a0 <main+0x140>)
 8000730:	f007 fc46 	bl	8007fc0 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1, (uint32_t*)&Channels[5], 8); // Channel_5 (TIM15 - PA2)
 8000734:	2308      	movs	r3, #8
 8000736:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <main+0x15c>)
 8000738:	2100      	movs	r1, #0
 800073a:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <main+0x144>)
 800073c:	f007 fc40 	bl	8007fc0 <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000740:	2000      	movs	r0, #0
 8000742:	f001 fb3d 	bl	8001dc0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000746:	2101      	movs	r1, #1
 8000748:	2000      	movs	r0, #0
 800074a:	f001 fb75 	bl	8001e38 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <main+0x160>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <main+0x160>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <main+0x160>)
 800075e:	2200      	movs	r2, #0
 8000760:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <main+0x160>)
 8000764:	2200      	movs	r2, #0
 8000766:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <main+0x160>)
 800076a:	2200      	movs	r2, #0
 800076c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800076e:	4914      	ldr	r1, [pc, #80]	@ (80007c0 <main+0x160>)
 8000770:	2000      	movs	r0, #0
 8000772:	f001 fbfb 	bl	8001f6c <BSP_COM_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <main+0x120>
  {
    Error_Handler();
 800077c:	f000 fc98 	bl	80010b0 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sendCapacitanceData();
 8000780:	f7ff ff06 	bl	8000590 <sendCapacitanceData>
	  HAL_Delay(500);
 8000784:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000788:	f001 fd96 	bl	80022b8 <HAL_Delay>
	  sendCapacitanceData();
 800078c:	bf00      	nop
 800078e:	e7f7      	b.n	8000780 <main+0x120>
 8000790:	200000a8 	.word	0x200000a8
 8000794:	200000f4 	.word	0x200000f4
 8000798:	20000140 	.word	0x20000140
 800079c:	2000018c 	.word	0x2000018c
 80007a0:	200001d8 	.word	0x200001d8
 80007a4:	20000224 	.word	0x20000224
 80007a8:	2000073c 	.word	0x2000073c
 80007ac:	2000074c 	.word	0x2000074c
 80007b0:	2000075c 	.word	0x2000075c
 80007b4:	2000076c 	.word	0x2000076c
 80007b8:	2000077c 	.word	0x2000077c
 80007bc:	2000078c 	.word	0x2000078c
 80007c0:	20000098 	.word	0x20000098

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09e      	sub	sp, #120	@ 0x78
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2260      	movs	r2, #96	@ 0x60
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f009 fc23 	bl	800a01e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007ec:	f003 fb50 	bl	8003e90 <HAL_PWREx_ControlVoltageScaling>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007f6:	f000 fc5b 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000818:	230a      	movs	r3, #10
 800081a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000828:	230c      	movs	r3, #12
 800082a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fc07 	bl	8004048 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000840:	f000 fc36 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	231f      	movs	r3, #31
 8000846:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2303      	movs	r3, #3
 800084a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f004 facd 	bl	8004e00 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800086c:	f000 fc20 	bl	80010b0 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3778      	adds	r7, #120	@ 0x78
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800087c:	2002      	movs	r0, #2
 800087e:	f003 fb93 	bl	8003fa8 <HAL_PWREx_ConfigSupply>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000888:	f000 fc12 	bl	80010b0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <MX_GPDMA1_Init+0x8c>)
 8000898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800089c:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <MX_GPDMA1_Init+0x8c>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_GPDMA1_Init+0x8c>)
 80008a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	201d      	movs	r0, #29
 80008ba:	f001 fdd9 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80008be:	201d      	movs	r0, #29
 80008c0:	f001 fdf0 	bl	80024a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	201e      	movs	r0, #30
 80008ca:	f001 fdd1 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80008ce:	201e      	movs	r0, #30
 80008d0:	f001 fde8 	bl	80024a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	201f      	movs	r0, #31
 80008da:	f001 fdc9 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80008de:	201f      	movs	r0, #31
 80008e0:	f001 fde0 	bl	80024a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2020      	movs	r0, #32
 80008ea:	f001 fdc1 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80008ee:	2020      	movs	r0, #32
 80008f0:	f001 fdd8 	bl	80024a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2021      	movs	r0, #33	@ 0x21
 80008fa:	f001 fdb9 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80008fe:	2021      	movs	r0, #33	@ 0x21
 8000900:	f001 fdd0 	bl	80024a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2022      	movs	r0, #34	@ 0x22
 800090a:	f001 fdb1 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 800090e:	2022      	movs	r0, #34	@ 0x22
 8000910:	f001 fdc8 	bl	80024a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	46020c00 	.word	0x46020c00

08000920 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000924:	2000      	movs	r0, #0
 8000926:	f003 fa83 	bl	8003e30 <HAL_ICACHE_ConfigAssociativityMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000930:	f000 fbbe 	bl	80010b0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000934:	f003 fa9c 	bl	8003e70 <HAL_ICACHE_Enable>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800093e:	f000 fbb7 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b090      	sub	sp, #64	@ 0x40
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000984:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <MX_TIM2_Init+0x114>)
 8000986:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800098c:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <MX_TIM2_Init+0x114>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <MX_TIM2_Init+0x114>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000998:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <MX_TIM2_Init+0x114>)
 800099a:	f04f 32ff 	mov.w	r2, #4294967295
 800099e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <MX_TIM2_Init+0x114>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <MX_TIM2_Init+0x114>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ac:	482b      	ldr	r0, [pc, #172]	@ (8000a5c <MX_TIM2_Init+0x114>)
 80009ae:	f007 f9b5 	bl	8007d1c <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80009b8:	f000 fb7a 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009c6:	4619      	mov	r1, r3
 80009c8:	4824      	ldr	r0, [pc, #144]	@ (8000a5c <MX_TIM2_Init+0x114>)
 80009ca:	f007 fd8f 	bl	80084ec <HAL_TIM_ConfigClockSource>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80009d4:	f000 fb6c 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009d8:	4820      	ldr	r0, [pc, #128]	@ (8000a5c <MX_TIM2_Init+0x114>)
 80009da:	f007 fa8f 	bl	8007efc <HAL_TIM_IC_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009e4:	f000 fb64 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009e8:	2304      	movs	r3, #4
 80009ea:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009ec:	2350      	movs	r3, #80	@ 0x50
 80009ee:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4817      	ldr	r0, [pc, #92]	@ (8000a5c <MX_TIM2_Init+0x114>)
 8000a00:	f007 fe76 	bl	80086f0 <HAL_TIM_SlaveConfigSynchro>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000a0a:	f000 fb51 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <MX_TIM2_Init+0x114>)
 8000a1e:	f008 fb8d 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8000a28:	f000 fb42 	bl	80010b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a30:	2301      	movs	r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MX_TIM2_Init+0x114>)
 8000a44:	f007 fcb6 	bl	80083b4 <HAL_TIM_IC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000a4e:	f000 fb2f 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3740      	adds	r7, #64	@ 0x40
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000a8 	.word	0x200000a8

08000a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	@ 0x40
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a9c:	4b34      	ldr	r3, [pc, #208]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000a9e:	4a35      	ldr	r2, [pc, #212]	@ (8000b74 <MX_TIM3_Init+0x114>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aa2:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8000aae:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac2:	482b      	ldr	r0, [pc, #172]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000ac4:	f007 f92a 	bl	8007d1c <HAL_TIM_Base_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000ace:	f000 faef 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000adc:	4619      	mov	r1, r3
 8000ade:	4824      	ldr	r0, [pc, #144]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000ae0:	f007 fd04 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000aea:	f000 fae1 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000aee:	4820      	ldr	r0, [pc, #128]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000af0:	f007 fa04 	bl	8007efc <HAL_TIM_IC_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000afa:	f000 fad9 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000afe:	2304      	movs	r3, #4
 8000b00:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b02:	2350      	movs	r3, #80	@ 0x50
 8000b04:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000b16:	f007 fdeb 	bl	80086f0 <HAL_TIM_SlaveConfigSynchro>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8000b20:	f000 fac6 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	480f      	ldr	r0, [pc, #60]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000b34:	f008 fb02 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8000b3e:	f000 fab7 	bl	80010b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_TIM3_Init+0x110>)
 8000b5a:	f007 fc2b 	bl	80083b4 <HAL_TIM_IC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8000b64:	f000 faa4 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3740      	adds	r7, #64	@ 0x40
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000f4 	.word	0x200000f4
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	@ 0x40
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bb4:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bb6:	4a35      	ldr	r2, [pc, #212]	@ (8000c8c <MX_TIM4_Init+0x114>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bba:	4b33      	ldr	r3, [pc, #204]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4294967295;
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b2e      	ldr	r3, [pc, #184]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bda:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bdc:	f007 f89e 	bl	8007d1c <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000be6:	f000 fa63 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4824      	ldr	r0, [pc, #144]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000bf8:	f007 fc78 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000c02:	f000 fa55 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c06:	4820      	ldr	r0, [pc, #128]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000c08:	f007 f978 	bl	8007efc <HAL_TIM_IC_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000c12:	f000 fa4d 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c16:	2304      	movs	r3, #4
 8000c18:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c1a:	2350      	movs	r3, #80	@ 0x50
 8000c1c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4816      	ldr	r0, [pc, #88]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000c2e:	f007 fd5f 	bl	80086f0 <HAL_TIM_SlaveConfigSynchro>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8000c38:	f000 fa3a 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000c4c:	f008 fa76 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8000c56:	f000 fa2b 	bl	80010b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_TIM4_Init+0x110>)
 8000c72:	f007 fb9f 	bl	80083b4 <HAL_TIM_IC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8000c7c:	f000 fa18 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3740      	adds	r7, #64	@ 0x40
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000140 	.word	0x20000140
 8000c8c:	40000800 	.word	0x40000800

08000c90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cbe:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000cc0:	4a27      	ldr	r2, [pc, #156]	@ (8000d60 <MX_TIM5_Init+0xd0>)
 8000cc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ce4:	481d      	ldr	r0, [pc, #116]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000ce6:	f007 f819 	bl	8007d1c <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000cf0:	f000 f9de 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4816      	ldr	r0, [pc, #88]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000d02:	f007 fbf3 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000d0c:	f000 f9d0 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d10:	2304      	movs	r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d14:	2350      	movs	r3, #80	@ 0x50
 8000d16:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000d28:	f007 fce2 	bl	80086f0 <HAL_TIM_SlaveConfigSynchro>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM5_Init+0xa6>
  {
    Error_Handler();
 8000d32:	f000 f9bd 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <MX_TIM5_Init+0xcc>)
 8000d44:	f008 f9fa 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 8000d4e:	f000 f9af 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	@ 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000018c 	.word	0x2000018c
 8000d60:	40000c00 	.word	0x40000c00

08000d64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b090      	sub	sp, #64	@ 0x40
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000da0:	4b37      	ldr	r3, [pc, #220]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000da2:	4a38      	ldr	r2, [pc, #224]	@ (8000e84 <MX_TIM8_Init+0x120>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000da6:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b34      	ldr	r3, [pc, #208]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000db2:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000db4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dcc:	482c      	ldr	r0, [pc, #176]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000dce:	f006 ffa5 	bl	8007d1c <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000dd8:	f000 f96a 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de6:	4619      	mov	r1, r3
 8000de8:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000dea:	f007 fb7f 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000df4:	f000 f95c 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000df8:	4821      	ldr	r0, [pc, #132]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000dfa:	f007 f87f 	bl	8007efc <HAL_TIM_IC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000e04:	f000 f954 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e0c:	2350      	movs	r3, #80	@ 0x50
 8000e0e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000e20:	f007 fc66 	bl	80086f0 <HAL_TIM_SlaveConfigSynchro>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e2a:	f000 f941 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000e42:	f008 f97b 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8000e4c:	f000 f930 	bl	80010b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e54:	2301      	movs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_TIM8_Init+0x11c>)
 8000e68:	f007 faa4 	bl	80083b4 <HAL_TIM_IC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8000e72:	f000 f91d 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3740      	adds	r7, #64	@ 0x40
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200001d8 	.word	0x200001d8
 8000e84:	40013400 	.word	0x40013400

08000e88 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b090      	sub	sp, #64	@ 0x40
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ec4:	4b36      	ldr	r3, [pc, #216]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000ec6:	4a37      	ldr	r2, [pc, #220]	@ (8000fa4 <MX_TIM15_Init+0x11c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000eca:	4b35      	ldr	r3, [pc, #212]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b33      	ldr	r3, [pc, #204]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000ed6:	4b32      	ldr	r3, [pc, #200]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000edc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000ef0:	482b      	ldr	r0, [pc, #172]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000ef2:	f006 ff13 	bl	8007d1c <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000efc:	f000 f8d8 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4824      	ldr	r0, [pc, #144]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000f0e:	f007 faed 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000f18:	f000 f8ca 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000f1c:	4820      	ldr	r0, [pc, #128]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000f1e:	f006 ffed 	bl	8007efc <HAL_TIM_IC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000f28:	f000 f8c2 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f30:	2350      	movs	r3, #80	@ 0x50
 8000f32:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000f44:	f007 fbd4 	bl	80086f0 <HAL_TIM_SlaveConfigSynchro>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8000f4e:	f000 f8af 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000f62:	f008 f8eb 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8000f6c:	f000 f8a0 	bl	80010b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_TIM15_Init+0x118>)
 8000f88:	f007 fa14 	bl	80083b4 <HAL_TIM_IC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000f92:	f000 f88d 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3740      	adds	r7, #64	@ 0x40
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000224 	.word	0x20000224
 8000fa4:	40014000 	.word	0x40014000

08000fa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fac:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <MX_USART3_UART_Init+0x94>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ff0:	4811      	ldr	r0, [pc, #68]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8000ff2:	f008 f965 	bl	80092c0 <HAL_UART_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ffc:	f000 f858 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8001004:	f008 fe2a 	bl	8009c5c <HAL_UARTEx_SetTxFifoThreshold>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800100e:	f000 f84f 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001012:	2100      	movs	r1, #0
 8001014:	4808      	ldr	r0, [pc, #32]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8001016:	f008 fe5f 	bl	8009cd8 <HAL_UARTEx_SetRxFifoThreshold>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001020:	f000 f846 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_USART3_UART_Init+0x90>)
 8001026:	f008 fde0 	bl	8009bea <HAL_UARTEx_DisableFifoMode>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001030:	f000 f83e 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200006a8 	.word	0x200006a8
 800103c:	40004800 	.word	0x40004800

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_GPIO_Init+0x6c>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800104c:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <MX_GPIO_Init+0x6c>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_GPIO_Init+0x6c>)
 8001058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_GPIO_Init+0x6c>)
 8001066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <MX_GPIO_Init+0x6c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <MX_GPIO_Init+0x6c>)
 8001076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_GPIO_Init+0x6c>)
 8001084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <MX_GPIO_Init+0x6c>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_GPIO_Init+0x6c>)
 8001094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	46020c00 	.word	0x46020c00

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_MspInit+0x30>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c8:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <HAL_MspInit+0x30>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_MspInit+0x30>)
 80010d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	46020c00 	.word	0x46020c00

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ae      	sub	sp, #184	@ 0xb8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(htim_base->Instance==TIM2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001110:	f040 80a7 	bne.w	8001262 <HAL_TIM_Base_MspInit+0x172>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001114:	4ba9      	ldr	r3, [pc, #676]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001116:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800111a:	4aa8      	ldr	r2, [pc, #672]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001124:	4ba5      	ldr	r3, [pc, #660]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4ba2      	ldr	r3, [pc, #648]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001138:	4aa0      	ldr	r2, [pc, #640]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001142:	4b9e      	ldr	r3, [pc, #632]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
 800114e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001154:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800116a:	2301      	movs	r3, #1
 800116c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001174:	4619      	mov	r1, r3
 8001176:	4892      	ldr	r0, [pc, #584]	@ (80013c0 <HAL_TIM_Base_MspInit+0x2d0>)
 8001178:	f002 fc82 	bl	8003a80 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* GPDMA1_REQUEST_TIM2_CH1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800117c:	2321      	movs	r3, #33	@ 0x21
 800117e:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_CH1;
 8001180:	2338      	movs	r3, #56	@ 0x38
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001184:	2300      	movs	r3, #0
 8001186:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	2300      	movs	r3, #0
 800118a:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800118c:	2300      	movs	r3, #0
 800118e:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001190:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001196:	2301      	movs	r3, #1
 8001198:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800119a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119e:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80011ac:	2300      	movs	r3, #0
 80011ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80011b4:	2300      	movs	r3, #0
 80011b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80011bc:	2300      	movs	r3, #0
 80011be:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80011c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011c4:	497f      	ldr	r1, [pc, #508]	@ (80013c4 <HAL_TIM_Base_MspInit+0x2d4>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fe10 	bl	8002dec <HAL_DMAEx_List_BuildNode>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 80011d2:	f7ff ff6d 	bl	80010b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80011d6:	4a7b      	ldr	r2, [pc, #492]	@ (80013c4 <HAL_TIM_Base_MspInit+0x2d4>)
 80011d8:	2100      	movs	r1, #0
 80011da:	487b      	ldr	r0, [pc, #492]	@ (80013c8 <HAL_TIM_Base_MspInit+0x2d8>)
 80011dc:	f001 fe1c 	bl	8002e18 <HAL_DMAEx_List_InsertNode>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_TIM_Base_MspInit+0xfa>
    {
      Error_Handler();
 80011e6:	f7ff ff63 	bl	80010b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80011ea:	4877      	ldr	r0, [pc, #476]	@ (80013c8 <HAL_TIM_Base_MspInit+0x2d8>)
 80011ec:	f001 fedd 	bl	8002faa <HAL_DMAEx_List_SetCircularMode>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 80011f6:	f7ff ff5b 	bl	80010b0 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80011fa:	4b74      	ldr	r3, [pc, #464]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 80011fc:	4a74      	ldr	r2, [pc, #464]	@ (80013d0 <HAL_TIM_Base_MspInit+0x2e0>)
 80011fe:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001200:	4b72      	ldr	r3, [pc, #456]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001206:	4b71      	ldr	r3, [pc, #452]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800120c:	4b6f      	ldr	r3, [pc, #444]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 800120e:	2200      	movs	r2, #0
 8001210:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001212:	4b6e      	ldr	r3, [pc, #440]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001218:	4b6c      	ldr	r3, [pc, #432]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 800121a:	2281      	movs	r2, #129	@ 0x81
 800121c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800121e:	486b      	ldr	r0, [pc, #428]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001220:	f001 fc24 	bl	8002a6c <HAL_DMAEx_List_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_TIM_Base_MspInit+0x13e>
    {
      Error_Handler();
 800122a:	f7ff ff41 	bl	80010b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 800122e:	4966      	ldr	r1, [pc, #408]	@ (80013c8 <HAL_TIM_Base_MspInit+0x2d8>)
 8001230:	4866      	ldr	r0, [pc, #408]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001232:	f001 ff1b 	bl	800306c <HAL_DMAEx_List_LinkQ>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_TIM_Base_MspInit+0x150>
    {
      Error_Handler();
 800123c:	f7ff ff38 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel0);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a62      	ldr	r2, [pc, #392]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
 8001246:	4a61      	ldr	r2, [pc, #388]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800124c:	2110      	movs	r1, #16
 800124e:	485f      	ldr	r0, [pc, #380]	@ (80013cc <HAL_TIM_Base_MspInit+0x2dc>)
 8001250:	f001 fbab 	bl	80029aa <HAL_DMA_ConfigChannelAttributes>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 838e 	beq.w	8001978 <HAL_TIM_Base_MspInit+0x888>
    {
      Error_Handler();
 800125c:	f7ff ff28 	bl	80010b0 <Error_Handler>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001260:	e38a      	b.n	8001978 <HAL_TIM_Base_MspInit+0x888>
  else if(htim_base->Instance==TIM3)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a5b      	ldr	r2, [pc, #364]	@ (80013d4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	f040 80bd 	bne.w	80013e8 <HAL_TIM_Base_MspInit+0x2f8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126e:	4b53      	ldr	r3, [pc, #332]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001274:	4a51      	ldr	r2, [pc, #324]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800127e:	4b4f      	ldr	r3, [pc, #316]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001280:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800128a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b4b      	ldr	r3, [pc, #300]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 800128e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001292:	4a4a      	ldr	r2, [pc, #296]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800129c:	4b47      	ldr	r3, [pc, #284]	@ (80013bc <HAL_TIM_Base_MspInit+0x2cc>)
 800129e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012aa:	2340      	movs	r3, #64	@ 0x40
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012cc:	4619      	mov	r1, r3
 80012ce:	483c      	ldr	r0, [pc, #240]	@ (80013c0 <HAL_TIM_Base_MspInit+0x2d0>)
 80012d0:	f002 fbd6 	bl	8003a80 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80012d4:	2321      	movs	r3, #33	@ 0x21
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM3_CH1;
 80012d8:	233d      	movs	r3, #61	@ 0x3d
 80012da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80012dc:	2300      	movs	r3, #0
 80012de:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e0:	2300      	movs	r3, #0
 80012e2:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80012e4:	2300      	movs	r3, #0
 80012e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80012e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80012ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80012ee:	2301      	movs	r3, #1
 80012f0:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80012f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f6:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001300:	2300      	movs	r3, #0
 8001302:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001304:	2300      	movs	r3, #0
 8001306:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001308:	2300      	movs	r3, #0
 800130a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800130c:	2300      	movs	r3, #0
 800130e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001314:	2300      	movs	r3, #0
 8001316:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8001318:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800131c:	492e      	ldr	r1, [pc, #184]	@ (80013d8 <HAL_TIM_Base_MspInit+0x2e8>)
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fd64 	bl	8002dec <HAL_DMAEx_List_BuildNode>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_TIM_Base_MspInit+0x23e>
      Error_Handler();
 800132a:	f7ff fec1 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800132e:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <HAL_TIM_Base_MspInit+0x2e8>)
 8001330:	2100      	movs	r1, #0
 8001332:	482a      	ldr	r0, [pc, #168]	@ (80013dc <HAL_TIM_Base_MspInit+0x2ec>)
 8001334:	f001 fd70 	bl	8002e18 <HAL_DMAEx_List_InsertNode>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_TIM_Base_MspInit+0x252>
      Error_Handler();
 800133e:	f7ff feb7 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8001342:	4826      	ldr	r0, [pc, #152]	@ (80013dc <HAL_TIM_Base_MspInit+0x2ec>)
 8001344:	f001 fe31 	bl	8002faa <HAL_DMAEx_List_SetCircularMode>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_TIM_Base_MspInit+0x262>
      Error_Handler();
 800134e:	f7ff feaf 	bl	80010b0 <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_TIM_Base_MspInit+0x2f4>)
 8001356:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001358:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 800135a:	2200      	movs	r2, #0
 800135c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001360:	2200      	movs	r2, #0
 8001362:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001366:	2200      	movs	r2, #0
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 800136c:	2200      	movs	r2, #0
 800136e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001372:	2281      	movs	r2, #129	@ 0x81
 8001374:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001376:	481a      	ldr	r0, [pc, #104]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001378:	f001 fb78 	bl	8002a6c <HAL_DMAEx_List_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_TIM_Base_MspInit+0x296>
      Error_Handler();
 8001382:	f7ff fe95 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8001386:	4915      	ldr	r1, [pc, #84]	@ (80013dc <HAL_TIM_Base_MspInit+0x2ec>)
 8001388:	4815      	ldr	r0, [pc, #84]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 800138a:	f001 fe6f 	bl	800306c <HAL_DMAEx_List_LinkQ>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_TIM_Base_MspInit+0x2a8>
      Error_Handler();
 8001394:	f7ff fe8c 	bl	80010b0 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80013a4:	2110      	movs	r1, #16
 80013a6:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <HAL_TIM_Base_MspInit+0x2f0>)
 80013a8:	f001 faff 	bl	80029aa <HAL_DMA_ConfigChannelAttributes>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 82e2 	beq.w	8001978 <HAL_TIM_Base_MspInit+0x888>
      Error_Handler();
 80013b4:	f7ff fe7c 	bl	80010b0 <Error_Handler>
}
 80013b8:	e2de      	b.n	8001978 <HAL_TIM_Base_MspInit+0x888>
 80013ba:	bf00      	nop
 80013bc:	46020c00 	.word	0x46020c00
 80013c0:	42020000 	.word	0x42020000
 80013c4:	20000270 	.word	0x20000270
 80013c8:	20000294 	.word	0x20000294
 80013cc:	200002ac 	.word	0x200002ac
 80013d0:	40020050 	.word	0x40020050
 80013d4:	40000400 	.word	0x40000400
 80013d8:	20000324 	.word	0x20000324
 80013dc:	20000348 	.word	0x20000348
 80013e0:	20000360 	.word	0x20000360
 80013e4:	400200d0 	.word	0x400200d0
  else if(htim_base->Instance==TIM4)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4aaa      	ldr	r2, [pc, #680]	@ (8001698 <HAL_TIM_Base_MspInit+0x5a8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	f040 80a6 	bne.w	8001540 <HAL_TIM_Base_MspInit+0x450>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013f4:	4ba9      	ldr	r3, [pc, #676]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 80013f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013fa:	4aa8      	ldr	r2, [pc, #672]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001404:	4ba5      	ldr	r3, [pc, #660]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 8001406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4ba2      	ldr	r3, [pc, #648]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001418:	4aa0      	ldr	r2, [pc, #640]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001422:	4b9e      	ldr	r3, [pc, #632]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001430:	2340      	movs	r3, #64	@ 0x40
 8001432:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001452:	4619      	mov	r1, r3
 8001454:	4892      	ldr	r0, [pc, #584]	@ (80016a0 <HAL_TIM_Base_MspInit+0x5b0>)
 8001456:	f002 fb13 	bl	8003a80 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800145a:	2321      	movs	r3, #33	@ 0x21
 800145c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM4_CH1;
 800145e:	2343      	movs	r3, #67	@ 0x43
 8001460:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001462:	2300      	movs	r3, #0
 8001464:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001466:	2300      	movs	r3, #0
 8001468:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800146a:	2300      	movs	r3, #0
 800146c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800146e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001474:	2301      	movs	r3, #1
 8001476:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001478:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001486:	2300      	movs	r3, #0
 8001488:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800148a:	2300      	movs	r3, #0
 800148c:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 800148e:	2300      	movs	r3, #0
 8001490:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001492:	2300      	movs	r3, #0
 8001494:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001496:	2300      	movs	r3, #0
 8001498:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800149a:	2300      	movs	r3, #0
 800149c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel2) != HAL_OK)
 800149e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014a2:	4980      	ldr	r1, [pc, #512]	@ (80016a4 <HAL_TIM_Base_MspInit+0x5b4>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fca1 	bl	8002dec <HAL_DMAEx_List_BuildNode>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_TIM_Base_MspInit+0x3c4>
      Error_Handler();
 80014b0:	f7ff fdfe 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel2, NULL, &Node_GPDMA1_Channel2) != HAL_OK)
 80014b4:	4a7b      	ldr	r2, [pc, #492]	@ (80016a4 <HAL_TIM_Base_MspInit+0x5b4>)
 80014b6:	2100      	movs	r1, #0
 80014b8:	487b      	ldr	r0, [pc, #492]	@ (80016a8 <HAL_TIM_Base_MspInit+0x5b8>)
 80014ba:	f001 fcad 	bl	8002e18 <HAL_DMAEx_List_InsertNode>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_TIM_Base_MspInit+0x3d8>
      Error_Handler();
 80014c4:	f7ff fdf4 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel2) != HAL_OK)
 80014c8:	4877      	ldr	r0, [pc, #476]	@ (80016a8 <HAL_TIM_Base_MspInit+0x5b8>)
 80014ca:	f001 fd6e 	bl	8002faa <HAL_DMAEx_List_SetCircularMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_TIM_Base_MspInit+0x3e8>
      Error_Handler();
 80014d4:	f7ff fdec 	bl	80010b0 <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80014d8:	4b74      	ldr	r3, [pc, #464]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 80014da:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <HAL_TIM_Base_MspInit+0x5c0>)
 80014dc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80014de:	4b73      	ldr	r3, [pc, #460]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel2.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80014e4:	4b71      	ldr	r3, [pc, #452]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel2.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80014ea:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel2.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80014f0:	4b6e      	ldr	r3, [pc, #440]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel2.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80014f6:	4b6d      	ldr	r3, [pc, #436]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 80014f8:	2281      	movs	r2, #129	@ 0x81
 80014fa:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80014fc:	486b      	ldr	r0, [pc, #428]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 80014fe:	f001 fab5 	bl	8002a6c <HAL_DMAEx_List_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_TIM_Base_MspInit+0x41c>
      Error_Handler();
 8001508:	f7ff fdd2 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel2, &List_GPDMA1_Channel2) != HAL_OK)
 800150c:	4966      	ldr	r1, [pc, #408]	@ (80016a8 <HAL_TIM_Base_MspInit+0x5b8>)
 800150e:	4867      	ldr	r0, [pc, #412]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 8001510:	f001 fdac 	bl	800306c <HAL_DMAEx_List_LinkQ>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_TIM_Base_MspInit+0x42e>
      Error_Handler();
 800151a:	f7ff fdc9 	bl	80010b0 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel2);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a62      	ldr	r2, [pc, #392]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
 8001524:	4a61      	ldr	r2, [pc, #388]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800152a:	2110      	movs	r1, #16
 800152c:	485f      	ldr	r0, [pc, #380]	@ (80016ac <HAL_TIM_Base_MspInit+0x5bc>)
 800152e:	f001 fa3c 	bl	80029aa <HAL_DMA_ConfigChannelAttributes>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 821f 	beq.w	8001978 <HAL_TIM_Base_MspInit+0x888>
      Error_Handler();
 800153a:	f7ff fdb9 	bl	80010b0 <Error_Handler>
}
 800153e:	e21b      	b.n	8001978 <HAL_TIM_Base_MspInit+0x888>
  else if(htim_base->Instance==TIM5)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a5b      	ldr	r2, [pc, #364]	@ (80016b4 <HAL_TIM_Base_MspInit+0x5c4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	f040 80c0 	bne.w	80016cc <HAL_TIM_Base_MspInit+0x5dc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800154c:	4b53      	ldr	r3, [pc, #332]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 800154e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001552:	4a52      	ldr	r2, [pc, #328]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800155c:	4b4f      	ldr	r3, [pc, #316]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 800155e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b4c      	ldr	r3, [pc, #304]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 800156c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001570:	4a4a      	ldr	r2, [pc, #296]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800157a:	4b48      	ldr	r3, [pc, #288]	@ (800169c <HAL_TIM_Base_MspInit+0x5ac>)
 800157c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001588:	2301      	movs	r3, #1
 800158a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4842      	ldr	r0, [pc, #264]	@ (80016b8 <HAL_TIM_Base_MspInit+0x5c8>)
 80015ae:	f002 fa67 	bl	8003a80 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80015b2:	2321      	movs	r3, #33	@ 0x21
 80015b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM5_CH1;
 80015b6:	2348      	movs	r3, #72	@ 0x48
 80015b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015ba:	2300      	movs	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80015c2:	2300      	movs	r3, #0
 80015c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80015c6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80015ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80015cc:	2301      	movs	r3, #1
 80015ce:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80015d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d4:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80015de:	2300      	movs	r3, #0
 80015e0:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80015e2:	2300      	movs	r3, #0
 80015e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80015ea:	2300      	movs	r3, #0
 80015ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80015f2:	2300      	movs	r3, #0
 80015f4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 80015f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015fa:	4930      	ldr	r1, [pc, #192]	@ (80016bc <HAL_TIM_Base_MspInit+0x5cc>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fbf5 	bl	8002dec <HAL_DMAEx_List_BuildNode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_TIM_Base_MspInit+0x51c>
      Error_Handler();
 8001608:	f7ff fd52 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 800160c:	4a2b      	ldr	r2, [pc, #172]	@ (80016bc <HAL_TIM_Base_MspInit+0x5cc>)
 800160e:	2100      	movs	r1, #0
 8001610:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <HAL_TIM_Base_MspInit+0x5d0>)
 8001612:	f001 fc01 	bl	8002e18 <HAL_DMAEx_List_InsertNode>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_TIM_Base_MspInit+0x530>
      Error_Handler();
 800161c:	f7ff fd48 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8001620:	4827      	ldr	r0, [pc, #156]	@ (80016c0 <HAL_TIM_Base_MspInit+0x5d0>)
 8001622:	f001 fcc2 	bl	8002faa <HAL_DMAEx_List_SetCircularMode>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_TIM_Base_MspInit+0x540>
      Error_Handler();
 800162c:	f7ff fd40 	bl	80010b0 <Error_Handler>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001630:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 8001632:	4a25      	ldr	r2, [pc, #148]	@ (80016c8 <HAL_TIM_Base_MspInit+0x5d8>)
 8001634:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 8001638:	2200      	movs	r2, #0
 800163a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 800163e:	2200      	movs	r2, #0
 8001640:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 8001644:	2200      	movs	r2, #0
 8001646:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001648:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 8001650:	2281      	movs	r2, #129	@ 0x81
 8001652:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001654:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 8001656:	f001 fa09 	bl	8002a6c <HAL_DMAEx_List_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_TIM_Base_MspInit+0x574>
      Error_Handler();
 8001660:	f7ff fd26 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8001664:	4916      	ldr	r1, [pc, #88]	@ (80016c0 <HAL_TIM_Base_MspInit+0x5d0>)
 8001666:	4817      	ldr	r0, [pc, #92]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 8001668:	f001 fd00 	bl	800306c <HAL_DMAEx_List_LinkQ>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_TIM_Base_MspInit+0x586>
      Error_Handler();
 8001672:	f7ff fd1d 	bl	80010b0 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel3);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
 800167c:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001682:	2110      	movs	r1, #16
 8001684:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <HAL_TIM_Base_MspInit+0x5d4>)
 8001686:	f001 f990 	bl	80029aa <HAL_DMA_ConfigChannelAttributes>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8173 	beq.w	8001978 <HAL_TIM_Base_MspInit+0x888>
      Error_Handler();
 8001692:	f7ff fd0d 	bl	80010b0 <Error_Handler>
}
 8001696:	e16f      	b.n	8001978 <HAL_TIM_Base_MspInit+0x888>
 8001698:	40000800 	.word	0x40000800
 800169c:	46020c00 	.word	0x46020c00
 80016a0:	42020400 	.word	0x42020400
 80016a4:	200003d8 	.word	0x200003d8
 80016a8:	200003fc 	.word	0x200003fc
 80016ac:	20000414 	.word	0x20000414
 80016b0:	40020150 	.word	0x40020150
 80016b4:	40000c00 	.word	0x40000c00
 80016b8:	42020000 	.word	0x42020000
 80016bc:	2000048c 	.word	0x2000048c
 80016c0:	200004b0 	.word	0x200004b0
 80016c4:	200004c8 	.word	0x200004c8
 80016c8:	400201d0 	.word	0x400201d0
  else if(htim_base->Instance==TIM8)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4aab      	ldr	r2, [pc, #684]	@ (8001980 <HAL_TIM_Base_MspInit+0x890>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f040 80a6 	bne.w	8001824 <HAL_TIM_Base_MspInit+0x734>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016d8:	4baa      	ldr	r3, [pc, #680]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 80016da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016de:	4aa9      	ldr	r2, [pc, #676]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 80016e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016e4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 80016ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4ba3      	ldr	r3, [pc, #652]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fc:	4aa1      	ldr	r2, [pc, #644]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001706:	4b9f      	ldr	r3, [pc, #636]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001714:	2340      	movs	r3, #64	@ 0x40
 8001716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001736:	4619      	mov	r1, r3
 8001738:	4893      	ldr	r0, [pc, #588]	@ (8001988 <HAL_TIM_Base_MspInit+0x898>)
 800173a:	f002 f9a1 	bl	8003a80 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800173e:	2321      	movs	r3, #33	@ 0x21
 8001740:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM8_CH1;
 8001742:	2331      	movs	r3, #49	@ 0x31
 8001744:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001746:	2300      	movs	r3, #0
 8001748:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174a:	2300      	movs	r3, #0
 800174c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800174e:	2300      	movs	r3, #0
 8001750:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001752:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001756:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001758:	2301      	movs	r3, #1
 800175a:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800175c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001760:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800176a:	2300      	movs	r3, #0
 800176c:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800176e:	2300      	movs	r3, #0
 8001770:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001772:	2300      	movs	r3, #0
 8001774:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001776:	2300      	movs	r3, #0
 8001778:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800177e:	2300      	movs	r3, #0
 8001780:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 8001782:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001786:	4981      	ldr	r1, [pc, #516]	@ (800198c <HAL_TIM_Base_MspInit+0x89c>)
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fb2f 	bl	8002dec <HAL_DMAEx_List_BuildNode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_TIM_Base_MspInit+0x6a8>
      Error_Handler();
 8001794:	f7ff fc8c 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 8001798:	4a7c      	ldr	r2, [pc, #496]	@ (800198c <HAL_TIM_Base_MspInit+0x89c>)
 800179a:	2100      	movs	r1, #0
 800179c:	487c      	ldr	r0, [pc, #496]	@ (8001990 <HAL_TIM_Base_MspInit+0x8a0>)
 800179e:	f001 fb3b 	bl	8002e18 <HAL_DMAEx_List_InsertNode>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_TIM_Base_MspInit+0x6bc>
      Error_Handler();
 80017a8:	f7ff fc82 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 80017ac:	4878      	ldr	r0, [pc, #480]	@ (8001990 <HAL_TIM_Base_MspInit+0x8a0>)
 80017ae:	f001 fbfc 	bl	8002faa <HAL_DMAEx_List_SetCircularMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_TIM_Base_MspInit+0x6cc>
      Error_Handler();
 80017b8:	f7ff fc7a 	bl	80010b0 <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 80017bc:	4b75      	ldr	r3, [pc, #468]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017be:	4a76      	ldr	r2, [pc, #472]	@ (8001998 <HAL_TIM_Base_MspInit+0x8a8>)
 80017c0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80017c2:	4b74      	ldr	r3, [pc, #464]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80017c8:	4b72      	ldr	r3, [pc, #456]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80017ce:	4b71      	ldr	r3, [pc, #452]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80017da:	4b6e      	ldr	r3, [pc, #440]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017dc:	2281      	movs	r2, #129	@ 0x81
 80017de:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 80017e0:	486c      	ldr	r0, [pc, #432]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017e2:	f001 f943 	bl	8002a6c <HAL_DMAEx_List_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_TIM_Base_MspInit+0x700>
      Error_Handler();
 80017ec:	f7ff fc60 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 80017f0:	4967      	ldr	r1, [pc, #412]	@ (8001990 <HAL_TIM_Base_MspInit+0x8a0>)
 80017f2:	4868      	ldr	r0, [pc, #416]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 80017f4:	f001 fc3a 	bl	800306c <HAL_DMAEx_List_LinkQ>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_TIM_Base_MspInit+0x712>
      Error_Handler();
 80017fe:	f7ff fc57 	bl	80010b0 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel4);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a63      	ldr	r2, [pc, #396]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
 8001808:	4a62      	ldr	r2, [pc, #392]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 800180e:	2110      	movs	r1, #16
 8001810:	4860      	ldr	r0, [pc, #384]	@ (8001994 <HAL_TIM_Base_MspInit+0x8a4>)
 8001812:	f001 f8ca 	bl	80029aa <HAL_DMA_ConfigChannelAttributes>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80ad 	beq.w	8001978 <HAL_TIM_Base_MspInit+0x888>
      Error_Handler();
 800181e:	f7ff fc47 	bl	80010b0 <Error_Handler>
}
 8001822:	e0a9      	b.n	8001978 <HAL_TIM_Base_MspInit+0x888>
  else if(htim_base->Instance==TIM15)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a5c      	ldr	r2, [pc, #368]	@ (800199c <HAL_TIM_Base_MspInit+0x8ac>)
 800182a:	4293      	cmp	r3, r2
 800182c:	f040 80a4 	bne.w	8001978 <HAL_TIM_Base_MspInit+0x888>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001830:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 8001832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001836:	4a53      	ldr	r2, [pc, #332]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001840:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 8001842:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b4d      	ldr	r3, [pc, #308]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 8001850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001854:	4a4b      	ldr	r2, [pc, #300]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800185e:	4b49      	ldr	r3, [pc, #292]	@ (8001984 <HAL_TIM_Base_MspInit+0x894>)
 8001860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800186c:	2304      	movs	r3, #4
 800186e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001884:	230e      	movs	r3, #14
 8001886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800188e:	4619      	mov	r1, r3
 8001890:	4843      	ldr	r0, [pc, #268]	@ (80019a0 <HAL_TIM_Base_MspInit+0x8b0>)
 8001892:	f002 f8f5 	bl	8003a80 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001896:	2321      	movs	r3, #33	@ 0x21
 8001898:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM15_CH1;
 800189a:	234e      	movs	r3, #78	@ 0x4e
 800189c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800189e:	2300      	movs	r3, #0
 80018a0:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a2:	2300      	movs	r3, #0
 80018a4:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80018a6:	2300      	movs	r3, #0
 80018a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80018aa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018b0:	2301      	movs	r3, #1
 80018b2:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018c6:	2300      	movs	r3, #0
 80018c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80018ce:	2300      	movs	r3, #0
 80018d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80018d6:	2300      	movs	r3, #0
 80018d8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 80018da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018de:	4931      	ldr	r1, [pc, #196]	@ (80019a4 <HAL_TIM_Base_MspInit+0x8b4>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fa83 	bl	8002dec <HAL_DMAEx_List_BuildNode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_TIM_Base_MspInit+0x800>
      Error_Handler();
 80018ec:	f7ff fbe0 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 80018f0:	4a2c      	ldr	r2, [pc, #176]	@ (80019a4 <HAL_TIM_Base_MspInit+0x8b4>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	482c      	ldr	r0, [pc, #176]	@ (80019a8 <HAL_TIM_Base_MspInit+0x8b8>)
 80018f6:	f001 fa8f 	bl	8002e18 <HAL_DMAEx_List_InsertNode>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_TIM_Base_MspInit+0x814>
      Error_Handler();
 8001900:	f7ff fbd6 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8001904:	4828      	ldr	r0, [pc, #160]	@ (80019a8 <HAL_TIM_Base_MspInit+0x8b8>)
 8001906:	f001 fb50 	bl	8002faa <HAL_DMAEx_List_SetCircularMode>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_TIM_Base_MspInit+0x824>
      Error_Handler();
 8001910:	f7ff fbce 	bl	80010b0 <Error_Handler>
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8001914:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 8001916:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <HAL_TIM_Base_MspInit+0x8c0>)
 8001918:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 800191c:	2200      	movs	r2, #0
 800191e:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 8001922:	2200      	movs	r2, #0
 8001924:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 8001928:	2200      	movs	r2, #0
 800192a:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 800192e:	2200      	movs	r2, #0
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 8001934:	2281      	movs	r2, #129	@ 0x81
 8001936:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8001938:	481c      	ldr	r0, [pc, #112]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 800193a:	f001 f897 	bl	8002a6c <HAL_DMAEx_List_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_TIM_Base_MspInit+0x858>
      Error_Handler();
 8001944:	f7ff fbb4 	bl	80010b0 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 8001948:	4917      	ldr	r1, [pc, #92]	@ (80019a8 <HAL_TIM_Base_MspInit+0x8b8>)
 800194a:	4818      	ldr	r0, [pc, #96]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 800194c:	f001 fb8e 	bl	800306c <HAL_DMAEx_List_LinkQ>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_TIM_Base_MspInit+0x86a>
      Error_Handler();
 8001956:	f7ff fbab 	bl	80010b0 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel5);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001960:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001966:	2110      	movs	r1, #16
 8001968:	4810      	ldr	r0, [pc, #64]	@ (80019ac <HAL_TIM_Base_MspInit+0x8bc>)
 800196a:	f001 f81e 	bl	80029aa <HAL_DMA_ConfigChannelAttributes>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_TIM_Base_MspInit+0x888>
      Error_Handler();
 8001974:	f7ff fb9c 	bl	80010b0 <Error_Handler>
}
 8001978:	bf00      	nop
 800197a:	37b8      	adds	r7, #184	@ 0xb8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40013400 	.word	0x40013400
 8001984:	46020c00 	.word	0x46020c00
 8001988:	42020800 	.word	0x42020800
 800198c:	20000540 	.word	0x20000540
 8001990:	20000564 	.word	0x20000564
 8001994:	2000057c 	.word	0x2000057c
 8001998:	40020250 	.word	0x40020250
 800199c:	40014000 	.word	0x40014000
 80019a0:	42020000 	.word	0x42020000
 80019a4:	200005f4 	.word	0x200005f4
 80019a8:	20000618 	.word	0x20000618
 80019ac:	20000630 	.word	0x20000630
 80019b0:	400202d0 	.word	0x400202d0

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0bc      	sub	sp, #240	@ 0xf0
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	22c0      	movs	r2, #192	@ 0xc0
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f008 fb22 	bl	800a01e <memset>
  if(huart->Instance==USART3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a38      	ldr	r2, [pc, #224]	@ (8001ac0 <HAL_UART_MspInit+0x10c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d169      	bne.n	8001ab8 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019e4:	f04f 0204 	mov.w	r2, #4
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fdd1 	bl	80055a0 <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a04:	f7ff fb54 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a14:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2c:	4a25      	ldr	r2, [pc, #148]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a36:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_UART_MspInit+0x110>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PA7     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a84:	4619      	mov	r1, r3
 8001a86:	4810      	ldr	r0, [pc, #64]	@ (8001ac8 <HAL_UART_MspInit+0x114>)
 8001a88:	f001 fffa 	bl	8003a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	@ (8001acc <HAL_UART_MspInit+0x118>)
 8001ab4:	f001 ffe4 	bl	8003a80 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ab8:	bf00      	nop
 8001aba:	37f0      	adds	r7, #240	@ 0xf0
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40004800 	.word	0x40004800
 8001ac4:	46020c00 	.word	0x46020c00
 8001ac8:	42020000 	.word	0x42020000
 8001acc:	42020800 	.word	0x42020800

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b26:	f000 fba7 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f9f8 	bl	8001f28 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001b42:	f000 fdd1 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002ac 	.word	0x200002ac

08001b50 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001b56:	f000 fdc7 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000360 	.word	0x20000360

08001b64 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001b6a:	f000 fdbd 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000414 	.word	0x20000414

08001b78 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <GPDMA1_Channel3_IRQHandler+0x10>)
 8001b7e:	f000 fdb3 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004c8 	.word	0x200004c8

08001b8c <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <GPDMA1_Channel4_IRQHandler+0x10>)
 8001b92:	f000 fda9 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000057c 	.word	0x2000057c

08001ba0 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001ba6:	f000 fd9f 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000630 	.word	0x20000630

08001bb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e00a      	b.n	8001bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc6:	f3af 8000 	nop.w
 8001bca:	4601      	mov	r1, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf0      	blt.n	8001bc6 <_read+0x12>
  }

  return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e009      	b.n	8001c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60ba      	str	r2, [r7, #8]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fa13 	bl	8002034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf1      	blt.n	8001c00 <_write+0x12>
  }
  return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_close>:

int _close(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_isatty>:

int _isatty(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f008 f9fc 	bl	800a0bc <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20040000 	.word	0x20040000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	200007ac 	.word	0x200007ac
 8001cf8:	200009a8 	.word	0x200009a8

08001cfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d00:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <SystemInit+0x68>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <SystemInit+0x68>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <SystemInit+0x6c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <SystemInit+0x6c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <SystemInit+0x6c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <SystemInit+0x6c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <SystemInit+0x6c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <SystemInit+0x6c>)
 8001d2e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001d32:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001d36:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <SystemInit+0x6c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <SystemInit+0x6c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <SystemInit+0x6c>)
 8001d44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <SystemInit+0x6c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <SystemInit+0x68>)
 8001d52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d56:	609a      	str	r2, [r3, #8]
  #endif
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	46020c00 	.word	0x46020c00

08001d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d70:	f7ff ffc4 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	@ (8001dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <LoopForever+0xe>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001db8 <LoopForever+0x16>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d9a:	f008 f995 	bl	800a0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7fe fc5f 	bl	8000660 <main>

08001da2 <LoopForever>:

LoopForever:
    b LoopForever
 8001da2:	e7fe      	b.n	8001da2 <LoopForever>
  ldr   r0, =_estack
 8001da4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001db0:	0800adf8 	.word	0x0800adf8
  ldr r2, =_sbss
 8001db4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001db8:	200009a4 	.word	0x200009a4

08001dbc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_IRQHandler>
	...

08001dc0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001dd4:	f06f 0301 	mvn.w	r3, #1
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dda:	e023      	b.n	8001e24 <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8001de2:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <BSP_LED_Init+0x70>)
 8001de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de8:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <BSP_LED_Init+0x70>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <BSP_LED_Init+0x70>)
 8001df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001e00:	2320      	movs	r3, #32
 8001e02:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	4a08      	ldr	r2, [pc, #32]	@ (8001e34 <BSP_LED_Init+0x74>)
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	f107 0210 	add.w	r2, r7, #16
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fe2e 	bl	8003a80 <HAL_GPIO_Init>
  }

  return ret;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3728      	adds	r7, #40	@ 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	46020c00 	.word	0x46020c00
 8001e34:	20000008 	.word	0x20000008

08001e38 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001e48:	4b30      	ldr	r3, [pc, #192]	@ (8001f0c <BSP_PB_Init+0xd4>)
 8001e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f0c <BSP_PB_Init+0xd4>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e58:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <BSP_PB_Init+0xd4>)
 8001e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <BSP_PB_Init+0xd8>)
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	f107 020c 	add.w	r2, r7, #12
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fdf7 	bl	8003a80 <HAL_GPIO_Init>
 8001e92:	e036      	b.n	8001f02 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <BSP_PB_Init+0xdc>)
 8001e96:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <BSP_PB_Init+0xd8>)
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	f107 020c 	add.w	r2, r7, #12
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fdea 	bl	8003a80 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001eac:	79fa      	ldrb	r2, [r7, #7]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <BSP_PB_Init+0xe0>)
 8001eb8:	441a      	add	r2, r3
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4917      	ldr	r1, [pc, #92]	@ (8001f1c <BSP_PB_Init+0xe4>)
 8001ebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f001 fd7e 	bl	80039c6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <BSP_PB_Init+0xe0>)
 8001ed6:	1898      	adds	r0, r3, r2
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <BSP_PB_Init+0xe8>)
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f001 fd43 	bl	800396e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ee8:	2018      	movs	r0, #24
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <BSP_PB_Init+0xec>)
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f000 fabb 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001efa:	2318      	movs	r3, #24
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fad1 	bl	80024a4 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	46020c00 	.word	0x46020c00
 8001f10:	2000000c 	.word	0x2000000c
 8001f14:	10110000 	.word	0x10110000
 8001f18:	200007b0 	.word	0x200007b0
 8001f1c:	0800ad08 	.word	0x0800ad08
 8001f20:	20000010 	.word	0x20000010
 8001f24:	20000014 	.word	0x20000014

08001f28 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001f32:	79fa      	ldrb	r2, [r7, #7]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <BSP_PB_IRQHandler+0x28>)
 8001f3e:	4413      	add	r3, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 fd55 	bl	80039f0 <HAL_EXTI_IRQHandler>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200007b0 	.word	0x200007b0

08001f54 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f82:	f06f 0301 	mvn.w	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e018      	b.n	8001fbc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2294      	movs	r2, #148	@ 0x94
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc8 <BSP_COM_Init+0x5c>)
 8001f94:	4413      	add	r3, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f870 	bl	800207c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2294      	movs	r2, #148	@ 0x94
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <BSP_COM_Init+0x5c>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6839      	ldr	r1, [r7, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f80e 	bl	8001fcc <MX_USART1_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001fb6:	f06f 0303 	mvn.w	r3, #3
 8001fba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200007bc 	.word	0x200007bc

08001fcc <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <MX_USART1_Init+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	220c      	movs	r2, #12
 8001fea:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	895b      	ldrh	r3, [r3, #10]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	891b      	ldrh	r3, [r3, #8]
 8002002:	461a      	mov	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	899b      	ldrh	r3, [r3, #12]
 800200c:	461a      	mov	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002018:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f007 f94d 	bl	80092c0 <HAL_UART_Init>
 8002026:	4603      	mov	r3, r0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000004 	.word	0x20000004

08002034 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <__io_putchar+0x30>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	2394      	movs	r3, #148	@ 0x94
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	4a07      	ldr	r2, [pc, #28]	@ (8002068 <__io_putchar+0x34>)
 800204a:	1898      	adds	r0, r3, r2
 800204c:	1d39      	adds	r1, r7, #4
 800204e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002052:	2201      	movs	r2, #1
 8002054:	f007 f984 	bl	8009360 <HAL_UART_Transmit>
  return ch;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000850 	.word	0x20000850
 8002068:	200007bc 	.word	0x200007bc

0800206c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff ff6f 	bl	8001f54 <BSP_PB_Callback>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002084:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <COM1_MspInit+0xa8>)
 8002086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800208a:	4a26      	ldr	r2, [pc, #152]	@ (8002124 <COM1_MspInit+0xa8>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002094:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <COM1_MspInit+0xa8>)
 8002096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <COM1_MspInit+0xa8>)
 80020a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <COM1_MspInit+0xa8>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <COM1_MspInit+0xa8>)
 80020b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80020c0:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <COM1_MspInit+0xa8>)
 80020c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020c6:	4a17      	ldr	r2, [pc, #92]	@ (8002124 <COM1_MspInit+0xa8>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <COM1_MspInit+0xa8>)
 80020d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80020de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80020f0:	2307      	movs	r3, #7
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	480b      	ldr	r0, [pc, #44]	@ (8002128 <COM1_MspInit+0xac>)
 80020fc:	f001 fcc0 	bl	8003a80 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002104:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800210a:	2307      	movs	r3, #7
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <COM1_MspInit+0xac>)
 8002116:	f001 fcb3 	bl	8003a80 <HAL_GPIO_Init>
}
 800211a:	bf00      	nop
 800211c:	3728      	adds	r7, #40	@ 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	46020c00 	.word	0x46020c00
 8002128:	42020000 	.word	0x42020000

0800212c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_Init+0x50>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_Init+0x50>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f98c 	bl	800245a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002142:	f003 f84f 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_Init+0x54>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <HAL_Init+0x58>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <HAL_Init+0x5c>)
 800215a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800215c:	2004      	movs	r0, #4
 800215e:	f000 f9d1 	bl	8002504 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002162:	200f      	movs	r0, #15
 8002164:	f000 f812 	bl	800218c <HAL_InitTick>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e002      	b.n	8002178 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002172:	f7fe ffa3 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40022000 	.word	0x40022000
 8002180:	46020c00 	.word	0x46020c00
 8002184:	0800acb0 	.word	0x0800acb0
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002198:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <HAL_InitTick+0xdc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e05c      	b.n	800225e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80021a4:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_InitTick+0xe0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d10c      	bne.n	80021ca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80021b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <HAL_InitTick+0xe4>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <HAL_InitTick+0xdc>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e037      	b.n	800223a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80021ca:	f000 f9f3 	bl	80025b4 <HAL_SYSTICK_GetCLKSourceConfig>
 80021ce:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d023      	beq.n	800221e <HAL_InitTick+0x92>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d82d      	bhi.n	8002238 <HAL_InitTick+0xac>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_InitTick+0x5e>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d00d      	beq.n	8002204 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80021e8:	e026      	b.n	8002238 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80021ea:	4b21      	ldr	r3, [pc, #132]	@ (8002270 <HAL_InitTick+0xe4>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_InitTick+0xdc>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80021f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	60fb      	str	r3, [r7, #12]
        break;
 8002202:	e01a      	b.n	800223a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_InitTick+0xdc>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002212:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]
        break;
 800221c:	e00d      	b.n	800223a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0xdc>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002228:	fbb3 f3f2 	udiv	r3, r3, r2
 800222c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	60fb      	str	r3, [r7, #12]
        break;
 8002236:	e000      	b.n	800223a <HAL_InitTick+0xae>
        break;
 8002238:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f940 	bl	80024c0 <HAL_SYSTICK_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e009      	b.n	800225e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224a:	2200      	movs	r2, #0
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	f04f 30ff 	mov.w	r0, #4294967295
 8002252:	f000 f90d 	bl	8002470 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002256:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_InitTick+0xe8>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000001c 	.word	0x2000001c
 800226c:	e000e010 	.word	0xe000e010
 8002270:	20000000 	.word	0x20000000
 8002274:	20000018 	.word	0x20000018

08002278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	2000001c 	.word	0x2000001c
 800229c:	20000854 	.word	0x20000854

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000854 	.word	0x20000854

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000001c 	.word	0x2000001c

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	@ (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	@ (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	@ (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	@ 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ff4c 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800247e:	f7ff ff63 	bl	8002348 <__NVIC_GetPriorityGrouping>
 8002482:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	6978      	ldr	r0, [r7, #20]
 800248a:	f7ff ffb3 	bl	80023f4 <NVIC_EncodePriority>
 800248e:	4602      	mov	r2, r0
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff82 	bl	80023a0 <__NVIC_SetPriority>
}
 800249c:	bf00      	nop
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff56 	bl	8002364 <__NVIC_EnableIRQ>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00d      	b.n	80024f2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_SYSTICK_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_SYSTICK_Config+0x40>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_SYSTICK_Config+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <HAL_SYSTICK_Config+0x40>)
 80024ea:	f043 0303 	orr.w	r3, r3, #3
 80024ee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d844      	bhi.n	800259c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002512:	a201      	add	r2, pc, #4	@ (adr r2, 8002518 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	0800253b 	.word	0x0800253b
 800251c:	08002559 	.word	0x08002559
 8002520:	0800257b 	.word	0x0800257b
 8002524:	0800259d 	.word	0x0800259d
 8002528:	0800252d 	.word	0x0800252d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800252c:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1e      	ldr	r2, [pc, #120]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6013      	str	r3, [r2, #0]
      break;
 8002538:	e031      	b.n	800259e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800253a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002546:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254c:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800254e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002552:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002556:	e022      	b.n	800259e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a13      	ldr	r2, [pc, #76]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800255e:	f023 0304 	bic.w	r3, r3, #4
 8002562:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800256e:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002574:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002578:	e011      	b.n	800259e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800257a:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a0b      	ldr	r2, [pc, #44]	@ (80025ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002590:	4a07      	ldr	r2, [pc, #28]	@ (80025b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002592:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002596:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800259a:	e000      	b.n	800259e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800259c:	bf00      	nop
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010
 80025b0:	46020c00 	.word	0x46020c00

080025b4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80025c6:	2304      	movs	r3, #4
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	e021      	b.n	8002610 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80025d6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025de:	d011      	beq.n	8002604 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025e6:	d810      	bhi.n	800260a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f4:	d003      	beq.n	80025fe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80025f6:	e008      	b.n	800260a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
        break;
 80025fc:	e008      	b.n	8002610 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80025fe:	2301      	movs	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
        break;
 8002602:	e005      	b.n	8002610 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002604:	2302      	movs	r3, #2
 8002606:	607b      	str	r3, [r7, #4]
        break;
 8002608:	e002      	b.n	8002610 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
        break;
 800260e:	bf00      	nop
    }
  }
  return systick_source;
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010
 8002624:	46020c00 	.word	0x46020c00

08002628 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04f      	b.n	80026e0 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_DMA_Start_IT+0x26>
 800264a:	2302      	movs	r3, #2
 800264c:	e048      	b.n	80026e0 <HAL_DMA_Start_IT+0xb8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d136      	bne.n	80026d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f9d3 	bl	8002a22 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800268a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026ba:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e007      	b.n	80026e0 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	@ 0x40
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80026f8:	f023 030f 	bic.w	r3, r3, #15
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002706:	3b50      	subs	r3, #80	@ 0x50
 8002708:	09db      	lsrs	r3, r3, #7
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2201      	movs	r2, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 813b 	beq.w	800299e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002732:	2b00      	cmp	r3, #0
 8002734:	d011      	beq.n	800275a <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800274c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	f043 0201 	orr.w	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002764:	2b00      	cmp	r3, #0
 8002766:	d011      	beq.n	800278c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800277e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	f043 0202 	orr.w	r2, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d011      	beq.n	80027be <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027b0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d011      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027e2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	f043 0208 	orr.w	r2, r3, #8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00c      	beq.n	8002826 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002814:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d04c      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d045      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800284a:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b04      	cmp	r3, #4
 8002856:	d12e      	bne.n	80028b6 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002866:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0202 	orr.w	r2, r2, #2
 8002876:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002890:	2201      	movs	r2, #1
 8002892:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d07a      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
        }

        return;
 80028b4:	e075      	b.n	80029a2 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2205      	movs	r2, #5
 80028ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d039      	beq.n	8002950 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d032      	beq.n	8002950 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002906:	2b00      	cmp	r3, #0
 8002908:	d111      	bne.n	800292e <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002916:	2201      	movs	r2, #1
 8002918:	731a      	strb	r2, [r3, #12]
 800291a:	e008      	b.n	800292e <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002936:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	2b00      	cmp	r3, #0
 8002956:	d025      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0202 	orr.w	r2, r2, #2
 8002966:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	2201      	movs	r2, #1
 8002982:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e002      	b.n	80029a4 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80029a2:	bf00      	nop
    }
  }
}
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02b      	b.n	8002a16 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80029c6:	f023 030f 	bic.w	r3, r3, #15
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	3b50      	subs	r3, #80	@ 0x50
 80029d6:	09db      	lsrs	r3, r3, #7
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2201      	movs	r2, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f003 0311 	and.w	r3, r3, #17
 80029f4:	2b11      	cmp	r3, #17
 80029f6:	d106      	bne.n	8002a06 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	e006      	b.n	8002a14 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a36:	0c1b      	lsrs	r3, r3, #16
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	b291      	uxth	r1, r2
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	430b      	orrs	r3, r1
 8002a44:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002a4e:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff fc14 	bl	80022a0 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0db      	b.n	8002c3c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6e      	ldr	r2, [pc, #440]	@ (8002c44 <HAL_DMAEx_List_Init+0x1d8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	f000 809f 	beq.w	8002bce <HAL_DMAEx_List_Init+0x162>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6c      	ldr	r2, [pc, #432]	@ (8002c48 <HAL_DMAEx_List_Init+0x1dc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	f000 8099 	beq.w	8002bce <HAL_DMAEx_List_Init+0x162>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c4c <HAL_DMAEx_List_Init+0x1e0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f000 8093 	beq.w	8002bce <HAL_DMAEx_List_Init+0x162>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a68      	ldr	r2, [pc, #416]	@ (8002c50 <HAL_DMAEx_List_Init+0x1e4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	f000 808d 	beq.w	8002bce <HAL_DMAEx_List_Init+0x162>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a66      	ldr	r2, [pc, #408]	@ (8002c54 <HAL_DMAEx_List_Init+0x1e8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f000 8087 	beq.w	8002bce <HAL_DMAEx_List_Init+0x162>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a64      	ldr	r2, [pc, #400]	@ (8002c58 <HAL_DMAEx_List_Init+0x1ec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f000 8081 	beq.w	8002bce <HAL_DMAEx_List_Init+0x162>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a62      	ldr	r2, [pc, #392]	@ (8002c5c <HAL_DMAEx_List_Init+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d07b      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a61      	ldr	r2, [pc, #388]	@ (8002c60 <HAL_DMAEx_List_Init+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d076      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a5f      	ldr	r2, [pc, #380]	@ (8002c64 <HAL_DMAEx_List_Init+0x1f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d071      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a5e      	ldr	r2, [pc, #376]	@ (8002c68 <HAL_DMAEx_List_Init+0x1fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d06c      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5c      	ldr	r2, [pc, #368]	@ (8002c6c <HAL_DMAEx_List_Init+0x200>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d067      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5b      	ldr	r2, [pc, #364]	@ (8002c70 <HAL_DMAEx_List_Init+0x204>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d062      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a59      	ldr	r2, [pc, #356]	@ (8002c74 <HAL_DMAEx_List_Init+0x208>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d05d      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a58      	ldr	r2, [pc, #352]	@ (8002c78 <HAL_DMAEx_List_Init+0x20c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d058      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a56      	ldr	r2, [pc, #344]	@ (8002c7c <HAL_DMAEx_List_Init+0x210>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d053      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a55      	ldr	r2, [pc, #340]	@ (8002c80 <HAL_DMAEx_List_Init+0x214>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d04e      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a53      	ldr	r2, [pc, #332]	@ (8002c84 <HAL_DMAEx_List_Init+0x218>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d049      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a52      	ldr	r2, [pc, #328]	@ (8002c88 <HAL_DMAEx_List_Init+0x21c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d044      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a50      	ldr	r2, [pc, #320]	@ (8002c8c <HAL_DMAEx_List_Init+0x220>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d03f      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a4f      	ldr	r2, [pc, #316]	@ (8002c90 <HAL_DMAEx_List_Init+0x224>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d03a      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c94 <HAL_DMAEx_List_Init+0x228>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d035      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4c      	ldr	r2, [pc, #304]	@ (8002c98 <HAL_DMAEx_List_Init+0x22c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d030      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	@ (8002c9c <HAL_DMAEx_List_Init+0x230>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d02b      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a49      	ldr	r2, [pc, #292]	@ (8002ca0 <HAL_DMAEx_List_Init+0x234>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d026      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a47      	ldr	r2, [pc, #284]	@ (8002ca4 <HAL_DMAEx_List_Init+0x238>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d021      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a46      	ldr	r2, [pc, #280]	@ (8002ca8 <HAL_DMAEx_List_Init+0x23c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d01c      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a44      	ldr	r2, [pc, #272]	@ (8002cac <HAL_DMAEx_List_Init+0x240>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d017      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a43      	ldr	r2, [pc, #268]	@ (8002cb0 <HAL_DMAEx_List_Init+0x244>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d012      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a41      	ldr	r2, [pc, #260]	@ (8002cb4 <HAL_DMAEx_List_Init+0x248>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00d      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a40      	ldr	r2, [pc, #256]	@ (8002cb8 <HAL_DMAEx_List_Init+0x24c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d008      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8002cbc <HAL_DMAEx_List_Init+0x250>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d003      	beq.n	8002bce <HAL_DMAEx_List_Init+0x162>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc0 <HAL_DMAEx_List_Init+0x254>)
 8002bcc:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0206 	orr.w	r2, r2, #6
 8002bec:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002bee:	e00f      	b.n	8002c10 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002bf0:	f7ff fb56 	bl	80022a0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d908      	bls.n	8002c10 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2210      	movs	r2, #16
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2203      	movs	r2, #3
 8002c08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e015      	b.n	8002c3c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e8      	bne.n	8002bf0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 faba 	bl	8003198 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40020050 	.word	0x40020050
 8002c48:	50020050 	.word	0x50020050
 8002c4c:	400200d0 	.word	0x400200d0
 8002c50:	500200d0 	.word	0x500200d0
 8002c54:	40020150 	.word	0x40020150
 8002c58:	50020150 	.word	0x50020150
 8002c5c:	400201d0 	.word	0x400201d0
 8002c60:	500201d0 	.word	0x500201d0
 8002c64:	40020250 	.word	0x40020250
 8002c68:	50020250 	.word	0x50020250
 8002c6c:	400202d0 	.word	0x400202d0
 8002c70:	500202d0 	.word	0x500202d0
 8002c74:	40020350 	.word	0x40020350
 8002c78:	50020350 	.word	0x50020350
 8002c7c:	400203d0 	.word	0x400203d0
 8002c80:	500203d0 	.word	0x500203d0
 8002c84:	40020450 	.word	0x40020450
 8002c88:	50020450 	.word	0x50020450
 8002c8c:	400204d0 	.word	0x400204d0
 8002c90:	500204d0 	.word	0x500204d0
 8002c94:	40020550 	.word	0x40020550
 8002c98:	50020550 	.word	0x50020550
 8002c9c:	400205d0 	.word	0x400205d0
 8002ca0:	500205d0 	.word	0x500205d0
 8002ca4:	40020650 	.word	0x40020650
 8002ca8:	50020650 	.word	0x50020650
 8002cac:	400206d0 	.word	0x400206d0
 8002cb0:	500206d0 	.word	0x500206d0
 8002cb4:	40020750 	.word	0x40020750
 8002cb8:	50020750 	.word	0x50020750
 8002cbc:	400207d0 	.word	0x400207d0
 8002cc0:	500207d0 	.word	0x500207d0

08002cc4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_DMAEx_List_Start_IT+0x16>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e082      	b.n	8002de4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ce4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d005      	beq.n	8002d04 <HAL_DMAEx_List_Start_IT+0x40>
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d16a      	bne.n	8002dd4 <HAL_DMAEx_List_Start_IT+0x110>
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d067      	beq.n	8002dd4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d157      	bne.n	8002dc0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_DMAEx_List_Start_IT+0x5a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e062      	b.n	8002de4 <HAL_DMAEx_List_Start_IT+0x120>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d32:	2202      	movs	r2, #2
 8002d34:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002d52:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d6a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d82:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f107 010c 	add.w	r1, r7, #12
 8002d8e:	2200      	movs	r2, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd1d 	bl	80037d0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	0c0b      	lsrs	r3, r1, #16
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002db4:	4013      	ands	r3, r2
 8002db6:	68f9      	ldr	r1, [r7, #12]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e007      	b.n	8002de4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	@ 0x40
 8002dd8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_DMAEx_List_BuildNode+0x16>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e004      	b.n	8002e10 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fb1d 	bl	8003448 <DMA_List_BuildNode>

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	@ 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_DMAEx_List_InsertNode+0x18>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b6      	b.n	8002fa2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d104      	bne.n	8002e46 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2204      	movs	r2, #4
 8002e40:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0ad      	b.n	8002fa2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fc52 	bl	80036f8 <DMA_List_CheckNodesBaseAddresses>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e09e      	b.n	8002fa2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fc73 	bl	8003758 <DMA_List_CheckNodesTypes>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e08f      	b.n	8002fa2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2202      	movs	r2, #2
 8002e86:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8002e8e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002e92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fc99 	bl	80037d0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11a      	bne.n	8002edc <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	e06c      	b.n	8002f94 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ecc:	4319      	orrs	r1, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	e05b      	b.n	8002f94 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002eec:	4013      	ands	r3, r2
 8002eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ef2:	4319      	orrs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e043      	b.n	8002f8a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fc8e 	bl	8003830 <DMA_List_FindNode>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d132      	bne.n	8002f80 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d11a      	bne.n	8002f5a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	461a      	mov	r2, r3
 8002f32:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002f36:	4013      	ands	r3, r2
 8002f38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f3c:	4319      	orrs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f50:	4319      	orrs	r1, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f58:	e017      	b.n	8002f8a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8002f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002f70:	4013      	ands	r3, r2
 8002f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f76:	4319      	orrs	r1, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f7e:	e004      	b.n	8002f8a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2206      	movs	r2, #6
 8002f84:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00b      	b.n	8002fa2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3730      	adds	r7, #48	@ 0x30
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	@ 0x28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e052      	b.n	8003062 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d104      	bne.n	8002fce <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e049      	b.n	8003062 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e03d      	b.n	8003062 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e038      	b.n	8003062 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d104      	bne.n	8003002 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e02f      	b.n	8003062 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f107 0220 	add.w	r2, r7, #32
 8003016:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fbd8 	bl	80037d0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	461a      	mov	r2, r3
 800302a:	2100      	movs	r1, #0
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fbff 	bl	8003830 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800303c:	4013      	ands	r3, r2
 800303e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4610      	mov	r0, r2
 8003044:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003046:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003048:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3728      	adds	r7, #40	@ 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_DMAEx_List_LinkQ+0x16>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e072      	b.n	800316c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800308c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d002      	beq.n	80030a0 <HAL_DMAEx_List_LinkQ+0x34>
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d108      	bne.n	80030b2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2240      	movs	r2, #64	@ 0x40
 80030a4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e05c      	b.n	800316c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	7b1b      	ldrb	r3, [r3, #12]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d104      	bne.n	80030c6 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e052      	b.n	800316c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003178 <HAL_DMAEx_List_LinkQ+0x10c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <HAL_DMAEx_List_LinkQ+0xaa>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a29      	ldr	r2, [pc, #164]	@ (800317c <HAL_DMAEx_List_LinkQ+0x110>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01d      	beq.n	8003116 <HAL_DMAEx_List_LinkQ+0xaa>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a28      	ldr	r2, [pc, #160]	@ (8003180 <HAL_DMAEx_List_LinkQ+0x114>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d018      	beq.n	8003116 <HAL_DMAEx_List_LinkQ+0xaa>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a26      	ldr	r2, [pc, #152]	@ (8003184 <HAL_DMAEx_List_LinkQ+0x118>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_DMAEx_List_LinkQ+0xaa>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a25      	ldr	r2, [pc, #148]	@ (8003188 <HAL_DMAEx_List_LinkQ+0x11c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_DMAEx_List_LinkQ+0xaa>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a23      	ldr	r2, [pc, #140]	@ (800318c <HAL_DMAEx_List_LinkQ+0x120>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_DMAEx_List_LinkQ+0xaa>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a22      	ldr	r2, [pc, #136]	@ (8003190 <HAL_DMAEx_List_LinkQ+0x124>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_DMAEx_List_LinkQ+0xaa>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a20      	ldr	r2, [pc, #128]	@ (8003194 <HAL_DMAEx_List_LinkQ+0x128>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_DMAEx_List_LinkQ+0xae>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_DMAEx_List_LinkQ+0xb0>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2203      	movs	r2, #3
 8003132:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e019      	b.n	800316c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313c:	2b81      	cmp	r3, #129	@ 0x81
 800313e:	d108      	bne.n	8003152 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2204      	movs	r2, #4
 800314c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00c      	b.n	800316c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2204      	movs	r2, #4
 800315e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e003      	b.n	800316c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40020650 	.word	0x40020650
 800317c:	50020650 	.word	0x50020650
 8003180:	400206d0 	.word	0x400206d0
 8003184:	500206d0 	.word	0x500206d0
 8003188:	40020750 	.word	0x40020750
 800318c:	50020750 	.word	0x50020750
 8003190:	400207d0 	.word	0x400207d0
 8003194:	500207d0 	.word	0x500207d0

08003198 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a85      	ldr	r2, [pc, #532]	@ (80033c8 <DMA_List_Init+0x230>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f000 80a0 	beq.w	80032f8 <DMA_List_Init+0x160>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a83      	ldr	r2, [pc, #524]	@ (80033cc <DMA_List_Init+0x234>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	f000 809a 	beq.w	80032f8 <DMA_List_Init+0x160>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a81      	ldr	r2, [pc, #516]	@ (80033d0 <DMA_List_Init+0x238>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	f000 8094 	beq.w	80032f8 <DMA_List_Init+0x160>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7f      	ldr	r2, [pc, #508]	@ (80033d4 <DMA_List_Init+0x23c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f000 808e 	beq.w	80032f8 <DMA_List_Init+0x160>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a7d      	ldr	r2, [pc, #500]	@ (80033d8 <DMA_List_Init+0x240>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	f000 8088 	beq.w	80032f8 <DMA_List_Init+0x160>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7b      	ldr	r2, [pc, #492]	@ (80033dc <DMA_List_Init+0x244>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f000 8082 	beq.w	80032f8 <DMA_List_Init+0x160>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a79      	ldr	r2, [pc, #484]	@ (80033e0 <DMA_List_Init+0x248>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d07c      	beq.n	80032f8 <DMA_List_Init+0x160>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a78      	ldr	r2, [pc, #480]	@ (80033e4 <DMA_List_Init+0x24c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d077      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a76      	ldr	r2, [pc, #472]	@ (80033e8 <DMA_List_Init+0x250>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d072      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a75      	ldr	r2, [pc, #468]	@ (80033ec <DMA_List_Init+0x254>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d06d      	beq.n	80032f8 <DMA_List_Init+0x160>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a73      	ldr	r2, [pc, #460]	@ (80033f0 <DMA_List_Init+0x258>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d068      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a72      	ldr	r2, [pc, #456]	@ (80033f4 <DMA_List_Init+0x25c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d063      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a70      	ldr	r2, [pc, #448]	@ (80033f8 <DMA_List_Init+0x260>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d05e      	beq.n	80032f8 <DMA_List_Init+0x160>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6f      	ldr	r2, [pc, #444]	@ (80033fc <DMA_List_Init+0x264>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d059      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6d      	ldr	r2, [pc, #436]	@ (8003400 <DMA_List_Init+0x268>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d054      	beq.n	80032f8 <DMA_List_Init+0x160>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6c      	ldr	r2, [pc, #432]	@ (8003404 <DMA_List_Init+0x26c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04f      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6a      	ldr	r2, [pc, #424]	@ (8003408 <DMA_List_Init+0x270>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a69      	ldr	r2, [pc, #420]	@ (800340c <DMA_List_Init+0x274>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <DMA_List_Init+0x160>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a67      	ldr	r2, [pc, #412]	@ (8003410 <DMA_List_Init+0x278>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a66      	ldr	r2, [pc, #408]	@ (8003414 <DMA_List_Init+0x27c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a64      	ldr	r2, [pc, #400]	@ (8003418 <DMA_List_Init+0x280>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <DMA_List_Init+0x160>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a63      	ldr	r2, [pc, #396]	@ (800341c <DMA_List_Init+0x284>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <DMA_List_Init+0x160>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a61      	ldr	r2, [pc, #388]	@ (8003420 <DMA_List_Init+0x288>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <DMA_List_Init+0x160>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a60      	ldr	r2, [pc, #384]	@ (8003424 <DMA_List_Init+0x28c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003428 <DMA_List_Init+0x290>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5d      	ldr	r2, [pc, #372]	@ (800342c <DMA_List_Init+0x294>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003430 <DMA_List_Init+0x298>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003434 <DMA_List_Init+0x29c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a58      	ldr	r2, [pc, #352]	@ (8003438 <DMA_List_Init+0x2a0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a57      	ldr	r2, [pc, #348]	@ (800343c <DMA_List_Init+0x2a4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a55      	ldr	r2, [pc, #340]	@ (8003440 <DMA_List_Init+0x2a8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <DMA_List_Init+0x160>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a54      	ldr	r2, [pc, #336]	@ (8003444 <DMA_List_Init+0x2ac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <DMA_List_Init+0x164>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <DMA_List_Init+0x166>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	430a      	orrs	r2, r1
 800331e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003330:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a36      	ldr	r2, [pc, #216]	@ (8003428 <DMA_List_Init+0x290>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d022      	beq.n	800339a <DMA_List_Init+0x202>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a34      	ldr	r2, [pc, #208]	@ (800342c <DMA_List_Init+0x294>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01d      	beq.n	800339a <DMA_List_Init+0x202>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a33      	ldr	r2, [pc, #204]	@ (8003430 <DMA_List_Init+0x298>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d018      	beq.n	800339a <DMA_List_Init+0x202>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a31      	ldr	r2, [pc, #196]	@ (8003434 <DMA_List_Init+0x29c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <DMA_List_Init+0x202>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a30      	ldr	r2, [pc, #192]	@ (8003438 <DMA_List_Init+0x2a0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <DMA_List_Init+0x202>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2e      	ldr	r2, [pc, #184]	@ (800343c <DMA_List_Init+0x2a4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <DMA_List_Init+0x202>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2d      	ldr	r2, [pc, #180]	@ (8003440 <DMA_List_Init+0x2a8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <DMA_List_Init+0x202>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <DMA_List_Init+0x2ac>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <DMA_List_Init+0x206>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <DMA_List_Init+0x208>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2200      	movs	r2, #0
 80033b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2200      	movs	r2, #0
 80033ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40020050 	.word	0x40020050
 80033cc:	50020050 	.word	0x50020050
 80033d0:	400200d0 	.word	0x400200d0
 80033d4:	500200d0 	.word	0x500200d0
 80033d8:	40020150 	.word	0x40020150
 80033dc:	50020150 	.word	0x50020150
 80033e0:	400201d0 	.word	0x400201d0
 80033e4:	500201d0 	.word	0x500201d0
 80033e8:	40020250 	.word	0x40020250
 80033ec:	50020250 	.word	0x50020250
 80033f0:	400202d0 	.word	0x400202d0
 80033f4:	500202d0 	.word	0x500202d0
 80033f8:	40020350 	.word	0x40020350
 80033fc:	50020350 	.word	0x50020350
 8003400:	400203d0 	.word	0x400203d0
 8003404:	500203d0 	.word	0x500203d0
 8003408:	40020450 	.word	0x40020450
 800340c:	50020450 	.word	0x50020450
 8003410:	400204d0 	.word	0x400204d0
 8003414:	500204d0 	.word	0x500204d0
 8003418:	40020550 	.word	0x40020550
 800341c:	50020550 	.word	0x50020550
 8003420:	400205d0 	.word	0x400205d0
 8003424:	500205d0 	.word	0x500205d0
 8003428:	40020650 	.word	0x40020650
 800342c:	50020650 	.word	0x50020650
 8003430:	400206d0 	.word	0x400206d0
 8003434:	500206d0 	.word	0x500206d0
 8003438:	40020750 	.word	0x40020750
 800343c:	50020750 	.word	0x50020750
 8003440:	400207d0 	.word	0x400207d0
 8003444:	500207d0 	.word	0x500207d0

08003448 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800345a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003460:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003466:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800346c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d017      	beq.n	80034ae <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	3b01      	subs	r3, #1
 8003492:	051b      	lsls	r3, r3, #20
 8003494:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003498:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	3b01      	subs	r3, #1
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80034a6:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80034a8:	431a      	orrs	r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	f240 237f 	movw	r3, #639	@ 0x27f
 80034ba:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80034bc:	431a      	orrs	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d10c      	bne.n	80034e6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d011      	beq.n	80034fc <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	e00a      	b.n	80034fc <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ee:	d105      	bne.n	80034fc <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00f      	beq.n	8003524 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800351c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800351e:	431a      	orrs	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003528:	b29a      	uxth	r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d04e      	beq.n	80035d8 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003542:	3b01      	subs	r3, #1
 8003544:	0419      	lsls	r1, r3, #16
 8003546:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <DMA_List_BuildNode+0x2a8>)
 8003548:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800354a:	431a      	orrs	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003554:	2b00      	cmp	r3, #0
 8003556:	da06      	bge.n	8003566 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e005      	b.n	8003572 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003576:	2b00      	cmp	r3, #0
 8003578:	da06      	bge.n	8003588 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	e005      	b.n	8003594 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003598:	2b00      	cmp	r3, #0
 800359a:	da06      	bge.n	80035aa <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	e005      	b.n	80035b6 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da06      	bge.n	80035cc <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	e005      	b.n	80035d8 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d05d      	beq.n	80036b0 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	da09      	bge.n	8003610 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003600:	425b      	negs	r3, r3
 8003602:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	615a      	str	r2, [r3, #20]
 800360e:	e005      	b.n	800361c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003614:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	2b00      	cmp	r3, #0
 8003622:	da0d      	bge.n	8003640 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	425b      	negs	r3, r3
 800362a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	0419      	lsls	r1, r3, #16
 8003634:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <DMA_List_BuildNode+0x2ac>)
 8003636:	400b      	ands	r3, r1
 8003638:	431a      	orrs	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	615a      	str	r2, [r3, #20]
 800363e:	e009      	b.n	8003654 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	0419      	lsls	r1, r3, #16
 800364a:	4b2a      	ldr	r3, [pc, #168]	@ (80036f4 <DMA_List_BuildNode+0x2ac>)
 800364c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800364e:	431a      	orrs	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003658:	2b00      	cmp	r3, #0
 800365a:	da08      	bge.n	800366e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003660:	425b      	negs	r3, r3
 8003662:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	b29a      	uxth	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	619a      	str	r2, [r3, #24]
 800366c:	e004      	b.n	8003678 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003672:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367c:	2b00      	cmp	r3, #0
 800367e:	da0b      	bge.n	8003698 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	425b      	negs	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003690:	431a      	orrs	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	619a      	str	r2, [r3, #24]
 8003696:	e007      	b.n	80036a8 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80036a2:	431a      	orrs	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
 80036ae:	e002      	b.n	80036b6 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80036d6:	e005      	b.n	80036e4 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	07ff0000 	.word	0x07ff0000
 80036f4:	1fff0000 	.word	0x1fff0000

080036f8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4313      	orrs	r3, r2
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e00a      	b.n	800373a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e004      	b.n	800373a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	429a      	cmp	r2, r3
 8003744:	d001      	beq.n	800374a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e00e      	b.n	8003796 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e006      	b.n	8003796 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80037a8:	2302      	movs	r3, #2
 80037aa:	e00b      	b.n	80037c4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80037be:	2303      	movs	r3, #3
 80037c0:	e000      	b.n	80037c4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003828 <DMA_List_GetCLLRNodeInfo+0x58>)
 80037f2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00f      	beq.n	800381a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2207      	movs	r2, #7
 80037fe:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003800:	e00b      	b.n	800381a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4a08      	ldr	r2, [pc, #32]	@ (800382c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800380c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2205      	movs	r2, #5
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	fe010000 	.word	0xfe010000
 800382c:	f8010000 	.word	0xf8010000

08003830 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	@ 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d142      	bne.n	80038da <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003854:	e01d      	b.n	8003892 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e00f      	b.n	800388c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4413      	add	r3, r2
 800387c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003884:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3301      	adds	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	429a      	cmp	r2, r3
 800389a:	d3dc      	bcc.n	8003856 <DMA_List_FindNode+0x26>
 800389c:	e029      	b.n	80038f2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d107      	bne.n	80038b4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e00f      	b.n	80038d4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80038cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d206      	bcs.n	80038f2 <DMA_List_FindNode+0xc2>
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038ea:	4013      	ands	r3, r2
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d1d5      	bne.n	800389e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038fe:	4013      	ands	r3, r2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	429a      	cmp	r2, r3
 8003904:	d001      	beq.n	800390a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003906:	2301      	movs	r3, #1
 8003908:	e02b      	b.n	8003962 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	461a      	mov	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00f      	beq.n	8003960 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	461a      	mov	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003950:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	@ 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	460b      	mov	r3, r1
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003980:	7afb      	ldrb	r3, [r7, #11]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d011      	beq.n	80039aa <HAL_EXTI_RegisterCallback+0x3c>
 8003986:	2b02      	cmp	r3, #2
 8003988:	dc13      	bgt.n	80039b2 <HAL_EXTI_RegisterCallback+0x44>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_EXTI_RegisterCallback+0x26>
 800398e:	2b01      	cmp	r3, #1
 8003990:	d007      	beq.n	80039a2 <HAL_EXTI_RegisterCallback+0x34>
 8003992:	e00e      	b.n	80039b2 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e00a      	b.n	80039b8 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	605a      	str	r2, [r3, #4]
      break;
 80039a8:	e006      	b.n	80039b8 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	609a      	str	r2, [r3, #8]
      break;
 80039b0:	e002      	b.n	80039b8 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
      break;
 80039b6:	bf00      	nop
  }

  return status;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e003      	b.n	80039e2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	4b17      	ldr	r3, [pc, #92]	@ (8003a78 <HAL_EXTI_IRQHandler+0x88>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <HAL_EXTI_IRQHandler+0x8c>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4798      	blx	r3
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	4602200c 	.word	0x4602200c
 8003a7c:	46022010 	.word	0x46022010

08003a80 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a92:	e1ba      	b.n	8003e0a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 81aa 	beq.w	8003e04 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a55      	ldr	r2, [pc, #340]	@ (8003c08 <HAL_GPIO_Init+0x188>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d15d      	bne.n	8003b74 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0201 	and.w	r2, r3, #1
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003ae8:	4a48      	ldr	r2, [pc, #288]	@ (8003c0c <HAL_GPIO_Init+0x18c>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003af0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003af2:	4a46      	ldr	r2, [pc, #280]	@ (8003c0c <HAL_GPIO_Init+0x18c>)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3208      	adds	r2, #8
 8003b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220b      	movs	r2, #11
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	08da      	lsrs	r2, r3, #3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3208      	adds	r2, #8
 8003b3e:	69f9      	ldr	r1, [r7, #28]
 8003b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2202      	movs	r2, #2
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e067      	b.n	8003c44 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x104>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b12      	cmp	r3, #18
 8003b82:	d145      	bne.n	8003c10 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	08da      	lsrs	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3208      	adds	r2, #8
 8003bca:	69f9      	ldr	r1, [r7, #28]
 8003bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0203 	and.w	r2, r3, #3
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e01e      	b.n	8003c44 <HAL_GPIO_Init+0x1c4>
 8003c06:	bf00      	nop
 8003c08:	46020000 	.word	0x46020000
 8003c0c:	0800ad0c 	.word	0x0800ad0c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0203 	and.w	r2, r3, #3
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d00b      	beq.n	8003c64 <HAL_GPIO_Init+0x1e4>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d007      	beq.n	8003c64 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c58:	2b11      	cmp	r3, #17
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b12      	cmp	r3, #18
 8003c62:	d130      	bne.n	8003cc6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	f003 0201 	and.w	r2, r3, #1
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d017      	beq.n	8003cfe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d07c      	beq.n	8003e04 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003d0a:	4a47      	ldr	r2, [pc, #284]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3318      	adds	r3, #24
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0a9a      	lsrs	r2, r3, #10
 8003d32:	4b3e      	ldr	r3, [pc, #248]	@ (8003e2c <HAL_GPIO_Init+0x3ac>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	f002 0203 	and.w	r2, r2, #3
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	4093      	lsls	r3, r2
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003d46:	4938      	ldr	r1, [pc, #224]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3318      	adds	r3, #24
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003d54:	4b34      	ldr	r3, [pc, #208]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003da2:	4a21      	ldr	r2, [pc, #132]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003da8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003dce:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003dd6:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f47f ae3d 	bne.w	8003a94 <HAL_GPIO_Init+0x14>
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	3724      	adds	r7, #36	@ 0x24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	46022000 	.word	0x46022000
 8003e2c:	002f7f7f 	.word	0x002f7f7f

08003e30 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	e007      	b.n	8003e5e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003e4e:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 0204 	bic.w	r2, r3, #4
 8003e56:	4905      	ldr	r1, [pc, #20]	@ (8003e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40030400 	.word	0x40030400

08003e70 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_ICACHE_Enable+0x1c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a04      	ldr	r2, [pc, #16]	@ (8003e8c <HAL_ICACHE_Enable+0x1c>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40030400 	.word	0x40030400

08003e90 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003e98:	4b39      	ldr	r3, [pc, #228]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ea0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d905      	bls.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003eb2:	4b33      	ldr	r3, [pc, #204]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4a32      	ldr	r2, [pc, #200]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ebc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e057      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec8:	d90a      	bls.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003eca:	4b2d      	ldr	r3, [pc, #180]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003edc:	60d3      	str	r3, [r2, #12]
 8003ede:	e007      	b.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003ee0:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003ee8:	4925      	ldr	r1, [pc, #148]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003ef0:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a24      	ldr	r2, [pc, #144]	@ (8003f88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	099b      	lsrs	r3, r3, #6
 8003efc:	2232      	movs	r2, #50	@ 0x32
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	4a21      	ldr	r2, [pc, #132]	@ (8003f88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f0e:	e002      	b.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f16:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f3      	bne.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01b      	beq.n	8003f66 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	2232      	movs	r2, #50	@ 0x32
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	4a11      	ldr	r2, [pc, #68]	@ (8003f88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	3301      	adds	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f4c:	e002      	b.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f54:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f3      	bne.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e000      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	46020800 	.word	0x46020800
 8003f84:	20000000 	.word	0x20000000
 8003f88:	10624dd3 	.word	0x10624dd3

08003f8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003f90:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	46020800 	.word	0x46020800

08003fa8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fb0:	4b22      	ldr	r3, [pc, #136]	@ (800403c <HAL_PWREx_ConfigSupply+0x94>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	@ (8004040 <HAL_PWREx_ConfigSupply+0x98>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2232      	movs	r2, #50	@ 0x32
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004040 <HAL_PWREx_ConfigSupply+0x98>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d113      	bne.n	8003ffc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8004044 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fda:	f023 0302 	bic.w	r3, r3, #2
 8003fde:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fe0:	e002      	b.n	8003fe8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fe8:	4b16      	ldr	r3, [pc, #88]	@ (8004044 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d116      	bne.n	8004022 <HAL_PWREx_ConfigSupply+0x7a>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f3      	bne.n	8003fe2 <HAL_PWREx_ConfigSupply+0x3a>
 8003ffa:	e012      	b.n	8004022 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003ffc:	4b11      	ldr	r3, [pc, #68]	@ (8004044 <HAL_PWREx_ConfigSupply+0x9c>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4a10      	ldr	r2, [pc, #64]	@ (8004044 <HAL_PWREx_ConfigSupply+0x9c>)
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004008:	e002      	b.n	8004010 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b01      	subs	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004010:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <HAL_PWREx_ConfigSupply+0x9c>)
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <HAL_PWREx_ConfigSupply+0x7a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f3      	bne.n	800400a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e000      	b.n	800402e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000000 	.word	0x20000000
 8004040:	10624dd3 	.word	0x10624dd3
 8004044:	46020800 	.word	0x46020800

08004048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08e      	sub	sp, #56	@ 0x38
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004050:	2300      	movs	r3, #0
 8004052:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f000 bec8 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004062:	4b99      	ldr	r3, [pc, #612]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406c:	4b96      	ldr	r3, [pc, #600]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 816c 	beq.w	800435c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_RCC_OscConfig+0x52>
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	2b0c      	cmp	r3, #12
 800408e:	f040 80de 	bne.w	800424e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 80da 	bne.w	800424e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f000 bea5 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ac:	4b86      	ldr	r3, [pc, #536]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <HAL_RCC_OscConfig+0x7a>
 80040b8:	4b83      	ldr	r3, [pc, #524]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80040c0:	e005      	b.n	80040ce <HAL_RCC_OscConfig+0x86>
 80040c2:	4b81      	ldr	r3, [pc, #516]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80040c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d255      	bcs.n	800417e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 f9d9 	bl	8005494 <RCC_SetFlashLatencyFromMSIRange>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f000 be82 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80040ee:	4b76      	ldr	r3, [pc, #472]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	4a75      	ldr	r2, [pc, #468]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80040f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040f8:	6093      	str	r3, [r2, #8]
 80040fa:	4b73      	ldr	r3, [pc, #460]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	4970      	ldr	r1, [pc, #448]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004114:	d309      	bcc.n	800412a <HAL_RCC_OscConfig+0xe2>
 8004116:	4b6c      	ldr	r3, [pc, #432]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f023 021f 	bic.w	r2, r3, #31
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4969      	ldr	r1, [pc, #420]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004124:	4313      	orrs	r3, r2
 8004126:	60cb      	str	r3, [r1, #12]
 8004128:	e07e      	b.n	8004228 <HAL_RCC_OscConfig+0x1e0>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	da0a      	bge.n	8004148 <HAL_RCC_OscConfig+0x100>
 8004132:	4b65      	ldr	r3, [pc, #404]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	015b      	lsls	r3, r3, #5
 8004140:	4961      	ldr	r1, [pc, #388]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004142:	4313      	orrs	r3, r2
 8004144:	60cb      	str	r3, [r1, #12]
 8004146:	e06f      	b.n	8004228 <HAL_RCC_OscConfig+0x1e0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004150:	d30a      	bcc.n	8004168 <HAL_RCC_OscConfig+0x120>
 8004152:	4b5d      	ldr	r3, [pc, #372]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	029b      	lsls	r3, r3, #10
 8004160:	4959      	ldr	r1, [pc, #356]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004162:	4313      	orrs	r3, r2
 8004164:	60cb      	str	r3, [r1, #12]
 8004166:	e05f      	b.n	8004228 <HAL_RCC_OscConfig+0x1e0>
 8004168:	4b57      	ldr	r3, [pc, #348]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	03db      	lsls	r3, r3, #15
 8004176:	4954      	ldr	r1, [pc, #336]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004178:	4313      	orrs	r3, r2
 800417a:	60cb      	str	r3, [r1, #12]
 800417c:	e054      	b.n	8004228 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800417e:	4b52      	ldr	r3, [pc, #328]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4a51      	ldr	r2, [pc, #324]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004184:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004188:	6093      	str	r3, [r2, #8]
 800418a:	4b4f      	ldr	r3, [pc, #316]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	494c      	ldr	r1, [pc, #304]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041a4:	d309      	bcc.n	80041ba <HAL_RCC_OscConfig+0x172>
 80041a6:	4b48      	ldr	r3, [pc, #288]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f023 021f 	bic.w	r2, r3, #31
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	4945      	ldr	r1, [pc, #276]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60cb      	str	r3, [r1, #12]
 80041b8:	e028      	b.n	800420c <HAL_RCC_OscConfig+0x1c4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	2b00      	cmp	r3, #0
 80041c0:	da0a      	bge.n	80041d8 <HAL_RCC_OscConfig+0x190>
 80041c2:	4b41      	ldr	r3, [pc, #260]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	015b      	lsls	r3, r3, #5
 80041d0:	493d      	ldr	r1, [pc, #244]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60cb      	str	r3, [r1, #12]
 80041d6:	e019      	b.n	800420c <HAL_RCC_OscConfig+0x1c4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e0:	d30a      	bcc.n	80041f8 <HAL_RCC_OscConfig+0x1b0>
 80041e2:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4935      	ldr	r1, [pc, #212]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60cb      	str	r3, [r1, #12]
 80041f6:	e009      	b.n	800420c <HAL_RCC_OscConfig+0x1c4>
 80041f8:	4b33      	ldr	r3, [pc, #204]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	03db      	lsls	r3, r3, #15
 8004206:	4930      	ldr	r1, [pc, #192]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	4618      	mov	r0, r3
 8004218:	f001 f93c 	bl	8005494 <RCC_SetFlashLatencyFromMSIRange>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f000 bde5 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004228:	f001 f8de 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800422c:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <HAL_RCC_OscConfig+0x284>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd ffab 	bl	800218c <HAL_InitTick>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800423c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 808a 	beq.w	800435a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800424a:	f000 bdd2 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d066      	beq.n	8004324 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004256:	4b1c      	ldr	r3, [pc, #112]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1b      	ldr	r2, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004262:	f7fe f81d 	bl	80022a0 <HAL_GetTick>
 8004266:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004268:	e009      	b.n	800427e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800426a:	f7fe f819 	bl	80022a0 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d902      	bls.n	800427e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	f000 bdba 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800427e:	4b12      	ldr	r3, [pc, #72]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ef      	beq.n	800426a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800428a:	4b0f      	ldr	r3, [pc, #60]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a0e      	ldr	r2, [pc, #56]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004290:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004294:	6093      	str	r3, [r2, #8]
 8004296:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	4909      	ldr	r1, [pc, #36]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80042b0:	d30e      	bcc.n	80042d0 <HAL_RCC_OscConfig+0x288>
 80042b2:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f023 021f 	bic.w	r2, r3, #31
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	4902      	ldr	r1, [pc, #8]	@ (80042c8 <HAL_RCC_OscConfig+0x280>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60cb      	str	r3, [r1, #12]
 80042c4:	e04a      	b.n	800435c <HAL_RCC_OscConfig+0x314>
 80042c6:	bf00      	nop
 80042c8:	46020c00 	.word	0x46020c00
 80042cc:	20000018 	.word	0x20000018
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da0a      	bge.n	80042ee <HAL_RCC_OscConfig+0x2a6>
 80042d8:	4b98      	ldr	r3, [pc, #608]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	015b      	lsls	r3, r3, #5
 80042e6:	4995      	ldr	r1, [pc, #596]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
 80042ec:	e036      	b.n	800435c <HAL_RCC_OscConfig+0x314>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f6:	d30a      	bcc.n	800430e <HAL_RCC_OscConfig+0x2c6>
 80042f8:	4b90      	ldr	r3, [pc, #576]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	498d      	ldr	r1, [pc, #564]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004308:	4313      	orrs	r3, r2
 800430a:	60cb      	str	r3, [r1, #12]
 800430c:	e026      	b.n	800435c <HAL_RCC_OscConfig+0x314>
 800430e:	4b8b      	ldr	r3, [pc, #556]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	03db      	lsls	r3, r3, #15
 800431c:	4987      	ldr	r1, [pc, #540]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	60cb      	str	r3, [r1, #12]
 8004322:	e01b      	b.n	800435c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004324:	4b85      	ldr	r3, [pc, #532]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a84      	ldr	r2, [pc, #528]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004330:	f7fd ffb6 	bl	80022a0 <HAL_GetTick>
 8004334:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004336:	e009      	b.n	800434c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004338:	f7fd ffb2 	bl	80022a0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	f000 bd53 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800434c:	4b7b      	ldr	r3, [pc, #492]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ef      	bne.n	8004338 <HAL_RCC_OscConfig+0x2f0>
 8004358:	e000      	b.n	800435c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800435a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 808b 	beq.w	8004480 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	2b08      	cmp	r3, #8
 800436e:	d005      	beq.n	800437c <HAL_RCC_OscConfig+0x334>
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d109      	bne.n	800438a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	2b03      	cmp	r3, #3
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d17d      	bne.n	8004480 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f000 bd34 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x35a>
 8004394:	4b69      	ldr	r3, [pc, #420]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a68      	ldr	r2, [pc, #416]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e041      	b.n	8004426 <HAL_RCC_OscConfig+0x3de>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043aa:	d112      	bne.n	80043d2 <HAL_RCC_OscConfig+0x38a>
 80043ac:	4b63      	ldr	r3, [pc, #396]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a62      	ldr	r2, [pc, #392]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b60      	ldr	r3, [pc, #384]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a5f      	ldr	r2, [pc, #380]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b5d      	ldr	r3, [pc, #372]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5c      	ldr	r2, [pc, #368]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	e029      	b.n	8004426 <HAL_RCC_OscConfig+0x3de>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80043da:	d112      	bne.n	8004402 <HAL_RCC_OscConfig+0x3ba>
 80043dc:	4b57      	ldr	r3, [pc, #348]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a56      	ldr	r2, [pc, #344]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b54      	ldr	r3, [pc, #336]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a53      	ldr	r2, [pc, #332]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b51      	ldr	r3, [pc, #324]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a50      	ldr	r2, [pc, #320]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e011      	b.n	8004426 <HAL_RCC_OscConfig+0x3de>
 8004402:	4b4e      	ldr	r3, [pc, #312]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4d      	ldr	r2, [pc, #308]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4a      	ldr	r2, [pc, #296]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004414:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b48      	ldr	r3, [pc, #288]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a47      	ldr	r2, [pc, #284]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004420:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004424:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d014      	beq.n	8004458 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800442e:	f7fd ff37 	bl	80022a0 <HAL_GetTick>
 8004432:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004434:	e009      	b.n	800444a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004436:	f7fd ff33 	bl	80022a0 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b64      	cmp	r3, #100	@ 0x64
 8004442:	d902      	bls.n	800444a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	f000 bcd4 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444a:	4b3c      	ldr	r3, [pc, #240]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0ef      	beq.n	8004436 <HAL_RCC_OscConfig+0x3ee>
 8004456:	e013      	b.n	8004480 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004458:	f7fd ff22 	bl	80022a0 <HAL_GetTick>
 800445c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800445e:	e009      	b.n	8004474 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fd ff1e 	bl	80022a0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	@ 0x64
 800446c:	d902      	bls.n	8004474 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	f000 bcbf 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004474:	4b31      	ldr	r3, [pc, #196]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ef      	bne.n	8004460 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05f      	beq.n	800454c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448e:	2b04      	cmp	r3, #4
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x456>
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d114      	bne.n	80044c2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	2b02      	cmp	r3, #2
 800449c:	d111      	bne.n	80044c2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f000 bca3 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80044ac:	4b23      	ldr	r3, [pc, #140]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	4920      	ldr	r1, [pc, #128]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80044c0:	e044      	b.n	800454c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d024      	beq.n	8004514 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80044ca:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80044d6:	f7fd fee3 	bl	80022a0 <HAL_GetTick>
 80044da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044dc:	e009      	b.n	80044f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044de:	f7fd fedf 	bl	80022a0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d902      	bls.n	80044f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	f000 bc80 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f2:	4b12      	ldr	r3, [pc, #72]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ef      	beq.n	80044de <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b0f      	ldr	r3, [pc, #60]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	490b      	ldr	r1, [pc, #44]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800450e:	4313      	orrs	r3, r2
 8004510:	610b      	str	r3, [r1, #16]
 8004512:	e01b      	b.n	800454c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004514:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a08      	ldr	r2, [pc, #32]	@ (800453c <HAL_RCC_OscConfig+0x4f4>)
 800451a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004520:	f7fd febe 	bl	80022a0 <HAL_GetTick>
 8004524:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004528:	f7fd feba 	bl	80022a0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d904      	bls.n	8004540 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	f000 bc5b 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
 800453c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004540:	4baf      	ldr	r3, [pc, #700]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ed      	bne.n	8004528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80c8 	beq.w	80046ea <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004560:	4ba7      	ldr	r3, [pc, #668]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d111      	bne.n	8004592 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456e:	4ba4      	ldr	r3, [pc, #656]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004574:	4aa2      	ldr	r2, [pc, #648]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004576:	f043 0304 	orr.w	r3, r3, #4
 800457a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800457e:	4ba0      	ldr	r3, [pc, #640]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004592:	4b9c      	ldr	r3, [pc, #624]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d119      	bne.n	80045d2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800459e:	4b99      	ldr	r3, [pc, #612]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	4a98      	ldr	r2, [pc, #608]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045aa:	f7fd fe79 	bl	80022a0 <HAL_GetTick>
 80045ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045b0:	e009      	b.n	80045c6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7fd fe75 	bl	80022a0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d902      	bls.n	80045c6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	f000 bc16 	b.w	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ef      	beq.n	80045b2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d05f      	beq.n	800469a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80045da:	4b89      	ldr	r3, [pc, #548]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80045dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045e0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d037      	beq.n	8004660 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d006      	beq.n	8004608 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e3f4      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01b      	beq.n	800464a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004612:	4b7b      	ldr	r3, [pc, #492]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004618:	4a79      	ldr	r2, [pc, #484]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800461a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800461e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004622:	f7fd fe3d 	bl	80022a0 <HAL_GetTick>
 8004626:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462a:	f7fd fe39 	bl	80022a0 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b05      	cmp	r3, #5
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e3da      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800463c:	4b70      	ldr	r3, [pc, #448]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800463e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ef      	bne.n	800462a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800464a:	4b6d      	ldr	r3, [pc, #436]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800464c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004650:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	4969      	ldr	r1, [pc, #420]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004660:	4b67      	ldr	r3, [pc, #412]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004666:	4a66      	ldr	r2, [pc, #408]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800466c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004670:	f7fd fe16 	bl	80022a0 <HAL_GetTick>
 8004674:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004678:	f7fd fe12 	bl	80022a0 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b05      	cmp	r3, #5
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e3b3      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800468a:	4b5d      	ldr	r3, [pc, #372]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800468c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ef      	beq.n	8004678 <HAL_RCC_OscConfig+0x630>
 8004698:	e01b      	b.n	80046d2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800469a:	4b59      	ldr	r3, [pc, #356]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800469c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a0:	4a57      	ldr	r2, [pc, #348]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80046a2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80046a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80046aa:	f7fd fdf9 	bl	80022a0 <HAL_GetTick>
 80046ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b2:	f7fd fdf5 	bl	80022a0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e396      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80046c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ef      	bne.n	80046b2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046da:	4b49      	ldr	r3, [pc, #292]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80046dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e0:	4a47      	ldr	r2, [pc, #284]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80046e2:	f023 0304 	bic.w	r3, r3, #4
 80046e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8111 	beq.w	800491a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b40      	ldr	r3, [pc, #256]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d111      	bne.n	8004730 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470c:	4b3c      	ldr	r3, [pc, #240]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004712:	4a3b      	ldr	r2, [pc, #236]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800471c:	4b38      	ldr	r3, [pc, #224]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800471e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004730:	4b34      	ldr	r3, [pc, #208]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d118      	bne.n	800476e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800473c:	4b31      	ldr	r3, [pc, #196]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	4a30      	ldr	r2, [pc, #192]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004748:	f7fd fdaa 	bl	80022a0 <HAL_GetTick>
 800474c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004750:	f7fd fda6 	bl	80022a0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e347      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004762:	4b28      	ldr	r3, [pc, #160]	@ (8004804 <HAL_RCC_OscConfig+0x7bc>)
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01f      	beq.n	80047ba <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004786:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800478c:	4a1c      	ldr	r2, [pc, #112]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004796:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 8004798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800479c:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047a6:	e018      	b.n	80047da <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047a8:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80047aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ae:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047b8:	e00f      	b.n	80047da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047ba:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80047bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80047cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004800 <HAL_RCC_OscConfig+0x7b8>)
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d057      	beq.n	8004892 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80047e2:	f7fd fd5d 	bl	80022a0 <HAL_GetTick>
 80047e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e8:	e00e      	b.n	8004808 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd fd59 	bl	80022a0 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d905      	bls.n	8004808 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e2f8      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
 8004800:	46020c00 	.word	0x46020c00
 8004804:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004808:	4b9c      	ldr	r3, [pc, #624]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 800480a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0e9      	beq.n	80047ea <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01b      	beq.n	800485a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004822:	4b96      	ldr	r3, [pc, #600]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004828:	4a94      	ldr	r2, [pc, #592]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 800482a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fd fd34 	bl	80022a0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e2d3      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800484a:	4b8c      	ldr	r3, [pc, #560]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 800484c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ed      	beq.n	8004834 <HAL_RCC_OscConfig+0x7ec>
 8004858:	e053      	b.n	8004902 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800485a:	4b88      	ldr	r3, [pc, #544]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 800485c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004860:	4a86      	ldr	r2, [pc, #536]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004866:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd fd18 	bl	80022a0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e2b7      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004882:	4b7e      	ldr	r3, [pc, #504]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ed      	bne.n	800486c <HAL_RCC_OscConfig+0x824>
 8004890:	e037      	b.n	8004902 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004892:	f7fd fd05 	bl	80022a0 <HAL_GetTick>
 8004896:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd fd01 	bl	80022a0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e2a0      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b0:	4b72      	ldr	r3, [pc, #456]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80048b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ed      	bne.n	800489a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80048be:	4b6f      	ldr	r3, [pc, #444]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80048c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01a      	beq.n	8004902 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048cc:	4b6b      	ldr	r3, [pc, #428]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80048ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048d2:	4a6a      	ldr	r2, [pc, #424]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80048d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fd fcdf 	bl	80022a0 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e27e      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048f4:	4b61      	ldr	r3, [pc, #388]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80048f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ed      	bne.n	80048de <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004902:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 800490c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004910:	4a5a      	ldr	r2, [pc, #360]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004912:	f023 0304 	bic.w	r3, r3, #4
 8004916:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d036      	beq.n	8004994 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d019      	beq.n	8004962 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800492e:	4b53      	ldr	r3, [pc, #332]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a52      	ldr	r2, [pc, #328]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004938:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800493a:	f7fd fcb1 	bl	80022a0 <HAL_GetTick>
 800493e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004942:	f7fd fcad 	bl	80022a0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e24e      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004954:	4b49      	ldr	r3, [pc, #292]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x8fa>
 8004960:	e018      	b.n	8004994 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004962:	4b46      	ldr	r3, [pc, #280]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a45      	ldr	r2, [pc, #276]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004968:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800496c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800496e:	f7fd fc97 	bl	80022a0 <HAL_GetTick>
 8004972:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004976:	f7fd fc93 	bl	80022a0 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e234      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004988:	4b3c      	ldr	r3, [pc, #240]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f0      	bne.n	8004976 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d036      	beq.n	8004a0e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d019      	beq.n	80049dc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80049a8:	4b34      	ldr	r3, [pc, #208]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a33      	ldr	r2, [pc, #204]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80049ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049b4:	f7fd fc74 	bl	80022a0 <HAL_GetTick>
 80049b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80049bc:	f7fd fc70 	bl	80022a0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e211      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80049ce:	4b2b      	ldr	r3, [pc, #172]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x974>
 80049da:	e018      	b.n	8004a0e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80049dc:	4b27      	ldr	r3, [pc, #156]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a26      	ldr	r2, [pc, #152]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 80049e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049e8:	f7fd fc5a 	bl	80022a0 <HAL_GetTick>
 80049ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80049f0:	f7fd fc56 	bl	80022a0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1f7      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a02:	4b1e      	ldr	r3, [pc, #120]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d07f      	beq.n	8004b1a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d062      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004a22:	4b16      	ldr	r3, [pc, #88]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	4a15      	ldr	r2, [pc, #84]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a2c:	6093      	str	r3, [r2, #8]
 8004a2e:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3a:	4910      	ldr	r1, [pc, #64]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a48:	d309      	bcc.n	8004a5e <HAL_RCC_OscConfig+0xa16>
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f023 021f 	bic.w	r2, r3, #31
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4909      	ldr	r1, [pc, #36]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60cb      	str	r3, [r1, #12]
 8004a5c:	e02a      	b.n	8004ab4 <HAL_RCC_OscConfig+0xa6c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da0c      	bge.n	8004a80 <HAL_RCC_OscConfig+0xa38>
 8004a66:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	015b      	lsls	r3, r3, #5
 8004a74:	4901      	ldr	r1, [pc, #4]	@ (8004a7c <HAL_RCC_OscConfig+0xa34>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60cb      	str	r3, [r1, #12]
 8004a7a:	e01b      	b.n	8004ab4 <HAL_RCC_OscConfig+0xa6c>
 8004a7c:	46020c00 	.word	0x46020c00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a88:	d30a      	bcc.n	8004aa0 <HAL_RCC_OscConfig+0xa58>
 8004a8a:	4ba1      	ldr	r3, [pc, #644]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	029b      	lsls	r3, r3, #10
 8004a98:	499d      	ldr	r1, [pc, #628]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60cb      	str	r3, [r1, #12]
 8004a9e:	e009      	b.n	8004ab4 <HAL_RCC_OscConfig+0xa6c>
 8004aa0:	4b9b      	ldr	r3, [pc, #620]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	03db      	lsls	r3, r3, #15
 8004aae:	4998      	ldr	r1, [pc, #608]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004ab4:	4b96      	ldr	r3, [pc, #600]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a95      	ldr	r2, [pc, #596]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004aba:	f043 0310 	orr.w	r3, r3, #16
 8004abe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ac0:	f7fd fbee 	bl	80022a0 <HAL_GetTick>
 8004ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004ac8:	f7fd fbea 	bl	80022a0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e18b      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004ada:	4b8d      	ldr	r3, [pc, #564]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xa80>
 8004ae6:	e018      	b.n	8004b1a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004ae8:	4b89      	ldr	r3, [pc, #548]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a88      	ldr	r2, [pc, #544]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004aee:	f023 0310 	bic.w	r3, r3, #16
 8004af2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004af4:	f7fd fbd4 	bl	80022a0 <HAL_GetTick>
 8004af8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004afc:	f7fd fbd0 	bl	80022a0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e171      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b0e:	4b80      	ldr	r3, [pc, #512]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8166 	beq.w	8004df0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b2a:	4b79      	ldr	r3, [pc, #484]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	f000 80f2 	beq.w	8004d1c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	f040 80c5 	bne.w	8004ccc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b73      	ldr	r3, [pc, #460]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a72      	ldr	r2, [pc, #456]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b4e:	f7fd fba7 	bl	80022a0 <HAL_GetTick>
 8004b52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fd fba3 	bl	80022a0 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e144      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b68:	4b69      	ldr	r3, [pc, #420]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f0      	bne.n	8004b56 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b74:	4b66      	ldr	r3, [pc, #408]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d111      	bne.n	8004ba6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	4b63      	ldr	r3, [pc, #396]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b88:	4a61      	ldr	r2, [pc, #388]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b8a:	f043 0304 	orr.w	r3, r3, #4
 8004b8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b92:	4b5f      	ldr	r3, [pc, #380]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d14 <HAL_RCC_OscConfig+0xccc>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bb2:	d102      	bne.n	8004bba <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004bba:	4b56      	ldr	r3, [pc, #344]	@ (8004d14 <HAL_RCC_OscConfig+0xccc>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	4a55      	ldr	r2, [pc, #340]	@ (8004d14 <HAL_RCC_OscConfig+0xccc>)
 8004bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004bc6:	4b52      	ldr	r3, [pc, #328]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	0212      	lsls	r2, r2, #8
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004be4:	430a      	orrs	r2, r1
 8004be6:	494a      	ldr	r1, [pc, #296]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bec:	4b48      	ldr	r3, [pc, #288]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bf0:	4b49      	ldr	r3, [pc, #292]	@ (8004d18 <HAL_RCC_OscConfig+0xcd0>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bf8:	3a01      	subs	r2, #1
 8004bfa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c02:	3a01      	subs	r2, #1
 8004c04:	0252      	lsls	r2, r2, #9
 8004c06:	b292      	uxth	r2, r2
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c0e:	3a01      	subs	r2, #1
 8004c10:	0412      	lsls	r2, r2, #16
 8004c12:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c1c:	3a01      	subs	r2, #1
 8004c1e:	0612      	lsls	r2, r2, #24
 8004c20:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c24:	430a      	orrs	r2, r1
 8004c26:	493a      	ldr	r1, [pc, #232]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004c2c:	4b38      	ldr	r3, [pc, #224]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	4a37      	ldr	r2, [pc, #220]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c32:	f023 0310 	bic.w	r3, r3, #16
 8004c36:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	4a34      	ldr	r2, [pc, #208]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004c42:	4b33      	ldr	r3, [pc, #204]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	4a32      	ldr	r2, [pc, #200]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c48:	f043 0310 	orr.w	r3, r3, #16
 8004c4c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004c4e:	4b30      	ldr	r3, [pc, #192]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c52:	f023 020c 	bic.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	492d      	ldr	r1, [pc, #180]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004c60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d105      	bne.n	8004c74 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c68:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <HAL_RCC_OscConfig+0xccc>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a29      	ldr	r2, [pc, #164]	@ (8004d14 <HAL_RCC_OscConfig+0xccc>)
 8004c6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c72:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004c74:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004c7c:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c82:	4a23      	ldr	r2, [pc, #140]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004c8c:	4b20      	ldr	r3, [pc, #128]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c98:	f7fd fb02 	bl	80022a0 <HAL_GetTick>
 8004c9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca0:	f7fd fafe 	bl	80022a0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e09f      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cb2:	4b17      	ldr	r3, [pc, #92]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cbe:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	4a13      	ldr	r2, [pc, #76]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc8:	6293      	str	r3, [r2, #40]	@ 0x28
 8004cca:	e091      	b.n	8004df0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004ccc:	4b10      	ldr	r3, [pc, #64]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004cd8:	f7fd fae2 	bl	80022a0 <HAL_GetTick>
 8004cdc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fd fade 	bl	80022a0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e07f      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004cf2:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004cfe:	4b04      	ldr	r3, [pc, #16]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	4a03      	ldr	r2, [pc, #12]	@ (8004d10 <HAL_RCC_OscConfig+0xcc8>)
 8004d04:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d08:	f023 0303 	bic.w	r3, r3, #3
 8004d0c:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d0e:	e06f      	b.n	8004df0 <HAL_RCC_OscConfig+0xda8>
 8004d10:	46020c00 	.word	0x46020c00
 8004d14:	46020800 	.word	0x46020800
 8004d18:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d1c:	4b37      	ldr	r3, [pc, #220]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d22:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d039      	beq.n	8004da4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0203 	and.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d132      	bne.n	8004da4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d129      	bne.n	8004da4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d122      	bne.n	8004da4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d68:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11a      	bne.n	8004da4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	0a5b      	lsrs	r3, r3, #9
 8004d72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d111      	bne.n	8004da4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	0c1b      	lsrs	r3, r3, #16
 8004d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d108      	bne.n	8004da4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	0e1b      	lsrs	r3, r3, #24
 8004d96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e024      	b.n	8004df2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004da8:	4b14      	ldr	r3, [pc, #80]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	08db      	lsrs	r3, r3, #3
 8004dae:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d01a      	beq.n	8004df0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004dba:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc6:	f7fd fa6b 	bl	80022a0 <HAL_GetTick>
 8004dca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004dcc:	bf00      	nop
 8004dce:	f7fd fa67 	bl	80022a0 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d0f9      	beq.n	8004dce <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dde:	4a07      	ldr	r2, [pc, #28]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004de4:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	4a04      	ldr	r2, [pc, #16]	@ (8004dfc <HAL_RCC_OscConfig+0xdb4>)
 8004dea:	f043 0310 	orr.w	r3, r3, #16
 8004dee:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3738      	adds	r7, #56	@ 0x38
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	46020c00 	.word	0x46020c00

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e1d9      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b9b      	ldr	r3, [pc, #620]	@ (8005084 <HAL_RCC_ClockConfig+0x284>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d910      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b98      	ldr	r3, [pc, #608]	@ (8005084 <HAL_RCC_ClockConfig+0x284>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 020f 	bic.w	r2, r3, #15
 8004e2a:	4996      	ldr	r1, [pc, #600]	@ (8005084 <HAL_RCC_ClockConfig+0x284>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b94      	ldr	r3, [pc, #592]	@ (8005084 <HAL_RCC_ClockConfig+0x284>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e1c1      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	4b8c      	ldr	r3, [pc, #560]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d908      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004e60:	4b89      	ldr	r3, [pc, #548]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	4986      	ldr	r1, [pc, #536]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d012      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	4b81      	ldr	r3, [pc, #516]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d909      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004e90:	4b7d      	ldr	r3, [pc, #500]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	497a      	ldr	r1, [pc, #488]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	4b74      	ldr	r3, [pc, #464]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d908      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004ec0:	4b71      	ldr	r3, [pc, #452]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	496e      	ldr	r1, [pc, #440]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	4b69      	ldr	r3, [pc, #420]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d908      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004eee:	4b66      	ldr	r3, [pc, #408]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 020f 	bic.w	r2, r3, #15
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	4963      	ldr	r1, [pc, #396]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80d2 	beq.w	80050b2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d143      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d110      	bne.n	8004f4a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f28:	4b57      	ldr	r3, [pc, #348]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2e:	4a56      	ldr	r2, [pc, #344]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f38:	4b53      	ldr	r3, [pc, #332]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004f46:	2301      	movs	r3, #1
 8004f48:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004f4a:	f7fd f9a9 	bl	80022a0 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004f50:	4b4e      	ldr	r3, [pc, #312]	@ (800508c <HAL_RCC_ClockConfig+0x28c>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00f      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004f5e:	f7fd f99f 	bl	80022a0 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e12b      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004f70:	4b46      	ldr	r3, [pc, #280]	@ (800508c <HAL_RCC_ClockConfig+0x28c>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f82:	4b41      	ldr	r3, [pc, #260]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f88:	4a3f      	ldr	r2, [pc, #252]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004f8a:	f023 0304 	bic.w	r3, r3, #4
 8004f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004f92:	4b3d      	ldr	r3, [pc, #244]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d121      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e112      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d107      	bne.n	8004fba <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004faa:	4b37      	ldr	r3, [pc, #220]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d115      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e106      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004fc2:	4b31      	ldr	r3, [pc, #196]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0fa      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0f2      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	4b29      	ldr	r3, [pc, #164]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f023 0203 	bic.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4926      	ldr	r1, [pc, #152]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004ff4:	f7fd f954 	bl	80022a0 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d112      	bne.n	8005028 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005002:	e00a      	b.n	800501a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005004:	f7fd f94c 	bl	80022a0 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0d6      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800501a:	4b1b      	ldr	r3, [pc, #108]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d1ee      	bne.n	8005004 <HAL_RCC_ClockConfig+0x204>
 8005026:	e044      	b.n	80050b2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d112      	bne.n	8005056 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005030:	e00a      	b.n	8005048 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005032:	f7fd f935 	bl	80022a0 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0bf      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005048:	4b0f      	ldr	r3, [pc, #60]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b08      	cmp	r3, #8
 8005052:	d1ee      	bne.n	8005032 <HAL_RCC_ClockConfig+0x232>
 8005054:	e02d      	b.n	80050b2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d123      	bne.n	80050a6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fd f91e 	bl	80022a0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e0a8      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005076:	4b04      	ldr	r3, [pc, #16]	@ (8005088 <HAL_RCC_ClockConfig+0x288>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ee      	bne.n	8005060 <HAL_RCC_ClockConfig+0x260>
 8005082:	e016      	b.n	80050b2 <HAL_RCC_ClockConfig+0x2b2>
 8005084:	40022000 	.word	0x40022000
 8005088:	46020c00 	.word	0x46020c00
 800508c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005090:	f7fd f906 	bl	80022a0 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e090      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050a6:	4b4a      	ldr	r3, [pc, #296]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d1ee      	bne.n	8005090 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	4b43      	ldr	r3, [pc, #268]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d208      	bcs.n	80050e0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80050ce:	4b40      	ldr	r3, [pc, #256]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 020f 	bic.w	r2, r3, #15
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	493d      	ldr	r1, [pc, #244]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e0:	4b3c      	ldr	r3, [pc, #240]	@ (80051d4 <HAL_RCC_ClockConfig+0x3d4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d210      	bcs.n	8005110 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ee:	4b39      	ldr	r3, [pc, #228]	@ (80051d4 <HAL_RCC_ClockConfig+0x3d4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 020f 	bic.w	r2, r3, #15
 80050f6:	4937      	ldr	r1, [pc, #220]	@ (80051d4 <HAL_RCC_ClockConfig+0x3d4>)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fe:	4b35      	ldr	r3, [pc, #212]	@ (80051d4 <HAL_RCC_ClockConfig+0x3d4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e05b      	b.n	80051c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d010      	beq.n	800513e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	4b2b      	ldr	r3, [pc, #172]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005128:	429a      	cmp	r2, r3
 800512a:	d208      	bcs.n	800513e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800512c:	4b28      	ldr	r3, [pc, #160]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4925      	ldr	r1, [pc, #148]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	4b20      	ldr	r3, [pc, #128]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005158:	429a      	cmp	r2, r3
 800515a:	d209      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800515c:	4b1c      	ldr	r3, [pc, #112]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	4919      	ldr	r1, [pc, #100]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	4b13      	ldr	r3, [pc, #76]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005188:	429a      	cmp	r2, r3
 800518a:	d208      	bcs.n	800519e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800518c:	4b10      	ldr	r3, [pc, #64]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	490d      	ldr	r1, [pc, #52]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 800519a:	4313      	orrs	r3, r2
 800519c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800519e:	f000 f821 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80051a2:	4602      	mov	r2, r0
 80051a4:	4b0a      	ldr	r3, [pc, #40]	@ (80051d0 <HAL_RCC_ClockConfig+0x3d0>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	490a      	ldr	r1, [pc, #40]	@ (80051d8 <HAL_RCC_ClockConfig+0x3d8>)
 80051ae:	5ccb      	ldrb	r3, [r1, r3]
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
 80051b4:	4a09      	ldr	r2, [pc, #36]	@ (80051dc <HAL_RCC_ClockConfig+0x3dc>)
 80051b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051b8:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <HAL_RCC_ClockConfig+0x3e0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc ffe5 	bl	800218c <HAL_InitTick>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	46020c00 	.word	0x46020c00
 80051d4:	40022000 	.word	0x40022000
 80051d8:	0800acb0 	.word	0x0800acb0
 80051dc:	20000000 	.word	0x20000000
 80051e0:	20000018 	.word	0x20000018

080051e4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b08b      	sub	sp, #44	@ 0x2c
 80051e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f2:	4b78      	ldr	r3, [pc, #480]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051fc:	4b75      	ldr	r3, [pc, #468]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x34>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b0c      	cmp	r3, #12
 8005210:	d121      	bne.n	8005256 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d11e      	bne.n	8005256 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005218:	4b6e      	ldr	r3, [pc, #440]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005224:	4b6b      	ldr	r3, [pc, #428]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800522a:	0b1b      	lsrs	r3, r3, #12
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
 8005232:	e005      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005234:	4b67      	ldr	r3, [pc, #412]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	0f1b      	lsrs	r3, r3, #28
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005240:	4a65      	ldr	r2, [pc, #404]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d110      	bne.n	8005272 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005254:	e00d      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005256:	4b5f      	ldr	r3, [pc, #380]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b04      	cmp	r3, #4
 8005260:	d102      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005262:	4b5e      	ldr	r3, [pc, #376]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005264:	623b      	str	r3, [r7, #32]
 8005266:	e004      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d101      	bne.n	8005272 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800526e:	4b5b      	ldr	r3, [pc, #364]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005270:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b0c      	cmp	r3, #12
 8005276:	f040 80a5 	bne.w	80053c4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800527a:	4b56      	ldr	r3, [pc, #344]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005284:	4b53      	ldr	r3, [pc, #332]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005292:	4b50      	ldr	r3, [pc, #320]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800529e:	4b4d      	ldr	r3, [pc, #308]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	08db      	lsrs	r3, r3, #3
 80052a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d003      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d022      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x128>
 80052c6:	e043      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80053e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	4b3e      	ldr	r3, [pc, #248]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80052ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80052ee:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x200>
 80052f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80052fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800530a:	e046      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80053e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531e:	4b2d      	ldr	r3, [pc, #180]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800532e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005332:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x200>
 8005336:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800533e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005342:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800534e:	e024      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005368:	4b1a      	ldr	r3, [pc, #104]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800536a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005378:	ed97 6a01 	vldr	s12, [r7, #4]
 800537c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x200>
 8005380:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005384:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005388:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800538c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005394:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005398:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800539a:	4b0e      	ldr	r3, [pc, #56]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800539c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539e:	0e1b      	lsrs	r3, r3, #24
 80053a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a4:	3301      	adds	r3, #1
 80053a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053be:	ee17 3a90 	vmov	r3, s15
 80053c2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80053c4:	6a3b      	ldr	r3, [r7, #32]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	372c      	adds	r7, #44	@ 0x2c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	46020c00 	.word	0x46020c00
 80053d8:	0800acc8 	.word	0x0800acc8
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	4b742400 	.word	0x4b742400
 80053e4:	46000000 	.word	0x46000000

080053e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80053ec:	f7ff fefa 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b07      	ldr	r3, [pc, #28]	@ (8005410 <HAL_RCC_GetHCLKFreq+0x28>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	4906      	ldr	r1, [pc, #24]	@ (8005414 <HAL_RCC_GetHCLKFreq+0x2c>)
 80053fc:	5ccb      	ldrb	r3, [r1, r3]
 80053fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005402:	4a05      	ldr	r2, [pc, #20]	@ (8005418 <HAL_RCC_GetHCLKFreq+0x30>)
 8005404:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005406:	4b04      	ldr	r3, [pc, #16]	@ (8005418 <HAL_RCC_GetHCLKFreq+0x30>)
 8005408:	681b      	ldr	r3, [r3, #0]
}
 800540a:	4618      	mov	r0, r3
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	46020c00 	.word	0x46020c00
 8005414:	0800acb0 	.word	0x0800acb0
 8005418:	20000000 	.word	0x20000000

0800541c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005420:	f7ff ffe2 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b05      	ldr	r3, [pc, #20]	@ (800543c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	4903      	ldr	r1, [pc, #12]	@ (8005440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}
 800543c:	46020c00 	.word	0x46020c00
 8005440:	0800acc0 	.word	0x0800acc0

08005444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005448:	f7ff ffce 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	@ (8005468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	46020c00 	.word	0x46020c00
 8005468:	0800acc0 	.word	0x0800acc0

0800546c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005470:	f7ff ffba 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	@ (800548c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	@ (8005490 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	46020c00 	.word	0x46020c00
 8005490:	0800acc0 	.word	0x0800acc0

08005494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800549c:	4b3e      	ldr	r3, [pc, #248]	@ (8005598 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800549e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054aa:	f7fe fd6f 	bl	8003f8c <HAL_PWREx_GetVoltageRange>
 80054ae:	6178      	str	r0, [r7, #20]
 80054b0:	e019      	b.n	80054e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	4b39      	ldr	r3, [pc, #228]	@ (8005598 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b8:	4a37      	ldr	r2, [pc, #220]	@ (8005598 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054ba:	f043 0304 	orr.w	r3, r3, #4
 80054be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054c2:	4b35      	ldr	r3, [pc, #212]	@ (8005598 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054d0:	f7fe fd5c 	bl	8003f8c <HAL_PWREx_GetVoltageRange>
 80054d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054d6:	4b30      	ldr	r3, [pc, #192]	@ (8005598 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005598 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054de:	f023 0304 	bic.w	r3, r3, #4
 80054e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054ec:	d003      	beq.n	80054f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054f4:	d109      	bne.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054fc:	d202      	bcs.n	8005504 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80054fe:	2301      	movs	r3, #1
 8005500:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005502:	e033      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005508:	e030      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005510:	d208      	bcs.n	8005524 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	d102      	bne.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800551a:	2303      	movs	r3, #3
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	e025      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e035      	b.n	8005590 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800552a:	d90f      	bls.n	800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005538:	d902      	bls.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e015      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005540:	2301      	movs	r3, #1
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e012      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	e00f      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005552:	d109      	bne.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555a:	d102      	bne.n	8005562 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800555c:	2301      	movs	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	e004      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005562:	2302      	movs	r3, #2
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e001      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005568:	2301      	movs	r3, #1
 800556a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 020f 	bic.w	r2, r3, #15
 8005574:	4909      	ldr	r1, [pc, #36]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800557c:	4b07      	ldr	r3, [pc, #28]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d001      	beq.n	800558e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	46020c00 	.word	0x46020c00
 800559c:	40022000 	.word	0x40022000

080055a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80055a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a4:	b0b6      	sub	sp, #216	@ 0xd8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 0401 	and.w	r4, r2, #1
 80055c4:	2500      	movs	r5, #0
 80055c6:	ea54 0305 	orrs.w	r3, r4, r5
 80055ca:	d00b      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80055cc:	4bc5      	ldr	r3, [pc, #788]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055d2:	f023 0103 	bic.w	r1, r3, #3
 80055d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055dc:	4ac1      	ldr	r2, [pc, #772]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055de:	430b      	orrs	r3, r1
 80055e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f002 0804 	and.w	r8, r2, #4
 80055f0:	f04f 0900 	mov.w	r9, #0
 80055f4:	ea58 0309 	orrs.w	r3, r8, r9
 80055f8:	d00b      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80055fa:	4bba      	ldr	r3, [pc, #744]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005600:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	4ab6      	ldr	r2, [pc, #728]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800560c:	430b      	orrs	r3, r1
 800560e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f002 0a08 	and.w	sl, r2, #8
 800561e:	f04f 0b00 	mov.w	fp, #0
 8005622:	ea5a 030b 	orrs.w	r3, sl, fp
 8005626:	d00b      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005628:	4bae      	ldr	r3, [pc, #696]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800562a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800562e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005638:	4aaa      	ldr	r2, [pc, #680]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800563a:	430b      	orrs	r3, r1
 800563c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f002 0310 	and.w	r3, r2, #16
 800564c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005650:	2300      	movs	r3, #0
 8005652:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005656:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800565a:	460b      	mov	r3, r1
 800565c:	4313      	orrs	r3, r2
 800565e:	d00b      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005660:	4ba0      	ldr	r3, [pc, #640]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005666:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800566a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800566e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005670:	4a9c      	ldr	r2, [pc, #624]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005672:	430b      	orrs	r3, r1
 8005674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005678:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f002 0320 	and.w	r3, r2, #32
 8005684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005688:	2300      	movs	r3, #0
 800568a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800568e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d00b      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005698:	4b92      	ldr	r3, [pc, #584]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800569a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800569e:	f023 0107 	bic.w	r1, r3, #7
 80056a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	4a8e      	ldr	r2, [pc, #568]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80056bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056ca:	460b      	mov	r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80056d0:	4b84      	ldr	r3, [pc, #528]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80056d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056d6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80056da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056e0:	4a80      	ldr	r2, [pc, #512]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80056f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056f8:	2300      	movs	r3, #0
 80056fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056fe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005702:	460b      	mov	r3, r1
 8005704:	4313      	orrs	r3, r2
 8005706:	d00b      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005708:	4b76      	ldr	r3, [pc, #472]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800570a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800570e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005718:	4a72      	ldr	r2, [pc, #456]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800571a:	430b      	orrs	r3, r1
 800571c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800572c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005730:	2300      	movs	r3, #0
 8005732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005736:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d00b      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005740:	4b68      	ldr	r3, [pc, #416]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005746:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800574a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800574e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005750:	4a64      	ldr	r2, [pc, #400]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005752:	430b      	orrs	r3, r1
 8005754:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005764:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005768:	2300      	movs	r3, #0
 800576a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800576e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d00b      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005778:	4b5a      	ldr	r3, [pc, #360]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800577a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800577e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005788:	4a56      	ldr	r2, [pc, #344]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800578a:	430b      	orrs	r3, r1
 800578c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800579c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80057aa:	460b      	mov	r3, r1
 80057ac:	4313      	orrs	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80057b0:	4b4c      	ldr	r3, [pc, #304]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80057b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057b6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80057ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c0:	4a48      	ldr	r2, [pc, #288]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80057c2:	430b      	orrs	r3, r1
 80057c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057d8:	2300      	movs	r3, #0
 80057da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80057e2:	460b      	mov	r3, r1
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d00b      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80057e8:	4b3e      	ldr	r3, [pc, #248]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80057ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057ee:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80057f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f8:	4a3a      	ldr	r2, [pc, #232]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80057fa:	430b      	orrs	r3, r1
 80057fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800580c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800580e:	2300      	movs	r3, #0
 8005810:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005812:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d00b      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800581c:	4b31      	ldr	r3, [pc, #196]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800581e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005822:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800582a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800582c:	4a2d      	ldr	r2, [pc, #180]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800582e:	430b      	orrs	r3, r1
 8005830:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005840:	673b      	str	r3, [r7, #112]	@ 0x70
 8005842:	2300      	movs	r3, #0
 8005844:	677b      	str	r3, [r7, #116]	@ 0x74
 8005846:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800584a:	460b      	mov	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	d04f      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005858:	2b80      	cmp	r3, #128	@ 0x80
 800585a:	d02d      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800585c:	2b80      	cmp	r3, #128	@ 0x80
 800585e:	d827      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005860:	2b60      	cmp	r3, #96	@ 0x60
 8005862:	d02b      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005864:	2b60      	cmp	r3, #96	@ 0x60
 8005866:	d823      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	d006      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800586c:	2b40      	cmp	r3, #64	@ 0x40
 800586e:	d81f      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005874:	2b20      	cmp	r3, #32
 8005876:	d011      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005878:	e01a      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800587a:	4b1a      	ldr	r3, [pc, #104]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587e:	4a19      	ldr	r2, [pc, #100]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005884:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005886:	e01a      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800588c:	3308      	adds	r3, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f002 f914 	bl	8007abc <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800589a:	e010      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800589c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058a0:	332c      	adds	r3, #44	@ 0x2c
 80058a2:	4618      	mov	r0, r3
 80058a4:	f002 f9a2 	bl	8007bec <RCCEx_PLL3_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058ae:	e006      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80058b6:	e002      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 80058bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058be:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d110      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80058c6:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80058c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058cc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80058d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058d8:	4a02      	ldr	r2, [pc, #8]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80058da:	430b      	orrs	r3, r1
 80058dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058e0:	e006      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80058e2:	bf00      	nop
 80058e4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80058ec:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80058f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80058fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058fe:	2300      	movs	r3, #0
 8005900:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005902:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d046      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800590c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005914:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005918:	d028      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800591a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800591e:	d821      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005924:	d022      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800592a:	d81b      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800592c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005930:	d01c      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005932:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005936:	d815      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800593c:	d008      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800593e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005942:	d80f      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d011      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800594c:	d00e      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800594e:	e009      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005954:	3308      	adds	r3, #8
 8005956:	4618      	mov	r0, r3
 8005958:	f002 f8b0 	bl	8007abc <RCCEx_PLL2_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005962:	e004      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 800596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10d      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005976:	4bb6      	ldr	r3, [pc, #728]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800597c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005984:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005988:	4ab1      	ldr	r2, [pc, #708]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800598a:	430b      	orrs	r3, r1
 800598c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005990:	e003      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005992:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005996:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800599a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80059a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80059a8:	2300      	movs	r3, #0
 80059aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80059ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d03e      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80059b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d81d      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80059c2:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	08005a07 	.word	0x08005a07
 80059cc:	080059dd 	.word	0x080059dd
 80059d0:	080059eb 	.word	0x080059eb
 80059d4:	08005a07 	.word	0x08005a07
 80059d8:	08005a07 	.word	0x08005a07
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059dc:	4b9c      	ldr	r3, [pc, #624]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	4a9b      	ldr	r2, [pc, #620]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80059e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80059e8:	e00e      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ee:	332c      	adds	r3, #44	@ 0x2c
 80059f0:	4618      	mov	r0, r3
 80059f2:	f002 f8fb 	bl	8007bec <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80059fc:	e004      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8005a06:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a08:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10d      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005a10:	4b8f      	ldr	r3, [pc, #572]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005a12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a16:	f023 0107 	bic.w	r1, r3, #7
 8005a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a22:	4a8b      	ldr	r2, [pc, #556]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005a24:	430b      	orrs	r3, r1
 8005a26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a2a:	e003      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005a30:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a42:	2300      	movs	r3, #0
 8005a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a5c:	d028      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a62:	d821      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005a64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a68:	d024      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a6e:	d81b      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a74:	d00e      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a7a:	d815      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01b      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a84:	d110      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a86:	4b72      	ldr	r3, [pc, #456]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	4a71      	ldr	r2, [pc, #452]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005a92:	e012      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a98:	332c      	adds	r3, #44	@ 0x2c
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f002 f8a6 	bl	8007bec <RCCEx_PLL3_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005aa6:	e008      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005aae:	e004      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e002      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005ab8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005aba:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005ac2:	4b63      	ldr	r3, [pc, #396]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ac8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005ae2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005af4:	2300      	movs	r3, #0
 8005af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005af8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005afc:	460b      	mov	r3, r1
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f000 80ba 	beq.w	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b0a:	4b51      	ldr	r3, [pc, #324]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d113      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b18:	4b4d      	ldr	r3, [pc, #308]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1e:	4a4c      	ldr	r2, [pc, #304]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005b20:	f043 0304 	orr.w	r3, r3, #4
 8005b24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005b28:	4b49      	ldr	r3, [pc, #292]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005b40:	4b44      	ldr	r3, [pc, #272]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	4a43      	ldr	r2, [pc, #268]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b4c:	f7fc fba8 	bl	80022a0 <HAL_GetTick>
 8005b50:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b54:	e00b      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b56:	f7fc fba3 	bl	80022a0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d903      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005b6c:	e005      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b6e:	4b39      	ldr	r3, [pc, #228]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ed      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8005b7a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d16a      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b82:	4b33      	ldr	r3, [pc, #204]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d023      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8005b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b9c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d01b      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ba8:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bb6:	4b26      	ldr	r3, [pc, #152]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bbc:	4a24      	ldr	r2, [pc, #144]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bc6:	4b22      	ldr	r3, [pc, #136]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bcc:	4a20      	ldr	r2, [pc, #128]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bdc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d019      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fc fb58 	bl	80022a0 <HAL_GetTick>
 8005bf0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf4:	e00d      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf6:	f7fc fb53 	bl	80022a0 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c00:	1ad2      	subs	r2, r2, r3
 8005c02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d903      	bls.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8005c10:	e006      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c12:	4b0f      	ldr	r3, [pc, #60]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0ea      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8005c20:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10d      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005c28:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c3a:	4a05      	ldr	r2, [pc, #20]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005c42:	e00d      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c44:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005c48:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8005c4c:	e008      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005c4e:	bf00      	nop
 8005c50:	46020c00 	.word	0x46020c00
 8005c54:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005c5c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c60:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c68:	4bb2      	ldr	r3, [pc, #712]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c6e:	4ab1      	ldr	r2, [pc, #708]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c86:	2300      	movs	r3, #0
 8005c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c8a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d042      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ca0:	d022      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005ca2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ca6:	d81b      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8005cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cb2:	d815      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005cb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cbc:	d110      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fef9 	bl	8007abc <RCCEx_PLL2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005cd0:	e00d      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd2:	4b98      	ldr	r3, [pc, #608]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	4a97      	ldr	r2, [pc, #604]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cdc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8005cec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005cee:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10d      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cfc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d08:	4a8a      	ldr	r2, [pc, #552]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d10:	e003      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005d16:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d28:	2300      	movs	r3, #0
 8005d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d02d      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d42:	d00b      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d48:	d804      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d52:	d007      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005d5a:	e004      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005d5c:	bf00      	nop
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005d64:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d66:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10d      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005d6e:	4b71      	ldr	r3, [pc, #452]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d80:	4a6c      	ldr	r2, [pc, #432]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d88:	e003      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005d8e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005da4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005da8:	460b      	mov	r3, r1
 8005daa:	4313      	orrs	r3, r2
 8005dac:	d00c      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005dae:	4b61      	ldr	r3, [pc, #388]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005db0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005db4:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	d019      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005df0:	d105      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005df2:	4b50      	ldr	r3, [pc, #320]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	4a4f      	ldr	r2, [pc, #316]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dfc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005dfe:	4b4d      	ldr	r3, [pc, #308]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005e00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e10:	4a48      	ldr	r2, [pc, #288]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e26:	2300      	movs	r3, #0
 8005e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e2a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4313      	orrs	r3, r2
 8005e32:	d00c      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005e34:	4b3f      	ldr	r3, [pc, #252]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e46:	493b      	ldr	r1, [pc, #236]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d00c      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005e6a:	4b32      	ldr	r3, [pc, #200]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e7c:	492d      	ldr	r1, [pc, #180]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	d00c      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005ea0:	4b24      	ldr	r3, [pc, #144]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ea6:	f023 0218 	bic.w	r2, r3, #24
 8005eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005eae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eb2:	4920      	ldr	r1, [pc, #128]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	d034      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005ed6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005eda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee4:	4b13      	ldr	r3, [pc, #76]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	4a12      	ldr	r2, [pc, #72]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eee:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ef4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ef8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005efc:	d108      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f02:	3308      	adds	r3, #8
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fdd9 	bl	8007abc <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8005f10:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10f      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005f18:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005f1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f2a:	4902      	ldr	r1, [pc, #8]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005f32:	e005      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005f34:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005f3c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d03a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f68:	d00e      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f6e:	d815      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f78:	d110      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f7a:	4b27      	ldr	r3, [pc, #156]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	4a26      	ldr	r2, [pc, #152]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f84:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005f86:	e00e      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fd94 	bl	8007abc <RCCEx_PLL2_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005f9a:	e004      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8005fa4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005fa6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10d      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005fae:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fc0:	4915      	ldr	r1, [pc, #84]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005fc8:	e003      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005fce:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d00c      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005fee:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ff4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005ff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006000:	4905      	ldr	r1, [pc, #20]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006008:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 800600c:	4618      	mov	r0, r3
 800600e:	37d8      	adds	r7, #216	@ 0xd8
 8006010:	46bd      	mov	sp, r7
 8006012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006016:	bf00      	nop
 8006018:	46020c00 	.word	0x46020c00

0800601c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	@ 0x24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006024:	4ba6      	ldr	r3, [pc, #664]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800602e:	4ba4      	ldr	r3, [pc, #656]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006038:	4ba1      	ldr	r3, [pc, #644]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	3301      	adds	r3, #1
 8006044:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006046:	4b9e      	ldr	r3, [pc, #632]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	091b      	lsrs	r3, r3, #4
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006052:	4b9b      	ldr	r3, [pc, #620]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	08db      	lsrs	r3, r3, #3
 8006058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d062      	beq.n	800613a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b03      	cmp	r3, #3
 8006078:	f200 8081 	bhi.w	800617e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d024      	beq.n	80060cc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d17a      	bne.n	800617e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b89      	ldr	r3, [pc, #548]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800609c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80060aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060ca:	e08f      	b.n	80061ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80060cc:	4b7c      	ldr	r3, [pc, #496]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80060d8:	4b79      	ldr	r3, [pc, #484]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	0f1b      	lsrs	r3, r3, #28
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	e006      	b.n	80060f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80060e4:	4b76      	ldr	r3, [pc, #472]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	0f1b      	lsrs	r3, r3, #28
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	4a76      	ldr	r2, [pc, #472]	@ (80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80060f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006118:	ed97 6a02 	vldr	s12, [r7, #8]
 800611c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006128:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006134:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006138:	e058      	b.n	80061ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006144:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614c:	4b5c      	ldr	r3, [pc, #368]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800614e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800615c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006160:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006164:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006168:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800616c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006170:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006178:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800617c:	e036      	b.n	80061ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800617e:	4b50      	ldr	r3, [pc, #320]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800618a:	4b4d      	ldr	r3, [pc, #308]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	e006      	b.n	80061a4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006196:	4b4a      	ldr	r3, [pc, #296]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	0f1b      	lsrs	r3, r3, #28
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	4a49      	ldr	r2, [pc, #292]	@ (80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80061a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	ee07 3a90 	vmov	s15, r3
 80061b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ce:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80061ec:	4b34      	ldr	r3, [pc, #208]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d017      	beq.n	8006228 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061f8:	4b31      	ldr	r3, [pc, #196]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fc:	0a5b      	lsrs	r3, r3, #9
 80061fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800620a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800620e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006212:	edd7 6a07 	vldr	s13, [r7, #28]
 8006216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621e:	ee17 2a90 	vmov	r2, s15
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e002      	b.n	800622e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800622e:	4b24      	ldr	r3, [pc, #144]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d017      	beq.n	800626a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800623a:	4b21      	ldr	r3, [pc, #132]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800623c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623e:	0c1b      	lsrs	r3, r3, #16
 8006240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800624c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006250:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006254:	edd7 6a07 	vldr	s13, [r7, #28]
 8006258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006260:	ee17 2a90 	vmov	r2, s15
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	605a      	str	r2, [r3, #4]
 8006268:	e002      	b.n	8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006270:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d017      	beq.n	80062ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800627c:	4b10      	ldr	r3, [pc, #64]	@ (80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800627e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006280:	0e1b      	lsrs	r3, r3, #24
 8006282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800628e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006292:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006296:	edd7 6a07 	vldr	s13, [r7, #28]
 800629a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a2:	ee17 2a90 	vmov	r2, s15
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80062aa:	e002      	b.n	80062b2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	609a      	str	r2, [r3, #8]
}
 80062b2:	bf00      	nop
 80062b4:	3724      	adds	r7, #36	@ 0x24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	46020c00 	.word	0x46020c00
 80062c4:	4b742400 	.word	0x4b742400
 80062c8:	46000000 	.word	0x46000000
 80062cc:	0800acc8 	.word	0x0800acc8

080062d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b089      	sub	sp, #36	@ 0x24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80062d8:	4ba6      	ldr	r3, [pc, #664]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80062e2:	4ba4      	ldr	r3, [pc, #656]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80062ec:	4ba1      	ldr	r3, [pc, #644]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	0a1b      	lsrs	r3, r3, #8
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	3301      	adds	r3, #1
 80062f8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80062fa:	4b9e      	ldr	r3, [pc, #632]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	091b      	lsrs	r3, r3, #4
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006306:	4b9b      	ldr	r3, [pc, #620]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	08db      	lsrs	r3, r3, #3
 800630c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	fb02 f303 	mul.w	r3, r2, r3
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d062      	beq.n	80063ee <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b03      	cmp	r3, #3
 800632c:	f200 8081 	bhi.w	8006432 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d024      	beq.n	8006380 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d17a      	bne.n	8006432 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006346:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800634a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634e:	4b89      	ldr	r3, [pc, #548]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800635e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006362:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006366:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800636a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800636e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006372:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800637e:	e08f      	b.n	80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006380:	4b7c      	ldr	r3, [pc, #496]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800638c:	4b79      	ldr	r3, [pc, #484]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	0f1b      	lsrs	r3, r3, #28
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	e006      	b.n	80063a6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006398:	4b76      	ldr	r3, [pc, #472]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800639a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	0f1b      	lsrs	r3, r3, #28
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	4a76      	ldr	r2, [pc, #472]	@ (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80063a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80063d0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80063d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80063e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ec:	e058      	b.n	80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80063fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006400:	4b5c      	ldr	r3, [pc, #368]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006408:	ee07 3a90 	vmov	s15, r3
 800640c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006410:	ed97 6a02 	vldr	s12, [r7, #8]
 8006414:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006418:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800641c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006420:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006424:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006430:	e036      	b.n	80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006432:	4b50      	ldr	r3, [pc, #320]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800643e:	4b4d      	ldr	r3, [pc, #308]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0f1b      	lsrs	r3, r3, #28
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	e006      	b.n	8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800644a:	4b4a      	ldr	r3, [pc, #296]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800644c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006450:	041b      	lsls	r3, r3, #16
 8006452:	0f1b      	lsrs	r3, r3, #28
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	4a49      	ldr	r2, [pc, #292]	@ (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800645a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006482:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006492:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800649e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80064a0:	4b34      	ldr	r3, [pc, #208]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d017      	beq.n	80064dc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064ac:	4b31      	ldr	r3, [pc, #196]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b0:	0a5b      	lsrs	r3, r3, #9
 80064b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80064be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d2:	ee17 2a90 	vmov	r2, s15
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e002      	b.n	80064e2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80064e2:	4b24      	ldr	r3, [pc, #144]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d017      	beq.n	800651e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064ee:	4b21      	ldr	r3, [pc, #132]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f2:	0c1b      	lsrs	r3, r3, #16
 80064f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006504:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006508:	edd7 6a07 	vldr	s13, [r7, #28]
 800650c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006514:	ee17 2a90 	vmov	r2, s15
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	605a      	str	r2, [r3, #4]
 800651c:	e002      	b.n	8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006524:	4b13      	ldr	r3, [pc, #76]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d017      	beq.n	8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006530:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	0e1b      	lsrs	r3, r3, #24
 8006536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006546:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800654a:	edd7 6a07 	vldr	s13, [r7, #28]
 800654e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006556:	ee17 2a90 	vmov	r2, s15
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800655e:	e002      	b.n	8006566 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
}
 8006566:	bf00      	nop
 8006568:	3724      	adds	r7, #36	@ 0x24
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	46020c00 	.word	0x46020c00
 8006578:	4b742400 	.word	0x4b742400
 800657c:	46000000 	.word	0x46000000
 8006580:	0800acc8 	.word	0x0800acc8

08006584 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006584:	b480      	push	{r7}
 8006586:	b089      	sub	sp, #36	@ 0x24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800658c:	4ba6      	ldr	r3, [pc, #664]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800658e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006594:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006596:	4ba4      	ldr	r3, [pc, #656]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80065a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	3301      	adds	r3, #1
 80065ac:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80065ae:	4b9e      	ldr	r3, [pc, #632]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80065ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065be:	08db      	lsrs	r3, r3, #3
 80065c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d062      	beq.n	80066a2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b03      	cmp	r3, #3
 80065e0:	f200 8081 	bhi.w	80066e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d024      	beq.n	8006634 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d17a      	bne.n	80066e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80065fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006602:	4b89      	ldr	r3, [pc, #548]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006612:	ed97 6a02 	vldr	s12, [r7, #8]
 8006616:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800661a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800661e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006626:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800662a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006632:	e08f      	b.n	8006754 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006634:	4b7c      	ldr	r3, [pc, #496]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006640:	4b79      	ldr	r3, [pc, #484]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	0f1b      	lsrs	r3, r3, #28
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	e006      	b.n	800665a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800664c:	4b76      	ldr	r3, [pc, #472]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800664e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	0f1b      	lsrs	r3, r3, #28
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	4a76      	ldr	r2, [pc, #472]	@ (8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800665c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006680:	ed97 6a02 	vldr	s12, [r7, #8]
 8006684:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006694:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066a0:	e058      	b.n	8006754 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	ee07 3a90 	vmov	s15, r3
 80066a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80066b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80066c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80066cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e4:	e036      	b.n	8006754 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80066e6:	4b50      	ldr	r3, [pc, #320]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80066f2:	4b4d      	ldr	r3, [pc, #308]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	0f1b      	lsrs	r3, r3, #28
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	e006      	b.n	800670c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80066fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	0f1b      	lsrs	r3, r3, #28
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	4a49      	ldr	r2, [pc, #292]	@ (8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800670e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006732:	ed97 6a02 	vldr	s12, [r7, #8]
 8006736:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800673a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006746:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800674a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006752:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006754:	4b34      	ldr	r3, [pc, #208]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006760:	4b31      	ldr	r3, [pc, #196]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006764:	0a5b      	lsrs	r3, r3, #9
 8006766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006776:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800677a:	edd7 6a07 	vldr	s13, [r7, #28]
 800677e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006786:	ee17 2a90 	vmov	r2, s15
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e002      	b.n	8006796 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006796:	4b24      	ldr	r3, [pc, #144]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067a2:	4b21      	ldr	r3, [pc, #132]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	0c1b      	lsrs	r3, r3, #16
 80067a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80067b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c8:	ee17 2a90 	vmov	r2, s15
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	605a      	str	r2, [r3, #4]
 80067d0:	e002      	b.n	80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80067d8:	4b13      	ldr	r3, [pc, #76]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d017      	beq.n	8006814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067e4:	4b10      	ldr	r3, [pc, #64]	@ (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e8:	0e1b      	lsrs	r3, r3, #24
 80067ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80067f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800680a:	ee17 2a90 	vmov	r2, s15
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006812:	e002      	b.n	800681a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	609a      	str	r2, [r3, #8]
}
 800681a:	bf00      	nop
 800681c:	3724      	adds	r7, #36	@ 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	46020c00 	.word	0x46020c00
 800682c:	4b742400 	.word	0x4b742400
 8006830:	46000000 	.word	0x46000000
 8006834:	0800acc8 	.word	0x0800acc8

08006838 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08e      	sub	sp, #56	@ 0x38
 800683c:	af00      	add	r7, sp, #0
 800683e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006846:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800684a:	430b      	orrs	r3, r1
 800684c:	d145      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800684e:	4b9b      	ldr	r3, [pc, #620]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006858:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800685a:	4b98      	ldr	r3, [pc, #608]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800685c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d108      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800686e:	d104      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
 8006876:	f001 b912 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800687a:	4b90      	ldr	r3, [pc, #576]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800687c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006888:	d114      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006890:	d110      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006892:	4b8a      	ldr	r3, [pc, #552]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a0:	d103      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80068a2:	23fa      	movs	r3, #250	@ 0xfa
 80068a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068a6:	f001 b8fa 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80068aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068ae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068b0:	f001 b8f5 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80068b4:	4b81      	ldr	r3, [pc, #516]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068c0:	d107      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068c8:	d103      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80068ca:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80068cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ce:	f001 b8e6 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d6:	f001 b8e2 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068de:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80068e2:	430b      	orrs	r3, r1
 80068e4:	d151      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068e6:	4b75      	ldr	r3, [pc, #468]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80068e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068ec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80068f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	2b80      	cmp	r3, #128	@ 0x80
 80068f6:	d035      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	2b80      	cmp	r3, #128	@ 0x80
 80068fc:	d841      	bhi.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2b60      	cmp	r3, #96	@ 0x60
 8006902:	d02a      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	2b60      	cmp	r3, #96	@ 0x60
 8006908:	d83b      	bhi.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	2b40      	cmp	r3, #64	@ 0x40
 800690e:	d009      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	2b40      	cmp	r3, #64	@ 0x40
 8006914:	d835      	bhi.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00c      	beq.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	2b20      	cmp	r3, #32
 8006920:	d012      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006922:	e02e      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fb77 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006932:	f001 b8b4 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006936:	f107 0318 	add.w	r3, r7, #24
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fcc8 	bl	80062d0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006944:	f001 b8ab 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fe19 	bl	8006584 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006956:	f001 b8a2 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800695a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006960:	f001 b89d 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006964:	4b55      	ldr	r3, [pc, #340]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006970:	d103      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006972:	4b54      	ldr	r3, [pc, #336]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006976:	f001 b892 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800697e:	f001 b88e 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006986:	f001 b88a 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800698a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006992:	430b      	orrs	r3, r1
 8006994:	d126      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006996:	4b49      	ldr	r3, [pc, #292]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006998:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800699c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80069a2:	4b46      	ldr	r3, [pc, #280]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ae:	d106      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80069b6:	4b43      	ldr	r3, [pc, #268]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ba:	f001 b870 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80069be:	4b3f      	ldr	r3, [pc, #252]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ca:	d107      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d2:	d103      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 80069d4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d8:	f001 b861 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e0:	f001 b85d 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80069e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80069ec:	430b      	orrs	r3, r1
 80069ee:	d171      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80069f0:	4b32      	ldr	r3, [pc, #200]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80069f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069f6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80069fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a02:	d034      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a0a:	d853      	bhi.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a12:	d00b      	beq.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a1a:	d84b      	bhi.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d016      	beq.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a28:	d009      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8006a2a:	e043      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff faf3 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a3a:	f001 b830 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a3e:	f107 0318 	add.w	r3, r7, #24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff fc44 	bl	80062d0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a4c:	f001 b827 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006a50:	4b1a      	ldr	r3, [pc, #104]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a5c:	d103      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8006a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a62:	f001 b81c 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a6a:	f001 b818 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a6e:	4b13      	ldr	r3, [pc, #76]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d118      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a7a:	4b10      	ldr	r3, [pc, #64]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	0e1b      	lsrs	r3, r3, #24
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	e006      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	0e1b      	lsrs	r3, r3, #24
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006aa8:	f000 bff9 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ab0:	f000 bff5 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ab8:	f000 bff1 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006abc:	46020c00 	.word	0x46020c00
 8006ac0:	0007a120 	.word	0x0007a120
 8006ac4:	00f42400 	.word	0x00f42400
 8006ac8:	007a1200 	.word	0x007a1200
 8006acc:	02dc6c00 	.word	0x02dc6c00
 8006ad0:	0800acc8 	.word	0x0800acc8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006adc:	430b      	orrs	r3, r1
 8006ade:	d17f      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ae0:	4ba8      	ldr	r3, [pc, #672]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006ae2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d165      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006af2:	4ba4      	ldr	r3, [pc, #656]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006af8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006afc:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b04:	d034      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b0c:	d853      	bhi.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b14:	d00b      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1c:	d84b      	bhi.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b2a:	d009      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006b2c:	e043      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff fa72 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006b3c:	f000 bfaf 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b40:	f107 0318 	add.w	r3, r7, #24
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fbc3 	bl	80062d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006b4e:	f000 bfa6 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006b52:	4b8c      	ldr	r3, [pc, #560]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b5e:	d103      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8006b60:	4b89      	ldr	r3, [pc, #548]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006b64:	f000 bf9b 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006b6c:	f000 bf97 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b70:	4b84      	ldr	r3, [pc, #528]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d118      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b7c:	4b81      	ldr	r3, [pc, #516]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8006b88:	4b7e      	ldr	r3, [pc, #504]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	0e1b      	lsrs	r3, r3, #24
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	e006      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8006b94:	4b7b      	ldr	r3, [pc, #492]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	0e1b      	lsrs	r3, r3, #24
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	4a7a      	ldr	r2, [pc, #488]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006baa:	f000 bf78 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006bb2:	f000 bf74 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006bba:	f000 bf70 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bc4:	d108      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fa26 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd4:	f000 bf63 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bdc:	f000 bf5f 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be4:	1e51      	subs	r1, r2, #1
 8006be6:	430b      	orrs	r3, r1
 8006be8:	d136      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006bea:	4b66      	ldr	r3, [pc, #408]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006bfc:	f7fe fc22 	bl	8005444 <HAL_RCC_GetPCLK2Freq>
 8006c00:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c02:	f000 bf4c 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d104      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c0c:	f7fe faea 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8006c10:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c12:	f000 bf44 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006c16:	4b5b      	ldr	r3, [pc, #364]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c22:	d106      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d103      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8006c2a:	4b59      	ldr	r3, [pc, #356]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2e:	f000 bf36 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006c32:	4b54      	ldr	r3, [pc, #336]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d104      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4c:	f000 bf27 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c54:	f000 bf23 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c5c:	1f11      	subs	r1, r2, #4
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	d136      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006c62:	4b48      	ldr	r3, [pc, #288]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c74:	f7fe fbd2 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8006c78:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c7a:	f000 bf10 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d104      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c84:	f7fe faae 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8006c88:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c8a:	f000 bf08 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9a:	d106      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d103      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8006ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca6:	f000 befa 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006caa:	4b36      	ldr	r3, [pc, #216]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	2b30      	cmp	r3, #48	@ 0x30
 8006cbc:	d104      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8006cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc4:	f000 beeb 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ccc:	f000 bee7 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd4:	f1a2 0108 	sub.w	r1, r2, #8
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	d136      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006cdc:	4b29      	ldr	r3, [pc, #164]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ce2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ce6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006cee:	f7fe fb95 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8006cf2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cf4:	f000 bed3 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	2b40      	cmp	r3, #64	@ 0x40
 8006cfc:	d104      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cfe:	f7fe fa71 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8006d02:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d04:	f000 becb 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006d08:	4b1e      	ldr	r3, [pc, #120]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d14:	d106      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	2b80      	cmp	r3, #128	@ 0x80
 8006d1a:	d103      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8006d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d20:	f000 bebd 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006d24:	4b17      	ldr	r3, [pc, #92]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d107      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d36:	d104      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8006d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	f000 beae 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d46:	f000 beaa 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4e:	f1a2 0110 	sub.w	r1, r2, #16
 8006d52:	430b      	orrs	r3, r1
 8006d54:	d141      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006d56:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fe fb58 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8006d6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d6e:	f000 be96 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d78:	d10c      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d7a:	f7fe fa33 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8006d7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d80:	f000 be8d 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006d84:	46020c00 	.word	0x46020c00
 8006d88:	02dc6c00 	.word	0x02dc6c00
 8006d8c:	0800acc8 	.word	0x0800acc8
 8006d90:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006d94:	4baa      	ldr	r3, [pc, #680]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da0:	d107      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d103      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006daa:	4ba6      	ldr	r3, [pc, #664]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dae:	f000 be76 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006db2:	4ba3      	ldr	r3, [pc, #652]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d108      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc6:	d104      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8006dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dce:	f000 be66 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd6:	f000 be62 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dde:	f1a2 0120 	sub.w	r1, r2, #32
 8006de2:	430b      	orrs	r3, r1
 8006de4:	d158      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006de6:	4b96      	ldr	r3, [pc, #600]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006df8:	f7fe fb38 	bl	800546c <HAL_RCC_GetPCLK3Freq>
 8006dfc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dfe:	f000 be4e 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d104      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e08:	f7fe f9ec 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8006e0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e0e:	f000 be46 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006e12:	4b8b      	ldr	r3, [pc, #556]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d103      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8006e26:	4b87      	ldr	r3, [pc, #540]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2a:	f000 be38 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006e2e:	4b84      	ldr	r3, [pc, #528]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d104      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e48:	f000 be29 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d11b      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d118      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e5e:	4b78      	ldr	r3, [pc, #480]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8006e6a:	4b75      	ldr	r3, [pc, #468]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	0e1b      	lsrs	r3, r3, #24
 8006e70:	f003 030f 	and.w	r3, r3, #15
 8006e74:	e006      	b.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006e76:	4b72      	ldr	r3, [pc, #456]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	0e1b      	lsrs	r3, r3, #24
 8006e80:	f003 030f 	and.w	r3, r3, #15
 8006e84:	4a70      	ldr	r2, [pc, #448]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	f000 be07 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e94:	f000 be03 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e9c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	d16c      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006ea4:	4b66      	ldr	r3, [pc, #408]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eaa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006eae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb6:	d104      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006eb8:	f7fe f994 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8006ebc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ebe:	f000 bdee 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec8:	d108      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eca:	f107 0318 	add.w	r3, r7, #24
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff f9fe 	bl	80062d0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed8:	f000 bde1 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006ee2:	f7fe fa81 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8006ee6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ee8:	f000 bdd9 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ef2:	d122      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ef4:	4b52      	ldr	r3, [pc, #328]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d118      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f00:	4b4f      	ldr	r3, [pc, #316]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	0e1b      	lsrs	r3, r3, #24
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	e006      	b.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006f18:	4b49      	ldr	r3, [pc, #292]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	0e1b      	lsrs	r3, r3, #24
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	4a48      	ldr	r2, [pc, #288]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2e:	f000 bdb6 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f36:	f000 bdb2 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006f3a:	4b41      	ldr	r3, [pc, #260]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f46:	d107      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f4e:	d103      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8006f50:	4b3c      	ldr	r3, [pc, #240]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f54:	f000 bda3 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006f58:	4b39      	ldr	r3, [pc, #228]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f64:	d107      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f6c:	d103      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8006f6e:	4b35      	ldr	r3, [pc, #212]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f72:	f000 bd94 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7a:	f000 bd90 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f82:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f86:	430b      	orrs	r3, r1
 8006f88:	d160      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d84c      	bhi.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fdd 	.word	0x08006fdd
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fcb 	.word	0x08006fcb
 8006fb0:	08006fe7 	.word	0x08006fe7
 8006fb4:	08006ff1 	.word	0x08006ff1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff f82d 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fc6:	f000 bd6a 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fca:	f107 030c 	add.w	r3, r7, #12
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fad8 	bl	8006584 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fd8:	f000 bd61 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006fdc:	f7fe fa04 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8006fe0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fe2:	f000 bd5c 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006fe6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fec:	f000 bd57 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ff0:	4b13      	ldr	r3, [pc, #76]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0320 	and.w	r3, r3, #32
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d118      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ffc:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007008:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	0e1b      	lsrs	r3, r3, #24
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	e006      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007014:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	0e1b      	lsrs	r3, r3, #24
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	4a09      	ldr	r2, [pc, #36]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800702a:	f000 bd38 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007032:	f000 bd34 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800703a:	f000 bd30 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800703e:	bf00      	nop
 8007040:	46020c00 	.word	0x46020c00
 8007044:	00f42400 	.word	0x00f42400
 8007048:	0800acc8 	.word	0x0800acc8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007054:	430b      	orrs	r3, r1
 8007056:	d167      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007058:	4ba0      	ldr	r3, [pc, #640]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800705a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800705e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007062:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800706a:	d036      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007072:	d855      	bhi.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800707a:	d029      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007082:	d84d      	bhi.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800708a:	d013      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007092:	d845      	bhi.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	2b00      	cmp	r3, #0
 8007098:	d015      	beq.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a0:	d13e      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe ffb8 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b0:	f000 bcf5 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b4:	f107 030c 	add.w	r3, r7, #12
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fa63 	bl	8006584 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070c2:	f000 bcec 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80070c6:	f7fe f98f 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 80070ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070cc:	f000 bce7 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80070d0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070d6:	f000 bce2 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070da:	4b80      	ldr	r3, [pc, #512]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d118      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070e6:	4b7d      	ldr	r3, [pc, #500]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80070f2:	4b7a      	ldr	r3, [pc, #488]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	0e1b      	lsrs	r3, r3, #24
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	e006      	b.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80070fe:	4b77      	ldr	r3, [pc, #476]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	0e1b      	lsrs	r3, r3, #24
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	4a74      	ldr	r2, [pc, #464]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800710e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007114:	f000 bcc3 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800711c:	f000 bcbf 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007124:	f000 bcbb 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800712c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007130:	430b      	orrs	r3, r1
 8007132:	d14c      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007134:	4b69      	ldr	r3, [pc, #420]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800713a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800713e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007146:	f7fe f969 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 800714a:	6378      	str	r0, [r7, #52]	@ 0x34
 800714c:	f000 bca7 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007156:	d104      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007158:	f7fe f844 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 800715c:	6378      	str	r0, [r7, #52]	@ 0x34
 800715e:	f000 bc9e 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007162:	4b5e      	ldr	r3, [pc, #376]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716e:	d107      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007176:	d103      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8007178:	4b5a      	ldr	r3, [pc, #360]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800717a:	637b      	str	r3, [r7, #52]	@ 0x34
 800717c:	f000 bc8f 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007180:	4b56      	ldr	r3, [pc, #344]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b20      	cmp	r3, #32
 800718a:	d11c      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007192:	d118      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007194:	4b51      	ldr	r3, [pc, #324]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80071a0:	4b4e      	ldr	r3, [pc, #312]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	0e1b      	lsrs	r3, r3, #24
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	e006      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80071ac:	4b4b      	ldr	r3, [pc, #300]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80071ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	0e1b      	lsrs	r3, r3, #24
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	4a49      	ldr	r2, [pc, #292]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80071bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c2:	f000 bc6c 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ca:	f000 bc68 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80071ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d2:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80071d6:	430b      	orrs	r3, r1
 80071d8:	d14c      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80071da:	4b40      	ldr	r3, [pc, #256]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80071dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071e0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071ec:	f7fe f916 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 80071f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80071f2:	f000 bc54 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071fc:	d104      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071fe:	f7fd fff1 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8007202:	6378      	str	r0, [r7, #52]	@ 0x34
 8007204:	f000 bc4b 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007208:	4b34      	ldr	r3, [pc, #208]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007214:	d107      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721c:	d103      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 800721e:	4b31      	ldr	r3, [pc, #196]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
 8007222:	f000 bc3c 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007226:	4b2d      	ldr	r3, [pc, #180]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b20      	cmp	r3, #32
 8007230:	d11c      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8007232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007234:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007238:	d118      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800723a:	4b28      	ldr	r3, [pc, #160]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8007246:	4b25      	ldr	r3, [pc, #148]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	0e1b      	lsrs	r3, r3, #24
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	e006      	b.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8007252:	4b22      	ldr	r3, [pc, #136]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	0e1b      	lsrs	r3, r3, #24
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	4a1f      	ldr	r2, [pc, #124]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
 8007268:	f000 bc19 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007270:	f000 bc15 	b.w	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007278:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800727c:	430b      	orrs	r3, r1
 800727e:	d157      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007280:	4b16      	ldr	r3, [pc, #88]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007286:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800728a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007290:	d02a      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	2bc0      	cmp	r3, #192	@ 0xc0
 8007296:	d848      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	2b80      	cmp	r3, #128	@ 0x80
 800729c:	d00d      	beq.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	2b80      	cmp	r3, #128	@ 0x80
 80072a2:	d842      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80072a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	2b40      	cmp	r3, #64	@ 0x40
 80072ae:	d011      	beq.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80072b0:	e03b      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80072b2:	f7fe f8db 	bl	800546c <HAL_RCC_GetPCLK3Freq>
 80072b6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072b8:	e3f1      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072ba:	4b08      	ldr	r3, [pc, #32]	@ (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c6:	d102      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072cc:	e3e7      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072d2:	e3e4      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80072d4:	f7fd ff86 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80072d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072da:	e3e0      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80072dc:	46020c00 	.word	0x46020c00
 80072e0:	0800acc8 	.word	0x0800acc8
 80072e4:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072e8:	4ba3      	ldr	r3, [pc, #652]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d117      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072f4:	4ba0      	ldr	r3, [pc, #640]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8007300:	4b9d      	ldr	r3, [pc, #628]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	0e1b      	lsrs	r3, r3, #24
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	e006      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 800730c:	4b9a      	ldr	r3, [pc, #616]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800730e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	4a98      	ldr	r2, [pc, #608]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800731c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007320:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007322:	e3bc      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007328:	e3b9      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800732e:	e3b6      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007338:	430b      	orrs	r3, r1
 800733a:	d147      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800733c:	4b8e      	ldr	r3, [pc, #568]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800733e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007342:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007346:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800734e:	f7fe f865 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8007352:	6378      	str	r0, [r7, #52]	@ 0x34
 8007354:	e3a3      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800735c:	d103      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800735e:	f7fd ff41 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8007362:	6378      	str	r0, [r7, #52]	@ 0x34
 8007364:	e39b      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007366:	4b84      	ldr	r3, [pc, #528]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800736e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007372:	d106      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800737a:	d102      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 800737c:	4b80      	ldr	r3, [pc, #512]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	e38d      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007382:	4b7d      	ldr	r3, [pc, #500]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b20      	cmp	r3, #32
 800738c:	d11b      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007394:	d117      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007396:	4b78      	ldr	r3, [pc, #480]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80073a2:	4b75      	ldr	r3, [pc, #468]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	0e1b      	lsrs	r3, r3, #24
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	e006      	b.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80073ae:	4b72      	ldr	r3, [pc, #456]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80073b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	0e1b      	lsrs	r3, r3, #24
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	4a6f      	ldr	r2, [pc, #444]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80073be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c4:	e36b      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ca:	e368      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80073cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80073d4:	430b      	orrs	r3, r1
 80073d6:	d164      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80073d8:	4b67      	ldr	r3, [pc, #412]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80073da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80073e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d120      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073ea:	4b63      	ldr	r3, [pc, #396]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d117      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073f6:	4b60      	ldr	r3, [pc, #384]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8007402:	4b5d      	ldr	r3, [pc, #372]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	0e1b      	lsrs	r3, r3, #24
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	e006      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800740e:	4b5a      	ldr	r3, [pc, #360]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	0e1b      	lsrs	r3, r3, #24
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	4a57      	ldr	r2, [pc, #348]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800741e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e33b      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
 800742a:	e338      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800742c:	4b52      	ldr	r3, [pc, #328]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800742e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800743a:	d112      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007442:	d10e      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007444:	4b4c      	ldr	r3, [pc, #304]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800744a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800744e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007452:	d102      	bne.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8007454:	23fa      	movs	r3, #250	@ 0xfa
 8007456:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007458:	e321      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800745a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007460:	e31d      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007462:	4b45      	ldr	r3, [pc, #276]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800746a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800746e:	d106      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007476:	d102      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8007478:	4b41      	ldr	r3, [pc, #260]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
 800747c:	e30f      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800747e:	4b3e      	ldr	r3, [pc, #248]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b02      	cmp	r3, #2
 800748a:	d107      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007492:	d103      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8007494:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007498:	637b      	str	r3, [r7, #52]	@ 0x34
 800749a:	e300      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a0:	e2fd      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80074a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a6:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80074aa:	430b      	orrs	r3, r1
 80074ac:	d16a      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80074ae:	4b32      	ldr	r3, [pc, #200]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80074b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d120      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074c0:	4b2d      	ldr	r3, [pc, #180]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d117      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074cc:	4b2a      	ldr	r3, [pc, #168]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80074d8:	4b27      	ldr	r3, [pc, #156]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	0e1b      	lsrs	r3, r3, #24
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	e006      	b.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80074e4:	4b24      	ldr	r3, [pc, #144]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80074e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074ea:	041b      	lsls	r3, r3, #16
 80074ec:	0e1b      	lsrs	r3, r3, #24
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	4a22      	ldr	r2, [pc, #136]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80074f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074fa:	e2d0      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007500:	e2cd      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007502:	4b1d      	ldr	r3, [pc, #116]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007510:	d112      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007518:	d10e      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800751a:	4b17      	ldr	r3, [pc, #92]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800751c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007528:	d102      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800752a:	23fa      	movs	r3, #250	@ 0xfa
 800752c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800752e:	e2b6      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007530:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007534:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007536:	e2b2      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007538:	4b0f      	ldr	r3, [pc, #60]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007544:	d106      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800754c:	d102      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800754e:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007550:	637b      	str	r3, [r7, #52]	@ 0x34
 8007552:	e2a4      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007554:	4b08      	ldr	r3, [pc, #32]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b02      	cmp	r3, #2
 8007560:	d107      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007568:	d103      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800756a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800756e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007570:	e295      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
 8007576:	e292      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007578:	46020c00 	.word	0x46020c00
 800757c:	0800acc8 	.word	0x0800acc8
 8007580:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007588:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800758c:	430b      	orrs	r3, r1
 800758e:	d147      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007590:	4b9a      	ldr	r3, [pc, #616]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007596:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800759a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075a2:	f7fd ff3b 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 80075a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80075a8:	e279      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80075aa:	4b94      	ldr	r3, [pc, #592]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80075ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b8:	d112      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c0:	d10e      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075c2:	4b8e      	ldr	r3, [pc, #568]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80075c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075d0:	d102      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 80075d2:	23fa      	movs	r3, #250	@ 0xfa
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075d6:	e262      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80075d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80075dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075de:	e25e      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80075e0:	4b86      	ldr	r3, [pc, #536]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ec:	d106      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80075f4:	d102      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 80075f6:	4b82      	ldr	r3, [pc, #520]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075fa:	e250      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80075fc:	4b7f      	ldr	r3, [pc, #508]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80075fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b02      	cmp	r3, #2
 8007608:	d107      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007610:	d103      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8007612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
 8007618:	e241      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
 800761e:	e23e      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007624:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007628:	430b      	orrs	r3, r1
 800762a:	d12d      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800762c:	4b73      	ldr	r3, [pc, #460]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800762e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007632:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007636:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007638:	4b70      	ldr	r3, [pc, #448]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007644:	d105      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 800764c:	4b6c      	ldr	r3, [pc, #432]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800764e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007650:	e225      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007658:	d107      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800765a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fcdc 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	637b      	str	r3, [r7, #52]	@ 0x34
 8007668:	e219      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007670:	d107      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007672:	f107 0318 	add.w	r3, r7, #24
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fe2a 	bl	80062d0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007680:	e20d      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	e20a      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007690:	430b      	orrs	r3, r1
 8007692:	d156      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007694:	4b59      	ldr	r3, [pc, #356]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800769a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800769e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076a6:	d028      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076ae:	d845      	bhi.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076b6:	d013      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076be:	d83d      	bhi.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076cc:	d004      	beq.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 80076ce:	e035      	b.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80076d0:	f7fd feb8 	bl	8005444 <HAL_RCC_GetPCLK2Freq>
 80076d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076d6:	e1e2      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076d8:	f7fd fd84 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80076dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076de:	e1de      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076e0:	4b46      	ldr	r3, [pc, #280]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ec:	d102      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 80076ee:	4b44      	ldr	r3, [pc, #272]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80076f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076f2:	e1d4      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076f8:	e1d1      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076fa:	4b40      	ldr	r3, [pc, #256]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b20      	cmp	r3, #32
 8007704:	d117      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007706:	4b3d      	ldr	r3, [pc, #244]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8007712:	4b3a      	ldr	r3, [pc, #232]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	0e1b      	lsrs	r3, r3, #24
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	e006      	b.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800771e:	4b37      	ldr	r3, [pc, #220]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	0e1b      	lsrs	r3, r3, #24
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	4a35      	ldr	r2, [pc, #212]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 800772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007734:	e1b3      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800773a:	e1b0      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007740:	e1ad      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007746:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800774a:	430b      	orrs	r3, r1
 800774c:	d15c      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800774e:	4b2b      	ldr	r3, [pc, #172]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007758:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007760:	d028      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007768:	d845      	bhi.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007770:	d013      	beq.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007778:	d83d      	bhi.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007786:	d004      	beq.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8007788:	e035      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800778a:	f7fd fe47 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 800778e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007790:	e185      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007792:	f7fd fd27 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8007796:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007798:	e181      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800779a:	4b18      	ldr	r3, [pc, #96]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077a6:	d102      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 80077a8:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077ac:	e177      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077b2:	e174      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077b4:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d117      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077c0:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 80077cc:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	0e1b      	lsrs	r3, r3, #24
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	e006      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 80077d8:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80077da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	0e1b      	lsrs	r3, r3, #24
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	4a07      	ldr	r2, [pc, #28]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80077e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077ee:	e156      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077f4:	e153      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077fa:	e150      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80077fc:	46020c00 	.word	0x46020c00
 8007800:	00f42400 	.word	0x00f42400
 8007804:	0800acc8 	.word	0x0800acc8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800780c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007810:	430b      	orrs	r3, r1
 8007812:	d176      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007814:	4ba4      	ldr	r3, [pc, #656]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800781a:	f003 0318 	and.w	r3, r3, #24
 800781e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	2b18      	cmp	r3, #24
 8007824:	d86a      	bhi.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007891 	.word	0x08007891
 8007830:	080078fd 	.word	0x080078fd
 8007834:	080078fd 	.word	0x080078fd
 8007838:	080078fd 	.word	0x080078fd
 800783c:	080078fd 	.word	0x080078fd
 8007840:	080078fd 	.word	0x080078fd
 8007844:	080078fd 	.word	0x080078fd
 8007848:	080078fd 	.word	0x080078fd
 800784c:	08007899 	.word	0x08007899
 8007850:	080078fd 	.word	0x080078fd
 8007854:	080078fd 	.word	0x080078fd
 8007858:	080078fd 	.word	0x080078fd
 800785c:	080078fd 	.word	0x080078fd
 8007860:	080078fd 	.word	0x080078fd
 8007864:	080078fd 	.word	0x080078fd
 8007868:	080078fd 	.word	0x080078fd
 800786c:	080078a1 	.word	0x080078a1
 8007870:	080078fd 	.word	0x080078fd
 8007874:	080078fd 	.word	0x080078fd
 8007878:	080078fd 	.word	0x080078fd
 800787c:	080078fd 	.word	0x080078fd
 8007880:	080078fd 	.word	0x080078fd
 8007884:	080078fd 	.word	0x080078fd
 8007888:	080078fd 	.word	0x080078fd
 800788c:	080078bb 	.word	0x080078bb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007890:	f7fd fdec 	bl	800546c <HAL_RCC_GetPCLK3Freq>
 8007894:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007896:	e102      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007898:	f7fd fca4 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 800789c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800789e:	e0fe      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078a0:	4b81      	ldr	r3, [pc, #516]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ac:	d102      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 80078ae:	4b7f      	ldr	r3, [pc, #508]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80078b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078b2:	e0f4      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078b8:	e0f1      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80078ba:	4b7b      	ldr	r3, [pc, #492]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d117      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078c6:	4b78      	ldr	r3, [pc, #480]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80078d2:	4b75      	ldr	r3, [pc, #468]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	0e1b      	lsrs	r3, r3, #24
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	e006      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 80078de:	4b72      	ldr	r3, [pc, #456]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80078e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078e4:	041b      	lsls	r3, r3, #16
 80078e6:	0e1b      	lsrs	r3, r3, #24
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	4a70      	ldr	r2, [pc, #448]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80078ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078f4:	e0d3      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078fa:	e0d0      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007900:	e0cd      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007906:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800790a:	430b      	orrs	r3, r1
 800790c:	d155      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800790e:	4b66      	ldr	r3, [pc, #408]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007910:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007914:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007918:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007920:	d013      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007928:	d844      	bhi.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007930:	d013      	beq.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007938:	d83c      	bhi.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	2b00      	cmp	r3, #0
 800793e:	d014      	beq.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007946:	d014      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007948:	e034      	b.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800794a:	f107 0318 	add.w	r3, r7, #24
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fcbe 	bl	80062d0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007958:	e0a1      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800795a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fb5c 	bl	800601c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007968:	e099      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800796a:	f7fd fc3b 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 800796e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007970:	e095      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007972:	4b4d      	ldr	r3, [pc, #308]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b20      	cmp	r3, #32
 800797c:	d117      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800797e:	4b4a      	ldr	r3, [pc, #296]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800798a:	4b47      	ldr	r3, [pc, #284]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	0e1b      	lsrs	r3, r3, #24
 8007990:	f003 030f 	and.w	r3, r3, #15
 8007994:	e006      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8007996:	4b44      	ldr	r3, [pc, #272]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800799c:	041b      	lsls	r3, r3, #16
 800799e:	0e1b      	lsrs	r3, r3, #24
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	4a42      	ldr	r2, [pc, #264]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80079a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079ac:	e077      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079b2:	e074      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079b8:	e071      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80079ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079be:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80079c2:	430b      	orrs	r3, r1
 80079c4:	d131      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80079c6:	4b38      	ldr	r3, [pc, #224]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80079c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079d0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80079d2:	4b35      	ldr	r3, [pc, #212]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80079d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d106      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d103      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 80079e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ec:	e057      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80079ee:	4b2e      	ldr	r3, [pc, #184]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80079f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079fc:	d112      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a04:	d10e      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a06:	4b28      	ldr	r3, [pc, #160]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a14:	d102      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8007a16:	23fa      	movs	r3, #250	@ 0xfa
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a1a:	e040      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007a1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a22:	e03c      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a28:	e039      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a2e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007a32:	430b      	orrs	r3, r1
 8007a34:	d131      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007a36:	4b1c      	ldr	r3, [pc, #112]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007a38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a3c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a40:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007a42:	4b19      	ldr	r3, [pc, #100]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a4e:	d105      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8007a56:	4b17      	ldr	r3, [pc, #92]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5a:	e020      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007a5c:	4b12      	ldr	r3, [pc, #72]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a68:	d106      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a70:	d102      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007a72:	4b11      	ldr	r3, [pc, #68]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a76:	e012      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007a78:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a84:	d106      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a8c:	d102      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8007a8e:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a92:	e004      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a98:	e001      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3738      	adds	r7, #56	@ 0x38
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	46020c00 	.word	0x46020c00
 8007aac:	00f42400 	.word	0x00f42400
 8007ab0:	0800acc8 	.word	0x0800acc8
 8007ab4:	02dc6c00 	.word	0x02dc6c00
 8007ab8:	016e3600 	.word	0x016e3600

08007abc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007ac4:	4b47      	ldr	r3, [pc, #284]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a46      	ldr	r2, [pc, #280]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007aca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ace:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ad0:	f7fa fbe6 	bl	80022a0 <HAL_GetTick>
 8007ad4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ad6:	e008      	b.n	8007aea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ad8:	f7fa fbe2 	bl	80022a0 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e077      	b.n	8007bda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aea:	4b3e      	ldr	r3, [pc, #248]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007af6:	4b3b      	ldr	r3, [pc, #236]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007afe:	f023 0303 	bic.w	r3, r3, #3
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6811      	ldr	r1, [r2, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6852      	ldr	r2, [r2, #4]
 8007b0a:	3a01      	subs	r2, #1
 8007b0c:	0212      	lsls	r2, r2, #8
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	4934      	ldr	r1, [pc, #208]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007b16:	4b33      	ldr	r3, [pc, #204]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b1a:	4b33      	ldr	r3, [pc, #204]	@ (8007be8 <RCCEx_PLL2_Config+0x12c>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6892      	ldr	r2, [r2, #8]
 8007b22:	3a01      	subs	r2, #1
 8007b24:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	68d2      	ldr	r2, [r2, #12]
 8007b2c:	3a01      	subs	r2, #1
 8007b2e:	0252      	lsls	r2, r2, #9
 8007b30:	b292      	uxth	r2, r2
 8007b32:	4311      	orrs	r1, r2
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6912      	ldr	r2, [r2, #16]
 8007b38:	3a01      	subs	r2, #1
 8007b3a:	0412      	lsls	r2, r2, #16
 8007b3c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b40:	4311      	orrs	r1, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6952      	ldr	r2, [r2, #20]
 8007b46:	3a01      	subs	r2, #1
 8007b48:	0612      	lsls	r2, r2, #24
 8007b4a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	4924      	ldr	r1, [pc, #144]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b56:	4b23      	ldr	r3, [pc, #140]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5a:	f023 020c 	bic.w	r2, r3, #12
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	4920      	ldr	r1, [pc, #128]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b68:	4b1e      	ldr	r3, [pc, #120]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	491c      	ldr	r1, [pc, #112]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007b76:	4b1b      	ldr	r3, [pc, #108]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b7c:	f023 0310 	bic.w	r3, r3, #16
 8007b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b82:	4b18      	ldr	r3, [pc, #96]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	69d2      	ldr	r2, [r2, #28]
 8007b92:	00d2      	lsls	r2, r2, #3
 8007b94:	4913      	ldr	r1, [pc, #76]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007b9a:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	4a11      	ldr	r2, [pc, #68]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007ba0:	f043 0310 	orr.w	r3, r3, #16
 8007ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a0e      	ldr	r2, [pc, #56]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007bac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bb0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bb2:	f7fa fb75 	bl	80022a0 <HAL_GetTick>
 8007bb6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bb8:	e008      	b.n	8007bcc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bba:	f7fa fb71 	bl	80022a0 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e006      	b.n	8007bda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <RCCEx_PLL2_Config+0x128>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0f0      	beq.n	8007bba <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0

}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	46020c00 	.word	0x46020c00
 8007be8:	80800000 	.word	0x80800000

08007bec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007bf4:	4b47      	ldr	r3, [pc, #284]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a46      	ldr	r2, [pc, #280]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bfe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c00:	f7fa fb4e 	bl	80022a0 <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c06:	e008      	b.n	8007c1a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c08:	f7fa fb4a 	bl	80022a0 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d901      	bls.n	8007c1a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e077      	b.n	8007d0a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f0      	bne.n	8007c08 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007c26:	4b3b      	ldr	r3, [pc, #236]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6852      	ldr	r2, [r2, #4]
 8007c3a:	3a01      	subs	r2, #1
 8007c3c:	0212      	lsls	r2, r2, #8
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	4934      	ldr	r1, [pc, #208]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	630b      	str	r3, [r1, #48]	@ 0x30
 8007c46:	4b33      	ldr	r3, [pc, #204]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c4a:	4b33      	ldr	r3, [pc, #204]	@ (8007d18 <RCCEx_PLL3_Config+0x12c>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6892      	ldr	r2, [r2, #8]
 8007c52:	3a01      	subs	r2, #1
 8007c54:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	68d2      	ldr	r2, [r2, #12]
 8007c5c:	3a01      	subs	r2, #1
 8007c5e:	0252      	lsls	r2, r2, #9
 8007c60:	b292      	uxth	r2, r2
 8007c62:	4311      	orrs	r1, r2
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6912      	ldr	r2, [r2, #16]
 8007c68:	3a01      	subs	r2, #1
 8007c6a:	0412      	lsls	r2, r2, #16
 8007c6c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c70:	4311      	orrs	r1, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6952      	ldr	r2, [r2, #20]
 8007c76:	3a01      	subs	r2, #1
 8007c78:	0612      	lsls	r2, r2, #24
 8007c7a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	4924      	ldr	r1, [pc, #144]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007c86:	4b23      	ldr	r3, [pc, #140]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c8a:	f023 020c 	bic.w	r2, r3, #12
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	4920      	ldr	r1, [pc, #128]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c98:	4b1e      	ldr	r3, [pc, #120]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	491c      	ldr	r1, [pc, #112]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	4a1a      	ldr	r2, [pc, #104]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007cac:	f023 0310 	bic.w	r3, r3, #16
 8007cb0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cb2:	4b18      	ldr	r3, [pc, #96]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	69d2      	ldr	r2, [r2, #28]
 8007cc2:	00d2      	lsls	r2, r2, #3
 8007cc4:	4913      	ldr	r1, [pc, #76]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007cca:	4b12      	ldr	r3, [pc, #72]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cce:	4a11      	ldr	r2, [pc, #68]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007cd0:	f043 0310 	orr.w	r3, r3, #16
 8007cd4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a0e      	ldr	r2, [pc, #56]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ce0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ce2:	f7fa fadd 	bl	80022a0 <HAL_GetTick>
 8007ce6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ce8:	e008      	b.n	8007cfc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cea:	f7fa fad9 	bl	80022a0 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d901      	bls.n	8007cfc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e006      	b.n	8007d0a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cfc:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <RCCEx_PLL3_Config+0x128>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0f0      	beq.n	8007cea <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	46020c00 	.word	0x46020c00
 8007d18:	80800000 	.word	0x80800000

08007d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e049      	b.n	8007dc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7f9 f9d4 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f000 fe14 	bl	8008988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d001      	beq.n	8007de4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e06a      	b.n	8007eba <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a35      	ldr	r2, [pc, #212]	@ (8007ec8 <HAL_TIM_Base_Start+0xfc>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d040      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a34      	ldr	r2, [pc, #208]	@ (8007ecc <HAL_TIM_Base_Start+0x100>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d03b      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e08:	d036      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e12:	d031      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a2d      	ldr	r2, [pc, #180]	@ (8007ed0 <HAL_TIM_Base_Start+0x104>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d02c      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a2c      	ldr	r2, [pc, #176]	@ (8007ed4 <HAL_TIM_Base_Start+0x108>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d027      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed8 <HAL_TIM_Base_Start+0x10c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d022      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a29      	ldr	r2, [pc, #164]	@ (8007edc <HAL_TIM_Base_Start+0x110>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01d      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a27      	ldr	r2, [pc, #156]	@ (8007ee0 <HAL_TIM_Base_Start+0x114>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d018      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a26      	ldr	r2, [pc, #152]	@ (8007ee4 <HAL_TIM_Base_Start+0x118>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d013      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a24      	ldr	r2, [pc, #144]	@ (8007ee8 <HAL_TIM_Base_Start+0x11c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00e      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a23      	ldr	r2, [pc, #140]	@ (8007eec <HAL_TIM_Base_Start+0x120>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d009      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a21      	ldr	r2, [pc, #132]	@ (8007ef0 <HAL_TIM_Base_Start+0x124>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <HAL_TIM_Base_Start+0xac>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a20      	ldr	r2, [pc, #128]	@ (8007ef4 <HAL_TIM_Base_Start+0x128>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d115      	bne.n	8007ea4 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef8 <HAL_TIM_Base_Start+0x12c>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b06      	cmp	r3, #6
 8007e88:	d015      	beq.n	8007eb6 <HAL_TIM_Base_Start+0xea>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e90:	d011      	beq.n	8007eb6 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea2:	e008      	b.n	8007eb6 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0201 	orr.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e000      	b.n	8007eb8 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	50012c00 	.word	0x50012c00
 8007ed0:	40000400 	.word	0x40000400
 8007ed4:	50000400 	.word	0x50000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	50000800 	.word	0x50000800
 8007ee0:	40000c00 	.word	0x40000c00
 8007ee4:	50000c00 	.word	0x50000c00
 8007ee8:	40013400 	.word	0x40013400
 8007eec:	50013400 	.word	0x50013400
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	50014000 	.word	0x50014000
 8007ef8:	00010007 	.word	0x00010007

08007efc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e049      	b.n	8007fa2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f841 	bl	8007faa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f000 fd24 	bl	8008988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <HAL_TIM_IC_Start_DMA+0x22>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	e023      	b.n	800802a <HAL_TIM_IC_Start_DMA+0x6a>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d104      	bne.n	8007ff2 <HAL_TIM_IC_Start_DMA+0x32>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	e01b      	b.n	800802a <HAL_TIM_IC_Start_DMA+0x6a>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d104      	bne.n	8008002 <HAL_TIM_IC_Start_DMA+0x42>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	e013      	b.n	800802a <HAL_TIM_IC_Start_DMA+0x6a>
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b0c      	cmp	r3, #12
 8008006:	d104      	bne.n	8008012 <HAL_TIM_IC_Start_DMA+0x52>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800800e:	b2db      	uxtb	r3, r3
 8008010:	e00b      	b.n	800802a <HAL_TIM_IC_Start_DMA+0x6a>
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b10      	cmp	r3, #16
 8008016:	d104      	bne.n	8008022 <HAL_TIM_IC_Start_DMA+0x62>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800801e:	b2db      	uxtb	r3, r3
 8008020:	e003      	b.n	800802a <HAL_TIM_IC_Start_DMA+0x6a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008028:	b2db      	uxtb	r3, r3
 800802a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d104      	bne.n	800803c <HAL_TIM_IC_Start_DMA+0x7c>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008038:	b2db      	uxtb	r3, r3
 800803a:	e013      	b.n	8008064 <HAL_TIM_IC_Start_DMA+0xa4>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d104      	bne.n	800804c <HAL_TIM_IC_Start_DMA+0x8c>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008048:	b2db      	uxtb	r3, r3
 800804a:	e00b      	b.n	8008064 <HAL_TIM_IC_Start_DMA+0xa4>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b08      	cmp	r3, #8
 8008050:	d104      	bne.n	800805c <HAL_TIM_IC_Start_DMA+0x9c>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008058:	b2db      	uxtb	r3, r3
 800805a:	e003      	b.n	8008064 <HAL_TIM_IC_Start_DMA+0xa4>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008062:	b2db      	uxtb	r3, r3
 8008064:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008066:	7dbb      	ldrb	r3, [r7, #22]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d002      	beq.n	8008072 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800806c:	7d7b      	ldrb	r3, [r7, #21]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d101      	bne.n	8008076 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8008072:	2302      	movs	r3, #2
 8008074:	e17a      	b.n	800836c <HAL_TIM_IC_Start_DMA+0x3ac>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008076:	7dbb      	ldrb	r3, [r7, #22]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d153      	bne.n	8008124 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800807c:	7d7b      	ldrb	r3, [r7, #21]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d150      	bne.n	8008124 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_TIM_IC_Start_DMA+0xce>
 8008088:	887b      	ldrh	r3, [r7, #2]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e16c      	b.n	800836c <HAL_TIM_IC_Start_DMA+0x3ac>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_IC_Start_DMA+0xe2>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080a0:	e023      	b.n	80080ea <HAL_TIM_IC_Start_DMA+0x12a>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d104      	bne.n	80080b2 <HAL_TIM_IC_Start_DMA+0xf2>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080b0:	e01b      	b.n	80080ea <HAL_TIM_IC_Start_DMA+0x12a>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d104      	bne.n	80080c2 <HAL_TIM_IC_Start_DMA+0x102>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080c0:	e013      	b.n	80080ea <HAL_TIM_IC_Start_DMA+0x12a>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d104      	bne.n	80080d2 <HAL_TIM_IC_Start_DMA+0x112>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080d0:	e00b      	b.n	80080ea <HAL_TIM_IC_Start_DMA+0x12a>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b10      	cmp	r3, #16
 80080d6:	d104      	bne.n	80080e2 <HAL_TIM_IC_Start_DMA+0x122>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080e0:	e003      	b.n	80080ea <HAL_TIM_IC_Start_DMA+0x12a>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <HAL_TIM_IC_Start_DMA+0x13a>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 80080f8:	e016      	b.n	8008128 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d104      	bne.n	800810a <HAL_TIM_IC_Start_DMA+0x14a>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8008108:	e00e      	b.n	8008128 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d104      	bne.n	800811a <HAL_TIM_IC_Start_DMA+0x15a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 8008118:	e006      	b.n	8008128 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2202      	movs	r2, #2
 800811e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8008122:	e001      	b.n	8008128 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e121      	b.n	800836c <HAL_TIM_IC_Start_DMA+0x3ac>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2201      	movs	r2, #1
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	4618      	mov	r0, r3
 8008132:	f000 ffdd 	bl	80090f0 <TIM_CCxChannelCmd>

  switch (Channel)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b0c      	cmp	r3, #12
 800813a:	f200 80ad 	bhi.w	8008298 <HAL_TIM_IC_Start_DMA+0x2d8>
 800813e:	a201      	add	r2, pc, #4	@ (adr r2, 8008144 <HAL_TIM_IC_Start_DMA+0x184>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	08008179 	.word	0x08008179
 8008148:	08008299 	.word	0x08008299
 800814c:	08008299 	.word	0x08008299
 8008150:	08008299 	.word	0x08008299
 8008154:	080081c1 	.word	0x080081c1
 8008158:	08008299 	.word	0x08008299
 800815c:	08008299 	.word	0x08008299
 8008160:	08008299 	.word	0x08008299
 8008164:	08008209 	.word	0x08008209
 8008168:	08008299 	.word	0x08008299
 800816c:	08008299 	.word	0x08008299
 8008170:	08008299 	.word	0x08008299
 8008174:	08008251 	.word	0x08008251
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817c:	4a7d      	ldr	r2, [pc, #500]	@ (8008374 <HAL_TIM_IC_Start_DMA+0x3b4>)
 800817e:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008184:	4a7c      	ldr	r2, [pc, #496]	@ (8008378 <HAL_TIM_IC_Start_DMA+0x3b8>)
 8008186:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818c:	4a7b      	ldr	r2, [pc, #492]	@ (800837c <HAL_TIM_IC_Start_DMA+0x3bc>)
 800818e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3334      	adds	r3, #52	@ 0x34
 800819a:	4619      	mov	r1, r3
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	887b      	ldrh	r3, [r7, #2]
 80081a0:	f000 fae8 	bl	8008774 <TIM_DMA_Start_IT>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e0de      	b.n	800836c <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081bc:	60da      	str	r2, [r3, #12]
      break;
 80081be:	e06e      	b.n	800829e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c4:	4a6b      	ldr	r2, [pc, #428]	@ (8008374 <HAL_TIM_IC_Start_DMA+0x3b4>)
 80081c6:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081cc:	4a6a      	ldr	r2, [pc, #424]	@ (8008378 <HAL_TIM_IC_Start_DMA+0x3b8>)
 80081ce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	4a69      	ldr	r2, [pc, #420]	@ (800837c <HAL_TIM_IC_Start_DMA+0x3bc>)
 80081d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3338      	adds	r3, #56	@ 0x38
 80081e2:	4619      	mov	r1, r3
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	887b      	ldrh	r3, [r7, #2]
 80081e8:	f000 fac4 	bl	8008774 <TIM_DMA_Start_IT>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e0ba      	b.n	800836c <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68da      	ldr	r2, [r3, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008204:	60da      	str	r2, [r3, #12]
      break;
 8008206:	e04a      	b.n	800829e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4a59      	ldr	r2, [pc, #356]	@ (8008374 <HAL_TIM_IC_Start_DMA+0x3b4>)
 800820e:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	4a58      	ldr	r2, [pc, #352]	@ (8008378 <HAL_TIM_IC_Start_DMA+0x3b8>)
 8008216:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	4a57      	ldr	r2, [pc, #348]	@ (800837c <HAL_TIM_IC_Start_DMA+0x3bc>)
 800821e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	333c      	adds	r3, #60	@ 0x3c
 800822a:	4619      	mov	r1, r3
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	887b      	ldrh	r3, [r7, #2]
 8008230:	f000 faa0 	bl	8008774 <TIM_DMA_Start_IT>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e096      	b.n	800836c <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800824c:	60da      	str	r2, [r3, #12]
      break;
 800824e:	e026      	b.n	800829e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008254:	4a47      	ldr	r2, [pc, #284]	@ (8008374 <HAL_TIM_IC_Start_DMA+0x3b4>)
 8008256:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	4a46      	ldr	r2, [pc, #280]	@ (8008378 <HAL_TIM_IC_Start_DMA+0x3b8>)
 800825e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008264:	4a45      	ldr	r2, [pc, #276]	@ (800837c <HAL_TIM_IC_Start_DMA+0x3bc>)
 8008266:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3340      	adds	r3, #64	@ 0x40
 8008272:	4619      	mov	r1, r3
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	887b      	ldrh	r3, [r7, #2]
 8008278:	f000 fa7c 	bl	8008774 <TIM_DMA_Start_IT>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e072      	b.n	800836c <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008294:	60da      	str	r2, [r3, #12]
      break;
 8008296:	e002      	b.n	800829e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
      break;
 800829c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a37      	ldr	r2, [pc, #220]	@ (8008380 <HAL_TIM_IC_Start_DMA+0x3c0>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d040      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a35      	ldr	r2, [pc, #212]	@ (8008384 <HAL_TIM_IC_Start_DMA+0x3c4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d03b      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ba:	d036      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082c4:	d031      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a2f      	ldr	r2, [pc, #188]	@ (8008388 <HAL_TIM_IC_Start_DMA+0x3c8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d02c      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a2d      	ldr	r2, [pc, #180]	@ (800838c <HAL_TIM_IC_Start_DMA+0x3cc>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d027      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a2c      	ldr	r2, [pc, #176]	@ (8008390 <HAL_TIM_IC_Start_DMA+0x3d0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d022      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008394 <HAL_TIM_IC_Start_DMA+0x3d4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01d      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a29      	ldr	r2, [pc, #164]	@ (8008398 <HAL_TIM_IC_Start_DMA+0x3d8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d018      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a27      	ldr	r2, [pc, #156]	@ (800839c <HAL_TIM_IC_Start_DMA+0x3dc>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a26      	ldr	r2, [pc, #152]	@ (80083a0 <HAL_TIM_IC_Start_DMA+0x3e0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a24      	ldr	r2, [pc, #144]	@ (80083a4 <HAL_TIM_IC_Start_DMA+0x3e4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d009      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a23      	ldr	r2, [pc, #140]	@ (80083a8 <HAL_TIM_IC_Start_DMA+0x3e8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_TIM_IC_Start_DMA+0x36a>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a21      	ldr	r2, [pc, #132]	@ (80083ac <HAL_TIM_IC_Start_DMA+0x3ec>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d115      	bne.n	8008356 <HAL_TIM_IC_Start_DMA+0x396>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	4b1f      	ldr	r3, [pc, #124]	@ (80083b0 <HAL_TIM_IC_Start_DMA+0x3f0>)
 8008332:	4013      	ands	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b06      	cmp	r3, #6
 800833a:	d015      	beq.n	8008368 <HAL_TIM_IC_Start_DMA+0x3a8>
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008342:	d011      	beq.n	8008368 <HAL_TIM_IC_Start_DMA+0x3a8>
    {
      __HAL_TIM_ENABLE(htim);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0201 	orr.w	r2, r2, #1
 8008352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008354:	e008      	b.n	8008368 <HAL_TIM_IC_Start_DMA+0x3a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0201 	orr.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e000      	b.n	800836a <HAL_TIM_IC_Start_DMA+0x3aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008368:	bf00      	nop
  }

  /* Return function status */
  return status;
 800836a:	7dfb      	ldrb	r3, [r7, #23]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	080088b9 	.word	0x080088b9
 8008378:	08008921 	.word	0x08008921
 800837c:	08008827 	.word	0x08008827
 8008380:	40012c00 	.word	0x40012c00
 8008384:	50012c00 	.word	0x50012c00
 8008388:	40000400 	.word	0x40000400
 800838c:	50000400 	.word	0x50000400
 8008390:	40000800 	.word	0x40000800
 8008394:	50000800 	.word	0x50000800
 8008398:	40000c00 	.word	0x40000c00
 800839c:	50000c00 	.word	0x50000c00
 80083a0:	40013400 	.word	0x40013400
 80083a4:	50013400 	.word	0x50013400
 80083a8:	40014000 	.word	0x40014000
 80083ac:	50014000 	.word	0x50014000
 80083b0:	00010007 	.word	0x00010007

080083b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e088      	b.n	80084e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d11b      	bne.n	8008418 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80083f0:	f000 fc96 	bl	8008d20 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 020c 	bic.w	r2, r2, #12
 8008402:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6999      	ldr	r1, [r3, #24]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	619a      	str	r2, [r3, #24]
 8008416:	e060      	b.n	80084da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d11c      	bne.n	8008458 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800842e:	f000 fd3c 	bl	8008eaa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008440:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6999      	ldr	r1, [r3, #24]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	021a      	lsls	r2, r3, #8
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	619a      	str	r2, [r3, #24]
 8008456:	e040      	b.n	80084da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b08      	cmp	r3, #8
 800845c:	d11b      	bne.n	8008496 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800846e:	f000 fd89 	bl	8008f84 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 020c 	bic.w	r2, r2, #12
 8008480:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69d9      	ldr	r1, [r3, #28]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	61da      	str	r2, [r3, #28]
 8008494:	e021      	b.n	80084da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b0c      	cmp	r3, #12
 800849a:	d11c      	bne.n	80084d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80084ac:	f000 fda6 	bl	8008ffc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69da      	ldr	r2, [r3, #28]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80084be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	69d9      	ldr	r1, [r3, #28]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	021a      	lsls	r2, r3, #8
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	61da      	str	r2, [r3, #28]
 80084d4:	e001      	b.n	80084da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008500:	2b01      	cmp	r3, #1
 8008502:	d101      	bne.n	8008508 <HAL_TIM_ConfigClockSource+0x1c>
 8008504:	2302      	movs	r3, #2
 8008506:	e0e6      	b.n	80086d6 <HAL_TIM_ConfigClockSource+0x1ea>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008526:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800852a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a67      	ldr	r2, [pc, #412]	@ (80086e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	f000 80b1 	beq.w	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 8008548:	4a65      	ldr	r2, [pc, #404]	@ (80086e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	f200 80b6 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 8008550:	4a64      	ldr	r2, [pc, #400]	@ (80086e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	f000 80a9 	beq.w	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 8008558:	4a62      	ldr	r2, [pc, #392]	@ (80086e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	f200 80ae 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 8008560:	4a61      	ldr	r2, [pc, #388]	@ (80086e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008562:	4293      	cmp	r3, r2
 8008564:	f000 80a1 	beq.w	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 8008568:	4a5f      	ldr	r2, [pc, #380]	@ (80086e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800856a:	4293      	cmp	r3, r2
 800856c:	f200 80a6 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 8008570:	4a5e      	ldr	r2, [pc, #376]	@ (80086ec <HAL_TIM_ConfigClockSource+0x200>)
 8008572:	4293      	cmp	r3, r2
 8008574:	f000 8099 	beq.w	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 8008578:	4a5c      	ldr	r2, [pc, #368]	@ (80086ec <HAL_TIM_ConfigClockSource+0x200>)
 800857a:	4293      	cmp	r3, r2
 800857c:	f200 809e 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 8008580:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008584:	f000 8091 	beq.w	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 8008588:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800858c:	f200 8096 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 8008590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008594:	f000 8089 	beq.w	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 8008598:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800859c:	f200 808e 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085a4:	d03e      	beq.n	8008624 <HAL_TIM_ConfigClockSource+0x138>
 80085a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085aa:	f200 8087 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085b2:	f000 8086 	beq.w	80086c2 <HAL_TIM_ConfigClockSource+0x1d6>
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ba:	d87f      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085bc:	2b70      	cmp	r3, #112	@ 0x70
 80085be:	d01a      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0x10a>
 80085c0:	2b70      	cmp	r3, #112	@ 0x70
 80085c2:	d87b      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085c4:	2b60      	cmp	r3, #96	@ 0x60
 80085c6:	d050      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x17e>
 80085c8:	2b60      	cmp	r3, #96	@ 0x60
 80085ca:	d877      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085cc:	2b50      	cmp	r3, #80	@ 0x50
 80085ce:	d03c      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x15e>
 80085d0:	2b50      	cmp	r3, #80	@ 0x50
 80085d2:	d873      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085d4:	2b40      	cmp	r3, #64	@ 0x40
 80085d6:	d058      	beq.n	800868a <HAL_TIM_ConfigClockSource+0x19e>
 80085d8:	2b40      	cmp	r3, #64	@ 0x40
 80085da:	d86f      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085dc:	2b30      	cmp	r3, #48	@ 0x30
 80085de:	d064      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 80085e0:	2b30      	cmp	r3, #48	@ 0x30
 80085e2:	d86b      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d060      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d867      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d05c      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d05a      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x1be>
 80085f4:	e062      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008606:	f000 fd53 	bl	80090b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	609a      	str	r2, [r3, #8]
      break;
 8008622:	e04f      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008634:	f000 fd3c 	bl	80090b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008646:	609a      	str	r2, [r3, #8]
      break;
 8008648:	e03c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008656:	461a      	mov	r2, r3
 8008658:	f000 fbf8 	bl	8008e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2150      	movs	r1, #80	@ 0x50
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fd07 	bl	8009076 <TIM_ITRx_SetConfig>
      break;
 8008668:	e02c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008676:	461a      	mov	r2, r3
 8008678:	f000 fc54 	bl	8008f24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2160      	movs	r1, #96	@ 0x60
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fcf7 	bl	8009076 <TIM_ITRx_SetConfig>
      break;
 8008688:	e01c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008696:	461a      	mov	r2, r3
 8008698:	f000 fbd8 	bl	8008e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2140      	movs	r1, #64	@ 0x40
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fce7 	bl	8009076 <TIM_ITRx_SetConfig>
      break;
 80086a8:	e00c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f000 fcde 	bl	8009076 <TIM_ITRx_SetConfig>
      break;
 80086ba:	e003      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e000      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80086c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	00100070 	.word	0x00100070
 80086e4:	00100040 	.word	0x00100040
 80086e8:	00100030 	.word	0x00100030
 80086ec:	00100020 	.word	0x00100020

080086f0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008704:	2302      	movs	r3, #2
 8008706:	e031      	b.n	800876c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa34 	bl	8008b88 <TIM_SlaveTimer_SetConfig>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e018      	b.n	800876c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008748:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008758:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800878a:	2b00      	cmp	r3, #0
 800878c:	d020      	beq.n	80087d0 <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008792:	2b00      	cmp	r3, #0
 8008794:	d019      	beq.n	80087ca <TIM_DMA_Start_IT+0x56>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d014      	beq.n	80087ca <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7fa fa80 	bl	8002cc4 <HAL_DMAEx_List_Start_IT>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75fb      	strb	r3, [r7, #23]
 80087c8:	e00a      	b.n	80087e0 <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	75fb      	strb	r3, [r7, #23]
 80087ce:	e007      	b.n	80087e0 <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7f9 ff26 	bl	8002628 <HAL_DMA_Start_IT>
 80087dc:	4603      	mov	r3, r0
 80087de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008832:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d107      	bne.n	800884e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800884c:	e02a      	b.n	80088a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d107      	bne.n	8008868 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2202      	movs	r2, #2
 800885c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008866:	e01d      	b.n	80088a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d107      	bne.n	8008882 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2204      	movs	r2, #4
 8008876:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008880:	e010      	b.n	80088a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d107      	bne.n	800889c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2208      	movs	r2, #8
 8008890:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800889a:	e003      	b.n	80088a4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff ffb4 	bl	8008812 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]
}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d103      	bne.n	80088d8 <TIM_DMACaptureCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	771a      	strb	r2, [r3, #28]
 80088d6:	e019      	b.n	800890c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d103      	bne.n	80088ea <TIM_DMACaptureCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2202      	movs	r2, #2
 80088e6:	771a      	strb	r2, [r3, #28]
 80088e8:	e010      	b.n	800890c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d103      	bne.n	80088fc <TIM_DMACaptureCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2204      	movs	r2, #4
 80088f8:	771a      	strb	r2, [r3, #28]
 80088fa:	e007      	b.n	800890c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d102      	bne.n	800890c <TIM_DMACaptureCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2208      	movs	r2, #8
 800890a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff ff6c 	bl	80087ea <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	771a      	strb	r2, [r3, #28]
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800892c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d103      	bne.n	8008940 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	771a      	strb	r2, [r3, #28]
 800893e:	e019      	b.n	8008974 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	429a      	cmp	r2, r3
 8008948:	d103      	bne.n	8008952 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2202      	movs	r2, #2
 800894e:	771a      	strb	r2, [r3, #28]
 8008950:	e010      	b.n	8008974 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	429a      	cmp	r2, r3
 800895a:	d103      	bne.n	8008964 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2204      	movs	r2, #4
 8008960:	771a      	strb	r2, [r3, #28]
 8008962:	e007      	b.n	8008974 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	429a      	cmp	r2, r3
 800896c:	d102      	bne.n	8008974 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2208      	movs	r2, #8
 8008972:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff ff42 	bl	80087fe <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	771a      	strb	r2, [r3, #28]
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a6b      	ldr	r2, [pc, #428]	@ (8008b48 <TIM_Base_SetConfig+0x1c0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d02b      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a6a      	ldr	r2, [pc, #424]	@ (8008b4c <TIM_Base_SetConfig+0x1c4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d027      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ae:	d023      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089b6:	d01f      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a65      	ldr	r2, [pc, #404]	@ (8008b50 <TIM_Base_SetConfig+0x1c8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d01b      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a64      	ldr	r2, [pc, #400]	@ (8008b54 <TIM_Base_SetConfig+0x1cc>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d017      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a63      	ldr	r2, [pc, #396]	@ (8008b58 <TIM_Base_SetConfig+0x1d0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d013      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a62      	ldr	r2, [pc, #392]	@ (8008b5c <TIM_Base_SetConfig+0x1d4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00f      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a61      	ldr	r2, [pc, #388]	@ (8008b60 <TIM_Base_SetConfig+0x1d8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00b      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a60      	ldr	r2, [pc, #384]	@ (8008b64 <TIM_Base_SetConfig+0x1dc>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d007      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a5f      	ldr	r2, [pc, #380]	@ (8008b68 <TIM_Base_SetConfig+0x1e0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_Base_SetConfig+0x70>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a5e      	ldr	r2, [pc, #376]	@ (8008b6c <TIM_Base_SetConfig+0x1e4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d108      	bne.n	8008a0a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8008b48 <TIM_Base_SetConfig+0x1c0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d043      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a4d      	ldr	r2, [pc, #308]	@ (8008b4c <TIM_Base_SetConfig+0x1c4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d03f      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a20:	d03b      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a28:	d037      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a48      	ldr	r2, [pc, #288]	@ (8008b50 <TIM_Base_SetConfig+0x1c8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d033      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a47      	ldr	r2, [pc, #284]	@ (8008b54 <TIM_Base_SetConfig+0x1cc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d02f      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a46      	ldr	r2, [pc, #280]	@ (8008b58 <TIM_Base_SetConfig+0x1d0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d02b      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a45      	ldr	r2, [pc, #276]	@ (8008b5c <TIM_Base_SetConfig+0x1d4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d027      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a44      	ldr	r2, [pc, #272]	@ (8008b60 <TIM_Base_SetConfig+0x1d8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d023      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a43      	ldr	r2, [pc, #268]	@ (8008b64 <TIM_Base_SetConfig+0x1dc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d01f      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a42      	ldr	r2, [pc, #264]	@ (8008b68 <TIM_Base_SetConfig+0x1e0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d01b      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a41      	ldr	r2, [pc, #260]	@ (8008b6c <TIM_Base_SetConfig+0x1e4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d017      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a40      	ldr	r2, [pc, #256]	@ (8008b70 <TIM_Base_SetConfig+0x1e8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d013      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a3f      	ldr	r2, [pc, #252]	@ (8008b74 <TIM_Base_SetConfig+0x1ec>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00f      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b78 <TIM_Base_SetConfig+0x1f0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00b      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a3d      	ldr	r2, [pc, #244]	@ (8008b7c <TIM_Base_SetConfig+0x1f4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d007      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b80 <TIM_Base_SetConfig+0x1f8>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d003      	beq.n	8008a9a <TIM_Base_SetConfig+0x112>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a3b      	ldr	r2, [pc, #236]	@ (8008b84 <TIM_Base_SetConfig+0x1fc>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d108      	bne.n	8008aac <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689a      	ldr	r2, [r3, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a1e      	ldr	r2, [pc, #120]	@ (8008b48 <TIM_Base_SetConfig+0x1c0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d023      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <TIM_Base_SetConfig+0x1c4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01f      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a22      	ldr	r2, [pc, #136]	@ (8008b68 <TIM_Base_SetConfig+0x1e0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d01b      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a21      	ldr	r2, [pc, #132]	@ (8008b6c <TIM_Base_SetConfig+0x1e4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d017      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a20      	ldr	r2, [pc, #128]	@ (8008b70 <TIM_Base_SetConfig+0x1e8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d013      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a1f      	ldr	r2, [pc, #124]	@ (8008b74 <TIM_Base_SetConfig+0x1ec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00f      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a1e      	ldr	r2, [pc, #120]	@ (8008b78 <TIM_Base_SetConfig+0x1f0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00b      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a1d      	ldr	r2, [pc, #116]	@ (8008b7c <TIM_Base_SetConfig+0x1f4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d007      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008b80 <TIM_Base_SetConfig+0x1f8>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d003      	beq.n	8008b1a <TIM_Base_SetConfig+0x192>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a1b      	ldr	r2, [pc, #108]	@ (8008b84 <TIM_Base_SetConfig+0x1fc>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d103      	bne.n	8008b22 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f043 0204 	orr.w	r2, r3, #4
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	601a      	str	r2, [r3, #0]
}
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40012c00 	.word	0x40012c00
 8008b4c:	50012c00 	.word	0x50012c00
 8008b50:	40000400 	.word	0x40000400
 8008b54:	50000400 	.word	0x50000400
 8008b58:	40000800 	.word	0x40000800
 8008b5c:	50000800 	.word	0x50000800
 8008b60:	40000c00 	.word	0x40000c00
 8008b64:	50000c00 	.word	0x50000c00
 8008b68:	40013400 	.word	0x40013400
 8008b6c:	50013400 	.word	0x50013400
 8008b70:	40014000 	.word	0x40014000
 8008b74:	50014000 	.word	0x50014000
 8008b78:	40014400 	.word	0x40014400
 8008b7c:	50014400 	.word	0x50014400
 8008b80:	40014800 	.word	0x40014800
 8008b84:	50014800 	.word	0x50014800

08008b88 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8008d10 <TIM_SlaveTimer_SetConfig+0x188>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	f000 8092 	beq.w	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008bde:	4a4c      	ldr	r2, [pc, #304]	@ (8008d10 <TIM_SlaveTimer_SetConfig+0x188>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	f200 808b 	bhi.w	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008be6:	4a4b      	ldr	r2, [pc, #300]	@ (8008d14 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	f000 808a 	beq.w	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008bee:	4a49      	ldr	r2, [pc, #292]	@ (8008d14 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	f200 8083 	bhi.w	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008bf6:	4a48      	ldr	r2, [pc, #288]	@ (8008d18 <TIM_SlaveTimer_SetConfig+0x190>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	f000 8082 	beq.w	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008bfe:	4a46      	ldr	r2, [pc, #280]	@ (8008d18 <TIM_SlaveTimer_SetConfig+0x190>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d87b      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c04:	4a45      	ldr	r2, [pc, #276]	@ (8008d1c <TIM_SlaveTimer_SetConfig+0x194>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d07b      	beq.n	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008c0a:	4a44      	ldr	r2, [pc, #272]	@ (8008d1c <TIM_SlaveTimer_SetConfig+0x194>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d875      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c14:	d075      	beq.n	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008c16:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c1a:	d86f      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c20:	d06f      	beq.n	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c26:	d869      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c28:	2b70      	cmp	r3, #112	@ 0x70
 8008c2a:	d01a      	beq.n	8008c62 <TIM_SlaveTimer_SetConfig+0xda>
 8008c2c:	2b70      	cmp	r3, #112	@ 0x70
 8008c2e:	d865      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c30:	2b60      	cmp	r3, #96	@ 0x60
 8008c32:	d059      	beq.n	8008ce8 <TIM_SlaveTimer_SetConfig+0x160>
 8008c34:	2b60      	cmp	r3, #96	@ 0x60
 8008c36:	d861      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c38:	2b50      	cmp	r3, #80	@ 0x50
 8008c3a:	d04b      	beq.n	8008cd4 <TIM_SlaveTimer_SetConfig+0x14c>
 8008c3c:	2b50      	cmp	r3, #80	@ 0x50
 8008c3e:	d85d      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c40:	2b40      	cmp	r3, #64	@ 0x40
 8008c42:	d019      	beq.n	8008c78 <TIM_SlaveTimer_SetConfig+0xf0>
 8008c44:	2b40      	cmp	r3, #64	@ 0x40
 8008c46:	d859      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c48:	2b30      	cmp	r3, #48	@ 0x30
 8008c4a:	d05a      	beq.n	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008c4c:	2b30      	cmp	r3, #48	@ 0x30
 8008c4e:	d855      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d056      	beq.n	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008c54:	2b20      	cmp	r3, #32
 8008c56:	d851      	bhi.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d052      	beq.n	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	d050      	beq.n	8008d02 <TIM_SlaveTimer_SetConfig+0x17a>
 8008c60:	e04c      	b.n	8008cfc <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008c72:	f000 fa1d 	bl	80090b0 <TIM_ETR_SetConfig>
      break;
 8008c76:	e045      	b.n	8008d04 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b05      	cmp	r3, #5
 8008c7e:	d004      	beq.n	8008c8a <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008c84:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008c88:	d101      	bne.n	8008c8e <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e03b      	b.n	8008d06 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6a1a      	ldr	r2, [r3, #32]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 0201 	bic.w	r2, r2, #1
 8008ca4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cb4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	621a      	str	r2, [r3, #32]
      break;
 8008cd2:	e017      	b.n	8008d04 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f000 f8b3 	bl	8008e4c <TIM_TI1_ConfigInputStage>
      break;
 8008ce6:	e00d      	b.n	8008d04 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f000 f915 	bl	8008f24 <TIM_TI2_ConfigInputStage>
      break;
 8008cfa:	e003      	b.n	8008d04 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008d00:	e000      	b.n	8008d04 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8008d02:	bf00      	nop
  }

  return status;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	00100070 	.word	0x00100070
 8008d14:	00100040 	.word	0x00100040
 8008d18:	00100030 	.word	0x00100030
 8008d1c:	00100020 	.word	0x00100020

08008d20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	f023 0201 	bic.w	r2, r3, #1
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4a34      	ldr	r2, [pc, #208]	@ (8008e1c <TIM_TI1_SetConfig+0xfc>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d033      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4a33      	ldr	r2, [pc, #204]	@ (8008e20 <TIM_TI1_SetConfig+0x100>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d02f      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d5c:	d02b      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d64:	d027      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4a2e      	ldr	r2, [pc, #184]	@ (8008e24 <TIM_TI1_SetConfig+0x104>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d023      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4a2d      	ldr	r2, [pc, #180]	@ (8008e28 <TIM_TI1_SetConfig+0x108>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01f      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4a2c      	ldr	r2, [pc, #176]	@ (8008e2c <TIM_TI1_SetConfig+0x10c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d01b      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4a2b      	ldr	r2, [pc, #172]	@ (8008e30 <TIM_TI1_SetConfig+0x110>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d017      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4a2a      	ldr	r2, [pc, #168]	@ (8008e34 <TIM_TI1_SetConfig+0x114>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4a29      	ldr	r2, [pc, #164]	@ (8008e38 <TIM_TI1_SetConfig+0x118>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00f      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4a28      	ldr	r2, [pc, #160]	@ (8008e3c <TIM_TI1_SetConfig+0x11c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00b      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a27      	ldr	r2, [pc, #156]	@ (8008e40 <TIM_TI1_SetConfig+0x120>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d007      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4a26      	ldr	r2, [pc, #152]	@ (8008e44 <TIM_TI1_SetConfig+0x124>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d003      	beq.n	8008db6 <TIM_TI1_SetConfig+0x96>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4a25      	ldr	r2, [pc, #148]	@ (8008e48 <TIM_TI1_SetConfig+0x128>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d101      	bne.n	8008dba <TIM_TI1_SetConfig+0x9a>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <TIM_TI1_SetConfig+0x9c>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d008      	beq.n	8008dd2 <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e003      	b.n	8008dda <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f043 0301 	orr.w	r3, r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f023 030a 	bic.w	r3, r3, #10
 8008df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f003 030a 	and.w	r3, r3, #10
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40012c00 	.word	0x40012c00
 8008e20:	50012c00 	.word	0x50012c00
 8008e24:	40000400 	.word	0x40000400
 8008e28:	50000400 	.word	0x50000400
 8008e2c:	40000800 	.word	0x40000800
 8008e30:	50000800 	.word	0x50000800
 8008e34:	40000c00 	.word	0x40000c00
 8008e38:	50000c00 	.word	0x50000c00
 8008e3c:	40013400 	.word	0x40013400
 8008e40:	50013400 	.word	0x50013400
 8008e44:	40014000 	.word	0x40014000
 8008e48:	50014000 	.word	0x50014000

08008e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f023 0201 	bic.w	r2, r3, #1
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f023 030a 	bic.w	r3, r3, #10
 8008e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	621a      	str	r2, [r3, #32]
}
 8008e9e:	bf00      	nop
 8008ea0:	371c      	adds	r7, #28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b087      	sub	sp, #28
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0210 	bic.w	r2, r3, #16
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	031b      	lsls	r3, r3, #12
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	621a      	str	r2, [r3, #32]
}
 8008f18:	bf00      	nop
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	f023 0210 	bic.w	r2, r3, #16
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	031b      	lsls	r3, r3, #12
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	621a      	str	r2, [r3, #32]
}
 8008f78:	bf00      	nop
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f023 0303 	bic.w	r3, r3, #3
 8008fb0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fc0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	021b      	lsls	r3, r3, #8
 8008fda:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	621a      	str	r2, [r3, #32]
}
 8008ff0:	bf00      	nop
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009028:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4313      	orrs	r3, r2
 8009032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800903a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	031b      	lsls	r3, r3, #12
 8009040:	b29b      	uxth	r3, r3
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800904e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	031b      	lsls	r3, r3, #12
 8009054:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	621a      	str	r2, [r3, #32]
}
 800906a:	bf00      	nop
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800908c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	f043 0307 	orr.w	r3, r3, #7
 800909c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	609a      	str	r2, [r3, #8]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	021a      	lsls	r2, r3, #8
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	609a      	str	r2, [r3, #8]
}
 80090e4:	bf00      	nop
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 031f 	and.w	r3, r3, #31
 8009102:	2201      	movs	r2, #1
 8009104:	fa02 f303 	lsl.w	r3, r2, r3
 8009108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a1a      	ldr	r2, [r3, #32]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	43db      	mvns	r3, r3
 8009112:	401a      	ands	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1a      	ldr	r2, [r3, #32]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	fa01 f303 	lsl.w	r3, r1, r3
 8009128:	431a      	orrs	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	621a      	str	r2, [r3, #32]
}
 800912e:	bf00      	nop
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
	...

0800913c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009150:	2302      	movs	r3, #2
 8009152:	e097      	b.n	8009284 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a45      	ldr	r2, [pc, #276]	@ (8009290 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00e      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a44      	ldr	r2, [pc, #272]	@ (8009294 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d009      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a42      	ldr	r2, [pc, #264]	@ (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d004      	beq.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a41      	ldr	r2, [pc, #260]	@ (800929c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d108      	bne.n	80091ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80091a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80091b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a2f      	ldr	r2, [pc, #188]	@ (8009290 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d040      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a2e      	ldr	r2, [pc, #184]	@ (8009294 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d03b      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091e8:	d036      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091f2:	d031      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a29      	ldr	r2, [pc, #164]	@ (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d02c      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a28      	ldr	r2, [pc, #160]	@ (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d027      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a26      	ldr	r2, [pc, #152]	@ (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d022      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a25      	ldr	r2, [pc, #148]	@ (80092ac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d01d      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a23      	ldr	r2, [pc, #140]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d018      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a22      	ldr	r2, [pc, #136]	@ (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d013      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a18      	ldr	r2, [pc, #96]	@ (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00e      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a17      	ldr	r2, [pc, #92]	@ (800929c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d009      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1b      	ldr	r2, [pc, #108]	@ (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d004      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a1a      	ldr	r2, [pc, #104]	@ (80092bc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d10c      	bne.n	8009272 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800925e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	4313      	orrs	r3, r2
 8009268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	40012c00 	.word	0x40012c00
 8009294:	50012c00 	.word	0x50012c00
 8009298:	40013400 	.word	0x40013400
 800929c:	50013400 	.word	0x50013400
 80092a0:	40000400 	.word	0x40000400
 80092a4:	50000400 	.word	0x50000400
 80092a8:	40000800 	.word	0x40000800
 80092ac:	50000800 	.word	0x50000800
 80092b0:	40000c00 	.word	0x40000c00
 80092b4:	50000c00 	.word	0x50000c00
 80092b8:	40014000 	.word	0x40014000
 80092bc:	50014000 	.word	0x50014000

080092c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e042      	b.n	8009358 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d106      	bne.n	80092ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7f8 fb65 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2224      	movs	r2, #36	@ 0x24
 80092ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa4e 	bl	80097ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f8b3 	bl	800947c <UART_SetConfig>
 8009316:	4603      	mov	r3, r0
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e01b      	b.n	8009358 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800932e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800933e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 facd 	bl	80098f0 <UART_CheckIdleState>
 8009356:	4603      	mov	r3, r0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	@ 0x28
 8009364:	af02      	add	r7, sp, #8
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	4613      	mov	r3, r2
 800936e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009376:	2b20      	cmp	r3, #32
 8009378:	d17b      	bne.n	8009472 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_UART_Transmit+0x26>
 8009380:	88fb      	ldrh	r3, [r7, #6]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e074      	b.n	8009474 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2221      	movs	r2, #33	@ 0x21
 8009396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800939a:	f7f8 ff81 	bl	80022a0 <HAL_GetTick>
 800939e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	88fa      	ldrh	r2, [r7, #6]
 80093a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b8:	d108      	bne.n	80093cc <HAL_UART_Transmit+0x6c>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d104      	bne.n	80093cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	e003      	b.n	80093d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093d4:	e030      	b.n	8009438 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2200      	movs	r2, #0
 80093de:	2180      	movs	r1, #128	@ 0x80
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fb2f 	bl	8009a44 <UART_WaitOnFlagUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e03d      	b.n	8009474 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10b      	bne.n	8009416 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800940c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	3302      	adds	r3, #2
 8009412:	61bb      	str	r3, [r7, #24]
 8009414:	e007      	b.n	8009426 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	781a      	ldrb	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	3301      	adds	r3, #1
 8009424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1c8      	bne.n	80093d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2200      	movs	r2, #0
 800944c:	2140      	movs	r1, #64	@ 0x40
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 faf8 	bl	8009a44 <UART_WaitOnFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d005      	beq.n	8009466 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e006      	b.n	8009474 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	e000      	b.n	8009474 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009472:	2302      	movs	r3, #2
  }
}
 8009474:	4618      	mov	r0, r3
 8009476:	3720      	adds	r7, #32
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800947c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009480:	b094      	sub	sp, #80	@ 0x50
 8009482:	af00      	add	r7, sp, #0
 8009484:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800948c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	4b9b      	ldr	r3, [pc, #620]	@ (8009700 <UART_SetConfig+0x284>)
 8009492:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	431a      	orrs	r2, r3
 800949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4994      	ldr	r1, [pc, #592]	@ (8009704 <UART_SetConfig+0x288>)
 80094b4:	4019      	ands	r1, r3
 80094b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094bc:	430b      	orrs	r3, r1
 80094be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80094ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094cc:	68d9      	ldr	r1, [r3, #12]
 80094ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	ea40 0301 	orr.w	r3, r0, r1
 80094d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b87      	ldr	r3, [pc, #540]	@ (8009700 <UART_SetConfig+0x284>)
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d009      	beq.n	80094fc <UART_SetConfig+0x80>
 80094e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	4b86      	ldr	r3, [pc, #536]	@ (8009708 <UART_SetConfig+0x28c>)
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d004      	beq.n	80094fc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f4:	6a1a      	ldr	r2, [r3, #32]
 80094f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094f8:	4313      	orrs	r3, r2
 80094fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009506:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800950a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009510:	430b      	orrs	r3, r1
 8009512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951a:	f023 000f 	bic.w	r0, r3, #15
 800951e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009520:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	ea40 0301 	orr.w	r3, r0, r1
 800952a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	4b76      	ldr	r3, [pc, #472]	@ (800970c <UART_SetConfig+0x290>)
 8009532:	429a      	cmp	r2, r3
 8009534:	d102      	bne.n	800953c <UART_SetConfig+0xc0>
 8009536:	2301      	movs	r3, #1
 8009538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800953a:	e021      	b.n	8009580 <UART_SetConfig+0x104>
 800953c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	4b73      	ldr	r3, [pc, #460]	@ (8009710 <UART_SetConfig+0x294>)
 8009542:	429a      	cmp	r2, r3
 8009544:	d102      	bne.n	800954c <UART_SetConfig+0xd0>
 8009546:	2304      	movs	r3, #4
 8009548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800954a:	e019      	b.n	8009580 <UART_SetConfig+0x104>
 800954c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	4b70      	ldr	r3, [pc, #448]	@ (8009714 <UART_SetConfig+0x298>)
 8009552:	429a      	cmp	r2, r3
 8009554:	d102      	bne.n	800955c <UART_SetConfig+0xe0>
 8009556:	2308      	movs	r3, #8
 8009558:	64bb      	str	r3, [r7, #72]	@ 0x48
 800955a:	e011      	b.n	8009580 <UART_SetConfig+0x104>
 800955c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	4b6d      	ldr	r3, [pc, #436]	@ (8009718 <UART_SetConfig+0x29c>)
 8009562:	429a      	cmp	r2, r3
 8009564:	d102      	bne.n	800956c <UART_SetConfig+0xf0>
 8009566:	2310      	movs	r3, #16
 8009568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800956a:	e009      	b.n	8009580 <UART_SetConfig+0x104>
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	4b63      	ldr	r3, [pc, #396]	@ (8009700 <UART_SetConfig+0x284>)
 8009572:	429a      	cmp	r2, r3
 8009574:	d102      	bne.n	800957c <UART_SetConfig+0x100>
 8009576:	2320      	movs	r3, #32
 8009578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800957a:	e001      	b.n	8009580 <UART_SetConfig+0x104>
 800957c:	2300      	movs	r3, #0
 800957e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b5e      	ldr	r3, [pc, #376]	@ (8009700 <UART_SetConfig+0x284>)
 8009586:	429a      	cmp	r2, r3
 8009588:	d004      	beq.n	8009594 <UART_SetConfig+0x118>
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b5e      	ldr	r3, [pc, #376]	@ (8009708 <UART_SetConfig+0x28c>)
 8009590:	429a      	cmp	r2, r3
 8009592:	d172      	bne.n	800967a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009596:	2200      	movs	r2, #0
 8009598:	623b      	str	r3, [r7, #32]
 800959a:	627a      	str	r2, [r7, #36]	@ 0x24
 800959c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80095a0:	f7fd f94a 	bl	8006838 <HAL_RCCEx_GetPeriphCLKFreq>
 80095a4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80095a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 80e7 	beq.w	800977c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	4a5a      	ldr	r2, [pc, #360]	@ (800971c <UART_SetConfig+0x2a0>)
 80095b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4413      	add	r3, r2
 80095cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d305      	bcc.n	80095de <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095da:	429a      	cmp	r2, r3
 80095dc:	d903      	bls.n	80095e6 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80095e4:	e048      	b.n	8009678 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095e8:	2200      	movs	r2, #0
 80095ea:	61bb      	str	r3, [r7, #24]
 80095ec:	61fa      	str	r2, [r7, #28]
 80095ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f2:	4a4a      	ldr	r2, [pc, #296]	@ (800971c <UART_SetConfig+0x2a0>)
 80095f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2200      	movs	r2, #0
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	617a      	str	r2, [r7, #20]
 8009600:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009604:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009608:	f7f6 fe36 	bl	8000278 <__aeabi_uldivmod>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4610      	mov	r0, r2
 8009612:	4619      	mov	r1, r3
 8009614:	f04f 0200 	mov.w	r2, #0
 8009618:	f04f 0300 	mov.w	r3, #0
 800961c:	020b      	lsls	r3, r1, #8
 800961e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009622:	0202      	lsls	r2, r0, #8
 8009624:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009626:	6849      	ldr	r1, [r1, #4]
 8009628:	0849      	lsrs	r1, r1, #1
 800962a:	2000      	movs	r0, #0
 800962c:	460c      	mov	r4, r1
 800962e:	4605      	mov	r5, r0
 8009630:	eb12 0804 	adds.w	r8, r2, r4
 8009634:	eb43 0905 	adc.w	r9, r3, r5
 8009638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	60bb      	str	r3, [r7, #8]
 8009640:	60fa      	str	r2, [r7, #12]
 8009642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f6 fe15 	bl	8000278 <__aeabi_uldivmod>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4613      	mov	r3, r2
 8009654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800965c:	d308      	bcc.n	8009670 <UART_SetConfig+0x1f4>
 800965e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009664:	d204      	bcs.n	8009670 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8009666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800966c:	60da      	str	r2, [r3, #12]
 800966e:	e003      	b.n	8009678 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009676:	e081      	b.n	800977c <UART_SetConfig+0x300>
 8009678:	e080      	b.n	800977c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800967a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009682:	d14d      	bne.n	8009720 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009686:	2200      	movs	r2, #0
 8009688:	603b      	str	r3, [r7, #0]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009690:	f7fd f8d2 	bl	8006838 <HAL_RCCEx_GetPeriphCLKFreq>
 8009694:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009698:	2b00      	cmp	r3, #0
 800969a:	d06f      	beq.n	800977c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800969c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a0:	4a1e      	ldr	r2, [pc, #120]	@ (800971c <UART_SetConfig+0x2a0>)
 80096a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096a6:	461a      	mov	r2, r3
 80096a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80096ae:	005a      	lsls	r2, r3, #1
 80096b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	085b      	lsrs	r3, r3, #1
 80096b6:	441a      	add	r2, r3
 80096b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c4:	2b0f      	cmp	r3, #15
 80096c6:	d916      	bls.n	80096f6 <UART_SetConfig+0x27a>
 80096c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ce:	d212      	bcs.n	80096f6 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	f023 030f 	bic.w	r3, r3, #15
 80096d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096dc:	085b      	lsrs	r3, r3, #1
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f003 0307 	and.w	r3, r3, #7
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80096e8:	4313      	orrs	r3, r2
 80096ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80096ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80096f2:	60da      	str	r2, [r3, #12]
 80096f4:	e042      	b.n	800977c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80096fc:	e03e      	b.n	800977c <UART_SetConfig+0x300>
 80096fe:	bf00      	nop
 8009700:	46002400 	.word	0x46002400
 8009704:	cfff69f3 	.word	0xcfff69f3
 8009708:	56002400 	.word	0x56002400
 800970c:	40013800 	.word	0x40013800
 8009710:	40004800 	.word	0x40004800
 8009714:	40004c00 	.word	0x40004c00
 8009718:	40005000 	.word	0x40005000
 800971c:	0800ad8c 	.word	0x0800ad8c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009722:	2200      	movs	r2, #0
 8009724:	469a      	mov	sl, r3
 8009726:	4693      	mov	fp, r2
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	f7fd f884 	bl	8006838 <HAL_RCCEx_GetPeriphCLKFreq>
 8009730:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009734:	2b00      	cmp	r3, #0
 8009736:	d021      	beq.n	800977c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973c:	4a1a      	ldr	r2, [pc, #104]	@ (80097a8 <UART_SetConfig+0x32c>)
 800973e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009742:	461a      	mov	r2, r3
 8009744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009746:	fbb3 f2f2 	udiv	r2, r3, r2
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	085b      	lsrs	r3, r3, #1
 8009750:	441a      	add	r2, r3
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	fbb2 f3f3 	udiv	r3, r2, r3
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800975c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975e:	2b0f      	cmp	r3, #15
 8009760:	d909      	bls.n	8009776 <UART_SetConfig+0x2fa>
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009768:	d205      	bcs.n	8009776 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800976a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976c:	b29a      	uxth	r2, r3
 800976e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60da      	str	r2, [r3, #12]
 8009774:	e002      	b.n	800977c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977e:	2201      	movs	r2, #1
 8009780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	2201      	movs	r2, #1
 8009788:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800978c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978e:	2200      	movs	r2, #0
 8009790:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009794:	2200      	movs	r2, #0
 8009796:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009798:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800979c:	4618      	mov	r0, r3
 800979e:	3750      	adds	r7, #80	@ 0x50
 80097a0:	46bd      	mov	sp, r7
 80097a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097a6:	bf00      	nop
 80097a8:	0800ad8c 	.word	0x0800ad8c

080097ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b8:	f003 0308 	and.w	r3, r3, #8
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00a      	beq.n	800981a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	f003 0310 	and.w	r3, r3, #16
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01a      	beq.n	80098c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098aa:	d10a      	bne.n	80098c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	605a      	str	r2, [r3, #4]
  }
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b098      	sub	sp, #96	@ 0x60
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009900:	f7f8 fcce 	bl	80022a0 <HAL_GetTick>
 8009904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0308 	and.w	r3, r3, #8
 8009910:	2b08      	cmp	r3, #8
 8009912:	d12f      	bne.n	8009974 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800991c:	2200      	movs	r2, #0
 800991e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f88e 	bl	8009a44 <UART_WaitOnFlagUntilTimeout>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d022      	beq.n	8009974 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800993c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009942:	653b      	str	r3, [r7, #80]	@ 0x50
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800994c:	647b      	str	r3, [r7, #68]	@ 0x44
 800994e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009954:	e841 2300 	strex	r3, r2, [r1]
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800995a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e6      	bne.n	800992e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e063      	b.n	8009a3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0304 	and.w	r3, r3, #4
 800997e:	2b04      	cmp	r3, #4
 8009980:	d149      	bne.n	8009a16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009982:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800998a:	2200      	movs	r2, #0
 800998c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f857 	bl	8009a44 <UART_WaitOnFlagUntilTimeout>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d03c      	beq.n	8009a16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	623b      	str	r3, [r7, #32]
   return(result);
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80099bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1e6      	bne.n	800999c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f023 0301 	bic.w	r3, r3, #1
 80099e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099ee:	61fa      	str	r2, [r7, #28]
 80099f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	69b9      	ldr	r1, [r7, #24]
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	617b      	str	r3, [r7, #20]
   return(result);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e5      	bne.n	80099ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e012      	b.n	8009a3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3758      	adds	r7, #88	@ 0x58
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	4613      	mov	r3, r2
 8009a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a54:	e04f      	b.n	8009af6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d04b      	beq.n	8009af6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a5e:	f7f8 fc1f 	bl	80022a0 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	69ba      	ldr	r2, [r7, #24]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d302      	bcc.n	8009a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e04e      	b.n	8009b16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0304 	and.w	r3, r3, #4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d037      	beq.n	8009af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b80      	cmp	r3, #128	@ 0x80
 8009a8a:	d034      	beq.n	8009af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b40      	cmp	r3, #64	@ 0x40
 8009a90:	d031      	beq.n	8009af6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	f003 0308 	and.w	r3, r3, #8
 8009a9c:	2b08      	cmp	r3, #8
 8009a9e:	d110      	bne.n	8009ac2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2208      	movs	r2, #8
 8009aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 f838 	bl	8009b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e029      	b.n	8009b16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ad0:	d111      	bne.n	8009af6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 f81e 	bl	8009b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e00f      	b.n	8009b16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69da      	ldr	r2, [r3, #28]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4013      	ands	r3, r2
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	bf0c      	ite	eq
 8009b06:	2301      	moveq	r3, #1
 8009b08:	2300      	movne	r3, #0
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d0a0      	beq.n	8009a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b095      	sub	sp, #84	@ 0x54
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e6      	bne.n	8009b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3308      	adds	r3, #8
 8009b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e3      	bne.n	8009b58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d118      	bne.n	8009bca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f023 0310 	bic.w	r3, r3, #16
 8009bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6979      	ldr	r1, [r7, #20]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e6      	bne.n	8009b98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009bde:	bf00      	nop
 8009be0:	3754      	adds	r7, #84	@ 0x54
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <HAL_UARTEx_DisableFifoMode+0x16>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e027      	b.n	8009c50 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2224      	movs	r2, #36	@ 0x24
 8009c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0201 	bic.w	r2, r2, #1
 8009c26:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e02d      	b.n	8009cd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2224      	movs	r2, #36	@ 0x24
 8009c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f022 0201 	bic.w	r2, r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f84f 	bl	8009d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d101      	bne.n	8009cf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cec:	2302      	movs	r3, #2
 8009cee:	e02d      	b.n	8009d4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2224      	movs	r2, #36	@ 0x24
 8009cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0201 	bic.w	r2, r2, #1
 8009d16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f811 	bl	8009d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d108      	bne.n	8009d76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d74:	e031      	b.n	8009dda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d76:	2308      	movs	r3, #8
 8009d78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d7a:	2308      	movs	r3, #8
 8009d7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	0e5b      	lsrs	r3, r3, #25
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	0f5b      	lsrs	r3, r3, #29
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 0307 	and.w	r3, r3, #7
 8009d9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	7b3a      	ldrb	r2, [r7, #12]
 8009da2:	4911      	ldr	r1, [pc, #68]	@ (8009de8 <UARTEx_SetNbDataToProcess+0x94>)
 8009da4:	5c8a      	ldrb	r2, [r1, r2]
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009daa:	7b3a      	ldrb	r2, [r7, #12]
 8009dac:	490f      	ldr	r1, [pc, #60]	@ (8009dec <UARTEx_SetNbDataToProcess+0x98>)
 8009dae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	7b7a      	ldrb	r2, [r7, #13]
 8009dc0:	4909      	ldr	r1, [pc, #36]	@ (8009de8 <UARTEx_SetNbDataToProcess+0x94>)
 8009dc2:	5c8a      	ldrb	r2, [r1, r2]
 8009dc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009dc8:	7b7a      	ldrb	r2, [r7, #13]
 8009dca:	4908      	ldr	r1, [pc, #32]	@ (8009dec <UARTEx_SetNbDataToProcess+0x98>)
 8009dcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	0800ada4 	.word	0x0800ada4
 8009dec:	0800adac 	.word	0x0800adac

08009df0 <std>:
 8009df0:	2300      	movs	r3, #0
 8009df2:	b510      	push	{r4, lr}
 8009df4:	4604      	mov	r4, r0
 8009df6:	6083      	str	r3, [r0, #8]
 8009df8:	8181      	strh	r1, [r0, #12]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6643      	str	r3, [r0, #100]	@ 0x64
 8009dfe:	81c2      	strh	r2, [r0, #14]
 8009e00:	2208      	movs	r2, #8
 8009e02:	6183      	str	r3, [r0, #24]
 8009e04:	e9c0 3300 	strd	r3, r3, [r0]
 8009e08:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e0c:	305c      	adds	r0, #92	@ 0x5c
 8009e0e:	f000 f906 	bl	800a01e <memset>
 8009e12:	4b0d      	ldr	r3, [pc, #52]	@ (8009e48 <std+0x58>)
 8009e14:	6224      	str	r4, [r4, #32]
 8009e16:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e18:	4b0c      	ldr	r3, [pc, #48]	@ (8009e4c <std+0x5c>)
 8009e1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e50 <std+0x60>)
 8009e1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e20:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <std+0x64>)
 8009e22:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e24:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <std+0x68>)
 8009e26:	429c      	cmp	r4, r3
 8009e28:	d006      	beq.n	8009e38 <std+0x48>
 8009e2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e2e:	4294      	cmp	r4, r2
 8009e30:	d002      	beq.n	8009e38 <std+0x48>
 8009e32:	33d0      	adds	r3, #208	@ 0xd0
 8009e34:	429c      	cmp	r4, r3
 8009e36:	d105      	bne.n	8009e44 <std+0x54>
 8009e38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e40:	f000 b966 	b.w	800a110 <__retarget_lock_init_recursive>
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	bf00      	nop
 8009e48:	08009f99 	.word	0x08009f99
 8009e4c:	08009fbb 	.word	0x08009fbb
 8009e50:	08009ff3 	.word	0x08009ff3
 8009e54:	0800a017 	.word	0x0800a017
 8009e58:	20000858 	.word	0x20000858

08009e5c <stdio_exit_handler>:
 8009e5c:	4a02      	ldr	r2, [pc, #8]	@ (8009e68 <stdio_exit_handler+0xc>)
 8009e5e:	4903      	ldr	r1, [pc, #12]	@ (8009e6c <stdio_exit_handler+0x10>)
 8009e60:	4803      	ldr	r0, [pc, #12]	@ (8009e70 <stdio_exit_handler+0x14>)
 8009e62:	f000 b869 	b.w	8009f38 <_fwalk_sglue>
 8009e66:	bf00      	nop
 8009e68:	20000020 	.word	0x20000020
 8009e6c:	0800a9b9 	.word	0x0800a9b9
 8009e70:	20000030 	.word	0x20000030

08009e74 <cleanup_stdio>:
 8009e74:	6841      	ldr	r1, [r0, #4]
 8009e76:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea8 <cleanup_stdio+0x34>)
 8009e78:	4299      	cmp	r1, r3
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	d001      	beq.n	8009e84 <cleanup_stdio+0x10>
 8009e80:	f000 fd9a 	bl	800a9b8 <_fflush_r>
 8009e84:	68a1      	ldr	r1, [r4, #8]
 8009e86:	4b09      	ldr	r3, [pc, #36]	@ (8009eac <cleanup_stdio+0x38>)
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	d002      	beq.n	8009e92 <cleanup_stdio+0x1e>
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 fd93 	bl	800a9b8 <_fflush_r>
 8009e92:	68e1      	ldr	r1, [r4, #12]
 8009e94:	4b06      	ldr	r3, [pc, #24]	@ (8009eb0 <cleanup_stdio+0x3c>)
 8009e96:	4299      	cmp	r1, r3
 8009e98:	d004      	beq.n	8009ea4 <cleanup_stdio+0x30>
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea0:	f000 bd8a 	b.w	800a9b8 <_fflush_r>
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20000858 	.word	0x20000858
 8009eac:	200008c0 	.word	0x200008c0
 8009eb0:	20000928 	.word	0x20000928

08009eb4 <global_stdio_init.part.0>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee4 <global_stdio_init.part.0+0x30>)
 8009eb8:	2104      	movs	r1, #4
 8009eba:	4c0b      	ldr	r4, [pc, #44]	@ (8009ee8 <global_stdio_init.part.0+0x34>)
 8009ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8009eec <global_stdio_init.part.0+0x38>)
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f7ff ff94 	bl	8009df0 <std>
 8009ec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ecc:	2201      	movs	r2, #1
 8009ece:	2109      	movs	r1, #9
 8009ed0:	f7ff ff8e 	bl	8009df0 <std>
 8009ed4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ed8:	2202      	movs	r2, #2
 8009eda:	2112      	movs	r1, #18
 8009edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee0:	f7ff bf86 	b.w	8009df0 <std>
 8009ee4:	20000990 	.word	0x20000990
 8009ee8:	20000858 	.word	0x20000858
 8009eec:	08009e5d 	.word	0x08009e5d

08009ef0 <__sfp_lock_acquire>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	@ (8009ef8 <__sfp_lock_acquire+0x8>)
 8009ef2:	f000 b90e 	b.w	800a112 <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20000999 	.word	0x20000999

08009efc <__sfp_lock_release>:
 8009efc:	4801      	ldr	r0, [pc, #4]	@ (8009f04 <__sfp_lock_release+0x8>)
 8009efe:	f000 b909 	b.w	800a114 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	20000999 	.word	0x20000999

08009f08 <__sinit>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	f7ff fff0 	bl	8009ef0 <__sfp_lock_acquire>
 8009f10:	6a23      	ldr	r3, [r4, #32]
 8009f12:	b11b      	cbz	r3, 8009f1c <__sinit+0x14>
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	f7ff bff0 	b.w	8009efc <__sfp_lock_release>
 8009f1c:	4b04      	ldr	r3, [pc, #16]	@ (8009f30 <__sinit+0x28>)
 8009f1e:	6223      	str	r3, [r4, #32]
 8009f20:	4b04      	ldr	r3, [pc, #16]	@ (8009f34 <__sinit+0x2c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1f5      	bne.n	8009f14 <__sinit+0xc>
 8009f28:	f7ff ffc4 	bl	8009eb4 <global_stdio_init.part.0>
 8009f2c:	e7f2      	b.n	8009f14 <__sinit+0xc>
 8009f2e:	bf00      	nop
 8009f30:	08009e75 	.word	0x08009e75
 8009f34:	20000990 	.word	0x20000990

08009f38 <_fwalk_sglue>:
 8009f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	4688      	mov	r8, r1
 8009f40:	4614      	mov	r4, r2
 8009f42:	2600      	movs	r6, #0
 8009f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f48:	f1b9 0901 	subs.w	r9, r9, #1
 8009f4c:	d505      	bpl.n	8009f5a <_fwalk_sglue+0x22>
 8009f4e:	6824      	ldr	r4, [r4, #0]
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	d1f7      	bne.n	8009f44 <_fwalk_sglue+0xc>
 8009f54:	4630      	mov	r0, r6
 8009f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d907      	bls.n	8009f70 <_fwalk_sglue+0x38>
 8009f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f64:	3301      	adds	r3, #1
 8009f66:	d003      	beq.n	8009f70 <_fwalk_sglue+0x38>
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	47c0      	blx	r8
 8009f6e:	4306      	orrs	r6, r0
 8009f70:	3568      	adds	r5, #104	@ 0x68
 8009f72:	e7e9      	b.n	8009f48 <_fwalk_sglue+0x10>

08009f74 <iprintf>:
 8009f74:	b40f      	push	{r0, r1, r2, r3}
 8009f76:	b507      	push	{r0, r1, r2, lr}
 8009f78:	4906      	ldr	r1, [pc, #24]	@ (8009f94 <iprintf+0x20>)
 8009f7a:	ab04      	add	r3, sp, #16
 8009f7c:	6808      	ldr	r0, [r1, #0]
 8009f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f82:	6881      	ldr	r1, [r0, #8]
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	f000 f9e9 	bl	800a35c <_vfiprintf_r>
 8009f8a:	b003      	add	sp, #12
 8009f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f90:	b004      	add	sp, #16
 8009f92:	4770      	bx	lr
 8009f94:	2000002c 	.word	0x2000002c

08009f98 <__sread>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa0:	f000 f868 	bl	800a074 <_read_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	bfab      	itete	ge
 8009fa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009faa:	89a3      	ldrhlt	r3, [r4, #12]
 8009fac:	181b      	addge	r3, r3, r0
 8009fae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fb2:	bfac      	ite	ge
 8009fb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fb6:	81a3      	strhlt	r3, [r4, #12]
 8009fb8:	bd10      	pop	{r4, pc}

08009fba <__swrite>:
 8009fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbe:	461f      	mov	r7, r3
 8009fc0:	898b      	ldrh	r3, [r1, #12]
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	05db      	lsls	r3, r3, #23
 8009fc8:	4616      	mov	r6, r2
 8009fca:	d505      	bpl.n	8009fd8 <__swrite+0x1e>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd4:	f000 f83c 	bl	800a050 <_lseek_r>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	4632      	mov	r2, r6
 8009fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	463b      	mov	r3, r7
 8009fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	f000 b853 	b.w	800a098 <_write_r>

08009ff2 <__sseek>:
 8009ff2:	b510      	push	{r4, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffa:	f000 f829 	bl	800a050 <_lseek_r>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	bf15      	itete	ne
 800a004:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a006:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a00a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a00e:	81a3      	strheq	r3, [r4, #12]
 800a010:	bf18      	it	ne
 800a012:	81a3      	strhne	r3, [r4, #12]
 800a014:	bd10      	pop	{r4, pc}

0800a016 <__sclose>:
 800a016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01a:	f000 b809 	b.w	800a030 <_close_r>

0800a01e <memset>:
 800a01e:	4402      	add	r2, r0
 800a020:	4603      	mov	r3, r0
 800a022:	4293      	cmp	r3, r2
 800a024:	d100      	bne.n	800a028 <memset+0xa>
 800a026:	4770      	bx	lr
 800a028:	f803 1b01 	strb.w	r1, [r3], #1
 800a02c:	e7f9      	b.n	800a022 <memset+0x4>
	...

0800a030 <_close_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	2300      	movs	r3, #0
 800a034:	4d05      	ldr	r5, [pc, #20]	@ (800a04c <_close_r+0x1c>)
 800a036:	4604      	mov	r4, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	f7f7 fdf3 	bl	8001c26 <_close>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d102      	bne.n	800a04a <_close_r+0x1a>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	b103      	cbz	r3, 800a04a <_close_r+0x1a>
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	20000994 	.word	0x20000994

0800a050 <_lseek_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4604      	mov	r4, r0
 800a054:	4d06      	ldr	r5, [pc, #24]	@ (800a070 <_lseek_r+0x20>)
 800a056:	4608      	mov	r0, r1
 800a058:	4611      	mov	r1, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	602a      	str	r2, [r5, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f7f7 fe08 	bl	8001c74 <_lseek>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_lseek_r+0x1e>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_lseek_r+0x1e>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	20000994 	.word	0x20000994

0800a074 <_read_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4604      	mov	r4, r0
 800a078:	4d06      	ldr	r5, [pc, #24]	@ (800a094 <_read_r+0x20>)
 800a07a:	4608      	mov	r0, r1
 800a07c:	4611      	mov	r1, r2
 800a07e:	2200      	movs	r2, #0
 800a080:	602a      	str	r2, [r5, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	f7f7 fd96 	bl	8001bb4 <_read>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_read_r+0x1e>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_read_r+0x1e>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	20000994 	.word	0x20000994

0800a098 <_write_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4604      	mov	r4, r0
 800a09c:	4d06      	ldr	r5, [pc, #24]	@ (800a0b8 <_write_r+0x20>)
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	602a      	str	r2, [r5, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f7f7 fda1 	bl	8001bee <_write>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_write_r+0x1e>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_write_r+0x1e>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	20000994 	.word	0x20000994

0800a0bc <__errno>:
 800a0bc:	4b01      	ldr	r3, [pc, #4]	@ (800a0c4 <__errno+0x8>)
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	2000002c 	.word	0x2000002c

0800a0c8 <__libc_init_array>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	4d0d      	ldr	r5, [pc, #52]	@ (800a100 <__libc_init_array+0x38>)
 800a0cc:	2600      	movs	r6, #0
 800a0ce:	4c0d      	ldr	r4, [pc, #52]	@ (800a104 <__libc_init_array+0x3c>)
 800a0d0:	1b64      	subs	r4, r4, r5
 800a0d2:	10a4      	asrs	r4, r4, #2
 800a0d4:	42a6      	cmp	r6, r4
 800a0d6:	d109      	bne.n	800a0ec <__libc_init_array+0x24>
 800a0d8:	4d0b      	ldr	r5, [pc, #44]	@ (800a108 <__libc_init_array+0x40>)
 800a0da:	2600      	movs	r6, #0
 800a0dc:	4c0b      	ldr	r4, [pc, #44]	@ (800a10c <__libc_init_array+0x44>)
 800a0de:	f000 fdc9 	bl	800ac74 <_init>
 800a0e2:	1b64      	subs	r4, r4, r5
 800a0e4:	10a4      	asrs	r4, r4, #2
 800a0e6:	42a6      	cmp	r6, r4
 800a0e8:	d105      	bne.n	800a0f6 <__libc_init_array+0x2e>
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	4798      	blx	r3
 800a0f4:	e7ee      	b.n	800a0d4 <__libc_init_array+0xc>
 800a0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	4798      	blx	r3
 800a0fe:	e7f2      	b.n	800a0e6 <__libc_init_array+0x1e>
 800a100:	0800adf0 	.word	0x0800adf0
 800a104:	0800adf0 	.word	0x0800adf0
 800a108:	0800adf0 	.word	0x0800adf0
 800a10c:	0800adf4 	.word	0x0800adf4

0800a110 <__retarget_lock_init_recursive>:
 800a110:	4770      	bx	lr

0800a112 <__retarget_lock_acquire_recursive>:
 800a112:	4770      	bx	lr

0800a114 <__retarget_lock_release_recursive>:
 800a114:	4770      	bx	lr
	...

0800a118 <_free_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4605      	mov	r5, r0
 800a11c:	2900      	cmp	r1, #0
 800a11e:	d041      	beq.n	800a1a4 <_free_r+0x8c>
 800a120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a124:	1f0c      	subs	r4, r1, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfb8      	it	lt
 800a12a:	18e4      	addlt	r4, r4, r3
 800a12c:	f000 f8e0 	bl	800a2f0 <__malloc_lock>
 800a130:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a8 <_free_r+0x90>)
 800a132:	6813      	ldr	r3, [r2, #0]
 800a134:	b933      	cbnz	r3, 800a144 <_free_r+0x2c>
 800a136:	6063      	str	r3, [r4, #4]
 800a138:	6014      	str	r4, [r2, #0]
 800a13a:	4628      	mov	r0, r5
 800a13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a140:	f000 b8dc 	b.w	800a2fc <__malloc_unlock>
 800a144:	42a3      	cmp	r3, r4
 800a146:	d908      	bls.n	800a15a <_free_r+0x42>
 800a148:	6820      	ldr	r0, [r4, #0]
 800a14a:	1821      	adds	r1, r4, r0
 800a14c:	428b      	cmp	r3, r1
 800a14e:	bf01      	itttt	eq
 800a150:	6819      	ldreq	r1, [r3, #0]
 800a152:	685b      	ldreq	r3, [r3, #4]
 800a154:	1809      	addeq	r1, r1, r0
 800a156:	6021      	streq	r1, [r4, #0]
 800a158:	e7ed      	b.n	800a136 <_free_r+0x1e>
 800a15a:	461a      	mov	r2, r3
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	b10b      	cbz	r3, 800a164 <_free_r+0x4c>
 800a160:	42a3      	cmp	r3, r4
 800a162:	d9fa      	bls.n	800a15a <_free_r+0x42>
 800a164:	6811      	ldr	r1, [r2, #0]
 800a166:	1850      	adds	r0, r2, r1
 800a168:	42a0      	cmp	r0, r4
 800a16a:	d10b      	bne.n	800a184 <_free_r+0x6c>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	4401      	add	r1, r0
 800a170:	1850      	adds	r0, r2, r1
 800a172:	6011      	str	r1, [r2, #0]
 800a174:	4283      	cmp	r3, r0
 800a176:	d1e0      	bne.n	800a13a <_free_r+0x22>
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	4408      	add	r0, r1
 800a17e:	6053      	str	r3, [r2, #4]
 800a180:	6010      	str	r0, [r2, #0]
 800a182:	e7da      	b.n	800a13a <_free_r+0x22>
 800a184:	d902      	bls.n	800a18c <_free_r+0x74>
 800a186:	230c      	movs	r3, #12
 800a188:	602b      	str	r3, [r5, #0]
 800a18a:	e7d6      	b.n	800a13a <_free_r+0x22>
 800a18c:	6820      	ldr	r0, [r4, #0]
 800a18e:	1821      	adds	r1, r4, r0
 800a190:	428b      	cmp	r3, r1
 800a192:	bf02      	ittt	eq
 800a194:	6819      	ldreq	r1, [r3, #0]
 800a196:	685b      	ldreq	r3, [r3, #4]
 800a198:	1809      	addeq	r1, r1, r0
 800a19a:	6063      	str	r3, [r4, #4]
 800a19c:	bf08      	it	eq
 800a19e:	6021      	streq	r1, [r4, #0]
 800a1a0:	6054      	str	r4, [r2, #4]
 800a1a2:	e7ca      	b.n	800a13a <_free_r+0x22>
 800a1a4:	bd38      	pop	{r3, r4, r5, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200009a0 	.word	0x200009a0

0800a1ac <sbrk_aligned>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a1ec <sbrk_aligned+0x40>)
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	6831      	ldr	r1, [r6, #0]
 800a1b6:	b911      	cbnz	r1, 800a1be <sbrk_aligned+0x12>
 800a1b8:	f000 fcba 	bl	800ab30 <_sbrk_r>
 800a1bc:	6030      	str	r0, [r6, #0]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 fcb5 	bl	800ab30 <_sbrk_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d103      	bne.n	800a1d2 <sbrk_aligned+0x26>
 800a1ca:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}
 800a1d2:	1cc4      	adds	r4, r0, #3
 800a1d4:	f024 0403 	bic.w	r4, r4, #3
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d0f8      	beq.n	800a1ce <sbrk_aligned+0x22>
 800a1dc:	1a21      	subs	r1, r4, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 fca6 	bl	800ab30 <_sbrk_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d1f2      	bne.n	800a1ce <sbrk_aligned+0x22>
 800a1e8:	e7ef      	b.n	800a1ca <sbrk_aligned+0x1e>
 800a1ea:	bf00      	nop
 800a1ec:	2000099c 	.word	0x2000099c

0800a1f0 <_malloc_r>:
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	1ccd      	adds	r5, r1, #3
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	f025 0503 	bic.w	r5, r5, #3
 800a1fc:	3508      	adds	r5, #8
 800a1fe:	2d0c      	cmp	r5, #12
 800a200:	bf38      	it	cc
 800a202:	250c      	movcc	r5, #12
 800a204:	2d00      	cmp	r5, #0
 800a206:	db01      	blt.n	800a20c <_malloc_r+0x1c>
 800a208:	42a9      	cmp	r1, r5
 800a20a:	d904      	bls.n	800a216 <_malloc_r+0x26>
 800a20c:	230c      	movs	r3, #12
 800a20e:	6033      	str	r3, [r6, #0]
 800a210:	2000      	movs	r0, #0
 800a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2ec <_malloc_r+0xfc>
 800a21a:	f000 f869 	bl	800a2f0 <__malloc_lock>
 800a21e:	f8d8 3000 	ldr.w	r3, [r8]
 800a222:	461c      	mov	r4, r3
 800a224:	bb44      	cbnz	r4, 800a278 <_malloc_r+0x88>
 800a226:	4629      	mov	r1, r5
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff ffbf 	bl	800a1ac <sbrk_aligned>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	4604      	mov	r4, r0
 800a232:	d158      	bne.n	800a2e6 <_malloc_r+0xf6>
 800a234:	f8d8 4000 	ldr.w	r4, [r8]
 800a238:	4627      	mov	r7, r4
 800a23a:	2f00      	cmp	r7, #0
 800a23c:	d143      	bne.n	800a2c6 <_malloc_r+0xd6>
 800a23e:	2c00      	cmp	r4, #0
 800a240:	d04b      	beq.n	800a2da <_malloc_r+0xea>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	4639      	mov	r1, r7
 800a246:	4630      	mov	r0, r6
 800a248:	eb04 0903 	add.w	r9, r4, r3
 800a24c:	f000 fc70 	bl	800ab30 <_sbrk_r>
 800a250:	4581      	cmp	r9, r0
 800a252:	d142      	bne.n	800a2da <_malloc_r+0xea>
 800a254:	6821      	ldr	r1, [r4, #0]
 800a256:	4630      	mov	r0, r6
 800a258:	1a6d      	subs	r5, r5, r1
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7ff ffa6 	bl	800a1ac <sbrk_aligned>
 800a260:	3001      	adds	r0, #1
 800a262:	d03a      	beq.n	800a2da <_malloc_r+0xea>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	442b      	add	r3, r5
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	f8d8 3000 	ldr.w	r3, [r8]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	bb62      	cbnz	r2, 800a2cc <_malloc_r+0xdc>
 800a272:	f8c8 7000 	str.w	r7, [r8]
 800a276:	e00f      	b.n	800a298 <_malloc_r+0xa8>
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	1b52      	subs	r2, r2, r5
 800a27c:	d420      	bmi.n	800a2c0 <_malloc_r+0xd0>
 800a27e:	2a0b      	cmp	r2, #11
 800a280:	d917      	bls.n	800a2b2 <_malloc_r+0xc2>
 800a282:	1961      	adds	r1, r4, r5
 800a284:	42a3      	cmp	r3, r4
 800a286:	6025      	str	r5, [r4, #0]
 800a288:	bf18      	it	ne
 800a28a:	6059      	strne	r1, [r3, #4]
 800a28c:	6863      	ldr	r3, [r4, #4]
 800a28e:	bf08      	it	eq
 800a290:	f8c8 1000 	streq.w	r1, [r8]
 800a294:	5162      	str	r2, [r4, r5]
 800a296:	604b      	str	r3, [r1, #4]
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 f82f 	bl	800a2fc <__malloc_unlock>
 800a29e:	f104 000b 	add.w	r0, r4, #11
 800a2a2:	1d23      	adds	r3, r4, #4
 800a2a4:	f020 0007 	bic.w	r0, r0, #7
 800a2a8:	1ac2      	subs	r2, r0, r3
 800a2aa:	bf1c      	itt	ne
 800a2ac:	1a1b      	subne	r3, r3, r0
 800a2ae:	50a3      	strne	r3, [r4, r2]
 800a2b0:	e7af      	b.n	800a212 <_malloc_r+0x22>
 800a2b2:	6862      	ldr	r2, [r4, #4]
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	bf0c      	ite	eq
 800a2b8:	f8c8 2000 	streq.w	r2, [r8]
 800a2bc:	605a      	strne	r2, [r3, #4]
 800a2be:	e7eb      	b.n	800a298 <_malloc_r+0xa8>
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	6864      	ldr	r4, [r4, #4]
 800a2c4:	e7ae      	b.n	800a224 <_malloc_r+0x34>
 800a2c6:	463c      	mov	r4, r7
 800a2c8:	687f      	ldr	r7, [r7, #4]
 800a2ca:	e7b6      	b.n	800a23a <_malloc_r+0x4a>
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	d1fb      	bne.n	800a2cc <_malloc_r+0xdc>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6053      	str	r3, [r2, #4]
 800a2d8:	e7de      	b.n	800a298 <_malloc_r+0xa8>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	4630      	mov	r0, r6
 800a2de:	6033      	str	r3, [r6, #0]
 800a2e0:	f000 f80c 	bl	800a2fc <__malloc_unlock>
 800a2e4:	e794      	b.n	800a210 <_malloc_r+0x20>
 800a2e6:	6005      	str	r5, [r0, #0]
 800a2e8:	e7d6      	b.n	800a298 <_malloc_r+0xa8>
 800a2ea:	bf00      	nop
 800a2ec:	200009a0 	.word	0x200009a0

0800a2f0 <__malloc_lock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	@ (800a2f8 <__malloc_lock+0x8>)
 800a2f2:	f7ff bf0e 	b.w	800a112 <__retarget_lock_acquire_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	20000998 	.word	0x20000998

0800a2fc <__malloc_unlock>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	@ (800a304 <__malloc_unlock+0x8>)
 800a2fe:	f7ff bf09 	b.w	800a114 <__retarget_lock_release_recursive>
 800a302:	bf00      	nop
 800a304:	20000998 	.word	0x20000998

0800a308 <__sfputc_r>:
 800a308:	6893      	ldr	r3, [r2, #8]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	6093      	str	r3, [r2, #8]
 800a310:	b410      	push	{r4}
 800a312:	da08      	bge.n	800a326 <__sfputc_r+0x1e>
 800a314:	6994      	ldr	r4, [r2, #24]
 800a316:	42a3      	cmp	r3, r4
 800a318:	db01      	blt.n	800a31e <__sfputc_r+0x16>
 800a31a:	290a      	cmp	r1, #10
 800a31c:	d103      	bne.n	800a326 <__sfputc_r+0x1e>
 800a31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a322:	f000 bb71 	b.w	800aa08 <__swbuf_r>
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	1c58      	adds	r0, r3, #1
 800a32a:	6010      	str	r0, [r2, #0]
 800a32c:	4608      	mov	r0, r1
 800a32e:	7019      	strb	r1, [r3, #0]
 800a330:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <__sfputs_r>:
 800a336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a338:	4606      	mov	r6, r0
 800a33a:	460f      	mov	r7, r1
 800a33c:	4614      	mov	r4, r2
 800a33e:	18d5      	adds	r5, r2, r3
 800a340:	42ac      	cmp	r4, r5
 800a342:	d101      	bne.n	800a348 <__sfputs_r+0x12>
 800a344:	2000      	movs	r0, #0
 800a346:	e007      	b.n	800a358 <__sfputs_r+0x22>
 800a348:	463a      	mov	r2, r7
 800a34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a34e:	4630      	mov	r0, r6
 800a350:	f7ff ffda 	bl	800a308 <__sfputc_r>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d1f3      	bne.n	800a340 <__sfputs_r+0xa>
 800a358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a35c <_vfiprintf_r>:
 800a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	460d      	mov	r5, r1
 800a362:	b09d      	sub	sp, #116	@ 0x74
 800a364:	4614      	mov	r4, r2
 800a366:	4698      	mov	r8, r3
 800a368:	4606      	mov	r6, r0
 800a36a:	b118      	cbz	r0, 800a374 <_vfiprintf_r+0x18>
 800a36c:	6a03      	ldr	r3, [r0, #32]
 800a36e:	b90b      	cbnz	r3, 800a374 <_vfiprintf_r+0x18>
 800a370:	f7ff fdca 	bl	8009f08 <__sinit>
 800a374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a376:	07d9      	lsls	r1, r3, #31
 800a378:	d405      	bmi.n	800a386 <_vfiprintf_r+0x2a>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	059a      	lsls	r2, r3, #22
 800a37e:	d402      	bmi.n	800a386 <_vfiprintf_r+0x2a>
 800a380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a382:	f7ff fec6 	bl	800a112 <__retarget_lock_acquire_recursive>
 800a386:	89ab      	ldrh	r3, [r5, #12]
 800a388:	071b      	lsls	r3, r3, #28
 800a38a:	d501      	bpl.n	800a390 <_vfiprintf_r+0x34>
 800a38c:	692b      	ldr	r3, [r5, #16]
 800a38e:	b99b      	cbnz	r3, 800a3b8 <_vfiprintf_r+0x5c>
 800a390:	4629      	mov	r1, r5
 800a392:	4630      	mov	r0, r6
 800a394:	f000 fb76 	bl	800aa84 <__swsetup_r>
 800a398:	b170      	cbz	r0, 800a3b8 <_vfiprintf_r+0x5c>
 800a39a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a39c:	07dc      	lsls	r4, r3, #31
 800a39e:	d504      	bpl.n	800a3aa <_vfiprintf_r+0x4e>
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	b01d      	add	sp, #116	@ 0x74
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	89ab      	ldrh	r3, [r5, #12]
 800a3ac:	0598      	lsls	r0, r3, #22
 800a3ae:	d4f7      	bmi.n	800a3a0 <_vfiprintf_r+0x44>
 800a3b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3b2:	f7ff feaf 	bl	800a114 <__retarget_lock_release_recursive>
 800a3b6:	e7f3      	b.n	800a3a0 <_vfiprintf_r+0x44>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3be:	f04f 0901 	mov.w	r9, #1
 800a3c2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a578 <_vfiprintf_r+0x21c>
 800a3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3c8:	2320      	movs	r3, #32
 800a3ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3ce:	2330      	movs	r3, #48	@ 0x30
 800a3d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	469a      	mov	sl, r3
 800a3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3dc:	b10a      	cbz	r2, 800a3e2 <_vfiprintf_r+0x86>
 800a3de:	2a25      	cmp	r2, #37	@ 0x25
 800a3e0:	d1f9      	bne.n	800a3d6 <_vfiprintf_r+0x7a>
 800a3e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e6:	d00b      	beq.n	800a400 <_vfiprintf_r+0xa4>
 800a3e8:	465b      	mov	r3, fp
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ffa1 	bl	800a336 <__sfputs_r>
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f000 80a7 	beq.w	800a548 <_vfiprintf_r+0x1ec>
 800a3fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3fc:	445a      	add	r2, fp
 800a3fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800a400:	f89a 3000 	ldrb.w	r3, [sl]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 809f 	beq.w	800a548 <_vfiprintf_r+0x1ec>
 800a40a:	2300      	movs	r3, #0
 800a40c:	f04f 32ff 	mov.w	r2, #4294967295
 800a410:	f10a 0a01 	add.w	sl, sl, #1
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	9307      	str	r3, [sp, #28]
 800a418:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a41c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a422:	4654      	mov	r4, sl
 800a424:	2205      	movs	r2, #5
 800a426:	4854      	ldr	r0, [pc, #336]	@ (800a578 <_vfiprintf_r+0x21c>)
 800a428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a42c:	f000 fb90 	bl	800ab50 <memchr>
 800a430:	9a04      	ldr	r2, [sp, #16]
 800a432:	b9d8      	cbnz	r0, 800a46c <_vfiprintf_r+0x110>
 800a434:	06d1      	lsls	r1, r2, #27
 800a436:	bf44      	itt	mi
 800a438:	2320      	movmi	r3, #32
 800a43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a43e:	0713      	lsls	r3, r2, #28
 800a440:	bf44      	itt	mi
 800a442:	232b      	movmi	r3, #43	@ 0x2b
 800a444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a448:	f89a 3000 	ldrb.w	r3, [sl]
 800a44c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a44e:	d015      	beq.n	800a47c <_vfiprintf_r+0x120>
 800a450:	9a07      	ldr	r2, [sp, #28]
 800a452:	4654      	mov	r4, sl
 800a454:	2000      	movs	r0, #0
 800a456:	f04f 0c0a 	mov.w	ip, #10
 800a45a:	4621      	mov	r1, r4
 800a45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a460:	3b30      	subs	r3, #48	@ 0x30
 800a462:	2b09      	cmp	r3, #9
 800a464:	d94b      	bls.n	800a4fe <_vfiprintf_r+0x1a2>
 800a466:	b1b0      	cbz	r0, 800a496 <_vfiprintf_r+0x13a>
 800a468:	9207      	str	r2, [sp, #28]
 800a46a:	e014      	b.n	800a496 <_vfiprintf_r+0x13a>
 800a46c:	eba0 0308 	sub.w	r3, r0, r8
 800a470:	46a2      	mov	sl, r4
 800a472:	fa09 f303 	lsl.w	r3, r9, r3
 800a476:	4313      	orrs	r3, r2
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	e7d2      	b.n	800a422 <_vfiprintf_r+0xc6>
 800a47c:	9b03      	ldr	r3, [sp, #12]
 800a47e:	1d19      	adds	r1, r3, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	9103      	str	r1, [sp, #12]
 800a486:	bfbb      	ittet	lt
 800a488:	425b      	neglt	r3, r3
 800a48a:	f042 0202 	orrlt.w	r2, r2, #2
 800a48e:	9307      	strge	r3, [sp, #28]
 800a490:	9307      	strlt	r3, [sp, #28]
 800a492:	bfb8      	it	lt
 800a494:	9204      	strlt	r2, [sp, #16]
 800a496:	7823      	ldrb	r3, [r4, #0]
 800a498:	2b2e      	cmp	r3, #46	@ 0x2e
 800a49a:	d10a      	bne.n	800a4b2 <_vfiprintf_r+0x156>
 800a49c:	7863      	ldrb	r3, [r4, #1]
 800a49e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4a0:	d132      	bne.n	800a508 <_vfiprintf_r+0x1ac>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	3402      	adds	r4, #2
 800a4a6:	1d1a      	adds	r2, r3, #4
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4ae:	9203      	str	r2, [sp, #12]
 800a4b0:	9305      	str	r3, [sp, #20]
 800a4b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a588 <_vfiprintf_r+0x22c>
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	7821      	ldrb	r1, [r4, #0]
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	f000 fb48 	bl	800ab50 <memchr>
 800a4c0:	b138      	cbz	r0, 800a4d2 <_vfiprintf_r+0x176>
 800a4c2:	eba0 000a 	sub.w	r0, r0, sl
 800a4c6:	2240      	movs	r2, #64	@ 0x40
 800a4c8:	9b04      	ldr	r3, [sp, #16]
 800a4ca:	3401      	adds	r4, #1
 800a4cc:	4082      	lsls	r2, r0
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d6:	2206      	movs	r2, #6
 800a4d8:	4828      	ldr	r0, [pc, #160]	@ (800a57c <_vfiprintf_r+0x220>)
 800a4da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4de:	f000 fb37 	bl	800ab50 <memchr>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d03f      	beq.n	800a566 <_vfiprintf_r+0x20a>
 800a4e6:	4b26      	ldr	r3, [pc, #152]	@ (800a580 <_vfiprintf_r+0x224>)
 800a4e8:	bb1b      	cbnz	r3, 800a532 <_vfiprintf_r+0x1d6>
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	3307      	adds	r3, #7
 800a4ee:	f023 0307 	bic.w	r3, r3, #7
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	9303      	str	r3, [sp, #12]
 800a4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f8:	443b      	add	r3, r7
 800a4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4fc:	e76a      	b.n	800a3d4 <_vfiprintf_r+0x78>
 800a4fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a502:	460c      	mov	r4, r1
 800a504:	2001      	movs	r0, #1
 800a506:	e7a8      	b.n	800a45a <_vfiprintf_r+0xfe>
 800a508:	2300      	movs	r3, #0
 800a50a:	3401      	adds	r4, #1
 800a50c:	f04f 0c0a 	mov.w	ip, #10
 800a510:	4619      	mov	r1, r3
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	4620      	mov	r0, r4
 800a516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a51a:	3a30      	subs	r2, #48	@ 0x30
 800a51c:	2a09      	cmp	r2, #9
 800a51e:	d903      	bls.n	800a528 <_vfiprintf_r+0x1cc>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d0c6      	beq.n	800a4b2 <_vfiprintf_r+0x156>
 800a524:	9105      	str	r1, [sp, #20]
 800a526:	e7c4      	b.n	800a4b2 <_vfiprintf_r+0x156>
 800a528:	fb0c 2101 	mla	r1, ip, r1, r2
 800a52c:	4604      	mov	r4, r0
 800a52e:	2301      	movs	r3, #1
 800a530:	e7f0      	b.n	800a514 <_vfiprintf_r+0x1b8>
 800a532:	ab03      	add	r3, sp, #12
 800a534:	462a      	mov	r2, r5
 800a536:	a904      	add	r1, sp, #16
 800a538:	4630      	mov	r0, r6
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	4b11      	ldr	r3, [pc, #68]	@ (800a584 <_vfiprintf_r+0x228>)
 800a53e:	f3af 8000 	nop.w
 800a542:	4607      	mov	r7, r0
 800a544:	1c78      	adds	r0, r7, #1
 800a546:	d1d6      	bne.n	800a4f6 <_vfiprintf_r+0x19a>
 800a548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a54a:	07d9      	lsls	r1, r3, #31
 800a54c:	d405      	bmi.n	800a55a <_vfiprintf_r+0x1fe>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	059a      	lsls	r2, r3, #22
 800a552:	d402      	bmi.n	800a55a <_vfiprintf_r+0x1fe>
 800a554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a556:	f7ff fddd 	bl	800a114 <__retarget_lock_release_recursive>
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	065b      	lsls	r3, r3, #25
 800a55e:	f53f af1f 	bmi.w	800a3a0 <_vfiprintf_r+0x44>
 800a562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a564:	e71e      	b.n	800a3a4 <_vfiprintf_r+0x48>
 800a566:	ab03      	add	r3, sp, #12
 800a568:	462a      	mov	r2, r5
 800a56a:	a904      	add	r1, sp, #16
 800a56c:	4630      	mov	r0, r6
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4b04      	ldr	r3, [pc, #16]	@ (800a584 <_vfiprintf_r+0x228>)
 800a572:	f000 f87d 	bl	800a670 <_printf_i>
 800a576:	e7e4      	b.n	800a542 <_vfiprintf_r+0x1e6>
 800a578:	0800adb4 	.word	0x0800adb4
 800a57c:	0800adbe 	.word	0x0800adbe
 800a580:	00000000 	.word	0x00000000
 800a584:	0800a337 	.word	0x0800a337
 800a588:	0800adba 	.word	0x0800adba

0800a58c <_printf_common>:
 800a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a590:	4616      	mov	r6, r2
 800a592:	4698      	mov	r8, r3
 800a594:	688a      	ldr	r2, [r1, #8]
 800a596:	4607      	mov	r7, r0
 800a598:	690b      	ldr	r3, [r1, #16]
 800a59a:	460c      	mov	r4, r1
 800a59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	bfb8      	it	lt
 800a5a4:	4613      	movlt	r3, r2
 800a5a6:	6033      	str	r3, [r6, #0]
 800a5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5ac:	b10a      	cbz	r2, 800a5b2 <_printf_common+0x26>
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	6033      	str	r3, [r6, #0]
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	0699      	lsls	r1, r3, #26
 800a5b6:	bf42      	ittt	mi
 800a5b8:	6833      	ldrmi	r3, [r6, #0]
 800a5ba:	3302      	addmi	r3, #2
 800a5bc:	6033      	strmi	r3, [r6, #0]
 800a5be:	6825      	ldr	r5, [r4, #0]
 800a5c0:	f015 0506 	ands.w	r5, r5, #6
 800a5c4:	d106      	bne.n	800a5d4 <_printf_common+0x48>
 800a5c6:	f104 0a19 	add.w	sl, r4, #25
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	6832      	ldr	r2, [r6, #0]
 800a5ce:	1a9b      	subs	r3, r3, r2
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dc2b      	bgt.n	800a62c <_printf_common+0xa0>
 800a5d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5d8:	6822      	ldr	r2, [r4, #0]
 800a5da:	3b00      	subs	r3, #0
 800a5dc:	bf18      	it	ne
 800a5de:	2301      	movne	r3, #1
 800a5e0:	0692      	lsls	r2, r2, #26
 800a5e2:	d430      	bmi.n	800a646 <_printf_common+0xba>
 800a5e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	47c8      	blx	r9
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	d023      	beq.n	800a63a <_printf_common+0xae>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	341a      	adds	r4, #26
 800a5f6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a5fa:	f003 0306 	and.w	r3, r3, #6
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	bf0a      	itet	eq
 800a602:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a606:	2500      	movne	r5, #0
 800a608:	6833      	ldreq	r3, [r6, #0]
 800a60a:	f04f 0600 	mov.w	r6, #0
 800a60e:	bf08      	it	eq
 800a610:	1aed      	subeq	r5, r5, r3
 800a612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a616:	bf08      	it	eq
 800a618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a61c:	4293      	cmp	r3, r2
 800a61e:	bfc4      	itt	gt
 800a620:	1a9b      	subgt	r3, r3, r2
 800a622:	18ed      	addgt	r5, r5, r3
 800a624:	42b5      	cmp	r5, r6
 800a626:	d11a      	bne.n	800a65e <_printf_common+0xd2>
 800a628:	2000      	movs	r0, #0
 800a62a:	e008      	b.n	800a63e <_printf_common+0xb2>
 800a62c:	2301      	movs	r3, #1
 800a62e:	4652      	mov	r2, sl
 800a630:	4641      	mov	r1, r8
 800a632:	4638      	mov	r0, r7
 800a634:	47c8      	blx	r9
 800a636:	3001      	adds	r0, #1
 800a638:	d103      	bne.n	800a642 <_printf_common+0xb6>
 800a63a:	f04f 30ff 	mov.w	r0, #4294967295
 800a63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a642:	3501      	adds	r5, #1
 800a644:	e7c1      	b.n	800a5ca <_printf_common+0x3e>
 800a646:	18e1      	adds	r1, r4, r3
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	2030      	movs	r0, #48	@ 0x30
 800a64c:	3302      	adds	r3, #2
 800a64e:	4422      	add	r2, r4
 800a650:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a65c:	e7c2      	b.n	800a5e4 <_printf_common+0x58>
 800a65e:	2301      	movs	r3, #1
 800a660:	4622      	mov	r2, r4
 800a662:	4641      	mov	r1, r8
 800a664:	4638      	mov	r0, r7
 800a666:	47c8      	blx	r9
 800a668:	3001      	adds	r0, #1
 800a66a:	d0e6      	beq.n	800a63a <_printf_common+0xae>
 800a66c:	3601      	adds	r6, #1
 800a66e:	e7d9      	b.n	800a624 <_printf_common+0x98>

0800a670 <_printf_i>:
 800a670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a674:	7e0f      	ldrb	r7, [r1, #24]
 800a676:	4691      	mov	r9, r2
 800a678:	4680      	mov	r8, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	2f78      	cmp	r7, #120	@ 0x78
 800a67e:	469a      	mov	sl, r3
 800a680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a686:	d807      	bhi.n	800a698 <_printf_i+0x28>
 800a688:	2f62      	cmp	r7, #98	@ 0x62
 800a68a:	d80a      	bhi.n	800a6a2 <_printf_i+0x32>
 800a68c:	2f00      	cmp	r7, #0
 800a68e:	f000 80d2 	beq.w	800a836 <_printf_i+0x1c6>
 800a692:	2f58      	cmp	r7, #88	@ 0x58
 800a694:	f000 80b9 	beq.w	800a80a <_printf_i+0x19a>
 800a698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a69c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6a0:	e03a      	b.n	800a718 <_printf_i+0xa8>
 800a6a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6a6:	2b15      	cmp	r3, #21
 800a6a8:	d8f6      	bhi.n	800a698 <_printf_i+0x28>
 800a6aa:	a101      	add	r1, pc, #4	@ (adr r1, 800a6b0 <_printf_i+0x40>)
 800a6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6b0:	0800a709 	.word	0x0800a709
 800a6b4:	0800a71d 	.word	0x0800a71d
 800a6b8:	0800a699 	.word	0x0800a699
 800a6bc:	0800a699 	.word	0x0800a699
 800a6c0:	0800a699 	.word	0x0800a699
 800a6c4:	0800a699 	.word	0x0800a699
 800a6c8:	0800a71d 	.word	0x0800a71d
 800a6cc:	0800a699 	.word	0x0800a699
 800a6d0:	0800a699 	.word	0x0800a699
 800a6d4:	0800a699 	.word	0x0800a699
 800a6d8:	0800a699 	.word	0x0800a699
 800a6dc:	0800a81d 	.word	0x0800a81d
 800a6e0:	0800a747 	.word	0x0800a747
 800a6e4:	0800a7d7 	.word	0x0800a7d7
 800a6e8:	0800a699 	.word	0x0800a699
 800a6ec:	0800a699 	.word	0x0800a699
 800a6f0:	0800a83f 	.word	0x0800a83f
 800a6f4:	0800a699 	.word	0x0800a699
 800a6f8:	0800a747 	.word	0x0800a747
 800a6fc:	0800a699 	.word	0x0800a699
 800a700:	0800a699 	.word	0x0800a699
 800a704:	0800a7df 	.word	0x0800a7df
 800a708:	6833      	ldr	r3, [r6, #0]
 800a70a:	1d1a      	adds	r2, r3, #4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6032      	str	r2, [r6, #0]
 800a710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a718:	2301      	movs	r3, #1
 800a71a:	e09d      	b.n	800a858 <_printf_i+0x1e8>
 800a71c:	6833      	ldr	r3, [r6, #0]
 800a71e:	6820      	ldr	r0, [r4, #0]
 800a720:	1d19      	adds	r1, r3, #4
 800a722:	6031      	str	r1, [r6, #0]
 800a724:	0606      	lsls	r6, r0, #24
 800a726:	d501      	bpl.n	800a72c <_printf_i+0xbc>
 800a728:	681d      	ldr	r5, [r3, #0]
 800a72a:	e003      	b.n	800a734 <_printf_i+0xc4>
 800a72c:	0645      	lsls	r5, r0, #25
 800a72e:	d5fb      	bpl.n	800a728 <_printf_i+0xb8>
 800a730:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a734:	2d00      	cmp	r5, #0
 800a736:	da03      	bge.n	800a740 <_printf_i+0xd0>
 800a738:	232d      	movs	r3, #45	@ 0x2d
 800a73a:	426d      	negs	r5, r5
 800a73c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a740:	4859      	ldr	r0, [pc, #356]	@ (800a8a8 <_printf_i+0x238>)
 800a742:	230a      	movs	r3, #10
 800a744:	e011      	b.n	800a76a <_printf_i+0xfa>
 800a746:	6821      	ldr	r1, [r4, #0]
 800a748:	6833      	ldr	r3, [r6, #0]
 800a74a:	0608      	lsls	r0, r1, #24
 800a74c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a750:	d402      	bmi.n	800a758 <_printf_i+0xe8>
 800a752:	0649      	lsls	r1, r1, #25
 800a754:	bf48      	it	mi
 800a756:	b2ad      	uxthmi	r5, r5
 800a758:	2f6f      	cmp	r7, #111	@ 0x6f
 800a75a:	6033      	str	r3, [r6, #0]
 800a75c:	4852      	ldr	r0, [pc, #328]	@ (800a8a8 <_printf_i+0x238>)
 800a75e:	bf14      	ite	ne
 800a760:	230a      	movne	r3, #10
 800a762:	2308      	moveq	r3, #8
 800a764:	2100      	movs	r1, #0
 800a766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a76a:	6866      	ldr	r6, [r4, #4]
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	60a6      	str	r6, [r4, #8]
 800a770:	bfa2      	ittt	ge
 800a772:	6821      	ldrge	r1, [r4, #0]
 800a774:	f021 0104 	bicge.w	r1, r1, #4
 800a778:	6021      	strge	r1, [r4, #0]
 800a77a:	b90d      	cbnz	r5, 800a780 <_printf_i+0x110>
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	d04b      	beq.n	800a818 <_printf_i+0x1a8>
 800a780:	4616      	mov	r6, r2
 800a782:	fbb5 f1f3 	udiv	r1, r5, r3
 800a786:	fb03 5711 	mls	r7, r3, r1, r5
 800a78a:	5dc7      	ldrb	r7, [r0, r7]
 800a78c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a790:	462f      	mov	r7, r5
 800a792:	460d      	mov	r5, r1
 800a794:	42bb      	cmp	r3, r7
 800a796:	d9f4      	bls.n	800a782 <_printf_i+0x112>
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d10b      	bne.n	800a7b4 <_printf_i+0x144>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	07df      	lsls	r7, r3, #31
 800a7a0:	d508      	bpl.n	800a7b4 <_printf_i+0x144>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	6861      	ldr	r1, [r4, #4]
 800a7a6:	4299      	cmp	r1, r3
 800a7a8:	bfde      	ittt	le
 800a7aa:	2330      	movle	r3, #48	@ 0x30
 800a7ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7b4:	1b92      	subs	r2, r2, r6
 800a7b6:	6122      	str	r2, [r4, #16]
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	aa03      	add	r2, sp, #12
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4640      	mov	r0, r8
 800a7c0:	f8cd a000 	str.w	sl, [sp]
 800a7c4:	f7ff fee2 	bl	800a58c <_printf_common>
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	d14a      	bne.n	800a862 <_printf_i+0x1f2>
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d0:	b004      	add	sp, #16
 800a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	f043 0320 	orr.w	r3, r3, #32
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	2778      	movs	r7, #120	@ 0x78
 800a7e0:	4832      	ldr	r0, [pc, #200]	@ (800a8ac <_printf_i+0x23c>)
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7e8:	061f      	lsls	r7, r3, #24
 800a7ea:	6831      	ldr	r1, [r6, #0]
 800a7ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7f0:	d402      	bmi.n	800a7f8 <_printf_i+0x188>
 800a7f2:	065f      	lsls	r7, r3, #25
 800a7f4:	bf48      	it	mi
 800a7f6:	b2ad      	uxthmi	r5, r5
 800a7f8:	6031      	str	r1, [r6, #0]
 800a7fa:	07d9      	lsls	r1, r3, #31
 800a7fc:	bf44      	itt	mi
 800a7fe:	f043 0320 	orrmi.w	r3, r3, #32
 800a802:	6023      	strmi	r3, [r4, #0]
 800a804:	b11d      	cbz	r5, 800a80e <_printf_i+0x19e>
 800a806:	2310      	movs	r3, #16
 800a808:	e7ac      	b.n	800a764 <_printf_i+0xf4>
 800a80a:	4827      	ldr	r0, [pc, #156]	@ (800a8a8 <_printf_i+0x238>)
 800a80c:	e7e9      	b.n	800a7e2 <_printf_i+0x172>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	f023 0320 	bic.w	r3, r3, #32
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	e7f6      	b.n	800a806 <_printf_i+0x196>
 800a818:	4616      	mov	r6, r2
 800a81a:	e7bd      	b.n	800a798 <_printf_i+0x128>
 800a81c:	6833      	ldr	r3, [r6, #0]
 800a81e:	6825      	ldr	r5, [r4, #0]
 800a820:	1d18      	adds	r0, r3, #4
 800a822:	6961      	ldr	r1, [r4, #20]
 800a824:	6030      	str	r0, [r6, #0]
 800a826:	062e      	lsls	r6, r5, #24
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	d501      	bpl.n	800a830 <_printf_i+0x1c0>
 800a82c:	6019      	str	r1, [r3, #0]
 800a82e:	e002      	b.n	800a836 <_printf_i+0x1c6>
 800a830:	0668      	lsls	r0, r5, #25
 800a832:	d5fb      	bpl.n	800a82c <_printf_i+0x1bc>
 800a834:	8019      	strh	r1, [r3, #0]
 800a836:	2300      	movs	r3, #0
 800a838:	4616      	mov	r6, r2
 800a83a:	6123      	str	r3, [r4, #16]
 800a83c:	e7bc      	b.n	800a7b8 <_printf_i+0x148>
 800a83e:	6833      	ldr	r3, [r6, #0]
 800a840:	2100      	movs	r1, #0
 800a842:	1d1a      	adds	r2, r3, #4
 800a844:	6032      	str	r2, [r6, #0]
 800a846:	681e      	ldr	r6, [r3, #0]
 800a848:	6862      	ldr	r2, [r4, #4]
 800a84a:	4630      	mov	r0, r6
 800a84c:	f000 f980 	bl	800ab50 <memchr>
 800a850:	b108      	cbz	r0, 800a856 <_printf_i+0x1e6>
 800a852:	1b80      	subs	r0, r0, r6
 800a854:	6060      	str	r0, [r4, #4]
 800a856:	6863      	ldr	r3, [r4, #4]
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	2300      	movs	r3, #0
 800a85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a860:	e7aa      	b.n	800a7b8 <_printf_i+0x148>
 800a862:	6923      	ldr	r3, [r4, #16]
 800a864:	4632      	mov	r2, r6
 800a866:	4649      	mov	r1, r9
 800a868:	4640      	mov	r0, r8
 800a86a:	47d0      	blx	sl
 800a86c:	3001      	adds	r0, #1
 800a86e:	d0ad      	beq.n	800a7cc <_printf_i+0x15c>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	079b      	lsls	r3, r3, #30
 800a874:	d413      	bmi.n	800a89e <_printf_i+0x22e>
 800a876:	68e0      	ldr	r0, [r4, #12]
 800a878:	9b03      	ldr	r3, [sp, #12]
 800a87a:	4298      	cmp	r0, r3
 800a87c:	bfb8      	it	lt
 800a87e:	4618      	movlt	r0, r3
 800a880:	e7a6      	b.n	800a7d0 <_printf_i+0x160>
 800a882:	2301      	movs	r3, #1
 800a884:	4632      	mov	r2, r6
 800a886:	4649      	mov	r1, r9
 800a888:	4640      	mov	r0, r8
 800a88a:	47d0      	blx	sl
 800a88c:	3001      	adds	r0, #1
 800a88e:	d09d      	beq.n	800a7cc <_printf_i+0x15c>
 800a890:	3501      	adds	r5, #1
 800a892:	68e3      	ldr	r3, [r4, #12]
 800a894:	9903      	ldr	r1, [sp, #12]
 800a896:	1a5b      	subs	r3, r3, r1
 800a898:	42ab      	cmp	r3, r5
 800a89a:	dcf2      	bgt.n	800a882 <_printf_i+0x212>
 800a89c:	e7eb      	b.n	800a876 <_printf_i+0x206>
 800a89e:	2500      	movs	r5, #0
 800a8a0:	f104 0619 	add.w	r6, r4, #25
 800a8a4:	e7f5      	b.n	800a892 <_printf_i+0x222>
 800a8a6:	bf00      	nop
 800a8a8:	0800adc5 	.word	0x0800adc5
 800a8ac:	0800add6 	.word	0x0800add6

0800a8b0 <__sflush_r>:
 800a8b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	0716      	lsls	r6, r2, #28
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	460c      	mov	r4, r1
 800a8be:	d454      	bmi.n	800a96a <__sflush_r+0xba>
 800a8c0:	684b      	ldr	r3, [r1, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dc02      	bgt.n	800a8cc <__sflush_r+0x1c>
 800a8c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dd48      	ble.n	800a95e <__sflush_r+0xae>
 800a8cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8ce:	2e00      	cmp	r6, #0
 800a8d0:	d045      	beq.n	800a95e <__sflush_r+0xae>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8d8:	682f      	ldr	r7, [r5, #0]
 800a8da:	6a21      	ldr	r1, [r4, #32]
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	d030      	beq.n	800a942 <__sflush_r+0x92>
 800a8e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	0759      	lsls	r1, r3, #29
 800a8e6:	d505      	bpl.n	800a8f4 <__sflush_r+0x44>
 800a8e8:	6863      	ldr	r3, [r4, #4]
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ee:	b10b      	cbz	r3, 800a8f4 <__sflush_r+0x44>
 800a8f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8f2:	1ad2      	subs	r2, r2, r3
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f8:	6a21      	ldr	r1, [r4, #32]
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b0      	blx	r6
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	d106      	bne.n	800a912 <__sflush_r+0x62>
 800a904:	6829      	ldr	r1, [r5, #0]
 800a906:	291d      	cmp	r1, #29
 800a908:	d82b      	bhi.n	800a962 <__sflush_r+0xb2>
 800a90a:	4a2a      	ldr	r2, [pc, #168]	@ (800a9b4 <__sflush_r+0x104>)
 800a90c:	410a      	asrs	r2, r1
 800a90e:	07d6      	lsls	r6, r2, #31
 800a910:	d427      	bmi.n	800a962 <__sflush_r+0xb2>
 800a912:	2200      	movs	r2, #0
 800a914:	04d9      	lsls	r1, r3, #19
 800a916:	6062      	str	r2, [r4, #4]
 800a918:	6922      	ldr	r2, [r4, #16]
 800a91a:	6022      	str	r2, [r4, #0]
 800a91c:	d504      	bpl.n	800a928 <__sflush_r+0x78>
 800a91e:	1c42      	adds	r2, r0, #1
 800a920:	d101      	bne.n	800a926 <__sflush_r+0x76>
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	b903      	cbnz	r3, 800a928 <__sflush_r+0x78>
 800a926:	6560      	str	r0, [r4, #84]	@ 0x54
 800a928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a92a:	602f      	str	r7, [r5, #0]
 800a92c:	b1b9      	cbz	r1, 800a95e <__sflush_r+0xae>
 800a92e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a932:	4299      	cmp	r1, r3
 800a934:	d002      	beq.n	800a93c <__sflush_r+0x8c>
 800a936:	4628      	mov	r0, r5
 800a938:	f7ff fbee 	bl	800a118 <_free_r>
 800a93c:	2300      	movs	r3, #0
 800a93e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a940:	e00d      	b.n	800a95e <__sflush_r+0xae>
 800a942:	2301      	movs	r3, #1
 800a944:	4628      	mov	r0, r5
 800a946:	47b0      	blx	r6
 800a948:	4602      	mov	r2, r0
 800a94a:	1c50      	adds	r0, r2, #1
 800a94c:	d1c9      	bne.n	800a8e2 <__sflush_r+0x32>
 800a94e:	682b      	ldr	r3, [r5, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0c6      	beq.n	800a8e2 <__sflush_r+0x32>
 800a954:	2b1d      	cmp	r3, #29
 800a956:	d001      	beq.n	800a95c <__sflush_r+0xac>
 800a958:	2b16      	cmp	r3, #22
 800a95a:	d11d      	bne.n	800a998 <__sflush_r+0xe8>
 800a95c:	602f      	str	r7, [r5, #0]
 800a95e:	2000      	movs	r0, #0
 800a960:	e021      	b.n	800a9a6 <__sflush_r+0xf6>
 800a962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a966:	b21b      	sxth	r3, r3
 800a968:	e01a      	b.n	800a9a0 <__sflush_r+0xf0>
 800a96a:	690f      	ldr	r7, [r1, #16]
 800a96c:	2f00      	cmp	r7, #0
 800a96e:	d0f6      	beq.n	800a95e <__sflush_r+0xae>
 800a970:	0793      	lsls	r3, r2, #30
 800a972:	680e      	ldr	r6, [r1, #0]
 800a974:	600f      	str	r7, [r1, #0]
 800a976:	bf0c      	ite	eq
 800a978:	694b      	ldreq	r3, [r1, #20]
 800a97a:	2300      	movne	r3, #0
 800a97c:	eba6 0807 	sub.w	r8, r6, r7
 800a980:	608b      	str	r3, [r1, #8]
 800a982:	f1b8 0f00 	cmp.w	r8, #0
 800a986:	ddea      	ble.n	800a95e <__sflush_r+0xae>
 800a988:	4643      	mov	r3, r8
 800a98a:	463a      	mov	r2, r7
 800a98c:	6a21      	ldr	r1, [r4, #32]
 800a98e:	4628      	mov	r0, r5
 800a990:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a992:	47b0      	blx	r6
 800a994:	2800      	cmp	r0, #0
 800a996:	dc08      	bgt.n	800a9aa <__sflush_r+0xfa>
 800a998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	81a3      	strh	r3, [r4, #12]
 800a9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9aa:	4407      	add	r7, r0
 800a9ac:	eba8 0800 	sub.w	r8, r8, r0
 800a9b0:	e7e7      	b.n	800a982 <__sflush_r+0xd2>
 800a9b2:	bf00      	nop
 800a9b4:	dfbffffe 	.word	0xdfbffffe

0800a9b8 <_fflush_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	690b      	ldr	r3, [r1, #16]
 800a9bc:	4605      	mov	r5, r0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	b913      	cbnz	r3, 800a9c8 <_fflush_r+0x10>
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	b118      	cbz	r0, 800a9d2 <_fflush_r+0x1a>
 800a9ca:	6a03      	ldr	r3, [r0, #32]
 800a9cc:	b90b      	cbnz	r3, 800a9d2 <_fflush_r+0x1a>
 800a9ce:	f7ff fa9b 	bl	8009f08 <__sinit>
 800a9d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0f3      	beq.n	800a9c2 <_fflush_r+0xa>
 800a9da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9dc:	07d0      	lsls	r0, r2, #31
 800a9de:	d404      	bmi.n	800a9ea <_fflush_r+0x32>
 800a9e0:	0599      	lsls	r1, r3, #22
 800a9e2:	d402      	bmi.n	800a9ea <_fflush_r+0x32>
 800a9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9e6:	f7ff fb94 	bl	800a112 <__retarget_lock_acquire_recursive>
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f7ff ff5f 	bl	800a8b0 <__sflush_r>
 800a9f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	07da      	lsls	r2, r3, #31
 800a9f8:	d4e4      	bmi.n	800a9c4 <_fflush_r+0xc>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	059b      	lsls	r3, r3, #22
 800a9fe:	d4e1      	bmi.n	800a9c4 <_fflush_r+0xc>
 800aa00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa02:	f7ff fb87 	bl	800a114 <__retarget_lock_release_recursive>
 800aa06:	e7dd      	b.n	800a9c4 <_fflush_r+0xc>

0800aa08 <__swbuf_r>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	460e      	mov	r6, r1
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	4605      	mov	r5, r0
 800aa10:	b118      	cbz	r0, 800aa1a <__swbuf_r+0x12>
 800aa12:	6a03      	ldr	r3, [r0, #32]
 800aa14:	b90b      	cbnz	r3, 800aa1a <__swbuf_r+0x12>
 800aa16:	f7ff fa77 	bl	8009f08 <__sinit>
 800aa1a:	69a3      	ldr	r3, [r4, #24]
 800aa1c:	60a3      	str	r3, [r4, #8]
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	071a      	lsls	r2, r3, #28
 800aa22:	d501      	bpl.n	800aa28 <__swbuf_r+0x20>
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	b943      	cbnz	r3, 800aa3a <__swbuf_r+0x32>
 800aa28:	4621      	mov	r1, r4
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	f000 f82a 	bl	800aa84 <__swsetup_r>
 800aa30:	b118      	cbz	r0, 800aa3a <__swbuf_r+0x32>
 800aa32:	f04f 37ff 	mov.w	r7, #4294967295
 800aa36:	4638      	mov	r0, r7
 800aa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	b2f6      	uxtb	r6, r6
 800aa3e:	6922      	ldr	r2, [r4, #16]
 800aa40:	4637      	mov	r7, r6
 800aa42:	1a98      	subs	r0, r3, r2
 800aa44:	6963      	ldr	r3, [r4, #20]
 800aa46:	4283      	cmp	r3, r0
 800aa48:	dc05      	bgt.n	800aa56 <__swbuf_r+0x4e>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7ff ffb3 	bl	800a9b8 <_fflush_r>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d1ed      	bne.n	800aa32 <__swbuf_r+0x2a>
 800aa56:	68a3      	ldr	r3, [r4, #8]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	60a3      	str	r3, [r4, #8]
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	6022      	str	r2, [r4, #0]
 800aa62:	701e      	strb	r6, [r3, #0]
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	6962      	ldr	r2, [r4, #20]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d004      	beq.n	800aa76 <__swbuf_r+0x6e>
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	07db      	lsls	r3, r3, #31
 800aa70:	d5e1      	bpl.n	800aa36 <__swbuf_r+0x2e>
 800aa72:	2e0a      	cmp	r6, #10
 800aa74:	d1df      	bne.n	800aa36 <__swbuf_r+0x2e>
 800aa76:	4621      	mov	r1, r4
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7ff ff9d 	bl	800a9b8 <_fflush_r>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d0d9      	beq.n	800aa36 <__swbuf_r+0x2e>
 800aa82:	e7d6      	b.n	800aa32 <__swbuf_r+0x2a>

0800aa84 <__swsetup_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4b29      	ldr	r3, [pc, #164]	@ (800ab2c <__swsetup_r+0xa8>)
 800aa88:	4605      	mov	r5, r0
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	b118      	cbz	r0, 800aa98 <__swsetup_r+0x14>
 800aa90:	6a03      	ldr	r3, [r0, #32]
 800aa92:	b90b      	cbnz	r3, 800aa98 <__swsetup_r+0x14>
 800aa94:	f7ff fa38 	bl	8009f08 <__sinit>
 800aa98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa9c:	0719      	lsls	r1, r3, #28
 800aa9e:	d422      	bmi.n	800aae6 <__swsetup_r+0x62>
 800aaa0:	06da      	lsls	r2, r3, #27
 800aaa2:	d407      	bmi.n	800aab4 <__swsetup_r+0x30>
 800aaa4:	2209      	movs	r2, #9
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	e033      	b.n	800ab1c <__swsetup_r+0x98>
 800aab4:	0758      	lsls	r0, r3, #29
 800aab6:	d512      	bpl.n	800aade <__swsetup_r+0x5a>
 800aab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaba:	b141      	cbz	r1, 800aace <__swsetup_r+0x4a>
 800aabc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aac0:	4299      	cmp	r1, r3
 800aac2:	d002      	beq.n	800aaca <__swsetup_r+0x46>
 800aac4:	4628      	mov	r0, r5
 800aac6:	f7ff fb27 	bl	800a118 <_free_r>
 800aaca:	2300      	movs	r3, #0
 800aacc:	6363      	str	r3, [r4, #52]	@ 0x34
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	2300      	movs	r3, #0
 800aad8:	6063      	str	r3, [r4, #4]
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	f043 0308 	orr.w	r3, r3, #8
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	b94b      	cbnz	r3, 800aafe <__swsetup_r+0x7a>
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aaf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaf4:	d003      	beq.n	800aafe <__swsetup_r+0x7a>
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 f85c 	bl	800abb6 <__smakebuf_r>
 800aafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab02:	f013 0201 	ands.w	r2, r3, #1
 800ab06:	d00a      	beq.n	800ab1e <__swsetup_r+0x9a>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	60a2      	str	r2, [r4, #8]
 800ab0c:	6962      	ldr	r2, [r4, #20]
 800ab0e:	4252      	negs	r2, r2
 800ab10:	61a2      	str	r2, [r4, #24]
 800ab12:	6922      	ldr	r2, [r4, #16]
 800ab14:	b942      	cbnz	r2, 800ab28 <__swsetup_r+0xa4>
 800ab16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab1a:	d1c5      	bne.n	800aaa8 <__swsetup_r+0x24>
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	0799      	lsls	r1, r3, #30
 800ab20:	bf58      	it	pl
 800ab22:	6962      	ldrpl	r2, [r4, #20]
 800ab24:	60a2      	str	r2, [r4, #8]
 800ab26:	e7f4      	b.n	800ab12 <__swsetup_r+0x8e>
 800ab28:	2000      	movs	r0, #0
 800ab2a:	e7f7      	b.n	800ab1c <__swsetup_r+0x98>
 800ab2c:	2000002c 	.word	0x2000002c

0800ab30 <_sbrk_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	2300      	movs	r3, #0
 800ab34:	4d05      	ldr	r5, [pc, #20]	@ (800ab4c <_sbrk_r+0x1c>)
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f7 f8a8 	bl	8001c90 <_sbrk>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_sbrk_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_sbrk_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	20000994 	.word	0x20000994

0800ab50 <memchr>:
 800ab50:	b2c9      	uxtb	r1, r1
 800ab52:	4603      	mov	r3, r0
 800ab54:	4402      	add	r2, r0
 800ab56:	b510      	push	{r4, lr}
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	d101      	bne.n	800ab62 <memchr+0x12>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	e003      	b.n	800ab6a <memchr+0x1a>
 800ab62:	7804      	ldrb	r4, [r0, #0]
 800ab64:	3301      	adds	r3, #1
 800ab66:	428c      	cmp	r4, r1
 800ab68:	d1f6      	bne.n	800ab58 <memchr+0x8>
 800ab6a:	bd10      	pop	{r4, pc}

0800ab6c <__swhatbuf_r>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab74:	b096      	sub	sp, #88	@ 0x58
 800ab76:	4615      	mov	r5, r2
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	461e      	mov	r6, r3
 800ab7c:	da0c      	bge.n	800ab98 <__swhatbuf_r+0x2c>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	2100      	movs	r1, #0
 800ab82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab86:	bf14      	ite	ne
 800ab88:	2340      	movne	r3, #64	@ 0x40
 800ab8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab8e:	2000      	movs	r0, #0
 800ab90:	6031      	str	r1, [r6, #0]
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	b016      	add	sp, #88	@ 0x58
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	466a      	mov	r2, sp
 800ab9a:	f000 f849 	bl	800ac30 <_fstat_r>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	dbed      	blt.n	800ab7e <__swhatbuf_r+0x12>
 800aba2:	9901      	ldr	r1, [sp, #4]
 800aba4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aba8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abac:	4259      	negs	r1, r3
 800abae:	4159      	adcs	r1, r3
 800abb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abb4:	e7eb      	b.n	800ab8e <__swhatbuf_r+0x22>

0800abb6 <__smakebuf_r>:
 800abb6:	898b      	ldrh	r3, [r1, #12]
 800abb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abba:	079d      	lsls	r5, r3, #30
 800abbc:	4606      	mov	r6, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	d507      	bpl.n	800abd2 <__smakebuf_r+0x1c>
 800abc2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abc6:	6023      	str	r3, [r4, #0]
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	2301      	movs	r3, #1
 800abcc:	6163      	str	r3, [r4, #20]
 800abce:	b003      	add	sp, #12
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd2:	ab01      	add	r3, sp, #4
 800abd4:	466a      	mov	r2, sp
 800abd6:	f7ff ffc9 	bl	800ab6c <__swhatbuf_r>
 800abda:	9f00      	ldr	r7, [sp, #0]
 800abdc:	4605      	mov	r5, r0
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	f7ff fb05 	bl	800a1f0 <_malloc_r>
 800abe6:	b948      	cbnz	r0, 800abfc <__smakebuf_r+0x46>
 800abe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abec:	059a      	lsls	r2, r3, #22
 800abee:	d4ee      	bmi.n	800abce <__smakebuf_r+0x18>
 800abf0:	f023 0303 	bic.w	r3, r3, #3
 800abf4:	f043 0302 	orr.w	r3, r3, #2
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	e7e2      	b.n	800abc2 <__smakebuf_r+0xc>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	6020      	str	r0, [r4, #0]
 800ac00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	9b01      	ldr	r3, [sp, #4]
 800ac08:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac0c:	b15b      	cbz	r3, 800ac26 <__smakebuf_r+0x70>
 800ac0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac12:	4630      	mov	r0, r6
 800ac14:	f000 f81e 	bl	800ac54 <_isatty_r>
 800ac18:	b128      	cbz	r0, 800ac26 <__smakebuf_r+0x70>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	f023 0303 	bic.w	r3, r3, #3
 800ac20:	f043 0301 	orr.w	r3, r3, #1
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	431d      	orrs	r5, r3
 800ac2a:	81a5      	strh	r5, [r4, #12]
 800ac2c:	e7cf      	b.n	800abce <__smakebuf_r+0x18>
	...

0800ac30 <_fstat_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	2300      	movs	r3, #0
 800ac34:	4d06      	ldr	r5, [pc, #24]	@ (800ac50 <_fstat_r+0x20>)
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f7f6 fffe 	bl	8001c3e <_fstat>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d102      	bne.n	800ac4c <_fstat_r+0x1c>
 800ac46:	682b      	ldr	r3, [r5, #0]
 800ac48:	b103      	cbz	r3, 800ac4c <_fstat_r+0x1c>
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	bf00      	nop
 800ac50:	20000994 	.word	0x20000994

0800ac54 <_isatty_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	2300      	movs	r3, #0
 800ac58:	4d05      	ldr	r5, [pc, #20]	@ (800ac70 <_isatty_r+0x1c>)
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	f7f6 fffd 	bl	8001c5e <_isatty>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_isatty_r+0x1a>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_isatty_r+0x1a>
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	20000994 	.word	0x20000994

0800ac74 <_init>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	bf00      	nop
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr

0800ac80 <_fini>:
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	bf00      	nop
 800ac84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac86:	bc08      	pop	{r3}
 800ac88:	469e      	mov	lr, r3
 800ac8a:	4770      	bx	lr
