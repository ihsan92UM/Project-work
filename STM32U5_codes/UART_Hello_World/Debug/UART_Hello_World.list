
UART_Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006018  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006250  08006250  00007250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006360  08006360  00007360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006368  08006368  00007368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800636c  0800636c  0000736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000001d  20000000  08006370  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000174  20000020  0800638d  00008020  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000194  0800638d  00008194  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000801d  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011230  00000000  00000000  00008053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022e7  00000000  00000000  00019283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d08  00000000  00000000  0001b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009fd  00000000  00000000  0001c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002cf4e  00000000  00000000  0001cc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010be6  00000000  00000000  00049bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00119477  00000000  00000000  0005a7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00173c20  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003560  00000000  00000000  00173c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001771c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000020 	.word	0x20000020
 8000254:	00000000 	.word	0x00000000
 8000258:	08006238 	.word	0x08006238

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000024 	.word	0x20000024
 8000274:	08006238 	.word	0x08006238

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sendCapacitanceData>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t txBuffer[15];  // Buffer to hold the data to be sent

void sendCapacitanceData() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
    // Use uint16_t for values
    uint16_t values[6] = {1500, 1789, 872, 897, 782, 17};
 8000596:	4a1e      	ldr	r2, [pc, #120]	@ (8000610 <sendCapacitanceData+0x80>)
 8000598:	463b      	mov	r3, r7
 800059a:	ca07      	ldmia	r2, {r0, r1, r2}
 800059c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    txBuffer[0] = 0xAA;  // Start byte
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <sendCapacitanceData+0x84>)
 80005a2:	22aa      	movs	r2, #170	@ 0xaa
 80005a4:	701a      	strb	r2, [r3, #0]
    // Copy uint16_t values into the buffer as uint8_t bytes
    for (int i = 0; i < 6; i++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e01c      	b.n	80005e6 <sendCapacitanceData+0x56>
        txBuffer[1 + 2 * i] = (values[i] >> 8) & 0xFF;  // High byte
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	3310      	adds	r3, #16
 80005b2:	443b      	add	r3, r7
 80005b4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	3301      	adds	r3, #1
 80005c2:	b2d1      	uxtb	r1, r2
 80005c4:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <sendCapacitanceData+0x84>)
 80005c6:	54d1      	strb	r1, [r2, r3]
        txBuffer[2 + 2 * i] = values[i] & 0xFF;         // Low byte
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	3310      	adds	r3, #16
 80005ce:	443b      	add	r3, r7
 80005d0:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	b2d1      	uxtb	r1, r2
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <sendCapacitanceData+0x84>)
 80005de:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 6; i++) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	dddf      	ble.n	80005ac <sendCapacitanceData+0x1c>
    }

    txBuffer[13] = 0x55;  // End byte
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <sendCapacitanceData+0x84>)
 80005ee:	2255      	movs	r2, #85	@ 0x55
 80005f0:	735a      	strb	r2, [r3, #13]
    txBuffer[14] = 0x00;  // Optional: Checksum (e.g., XOR of all data bytes)
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <sendCapacitanceData+0x84>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	739a      	strb	r2, [r3, #14]

    // Send the data over UART
    HAL_UART_Transmit(&huart3, txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	220f      	movs	r2, #15
 80005fe:	4905      	ldr	r1, [pc, #20]	@ (8000614 <sendCapacitanceData+0x84>)
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <sendCapacitanceData+0x88>)
 8000602:	f005 f8a5 	bl	8005750 <HAL_UART_Transmit>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	08006250 	.word	0x08006250
 8000614:	200000e0 	.word	0x200000e0
 8000618:	2000004c 	.word	0x2000004c

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fbf2 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000624:	f000 f87b 	bl	800071e <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f830 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8e2 	bl	80007f4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000630:	f000 f881 	bl	8000736 <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 8000634:	f000 f892 	bl	800075c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fa4b 	bl	8000ad4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800063e:	2101      	movs	r1, #1
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fa83 	bl	8000b4c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <main+0x6c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <main+0x6c>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <main+0x6c>)
 8000656:	2200      	movs	r2, #0
 8000658:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <main+0x6c>)
 800065c:	2200      	movs	r2, #0
 800065e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <main+0x6c>)
 8000662:	2200      	movs	r2, #0
 8000664:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000666:	4908      	ldr	r1, [pc, #32]	@ (8000688 <main+0x6c>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fb09 	bl	8000c80 <BSP_COM_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x5c>
  {
    Error_Handler();
 8000674:	f000 f8e8 	bl	8000848 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sendCapacitanceData();
 8000678:	f7ff ff8a 	bl	8000590 <sendCapacitanceData>
	  HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000680:	f000 fc88 	bl	8000f94 <HAL_Delay>
	  sendCapacitanceData();
 8000684:	bf00      	nop
 8000686:	e7f7      	b.n	8000678 <main+0x5c>
 8000688:	2000003c 	.word	0x2000003c

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09e      	sub	sp, #120	@ 0x78
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2260      	movs	r2, #96	@ 0x60
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fda0 	bl	80061e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80006b0:	2000      	movs	r0, #0
 80006b2:	f001 f8b7 	bl	8001824 <HAL_PWREx_ControlVoltageScaling>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006bc:	f000 f8c4 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c0:	2310      	movs	r3, #16
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f97e 	bl	80019dc <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006e6:	f000 f8af 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	231f      	movs	r3, #31
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f844 	bl	8002794 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000712:	f000 f899 	bl	8000848 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3778      	adds	r7, #120	@ 0x78
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000722:	2002      	movs	r0, #2
 8000724:	f001 f90a 	bl	800193c <HAL_PWREx_ConfigSupply>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemPower_Config+0x14>
  {
    Error_Handler();
 800072e:	f000 f88b 	bl	8000848 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}

08000736 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800073a:	2000      	movs	r0, #0
 800073c:	f001 f842 	bl	80017c4 <HAL_ICACHE_ConfigAssociativityMode>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000746:	f000 f87f 	bl	8000848 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800074a:	f001 f85b 	bl	8001804 <HAL_ICACHE_Enable>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000754:	f000 f878 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000760:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000762:	4a23      	ldr	r2, [pc, #140]	@ (80007f0 <MX_USART3_UART_Init+0x94>)
 8000764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a4:	4811      	ldr	r0, [pc, #68]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007a6:	f004 ff83 	bl	80056b0 <HAL_UART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007b0:	f000 f84a 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007b8:	f005 fc48 	bl	800604c <HAL_UARTEx_SetTxFifoThreshold>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007c2:	f000 f841 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007ca:	f005 fc7d 	bl	80060c8 <HAL_UARTEx_SetRxFifoThreshold>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007d4:	f000 f838 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007da:	f005 fbfe 	bl	8005fda <HAL_UARTEx_DisableFifoMode>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007e4:	f000 f830 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000004c 	.word	0x2000004c
 80007f0:	40004800 	.word	0x40004800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_GPIO_Init+0x50>)
 80007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000800:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <MX_GPIO_Init+0x50>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_GPIO_Init+0x50>)
 800080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_GPIO_Init+0x50>)
 800081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800081e:	4a09      	ldr	r2, [pc, #36]	@ (8000844 <MX_GPIO_Init+0x50>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_GPIO_Init+0x50>)
 800082a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	46020c00 	.word	0x46020c00

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <HAL_MspInit+0x30>)
 800085c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000860:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <HAL_MspInit+0x30>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_MspInit+0x30>)
 800086c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	46020c00 	.word	0x46020c00

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0bc      	sub	sp, #240	@ 0xf0
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	22c0      	movs	r2, #192	@ 0xc0
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f005 fc99 	bl	80061e0 <memset>
  if(huart->Instance==USART3)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a38      	ldr	r2, [pc, #224]	@ (8000994 <HAL_UART_MspInit+0x10c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d169      	bne.n	800098c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008b8:	f04f 0204 	mov.w	r2, #4
 80008bc:	f04f 0300 	mov.w	r3, #0
 80008c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fb31 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80008d8:	f7ff ffb6 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_UART_MspInit+0x110>)
 80008de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80008e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000998 <HAL_UART_MspInit+0x110>)
 80008e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008e8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_UART_MspInit+0x110>)
 80008ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80008f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <HAL_UART_MspInit+0x110>)
 80008fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000900:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <HAL_UART_MspInit+0x110>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <HAL_UART_MspInit+0x110>)
 800090c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <HAL_UART_MspInit+0x110>)
 800091a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091e:	4a1e      	ldr	r2, [pc, #120]	@ (8000998 <HAL_UART_MspInit+0x110>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <HAL_UART_MspInit+0x110>)
 800092a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PA7     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000936:	2380      	movs	r3, #128	@ 0x80
 8000938:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2302      	movs	r3, #2
 800094a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800094e:	2307      	movs	r3, #7
 8000950:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000958:	4619      	mov	r1, r3
 800095a:	4810      	ldr	r0, [pc, #64]	@ (800099c <HAL_UART_MspInit+0x114>)
 800095c:	f000 fd5a 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000960:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000964:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800097a:	2307      	movs	r3, #7
 800097c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_UART_MspInit+0x118>)
 8000988:	f000 fd44 	bl	8001414 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800098c:	bf00      	nop
 800098e:	37f0      	adds	r7, #240	@ 0xf0
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40004800 	.word	0x40004800
 8000998:	46020c00 	.word	0x46020c00
 800099c:	42020000 	.word	0x42020000
 80009a0:	42020800 	.word	0x42020800

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fa:	f000 faab 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f918 	bl	8000c3c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <SystemInit+0x68>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a1a:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <SystemInit+0x68>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <SystemInit+0x6c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <SystemInit+0x6c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <SystemInit+0x6c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <SystemInit+0x6c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <SystemInit+0x6c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0e      	ldr	r2, [pc, #56]	@ (8000a7c <SystemInit+0x6c>)
 8000a42:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000a46:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000a4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <SystemInit+0x6c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <SystemInit+0x6c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a09      	ldr	r2, [pc, #36]	@ (8000a7c <SystemInit+0x6c>)
 8000a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <SystemInit+0x6c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <SystemInit+0x68>)
 8000a66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a6a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	46020c00 	.word	0x46020c00

08000a80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a84:	f7ff ffc4 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aae:	f005 fb9f 	bl	80061f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab2:	f7ff fdb3 	bl	800061c <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   r0, =_estack
 8000ab8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000001d 	.word	0x2000001d
  ldr r2, =_sidata
 8000ac4:	08006370 	.word	0x08006370
  ldr r2, =_sbss
 8000ac8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000acc:	20000194 	.word	0x20000194

08000ad0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_IRQHandler>
	...

08000ad4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ae8:	f06f 0301 	mvn.w	r3, #1
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aee:	e023      	b.n	8000b38 <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10e      	bne.n	8000b14 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <BSP_LED_Init+0x70>)
 8000af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000afc:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <BSP_LED_Init+0x70>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <BSP_LED_Init+0x70>)
 8000b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000b14:	2320      	movs	r3, #32
 8000b16:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <BSP_LED_Init+0x74>)
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fc6e 	bl	8001414 <HAL_GPIO_Init>
  }

  return ret;
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	46020c00 	.word	0x46020c00
 8000b48:	20000008 	.word	0x20000008

08000b4c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000b5c:	4b30      	ldr	r3, [pc, #192]	@ (8000c20 <BSP_PB_Init+0xd4>)
 8000b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b62:	4a2f      	ldr	r2, [pc, #188]	@ (8000c20 <BSP_PB_Init+0xd4>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <BSP_PB_Init+0xd4>)
 8000b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10c      	bne.n	8000ba8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4a23      	ldr	r2, [pc, #140]	@ (8000c24 <BSP_PB_Init+0xd8>)
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	f107 020c 	add.w	r2, r7, #12
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fc37 	bl	8001414 <HAL_GPIO_Init>
 8000ba6:	e036      	b.n	8000c16 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <BSP_PB_Init+0xdc>)
 8000baa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4a1d      	ldr	r2, [pc, #116]	@ (8000c24 <BSP_PB_Init+0xd8>)
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	f107 020c 	add.w	r2, r7, #12
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fc2a 	bl	8001414 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4a18      	ldr	r2, [pc, #96]	@ (8000c2c <BSP_PB_Init+0xe0>)
 8000bcc:	441a      	add	r2, r3
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4917      	ldr	r1, [pc, #92]	@ (8000c30 <BSP_PB_Init+0xe4>)
 8000bd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4610      	mov	r0, r2
 8000bda:	f000 fbbf 	bl	800135c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <BSP_PB_Init+0xe0>)
 8000bea:	1898      	adds	r0, r3, r2
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <BSP_PB_Init+0xe8>)
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f000 fb84 	bl	8001304 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000bfc:	2018      	movs	r0, #24
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <BSP_PB_Init+0xec>)
 8000c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f000 fa9f 	bl	800114c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000c0e:	2318      	movs	r3, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fab5 	bl	8001180 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	46020c00 	.word	0x46020c00
 8000c24:	2000000c 	.word	0x2000000c
 8000c28:	10110000 	.word	0x10110000
 8000c2c:	200000f0 	.word	0x200000f0
 8000c30:	080062b4 	.word	0x080062b4
 8000c34:	20000010 	.word	0x20000010
 8000c38:	20000014 	.word	0x20000014

08000c3c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <BSP_PB_IRQHandler+0x28>)
 8000c52:	4413      	add	r3, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fb95 	bl	8001384 <HAL_EXTI_IRQHandler>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000f0 	.word	0x200000f0

08000c68 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c96:	f06f 0301 	mvn.w	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e018      	b.n	8000cd0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2294      	movs	r2, #148	@ 0x94
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <BSP_COM_Init+0x5c>)
 8000ca8:	4413      	add	r3, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f854 	bl	8000d58 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2294      	movs	r2, #148	@ 0x94
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <BSP_COM_Init+0x5c>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f80e 	bl	8000ce0 <MX_USART1_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d002      	beq.n	8000cd0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000cca:	f06f 0303 	mvn.w	r3, #3
 8000cce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000fc 	.word	0x200000fc

08000ce0 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_USART1_Init+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	895b      	ldrh	r3, [r3, #10]
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	891b      	ldrh	r3, [r3, #8]
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	899b      	ldrh	r3, [r3, #12]
 8000d20:	461a      	mov	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d2c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f004 fcbb 	bl	80056b0 <HAL_UART_Init>
 8000d3a:	4603      	mov	r3, r0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000004 	.word	0x20000004

08000d48 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff8b 	bl	8000c68 <BSP_PB_Callback>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d66:	4a26      	ldr	r2, [pc, #152]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d84:	4a1e      	ldr	r2, [pc, #120]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000d9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000da2:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <COM1_MspInit+0xa8>)
 8000dae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dbe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <COM1_MspInit+0xac>)
 8000dd8:	f000 fb1c 	bl	8001414 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000de6:	2307      	movs	r3, #7
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <COM1_MspInit+0xac>)
 8000df2:	f000 fb0f 	bl	8001414 <HAL_GPIO_Init>
}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	46020c00 	.word	0x46020c00
 8000e04:	42020000 	.word	0x42020000

08000e08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_Init+0x50>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a11      	ldr	r2, [pc, #68]	@ (8000e58 <HAL_Init+0x50>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f98c 	bl	8001136 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e1e:	f001 feab 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <HAL_Init+0x54>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <HAL_Init+0x58>)
 8000e2e:	5ccb      	ldrb	r3, [r1, r3]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <HAL_Init+0x5c>)
 8000e36:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f000 f9d1 	bl	80011e0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f812 	bl	8000e68 <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e002      	b.n	8000e54 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4e:	f7ff fd01 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40022000 	.word	0x40022000
 8000e5c:	46020c00 	.word	0x46020c00
 8000e60:	0800625c 	.word	0x0800625c
 8000e64:	20000000 	.word	0x20000000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e74:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <HAL_InitTick+0xdc>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e05c      	b.n	8000f3a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000e80:	4b31      	ldr	r3, [pc, #196]	@ (8000f48 <HAL_InitTick+0xe0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d10c      	bne.n	8000ea6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f4c <HAL_InitTick+0xe4>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <HAL_InitTick+0xdc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	e037      	b.n	8000f16 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000ea6:	f000 f9f3 	bl	8001290 <HAL_SYSTICK_GetCLKSourceConfig>
 8000eaa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d023      	beq.n	8000efa <HAL_InitTick+0x92>
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d82d      	bhi.n	8000f14 <HAL_InitTick+0xac>
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_InitTick+0x5e>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ec4:	e026      	b.n	8000f14 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <HAL_InitTick+0xe4>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <HAL_InitTick+0xdc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000edc:	60fb      	str	r3, [r7, #12]
        break;
 8000ede:	e01a      	b.n	8000f16 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <HAL_InitTick+0xdc>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	60fb      	str	r3, [r7, #12]
        break;
 8000ef8:	e00d      	b.n	8000f16 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0xdc>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
        break;
 8000f12:	e000      	b.n	8000f16 <HAL_InitTick+0xae>
        break;
 8000f14:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f000 f940 	bl	800119c <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e009      	b.n	8000f3a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f26:	2200      	movs	r2, #0
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	f000 f90d 	bl	800114c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000f32:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <HAL_InitTick+0xe8>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000001c 	.word	0x2000001c
 8000f48:	e000e010 	.word	0xe000e010
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000018 	.word	0x20000018

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000001c 	.word	0x2000001c
 8000f78:	20000190 	.word	0x20000190

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000190 	.word	0x20000190

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000001c 	.word	0x2000001c

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	@ (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff4c 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800115a:	f7ff ff63 	bl	8001024 <__NVIC_GetPriorityGrouping>
 800115e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f7ff ffb3 	bl	80010d0 <NVIC_EncodePriority>
 800116a:	4602      	mov	r2, r0
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff82 	bl	800107c <__NVIC_SetPriority>
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff56 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00d      	b.n	80011ce <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_SYSTICK_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_SYSTICK_Config+0x40>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_SYSTICK_Config+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <HAL_SYSTICK_Config+0x40>)
 80011c6:	f043 0303 	orr.w	r3, r3, #3
 80011ca:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d844      	bhi.n	8001278 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80011ee:	a201      	add	r2, pc, #4	@ (adr r2, 80011f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	08001217 	.word	0x08001217
 80011f8:	08001235 	.word	0x08001235
 80011fc:	08001257 	.word	0x08001257
 8001200:	08001279 	.word	0x08001279
 8001204:	08001209 	.word	0x08001209
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6013      	str	r3, [r2, #0]
      break;
 8001214:	e031      	b.n	800127a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1b      	ldr	r2, [pc, #108]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800121c:	f023 0304 	bic.w	r3, r3, #4
 8001220:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	4a18      	ldr	r2, [pc, #96]	@ (800128c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800122a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001232:	e022      	b.n	800127a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800123a:	f023 0304 	bic.w	r3, r3, #4
 800123e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800124a:	4a10      	ldr	r2, [pc, #64]	@ (800128c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001254:	e011      	b.n	800127a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800126e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001276:	e000      	b.n	800127a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001278:	bf00      	nop
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010
 800128c:	46020c00 	.word	0x46020c00

08001290 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80012a2:	2304      	movs	r3, #4
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e021      	b.n	80012ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80012b2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80012ba:	d011      	beq.n	80012e0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80012c2:	d810      	bhi.n	80012e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012d0:	d003      	beq.n	80012da <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80012d2:	e008      	b.n	80012e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
        break;
 80012d8:	e008      	b.n	80012ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80012da:	2301      	movs	r3, #1
 80012dc:	607b      	str	r3, [r7, #4]
        break;
 80012de:	e005      	b.n	80012ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80012e0:	2302      	movs	r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
        break;
 80012e4:	e002      	b.n	80012ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
        break;
 80012ea:	bf00      	nop
    }
  }
  return systick_source;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010
 8001300:	46020c00 	.word	0x46020c00

08001304 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	460b      	mov	r3, r1
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d011      	beq.n	8001340 <HAL_EXTI_RegisterCallback+0x3c>
 800131c:	2b02      	cmp	r3, #2
 800131e:	dc13      	bgt.n	8001348 <HAL_EXTI_RegisterCallback+0x44>
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_EXTI_RegisterCallback+0x26>
 8001324:	2b01      	cmp	r3, #1
 8001326:	d007      	beq.n	8001338 <HAL_EXTI_RegisterCallback+0x34>
 8001328:	e00e      	b.n	8001348 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
      break;
 8001336:	e00a      	b.n	800134e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	605a      	str	r2, [r3, #4]
      break;
 800133e:	e006      	b.n	800134e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	609a      	str	r2, [r3, #8]
      break;
 8001346:	e002      	b.n	800134e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	75fb      	strb	r3, [r7, #23]
      break;
 800134c:	bf00      	nop
  }

  return status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e003      	b.n	8001378 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001376:	2300      	movs	r3, #0
  }
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	2201      	movs	r2, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	015a      	lsls	r2, r3, #5
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <HAL_EXTI_IRQHandler+0x88>)
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_EXTI_IRQHandler+0x8c>)
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4798      	blx	r3
    }
  }
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	4602200c 	.word	0x4602200c
 8001410:	46022010 	.word	0x46022010

08001414 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001426:	e1ba      	b.n	800179e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 81aa 	beq.w	8001798 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a55      	ldr	r2, [pc, #340]	@ (800159c <HAL_GPIO_Init+0x188>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d15d      	bne.n	8001508 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001452:	2201      	movs	r2, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	4013      	ands	r3, r2
 8001460:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	4313      	orrs	r3, r2
 8001474:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800147c:	4a48      	ldr	r2, [pc, #288]	@ (80015a0 <HAL_GPIO_Init+0x18c>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001484:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001486:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <HAL_GPIO_Init+0x18c>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3208      	adds	r2, #8
 800149a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220b      	movs	r2, #11
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2202      	movs	r2, #2
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e067      	b.n	80015d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x104>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d145      	bne.n	80015a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4013      	ands	r3, r2
 800153a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	f003 020f 	and.w	r2, r3, #15
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	4313      	orrs	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	69f9      	ldr	r1, [r7, #28]
 8001560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4013      	ands	r3, r2
 800157a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0203 	and.w	r2, r3, #3
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	4313      	orrs	r3, r2
 8001590:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <HAL_GPIO_Init+0x1c4>
 800159a:	bf00      	nop
 800159c:	46020000 	.word	0x46020000
 80015a0:	080062b8 	.word	0x080062b8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d00b      	beq.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ec:	2b11      	cmp	r3, #17
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d130      	bne.n	800165a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	4013      	ands	r3, r2
 800160e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	4313      	orrs	r3, r2
 8001620:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800162e:	2201      	movs	r2, #1
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	4013      	ands	r3, r2
 800163c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 0201 	and.w	r2, r3, #1
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4313      	orrs	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d017      	beq.n	8001692 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	4013      	ands	r3, r2
 8001678:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4313      	orrs	r3, r2
 800168a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d07c      	beq.n	8001798 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800169e:	4a47      	ldr	r2, [pc, #284]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3318      	adds	r3, #24
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	4013      	ands	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0a9a      	lsrs	r2, r3, #10
 80016c6:	4b3e      	ldr	r3, [pc, #248]	@ (80017c0 <HAL_GPIO_Init+0x3ac>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	00d2      	lsls	r2, r2, #3
 80016d2:	4093      	lsls	r3, r2
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80016da:	4938      	ldr	r1, [pc, #224]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3318      	adds	r3, #24
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016e8:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800170c:	4a2b      	ldr	r2, [pc, #172]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001712:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	4013      	ands	r3, r2
 8001720:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001736:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 800173e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001742:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	4013      	ands	r3, r2
 800174c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001762:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 800176c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001770:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	4013      	ands	r3, r2
 800177a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_GPIO_Init+0x3a8>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f ae3d 	bne.w	8001428 <HAL_GPIO_Init+0x14>
  }
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3724      	adds	r7, #36	@ 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	46022000 	.word	0x46022000
 80017c0:	002f7f7f 	.word	0x002f7f7f

080017c4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e007      	b.n	80017f2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0204 	bic.w	r2, r3, #4
 80017ea:	4905      	ldr	r1, [pc, #20]	@ (8001800 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40030400 	.word	0x40030400

08001804 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_ICACHE_Enable+0x1c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_ICACHE_Enable+0x1c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40030400 	.word	0x40030400

08001824 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800182c:	4b39      	ldr	r3, [pc, #228]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800182e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001830:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001834:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d10b      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d905      	bls.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001846:	4b33      	ldr	r3, [pc, #204]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	4a32      	ldr	r2, [pc, #200]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e057      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800185c:	d90a      	bls.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800185e:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4313      	orrs	r3, r2
 800186a:	4a2a      	ldr	r2, [pc, #168]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001870:	60d3      	str	r3, [r2, #12]
 8001872:	e007      	b.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001874:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800187c:	4925      	ldr	r1, [pc, #148]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001884:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a24      	ldr	r2, [pc, #144]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	2232      	movs	r2, #50	@ 0x32
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	4a21      	ldr	r2, [pc, #132]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80018a2:	e002      	b.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_PWREx_ControlVoltageScaling+0x98>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f3      	bne.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01b      	beq.n	80018fa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a15      	ldr	r2, [pc, #84]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	2232      	movs	r2, #50	@ 0x32
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	4a11      	ldr	r2, [pc, #68]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80018e0:	e002      	b.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f3      	bne.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e000      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	46020800 	.word	0x46020800
 8001918:	20000000 	.word	0x20000000
 800191c:	10624dd3 	.word	0x10624dd3

08001920 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <HAL_PWREx_GetVoltageRange+0x18>)
 8001926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	46020800 	.word	0x46020800

0800193c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001944:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_PWREx_ConfigSupply+0x94>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a22      	ldr	r2, [pc, #136]	@ (80019d4 <HAL_PWREx_ConfigSupply+0x98>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2232      	movs	r2, #50	@ 0x32
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	4a1f      	ldr	r2, [pc, #124]	@ (80019d4 <HAL_PWREx_ConfigSupply+0x98>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d113      	bne.n	8001990 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a1a      	ldr	r2, [pc, #104]	@ (80019d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001974:	e002      	b.n	800197c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3b01      	subs	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800197c:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800197e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d116      	bne.n	80019b6 <HAL_PWREx_ConfigSupply+0x7a>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f3      	bne.n	8001976 <HAL_PWREx_ConfigSupply+0x3a>
 800198e:	e012      	b.n	80019b6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_PWREx_ConfigSupply+0x9c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <HAL_PWREx_ConfigSupply+0x9c>)
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800199c:	e002      	b.n	80019a4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <HAL_PWREx_ConfigSupply+0x9c>)
 80019a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <HAL_PWREx_ConfigSupply+0x7a>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f3      	bne.n	800199e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e000      	b.n	80019c2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000000 	.word	0x20000000
 80019d4:	10624dd3 	.word	0x10624dd3
 80019d8:	46020800 	.word	0x46020800

080019dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	@ 0x38
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f000 bec8 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f6:	4b99      	ldr	r3, [pc, #612]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a00:	4b96      	ldr	r3, [pc, #600]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 816c 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_RCC_OscConfig+0x52>
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	f040 80de 	bne.w	8001be2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	f040 80da 	bne.w	8001be2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f000 bea5 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a40:	4b86      	ldr	r3, [pc, #536]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_RCC_OscConfig+0x7a>
 8001a4c:	4b83      	ldr	r3, [pc, #524]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001a54:	e005      	b.n	8001a62 <HAL_RCC_OscConfig+0x86>
 8001a56:	4b81      	ldr	r3, [pc, #516]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d255      	bcs.n	8001b12 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 f9d9 	bl	8002e28 <RCC_SetFlashLatencyFromMSIRange>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f000 be82 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001a82:	4b76      	ldr	r3, [pc, #472]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4a75      	ldr	r2, [pc, #468]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a8c:	6093      	str	r3, [r2, #8]
 8001a8e:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	4970      	ldr	r1, [pc, #448]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001aa8:	d309      	bcc.n	8001abe <HAL_RCC_OscConfig+0xe2>
 8001aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f023 021f 	bic.w	r2, r3, #31
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4969      	ldr	r1, [pc, #420]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e07e      	b.n	8001bbc <HAL_RCC_OscConfig+0x1e0>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da0a      	bge.n	8001adc <HAL_RCC_OscConfig+0x100>
 8001ac6:	4b65      	ldr	r3, [pc, #404]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	4961      	ldr	r1, [pc, #388]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60cb      	str	r3, [r1, #12]
 8001ada:	e06f      	b.n	8001bbc <HAL_RCC_OscConfig+0x1e0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae4:	d30a      	bcc.n	8001afc <HAL_RCC_OscConfig+0x120>
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4959      	ldr	r1, [pc, #356]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
 8001afa:	e05f      	b.n	8001bbc <HAL_RCC_OscConfig+0x1e0>
 8001afc:	4b57      	ldr	r3, [pc, #348]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	03db      	lsls	r3, r3, #15
 8001b0a:	4954      	ldr	r1, [pc, #336]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
 8001b10:	e054      	b.n	8001bbc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001b12:	4b52      	ldr	r3, [pc, #328]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4a51      	ldr	r2, [pc, #324]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b1c:	6093      	str	r3, [r2, #8]
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	494c      	ldr	r1, [pc, #304]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b38:	d309      	bcc.n	8001b4e <HAL_RCC_OscConfig+0x172>
 8001b3a:	4b48      	ldr	r3, [pc, #288]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f023 021f 	bic.w	r2, r3, #31
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4945      	ldr	r1, [pc, #276]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e028      	b.n	8001ba0 <HAL_RCC_OscConfig+0x1c4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da0a      	bge.n	8001b6c <HAL_RCC_OscConfig+0x190>
 8001b56:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	015b      	lsls	r3, r3, #5
 8001b64:	493d      	ldr	r1, [pc, #244]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60cb      	str	r3, [r1, #12]
 8001b6a:	e019      	b.n	8001ba0 <HAL_RCC_OscConfig+0x1c4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b74:	d30a      	bcc.n	8001b8c <HAL_RCC_OscConfig+0x1b0>
 8001b76:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4935      	ldr	r1, [pc, #212]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60cb      	str	r3, [r1, #12]
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0x1c4>
 8001b8c:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	03db      	lsls	r3, r3, #15
 8001b9a:	4930      	ldr	r1, [pc, #192]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10a      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 f93c 	bl	8002e28 <RCC_SetFlashLatencyFromMSIRange>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f000 bde5 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001bbc:	f001 f8de 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_RCC_OscConfig+0x284>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f94f 	bl	8000e68 <HAL_InitTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 808a 	beq.w	8001cee <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bde:	f000 bdd2 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d066      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001bea:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001bf6:	f7ff f9c1 	bl	8000f7c <HAL_GetTick>
 8001bfa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f9bd 	bl	8000f7c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d902      	bls.n	8001c12 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	f000 bdba 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0ef      	beq.n	8001bfe <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4a0e      	ldr	r2, [pc, #56]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c28:	6093      	str	r3, [r2, #8]
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	4909      	ldr	r1, [pc, #36]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c44:	d30e      	bcc.n	8001c64 <HAL_RCC_OscConfig+0x288>
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f023 021f 	bic.w	r2, r3, #31
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4902      	ldr	r1, [pc, #8]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
 8001c58:	e04a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x314>
 8001c5a:	bf00      	nop
 8001c5c:	46020c00 	.word	0x46020c00
 8001c60:	20000018 	.word	0x20000018
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da0a      	bge.n	8001c82 <HAL_RCC_OscConfig+0x2a6>
 8001c6c:	4b98      	ldr	r3, [pc, #608]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	015b      	lsls	r3, r3, #5
 8001c7a:	4995      	ldr	r1, [pc, #596]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
 8001c80:	e036      	b.n	8001cf0 <HAL_RCC_OscConfig+0x314>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8a:	d30a      	bcc.n	8001ca2 <HAL_RCC_OscConfig+0x2c6>
 8001c8c:	4b90      	ldr	r3, [pc, #576]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	029b      	lsls	r3, r3, #10
 8001c9a:	498d      	ldr	r1, [pc, #564]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e026      	b.n	8001cf0 <HAL_RCC_OscConfig+0x314>
 8001ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	03db      	lsls	r3, r3, #15
 8001cb0:	4987      	ldr	r1, [pc, #540]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60cb      	str	r3, [r1, #12]
 8001cb6:	e01b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001cb8:	4b85      	ldr	r3, [pc, #532]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a84      	ldr	r2, [pc, #528]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cc4:	f7ff f95a 	bl	8000f7c <HAL_GetTick>
 8001cc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001cca:	e009      	b.n	8001ce0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ccc:	f7ff f956 	bl	8000f7c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d902      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f000 bd53 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ef      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2f0>
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 808b 	beq.w	8001e14 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x334>
 8001d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d17d      	bne.n	8001e14 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f000 bd34 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x35a>
 8001d28:	4b69      	ldr	r3, [pc, #420]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e041      	b.n	8001dba <HAL_RCC_OscConfig+0x3de>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d3e:	d112      	bne.n	8001d66 <HAL_RCC_OscConfig+0x38a>
 8001d40:	4b63      	ldr	r3, [pc, #396]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a62      	ldr	r2, [pc, #392]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b60      	ldr	r3, [pc, #384]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a5f      	ldr	r2, [pc, #380]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e029      	b.n	8001dba <HAL_RCC_OscConfig+0x3de>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001d6e:	d112      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3ba>
 8001d70:	4b57      	ldr	r3, [pc, #348]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a56      	ldr	r2, [pc, #344]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b54      	ldr	r3, [pc, #336]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a53      	ldr	r2, [pc, #332]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b51      	ldr	r3, [pc, #324]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e011      	b.n	8001dba <HAL_RCC_OscConfig+0x3de>
 8001d96:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b48      	ldr	r3, [pc, #288]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a47      	ldr	r2, [pc, #284]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001db8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d014      	beq.n	8001dec <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f8db 	bl	8000f7c <HAL_GetTick>
 8001dc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dca:	f7ff f8d7 	bl	8000f7c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b64      	cmp	r3, #100	@ 0x64
 8001dd6:	d902      	bls.n	8001dde <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	f000 bcd4 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dde:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0ef      	beq.n	8001dca <HAL_RCC_OscConfig+0x3ee>
 8001dea:	e013      	b.n	8001e14 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001dec:	f7ff f8c6 	bl	8000f7c <HAL_GetTick>
 8001df0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df2:	e009      	b.n	8001e08 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff f8c2 	bl	8000f7c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	@ 0x64
 8001e00:	d902      	bls.n	8001e08 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	f000 bcbf 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ef      	bne.n	8001df4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d05f      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x456>
 8001e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d114      	bne.n	8001e56 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d111      	bne.n	8001e56 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f000 bca3 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	4920      	ldr	r1, [pc, #128]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e54:	e044      	b.n	8001ee0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d024      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e6a:	f7ff f887 	bl	8000f7c <HAL_GetTick>
 8001e6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff f883 	bl	8000f7c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d902      	bls.n	8001e86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f000 bc80 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ef      	beq.n	8001e72 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	490b      	ldr	r1, [pc, #44]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	610b      	str	r3, [r1, #16]
 8001ea6:	e01b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001eb4:	f7ff f862 	bl	8000f7c <HAL_GetTick>
 8001eb8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff f85e 	bl	8000f7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d904      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	f000 bc5b 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
 8001ed0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed4:	4baf      	ldr	r3, [pc, #700]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ed      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80c8 	beq.w	800207e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef4:	4ba7      	ldr	r3, [pc, #668]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4ba4      	ldr	r3, [pc, #656]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f08:	4aa2      	ldr	r2, [pc, #648]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f12:	4ba0      	ldr	r3, [pc, #640]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f26:	4b9c      	ldr	r3, [pc, #624]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d119      	bne.n	8001f66 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001f32:	4b99      	ldr	r3, [pc, #612]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	4a98      	ldr	r2, [pc, #608]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff f81d 	bl	8000f7c <HAL_GetTick>
 8001f42:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff f819 	bl	8000f7c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d902      	bls.n	8001f5a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	f000 bc16 	b.w	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ef      	beq.n	8001f46 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d05f      	beq.n	800202e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001f6e:	4b89      	ldr	r3, [pc, #548]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f74:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d037      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e3f4      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01b      	beq.n	8001fde <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fac:	4a79      	ldr	r2, [pc, #484]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001fae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001fb6:	f7fe ffe1 	bl	8000f7c <HAL_GetTick>
 8001fba:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7fe ffdd 	bl	8000f7c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e3da      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001fd0:	4b70      	ldr	r3, [pc, #448]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ef      	bne.n	8001fbe <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001fde:	4b6d      	ldr	r3, [pc, #436]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4969      	ldr	r1, [pc, #420]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001ff4:	4b67      	ldr	r3, [pc, #412]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ffa:	4a66      	ldr	r2, [pc, #408]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8001ffc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002000:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002004:	f7fe ffba 	bl	8000f7c <HAL_GetTick>
 8002008:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe ffb6 	bl	8000f7c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b05      	cmp	r3, #5
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e3b3      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800201e:	4b5d      	ldr	r3, [pc, #372]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ef      	beq.n	800200c <HAL_RCC_OscConfig+0x630>
 800202c:	e01b      	b.n	8002066 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b59      	ldr	r3, [pc, #356]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002034:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002036:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800203a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800203e:	f7fe ff9d 	bl	8000f7c <HAL_GetTick>
 8002042:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7fe ff99 	bl	8000f7c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b05      	cmp	r3, #5
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e396      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002058:	4b4e      	ldr	r3, [pc, #312]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 800205a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800205e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ef      	bne.n	8002046 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002066:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b49      	ldr	r3, [pc, #292]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	4a47      	ldr	r2, [pc, #284]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8111 	beq.w	80022ae <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b40      	ldr	r3, [pc, #256]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80020b0:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020c4:	4b34      	ldr	r3, [pc, #208]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80020d0:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 80020d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d4:	4a30      	ldr	r2, [pc, #192]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020dc:	f7fe ff4e 	bl	8000f7c <HAL_GetTick>
 80020e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7fe ff4a 	bl	8000f7c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e347      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020f6:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <HAL_RCC_OscConfig+0x7bc>)
 80020f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01f      	beq.n	800214e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 800211c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002120:	4a1c      	ldr	r2, [pc, #112]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 800212c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002130:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800213a:	e018      	b.n	800216e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 800213e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002142:	4a14      	ldr	r2, [pc, #80]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800214c:	e00f      	b.n	800216e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002154:	4a0f      	ldr	r2, [pc, #60]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002164:	4a0b      	ldr	r2, [pc, #44]	@ (8002194 <HAL_RCC_OscConfig+0x7b8>)
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d057      	beq.n	8002226 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002176:	f7fe ff01 	bl	8000f7c <HAL_GetTick>
 800217a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	e00e      	b.n	800219c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fefd 	bl	8000f7c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d905      	bls.n	800219c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e2f8      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
 8002194:	46020c00 	.word	0x46020c00
 8002198:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	4b9c      	ldr	r3, [pc, #624]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 800219e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0e9      	beq.n	800217e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01b      	beq.n	80021ee <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021b6:	4b96      	ldr	r3, [pc, #600]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80021b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021bc:	4a94      	ldr	r2, [pc, #592]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80021be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe fed8 	bl	8000f7c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e2d3      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80021de:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80021e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ed      	beq.n	80021c8 <HAL_RCC_OscConfig+0x7ec>
 80021ec:	e053      	b.n	8002296 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021ee:	4b88      	ldr	r3, [pc, #544]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80021f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021f4:	4a86      	ldr	r2, [pc, #536]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80021f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe febc 	bl	8000f7c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e2b7      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002216:	4b7e      	ldr	r3, [pc, #504]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800221c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ed      	bne.n	8002200 <HAL_RCC_OscConfig+0x824>
 8002224:	e037      	b.n	8002296 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002226:	f7fe fea9 	bl	8000f7c <HAL_GetTick>
 800222a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe fea5 	bl	8000f7c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e2a0      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002244:	4b72      	ldr	r3, [pc, #456]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ed      	bne.n	800222e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002252:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01a      	beq.n	8002296 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002260:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002266:	4a6a      	ldr	r2, [pc, #424]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002268:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800226c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fe83 	bl	8000f7c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e27e      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002288:	4b61      	ldr	r3, [pc, #388]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 800228a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800228e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ed      	bne.n	8002272 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002296:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b5c      	ldr	r3, [pc, #368]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80022a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d036      	beq.n	8002328 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80022c2:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a52      	ldr	r2, [pc, #328]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80022c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80022ce:	f7fe fe55 	bl	8000f7c <HAL_GetTick>
 80022d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d6:	f7fe fe51 	bl	8000f7c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e24e      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80022e8:	4b49      	ldr	r3, [pc, #292]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x8fa>
 80022f4:	e018      	b.n	8002328 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80022f6:	4b46      	ldr	r3, [pc, #280]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a45      	ldr	r2, [pc, #276]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80022fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002300:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002302:	f7fe fe3b 	bl	8000f7c <HAL_GetTick>
 8002306:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230a:	f7fe fe37 	bl	8000f7c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e234      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800231c:	4b3c      	ldr	r3, [pc, #240]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002330:	2b00      	cmp	r3, #0
 8002332:	d036      	beq.n	80023a2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	2b00      	cmp	r3, #0
 800233a:	d019      	beq.n	8002370 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002346:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002348:	f7fe fe18 	bl	8000f7c <HAL_GetTick>
 800234c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002350:	f7fe fe14 	bl	8000f7c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e211      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002362:	4b2b      	ldr	r3, [pc, #172]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x974>
 800236e:	e018      	b.n	80023a2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002370:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800237a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800237c:	f7fe fdfe 	bl	8000f7c <HAL_GetTick>
 8002380:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002384:	f7fe fdfa 	bl	8000f7c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1f7      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002396:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d07f      	beq.n	80024ae <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d062      	beq.n	800247c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80023b6:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4a15      	ldr	r2, [pc, #84]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80023bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023c0:	6093      	str	r3, [r2, #8]
 80023c2:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	4910      	ldr	r1, [pc, #64]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023dc:	d309      	bcc.n	80023f2 <HAL_RCC_OscConfig+0xa16>
 80023de:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 021f 	bic.w	r2, r3, #31
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4909      	ldr	r1, [pc, #36]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60cb      	str	r3, [r1, #12]
 80023f0:	e02a      	b.n	8002448 <HAL_RCC_OscConfig+0xa6c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	da0c      	bge.n	8002414 <HAL_RCC_OscConfig+0xa38>
 80023fa:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	015b      	lsls	r3, r3, #5
 8002408:	4901      	ldr	r1, [pc, #4]	@ (8002410 <HAL_RCC_OscConfig+0xa34>)
 800240a:	4313      	orrs	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0xa6c>
 8002410:	46020c00 	.word	0x46020c00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241c:	d30a      	bcc.n	8002434 <HAL_RCC_OscConfig+0xa58>
 800241e:	4ba1      	ldr	r3, [pc, #644]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	029b      	lsls	r3, r3, #10
 800242c:	499d      	ldr	r1, [pc, #628]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800242e:	4313      	orrs	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]
 8002432:	e009      	b.n	8002448 <HAL_RCC_OscConfig+0xa6c>
 8002434:	4b9b      	ldr	r3, [pc, #620]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	03db      	lsls	r3, r3, #15
 8002442:	4998      	ldr	r1, [pc, #608]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002448:	4b96      	ldr	r3, [pc, #600]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a95      	ldr	r2, [pc, #596]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002454:	f7fe fd92 	bl	8000f7c <HAL_GetTick>
 8002458:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800245c:	f7fe fd8e 	bl	8000f7c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e18b      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800246e:	4b8d      	ldr	r3, [pc, #564]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0xa80>
 800247a:	e018      	b.n	80024ae <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800247c:	4b89      	ldr	r3, [pc, #548]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a88      	ldr	r2, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002482:	f023 0310 	bic.w	r3, r3, #16
 8002486:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002488:	f7fe fd78 	bl	8000f7c <HAL_GetTick>
 800248c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002490:	f7fe fd74 	bl	8000f7c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e171      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80024a2:	4b80      	ldr	r3, [pc, #512]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8166 	beq.w	8002784 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024be:	4b79      	ldr	r3, [pc, #484]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	f000 80f2 	beq.w	80026b0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	f040 80c5 	bne.w	8002660 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b73      	ldr	r3, [pc, #460]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a72      	ldr	r2, [pc, #456]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80024dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024e2:	f7fe fd4b 	bl	8000f7c <HAL_GetTick>
 80024e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fd47 	bl	8000f7c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e144      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024fc:	4b69      	ldr	r3, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002508:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d111      	bne.n	800253a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800251c:	4a61      	ldr	r2, [pc, #388]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002526:	4b5f      	ldr	r3, [pc, #380]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800253a:	4b5b      	ldr	r3, [pc, #364]	@ (80026a8 <HAL_RCC_OscConfig+0xccc>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002542:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002546:	d102      	bne.n	800254e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800254e:	4b56      	ldr	r3, [pc, #344]	@ (80026a8 <HAL_RCC_OscConfig+0xccc>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	4a55      	ldr	r2, [pc, #340]	@ (80026a8 <HAL_RCC_OscConfig+0xccc>)
 8002554:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002558:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800255a:	4b52      	ldr	r3, [pc, #328]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800256e:	3a01      	subs	r2, #1
 8002570:	0212      	lsls	r2, r2, #8
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002578:	430a      	orrs	r2, r1
 800257a:	494a      	ldr	r1, [pc, #296]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 800257c:	4313      	orrs	r3, r2
 800257e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002580:	4b48      	ldr	r3, [pc, #288]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002584:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <HAL_RCC_OscConfig+0xcd0>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800258c:	3a01      	subs	r2, #1
 800258e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002596:	3a01      	subs	r2, #1
 8002598:	0252      	lsls	r2, r2, #9
 800259a:	b292      	uxth	r2, r2
 800259c:	4311      	orrs	r1, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025a2:	3a01      	subs	r2, #1
 80025a4:	0412      	lsls	r2, r2, #16
 80025a6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0612      	lsls	r2, r2, #24
 80025b4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80025b8:	430a      	orrs	r2, r1
 80025ba:	493a      	ldr	r1, [pc, #232]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80025c0:	4b38      	ldr	r3, [pc, #224]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	4a37      	ldr	r2, [pc, #220]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025c6:	f023 0310 	bic.w	r3, r3, #16
 80025ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	4a34      	ldr	r2, [pc, #208]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80025d6:	4b33      	ldr	r3, [pc, #204]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	4a32      	ldr	r2, [pc, #200]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80025e2:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	f023 020c 	bic.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	492d      	ldr	r1, [pc, #180]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80025f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80025fc:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <HAL_RCC_OscConfig+0xccc>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a29      	ldr	r2, [pc, #164]	@ (80026a8 <HAL_RCC_OscConfig+0xccc>)
 8002602:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002606:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002608:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002620:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1f      	ldr	r2, [pc, #124]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800262c:	f7fe fca6 	bl	8000f7c <HAL_GetTick>
 8002630:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fca2 	bl	8000f7c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e09f      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002646:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265c:	6293      	str	r3, [r2, #40]	@ 0x28
 800265e:	e091      	b.n	8002784 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800266c:	f7fe fc86 	bl	8000f7c <HAL_GetTick>
 8002670:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fc82 	bl	8000f7c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e07f      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	4a03      	ldr	r2, [pc, #12]	@ (80026a4 <HAL_RCC_OscConfig+0xcc8>)
 8002698:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800269c:	f023 0303 	bic.w	r3, r3, #3
 80026a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80026a2:	e06f      	b.n	8002784 <HAL_RCC_OscConfig+0xda8>
 80026a4:	46020c00 	.word	0x46020c00
 80026a8:	46020800 	.word	0x46020800
 80026ac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80026b0:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026b6:	4b36      	ldr	r3, [pc, #216]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 80026b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d039      	beq.n	8002738 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d132      	bne.n	8002738 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d129      	bne.n	8002738 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d122      	bne.n	8002738 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d11a      	bne.n	8002738 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	0a5b      	lsrs	r3, r3, #9
 8002706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d111      	bne.n	8002738 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002720:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	0e1b      	lsrs	r3, r3, #24
 800272a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002732:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e024      	b.n	8002786 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800273c:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800274a:	429a      	cmp	r2, r3
 800274c:	d01a      	beq.n	8002784 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	4a0f      	ldr	r2, [pc, #60]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 8002754:	f023 0310 	bic.w	r3, r3, #16
 8002758:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fc0f 	bl	8000f7c <HAL_GetTick>
 800275e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002760:	bf00      	nop
 8002762:	f7fe fc0b 	bl	8000f7c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	4293      	cmp	r3, r2
 800276c:	d0f9      	beq.n	8002762 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002772:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_RCC_OscConfig+0xdb4>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3738      	adds	r7, #56	@ 0x38
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	46020c00 	.word	0x46020c00

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e1d9      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a18 <HAL_RCC_ClockConfig+0x284>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d910      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b98      	ldr	r3, [pc, #608]	@ (8002a18 <HAL_RCC_ClockConfig+0x284>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	4996      	ldr	r1, [pc, #600]	@ (8002a18 <HAL_RCC_ClockConfig+0x284>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b94      	ldr	r3, [pc, #592]	@ (8002a18 <HAL_RCC_ClockConfig+0x284>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e1c1      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d908      	bls.n	8002806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80027f4:	4b89      	ldr	r3, [pc, #548]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4986      	ldr	r1, [pc, #536]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002802:	4313      	orrs	r3, r2
 8002804:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	4b81      	ldr	r3, [pc, #516]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002820:	429a      	cmp	r2, r3
 8002822:	d909      	bls.n	8002838 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002824:	4b7d      	ldr	r3, [pc, #500]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	497a      	ldr	r1, [pc, #488]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002834:	4313      	orrs	r3, r2
 8002836:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b74      	ldr	r3, [pc, #464]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002850:	429a      	cmp	r2, r3
 8002852:	d908      	bls.n	8002866 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b71      	ldr	r3, [pc, #452]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	496e      	ldr	r1, [pc, #440]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002862:	4313      	orrs	r3, r2
 8002864:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4b69      	ldr	r3, [pc, #420]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	429a      	cmp	r2, r3
 8002880:	d908      	bls.n	8002894 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002882:	4b66      	ldr	r3, [pc, #408]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 020f 	bic.w	r2, r3, #15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4963      	ldr	r1, [pc, #396]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002890:	4313      	orrs	r3, r2
 8002892:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80d2 	beq.w	8002a46 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d143      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b5b      	ldr	r3, [pc, #364]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d110      	bne.n	80028de <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b57      	ldr	r3, [pc, #348]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c2:	4a56      	ldr	r2, [pc, #344]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80028cc:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80028de:	f7fe fb4d 	bl	8000f7c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80028e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002a20 <HAL_RCC_ClockConfig+0x28c>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00f      	beq.n	8002910 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80028f2:	f7fe fb43 	bl	8000f7c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e12b      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002904:	4b46      	ldr	r3, [pc, #280]	@ (8002a20 <HAL_RCC_ClockConfig+0x28c>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4b41      	ldr	r3, [pc, #260]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291c:	4a3f      	ldr	r2, [pc, #252]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 800291e:	f023 0304 	bic.w	r3, r3, #4
 8002922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002926:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d121      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e112      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293e:	4b37      	ldr	r3, [pc, #220]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d115      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e106      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0fa      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002966:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0f2      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4926      	ldr	r1, [pc, #152]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002984:	4313      	orrs	r3, r2
 8002986:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002988:	f7fe faf8 	bl	8000f7c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d112      	bne.n	80029bc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe faf0 	bl	8000f7c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e0d6      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d1ee      	bne.n	8002998 <HAL_RCC_ClockConfig+0x204>
 80029ba:	e044      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d112      	bne.n	80029ea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c6:	f7fe fad9 	bl	8000f7c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e0bf      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029dc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_ClockConfig+0x232>
 80029e8:	e02d      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d123      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fe fac2 	bl	8000f7c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0a8      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a0a:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ee      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x260>
 8002a16:	e016      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2b2>
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	46020c00 	.word	0x46020c00
 8002a20:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f7fe faaa 	bl	8000f7c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e090      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d1ee      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d208      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002a62:	4b40      	ldr	r3, [pc, #256]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 020f 	bic.w	r2, r3, #15
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	493d      	ldr	r1, [pc, #244]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b3c      	ldr	r3, [pc, #240]	@ (8002b68 <HAL_RCC_ClockConfig+0x3d4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d210      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b39      	ldr	r3, [pc, #228]	@ (8002b68 <HAL_RCC_ClockConfig+0x3d4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	4937      	ldr	r1, [pc, #220]	@ (8002b68 <HAL_RCC_ClockConfig+0x3d4>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <HAL_RCC_ClockConfig+0x3d4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e05b      	b.n	8002b5c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d208      	bcs.n	8002ad2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4925      	ldr	r1, [pc, #148]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d209      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002af0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	4919      	ldr	r1, [pc, #100]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d208      	bcs.n	8002b32 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002b20:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	490d      	ldr	r1, [pc, #52]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b32:	f000 f821 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_RCC_ClockConfig+0x3d0>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	490a      	ldr	r1, [pc, #40]	@ (8002b6c <HAL_RCC_ClockConfig+0x3d8>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x3dc>)
 8002b4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_ClockConfig+0x3e0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f989 	bl	8000e68 <HAL_InitTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	46020c00 	.word	0x46020c00
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	0800625c 	.word	0x0800625c
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000018 	.word	0x20000018

08002b78 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	@ 0x2c
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	4b78      	ldr	r3, [pc, #480]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b90:	4b75      	ldr	r3, [pc, #468]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x34>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d121      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d11e      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002bac:	4b6e      	ldr	r3, [pc, #440]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002bb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bbe:	0b1b      	lsrs	r3, r3, #12
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002bc8:	4b67      	ldr	r3, [pc, #412]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	0f1b      	lsrs	r3, r3, #28
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bd4:	4a65      	ldr	r2, [pc, #404]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d110      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002be8:	e00d      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bea:	4b5f      	ldr	r3, [pc, #380]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bf6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	e004      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c02:	4b5b      	ldr	r3, [pc, #364]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002c04:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	f040 80a5 	bne.w	8002d58 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002c0e:	4b56      	ldr	r3, [pc, #344]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002c18:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3301      	adds	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002c26:	4b50      	ldr	r3, [pc, #320]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c32:	4b4d      	ldr	r3, [pc, #308]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d003      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0xe4>
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d022      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x128>
 8002c5a:	e043      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c66:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002d74 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c7e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002c82:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002d78 <HAL_RCC_GetSysClockFreq+0x200>
 8002c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c9e:	e046      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002caa:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002d74 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002cc2:	ed97 6a01 	vldr	s12, [r7, #4]
 8002cc6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002d78 <HAL_RCC_GetSysClockFreq+0x200>
 8002cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ce2:	e024      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002d10:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002d78 <HAL_RCC_GetSysClockFreq+0x200>
 8002d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d2c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	0e1b      	lsrs	r3, r3, #24
 8002d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d38:	3301      	adds	r3, #1
 8002d3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d52:	ee17 3a90 	vmov	r3, s15
 8002d56:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002d58:	6a3b      	ldr	r3, [r7, #32]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	372c      	adds	r7, #44	@ 0x2c
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	46020c00 	.word	0x46020c00
 8002d6c:	08006274 	.word	0x08006274
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	4b742400 	.word	0x4b742400
 8002d78:	46000000 	.word	0x46000000

08002d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d80:	f7ff fefa 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <HAL_RCC_GetHCLKFreq+0x28>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	4906      	ldr	r1, [pc, #24]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002d90:	5ccb      	ldrb	r3, [r1, r3]
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x30>)
 8002d98:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002d9a:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x30>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	46020c00 	.word	0x46020c00
 8002da8:	0800625c 	.word	0x0800625c
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002db4:	f7ff ffe2 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	46020c00 	.word	0x46020c00
 8002dd4:	0800626c 	.word	0x0800626c

08002dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002ddc:	f7ff ffce 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	@ (8002dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	46020c00 	.word	0x46020c00
 8002dfc:	0800626c 	.word	0x0800626c

08002e00 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002e04:	f7ff ffba 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	46020c00 	.word	0x46020c00
 8002e24:	0800626c 	.word	0x0800626c

08002e28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e30:	4b3e      	ldr	r3, [pc, #248]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e3e:	f7fe fd6f 	bl	8001920 <HAL_PWREx_GetVoltageRange>
 8002e42:	6178      	str	r0, [r7, #20]
 8002e44:	e019      	b.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4c:	4a37      	ldr	r2, [pc, #220]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e56:	4b35      	ldr	r3, [pc, #212]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e64:	f7fe fd5c 	bl	8001920 <HAL_PWREx_GetVoltageRange>
 8002e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e6a:	4b30      	ldr	r3, [pc, #192]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e70:	4a2e      	ldr	r2, [pc, #184]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002e72:	f023 0304 	bic.w	r3, r3, #4
 8002e76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e80:	d003      	beq.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e88:	d109      	bne.n	8002e9e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e90:	d202      	bcs.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002e92:	2301      	movs	r3, #1
 8002e94:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002e96:	e033      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002e9c:	e030      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ea4:	d208      	bcs.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eac:	d102      	bne.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002eae:	2303      	movs	r3, #3
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	e025      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e035      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ebe:	d90f      	bls.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ecc:	d902      	bls.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e015      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	e012      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e00f      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ee6:	d109      	bne.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eee:	d102      	bne.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e004      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e001      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 020f 	bic.w	r2, r3, #15
 8002f08:	4909      	ldr	r1, [pc, #36]	@ (8002f30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002f10:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	46020c00 	.word	0x46020c00
 8002f30:	40022000 	.word	0x40022000

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f38:	b0b6      	sub	sp, #216	@ 0xd8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f002 0401 	and.w	r4, r2, #1
 8002f58:	2500      	movs	r5, #0
 8002f5a:	ea54 0305 	orrs.w	r3, r4, r5
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002f60:	4bc5      	ldr	r3, [pc, #788]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f66:	f023 0103 	bic.w	r1, r3, #3
 8002f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f70:	4ac1      	ldr	r2, [pc, #772]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f72:	430b      	orrs	r3, r1
 8002f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f002 0804 	and.w	r8, r2, #4
 8002f84:	f04f 0900 	mov.w	r9, #0
 8002f88:	ea58 0309 	orrs.w	r3, r8, r9
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002f8e:	4bba      	ldr	r3, [pc, #744]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	4ab6      	ldr	r2, [pc, #728]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f002 0a08 	and.w	sl, r2, #8
 8002fb2:	f04f 0b00 	mov.w	fp, #0
 8002fb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002fbc:	4bae      	ldr	r3, [pc, #696]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	4aaa      	ldr	r2, [pc, #680]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f002 0310 	and.w	r3, r2, #16
 8002fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002fea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	d00b      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002ff4:	4ba0      	ldr	r3, [pc, #640]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ffe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	4a9c      	ldr	r2, [pc, #624]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003006:	430b      	orrs	r3, r1
 8003008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800300c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f002 0320 	and.w	r3, r2, #32
 8003018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003022:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003026:	460b      	mov	r3, r1
 8003028:	4313      	orrs	r3, r2
 800302a:	d00b      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800302c:	4b92      	ldr	r3, [pc, #584]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800302e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003032:	f023 0107 	bic.w	r1, r3, #7
 8003036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800303a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303c:	4a8e      	ldr	r2, [pc, #568]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800303e:	430b      	orrs	r3, r1
 8003040:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800305a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800305e:	460b      	mov	r3, r1
 8003060:	4313      	orrs	r3, r2
 8003062:	d00b      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003064:	4b84      	ldr	r3, [pc, #528]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800306a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800306e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003074:	4a80      	ldr	r2, [pc, #512]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003076:	430b      	orrs	r3, r1
 8003078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800307c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003088:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003092:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003096:	460b      	mov	r3, r1
 8003098:	4313      	orrs	r3, r2
 800309a:	d00b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800309c:	4b76      	ldr	r3, [pc, #472]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800309e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ac:	4a72      	ldr	r2, [pc, #456]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030ae:	430b      	orrs	r3, r1
 80030b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80030c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80030ce:	460b      	mov	r3, r1
 80030d0:	4313      	orrs	r3, r2
 80030d2:	d00b      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80030d4:	4b68      	ldr	r3, [pc, #416]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e4:	4a64      	ldr	r2, [pc, #400]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80030f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003102:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003106:	460b      	mov	r3, r1
 8003108:	4313      	orrs	r3, r2
 800310a:	d00b      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800310c:	4b5a      	ldr	r3, [pc, #360]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003112:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	4a56      	ldr	r2, [pc, #344]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800311e:	430b      	orrs	r3, r1
 8003120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800313a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800313e:	460b      	mov	r3, r1
 8003140:	4313      	orrs	r3, r2
 8003142:	d00b      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003144:	4b4c      	ldr	r3, [pc, #304]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800314a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800314e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003154:	4a48      	ldr	r2, [pc, #288]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003156:	430b      	orrs	r3, r1
 8003158:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003172:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003176:	460b      	mov	r3, r1
 8003178:	4313      	orrs	r3, r2
 800317a:	d00b      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800317c:	4b3e      	ldr	r3, [pc, #248]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800317e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003182:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800318a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800318c:	4a3a      	ldr	r2, [pc, #232]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800318e:	430b      	orrs	r3, r1
 8003190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80031a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031a2:	2300      	movs	r3, #0
 80031a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80031aa:	460b      	mov	r3, r1
 80031ac:	4313      	orrs	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80031b0:	4b31      	ldr	r3, [pc, #196]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80031b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80031c2:	430b      	orrs	r3, r1
 80031c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80031d6:	2300      	movs	r3, #0
 80031d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80031da:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d04f      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80031e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ec:	2b80      	cmp	r3, #128	@ 0x80
 80031ee:	d02d      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80031f0:	2b80      	cmp	r3, #128	@ 0x80
 80031f2:	d827      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80031f4:	2b60      	cmp	r3, #96	@ 0x60
 80031f6:	d02b      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80031f8:	2b60      	cmp	r3, #96	@ 0x60
 80031fa:	d823      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80031fc:	2b40      	cmp	r3, #64	@ 0x40
 80031fe:	d006      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003200:	2b40      	cmp	r3, #64	@ 0x40
 8003202:	d81f      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003208:	2b20      	cmp	r3, #32
 800320a:	d011      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800320c:	e01a      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800320e:	4b1a      	ldr	r3, [pc, #104]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	4a19      	ldr	r2, [pc, #100]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800321a:	e01a      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800321c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003220:	3308      	adds	r3, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f002 f914 	bl	8005450 <RCCEx_PLL2_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800322e:	e010      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003234:	332c      	adds	r3, #44	@ 0x2c
 8003236:	4618      	mov	r0, r3
 8003238:	f002 f9a2 	bl	8005580 <RCCEx_PLL3_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003242:	e006      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d110      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800325c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003260:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800326c:	4a02      	ldr	r2, [pc, #8]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800326e:	430b      	orrs	r3, r1
 8003270:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003274:	e006      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003276:	bf00      	nop
 8003278:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003280:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003292:	2300      	movs	r3, #0
 8003294:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003296:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800329a:	460b      	mov	r3, r1
 800329c:	4313      	orrs	r3, r2
 800329e:	d046      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80032a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032ac:	d028      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80032ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032b2:	d821      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80032b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032b8:	d022      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80032ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032be:	d81b      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80032c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032c4:	d01c      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80032c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032ca:	d815      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80032cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d0:	d008      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d6:	d80f      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d011      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e0:	d00e      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80032e2:	e009      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032e8:	3308      	adds	r3, #8
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 f8b0 	bl	8005450 <RCCEx_PLL2_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80032f6:	e004      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003302:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800330a:	4bb6      	ldr	r3, [pc, #728]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800330c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003310:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800331c:	4ab1      	ldr	r2, [pc, #708]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800331e:	430b      	orrs	r3, r1
 8003320:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003326:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800332a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800332e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800333a:	663b      	str	r3, [r7, #96]	@ 0x60
 800333c:	2300      	movs	r3, #0
 800333e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003340:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003344:	460b      	mov	r3, r1
 8003346:	4313      	orrs	r3, r2
 8003348:	d03e      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800334a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003352:	2b04      	cmp	r3, #4
 8003354:	d81d      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	0800339b 	.word	0x0800339b
 8003360:	08003371 	.word	0x08003371
 8003364:	0800337f 	.word	0x0800337f
 8003368:	0800339b 	.word	0x0800339b
 800336c:	0800339b 	.word	0x0800339b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003370:	4b9c      	ldr	r3, [pc, #624]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	4a9b      	ldr	r2, [pc, #620]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800337c:	e00e      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800337e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003382:	332c      	adds	r3, #44	@ 0x2c
 8003384:	4618      	mov	r0, r3
 8003386:	f002 f8fb 	bl	8005580 <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003390:	e004      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 800339a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800339c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80033a4:	4b8f      	ldr	r3, [pc, #572]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033aa:	f023 0107 	bic.w	r1, r3, #7
 80033ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b6:	4a8b      	ldr	r2, [pc, #556]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033be:	e003      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80033c4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80033c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033d6:	2300      	movs	r3, #0
 80033d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d04a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80033e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f0:	d028      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80033f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f6:	d821      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80033f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033fc:	d024      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003402:	d81b      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003408:	d00e      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800340a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800340e:	d815      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003418:	d110      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800341a:	4b72      	ldr	r3, [pc, #456]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	4a71      	ldr	r2, [pc, #452]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003424:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003426:	e012      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800342c:	332c      	adds	r3, #44	@ 0x2c
 800342e:	4618      	mov	r0, r3
 8003430:	f002 f8a6 	bl	8005580 <RCCEx_PLL3_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800343a:	e008      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003442:	e004      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003444:	bf00      	nop
 8003446:	e002      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003448:	bf00      	nop
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800344c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800344e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003456:	4b63      	ldr	r3, [pc, #396]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800345c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	4a5e      	ldr	r2, [pc, #376]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800346a:	430b      	orrs	r3, r1
 800346c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003472:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003476:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800347a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003486:	653b      	str	r3, [r7, #80]	@ 0x50
 8003488:	2300      	movs	r3, #0
 800348a:	657b      	str	r3, [r7, #84]	@ 0x54
 800348c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003490:	460b      	mov	r3, r1
 8003492:	4313      	orrs	r3, r2
 8003494:	f000 80ba 	beq.w	800360c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003498:	2300      	movs	r3, #0
 800349a:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b51      	ldr	r3, [pc, #324]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80034a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b4d      	ldr	r3, [pc, #308]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80034ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b2:	4a4c      	ldr	r2, [pc, #304]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80034bc:	4b49      	ldr	r3, [pc, #292]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80034d4:	4b44      	ldr	r3, [pc, #272]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	4a43      	ldr	r2, [pc, #268]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034e0:	f7fd fd4c 	bl	8000f7c <HAL_GetTick>
 80034e4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034e8:	e00b      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fd fd47 	bl	8000f7c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d903      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003500:	e005      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003502:	4b39      	ldr	r3, [pc, #228]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ed      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800350e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d16a      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003516:	4b33      	ldr	r3, [pc, #204]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800351c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d023      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800352c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003530:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003538:	4293      	cmp	r3, r2
 800353a:	d01b      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800353c:	4b29      	ldr	r3, [pc, #164]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800353e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800354a:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800354c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003550:	4a24      	ldr	r2, [pc, #144]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003556:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800355a:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800355c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003560:	4a20      	ldr	r2, [pc, #128]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800356a:	4a1e      	ldr	r2, [pc, #120]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800356c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d019      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fcfc 	bl	8000f7c <HAL_GetTick>
 8003584:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003588:	e00d      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fd fcf7 	bl	8000f7c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003594:	1ad2      	subs	r2, r2, r3
 8003596:	f241 3388 	movw	r3, #5000	@ 0x1388
 800359a:	429a      	cmp	r2, r3
 800359c:	d903      	bls.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80035a4:	e006      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a6:	4b0f      	ldr	r3, [pc, #60]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80035a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ea      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80035b4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80035bc:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80035be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80035ce:	4a05      	ldr	r2, [pc, #20]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035d6:	e00d      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80035dc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80035e0:	e008      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80035e2:	bf00      	nop
 80035e4:	46020c00 	.word	0x46020c00
 80035e8:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80035f0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035f4:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4bb2      	ldr	r3, [pc, #712]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003602:	4ab1      	ldr	r2, [pc, #708]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800360c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800361a:	2300      	movs	r3, #0
 800361c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800361e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d042      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800362c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003630:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003634:	d022      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003636:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800363a:	d81b      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800363c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003640:	d011      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003646:	d815      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d019      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800364c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003650:	d110      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003656:	3308      	adds	r3, #8
 8003658:	4618      	mov	r0, r3
 800365a:	f001 fef9 	bl	8005450 <RCCEx_PLL2_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003664:	e00d      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003666:	4b98      	ldr	r3, [pc, #608]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	4a97      	ldr	r2, [pc, #604]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800366c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003670:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003672:	e006      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800367a:	e002      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003680:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003682:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800368a:	4b8f      	ldr	r3, [pc, #572]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800368c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003690:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369c:	4a8a      	ldr	r2, [pc, #552]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80036aa:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80036ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80036bc:	2300      	movs	r3, #0
 80036be:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d02d      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80036ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d6:	d00b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036dc:	d804      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e6:	d007      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80036f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80036fa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003702:	4b71      	ldr	r3, [pc, #452]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003708:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800370c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	4a6c      	ldr	r2, [pc, #432]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003716:	430b      	orrs	r3, r1
 8003718:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800371c:	e003      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003722:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003734:	2300      	movs	r3, #0
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003738:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800373c:	460b      	mov	r3, r1
 800373e:	4313      	orrs	r3, r2
 8003740:	d00c      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003742:	4b61      	ldr	r3, [pc, #388]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003744:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003748:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800374c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003754:	4a5c      	ldr	r2, [pc, #368]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003756:	430b      	orrs	r3, r1
 8003758:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800375c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003768:	633b      	str	r3, [r7, #48]	@ 0x30
 800376a:	2300      	movs	r3, #0
 800376c:	637b      	str	r3, [r7, #52]	@ 0x34
 800376e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d019      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800377c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003780:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003784:	d105      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003786:	4b50      	ldr	r3, [pc, #320]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	4a4f      	ldr	r2, [pc, #316]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003790:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003792:	4b4d      	ldr	r3, [pc, #308]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003794:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003798:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800379c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037a4:	4a48      	ldr	r2, [pc, #288]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80037a6:	430b      	orrs	r3, r1
 80037a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ba:	2300      	movs	r3, #0
 80037bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037c2:	460b      	mov	r3, r1
 80037c4:	4313      	orrs	r3, r2
 80037c6:	d00c      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80037c8:	4b3f      	ldr	r3, [pc, #252]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80037ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037da:	493b      	ldr	r1, [pc, #236]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80037e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	2300      	movs	r3, #0
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d00c      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80037fe:	4b32      	ldr	r3, [pc, #200]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800380c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003810:	492d      	ldr	r1, [pc, #180]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d00c      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003834:	4b24      	ldr	r3, [pc, #144]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800383a:	f023 0218 	bic.w	r2, r3, #24
 800383e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003846:	4920      	ldr	r1, [pc, #128]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800384e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d034      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800386a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800386e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003876:	d105      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003882:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003888:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800388c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003890:	d108      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003896:	3308      	adds	r3, #8
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fdd9 	bl	8005450 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 80038a4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10f      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80038ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038be:	4902      	ldr	r1, [pc, #8]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80038c6:	e005      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80038c8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80038d0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80038d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d03a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038fc:	d00e      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80038fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003902:	d815      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d017      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800390c:	d110      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390e:	4b27      	ldr	r3, [pc, #156]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003918:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800391a:	e00e      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800391c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003920:	3308      	adds	r3, #8
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fd94 	bl	8005450 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8003938:	bf00      	nop
    }
    if (ret == HAL_OK)
 800393a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003948:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800394c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003954:	4915      	ldr	r1, [pc, #84]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800395c:	e003      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003962:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e9d7 1200 	ldrd	r1, r2, [r7]
 800397c:	460b      	mov	r3, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	d00c      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003988:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800398c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003994:	4905      	ldr	r1, [pc, #20]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800399c:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	37d8      	adds	r7, #216	@ 0xd8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039aa:	bf00      	nop
 80039ac:	46020c00 	.word	0x46020c00

080039b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80039b8:	4ba6      	ldr	r3, [pc, #664]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039c2:	4ba4      	ldr	r3, [pc, #656]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80039cc:	4ba1      	ldr	r3, [pc, #644]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	3301      	adds	r3, #1
 80039d8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039da:	4b9e      	ldr	r3, [pc, #632]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80039e6:	4b9b      	ldr	r3, [pc, #620]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d062      	beq.n	8003ace <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	f200 8081 	bhi.w	8003b12 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d024      	beq.n	8003a60 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d17a      	bne.n	8003b12 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b89      	ldr	r3, [pc, #548]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a42:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a5e:	e08f      	b.n	8003b80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a60:	4b7c      	ldr	r3, [pc, #496]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003a6c:	4b79      	ldr	r3, [pc, #484]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	0f1b      	lsrs	r3, r3, #28
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	e006      	b.n	8003a86 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003a78:	4b76      	ldr	r3, [pc, #472]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	0f1b      	lsrs	r3, r3, #28
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	4a76      	ldr	r2, [pc, #472]	@ (8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003abc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003acc:	e058      	b.n	8003b80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003af0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003af4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b10:	e036      	b.n	8003b80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b12:	4b50      	ldr	r3, [pc, #320]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0f1b      	lsrs	r3, r3, #28
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	0f1b      	lsrs	r3, r3, #28
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4a49      	ldr	r2, [pc, #292]	@ (8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b62:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b7e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003b80:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d017      	beq.n	8003bbc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b8c:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b90:	0a5b      	lsrs	r3, r3, #9
 8003b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003b9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb2:	ee17 2a90 	vmov	r2, s15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003bc2:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d017      	beq.n	8003bfe <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bce:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003be4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf4:	ee17 2a90 	vmov	r2, s15
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	e002      	b.n	8003c04 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c04:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c26:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	ee17 2a90 	vmov	r2, s15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c3e:	e002      	b.n	8003c46 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	bf00      	nop
 8003c48:	3724      	adds	r7, #36	@ 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	46020c00 	.word	0x46020c00
 8003c58:	4b742400 	.word	0x4b742400
 8003c5c:	46000000 	.word	0x46000000
 8003c60:	08006274 	.word	0x08006274

08003c64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	@ 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003c6c:	4ba6      	ldr	r3, [pc, #664]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c74:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003c76:	4ba4      	ldr	r3, [pc, #656]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003c80:	4ba1      	ldr	r3, [pc, #644]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003c8e:	4b9e      	ldr	r3, [pc, #632]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	08db      	lsrs	r3, r3, #3
 8003ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d062      	beq.n	8003d82 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	f200 8081 	bhi.w	8003dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d024      	beq.n	8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d17a      	bne.n	8003dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce2:	4b89      	ldr	r3, [pc, #548]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d12:	e08f      	b.n	8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d14:	4b7c      	ldr	r3, [pc, #496]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003d20:	4b79      	ldr	r3, [pc, #484]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	0f1b      	lsrs	r3, r3, #28
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	e006      	b.n	8003d3a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003d2c:	4b76      	ldr	r3, [pc, #472]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d32:	041b      	lsls	r3, r3, #16
 8003d34:	0f1b      	lsrs	r3, r3, #28
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	4a76      	ldr	r2, [pc, #472]	@ (8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	ee07 3a90 	vmov	s15, r3
 8003d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d60:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d64:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d80:	e058      	b.n	8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d94:	4b5c      	ldr	r3, [pc, #368]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003da4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003db4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dc4:	e036      	b.n	8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003dc6:	4b50      	ldr	r3, [pc, #320]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8003dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0f1b      	lsrs	r3, r3, #28
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8003dde:	4b4a      	ldr	r3, [pc, #296]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	0f1b      	lsrs	r3, r3, #28
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	4a49      	ldr	r2, [pc, #292]	@ (8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	ee07 3a90 	vmov	s15, r3
 8003e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e16:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e32:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003e34:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e40:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e44:	0a5b      	lsrs	r3, r3, #9
 8003e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e66:	ee17 2a90 	vmov	r2, s15
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003e76:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d017      	beq.n	8003eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e82:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003e94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e98:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea8:	ee17 2a90 	vmov	r2, s15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	e002      	b.n	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003eb8:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d017      	beq.n	8003ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ec4:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	0e1b      	lsrs	r3, r3, #24
 8003eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eda:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eea:	ee17 2a90 	vmov	r2, s15
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ef2:	e002      	b.n	8003efa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
}
 8003efa:	bf00      	nop
 8003efc:	3724      	adds	r7, #36	@ 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	46020c00 	.word	0x46020c00
 8003f0c:	4b742400 	.word	0x4b742400
 8003f10:	46000000 	.word	0x46000000
 8003f14:	08006274 	.word	0x08006274

08003f18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003f20:	4ba6      	ldr	r3, [pc, #664]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f28:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003f2a:	4ba4      	ldr	r3, [pc, #656]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003f34:	4ba1      	ldr	r3, [pc, #644]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3301      	adds	r3, #1
 8003f40:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003f42:	4b9e      	ldr	r3, [pc, #632]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003f4e:	4b9b      	ldr	r3, [pc, #620]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f52:	08db      	lsrs	r3, r3, #3
 8003f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d062      	beq.n	8004036 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	f200 8081 	bhi.w	800407a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d024      	beq.n	8003fc8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d17a      	bne.n	800407a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f96:	4b89      	ldr	r3, [pc, #548]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003faa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8003fc6:	e08f      	b.n	80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003fc8:	4b7c      	ldr	r3, [pc, #496]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003fd4:	4b79      	ldr	r3, [pc, #484]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	0f1b      	lsrs	r3, r3, #28
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	e006      	b.n	8003fee <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8003fe0:	4b76      	ldr	r3, [pc, #472]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	0f1b      	lsrs	r3, r3, #28
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	4a76      	ldr	r2, [pc, #472]	@ (80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004014:	ed97 6a02 	vldr	s12, [r7, #8]
 8004018:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800401c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004024:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004028:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800402c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004030:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004034:	e058      	b.n	80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004040:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004048:	4b5c      	ldr	r3, [pc, #368]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004058:	ed97 6a02 	vldr	s12, [r7, #8]
 800405c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004060:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004064:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800406c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004074:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004078:	e036      	b.n	80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800407a:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004086:	4b4d      	ldr	r3, [pc, #308]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0f1b      	lsrs	r3, r3, #28
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004092:	4b4a      	ldr	r3, [pc, #296]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004094:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	0f1b      	lsrs	r3, r3, #28
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	4a49      	ldr	r2, [pc, #292]	@ (80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80040ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80040e8:	4b34      	ldr	r3, [pc, #208]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d017      	beq.n	8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80040f4:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80040f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f8:	0a5b      	lsrs	r3, r3, #9
 80040fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800410a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800410e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411a:	ee17 2a90 	vmov	r2, s15
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e002      	b.n	800412a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800412a:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004136:	4b21      	ldr	r3, [pc, #132]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004148:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800414c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004150:	edd7 6a07 	vldr	s13, [r7, #28]
 8004154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415c:	ee17 2a90 	vmov	r2, s15
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	e002      	b.n	800416c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800416c:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004178:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800417a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417c:	0e1b      	lsrs	r3, r3, #24
 800417e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800418a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800418e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004192:	edd7 6a07 	vldr	s13, [r7, #28]
 8004196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800419a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419e:	ee17 2a90 	vmov	r2, s15
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80041a6:	e002      	b.n	80041ae <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
}
 80041ae:	bf00      	nop
 80041b0:	3724      	adds	r7, #36	@ 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	46020c00 	.word	0x46020c00
 80041c0:	4b742400 	.word	0x4b742400
 80041c4:	46000000 	.word	0x46000000
 80041c8:	08006274 	.word	0x08006274

080041cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	@ 0x38
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80041d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041da:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80041de:	430b      	orrs	r3, r1
 80041e0:	d145      	bne.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80041e2:	4b9b      	ldr	r3, [pc, #620]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ec:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80041ee:	4b98      	ldr	r3, [pc, #608]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d108      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004202:	d104      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
 800420a:	f001 b912 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800420e:	4b90      	ldr	r3, [pc, #576]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800421c:	d114      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004224:	d110      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004226:	4b8a      	ldr	r3, [pc, #552]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800422c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004230:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004234:	d103      	bne.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004236:	23fa      	movs	r3, #250	@ 0xfa
 8004238:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800423a:	f001 b8fa 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800423e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004244:	f001 b8f5 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004248:	4b81      	ldr	r3, [pc, #516]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004254:	d107      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425c:	d103      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800425e:	4b7d      	ldr	r3, [pc, #500]	@ (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
 8004262:	f001 b8e6 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	637b      	str	r3, [r7, #52]	@ 0x34
 800426a:	f001 b8e2 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800426e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004272:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004276:	430b      	orrs	r3, r1
 8004278:	d151      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800427a:	4b75      	ldr	r3, [pc, #468]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800427c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004280:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	2b80      	cmp	r3, #128	@ 0x80
 800428a:	d035      	beq.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d841      	bhi.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	2b60      	cmp	r3, #96	@ 0x60
 8004296:	d02a      	beq.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	2b60      	cmp	r3, #96	@ 0x60
 800429c:	d83b      	bhi.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d009      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	2b40      	cmp	r3, #64	@ 0x40
 80042a8:	d835      	bhi.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00c      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d012      	beq.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80042b6:	e02e      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fb77 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042c6:	f001 b8b4 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042ca:	f107 0318 	add.w	r3, r7, #24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fcc8 	bl	8003c64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042d8:	f001 b8ab 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fe19 	bl	8003f18 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042ea:	f001 b8a2 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80042ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80042f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042f4:	f001 b89d 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042f8:	4b55      	ldr	r3, [pc, #340]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004304:	d103      	bne.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004306:	4b54      	ldr	r3, [pc, #336]	@ (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004308:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800430a:	f001 b892 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004312:	f001 b88e 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800431a:	f001 b88a 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800431e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004322:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004326:	430b      	orrs	r3, r1
 8004328:	d126      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800432a:	4b49      	ldr	r3, [pc, #292]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800432c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004334:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004336:	4b46      	ldr	r3, [pc, #280]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004342:	d106      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 800434a:	4b43      	ldr	r3, [pc, #268]	@ (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
 800434e:	f001 b870 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004352:	4b3f      	ldr	r3, [pc, #252]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435e:	d107      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004366:	d103      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004368:	4b3c      	ldr	r3, [pc, #240]	@ (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800436a:	637b      	str	r3, [r7, #52]	@ 0x34
 800436c:	f001 b861 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	637b      	str	r3, [r7, #52]	@ 0x34
 8004374:	f001 b85d 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800437c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004380:	430b      	orrs	r3, r1
 8004382:	d171      	bne.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004384:	4b32      	ldr	r3, [pc, #200]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800438a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800438e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004396:	d034      	beq.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800439e:	d853      	bhi.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ae:	d84b      	bhi.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043bc:	d009      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80043be:	e043      	b.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff faf3 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80043ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ce:	f001 b830 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d2:	f107 0318 	add.w	r3, r7, #24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fc44 	bl	8003c64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043e0:	f001 b827 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80043e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043f0:	d103      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 80043f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80043f6:	f001 b81c 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043fe:	f001 b818 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004402:	4b13      	ldr	r3, [pc, #76]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b20      	cmp	r3, #32
 800440c:	d118      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0e1b      	lsrs	r3, r3, #24
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	e006      	b.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004426:	4b0a      	ldr	r3, [pc, #40]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	0e1b      	lsrs	r3, r3, #24
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800443c:	f000 bff9 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004444:	f000 bff5 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800444c:	f000 bff1 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004450:	46020c00 	.word	0x46020c00
 8004454:	0007a120 	.word	0x0007a120
 8004458:	00f42400 	.word	0x00f42400
 800445c:	007a1200 	.word	0x007a1200
 8004460:	02dc6c00 	.word	0x02dc6c00
 8004464:	08006274 	.word	0x08006274
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800446c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004470:	430b      	orrs	r3, r1
 8004472:	d17f      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004474:	4ba8      	ldr	r3, [pc, #672]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004476:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800447a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800447e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d165      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004486:	4ba4      	ldr	r3, [pc, #656]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800448c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004490:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004498:	d034      	beq.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80044a0:	d853      	bhi.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a8:	d00b      	beq.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b0:	d84b      	bhi.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d016      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044be:	d009      	beq.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80044c0:	e043      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fa72 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80044d0:	f000 bfaf 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044d4:	f107 0318 	add.w	r3, r7, #24
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fbc3 	bl	8003c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80044e2:	f000 bfa6 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80044e6:	4b8c      	ldr	r3, [pc, #560]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f2:	d103      	bne.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 80044f4:	4b89      	ldr	r3, [pc, #548]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80044f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80044f8:	f000 bf9b 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004500:	f000 bf97 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004504:	4b84      	ldr	r3, [pc, #528]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b20      	cmp	r3, #32
 800450e:	d118      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004510:	4b81      	ldr	r3, [pc, #516]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 800451c:	4b7e      	ldr	r3, [pc, #504]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	0e1b      	lsrs	r3, r3, #24
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	e006      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8004528:	4b7b      	ldr	r3, [pc, #492]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800452a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	0e1b      	lsrs	r3, r3, #24
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	4a7a      	ldr	r2, [pc, #488]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800453e:	f000 bf78 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004546:	f000 bf74 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800454e:	f000 bf70 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004558:	d108      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800455a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fa26 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
 8004568:	f000 bf63 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004570:	f000 bf5f 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004578:	1e51      	subs	r1, r2, #1
 800457a:	430b      	orrs	r3, r1
 800457c:	d136      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800457e:	4b66      	ldr	r3, [pc, #408]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe fc22 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 8004594:	6378      	str	r0, [r7, #52]	@ 0x34
 8004596:	f000 bf4c 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	2b01      	cmp	r3, #1
 800459e:	d104      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045a0:	f7fe faea 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 80045a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80045a6:	f000 bf44 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80045aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b6:	d106      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80045b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d103      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80045be:	4b59      	ldr	r3, [pc, #356]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80045c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c2:	f000 bf36 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80045c6:	4b54      	ldr	r3, [pc, #336]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80045c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d107      	bne.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d104      	bne.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e0:	f000 bf27 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e8:	f000 bf23 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80045ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f0:	1f11      	subs	r1, r2, #4
 80045f2:	430b      	orrs	r3, r1
 80045f4:	d136      	bne.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80045f6:	4b48      	ldr	r3, [pc, #288]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80045f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004600:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004608:	f7fe fbd2 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 800460c:	6378      	str	r0, [r7, #52]	@ 0x34
 800460e:	f000 bf10 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004614:	2b10      	cmp	r3, #16
 8004616:	d104      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004618:	f7fe faae 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800461c:	6378      	str	r0, [r7, #52]	@ 0x34
 800461e:	f000 bf08 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004622:	4b3d      	ldr	r3, [pc, #244]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462e:	d106      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004632:	2b20      	cmp	r3, #32
 8004634:	d103      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8004636:	4b3b      	ldr	r3, [pc, #236]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
 800463a:	f000 befa 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800463e:	4b36      	ldr	r3, [pc, #216]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d107      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	2b30      	cmp	r3, #48	@ 0x30
 8004650:	d104      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004656:	637b      	str	r3, [r7, #52]	@ 0x34
 8004658:	f000 beeb 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004660:	f000 bee7 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004668:	f1a2 0108 	sub.w	r1, r2, #8
 800466c:	430b      	orrs	r3, r1
 800466e:	d136      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004670:	4b29      	ldr	r3, [pc, #164]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004676:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800467a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	2b00      	cmp	r3, #0
 8004680:	d104      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004682:	f7fe fb95 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004686:	6378      	str	r0, [r7, #52]	@ 0x34
 8004688:	f000 bed3 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	2b40      	cmp	r3, #64	@ 0x40
 8004690:	d104      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004692:	f7fe fa71 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004696:	6378      	str	r0, [r7, #52]	@ 0x34
 8004698:	f000 becb 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800469c:	4b1e      	ldr	r3, [pc, #120]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a8:	d106      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	2b80      	cmp	r3, #128	@ 0x80
 80046ae:	d103      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 80046b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b4:	f000 bebd 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80046b8:	4b17      	ldr	r3, [pc, #92]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80046ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d107      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80046ca:	d104      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 80046cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d2:	f000 beae 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046da:	f000 beaa 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80046de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e2:	f1a2 0110 	sub.w	r1, r2, #16
 80046e6:	430b      	orrs	r3, r1
 80046e8:	d141      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80046ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80046fc:	f7fe fb58 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004700:	6378      	str	r0, [r7, #52]	@ 0x34
 8004702:	f000 be96 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470c:	d10c      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800470e:	f7fe fa33 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004712:	6378      	str	r0, [r7, #52]	@ 0x34
 8004714:	f000 be8d 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004718:	46020c00 	.word	0x46020c00
 800471c:	02dc6c00 	.word	0x02dc6c00
 8004720:	08006274 	.word	0x08006274
 8004724:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004728:	4baa      	ldr	r3, [pc, #680]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004734:	d107      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800473c:	d103      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800473e:	4ba6      	ldr	r3, [pc, #664]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
 8004742:	f000 be76 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004746:	4ba3      	ldr	r3, [pc, #652]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d108      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800475a:	d104      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 800475c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
 8004762:	f000 be66 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	637b      	str	r3, [r7, #52]	@ 0x34
 800476a:	f000 be62 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800476e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004772:	f1a2 0120 	sub.w	r1, r2, #32
 8004776:	430b      	orrs	r3, r1
 8004778:	d158      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800477a:	4b96      	ldr	r3, [pc, #600]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800477c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800478c:	f7fe fb38 	bl	8002e00 <HAL_RCC_GetPCLK3Freq>
 8004790:	6378      	str	r0, [r7, #52]	@ 0x34
 8004792:	f000 be4e 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	2b01      	cmp	r3, #1
 800479a:	d104      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800479c:	f7fe f9ec 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 80047a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80047a2:	f000 be46 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80047a6:	4b8b      	ldr	r3, [pc, #556]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b2:	d106      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d103      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 80047ba:	4b87      	ldr	r3, [pc, #540]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80047bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047be:	f000 be38 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80047c2:	4b84      	ldr	r3, [pc, #528]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80047c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d107      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d104      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 80047d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
 80047dc:	f000 be29 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80047e0:	4b7c      	ldr	r3, [pc, #496]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d11b      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d118      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047f2:	4b78      	ldr	r3, [pc, #480]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80047fe:	4b75      	ldr	r3, [pc, #468]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	0e1b      	lsrs	r3, r3, #24
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	e006      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800480a:	4b72      	ldr	r3, [pc, #456]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800480c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	0e1b      	lsrs	r3, r3, #24
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	4a70      	ldr	r2, [pc, #448]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800481a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004820:	f000 be07 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
 8004828:	f000 be03 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800482c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004830:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004834:	430b      	orrs	r3, r1
 8004836:	d16c      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004838:	4b66      	ldr	r3, [pc, #408]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800483a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800483e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004842:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800484a:	d104      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800484c:	f7fe f994 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004850:	6378      	str	r0, [r7, #52]	@ 0x34
 8004852:	f000 bdee 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485c:	d108      	bne.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800485e:	f107 0318 	add.w	r3, r7, #24
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f9fe 	bl	8003c64 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	637b      	str	r3, [r7, #52]	@ 0x34
 800486c:	f000 bde1 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004876:	f7fe fa81 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 800487a:	6378      	str	r0, [r7, #52]	@ 0x34
 800487c:	f000 bdd9 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004886:	d122      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004888:	4b52      	ldr	r3, [pc, #328]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d118      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004894:	4b4f      	ldr	r3, [pc, #316]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80048a0:	4b4c      	ldr	r3, [pc, #304]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	0e1b      	lsrs	r3, r3, #24
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	e006      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80048ac:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80048ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	0e1b      	lsrs	r3, r3, #24
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	4a48      	ldr	r2, [pc, #288]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80048bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c2:	f000 bdb6 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ca:	f000 bdb2 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80048ce:	4b41      	ldr	r3, [pc, #260]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048da:	d107      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048e2:	d103      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80048e4:	4b3c      	ldr	r3, [pc, #240]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80048e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e8:	f000 bda3 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80048ec:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f8:	d107      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004900:	d103      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8004902:	4b35      	ldr	r3, [pc, #212]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004904:	637b      	str	r3, [r7, #52]	@ 0x34
 8004906:	f000 bd94 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
 800490e:	f000 bd90 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004916:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800491a:	430b      	orrs	r3, r1
 800491c:	d160      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800491e:	4b2d      	ldr	r3, [pc, #180]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	2b04      	cmp	r3, #4
 800492e:	d84c      	bhi.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004930:	a201      	add	r2, pc, #4	@ (adr r2, 8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	08004971 	.word	0x08004971
 800493c:	0800494d 	.word	0x0800494d
 8004940:	0800495f 	.word	0x0800495f
 8004944:	0800497b 	.word	0x0800497b
 8004948:	08004985 	.word	0x08004985
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800494c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff f82d 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800495a:	f000 bd6a 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800495e:	f107 030c 	add.w	r3, r7, #12
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fad8 	bl	8003f18 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800496c:	f000 bd61 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004970:	f7fe fa04 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8004974:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004976:	f000 bd5c 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800497a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800497e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004980:	f000 bd57 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004984:	4b13      	ldr	r3, [pc, #76]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b20      	cmp	r3, #32
 800498e:	d118      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004990:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800499c:	4b0d      	ldr	r3, [pc, #52]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	0e1b      	lsrs	r3, r3, #24
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	e006      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80049a8:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80049aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	4a09      	ldr	r2, [pc, #36]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80049b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80049be:	f000 bd38 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049c6:	f000 bd34 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049ce:	f000 bd30 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80049d2:	bf00      	nop
 80049d4:	46020c00 	.word	0x46020c00
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	08006274 	.word	0x08006274
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80049e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e4:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80049e8:	430b      	orrs	r3, r1
 80049ea:	d167      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80049ec:	4ba0      	ldr	r3, [pc, #640]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80049ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049fe:	d036      	beq.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a06:	d855      	bhi.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a0e:	d029      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a16:	d84d      	bhi.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a1e:	d013      	beq.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a26:	d845      	bhi.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d015      	beq.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a34:	d13e      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe ffb8 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a44:	f000 bcf5 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fa63 	bl	8003f18 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a56:	f000 bcec 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004a5a:	f7fe f98f 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8004a5e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004a60:	f000 bce7 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a64:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a6a:	f000 bce2 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a6e:	4b80      	ldr	r3, [pc, #512]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d118      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004a86:	4b7a      	ldr	r3, [pc, #488]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	0e1b      	lsrs	r3, r3, #24
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8004a92:	4b77      	ldr	r3, [pc, #476]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	0e1b      	lsrs	r3, r3, #24
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	4a74      	ldr	r2, [pc, #464]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004aa8:	f000 bcc3 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ab0:	f000 bcbf 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ab8:	f000 bcbb 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	d14c      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004ac8:	4b69      	ldr	r3, [pc, #420]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ace:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ad2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ada:	f7fe f969 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004ade:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ae0:	f000 bca7 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aea:	d104      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004aec:	f7fe f844 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004af0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004af2:	f000 bc9e 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004af6:	4b5e      	ldr	r3, [pc, #376]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b02:	d107      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0a:	d103      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8004b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b10:	f000 bc8f 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004b14:	4b56      	ldr	r3, [pc, #344]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d11c      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8004b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b26:	d118      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b28:	4b51      	ldr	r3, [pc, #324]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8004b34:	4b4e      	ldr	r3, [pc, #312]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	e006      	b.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8004b40:	4b4b      	ldr	r3, [pc, #300]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	4a49      	ldr	r2, [pc, #292]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b56:	f000 bc6c 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5e:	f000 bc68 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b66:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	d14c      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b6e:	4b40      	ldr	r3, [pc, #256]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b74:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b78:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b80:	f7fe f916 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004b84:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b86:	f000 bc54 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b90:	d104      	bne.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b92:	f7fd fff1 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004b96:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b98:	f000 bc4b 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004b9c:	4b34      	ldr	r3, [pc, #208]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba8:	d107      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb0:	d103      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8004bb2:	4b31      	ldr	r3, [pc, #196]	@ (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb6:	f000 bc3c 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004bba:	4b2d      	ldr	r3, [pc, #180]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d11c      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bcc:	d118      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bce:	4b28      	ldr	r3, [pc, #160]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004bda:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0e1b      	lsrs	r3, r3, #24
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8004be6:	4b22      	ldr	r3, [pc, #136]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	0e1b      	lsrs	r3, r3, #24
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfc:	f000 bc19 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c04:	f000 bc15 	b.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c0c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004c10:	430b      	orrs	r3, r1
 8004c12:	d157      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004c14:	4b16      	ldr	r3, [pc, #88]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c24:	d02a      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c2a:	d848      	bhi.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	2b80      	cmp	r3, #128	@ 0x80
 8004c30:	d00d      	beq.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	2b80      	cmp	r3, #128	@ 0x80
 8004c36:	d842      	bhi.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d011      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004c44:	e03b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004c46:	f7fe f8db 	bl	8002e00 <HAL_RCC_GetPCLK3Freq>
 8004c4a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c4c:	e3f1      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c4e:	4b08      	ldr	r3, [pc, #32]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5a:	d102      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c60:	e3e7      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c66:	e3e4      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004c68:	f7fd ff86 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004c6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c6e:	e3e0      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004c70:	46020c00 	.word	0x46020c00
 8004c74:	08006274 	.word	0x08006274
 8004c78:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c7c:	4ba3      	ldr	r3, [pc, #652]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d117      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c88:	4ba0      	ldr	r3, [pc, #640]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8004c94:	4b9d      	ldr	r3, [pc, #628]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	e006      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8004ca0:	4b9a      	ldr	r3, [pc, #616]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	4a98      	ldr	r2, [pc, #608]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004cb6:	e3bc      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cbc:	e3b9      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cc2:	e3b6      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	d147      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004cd0:	4b8e      	ldr	r3, [pc, #568]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004cda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ce2:	f7fe f865 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004ce6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ce8:	e3a3      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf0:	d103      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fd ff41 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004cf6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cf8:	e39b      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004cfa:	4b84      	ldr	r3, [pc, #528]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d106      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8004d10:	4b80      	ldr	r3, [pc, #512]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d14:	e38d      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004d16:	4b7d      	ldr	r3, [pc, #500]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d11b      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d28:	d117      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d2a:	4b78      	ldr	r3, [pc, #480]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8004d36:	4b75      	ldr	r3, [pc, #468]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0e1b      	lsrs	r3, r3, #24
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	e006      	b.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8004d42:	4b72      	ldr	r3, [pc, #456]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	4a6f      	ldr	r2, [pc, #444]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d58:	e36b      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d5e:	e368      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d64:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	d164      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004d6c:	4b67      	ldr	r3, [pc, #412]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d120      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d7e:	4b63      	ldr	r3, [pc, #396]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d117      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d8a:	4b60      	ldr	r3, [pc, #384]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8004d96:	4b5d      	ldr	r3, [pc, #372]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	0e1b      	lsrs	r3, r3, #24
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	e006      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004da2:	4b5a      	ldr	r3, [pc, #360]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	4a57      	ldr	r2, [pc, #348]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db8:	e33b      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dbe:	e338      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004dc0:	4b52      	ldr	r3, [pc, #328]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dce:	d112      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dd6:	d10e      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de6:	d102      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8004de8:	23fa      	movs	r3, #250	@ 0xfa
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dec:	e321      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004dee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004df2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004df4:	e31d      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004df6:	4b45      	ldr	r3, [pc, #276]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e02:	d106      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0a:	d102      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8004e0c:	4b41      	ldr	r3, [pc, #260]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e10:	e30f      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004e12:	4b3e      	ldr	r3, [pc, #248]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e26:	d103      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8004e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2e:	e300      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e34:	e2fd      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	d16a      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004e42:	4b32      	ldr	r3, [pc, #200]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e4c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d120      	bne.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e54:	4b2d      	ldr	r3, [pc, #180]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d117      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e60:	4b2a      	ldr	r3, [pc, #168]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004e6c:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	0e1b      	lsrs	r3, r3, #24
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	e006      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8004e78:	4b24      	ldr	r3, [pc, #144]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	0e1b      	lsrs	r3, r3, #24
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e8e:	e2d0      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e94:	e2cd      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004e96:	4b1d      	ldr	r3, [pc, #116]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea4:	d112      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eac:	d10e      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004eae:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ebc:	d102      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8004ebe:	23fa      	movs	r3, #250	@ 0xfa
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ec2:	e2b6      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004ec4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ec8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004eca:	e2b2      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee6:	e2a4      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004ee8:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004efc:	d103      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8004efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f04:	e295      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f0a:	e292      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004f0c:	46020c00 	.word	0x46020c00
 8004f10:	08006274 	.word	0x08006274
 8004f14:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004f20:	430b      	orrs	r3, r1
 8004f22:	d147      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004f24:	4b9a      	ldr	r3, [pc, #616]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f2a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f36:	f7fd ff3b 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004f3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f3c:	e279      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004f3e:	4b94      	ldr	r3, [pc, #592]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f4c:	d112      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f54:	d10e      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f56:	4b8e      	ldr	r3, [pc, #568]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f64:	d102      	bne.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8004f66:	23fa      	movs	r3, #250	@ 0xfa
 8004f68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f6a:	e262      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004f6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f72:	e25e      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004f74:	4b86      	ldr	r3, [pc, #536]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f80:	d106      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f88:	d102      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8004f8a:	4b82      	ldr	r3, [pc, #520]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8e:	e250      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004f90:	4b7f      	ldr	r3, [pc, #508]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d107      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fa4:	d103      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8004fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fac:	e241      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb2:	e23e      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	d12d      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004fc0:	4b73      	ldr	r3, [pc, #460]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fc6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004fca:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004fcc:	4b70      	ldr	r3, [pc, #448]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd8:	d105      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8004fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe4:	e225      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fec:	d107      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fcdc 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ffc:	e219      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005004:	d107      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005006:	f107 0318 	add.w	r3, r7, #24
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fe2a 	bl	8003c64 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	637b      	str	r3, [r7, #52]	@ 0x34
 8005014:	e20d      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	637b      	str	r3, [r7, #52]	@ 0x34
 800501a:	e20a      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800501c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005020:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005024:	430b      	orrs	r3, r1
 8005026:	d156      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005028:	4b59      	ldr	r3, [pc, #356]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800502a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800502e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005032:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800503a:	d028      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005042:	d845      	bhi.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800504a:	d013      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005052:	d83d      	bhi.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005060:	d004      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005062:	e035      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005064:	f7fd feb8 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 8005068:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800506a:	e1e2      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800506c:	f7fd fd84 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8005070:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005072:	e1de      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005074:	4b46      	ldr	r3, [pc, #280]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005080:	d102      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005082:	4b44      	ldr	r3, [pc, #272]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005086:	e1d4      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800508c:	e1d1      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800508e:	4b40      	ldr	r3, [pc, #256]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b20      	cmp	r3, #32
 8005098:	d117      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800509a:	4b3d      	ldr	r3, [pc, #244]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 80050a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0e1b      	lsrs	r3, r3, #24
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	e006      	b.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80050b2:	4b37      	ldr	r3, [pc, #220]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80050b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	0e1b      	lsrs	r3, r3, #24
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	4a35      	ldr	r2, [pc, #212]	@ (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050c8:	e1b3      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ce:	e1b0      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050d4:	e1ad      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80050d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050da:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80050de:	430b      	orrs	r3, r1
 80050e0:	d15c      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80050e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80050e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050ec:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050f4:	d028      	beq.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050fc:	d845      	bhi.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005104:	d013      	beq.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800510c:	d83d      	bhi.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511a:	d004      	beq.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800511c:	e035      	b.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800511e:	f7fd fe47 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8005122:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005124:	e185      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005126:	f7fd fd27 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800512a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800512c:	e181      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800512e:	4b18      	ldr	r3, [pc, #96]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513a:	d102      	bne.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 800513c:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800513e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005140:	e177      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005146:	e174      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b20      	cmp	r3, #32
 8005152:	d117      	bne.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005154:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	0e1b      	lsrs	r3, r3, #24
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	e006      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800516c:	4b08      	ldr	r3, [pc, #32]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800516e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005172:	041b      	lsls	r3, r3, #16
 8005174:	0e1b      	lsrs	r3, r3, #24
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	4a07      	ldr	r2, [pc, #28]	@ (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 800517c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005180:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005182:	e156      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005188:	e153      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800518e:	e150      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005190:	46020c00 	.word	0x46020c00
 8005194:	00f42400 	.word	0x00f42400
 8005198:	08006274 	.word	0x08006274
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800519c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80051a4:	430b      	orrs	r3, r1
 80051a6:	d176      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80051a8:	4ba4      	ldr	r3, [pc, #656]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80051aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051ae:	f003 0318 	and.w	r3, r3, #24
 80051b2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	2b18      	cmp	r3, #24
 80051b8:	d86a      	bhi.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80051ba:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	08005225 	.word	0x08005225
 80051c4:	08005291 	.word	0x08005291
 80051c8:	08005291 	.word	0x08005291
 80051cc:	08005291 	.word	0x08005291
 80051d0:	08005291 	.word	0x08005291
 80051d4:	08005291 	.word	0x08005291
 80051d8:	08005291 	.word	0x08005291
 80051dc:	08005291 	.word	0x08005291
 80051e0:	0800522d 	.word	0x0800522d
 80051e4:	08005291 	.word	0x08005291
 80051e8:	08005291 	.word	0x08005291
 80051ec:	08005291 	.word	0x08005291
 80051f0:	08005291 	.word	0x08005291
 80051f4:	08005291 	.word	0x08005291
 80051f8:	08005291 	.word	0x08005291
 80051fc:	08005291 	.word	0x08005291
 8005200:	08005235 	.word	0x08005235
 8005204:	08005291 	.word	0x08005291
 8005208:	08005291 	.word	0x08005291
 800520c:	08005291 	.word	0x08005291
 8005210:	08005291 	.word	0x08005291
 8005214:	08005291 	.word	0x08005291
 8005218:	08005291 	.word	0x08005291
 800521c:	08005291 	.word	0x08005291
 8005220:	0800524f 	.word	0x0800524f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005224:	f7fd fdec 	bl	8002e00 <HAL_RCC_GetPCLK3Freq>
 8005228:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800522a:	e102      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800522c:	f7fd fca4 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8005230:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005232:	e0fe      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005234:	4b81      	ldr	r3, [pc, #516]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005240:	d102      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005242:	4b7f      	ldr	r3, [pc, #508]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005246:	e0f4      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800524c:	e0f1      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800524e:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b20      	cmp	r3, #32
 8005258:	d117      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800525a:	4b78      	ldr	r3, [pc, #480]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005266:	4b75      	ldr	r3, [pc, #468]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0e1b      	lsrs	r3, r3, #24
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	e006      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005272:	4b72      	ldr	r3, [pc, #456]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	0e1b      	lsrs	r3, r3, #24
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	4a70      	ldr	r2, [pc, #448]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005286:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005288:	e0d3      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800528e:	e0d0      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005294:	e0cd      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800529e:	430b      	orrs	r3, r1
 80052a0:	d155      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80052a2:	4b66      	ldr	r3, [pc, #408]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80052a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80052ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052b4:	d013      	beq.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052bc:	d844      	bhi.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052c4:	d013      	beq.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052cc:	d83c      	bhi.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d014      	beq.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052da:	d014      	beq.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80052dc:	e034      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052de:	f107 0318 	add.w	r3, r7, #24
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fcbe 	bl	8003c64 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ec:	e0a1      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fb5c 	bl	80039b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80052f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052fc:	e099      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fd fc3b 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8005302:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005304:	e095      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005306:	4b4d      	ldr	r3, [pc, #308]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b20      	cmp	r3, #32
 8005310:	d117      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005312:	4b4a      	ldr	r3, [pc, #296]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800531e:	4b47      	ldr	r3, [pc, #284]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0e1b      	lsrs	r3, r3, #24
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	e006      	b.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 800532a:	4b44      	ldr	r3, [pc, #272]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800532c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005330:	041b      	lsls	r3, r3, #16
 8005332:	0e1b      	lsrs	r3, r3, #24
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	4a42      	ldr	r2, [pc, #264]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800533a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005340:	e077      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005346:	e074      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800534c:	e071      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800534e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005352:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005356:	430b      	orrs	r3, r1
 8005358:	d131      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800535a:	4b38      	ldr	r3, [pc, #224]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800535c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005364:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005366:	4b35      	ldr	r3, [pc, #212]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d106      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005380:	e057      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005382:	4b2e      	ldr	r3, [pc, #184]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800538c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005390:	d112      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005398:	d10e      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800539a:	4b28      	ldr	r3, [pc, #160]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800539c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a8:	d102      	bne.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 80053aa:	23fa      	movs	r3, #250	@ 0xfa
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053ae:	e040      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80053b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053b6:	e03c      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80053bc:	e039      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80053be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80053c6:	430b      	orrs	r3, r1
 80053c8:	d131      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80053ca:	4b1c      	ldr	r3, [pc, #112]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80053cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053d0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80053d6:	4b19      	ldr	r3, [pc, #100]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 80053ea:	4b17      	ldr	r3, [pc, #92]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ee:	e020      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80053f0:	4b12      	ldr	r3, [pc, #72]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fc:	d106      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005404:	d102      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005406:	4b11      	ldr	r3, [pc, #68]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005408:	637b      	str	r3, [r7, #52]	@ 0x34
 800540a:	e012      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800540c:	4b0b      	ldr	r3, [pc, #44]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005418:	d106      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005420:	d102      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005422:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
 8005426:	e004      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
 800542c:	e001      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005434:	4618      	mov	r0, r3
 8005436:	3738      	adds	r7, #56	@ 0x38
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	46020c00 	.word	0x46020c00
 8005440:	00f42400 	.word	0x00f42400
 8005444:	08006274 	.word	0x08006274
 8005448:	02dc6c00 	.word	0x02dc6c00
 800544c:	016e3600 	.word	0x016e3600

08005450 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005458:	4b47      	ldr	r3, [pc, #284]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a46      	ldr	r2, [pc, #280]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 800545e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005462:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005464:	f7fb fd8a 	bl	8000f7c <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800546a:	e008      	b.n	800547e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800546c:	f7fb fd86 	bl	8000f7c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e077      	b.n	800556e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800547e:	4b3e      	ldr	r3, [pc, #248]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800548a:	4b3b      	ldr	r3, [pc, #236]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 800548c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6811      	ldr	r1, [r2, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6852      	ldr	r2, [r2, #4]
 800549e:	3a01      	subs	r2, #1
 80054a0:	0212      	lsls	r2, r2, #8
 80054a2:	430a      	orrs	r2, r1
 80054a4:	4934      	ldr	r1, [pc, #208]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80054aa:	4b33      	ldr	r3, [pc, #204]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 80054ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ae:	4b33      	ldr	r3, [pc, #204]	@ (800557c <RCCEx_PLL2_Config+0x12c>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6892      	ldr	r2, [r2, #8]
 80054b6:	3a01      	subs	r2, #1
 80054b8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68d2      	ldr	r2, [r2, #12]
 80054c0:	3a01      	subs	r2, #1
 80054c2:	0252      	lsls	r2, r2, #9
 80054c4:	b292      	uxth	r2, r2
 80054c6:	4311      	orrs	r1, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6912      	ldr	r2, [r2, #16]
 80054cc:	3a01      	subs	r2, #1
 80054ce:	0412      	lsls	r2, r2, #16
 80054d0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80054d4:	4311      	orrs	r1, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6952      	ldr	r2, [r2, #20]
 80054da:	3a01      	subs	r2, #1
 80054dc:	0612      	lsls	r2, r2, #24
 80054de:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80054e2:	430a      	orrs	r2, r1
 80054e4:	4924      	ldr	r1, [pc, #144]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80054ea:	4b23      	ldr	r3, [pc, #140]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	f023 020c 	bic.w	r2, r3, #12
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	4920      	ldr	r1, [pc, #128]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80054fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 80054fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	491c      	ldr	r1, [pc, #112]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005506:	4313      	orrs	r3, r2
 8005508:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800550a:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005510:	f023 0310 	bic.w	r3, r3, #16
 8005514:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005516:	4b18      	ldr	r3, [pc, #96]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800551e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	69d2      	ldr	r2, [r2, #28]
 8005526:	00d2      	lsls	r2, r2, #3
 8005528:	4913      	ldr	r1, [pc, #76]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 800552a:	4313      	orrs	r3, r2
 800552c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800552e:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	4a11      	ldr	r2, [pc, #68]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005534:	f043 0310 	orr.w	r3, r3, #16
 8005538:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800553a:	4b0f      	ldr	r3, [pc, #60]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0e      	ldr	r2, [pc, #56]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005540:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005544:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005546:	f7fb fd19 	bl	8000f7c <HAL_GetTick>
 800554a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800554c:	e008      	b.n	8005560 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800554e:	f7fb fd15 	bl	8000f7c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e006      	b.n	800556e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <RCCEx_PLL2_Config+0x128>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0

}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	46020c00 	.word	0x46020c00
 800557c:	80800000 	.word	0x80800000

08005580 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005588:	4b47      	ldr	r3, [pc, #284]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a46      	ldr	r2, [pc, #280]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 800558e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005592:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005594:	f7fb fcf2 	bl	8000f7c <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800559a:	e008      	b.n	80055ae <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800559c:	f7fb fcee 	bl	8000f7c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e077      	b.n	800569e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055ae:	4b3e      	ldr	r3, [pc, #248]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80055ba:	4b3b      	ldr	r3, [pc, #236]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6811      	ldr	r1, [r2, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6852      	ldr	r2, [r2, #4]
 80055ce:	3a01      	subs	r2, #1
 80055d0:	0212      	lsls	r2, r2, #8
 80055d2:	430a      	orrs	r2, r1
 80055d4:	4934      	ldr	r1, [pc, #208]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	630b      	str	r3, [r1, #48]	@ 0x30
 80055da:	4b33      	ldr	r3, [pc, #204]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 80055dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055de:	4b33      	ldr	r3, [pc, #204]	@ (80056ac <RCCEx_PLL3_Config+0x12c>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6892      	ldr	r2, [r2, #8]
 80055e6:	3a01      	subs	r2, #1
 80055e8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	68d2      	ldr	r2, [r2, #12]
 80055f0:	3a01      	subs	r2, #1
 80055f2:	0252      	lsls	r2, r2, #9
 80055f4:	b292      	uxth	r2, r2
 80055f6:	4311      	orrs	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6912      	ldr	r2, [r2, #16]
 80055fc:	3a01      	subs	r2, #1
 80055fe:	0412      	lsls	r2, r2, #16
 8005600:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005604:	4311      	orrs	r1, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6952      	ldr	r2, [r2, #20]
 800560a:	3a01      	subs	r2, #1
 800560c:	0612      	lsls	r2, r2, #24
 800560e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005612:	430a      	orrs	r2, r1
 8005614:	4924      	ldr	r1, [pc, #144]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005616:	4313      	orrs	r3, r2
 8005618:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800561a:	4b23      	ldr	r3, [pc, #140]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	f023 020c 	bic.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	4920      	ldr	r1, [pc, #128]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005628:	4313      	orrs	r3, r2
 800562a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800562c:	4b1e      	ldr	r3, [pc, #120]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 800562e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	491c      	ldr	r1, [pc, #112]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005636:	4313      	orrs	r3, r2
 8005638:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800563a:	4b1b      	ldr	r3, [pc, #108]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	4a1a      	ldr	r2, [pc, #104]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005640:	f023 0310 	bic.w	r3, r3, #16
 8005644:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005646:	4b18      	ldr	r3, [pc, #96]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800564e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	69d2      	ldr	r2, [r2, #28]
 8005656:	00d2      	lsls	r2, r2, #3
 8005658:	4913      	ldr	r1, [pc, #76]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 800565a:	4313      	orrs	r3, r2
 800565c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800565e:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005662:	4a11      	ldr	r2, [pc, #68]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005664:	f043 0310 	orr.w	r3, r3, #16
 8005668:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800566a:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a0e      	ldr	r2, [pc, #56]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005674:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005676:	f7fb fc81 	bl	8000f7c <HAL_GetTick>
 800567a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800567c:	e008      	b.n	8005690 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800567e:	f7fb fc7d 	bl	8000f7c <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e006      	b.n	800569e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <RCCEx_PLL3_Config+0x128>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	46020c00 	.word	0x46020c00
 80056ac:	80800000 	.word	0x80800000

080056b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e042      	b.n	8005748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7fb f8d7 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2224      	movs	r2, #36	@ 0x24
 80056de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa4e 	bl	8005b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f8b3 	bl	800586c <UART_SetConfig>
 8005706:	4603      	mov	r3, r0
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e01b      	b.n	8005748 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800571e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800572e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 facd 	bl	8005ce0 <UART_CheckIdleState>
 8005746:	4603      	mov	r3, r0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	@ 0x28
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	2b20      	cmp	r3, #32
 8005768:	d17b      	bne.n	8005862 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_UART_Transmit+0x26>
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e074      	b.n	8005864 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2221      	movs	r2, #33	@ 0x21
 8005786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578a:	f7fb fbf7 	bl	8000f7c <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a8:	d108      	bne.n	80057bc <HAL_UART_Transmit+0x6c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	e003      	b.n	80057c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057c4:	e030      	b.n	8005828 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	@ 0x80
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fb2f 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e03d      	b.n	8005864 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	3302      	adds	r3, #2
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	e007      	b.n	8005816 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	781a      	ldrb	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	3301      	adds	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1c8      	bne.n	80057c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2200      	movs	r2, #0
 800583c:	2140      	movs	r1, #64	@ 0x40
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 faf8 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e006      	b.n	8005864 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005870:	b094      	sub	sp, #80	@ 0x50
 8005872:	af00      	add	r7, sp, #0
 8005874:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b9b      	ldr	r3, [pc, #620]	@ (8005af0 <UART_SetConfig+0x284>)
 8005882:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	431a      	orrs	r2, r3
 800588e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4313      	orrs	r3, r2
 800589a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4994      	ldr	r1, [pc, #592]	@ (8005af4 <UART_SetConfig+0x288>)
 80058a4:	4019      	ands	r1, r3
 80058a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058bc:	68d9      	ldr	r1, [r3, #12]
 80058be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	ea40 0301 	orr.w	r3, r0, r1
 80058c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b87      	ldr	r3, [pc, #540]	@ (8005af0 <UART_SetConfig+0x284>)
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d009      	beq.n	80058ec <UART_SetConfig+0x80>
 80058d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b86      	ldr	r3, [pc, #536]	@ (8005af8 <UART_SetConfig+0x28c>)
 80058de:	429a      	cmp	r2, r3
 80058e0:	d004      	beq.n	80058ec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e8:	4313      	orrs	r3, r2
 80058ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80058f6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005900:	430b      	orrs	r3, r1
 8005902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	f023 000f 	bic.w	r0, r3, #15
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	ea40 0301 	orr.w	r3, r0, r1
 800591a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	4b76      	ldr	r3, [pc, #472]	@ (8005afc <UART_SetConfig+0x290>)
 8005922:	429a      	cmp	r2, r3
 8005924:	d102      	bne.n	800592c <UART_SetConfig+0xc0>
 8005926:	2301      	movs	r3, #1
 8005928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800592a:	e021      	b.n	8005970 <UART_SetConfig+0x104>
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b73      	ldr	r3, [pc, #460]	@ (8005b00 <UART_SetConfig+0x294>)
 8005932:	429a      	cmp	r2, r3
 8005934:	d102      	bne.n	800593c <UART_SetConfig+0xd0>
 8005936:	2304      	movs	r3, #4
 8005938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800593a:	e019      	b.n	8005970 <UART_SetConfig+0x104>
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b70      	ldr	r3, [pc, #448]	@ (8005b04 <UART_SetConfig+0x298>)
 8005942:	429a      	cmp	r2, r3
 8005944:	d102      	bne.n	800594c <UART_SetConfig+0xe0>
 8005946:	2308      	movs	r3, #8
 8005948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800594a:	e011      	b.n	8005970 <UART_SetConfig+0x104>
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b6d      	ldr	r3, [pc, #436]	@ (8005b08 <UART_SetConfig+0x29c>)
 8005952:	429a      	cmp	r2, r3
 8005954:	d102      	bne.n	800595c <UART_SetConfig+0xf0>
 8005956:	2310      	movs	r3, #16
 8005958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800595a:	e009      	b.n	8005970 <UART_SetConfig+0x104>
 800595c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b63      	ldr	r3, [pc, #396]	@ (8005af0 <UART_SetConfig+0x284>)
 8005962:	429a      	cmp	r2, r3
 8005964:	d102      	bne.n	800596c <UART_SetConfig+0x100>
 8005966:	2320      	movs	r3, #32
 8005968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800596a:	e001      	b.n	8005970 <UART_SetConfig+0x104>
 800596c:	2300      	movs	r3, #0
 800596e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b5e      	ldr	r3, [pc, #376]	@ (8005af0 <UART_SetConfig+0x284>)
 8005976:	429a      	cmp	r2, r3
 8005978:	d004      	beq.n	8005984 <UART_SetConfig+0x118>
 800597a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b5e      	ldr	r3, [pc, #376]	@ (8005af8 <UART_SetConfig+0x28c>)
 8005980:	429a      	cmp	r2, r3
 8005982:	d172      	bne.n	8005a6a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005986:	2200      	movs	r2, #0
 8005988:	623b      	str	r3, [r7, #32]
 800598a:	627a      	str	r2, [r7, #36]	@ 0x24
 800598c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005990:	f7fe fc1c 	bl	80041cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005994:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80e7 	beq.w	8005b6c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a2:	4a5a      	ldr	r2, [pc, #360]	@ (8005b0c <UART_SetConfig+0x2a0>)
 80059a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059be:	429a      	cmp	r2, r3
 80059c0:	d305      	bcc.n	80059ce <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d903      	bls.n	80059d6 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80059d4:	e048      	b.n	8005a68 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d8:	2200      	movs	r2, #0
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	4a4a      	ldr	r2, [pc, #296]	@ (8005b0c <UART_SetConfig+0x2a0>)
 80059e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	617a      	str	r2, [r7, #20]
 80059f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059f8:	f7fa fc3e 	bl	8000278 <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	020b      	lsls	r3, r1, #8
 8005a0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a12:	0202      	lsls	r2, r0, #8
 8005a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a16:	6849      	ldr	r1, [r1, #4]
 8005a18:	0849      	lsrs	r1, r1, #1
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	4605      	mov	r5, r0
 8005a20:	eb12 0804 	adds.w	r8, r2, r4
 8005a24:	eb43 0905 	adc.w	r9, r3, r5
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	60fa      	str	r2, [r7, #12]
 8005a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f7fa fc1d 	bl	8000278 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4613      	mov	r3, r2
 8005a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a4c:	d308      	bcc.n	8005a60 <UART_SetConfig+0x1f4>
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a54:	d204      	bcs.n	8005a60 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8005a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	e003      	b.n	8005a68 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8005a66:	e081      	b.n	8005b6c <UART_SetConfig+0x300>
 8005a68:	e080      	b.n	8005b6c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a72:	d14d      	bne.n	8005b10 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a76:	2200      	movs	r2, #0
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a80:	f7fe fba4 	bl	80041cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005a84:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d06f      	beq.n	8005b6c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a90:	4a1e      	ldr	r2, [pc, #120]	@ (8005b0c <UART_SetConfig+0x2a0>)
 8005a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a9e:	005a      	lsls	r2, r3, #1
 8005aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	441a      	add	r2, r3
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab4:	2b0f      	cmp	r3, #15
 8005ab6:	d916      	bls.n	8005ae6 <UART_SetConfig+0x27a>
 8005ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005abe:	d212      	bcs.n	8005ae6 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f023 030f 	bic.w	r3, r3, #15
 8005ac8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005ae2:	60da      	str	r2, [r3, #12]
 8005ae4:	e042      	b.n	8005b6c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005aec:	e03e      	b.n	8005b6c <UART_SetConfig+0x300>
 8005aee:	bf00      	nop
 8005af0:	46002400 	.word	0x46002400
 8005af4:	cfff69f3 	.word	0xcfff69f3
 8005af8:	56002400 	.word	0x56002400
 8005afc:	40013800 	.word	0x40013800
 8005b00:	40004800 	.word	0x40004800
 8005b04:	40004c00 	.word	0x40004c00
 8005b08:	40005000 	.word	0x40005000
 8005b0c:	08006338 	.word	0x08006338
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b12:	2200      	movs	r2, #0
 8005b14:	469a      	mov	sl, r3
 8005b16:	4693      	mov	fp, r2
 8005b18:	4650      	mov	r0, sl
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	f7fe fb56 	bl	80041cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b20:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d021      	beq.n	8005b6c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b98 <UART_SetConfig+0x32c>)
 8005b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	441a      	add	r2, r3
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4e:	2b0f      	cmp	r3, #15
 8005b50:	d909      	bls.n	8005b66 <UART_SetConfig+0x2fa>
 8005b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b58:	d205      	bcs.n	8005b66 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	e002      	b.n	8005b6c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b76:	2201      	movs	r2, #1
 8005b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	2200      	movs	r2, #0
 8005b80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	2200      	movs	r2, #0
 8005b86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3750      	adds	r7, #80	@ 0x50
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b96:	bf00      	nop
 8005b98:	08006338 	.word	0x08006338

08005b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9a:	d10a      	bne.n	8005cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b098      	sub	sp, #96	@ 0x60
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf0:	f7fb f944 	bl	8000f7c <HAL_GetTick>
 8005cf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d12f      	bne.n	8005d64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f88e 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d022      	beq.n	8005d64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e063      	b.n	8005e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d149      	bne.n	8005e06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f857 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d03c      	beq.n	8005e06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dde:	61fa      	str	r2, [r7, #28]
 8005de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	617b      	str	r3, [r7, #20]
   return(result);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e012      	b.n	8005e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3758      	adds	r7, #88	@ 0x58
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e44:	e04f      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d04b      	beq.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fb f895 	bl	8000f7c <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e04e      	b.n	8005f06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d037      	beq.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b80      	cmp	r3, #128	@ 0x80
 8005e7a:	d034      	beq.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b40      	cmp	r3, #64	@ 0x40
 8005e80:	d031      	beq.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d110      	bne.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2208      	movs	r2, #8
 8005e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f838 	bl	8005f0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e029      	b.n	8005f06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec0:	d111      	bne.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f81e 	bl	8005f0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e00f      	b.n	8005f06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	bf0c      	ite	eq
 8005ef6:	2301      	moveq	r3, #1
 8005ef8:	2300      	movne	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	461a      	mov	r2, r3
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d0a0      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b095      	sub	sp, #84	@ 0x54
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e6      	bne.n	8005f16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e3      	bne.n	8005f48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d118      	bne.n	8005fba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f023 0310 	bic.w	r3, r3, #16
 8005f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6979      	ldr	r1, [r7, #20]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e6      	bne.n	8005f88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fce:	bf00      	nop
 8005fd0:	3754      	adds	r7, #84	@ 0x54
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e027      	b.n	8006040 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	@ 0x24
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800601e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e02d      	b.n	80060c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2224      	movs	r2, #36	@ 0x24
 8006070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f84f 	bl	8006144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060dc:	2302      	movs	r3, #2
 80060de:	e02d      	b.n	800613c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2224      	movs	r2, #36	@ 0x24
 80060ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f811 	bl	8006144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006150:	2b00      	cmp	r3, #0
 8006152:	d108      	bne.n	8006166 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006164:	e031      	b.n	80061ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006166:	2308      	movs	r3, #8
 8006168:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800616a:	2308      	movs	r3, #8
 800616c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	0e5b      	lsrs	r3, r3, #25
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	0f5b      	lsrs	r3, r3, #29
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	7b3a      	ldrb	r2, [r7, #12]
 8006192:	4911      	ldr	r1, [pc, #68]	@ (80061d8 <UARTEx_SetNbDataToProcess+0x94>)
 8006194:	5c8a      	ldrb	r2, [r1, r2]
 8006196:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800619a:	7b3a      	ldrb	r2, [r7, #12]
 800619c:	490f      	ldr	r1, [pc, #60]	@ (80061dc <UARTEx_SetNbDataToProcess+0x98>)
 800619e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	7b7a      	ldrb	r2, [r7, #13]
 80061b0:	4909      	ldr	r1, [pc, #36]	@ (80061d8 <UARTEx_SetNbDataToProcess+0x94>)
 80061b2:	5c8a      	ldrb	r2, [r1, r2]
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061b8:	7b7a      	ldrb	r2, [r7, #13]
 80061ba:	4908      	ldr	r1, [pc, #32]	@ (80061dc <UARTEx_SetNbDataToProcess+0x98>)
 80061bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061be:	fb93 f3f2 	sdiv	r3, r3, r2
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	08006350 	.word	0x08006350
 80061dc:	08006358 	.word	0x08006358

080061e0 <memset>:
 80061e0:	4402      	add	r2, r0
 80061e2:	4603      	mov	r3, r0
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d100      	bne.n	80061ea <memset+0xa>
 80061e8:	4770      	bx	lr
 80061ea:	f803 1b01 	strb.w	r1, [r3], #1
 80061ee:	e7f9      	b.n	80061e4 <memset+0x4>

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006228 <__libc_init_array+0x38>)
 80061f4:	2600      	movs	r6, #0
 80061f6:	4c0d      	ldr	r4, [pc, #52]	@ (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	4d0b      	ldr	r5, [pc, #44]	@ (8006230 <__libc_init_array+0x40>)
 8006202:	2600      	movs	r6, #0
 8006204:	4c0b      	ldr	r4, [pc, #44]	@ (8006234 <__libc_init_array+0x44>)
 8006206:	f000 f817 	bl	8006238 <_init>
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	f855 3b04 	ldr.w	r3, [r5], #4
 8006218:	3601      	adds	r6, #1
 800621a:	4798      	blx	r3
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006222:	3601      	adds	r6, #1
 8006224:	4798      	blx	r3
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	08006368 	.word	0x08006368
 800622c:	08006368 	.word	0x08006368
 8006230:	08006368 	.word	0x08006368
 8006234:	0800636c 	.word	0x0800636c

08006238 <_init>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr

08006244 <_fini>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr
