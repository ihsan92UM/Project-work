
cb_v1_6freq_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f24  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ae  08015160  08015160  00016160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015810  08015810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015818  08015818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801581c  0801581c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  20000000  08015820  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001548  200002fc  08015b1c  000172fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000e04  20001844  08015b1c  00017844  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000172fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025f7e  00000000  00000000  00017332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004988  00000000  00000000  0003d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f68  00000000  00000000  00041c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001876  00000000  00000000  00043ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032f10  00000000  00000000  00045416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a26f  00000000  00000000  00078326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013499d  00000000  00000000  000a2595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d6f32  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009d88  00000000  00000000  001d6f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001e0d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200002fc 	.word	0x200002fc
 8000254:	00000000 	.word	0x00000000
 8000258:	08015144 	.word	0x08015144

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000300 	.word	0x20000300
 8000274:	08015144 	.word	0x08015144

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b4 	b.w	8001010 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	460c      	mov	r4, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14d      	bne.n	8000dd4 <__udivmoddi4+0xa8>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4696      	mov	lr, r2
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	d960      	bls.n	8000e08 <__udivmoddi4+0xdc>
 8000d46:	b14b      	cbz	r3, 8000d5c <__udivmoddi4+0x30>
 8000d48:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d56:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5a:	4317      	orrs	r7, r2
 8000d5c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d60:	fa1f f48e 	uxth.w	r4, lr
 8000d64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d68:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d6c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d70:	fb01 f004 	mul.w	r0, r1, r4
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x62>
 8000d7c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x60>
 8000d86:	4290      	cmp	r0, r2
 8000d88:	f200 812d 	bhi.w	8000fe6 <__udivmoddi4+0x2ba>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	fa1f fc8c 	uxth.w	ip, ip
 8000d94:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d98:	fb06 2210 	mls	r2, r6, r0, r2
 8000d9c:	fb00 f404 	mul.w	r4, r0, r4
 8000da0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da4:	4564      	cmp	r4, ip
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	4564      	cmp	r4, ip
 8000db4:	f200 811a 	bhi.w	8000fec <__udivmoddi4+0x2c0>
 8000db8:	4610      	mov	r0, r2
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	ebac 0c04 	sub.w	ip, ip, r4
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b125      	cbz	r5, 8000dd0 <__udivmoddi4+0xa4>
 8000dc6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d905      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd8:	b10d      	cbz	r5, 8000dde <__udivmoddi4+0xb2>
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4608      	mov	r0, r1
 8000de2:	e7f5      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d14d      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4290      	cmp	r0, r2
 8000df4:	f080 80ef 	bcs.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0e6      	beq.n	8000dd0 <__udivmoddi4+0xa4>
 8000e02:	e9c5 6300 	strd	r6, r3, [r5]
 8000e06:	e7e3      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80a2 	bne.w	8000f52 <__udivmoddi4+0x226>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa1f f68e 	uxth.w	r6, lr
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2a:	fb06 f004 	mul.w	r0, r6, r4
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80c8 	beq.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e50:	4644      	mov	r4, r8
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	fa1f fc8c 	uxth.w	ip, ip
 8000e58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e60:	fb00 f606 	mul.w	r6, r0, r6
 8000e64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e68:	4566      	cmp	r6, ip
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x150>
 8000e76:	4566      	cmp	r6, ip
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2c6>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e92:	fa22 f706 	lsr.w	r7, r2, r6
 8000e96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e9a:	40f4      	lsrs	r4, r6
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ea4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ea8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb8:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ec4:	45a1      	cmp	r9, r4
 8000ec6:	d90e      	bls.n	8000ee6 <__udivmoddi4+0x1ba>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ece:	bf2c      	ite	cs
 8000ed0:	f04f 0b01 	movcs.w	fp, #1
 8000ed4:	f04f 0b00 	movcc.w	fp, #0
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d903      	bls.n	8000ee4 <__udivmoddi4+0x1b8>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	f000 8093 	beq.w	800100a <__udivmoddi4+0x2de>
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	eba4 0409 	sub.w	r4, r4, r9
 8000eea:	fa1f f983 	uxth.w	r9, r3
 8000eee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ef2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ef6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d906      	bls.n	8000f10 <__udivmoddi4+0x1e4>
 8000f02:	193c      	adds	r4, r7, r4
 8000f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x1e2>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d87a      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	eba4 040c 	sub.w	r4, r4, ip
 8000f18:	fba0 9802 	umull	r9, r8, r0, r2
 8000f1c:	4544      	cmp	r4, r8
 8000f1e:	46cc      	mov	ip, r9
 8000f20:	4643      	mov	r3, r8
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0x1fe>
 8000f24:	d106      	bne.n	8000f34 <__udivmoddi4+0x208>
 8000f26:	45ce      	cmp	lr, r9
 8000f28:	d204      	bcs.n	8000f34 <__udivmoddi4+0x208>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f30:	eb68 0307 	sbc.w	r3, r8, r7
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x222>
 8000f36:	ebbe 020c 	subs.w	r2, lr, ip
 8000f3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f42:	fa22 f301 	lsr.w	r3, r2, r1
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	431e      	orrs	r6, r3
 8000f4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e73e      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000f52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f56:	f1c3 0120 	rsb	r1, r3, #32
 8000f5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f68:	fa20 f101 	lsr.w	r1, r0, r1
 8000f6c:	fa1f f68e 	uxth.w	r6, lr
 8000f70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f74:	430a      	orrs	r2, r1
 8000f76:	fb07 4410 	mls	r4, r7, r0, r4
 8000f7a:	0c11      	lsrs	r1, r2, #16
 8000f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f80:	fb00 f406 	mul.w	r4, r0, r6
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d90e      	bls.n	8000fa6 <__udivmoddi4+0x27a>
 8000f88:	eb1e 0101 	adds.w	r1, lr, r1
 8000f8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f90:	bf2c      	ite	cs
 8000f92:	f04f 0901 	movcs.w	r9, #1
 8000f96:	f04f 0900 	movcc.w	r9, #0
 8000f9a:	428c      	cmp	r4, r1
 8000f9c:	d902      	bls.n	8000fa4 <__udivmoddi4+0x278>
 8000f9e:	f1b9 0f00 	cmp.w	r9, #0
 8000fa2:	d02c      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	1b09      	subs	r1, r1, r4
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x2a2>
 8000fbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000fc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fc6:	d201      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d815      	bhi.n	8000ff8 <__udivmoddi4+0x2cc>
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fd4:	e721      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fd6:	1a86      	subs	r6, r0, r2
 8000fd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e70e      	b.n	8000dfe <__udivmoddi4+0xd2>
 8000fe0:	3c02      	subs	r4, #2
 8000fe2:	4472      	add	r2, lr
 8000fe4:	e735      	b.n	8000e52 <__udivmoddi4+0x126>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4472      	add	r2, lr
 8000fea:	e6d0      	b.n	8000d8e <__udivmoddi4+0x62>
 8000fec:	44f4      	add	ip, lr
 8000fee:	3802      	subs	r0, #2
 8000ff0:	e6e3      	b.n	8000dba <__udivmoddi4+0x8e>
 8000ff2:	44f4      	add	ip, lr
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x152>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e7e7      	b.n	8000fce <__udivmoddi4+0x2a2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4471      	add	r1, lr
 8001002:	e7d0      	b.n	8000fa6 <__udivmoddi4+0x27a>
 8001004:	3b02      	subs	r3, #2
 8001006:	443c      	add	r4, r7
 8001008:	e782      	b.n	8000f10 <__udivmoddi4+0x1e4>
 800100a:	3802      	subs	r0, #2
 800100c:	443c      	add	r4, r7
 800100e:	e76a      	b.n	8000ee6 <__udivmoddi4+0x1ba>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001020:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800102c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001030:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001034:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800103c:	e000      	b.n	8001040 <ITM_SendChar+0x2c>
    {
      __NOP();
 800103e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001040:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f9      	beq.n	800103e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800104a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	0000      	movs	r0, r0
 8001064:	0000      	movs	r0, r0
	...

08001068 <process_all_channels>:
    HAL_UART_Transmit(&huart1, txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
}



void process_all_channels(uint16_t *channels[], const char *channel_names[], int num_channels) {
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	f2ad 4d4c 	subw	sp, sp, #1100	@ 0x44c
 800106e:	af06      	add	r7, sp, #24
 8001070:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8001074:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001078:	6018      	str	r0, [r3, #0]
 800107a:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800107e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001082:	6019      	str	r1, [r3, #0]
 8001084:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8001088:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800108c:	601a      	str	r2, [r3, #0]
#define TIMER_CLK_HZ 160000000
    char TxMessageBuffer[1024];   // large buffer for all channels
    int len = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c

    for (int i = 0; i < num_channels; i++) {
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 800109a:	e0f3      	b.n	8001284 <process_all_channels+0x21c>
        if (channels[i][0] == 0) {
 800109c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 80010a6:	f2a2 4224 	subw	r2, r2, #1060	@ 0x424
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d11c      	bne.n	80010f0 <process_all_channels+0x88>
            len += snprintf(TxMessageBuffer + len, sizeof(TxMessageBuffer) - len,
 80010b6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80010ba:	f107 0210 	add.w	r2, r7, #16
 80010be:	18d0      	adds	r0, r2, r3
 80010c0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80010c4:	f5c3 6180 	rsb	r1, r3, #1024	@ 0x400
                            "%s: Frequency = 0.00 Hz , Count = 0 , Capacitance = 0pF\r\n",
                            channel_names[i]);
 80010c8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 80010d2:	f5a2 6285 	sub.w	r2, r2, #1064	@ 0x428
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	4413      	add	r3, r2
            len += snprintf(TxMessageBuffer + len, sizeof(TxMessageBuffer) - len,
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a8c      	ldr	r2, [pc, #560]	@ (8001310 <process_all_channels+0x2a8>)
 80010de:	f010 fb6f 	bl	80117c0 <sniprintf>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80010e8:	4413      	add	r3, r2
 80010ea:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 80010ee:	e0b5      	b.n	800125c <process_all_channels+0x1f4>
        } else {
            float period_seconds = channels[i][0] * (1.0 / TIMER_CLK_HZ);
 80010f0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 80010fa:	f2a2 4224 	subw	r2, r2, #1060	@ 0x424
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa10 	bl	800052c <__aeabi_i2d>
 800110c:	a374      	add	r3, pc, #464	@ (adr r3, 80012e0 <process_all_channels+0x278>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fa75 	bl	8000600 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd67 	bl	8000bf0 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	f207 421c 	addw	r2, r7, #1052	@ 0x41c
 8001128:	6013      	str	r3, [r2, #0]
            float frequency = (1.0 / period_seconds);
 800112a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800112e:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800113e:	edc3 7a00 	vstr	s15, [r3]

            // Raw capacitance
            double before_offset = ((1 / (0.64 * frequency * 261000)) - 60.60E-12) * 1e12;
 8001142:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	f7ff fa02 	bl	8000550 <__aeabi_f2d>
 800114c:	a366      	add	r3, pc, #408	@ (adr r3, 80012e8 <process_all_channels+0x280>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa55 	bl	8000600 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a364      	add	r3, pc, #400	@ (adr r3, 80012f0 <process_all_channels+0x288>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa4c 	bl	8000600 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	f04f 0000 	mov.w	r0, #0
 8001170:	4968      	ldr	r1, [pc, #416]	@ (8001314 <process_all_channels+0x2ac>)
 8001172:	f7ff fb6f 	bl	8000854 <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a35e      	add	r3, pc, #376	@ (adr r3, 80012f8 <process_all_channels+0x290>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff f884 	bl	8000290 <__aeabi_dsub>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a35b      	add	r3, pc, #364	@ (adr r3, 8001300 <process_all_channels+0x298>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa33 	bl	8000600 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80011a2:	e9c1 2300 	strd	r2, r3, [r1]

            // Offset correction
            double after_offset = before_offset - offsets[i];
 80011a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001318 <process_all_channels+0x2b0>)
 80011a8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80011b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011bc:	f7ff f868 	bl	8000290 <__aeabi_dsub>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 80011c8:	e9c1 2300 	strd	r2, r3, [r1]

            if (after_offset < 0.30) after_offset = 0.0;
 80011cc:	a34e      	add	r3, pc, #312	@ (adr r3, 8001308 <process_all_channels+0x2a0>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 80011d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011da:	f7ff fc83 	bl	8000ae4 <__aeabi_dcmplt>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <process_all_channels+0x18c>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 80011f0:	e9c1 2300 	strd	r2, r3, [r1]

            len += snprintf(TxMessageBuffer + len, sizeof(TxMessageBuffer) - len,
 80011f4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	18d4      	adds	r4, r2, r3
 80011fe:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001202:	f5c3 6580 	rsb	r5, r3, #1024	@ 0x400
                            "%s: Before = %.2f pF, Offset = %.2f pF, After = %.2f pF\r\n",
                           channel_names[i], before_offset, offsets[i], after_offset);
 8001206:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 8001210:	f5a2 6285 	sub.w	r2, r2, #1064	@ 0x428
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4413      	add	r3, r2
            len += snprintf(TxMessageBuffer + len, sizeof(TxMessageBuffer) - len,
 8001218:	681e      	ldr	r6, [r3, #0]
 800121a:	4a3f      	ldr	r2, [pc, #252]	@ (8001318 <process_all_channels+0x2b0>)
 800121c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 800122c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001238:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	e9cd 2300 	strd	r2, r3, [sp]
 8001244:	4633      	mov	r3, r6
 8001246:	4a35      	ldr	r2, [pc, #212]	@ (800131c <process_all_channels+0x2b4>)
 8001248:	4629      	mov	r1, r5
 800124a:	4620      	mov	r0, r4
 800124c:	f010 fab8 	bl	80117c0 <sniprintf>
 8001250:	4602      	mov	r2, r0
 8001252:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001256:	4413      	add	r3, r2
 8001258:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
        }

        memset(channels[i], 0, sizeof(uint16_t) * 8);
 800125c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 8001266:	f2a2 4224 	subw	r2, r2, #1060	@ 0x424
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2210      	movs	r2, #16
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f010 fb3a 	bl	80118ee <memset>
    for (int i = 0; i < num_channels; i++) {
 800127a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800127e:	3301      	adds	r3, #1
 8001280:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 8001284:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8001288:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800128c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	f6ff af02 	blt.w	800109c <process_all_channels+0x34>
    }

    // Add blank line between groups
    len += snprintf(TxMessageBuffer + len, sizeof(TxMessageBuffer) - len, "\r\n");
 8001298:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800129c:	f107 0210 	add.w	r2, r7, #16
 80012a0:	18d0      	adds	r0, r2, r3
 80012a2:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80012a6:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80012aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <process_all_channels+0x2b8>)
 80012ac:	4619      	mov	r1, r3
 80012ae:	f010 fa87 	bl	80117c0 <sniprintf>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80012b8:	4413      	add	r3, r2
 80012ba:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c

    // Send all at once
    TEMPLATE_Transmit((uint8_t *)TxMessageBuffer, len);
 80012be:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00d fd9c 	bl	800ee08 <TEMPLATE_Transmit>
}
 80012d0:	bf00      	nop
 80012d2:	f207 4734 	addw	r7, r7, #1076	@ 0x434
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	9abcaf48 	.word	0x9abcaf48
 80012e4:	3e3ad7f2 	.word	0x3e3ad7f2
 80012e8:	47ae147b 	.word	0x47ae147b
 80012ec:	3fe47ae1 	.word	0x3fe47ae1
 80012f0:	00000000 	.word	0x00000000
 80012f4:	410fdc40 	.word	0x410fdc40
 80012f8:	8cb779a2 	.word	0x8cb779a2
 80012fc:	3dd0a858 	.word	0x3dd0a858
 8001300:	a2000000 	.word	0xa2000000
 8001304:	426d1a94 	.word	0x426d1a94
 8001308:	33333333 	.word	0x33333333
 800130c:	3fd33333 	.word	0x3fd33333
 8001310:	08015184 	.word	0x08015184
 8001314:	3ff00000 	.word	0x3ff00000
 8001318:	20000000 	.word	0x20000000
 800131c:	080151c0 	.word	0x080151c0
 8001320:	080151fc 	.word	0x080151fc

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b0a4      	sub	sp, #144	@ 0x90
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f001 fdcd 	bl	8002ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 f909 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f000 fe03 	bl	8001f3c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001336:	f000 f995 	bl	8001664 <MX_GPDMA1_Init>
  MX_TIM3_Init();
 800133a:	f000 fabb 	bl	80018b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800133e:	f000 fb45 	bl	80019cc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001342:	f000 fd7d 	bl	8001e40 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001346:	f000 f9d5 	bl	80016f4 <MX_I2C3_Init>
  MX_TIM2_Init();
 800134a:	f000 fa27 	bl	800179c <MX_TIM2_Init>
  MX_TIM5_Init();
 800134e:	f000 fbc9 	bl	8001ae4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001352:	f000 fc53 	bl	8001bfc <MX_TIM8_Init>
  MX_TIM15_Init();
 8001356:	f000 fce3 	bl	8001d20 <MX_TIM15_Init>
  MX_ICACHE_Init();
 800135a:	f000 fa0b 	bl	8001774 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  //Wait for USB
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 800135e:	4b6d      	ldr	r3, [pc, #436]	@ (8001514 <main+0x1f0>)
 8001360:	4a6d      	ldr	r2, [pc, #436]	@ (8001518 <main+0x1f4>)
 8001362:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

  if(USBD_Init(&hUsbDeviceFS, &CDC_Desc, 0) != USBD_OK)
 8001366:	2200      	movs	r2, #0
 8001368:	496c      	ldr	r1, [pc, #432]	@ (800151c <main+0x1f8>)
 800136a:	486b      	ldr	r0, [pc, #428]	@ (8001518 <main+0x1f4>)
 800136c:	f00d ff86 	bl	800f27c <USBD_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <main+0x56>
        Error_Handler();
 8001376:	f000 fe61 	bl	800203c <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800137a:	4969      	ldr	r1, [pc, #420]	@ (8001520 <main+0x1fc>)
 800137c:	4866      	ldr	r0, [pc, #408]	@ (8001518 <main+0x1f4>)
 800137e:	f00d ffbb 	bl	800f2f8 <USBD_RegisterClass>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <main+0x68>
        Error_Handler();
 8001388:	f000 fe58 	bl	800203c <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 800138c:	4965      	ldr	r1, [pc, #404]	@ (8001524 <main+0x200>)
 800138e:	4862      	ldr	r0, [pc, #392]	@ (8001518 <main+0x1f4>)
 8001390:	f00d fb8c 	bl	800eaac <USBD_CDC_RegisterInterface>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <main+0x7a>
        Error_Handler();
 800139a:	f000 fe4f 	bl	800203c <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800139e:	485e      	ldr	r0, [pc, #376]	@ (8001518 <main+0x1f4>)
 80013a0:	f00d ffee 	bl	800f380 <USBD_Start>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <main+0x8a>
        Error_Handler();
 80013aa:	f000 fe47 	bl	800203c <Error_Handler>

  while(hUsbDeviceFS.pClassData == NULL);
 80013ae:	bf00      	nop
 80013b0:	4b59      	ldr	r3, [pc, #356]	@ (8001518 <main+0x1f4>)
 80013b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0fa      	beq.n	80013b0 <main+0x8c>
  //HAL_Delay(100);
  //USB setup done

#define TIMER_CLK_HZ 160000000

uint16_t Channel_0[8] = {0};
 80013ba:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
uint16_t Channel_1[8] = {0};
 80013c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
uint16_t Channel_2[8] = {0};
 80013d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
uint16_t Channel_3[8] = {0};
 80013e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
uint16_t Channel_4[8] = {0};
 80013f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
uint16_t Channel_5[8] = {0};
 8001400:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

uint16_t* channels[] = {Channel_0, Channel_1, Channel_2, Channel_3, Channel_4, Channel_5};
 800140e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800141e:	623b      	str	r3, [r7, #32]
 8001420:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
 8001426:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800142c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
const char* channel_names[] = {"Channel_0", "Channel_1", "Channel_2", "Channel_3", "Channel_4", "Channel_5"}; // Can be changed to timer name
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <main+0x204>)
 8001434:	463c      	mov	r4, r7
 8001436:	461d      	mov	r5, r3
 8001438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001440:	e884 0003 	stmia.w	r4, {r0, r1}


if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 8001444:	4839      	ldr	r0, [pc, #228]	@ (800152c <main+0x208>)
 8001446:	f009 f957 	bl	800a6f8 <HAL_TIM_Base_Start>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <main+0x130>

	  Error_Handler();
 8001450:	f000 fdf4 	bl	800203c <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim3) != HAL_OK){
 8001454:	4836      	ldr	r0, [pc, #216]	@ (8001530 <main+0x20c>)
 8001456:	f009 f94f 	bl	800a6f8 <HAL_TIM_Base_Start>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <main+0x140>

	  Error_Handler();
 8001460:	f000 fdec 	bl	800203c <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim4) != HAL_OK){
 8001464:	4833      	ldr	r0, [pc, #204]	@ (8001534 <main+0x210>)
 8001466:	f009 f947 	bl	800a6f8 <HAL_TIM_Base_Start>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <main+0x150>

	  Error_Handler();
 8001470:	f000 fde4 	bl	800203c <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim5) != HAL_OK){
 8001474:	4830      	ldr	r0, [pc, #192]	@ (8001538 <main+0x214>)
 8001476:	f009 f93f 	bl	800a6f8 <HAL_TIM_Base_Start>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <main+0x160>

	  Error_Handler();
 8001480:	f000 fddc 	bl	800203c <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim8) != HAL_OK){
 8001484:	482d      	ldr	r0, [pc, #180]	@ (800153c <main+0x218>)
 8001486:	f009 f937 	bl	800a6f8 <HAL_TIM_Base_Start>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <main+0x170>

	  Error_Handler();
 8001490:	f000 fdd4 	bl	800203c <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim15) != HAL_OK){
 8001494:	482a      	ldr	r0, [pc, #168]	@ (8001540 <main+0x21c>)
 8001496:	f009 f92f 	bl	800a6f8 <HAL_TIM_Base_Start>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <main+0x180>

	  Error_Handler();
 80014a0:	f000 fdcc 	bl	800203c <Error_Handler>
}

HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,(uint32_t*)&Channel_0, 8);
 80014a4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80014a8:	2308      	movs	r3, #8
 80014aa:	2100      	movs	r1, #0
 80014ac:	481f      	ldr	r0, [pc, #124]	@ (800152c <main+0x208>)
 80014ae:	f009 fa1d 	bl	800a8ec <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t*)&Channel_1, 8);
 80014b2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80014b6:	2308      	movs	r3, #8
 80014b8:	2100      	movs	r1, #0
 80014ba:	481d      	ldr	r0, [pc, #116]	@ (8001530 <main+0x20c>)
 80014bc:	f009 fa16 	bl	800a8ec <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1,(uint32_t*)&Channel_2, 8);
 80014c0:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80014c4:	2308      	movs	r3, #8
 80014c6:	2100      	movs	r1, #0
 80014c8:	481a      	ldr	r0, [pc, #104]	@ (8001534 <main+0x210>)
 80014ca:	f009 fa0f 	bl	800a8ec <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1,(uint32_t*)&Channel_3, 8);
 80014ce:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80014d2:	2308      	movs	r3, #8
 80014d4:	2100      	movs	r1, #0
 80014d6:	4818      	ldr	r0, [pc, #96]	@ (8001538 <main+0x214>)
 80014d8:	f009 fa08 	bl	800a8ec <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1,(uint32_t*)&Channel_4, 8);
 80014dc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80014e0:	2308      	movs	r3, #8
 80014e2:	2100      	movs	r1, #0
 80014e4:	4815      	ldr	r0, [pc, #84]	@ (800153c <main+0x218>)
 80014e6:	f009 fa01 	bl	800a8ec <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1,(uint32_t*)&Channel_5, 8);
 80014ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80014ee:	2308      	movs	r3, #8
 80014f0:	2100      	movs	r1, #0
 80014f2:	4813      	ldr	r0, [pc, #76]	@ (8001540 <main+0x21c>)
 80014f4:	f009 f9fa 	bl	800a8ec <HAL_TIM_IC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	process_all_channels(channels, channel_names, 6);
 80014f8:	4639      	mov	r1, r7
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	2206      	movs	r2, #6
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fdb1 	bl	8001068 <process_all_channels>
	HAL_Delay(500);
 8001506:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800150a:	f001 fda3 	bl	8003054 <HAL_Delay>
	process_all_channels(channels, channel_names, 6);
 800150e:	bf00      	nop
 8001510:	e7f2      	b.n	80014f8 <main+0x1d4>
 8001512:	bf00      	nop
 8001514:	20000a00 	.word	0x20000a00
 8001518:	20000ce4 	.word	0x20000ce4
 800151c:	200000e4 	.word	0x200000e4
 8001520:	20000048 	.word	0x20000048
 8001524:	200000c8 	.word	0x200000c8
 8001528:	08015248 	.word	0x08015248
 800152c:	2000036c 	.word	0x2000036c
 8001530:	200003b8 	.word	0x200003b8
 8001534:	20000404 	.word	0x20000404
 8001538:	20000450 	.word	0x20000450
 800153c:	2000049c 	.word	0x2000049c
 8001540:	200004e8 	.word	0x200004e8

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0a6      	sub	sp, #152	@ 0x98
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800154e:	2260      	movs	r2, #96	@ 0x60
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f010 f9cb 	bl	80118ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800157c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001580:	f005 f91a 	bl	80067b8 <HAL_PWREx_ControlVoltageScaling>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800158a:	f000 fd57 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800158e:	2321      	movs	r3, #33	@ 0x21
 8001590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a2:	2303      	movs	r3, #3
 80015a4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015ae:	230a      	movs	r3, #10
 80015b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLR = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80015c6:	230c      	movs	r3, #12
 80015c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 f98a 	bl	80068f0 <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015e2:	f000 fd2b 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e6:	231f      	movs	r3, #31
 80015e8:	623b      	str	r3, [r7, #32]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ea:	2303      	movs	r3, #3
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2104      	movs	r1, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f006 f84f 	bl	80076a8 <HAL_RCC_ClockConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001610:	f000 fd14 	bl	800203c <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <SystemClock_Config+0x11c>)
 8001616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800161a:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <SystemClock_Config+0x11c>)
 800161c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001620:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <SystemClock_Config+0x11c>)
 8001626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800162a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8001636:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800163a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8001640:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8001644:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001646:	2322      	movs	r3, #34	@ 0x22
 8001648:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800164a:	2320      	movs	r3, #32
 800164c:	61fb      	str	r3, [r7, #28]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4618      	mov	r0, r3
 8001654:	f008 fe86 	bl	800a364 <HAL_RCCEx_CRSConfig>
}
 8001658:	bf00      	nop
 800165a:	3798      	adds	r7, #152	@ 0x98
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	46020c00 	.word	0x46020c00

08001664 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <MX_GPDMA1_Init+0x8c>)
 800166c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001670:	4a1f      	ldr	r2, [pc, #124]	@ (80016f0 <MX_GPDMA1_Init+0x8c>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_GPDMA1_Init+0x8c>)
 800167c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	201d      	movs	r0, #29
 800168e:	f001 fdbd 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001692:	201d      	movs	r0, #29
 8001694:	f001 fdd4 	bl	8003240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	201e      	movs	r0, #30
 800169e:	f001 fdb5 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80016a2:	201e      	movs	r0, #30
 80016a4:	f001 fdcc 	bl	8003240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	201f      	movs	r0, #31
 80016ae:	f001 fdad 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80016b2:	201f      	movs	r0, #31
 80016b4:	f001 fdc4 	bl	8003240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2020      	movs	r0, #32
 80016be:	f001 fda5 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80016c2:	2020      	movs	r0, #32
 80016c4:	f001 fdbc 	bl	8003240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2021      	movs	r0, #33	@ 0x21
 80016ce:	f001 fd9d 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80016d2:	2021      	movs	r0, #33	@ 0x21
 80016d4:	f001 fdb4 	bl	8003240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2022      	movs	r0, #34	@ 0x22
 80016de:	f001 fd95 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80016e2:	2022      	movs	r0, #34	@ 0x22
 80016e4:	f001 fdac 	bl	8003240 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	46020c00 	.word	0x46020c00

080016f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_I2C3_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <MX_I2C3_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001700:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <MX_I2C3_Init+0x7c>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_I2C3_Init+0x74>)
 800170c:	2201      	movs	r2, #1
 800170e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <MX_I2C3_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_I2C3_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800172e:	480e      	ldr	r0, [pc, #56]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001730:	f003 f9f6 	bl	8004b20 <HAL_I2C_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800173a:	f000 fc7f 	bl	800203c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001742:	f003 fa88 	bl	8004c56 <HAL_I2CEx_ConfigAnalogFilter>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800174c:	f000 fc76 	bl	800203c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001750:	2100      	movs	r1, #0
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001754:	f003 faca 	bl	8004cec <HAL_I2CEx_ConfigDigitalFilter>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800175e:	f000 fc6d 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000318 	.word	0x20000318
 800176c:	46002800 	.word	0x46002800
 8001770:	30909dec 	.word	0x30909dec

08001774 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001778:	2000      	movs	r0, #0
 800177a:	f003 fb03 	bl	8004d84 <HAL_ICACHE_ConfigAssociativityMode>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001784:	f000 fc5a 	bl	800203c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001788:	f003 fb1c 	bl	8004dc4 <HAL_ICACHE_Enable>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001792:	f000 fc53 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b090      	sub	sp, #64	@ 0x40
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d8:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <MX_TIM2_Init+0x114>)
 80017da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017e0:	4b33      	ldr	r3, [pc, #204]	@ (80018b0 <MX_TIM2_Init+0x114>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b32      	ldr	r3, [pc, #200]	@ (80018b0 <MX_TIM2_Init+0x114>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017ec:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <MX_TIM2_Init+0x114>)
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <MX_TIM2_Init+0x114>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <MX_TIM2_Init+0x114>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001800:	482b      	ldr	r0, [pc, #172]	@ (80018b0 <MX_TIM2_Init+0x114>)
 8001802:	f008 ff21 	bl	800a648 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800180c:	f000 fc16 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001816:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800181a:	4619      	mov	r1, r3
 800181c:	4824      	ldr	r0, [pc, #144]	@ (80018b0 <MX_TIM2_Init+0x114>)
 800181e:	f009 fafb 	bl	800ae18 <HAL_TIM_ConfigClockSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001828:	f000 fc08 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800182c:	4820      	ldr	r0, [pc, #128]	@ (80018b0 <MX_TIM2_Init+0x114>)
 800182e:	f008 fffb 	bl	800a828 <HAL_TIM_IC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001838:	f000 fc00 	bl	800203c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800183c:	2304      	movs	r3, #4
 800183e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001840:	2350      	movs	r3, #80	@ 0x50
 8001842:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4817      	ldr	r0, [pc, #92]	@ (80018b0 <MX_TIM2_Init+0x114>)
 8001854:	f009 fbe2 	bl	800b01c <HAL_TIM_SlaveConfigSynchro>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800185e:	f000 fbed 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4619      	mov	r1, r3
 8001870:	480f      	ldr	r0, [pc, #60]	@ (80018b0 <MX_TIM2_Init+0x114>)
 8001872:	f00a f8f9 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 800187c:	f000 fbde 	bl	800203c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001884:	2301      	movs	r3, #1
 8001886:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	@ (80018b0 <MX_TIM2_Init+0x114>)
 8001898:	f009 fa22 	bl	800ace0 <HAL_TIM_IC_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80018a2:	f000 fbcb 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3740      	adds	r7, #64	@ 0x40
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000036c 	.word	0x2000036c

080018b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	@ 0x40
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018f0:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <MX_TIM3_Init+0x110>)
 80018f2:	4a35      	ldr	r2, [pc, #212]	@ (80019c8 <MX_TIM3_Init+0x114>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018f6:	4b33      	ldr	r3, [pc, #204]	@ (80019c4 <MX_TIM3_Init+0x110>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <MX_TIM3_Init+0x110>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8001902:	4b30      	ldr	r3, [pc, #192]	@ (80019c4 <MX_TIM3_Init+0x110>)
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <MX_TIM3_Init+0x110>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b2c      	ldr	r3, [pc, #176]	@ (80019c4 <MX_TIM3_Init+0x110>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001916:	482b      	ldr	r0, [pc, #172]	@ (80019c4 <MX_TIM3_Init+0x110>)
 8001918:	f008 fe96 	bl	800a648 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001922:	f000 fb8b 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800192c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001930:	4619      	mov	r1, r3
 8001932:	4824      	ldr	r0, [pc, #144]	@ (80019c4 <MX_TIM3_Init+0x110>)
 8001934:	f009 fa70 	bl	800ae18 <HAL_TIM_ConfigClockSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800193e:	f000 fb7d 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001942:	4820      	ldr	r0, [pc, #128]	@ (80019c4 <MX_TIM3_Init+0x110>)
 8001944:	f008 ff70 	bl	800a828 <HAL_TIM_IC_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800194e:	f000 fb75 	bl	800203c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001952:	2304      	movs	r3, #4
 8001954:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001956:	2350      	movs	r3, #80	@ 0x50
 8001958:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4816      	ldr	r0, [pc, #88]	@ (80019c4 <MX_TIM3_Init+0x110>)
 800196a:	f009 fb57 	bl	800b01c <HAL_TIM_SlaveConfigSynchro>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8001974:	f000 fb62 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	480f      	ldr	r0, [pc, #60]	@ (80019c4 <MX_TIM3_Init+0x110>)
 8001988:	f00a f86e 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001992:	f000 fb53 	bl	800203c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800199a:	2301      	movs	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_TIM3_Init+0x110>)
 80019ae:	f009 f997 	bl	800ace0 <HAL_TIM_IC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80019b8:	f000 fb40 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3740      	adds	r7, #64	@ 0x40
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200003b8 	.word	0x200003b8
 80019c8:	40000400 	.word	0x40000400

080019cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b090      	sub	sp, #64	@ 0x40
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a0a:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <MX_TIM4_Init+0x114>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a0e:	4b33      	ldr	r3, [pc, #204]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4294967295;
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a2e:	482b      	ldr	r0, [pc, #172]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a30:	f008 fe0a 	bl	800a648 <HAL_TIM_Base_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001a3a:	f000 faff 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a42:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a44:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4824      	ldr	r0, [pc, #144]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a4c:	f009 f9e4 	bl	800ae18 <HAL_TIM_ConfigClockSource>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001a56:	f000 faf1 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a5a:	4820      	ldr	r0, [pc, #128]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a5c:	f008 fee4 	bl	800a828 <HAL_TIM_IC_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a66:	f000 fae9 	bl	800203c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a6e:	2350      	movs	r3, #80	@ 0x50
 8001a70:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4816      	ldr	r0, [pc, #88]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001a82:	f009 facb 	bl	800b01c <HAL_TIM_SlaveConfigSynchro>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8001a8c:	f000 fad6 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480f      	ldr	r0, [pc, #60]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001aa0:	f009 ffe2 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8001aaa:	f000 fac7 	bl	800203c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_TIM4_Init+0x110>)
 8001ac6:	f009 f90b 	bl	800ace0 <HAL_TIM_IC_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8001ad0:	f000 fab4 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3740      	adds	r7, #64	@ 0x40
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000404 	.word	0x20000404
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b090      	sub	sp, #64	@ 0x40
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b20:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b22:	4a35      	ldr	r2, [pc, #212]	@ (8001bf8 <MX_TIM5_Init+0x114>)
 8001b24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b32:	4b30      	ldr	r3, [pc, #192]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b46:	482b      	ldr	r0, [pc, #172]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b48:	f008 fd7e 	bl	800a648 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001b52:	f000 fa73 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b60:	4619      	mov	r1, r3
 8001b62:	4824      	ldr	r0, [pc, #144]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b64:	f009 f958 	bl	800ae18 <HAL_TIM_ConfigClockSource>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001b6e:	f000 fa65 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001b72:	4820      	ldr	r0, [pc, #128]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b74:	f008 fe58 	bl	800a828 <HAL_TIM_IC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001b7e:	f000 fa5d 	bl	800203c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b82:	2304      	movs	r3, #4
 8001b84:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b86:	2350      	movs	r3, #80	@ 0x50
 8001b88:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4816      	ldr	r0, [pc, #88]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001b9a:	f009 fa3f 	bl	800b01c <HAL_TIM_SlaveConfigSynchro>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8001ba4:	f000 fa4a 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480f      	ldr	r0, [pc, #60]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001bb8:	f009 ff56 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM5_Init+0xe2>
  {
    Error_Handler();
 8001bc2:	f000 fa3b 	bl	800203c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <MX_TIM5_Init+0x110>)
 8001bde:	f009 f87f 	bl	800ace0 <HAL_TIM_IC_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8001be8:	f000 fa28 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	3740      	adds	r7, #64	@ 0x40
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000450 	.word	0x20000450
 8001bf8:	40000c00 	.word	0x40000c00

08001bfc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b090      	sub	sp, #64	@ 0x40
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c38:	4b37      	ldr	r3, [pc, #220]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c3a:	4a38      	ldr	r2, [pc, #224]	@ (8001d1c <MX_TIM8_Init+0x120>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c3e:	4b36      	ldr	r3, [pc, #216]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b34      	ldr	r3, [pc, #208]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c58:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c64:	482c      	ldr	r0, [pc, #176]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c66:	f008 fcef 	bl	800a648 <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001c70:	f000 f9e4 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4825      	ldr	r0, [pc, #148]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c82:	f009 f8c9 	bl	800ae18 <HAL_TIM_ConfigClockSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001c8c:	f000 f9d6 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001c90:	4821      	ldr	r0, [pc, #132]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001c92:	f008 fdc9 	bl	800a828 <HAL_TIM_IC_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001c9c:	f000 f9ce 	bl	800203c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ca4:	2350      	movs	r3, #80	@ 0x50
 8001ca6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4818      	ldr	r0, [pc, #96]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001cb8:	f009 f9b0 	bl	800b01c <HAL_TIM_SlaveConfigSynchro>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001cc2:	f000 f9bb 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480f      	ldr	r0, [pc, #60]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001cda:	f009 fec5 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001ce4:	f000 f9aa 	bl	800203c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cec:	2301      	movs	r3, #1
 8001cee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <MX_TIM8_Init+0x11c>)
 8001d00:	f008 ffee 	bl	800ace0 <HAL_TIM_IC_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001d0a:	f000 f997 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3740      	adds	r7, #64	@ 0x40
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000049c 	.word	0x2000049c
 8001d1c:	40013400 	.word	0x40013400

08001d20 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b090      	sub	sp, #64	@ 0x40
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d5c:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d5e:	4a37      	ldr	r2, [pc, #220]	@ (8001e3c <MX_TIM15_Init+0x11c>)
 8001d60:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001d62:	4b35      	ldr	r3, [pc, #212]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001d6e:	4b32      	ldr	r3, [pc, #200]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d74:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d88:	482b      	ldr	r0, [pc, #172]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001d8a:	f008 fc5d 	bl	800a648 <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001d94:	f000 f952 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001da2:	4619      	mov	r1, r3
 8001da4:	4824      	ldr	r0, [pc, #144]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001da6:	f009 f837 	bl	800ae18 <HAL_TIM_ConfigClockSource>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001db0:	f000 f944 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001db4:	4820      	ldr	r0, [pc, #128]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001db6:	f008 fd37 	bl	800a828 <HAL_TIM_IC_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001dc0:	f000 f93c 	bl	800203c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001dc8:	2350      	movs	r3, #80	@ 0x50
 8001dca:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4817      	ldr	r0, [pc, #92]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001ddc:	f009 f91e 	bl	800b01c <HAL_TIM_SlaveConfigSynchro>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8001de6:	f000 f929 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4619      	mov	r1, r3
 8001df8:	480f      	ldr	r0, [pc, #60]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001dfa:	f009 fe35 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8001e04:	f000 f91a 	bl	800203c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e18:	463b      	mov	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <MX_TIM15_Init+0x118>)
 8001e20:	f008 ff5e 	bl	800ace0 <HAL_TIM_IC_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001e2a:	f000 f907 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	3740      	adds	r7, #64	@ 0x40
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200004e8 	.word	0x200004e8
 8001e3c:	40014000 	.word	0x40014000

08001e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e46:	4a23      	ldr	r2, [pc, #140]	@ (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e88:	4811      	ldr	r0, [pc, #68]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e8a:	f009 feaf 	bl	800bbec <HAL_UART_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e94:	f000 f8d2 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001e9c:	f00a fae6 	bl	800c46c <HAL_UARTEx_SetTxFifoThreshold>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ea6:	f000 f8c9 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4808      	ldr	r0, [pc, #32]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001eae:	f00a fb1b 	bl	800c4e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb8:	f000 f8c0 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <MX_USART1_UART_Init+0x90>)
 8001ebe:	f00a fa9c 	bl	800c3fa <HAL_UARTEx_DisableFifoMode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec8:	f000 f8b8 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000096c 	.word	0x2000096c
 8001ed4:	40013800 	.word	0x40013800

08001ed8 <MX_USB_DRD_FS_PCD_Init>:
  * @brief USB_DRD_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_DRD_FS_PCD_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001ede:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <MX_USB_DRD_FS_PCD_Init+0x60>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001eea:	2202      	movs	r2, #2
 8001eec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 8001f20:	f002 ffc3 	bl	8004eaa <HAL_PCD_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USB_DRD_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001f2a:	f000 f887 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000a00 	.word	0x20000a00
 8001f38:	40016000 	.word	0x40016000

08001f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	@ 0x28
 8001f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f52:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f58:	4a28      	ldr	r2, [pc, #160]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f62:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f76:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f94:	4a19      	ldr	r2, [pc, #100]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb2:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <MX_GPIO_Init+0xc0>)
 8001fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fd0:	480b      	ldr	r0, [pc, #44]	@ (8002000 <MX_GPIO_Init+0xc4>)
 8001fd2:	f002 fd73 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4804      	ldr	r0, [pc, #16]	@ (8002000 <MX_GPIO_Init+0xc4>)
 8001ff0:	f002 fb8c 	bl	800470c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	46020c00 	.word	0x46020c00
 8002000:	42020400 	.word	0x42020400

08002004 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e009      	b.n	800202a <_write+0x26>
  {

    ITM_SendChar(*ptr++);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	60ba      	str	r2, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fff8 	bl	8001014 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbf1      	blt.n	8002016 <_write+0x12>

  }
  return len;
 8002032:	687b      	ldr	r3, [r7, #4]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
 8002044:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <Error_Handler+0x1c>)
 800204a:	f002 fd4f 	bl	8004aec <HAL_GPIO_TogglePin>
	    HAL_Delay (200);
 800204e:	20c8      	movs	r0, #200	@ 0xc8
 8002050:	f001 f800 	bl	8003054 <HAL_Delay>
	    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
 8002054:	bf00      	nop
 8002056:	e7f5      	b.n	8002044 <Error_Handler+0x8>
 8002058:	42020400 	.word	0x42020400

0800205c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_MspInit+0x30>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002068:	4a08      	ldr	r2, [pc, #32]	@ (800208c <HAL_MspInit+0x30>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_MspInit+0x30>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8002080:	f004 fc26 	bl	80068d0 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	46020c00 	.word	0x46020c00

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0ba      	sub	sp, #232	@ 0xe8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	22c0      	movs	r2, #192	@ 0xc0
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00f fc1c 	bl	80118ee <memset>
  if(hi2c->Instance==I2C3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a26      	ldr	r2, [pc, #152]	@ (8002154 <HAL_I2C_MspInit+0xc4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d144      	bne.n	800214a <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80020cc:	2300      	movs	r3, #0
 80020ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4618      	mov	r0, r3
 80020d6:	f005 feb7 	bl	8007e48 <HAL_RCCEx_PeriphCLKConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 80020e0:	f7ff ffac 	bl	800203c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <HAL_I2C_MspInit+0xc8>)
 80020e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <HAL_I2C_MspInit+0xc8>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <HAL_I2C_MspInit+0xc8>)
 80020f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002102:	2303      	movs	r3, #3
 8002104:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002108:	2312      	movs	r3, #18
 800210a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800211a:	2304      	movs	r3, #4
 800211c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <HAL_I2C_MspInit+0xcc>)
 8002128:	f002 faf0 	bl	800470c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_I2C_MspInit+0xc8>)
 800212e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002132:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <HAL_I2C_MspInit+0xc8>)
 8002134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002138:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_I2C_MspInit+0xc8>)
 800213e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800214a:	bf00      	nop
 800214c:	37e8      	adds	r7, #232	@ 0xe8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	46002800 	.word	0x46002800
 8002158:	46020c00 	.word	0x46020c00
 800215c:	42020800 	.word	0x42020800

08002160 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0ae      	sub	sp, #184	@ 0xb8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(htim_base->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002180:	f040 80a7 	bne.w	80022d2 <HAL_TIM_Base_MspInit+0x172>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002184:	4ba9      	ldr	r3, [pc, #676]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 8002186:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800218a:	4aa8      	ldr	r2, [pc, #672]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002194:	4ba5      	ldr	r3, [pc, #660]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 8002196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4ba2      	ldr	r3, [pc, #648]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a8:	4aa0      	ldr	r2, [pc, #640]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021b2:	4b9e      	ldr	r3, [pc, #632]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 80021b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80021be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021da:	2301      	movs	r3, #1
 80021dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4892      	ldr	r0, [pc, #584]	@ (8002430 <HAL_TIM_Base_MspInit+0x2d0>)
 80021e8:	f002 fa90 	bl	800470c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* GPDMA1_REQUEST_TIM2_CH1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80021ec:	2321      	movs	r3, #33	@ 0x21
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_CH1;
 80021f0:	2338      	movs	r3, #56	@ 0x38
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80021f4:	2300      	movs	r3, #0
 80021f6:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f8:	2300      	movs	r3, #0
 80021fa:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80021fc:	2300      	movs	r3, #0
 80021fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002200:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002204:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002206:	2301      	movs	r3, #1
 8002208:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800220a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800220e:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 8002210:	2301      	movs	r3, #1
 8002212:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002218:	2300      	movs	r3, #0
 800221a:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800221c:	2300      	movs	r3, #0
 800221e:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002220:	2300      	movs	r3, #0
 8002222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002224:	2300      	movs	r3, #0
 8002226:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002228:	2300      	movs	r3, #0
 800222a:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800222c:	2300      	movs	r3, #0
 800222e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel2) != HAL_OK)
 8002230:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002234:	497f      	ldr	r1, [pc, #508]	@ (8002434 <HAL_TIM_Base_MspInit+0x2d4>)
 8002236:	4618      	mov	r0, r3
 8002238:	f001 fca6 	bl	8003b88 <HAL_DMAEx_List_BuildNode>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 8002242:	f7ff fefb 	bl	800203c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel2, NULL, &Node_GPDMA1_Channel2) != HAL_OK)
 8002246:	4a7b      	ldr	r2, [pc, #492]	@ (8002434 <HAL_TIM_Base_MspInit+0x2d4>)
 8002248:	2100      	movs	r1, #0
 800224a:	487b      	ldr	r0, [pc, #492]	@ (8002438 <HAL_TIM_Base_MspInit+0x2d8>)
 800224c:	f001 fcb2 	bl	8003bb4 <HAL_DMAEx_List_InsertNode>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_TIM_Base_MspInit+0xfa>
    {
      Error_Handler();
 8002256:	f7ff fef1 	bl	800203c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel2) != HAL_OK)
 800225a:	4877      	ldr	r0, [pc, #476]	@ (8002438 <HAL_TIM_Base_MspInit+0x2d8>)
 800225c:	f001 fd73 	bl	8003d46 <HAL_DMAEx_List_SetCircularMode>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 8002266:	f7ff fee9 	bl	800203c <Error_Handler>
    }

    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800226a:	4b74      	ldr	r3, [pc, #464]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 800226c:	4a74      	ldr	r2, [pc, #464]	@ (8002440 <HAL_TIM_Base_MspInit+0x2e0>)
 800226e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002270:	4b72      	ldr	r3, [pc, #456]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 8002272:	2200      	movs	r2, #0
 8002274:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel2.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002276:	4b71      	ldr	r3, [pc, #452]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 8002278:	2200      	movs	r2, #0
 800227a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel2.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800227c:	4b6f      	ldr	r3, [pc, #444]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel2.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002282:	4b6e      	ldr	r3, [pc, #440]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 8002284:	2200      	movs	r2, #0
 8002286:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel2.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002288:	4b6c      	ldr	r3, [pc, #432]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 800228a:	2281      	movs	r2, #129	@ 0x81
 800228c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800228e:	486b      	ldr	r0, [pc, #428]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 8002290:	f001 faba 	bl	8003808 <HAL_DMAEx_List_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_TIM_Base_MspInit+0x13e>
    {
      Error_Handler();
 800229a:	f7ff fecf 	bl	800203c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel2, &List_GPDMA1_Channel2) != HAL_OK)
 800229e:	4966      	ldr	r1, [pc, #408]	@ (8002438 <HAL_TIM_Base_MspInit+0x2d8>)
 80022a0:	4866      	ldr	r0, [pc, #408]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 80022a2:	f001 fdb1 	bl	8003e08 <HAL_DMAEx_List_LinkQ>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_TIM_Base_MspInit+0x150>
    {
      Error_Handler();
 80022ac:	f7ff fec6 	bl	800203c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel2);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a62      	ldr	r2, [pc, #392]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 80022b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80022b6:	4a61      	ldr	r2, [pc, #388]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80022bc:	2110      	movs	r1, #16
 80022be:	485f      	ldr	r0, [pc, #380]	@ (800243c <HAL_TIM_Base_MspInit+0x2dc>)
 80022c0:	f001 fa41 	bl	8003746 <HAL_DMA_ConfigChannelAttributes>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8390 	beq.w	80029ec <HAL_TIM_Base_MspInit+0x88c>
    {
      Error_Handler();
 80022cc:	f7ff feb6 	bl	800203c <Error_Handler>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80022d0:	e38c      	b.n	80029ec <HAL_TIM_Base_MspInit+0x88c>
  else if(htim_base->Instance==TIM3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002444 <HAL_TIM_Base_MspInit+0x2e4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	f040 80bf 	bne.w	800245c <HAL_TIM_Base_MspInit+0x2fc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022de:	4b53      	ldr	r3, [pc, #332]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 80022e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e4:	4a51      	ldr	r2, [pc, #324]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022ee:	4b4f      	ldr	r3, [pc, #316]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 80022f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 80022fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002302:	4a4a      	ldr	r2, [pc, #296]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800230c:	4b47      	ldr	r3, [pc, #284]	@ (800242c <HAL_TIM_Base_MspInit+0x2cc>)
 800230e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800231a:	2310      	movs	r3, #16
 800231c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002332:	2302      	movs	r3, #2
 8002334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800233c:	4619      	mov	r1, r3
 800233e:	4842      	ldr	r0, [pc, #264]	@ (8002448 <HAL_TIM_Base_MspInit+0x2e8>)
 8002340:	f002 f9e4 	bl	800470c <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002344:	2321      	movs	r3, #33	@ 0x21
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM3_CH1;
 8002348:	233d      	movs	r3, #61	@ 0x3d
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800234c:	2300      	movs	r3, #0
 800234e:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002350:	2300      	movs	r3, #0
 8002352:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002354:	2300      	movs	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002358:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800235c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800235e:	2301      	movs	r3, #1
 8002360:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002362:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002366:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 8002368:	2301      	movs	r3, #1
 800236a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002370:	2300      	movs	r3, #0
 8002372:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002374:	2300      	movs	r3, #0
 8002376:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002378:	2300      	movs	r3, #0
 800237a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800237c:	2300      	movs	r3, #0
 800237e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002380:	2300      	movs	r3, #0
 8002382:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002384:	2300      	movs	r3, #0
 8002386:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8002388:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800238c:	492f      	ldr	r1, [pc, #188]	@ (800244c <HAL_TIM_Base_MspInit+0x2ec>)
 800238e:	4618      	mov	r0, r3
 8002390:	f001 fbfa 	bl	8003b88 <HAL_DMAEx_List_BuildNode>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_TIM_Base_MspInit+0x23e>
      Error_Handler();
 800239a:	f7ff fe4f 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800239e:	4a2b      	ldr	r2, [pc, #172]	@ (800244c <HAL_TIM_Base_MspInit+0x2ec>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	482b      	ldr	r0, [pc, #172]	@ (8002450 <HAL_TIM_Base_MspInit+0x2f0>)
 80023a4:	f001 fc06 	bl	8003bb4 <HAL_DMAEx_List_InsertNode>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_TIM_Base_MspInit+0x252>
      Error_Handler();
 80023ae:	f7ff fe45 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80023b2:	4827      	ldr	r0, [pc, #156]	@ (8002450 <HAL_TIM_Base_MspInit+0x2f0>)
 80023b4:	f001 fcc7 	bl	8003d46 <HAL_DMAEx_List_SetCircularMode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_TIM_Base_MspInit+0x262>
      Error_Handler();
 80023be:	f7ff fe3d 	bl	800203c <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023c4:	4a24      	ldr	r2, [pc, #144]	@ (8002458 <HAL_TIM_Base_MspInit+0x2f8>)
 80023c6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023e2:	2281      	movs	r2, #129	@ 0x81
 80023e4:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80023e6:	481b      	ldr	r0, [pc, #108]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023e8:	f001 fa0e 	bl	8003808 <HAL_DMAEx_List_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_TIM_Base_MspInit+0x296>
      Error_Handler();
 80023f2:	f7ff fe23 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80023f6:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HAL_TIM_Base_MspInit+0x2f0>)
 80023f8:	4816      	ldr	r0, [pc, #88]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 80023fa:	f001 fd05 	bl	8003e08 <HAL_DMAEx_List_LinkQ>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_TIM_Base_MspInit+0x2a8>
      Error_Handler();
 8002404:	f7ff fe1a 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel0);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24
 800240e:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002414:	2110      	movs	r1, #16
 8002416:	480f      	ldr	r0, [pc, #60]	@ (8002454 <HAL_TIM_Base_MspInit+0x2f4>)
 8002418:	f001 f995 	bl	8003746 <HAL_DMA_ConfigChannelAttributes>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 82e4 	beq.w	80029ec <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 8002424:	f7ff fe0a 	bl	800203c <Error_Handler>
}
 8002428:	e2e0      	b.n	80029ec <HAL_TIM_Base_MspInit+0x88c>
 800242a:	bf00      	nop
 800242c:	46020c00 	.word	0x46020c00
 8002430:	42020000 	.word	0x42020000
 8002434:	20000534 	.word	0x20000534
 8002438:	20000558 	.word	0x20000558
 800243c:	20000570 	.word	0x20000570
 8002440:	40020150 	.word	0x40020150
 8002444:	40000400 	.word	0x40000400
 8002448:	42020400 	.word	0x42020400
 800244c:	200005e8 	.word	0x200005e8
 8002450:	2000060c 	.word	0x2000060c
 8002454:	20000624 	.word	0x20000624
 8002458:	40020050 	.word	0x40020050
  else if(htim_base->Instance==TIM4)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4aaa      	ldr	r2, [pc, #680]	@ (800270c <HAL_TIM_Base_MspInit+0x5ac>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f040 80a6 	bne.w	80025b4 <HAL_TIM_Base_MspInit+0x454>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002468:	4ba9      	ldr	r3, [pc, #676]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 800246a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800246e:	4aa8      	ldr	r2, [pc, #672]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002478:	4ba5      	ldr	r3, [pc, #660]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 800247a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	4ba2      	ldr	r3, [pc, #648]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 8002488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248c:	4aa0      	ldr	r2, [pc, #640]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002496:	4b9e      	ldr	r3, [pc, #632]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 8002498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	623b      	str	r3, [r7, #32]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024a4:	2340      	movs	r3, #64	@ 0x40
 80024a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024bc:	2302      	movs	r3, #2
 80024be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024c6:	4619      	mov	r1, r3
 80024c8:	4892      	ldr	r0, [pc, #584]	@ (8002714 <HAL_TIM_Base_MspInit+0x5b4>)
 80024ca:	f002 f91f 	bl	800470c <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80024ce:	2321      	movs	r3, #33	@ 0x21
 80024d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM4_CH1;
 80024d2:	2343      	movs	r3, #67	@ 0x43
 80024d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80024d6:	2300      	movs	r3, #0
 80024d8:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024da:	2300      	movs	r3, #0
 80024dc:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80024de:	2300      	movs	r3, #0
 80024e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80024e2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80024e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80024e8:	2301      	movs	r3, #1
 80024ea:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80024ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024f0:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80024fe:	2300      	movs	r3, #0
 8002500:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002502:	2300      	movs	r3, #0
 8002504:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002506:	2300      	movs	r3, #0
 8002508:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800250e:	2300      	movs	r3, #0
 8002510:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002512:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002516:	4980      	ldr	r1, [pc, #512]	@ (8002718 <HAL_TIM_Base_MspInit+0x5b8>)
 8002518:	4618      	mov	r0, r3
 800251a:	f001 fb35 	bl	8003b88 <HAL_DMAEx_List_BuildNode>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_TIM_Base_MspInit+0x3c8>
      Error_Handler();
 8002524:	f7ff fd8a 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002528:	4a7b      	ldr	r2, [pc, #492]	@ (8002718 <HAL_TIM_Base_MspInit+0x5b8>)
 800252a:	2100      	movs	r1, #0
 800252c:	487b      	ldr	r0, [pc, #492]	@ (800271c <HAL_TIM_Base_MspInit+0x5bc>)
 800252e:	f001 fb41 	bl	8003bb4 <HAL_DMAEx_List_InsertNode>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_TIM_Base_MspInit+0x3dc>
      Error_Handler();
 8002538:	f7ff fd80 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800253c:	4877      	ldr	r0, [pc, #476]	@ (800271c <HAL_TIM_Base_MspInit+0x5bc>)
 800253e:	f001 fc02 	bl	8003d46 <HAL_DMAEx_List_SetCircularMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_TIM_Base_MspInit+0x3ec>
      Error_Handler();
 8002548:	f7ff fd78 	bl	800203c <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800254c:	4b74      	ldr	r3, [pc, #464]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 800254e:	4a75      	ldr	r2, [pc, #468]	@ (8002724 <HAL_TIM_Base_MspInit+0x5c4>)
 8002550:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002552:	4b73      	ldr	r3, [pc, #460]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 8002554:	2200      	movs	r2, #0
 8002556:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002558:	4b71      	ldr	r3, [pc, #452]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 800255a:	2200      	movs	r2, #0
 800255c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800255e:	4b70      	ldr	r3, [pc, #448]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 8002560:	2200      	movs	r2, #0
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002564:	4b6e      	ldr	r3, [pc, #440]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800256a:	4b6d      	ldr	r3, [pc, #436]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 800256c:	2281      	movs	r2, #129	@ 0x81
 800256e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002570:	486b      	ldr	r0, [pc, #428]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 8002572:	f001 f949 	bl	8003808 <HAL_DMAEx_List_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_TIM_Base_MspInit+0x420>
      Error_Handler();
 800257c:	f7ff fd5e 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002580:	4966      	ldr	r1, [pc, #408]	@ (800271c <HAL_TIM_Base_MspInit+0x5bc>)
 8002582:	4867      	ldr	r0, [pc, #412]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 8002584:	f001 fc40 	bl	8003e08 <HAL_DMAEx_List_LinkQ>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_TIM_Base_MspInit+0x432>
      Error_Handler();
 800258e:	f7ff fd55 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a62      	ldr	r2, [pc, #392]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24
 8002598:	4a61      	ldr	r2, [pc, #388]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800259e:	2110      	movs	r1, #16
 80025a0:	485f      	ldr	r0, [pc, #380]	@ (8002720 <HAL_TIM_Base_MspInit+0x5c0>)
 80025a2:	f001 f8d0 	bl	8003746 <HAL_DMA_ConfigChannelAttributes>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 821f 	beq.w	80029ec <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 80025ae:	f7ff fd45 	bl	800203c <Error_Handler>
}
 80025b2:	e21b      	b.n	80029ec <HAL_TIM_Base_MspInit+0x88c>
  else if(htim_base->Instance==TIM5)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002728 <HAL_TIM_Base_MspInit+0x5c8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	f040 80c0 	bne.w	8002740 <HAL_TIM_Base_MspInit+0x5e0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 80025c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025c6:	4a52      	ldr	r2, [pc, #328]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80025d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 80025d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	4b4c      	ldr	r3, [pc, #304]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 80025e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025ee:	4b48      	ldr	r3, [pc, #288]	@ (8002710 <HAL_TIM_Base_MspInit+0x5b0>)
 80025f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002614:	2302      	movs	r3, #2
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800261e:	4619      	mov	r1, r3
 8002620:	4842      	ldr	r0, [pc, #264]	@ (800272c <HAL_TIM_Base_MspInit+0x5cc>)
 8002622:	f002 f873 	bl	800470c <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002626:	2321      	movs	r3, #33	@ 0x21
 8002628:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM5_CH1;
 800262a:	2348      	movs	r3, #72	@ 0x48
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800262e:	2300      	movs	r3, #0
 8002630:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002632:	2300      	movs	r3, #0
 8002634:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002636:	2300      	movs	r3, #0
 8002638:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800263a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800263e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002640:	2301      	movs	r3, #1
 8002642:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002648:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 800264a:	2301      	movs	r3, #1
 800264c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002652:	2300      	movs	r3, #0
 8002654:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002656:	2300      	movs	r3, #0
 8002658:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 800265a:	2300      	movs	r3, #0
 800265c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800265e:	2300      	movs	r3, #0
 8002660:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002662:	2300      	movs	r3, #0
 8002664:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002666:	2300      	movs	r3, #0
 8002668:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 800266a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800266e:	4930      	ldr	r1, [pc, #192]	@ (8002730 <HAL_TIM_Base_MspInit+0x5d0>)
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fa89 	bl	8003b88 <HAL_DMAEx_List_BuildNode>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_TIM_Base_MspInit+0x520>
      Error_Handler();
 800267c:	f7ff fcde 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002680:	4a2b      	ldr	r2, [pc, #172]	@ (8002730 <HAL_TIM_Base_MspInit+0x5d0>)
 8002682:	2100      	movs	r1, #0
 8002684:	482b      	ldr	r0, [pc, #172]	@ (8002734 <HAL_TIM_Base_MspInit+0x5d4>)
 8002686:	f001 fa95 	bl	8003bb4 <HAL_DMAEx_List_InsertNode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_TIM_Base_MspInit+0x534>
      Error_Handler();
 8002690:	f7ff fcd4 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002694:	4827      	ldr	r0, [pc, #156]	@ (8002734 <HAL_TIM_Base_MspInit+0x5d4>)
 8002696:	f001 fb56 	bl	8003d46 <HAL_DMAEx_List_SetCircularMode>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_TIM_Base_MspInit+0x544>
      Error_Handler();
 80026a0:	f7ff fccc 	bl	800203c <Error_Handler>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80026a4:	4b24      	ldr	r3, [pc, #144]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026a6:	4a25      	ldr	r2, [pc, #148]	@ (800273c <HAL_TIM_Base_MspInit+0x5dc>)
 80026a8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80026aa:	4b23      	ldr	r3, [pc, #140]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80026b0:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80026b6:	4b20      	ldr	r3, [pc, #128]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80026c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026c4:	2281      	movs	r2, #129	@ 0x81
 80026c6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026c8:	481b      	ldr	r0, [pc, #108]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026ca:	f001 f89d 	bl	8003808 <HAL_DMAEx_List_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_TIM_Base_MspInit+0x578>
      Error_Handler();
 80026d4:	f7ff fcb2 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80026d8:	4916      	ldr	r1, [pc, #88]	@ (8002734 <HAL_TIM_Base_MspInit+0x5d4>)
 80026da:	4817      	ldr	r0, [pc, #92]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026dc:	f001 fb94 	bl	8003e08 <HAL_DMAEx_List_LinkQ>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_TIM_Base_MspInit+0x58a>
      Error_Handler();
 80026e6:	f7ff fca9 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel3);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80026f6:	2110      	movs	r1, #16
 80026f8:	480f      	ldr	r0, [pc, #60]	@ (8002738 <HAL_TIM_Base_MspInit+0x5d8>)
 80026fa:	f001 f824 	bl	8003746 <HAL_DMA_ConfigChannelAttributes>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8173 	beq.w	80029ec <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 8002706:	f7ff fc99 	bl	800203c <Error_Handler>
}
 800270a:	e16f      	b.n	80029ec <HAL_TIM_Base_MspInit+0x88c>
 800270c:	40000800 	.word	0x40000800
 8002710:	46020c00 	.word	0x46020c00
 8002714:	42020400 	.word	0x42020400
 8002718:	2000069c 	.word	0x2000069c
 800271c:	200006c0 	.word	0x200006c0
 8002720:	200006d8 	.word	0x200006d8
 8002724:	400200d0 	.word	0x400200d0
 8002728:	40000c00 	.word	0x40000c00
 800272c:	42020000 	.word	0x42020000
 8002730:	20000750 	.word	0x20000750
 8002734:	20000774 	.word	0x20000774
 8002738:	2000078c 	.word	0x2000078c
 800273c:	400201d0 	.word	0x400201d0
  else if(htim_base->Instance==TIM8)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4aab      	ldr	r2, [pc, #684]	@ (80029f4 <HAL_TIM_Base_MspInit+0x894>)
 8002746:	4293      	cmp	r3, r2
 8002748:	f040 80a6 	bne.w	8002898 <HAL_TIM_Base_MspInit+0x738>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800274c:	4baa      	ldr	r3, [pc, #680]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 800274e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002752:	4aa9      	ldr	r2, [pc, #676]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 8002754:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002758:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800275c:	4ba6      	ldr	r3, [pc, #664]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 800275e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4ba3      	ldr	r3, [pc, #652]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 800276c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002770:	4aa1      	ldr	r2, [pc, #644]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800277a:	4b9f      	ldr	r3, [pc, #636]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002788:	2340      	movs	r3, #64	@ 0x40
 800278a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027a0:	2303      	movs	r3, #3
 80027a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027aa:	4619      	mov	r1, r3
 80027ac:	4893      	ldr	r0, [pc, #588]	@ (80029fc <HAL_TIM_Base_MspInit+0x89c>)
 80027ae:	f001 ffad 	bl	800470c <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80027b2:	2321      	movs	r3, #33	@ 0x21
 80027b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM8_CH1;
 80027b6:	2331      	movs	r3, #49	@ 0x31
 80027b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80027ba:	2300      	movs	r3, #0
 80027bc:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027be:	2300      	movs	r3, #0
 80027c0:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80027c2:	2300      	movs	r3, #0
 80027c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80027c6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80027ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80027cc:	2301      	movs	r3, #1
 80027ce:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80027d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027d4:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80027de:	2300      	movs	r3, #0
 80027e0:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80027e2:	2300      	movs	r3, #0
 80027e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80027ea:	2300      	movs	r3, #0
 80027ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80027f2:	2300      	movs	r3, #0
 80027f4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 80027f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027fa:	4981      	ldr	r1, [pc, #516]	@ (8002a00 <HAL_TIM_Base_MspInit+0x8a0>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 f9c3 	bl	8003b88 <HAL_DMAEx_List_BuildNode>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_TIM_Base_MspInit+0x6ac>
      Error_Handler();
 8002808:	f7ff fc18 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 800280c:	4a7c      	ldr	r2, [pc, #496]	@ (8002a00 <HAL_TIM_Base_MspInit+0x8a0>)
 800280e:	2100      	movs	r1, #0
 8002810:	487c      	ldr	r0, [pc, #496]	@ (8002a04 <HAL_TIM_Base_MspInit+0x8a4>)
 8002812:	f001 f9cf 	bl	8003bb4 <HAL_DMAEx_List_InsertNode>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_TIM_Base_MspInit+0x6c0>
      Error_Handler();
 800281c:	f7ff fc0e 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8002820:	4878      	ldr	r0, [pc, #480]	@ (8002a04 <HAL_TIM_Base_MspInit+0x8a4>)
 8002822:	f001 fa90 	bl	8003d46 <HAL_DMAEx_List_SetCircularMode>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_TIM_Base_MspInit+0x6d0>
      Error_Handler();
 800282c:	f7ff fc06 	bl	800203c <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8002830:	4b75      	ldr	r3, [pc, #468]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 8002832:	4a76      	ldr	r2, [pc, #472]	@ (8002a0c <HAL_TIM_Base_MspInit+0x8ac>)
 8002834:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002836:	4b74      	ldr	r3, [pc, #464]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 8002838:	2200      	movs	r2, #0
 800283a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800283c:	4b72      	ldr	r3, [pc, #456]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 800283e:	2200      	movs	r2, #0
 8002840:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002842:	4b71      	ldr	r3, [pc, #452]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800284e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 8002850:	2281      	movs	r2, #129	@ 0x81
 8002852:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8002854:	486c      	ldr	r0, [pc, #432]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 8002856:	f000 ffd7 	bl	8003808 <HAL_DMAEx_List_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_TIM_Base_MspInit+0x704>
      Error_Handler();
 8002860:	f7ff fbec 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 8002864:	4967      	ldr	r1, [pc, #412]	@ (8002a04 <HAL_TIM_Base_MspInit+0x8a4>)
 8002866:	4868      	ldr	r0, [pc, #416]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 8002868:	f001 face 	bl	8003e08 <HAL_DMAEx_List_LinkQ>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_TIM_Base_MspInit+0x716>
      Error_Handler();
 8002872:	f7ff fbe3 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel4);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a63      	ldr	r2, [pc, #396]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
 800287c:	4a62      	ldr	r2, [pc, #392]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002882:	2110      	movs	r1, #16
 8002884:	4860      	ldr	r0, [pc, #384]	@ (8002a08 <HAL_TIM_Base_MspInit+0x8a8>)
 8002886:	f000 ff5e 	bl	8003746 <HAL_DMA_ConfigChannelAttributes>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80ad 	beq.w	80029ec <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 8002892:	f7ff fbd3 	bl	800203c <Error_Handler>
}
 8002896:	e0a9      	b.n	80029ec <HAL_TIM_Base_MspInit+0x88c>
  else if(htim_base->Instance==TIM15)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5c      	ldr	r2, [pc, #368]	@ (8002a10 <HAL_TIM_Base_MspInit+0x8b0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	f040 80a4 	bne.w	80029ec <HAL_TIM_Base_MspInit+0x88c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028a4:	4b54      	ldr	r3, [pc, #336]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 80028a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028aa:	4a53      	ldr	r2, [pc, #332]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80028b4:	4b50      	ldr	r3, [pc, #320]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 80028b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	4b4d      	ldr	r3, [pc, #308]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c8:	4a4b      	ldr	r2, [pc, #300]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028d2:	4b49      	ldr	r3, [pc, #292]	@ (80029f8 <HAL_TIM_Base_MspInit+0x898>)
 80028d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028e0:	2304      	movs	r3, #4
 80028e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80028f8:	230e      	movs	r3, #14
 80028fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002902:	4619      	mov	r1, r3
 8002904:	4843      	ldr	r0, [pc, #268]	@ (8002a14 <HAL_TIM_Base_MspInit+0x8b4>)
 8002906:	f001 ff01 	bl	800470c <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800290a:	2321      	movs	r3, #33	@ 0x21
 800290c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM15_CH1;
 800290e:	234e      	movs	r3, #78	@ 0x4e
 8002910:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002912:	2300      	movs	r3, #0
 8002914:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002916:	2300      	movs	r3, #0
 8002918:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800291a:	2300      	movs	r3, #0
 800291c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800291e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002922:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002924:	2301      	movs	r3, #1
 8002926:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002928:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800292c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002936:	2300      	movs	r3, #0
 8002938:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800293a:	2300      	movs	r3, #0
 800293c:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 800293e:	2300      	movs	r3, #0
 8002940:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002942:	2300      	movs	r3, #0
 8002944:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800294a:	2300      	movs	r3, #0
 800294c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 800294e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002952:	4931      	ldr	r1, [pc, #196]	@ (8002a18 <HAL_TIM_Base_MspInit+0x8b8>)
 8002954:	4618      	mov	r0, r3
 8002956:	f001 f917 	bl	8003b88 <HAL_DMAEx_List_BuildNode>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_TIM_Base_MspInit+0x804>
      Error_Handler();
 8002960:	f7ff fb6c 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 8002964:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <HAL_TIM_Base_MspInit+0x8b8>)
 8002966:	2100      	movs	r1, #0
 8002968:	482c      	ldr	r0, [pc, #176]	@ (8002a1c <HAL_TIM_Base_MspInit+0x8bc>)
 800296a:	f001 f923 	bl	8003bb4 <HAL_DMAEx_List_InsertNode>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_TIM_Base_MspInit+0x818>
      Error_Handler();
 8002974:	f7ff fb62 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8002978:	4828      	ldr	r0, [pc, #160]	@ (8002a1c <HAL_TIM_Base_MspInit+0x8bc>)
 800297a:	f001 f9e4 	bl	8003d46 <HAL_DMAEx_List_SetCircularMode>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_TIM_Base_MspInit+0x828>
      Error_Handler();
 8002984:	f7ff fb5a 	bl	800203c <Error_Handler>
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8002988:	4b25      	ldr	r3, [pc, #148]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 800298a:	4a26      	ldr	r2, [pc, #152]	@ (8002a24 <HAL_TIM_Base_MspInit+0x8c4>)
 800298c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800298e:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 8002990:	2200      	movs	r2, #0
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002994:	4b22      	ldr	r3, [pc, #136]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 8002996:	2200      	movs	r2, #0
 8002998:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800299a:	4b21      	ldr	r3, [pc, #132]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 800299c:	2200      	movs	r2, #0
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80029a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80029a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 80029a8:	2281      	movs	r2, #129	@ 0x81
 80029aa:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 80029ac:	481c      	ldr	r0, [pc, #112]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 80029ae:	f000 ff2b 	bl	8003808 <HAL_DMAEx_List_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_TIM_Base_MspInit+0x85c>
      Error_Handler();
 80029b8:	f7ff fb40 	bl	800203c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 80029bc:	4917      	ldr	r1, [pc, #92]	@ (8002a1c <HAL_TIM_Base_MspInit+0x8bc>)
 80029be:	4818      	ldr	r0, [pc, #96]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 80029c0:	f001 fa22 	bl	8003e08 <HAL_DMAEx_List_LinkQ>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_TIM_Base_MspInit+0x86e>
      Error_Handler();
 80029ca:	f7ff fb37 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel5);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 80029d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80029d4:	4a12      	ldr	r2, [pc, #72]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 80029da:	2110      	movs	r1, #16
 80029dc:	4810      	ldr	r0, [pc, #64]	@ (8002a20 <HAL_TIM_Base_MspInit+0x8c0>)
 80029de:	f000 feb2 	bl	8003746 <HAL_DMA_ConfigChannelAttributes>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 80029e8:	f7ff fb28 	bl	800203c <Error_Handler>
}
 80029ec:	bf00      	nop
 80029ee:	37b8      	adds	r7, #184	@ 0xb8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40013400 	.word	0x40013400
 80029f8:	46020c00 	.word	0x46020c00
 80029fc:	42020800 	.word	0x42020800
 8002a00:	20000804 	.word	0x20000804
 8002a04:	20000828 	.word	0x20000828
 8002a08:	20000840 	.word	0x20000840
 8002a0c:	40020250 	.word	0x40020250
 8002a10:	40014000 	.word	0x40014000
 8002a14:	42020000 	.word	0x42020000
 8002a18:	200008b8 	.word	0x200008b8
 8002a1c:	200008dc 	.word	0x200008dc
 8002a20:	200008f4 	.word	0x200008f4
 8002a24:	400202d0 	.word	0x400202d0

08002a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	22c0      	movs	r2, #192	@ 0xc0
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f00e ff50 	bl	80118ee <memset>
  if(huart->Instance==USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a26      	ldr	r2, [pc, #152]	@ (8002aec <HAL_UART_MspInit+0xc4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d145      	bne.n	8002ae4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a58:	f04f 0201 	mov.w	r2, #1
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a64:	2300      	movs	r3, #0
 8002a66:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 f9eb 	bl	8007e48 <HAL_RCCEx_PeriphCLKConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002a78:	f7ff fae0 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <HAL_UART_MspInit+0xc8>)
 8002a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a82:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_UART_MspInit+0xc8>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_UART_MspInit+0xc8>)
 8002a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_UART_MspInit+0xc8>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aa0:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <HAL_UART_MspInit+0xc8>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aaa:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_UART_MspInit+0xc8>)
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ab8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002abc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4805      	ldr	r0, [pc, #20]	@ (8002af4 <HAL_UART_MspInit+0xcc>)
 8002ae0:	f001 fe14 	bl	800470c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ae4:	bf00      	nop
 8002ae6:	37e8      	adds	r7, #232	@ 0xe8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013800 	.word	0x40013800
 8002af0:	46020c00 	.word	0x46020c00
 8002af4:	42020000 	.word	0x42020000

08002af8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0b4      	sub	sp, #208	@ 0xd0
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	22c0      	movs	r2, #192	@ 0xc0
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00e fef0 	bl	80118ee <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_PCD_MspInit+0xc4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d14c      	bne.n	8002bb2 <HAL_PCD_MspInit+0xba>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002b18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f005 f98a 	bl	8007e48 <HAL_RCCEx_PeriphCLKConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8002b3a:	f7ff fa7f 	bl	800203c <Error_Handler>
    }

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d119      	bne.n	8002b80 <HAL_PCD_MspInit+0x88>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b52:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002b5c:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002b6a:	f003 feb1 	bl	80068d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b74:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002b7e:	e001      	b.n	8002b84 <HAL_PCD_MspInit+0x8c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002b80:	f003 fea6 	bl	80068d0 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b90:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002b94:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <HAL_PCD_MspInit+0xc8>)
 8002b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2049      	movs	r0, #73	@ 0x49
 8002ba8:	f000 fb30 	bl	800320c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8002bac:	2049      	movs	r0, #73	@ 0x49
 8002bae:	f000 fb47 	bl	8003240 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8002bb2:	bf00      	nop
 8002bb4:	37d0      	adds	r7, #208	@ 0xd0
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40016000 	.word	0x40016000
 8002bc0:	46020c00 	.word	0x46020c00

08002bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <NMI_Handler+0x4>

08002bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <HardFault_Handler+0x4>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <MemManage_Handler+0x4>

08002bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1a:	f000 f9fb 	bl	8003014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002c2a:	f000 fc2b 	bl	8003484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000624 	.word	0x20000624

08002c38 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002c3e:	f000 fc21 	bl	8003484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200006d8 	.word	0x200006d8

08002c4c <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002c50:	4802      	ldr	r0, [pc, #8]	@ (8002c5c <GPDMA1_Channel2_IRQHandler+0x10>)
 8002c52:	f000 fc17 	bl	8003484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000570 	.word	0x20000570

08002c60 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002c64:	4802      	ldr	r0, [pc, #8]	@ (8002c70 <GPDMA1_Channel3_IRQHandler+0x10>)
 8002c66:	f000 fc0d 	bl	8003484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000078c 	.word	0x2000078c

08002c74 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <GPDMA1_Channel4_IRQHandler+0x10>)
 8002c7a:	f000 fc03 	bl	8003484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000840 	.word	0x20000840

08002c88 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <GPDMA1_Channel5_IRQHandler+0x10>)
 8002c8e:	f000 fbf9 	bl	8003484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200008f4 	.word	0x200008f4

08002c9c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt.
  */
void USB_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <USB_IRQHandler+0x10>)
 8002ca2:	f002 fa25 	bl	80050f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000a00 	.word	0x20000a00

08002cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return 1;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_kill>:

int _kill(int pid, int sig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cca:	f00e fe63 	bl	8011994 <__errno>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2216      	movs	r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_exit>:

void _exit (int status)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cf2:	bf00      	nop
 8002cf4:	e7fd      	b.n	8002cf2 <_exit+0x12>

08002cf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e00a      	b.n	8002d1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d08:	f3af 8000 	nop.w
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	60ba      	str	r2, [r7, #8]
 8002d14:	b2ca      	uxtb	r2, r1
 8002d16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	dbf0      	blt.n	8002d08 <_read+0x12>
  }

  return len;
 8002d26:	687b      	ldr	r3, [r7, #4]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d58:	605a      	str	r2, [r3, #4]
  return 0;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_isatty>:

int _isatty(int file)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d70:	2301      	movs	r3, #1
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <_sbrk+0x5c>)
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <_sbrk+0x60>)
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dac:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <_sbrk+0x64>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	@ (8002e00 <_sbrk+0x68>)
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dba:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d207      	bcs.n	8002dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc8:	f00e fde4 	bl	8011994 <__errno>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	220c      	movs	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e009      	b.n	8002dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <_sbrk+0x64>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dde:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <_sbrk+0x64>)
 8002de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20040000 	.word	0x20040000
 8002df8:	00000800 	.word	0x00000800
 8002dfc:	20000fcc 	.word	0x20000fcc
 8002e00:	20001848 	.word	0x20001848

08002e04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <SystemInit+0x68>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0e:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <SystemInit+0x68>)
 8002e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002e18:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <SystemInit+0x6c>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	@ (8002e70 <SystemInit+0x6c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002e24:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <SystemInit+0x6c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <SystemInit+0x6c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002e30:	4b0f      	ldr	r3, [pc, #60]	@ (8002e70 <SystemInit+0x6c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0e      	ldr	r2, [pc, #56]	@ (8002e70 <SystemInit+0x6c>)
 8002e36:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002e3a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <SystemInit+0x6c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002e46:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <SystemInit+0x6c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <SystemInit+0x6c>)
 8002e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002e52:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <SystemInit+0x6c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <SystemInit+0x68>)
 8002e5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e5e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00
 8002e70:	46020c00 	.word	0x46020c00

08002e74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e74:	480d      	ldr	r0, [pc, #52]	@ (8002eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e78:	f7ff ffc4 	bl	8002e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e7c:	480c      	ldr	r0, [pc, #48]	@ (8002eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e7e:	490d      	ldr	r1, [pc, #52]	@ (8002eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e80:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <LoopForever+0xe>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e84:	e002      	b.n	8002e8c <LoopCopyDataInit>

08002e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8a:	3304      	adds	r3, #4

08002e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e90:	d3f9      	bcc.n	8002e86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec0 <LoopForever+0x16>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e98:	e001      	b.n	8002e9e <LoopFillZerobss>

08002e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e9c:	3204      	adds	r2, #4

08002e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea0:	d3fb      	bcc.n	8002e9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ea2:	f00e fd7d 	bl	80119a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ea6:	f7fe fa3d 	bl	8001324 <main>

08002eaa <LoopForever>:

LoopForever:
    b LoopForever
 8002eaa:	e7fe      	b.n	8002eaa <LoopForever>
  ldr   r0, =_estack
 8002eac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb4:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8002eb8:	08015820 	.word	0x08015820
  ldr r2, =_sbss
 8002ebc:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8002ec0:	20001844 	.word	0x20001844

08002ec4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec4:	e7fe      	b.n	8002ec4 <ADC1_IRQHandler>
	...

08002ec8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <HAL_Init+0x50>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <HAL_Init+0x50>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed8:	2003      	movs	r0, #3
 8002eda:	f000 f98c 	bl	80031f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ede:	f004 fdd5 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_Init+0x54>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	490c      	ldr	r1, [pc, #48]	@ (8002f20 <HAL_Init+0x58>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f24 <HAL_Init+0x5c>)
 8002ef6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ef8:	2004      	movs	r0, #4
 8002efa:	f000 f9d1 	bl	80032a0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002efe:	200f      	movs	r0, #15
 8002f00:	f000 f812 	bl	8002f28 <HAL_InitTick>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e002      	b.n	8002f14 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f0e:	f7ff f8a5 	bl	800205c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	46020c00 	.word	0x46020c00
 8002f20:	080152e0 	.word	0x080152e0
 8002f24:	20000030 	.word	0x20000030

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002f34:	4b33      	ldr	r3, [pc, #204]	@ (8003004 <HAL_InitTick+0xdc>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e05c      	b.n	8002ffa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002f40:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <HAL_InitTick+0xe0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d10c      	bne.n	8002f66 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800300c <HAL_InitTick+0xe4>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b2c      	ldr	r3, [pc, #176]	@ (8003004 <HAL_InitTick+0xdc>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e037      	b.n	8002fd6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002f66:	f000 f9f3 	bl	8003350 <HAL_SYSTICK_GetCLKSourceConfig>
 8002f6a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d023      	beq.n	8002fba <HAL_InitTick+0x92>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d82d      	bhi.n	8002fd4 <HAL_InitTick+0xac>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_InitTick+0x5e>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d00d      	beq.n	8002fa0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002f84:	e026      	b.n	8002fd4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002f86:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_InitTick+0xe4>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <HAL_InitTick+0xdc>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
        break;
 8002f9e:	e01a      	b.n	8002fd6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <HAL_InitTick+0xdc>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	60fb      	str	r3, [r7, #12]
        break;
 8002fb8:	e00d      	b.n	8002fd6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_InitTick+0xdc>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	60fb      	str	r3, [r7, #12]
        break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_InitTick+0xae>
        break;
 8002fd4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f940 	bl	800325c <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e009      	b.n	8002ffa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	f04f 30ff 	mov.w	r0, #4294967295
 8002fee:	f000 f90d 	bl	800320c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002ff2:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <HAL_InitTick+0xe8>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000038 	.word	0x20000038
 8003008:	e000e010 	.word	0xe000e010
 800300c:	20000030 	.word	0x20000030
 8003010:	20000034 	.word	0x20000034

08003014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_IncTick+0x20>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_IncTick+0x24>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4413      	add	r3, r2
 8003024:	4a04      	ldr	r2, [pc, #16]	@ (8003038 <HAL_IncTick+0x24>)
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000038 	.word	0x20000038
 8003038:	20000fd0 	.word	0x20000fd0

0800303c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return uwTick;
 8003040:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <HAL_GetTick+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000fd0 	.word	0x20000fd0

08003054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff ffee 	bl	800303c <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d005      	beq.n	800307a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_Delay+0x44>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800307a:	bf00      	nop
 800307c:	f7ff ffde 	bl	800303c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d8f7      	bhi.n	800307c <HAL_Delay+0x28>
  {
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000038 	.word	0x20000038

0800309c <__NVIC_SetPriorityGrouping>:
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ac:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ce:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_GetPriorityGrouping>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e8:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <__NVIC_GetPriorityGrouping+0x18>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 0307 	and.w	r3, r3, #7
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_EnableIRQ>:
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db0b      	blt.n	800312a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4907      	ldr	r1, [pc, #28]	@ (8003138 <__NVIC_EnableIRQ+0x38>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2001      	movs	r0, #1
 8003122:	fa00 f202 	lsl.w	r2, r0, r2
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000e100 	.word	0xe000e100

0800313c <__NVIC_SetPriority>:
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	2b00      	cmp	r3, #0
 800314e:	db0a      	blt.n	8003166 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	490c      	ldr	r1, [pc, #48]	@ (8003188 <__NVIC_SetPriority+0x4c>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	0112      	lsls	r2, r2, #4
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	440b      	add	r3, r1
 8003160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003164:	e00a      	b.n	800317c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4908      	ldr	r1, [pc, #32]	@ (800318c <__NVIC_SetPriority+0x50>)
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3b04      	subs	r3, #4
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	440b      	add	r3, r1
 800317a:	761a      	strb	r2, [r3, #24]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <NVIC_EncodePriority>:
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f1c3 0307 	rsb	r3, r3, #7
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	bf28      	it	cs
 80031ae:	2304      	movcs	r3, #4
 80031b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d902      	bls.n	80031c0 <NVIC_EncodePriority+0x30>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3b03      	subs	r3, #3
 80031be:	e000      	b.n	80031c2 <NVIC_EncodePriority+0x32>
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	401a      	ands	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d8:	f04f 31ff 	mov.w	r1, #4294967295
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43d9      	mvns	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	4313      	orrs	r3, r2
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3724      	adds	r7, #36	@ 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ff4c 	bl	800309c <__NVIC_SetPriorityGrouping>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800321a:	f7ff ff63 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 800321e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	6978      	ldr	r0, [r7, #20]
 8003226:	f7ff ffb3 	bl	8003190 <NVIC_EncodePriority>
 800322a:	4602      	mov	r2, r0
 800322c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff82 	bl	800313c <__NVIC_SetPriority>
}
 8003238:	bf00      	nop
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff56 	bl	8003100 <__NVIC_EnableIRQ>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800326c:	d301      	bcc.n	8003272 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800326e:	2301      	movs	r3, #1
 8003270:	e00d      	b.n	800328e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003272:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <HAL_SYSTICK_Config+0x40>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800327a:	4b08      	ldr	r3, [pc, #32]	@ (800329c <HAL_SYSTICK_Config+0x40>)
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_SYSTICK_Config+0x40>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a05      	ldr	r2, [pc, #20]	@ (800329c <HAL_SYSTICK_Config+0x40>)
 8003286:	f043 0303 	orr.w	r3, r3, #3
 800328a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e010 	.word	0xe000e010

080032a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d844      	bhi.n	8003338 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80032ae:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032d7 	.word	0x080032d7
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	08003317 	.word	0x08003317
 80032c0:	08003339 	.word	0x08003339
 80032c4:	080032c9 	.word	0x080032c9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80032c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	6013      	str	r3, [r2, #0]
      break;
 80032d4:	e031      	b.n	800333a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80032d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032dc:	f023 0304 	bic.w	r3, r3, #4
 80032e0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80032e2:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e8:	4a18      	ldr	r2, [pc, #96]	@ (800334c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80032ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80032f2:	e022      	b.n	800333a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a13      	ldr	r2, [pc, #76]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032fa:	f023 0304 	bic.w	r3, r3, #4
 80032fe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003300:	4b12      	ldr	r3, [pc, #72]	@ (800334c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003306:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800330a:	4a10      	ldr	r2, [pc, #64]	@ (800334c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800330c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003314:	e011      	b.n	800333a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003316:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003322:	4b0a      	ldr	r3, [pc, #40]	@ (800334c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003328:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800332c:	4a07      	ldr	r2, [pc, #28]	@ (800334c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800332e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003336:	e000      	b.n	800333a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003338:	bf00      	nop
  }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010
 800334c:	46020c00 	.word	0x46020c00

08003350 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003356:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003362:	2304      	movs	r3, #4
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e021      	b.n	80033ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003368:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800336a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800336e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003372:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800337a:	d011      	beq.n	80033a0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003382:	d810      	bhi.n	80033a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003390:	d003      	beq.n	800339a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003392:	e008      	b.n	80033a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
        break;
 8003398:	e008      	b.n	80033ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800339a:	2301      	movs	r3, #1
 800339c:	607b      	str	r3, [r7, #4]
        break;
 800339e:	e005      	b.n	80033ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80033a0:	2302      	movs	r3, #2
 80033a2:	607b      	str	r3, [r7, #4]
        break;
 80033a4:	e002      	b.n	80033ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
        break;
 80033aa:	bf00      	nop
    }
  }
  return systick_source;
 80033ac:	687b      	ldr	r3, [r7, #4]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e010 	.word	0xe000e010
 80033c0:	46020c00 	.word	0x46020c00

080033c4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04f      	b.n	800347c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Start_IT+0x26>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e048      	b.n	800347c <HAL_DMA_Start_IT+0xb8>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d136      	bne.n	800346c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f9d3 	bl	80037be <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003426:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003456:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e007      	b.n	800347c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	@ 0x40
 8003470:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003494:	f023 030f 	bic.w	r3, r3, #15
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a2:	3b50      	subs	r3, #80	@ 0x50
 80034a4:	09db      	lsrs	r3, r3, #7
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2201      	movs	r2, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 813b 	beq.w	800373a <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d011      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003500:	2b00      	cmp	r3, #0
 8003502:	d011      	beq.n	8003528 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800351a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d011      	beq.n	800355a <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800354c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	f043 0204 	orr.w	r2, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800357e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003584:	f043 0208 	orr.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003596:	2b00      	cmp	r3, #0
 8003598:	d013      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00c      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b0:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d04c      	beq.n	800366a <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d045      	beq.n	800366a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035e6:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d12e      	bne.n	8003652 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003602:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0202 	orr.w	r2, r2, #2
 8003612:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362c:	2201      	movs	r2, #1
 800362e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d07a      	beq.n	800373e <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
        }

        return;
 8003650:	e075      	b.n	800373e <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2205      	movs	r2, #5
 8003656:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d039      	beq.n	80036ec <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d032      	beq.n	80036ec <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d116      	bne.n	80036ca <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d111      	bne.n	80036ca <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b2:	2201      	movs	r2, #1
 80036b4:	731a      	strb	r2, [r3, #12]
 80036b6:	e008      	b.n	80036ca <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80036d2:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d025      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0202 	orr.w	r2, r2, #2
 8003702:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	2201      	movs	r2, #1
 800371e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e002      	b.n	8003740 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <HAL_DMA_IRQHandler+0x2bc>
        return;
 800373e:	bf00      	nop
    }
  }
}
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e02b      	b.n	80037b2 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003762:	f023 030f 	bic.w	r3, r3, #15
 8003766:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003770:	3b50      	subs	r3, #80	@ 0x50
 8003772:	09db      	lsrs	r3, r3, #7
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2201      	movs	r2, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d012      	beq.n	80037b0 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f003 0311 	and.w	r3, r3, #17
 8003790:	2b11      	cmp	r3, #17
 8003792:	d106      	bne.n	80037a2 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	e006      	b.n	80037b0 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	b291      	uxth	r1, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	430b      	orrs	r3, r1
 80037e0:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80037ea:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003810:	f7ff fc14 	bl	800303c <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0db      	b.n	80039d8 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6e      	ldr	r2, [pc, #440]	@ (80039e0 <HAL_DMAEx_List_Init+0x1d8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f000 809f 	beq.w	800396a <HAL_DMAEx_List_Init+0x162>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6c      	ldr	r2, [pc, #432]	@ (80039e4 <HAL_DMAEx_List_Init+0x1dc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	f000 8099 	beq.w	800396a <HAL_DMAEx_List_Init+0x162>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6a      	ldr	r2, [pc, #424]	@ (80039e8 <HAL_DMAEx_List_Init+0x1e0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	f000 8093 	beq.w	800396a <HAL_DMAEx_List_Init+0x162>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a68      	ldr	r2, [pc, #416]	@ (80039ec <HAL_DMAEx_List_Init+0x1e4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	f000 808d 	beq.w	800396a <HAL_DMAEx_List_Init+0x162>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a66      	ldr	r2, [pc, #408]	@ (80039f0 <HAL_DMAEx_List_Init+0x1e8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	f000 8087 	beq.w	800396a <HAL_DMAEx_List_Init+0x162>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a64      	ldr	r2, [pc, #400]	@ (80039f4 <HAL_DMAEx_List_Init+0x1ec>)
 8003862:	4293      	cmp	r3, r2
 8003864:	f000 8081 	beq.w	800396a <HAL_DMAEx_List_Init+0x162>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a62      	ldr	r2, [pc, #392]	@ (80039f8 <HAL_DMAEx_List_Init+0x1f0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d07b      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a61      	ldr	r2, [pc, #388]	@ (80039fc <HAL_DMAEx_List_Init+0x1f4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d076      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5f      	ldr	r2, [pc, #380]	@ (8003a00 <HAL_DMAEx_List_Init+0x1f8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d071      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5e      	ldr	r2, [pc, #376]	@ (8003a04 <HAL_DMAEx_List_Init+0x1fc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d06c      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5c      	ldr	r2, [pc, #368]	@ (8003a08 <HAL_DMAEx_List_Init+0x200>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d067      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a0c <HAL_DMAEx_List_Init+0x204>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d062      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a59      	ldr	r2, [pc, #356]	@ (8003a10 <HAL_DMAEx_List_Init+0x208>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d05d      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a58      	ldr	r2, [pc, #352]	@ (8003a14 <HAL_DMAEx_List_Init+0x20c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d058      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a56      	ldr	r2, [pc, #344]	@ (8003a18 <HAL_DMAEx_List_Init+0x210>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d053      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a55      	ldr	r2, [pc, #340]	@ (8003a1c <HAL_DMAEx_List_Init+0x214>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04e      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a53      	ldr	r2, [pc, #332]	@ (8003a20 <HAL_DMAEx_List_Init+0x218>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d049      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_DMAEx_List_Init+0x21c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d044      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a50      	ldr	r2, [pc, #320]	@ (8003a28 <HAL_DMAEx_List_Init+0x220>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d03f      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4f      	ldr	r2, [pc, #316]	@ (8003a2c <HAL_DMAEx_List_Init+0x224>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03a      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a30 <HAL_DMAEx_List_Init+0x228>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d035      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a4c      	ldr	r2, [pc, #304]	@ (8003a34 <HAL_DMAEx_List_Init+0x22c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d030      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a38 <HAL_DMAEx_List_Init+0x230>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02b      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a49      	ldr	r2, [pc, #292]	@ (8003a3c <HAL_DMAEx_List_Init+0x234>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d026      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a47      	ldr	r2, [pc, #284]	@ (8003a40 <HAL_DMAEx_List_Init+0x238>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d021      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a46      	ldr	r2, [pc, #280]	@ (8003a44 <HAL_DMAEx_List_Init+0x23c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01c      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a44      	ldr	r2, [pc, #272]	@ (8003a48 <HAL_DMAEx_List_Init+0x240>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d017      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a43      	ldr	r2, [pc, #268]	@ (8003a4c <HAL_DMAEx_List_Init+0x244>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d012      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a41      	ldr	r2, [pc, #260]	@ (8003a50 <HAL_DMAEx_List_Init+0x248>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00d      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a40      	ldr	r2, [pc, #256]	@ (8003a54 <HAL_DMAEx_List_Init+0x24c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d008      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a58 <HAL_DMAEx_List_Init+0x250>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <HAL_DMAEx_List_Init+0x162>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3d      	ldr	r2, [pc, #244]	@ (8003a5c <HAL_DMAEx_List_Init+0x254>)
 8003968:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0206 	orr.w	r2, r2, #6
 8003988:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800398a:	e00f      	b.n	80039ac <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800398c:	f7ff fb56 	bl	800303c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b05      	cmp	r3, #5
 8003998:	d908      	bls.n	80039ac <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2210      	movs	r2, #16
 800399e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e015      	b.n	80039d8 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e8      	bne.n	800398c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 faba 	bl	8003f34 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40020050 	.word	0x40020050
 80039e4:	50020050 	.word	0x50020050
 80039e8:	400200d0 	.word	0x400200d0
 80039ec:	500200d0 	.word	0x500200d0
 80039f0:	40020150 	.word	0x40020150
 80039f4:	50020150 	.word	0x50020150
 80039f8:	400201d0 	.word	0x400201d0
 80039fc:	500201d0 	.word	0x500201d0
 8003a00:	40020250 	.word	0x40020250
 8003a04:	50020250 	.word	0x50020250
 8003a08:	400202d0 	.word	0x400202d0
 8003a0c:	500202d0 	.word	0x500202d0
 8003a10:	40020350 	.word	0x40020350
 8003a14:	50020350 	.word	0x50020350
 8003a18:	400203d0 	.word	0x400203d0
 8003a1c:	500203d0 	.word	0x500203d0
 8003a20:	40020450 	.word	0x40020450
 8003a24:	50020450 	.word	0x50020450
 8003a28:	400204d0 	.word	0x400204d0
 8003a2c:	500204d0 	.word	0x500204d0
 8003a30:	40020550 	.word	0x40020550
 8003a34:	50020550 	.word	0x50020550
 8003a38:	400205d0 	.word	0x400205d0
 8003a3c:	500205d0 	.word	0x500205d0
 8003a40:	40020650 	.word	0x40020650
 8003a44:	50020650 	.word	0x50020650
 8003a48:	400206d0 	.word	0x400206d0
 8003a4c:	500206d0 	.word	0x500206d0
 8003a50:	40020750 	.word	0x40020750
 8003a54:	50020750 	.word	0x50020750
 8003a58:	400207d0 	.word	0x400207d0
 8003a5c:	500207d0 	.word	0x500207d0

08003a60 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_DMAEx_List_Start_IT+0x16>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e082      	b.n	8003b80 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a80:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d005      	beq.n	8003aa0 <HAL_DMAEx_List_Start_IT+0x40>
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d16a      	bne.n	8003b70 <HAL_DMAEx_List_Start_IT+0x110>
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d067      	beq.n	8003b70 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d157      	bne.n	8003b5c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_DMAEx_List_Start_IT+0x5a>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e062      	b.n	8003b80 <HAL_DMAEx_List_Start_IT+0x120>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ace:	2202      	movs	r2, #2
 8003ad0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003aee:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b06:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b1e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f107 010c 	add.w	r1, r7, #12
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fd1d 	bl	800456c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	0c0b      	lsrs	r3, r1, #16
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b50:	4013      	ands	r3, r2
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e007      	b.n	8003b80 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2240      	movs	r2, #64	@ 0x40
 8003b74:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_DMAEx_List_BuildNode+0x16>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e004      	b.n	8003bac <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fb1d 	bl	80041e4 <DMA_List_BuildNode>

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	@ 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_DMAEx_List_InsertNode+0x18>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b6      	b.n	8003d3e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d104      	bne.n	8003be2 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0ad      	b.n	8003d3e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fc52 	bl	8004494 <DMA_List_CheckNodesBaseAddresses>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2205      	movs	r2, #5
 8003bfa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e09e      	b.n	8003d3e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fc73 	bl	80044f4 <DMA_List_CheckNodesTypes>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2204      	movs	r2, #4
 8003c18:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e08f      	b.n	8003d3e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003c2a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003c2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c32:	4619      	mov	r1, r3
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fc99 	bl	800456c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11a      	bne.n	8003c78 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	e06c      	b.n	8003d30 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c62:	4013      	ands	r3, r2
 8003c64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c68:	4319      	orrs	r1, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2202      	movs	r2, #2
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	e05b      	b.n	8003d30 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c88:	4013      	ands	r3, r2
 8003c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c8e:	4319      	orrs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e043      	b.n	8003d26 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fc8e 	bl	80045cc <DMA_List_FindNode>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d132      	bne.n	8003d1c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d11a      	bne.n	8003cf6 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cd8:	4319      	orrs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cec:	4319      	orrs	r1, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003cf4:	e017      	b.n	8003d26 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003cf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d12:	4319      	orrs	r1, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003d1a:	e004      	b.n	8003d26 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2206      	movs	r2, #6
 8003d20:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00b      	b.n	8003d3e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3730      	adds	r7, #48	@ 0x30
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	@ 0x28
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e052      	b.n	8003dfe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e049      	b.n	8003dfe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e03d      	b.n	8003dfe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2204      	movs	r2, #4
 8003d86:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e038      	b.n	8003dfe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d104      	bne.n	8003d9e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2204      	movs	r2, #4
 8003d98:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e02f      	b.n	8003dfe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f107 0220 	add.w	r2, r7, #32
 8003db2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fbd8 	bl	800456c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fbff 	bl	80045cc <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003dd8:	4013      	ands	r3, r2
 8003dda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4610      	mov	r0, r2
 8003de0:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003de2:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003de4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3728      	adds	r7, #40	@ 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_DMAEx_List_LinkQ+0x16>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e072      	b.n	8003f08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e28:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d002      	beq.n	8003e3c <HAL_DMAEx_List_LinkQ+0x34>
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d108      	bne.n	8003e4e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2240      	movs	r2, #64	@ 0x40
 8003e40:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e05c      	b.n	8003f08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	7b1b      	ldrb	r3, [r3, #12]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d104      	bne.n	8003e62 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e052      	b.n	8003f08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2b      	ldr	r2, [pc, #172]	@ (8003f14 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <HAL_DMAEx_List_LinkQ+0x110>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01d      	beq.n	8003eb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <HAL_DMAEx_List_LinkQ+0x114>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d018      	beq.n	8003eb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a26      	ldr	r2, [pc, #152]	@ (8003f20 <HAL_DMAEx_List_LinkQ+0x118>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a25      	ldr	r2, [pc, #148]	@ (8003f24 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a23      	ldr	r2, [pc, #140]	@ (8003f28 <HAL_DMAEx_List_LinkQ+0x120>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <HAL_DMAEx_List_LinkQ+0x124>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a20      	ldr	r2, [pc, #128]	@ (8003f30 <HAL_DMAEx_List_LinkQ+0x128>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMAEx_List_LinkQ+0xae>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMAEx_List_LinkQ+0xb0>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e019      	b.n	8003f08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed8:	2b81      	cmp	r3, #129	@ 0x81
 8003eda:	d108      	bne.n	8003eee <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00c      	b.n	8003f08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2204      	movs	r2, #4
 8003efa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e003      	b.n	8003f08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40020650 	.word	0x40020650
 8003f18:	50020650 	.word	0x50020650
 8003f1c:	400206d0 	.word	0x400206d0
 8003f20:	500206d0 	.word	0x500206d0
 8003f24:	40020750 	.word	0x40020750
 8003f28:	50020750 	.word	0x50020750
 8003f2c:	400207d0 	.word	0x400207d0
 8003f30:	500207d0 	.word	0x500207d0

08003f34 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a85      	ldr	r2, [pc, #532]	@ (8004164 <DMA_List_Init+0x230>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f000 80a0 	beq.w	8004094 <DMA_List_Init+0x160>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a83      	ldr	r2, [pc, #524]	@ (8004168 <DMA_List_Init+0x234>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	f000 809a 	beq.w	8004094 <DMA_List_Init+0x160>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a81      	ldr	r2, [pc, #516]	@ (800416c <DMA_List_Init+0x238>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	f000 8094 	beq.w	8004094 <DMA_List_Init+0x160>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a7f      	ldr	r2, [pc, #508]	@ (8004170 <DMA_List_Init+0x23c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f000 808e 	beq.w	8004094 <DMA_List_Init+0x160>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004174 <DMA_List_Init+0x240>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	f000 8088 	beq.w	8004094 <DMA_List_Init+0x160>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7b      	ldr	r2, [pc, #492]	@ (8004178 <DMA_List_Init+0x244>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f000 8082 	beq.w	8004094 <DMA_List_Init+0x160>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a79      	ldr	r2, [pc, #484]	@ (800417c <DMA_List_Init+0x248>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d07c      	beq.n	8004094 <DMA_List_Init+0x160>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a78      	ldr	r2, [pc, #480]	@ (8004180 <DMA_List_Init+0x24c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d077      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a76      	ldr	r2, [pc, #472]	@ (8004184 <DMA_List_Init+0x250>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d072      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	@ (8004188 <DMA_List_Init+0x254>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d06d      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a73      	ldr	r2, [pc, #460]	@ (800418c <DMA_List_Init+0x258>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d068      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a72      	ldr	r2, [pc, #456]	@ (8004190 <DMA_List_Init+0x25c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d063      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a70      	ldr	r2, [pc, #448]	@ (8004194 <DMA_List_Init+0x260>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d05e      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6f      	ldr	r2, [pc, #444]	@ (8004198 <DMA_List_Init+0x264>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d059      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6d      	ldr	r2, [pc, #436]	@ (800419c <DMA_List_Init+0x268>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d054      	beq.n	8004094 <DMA_List_Init+0x160>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6c      	ldr	r2, [pc, #432]	@ (80041a0 <DMA_List_Init+0x26c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04f      	beq.n	8004094 <DMA_List_Init+0x160>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6a      	ldr	r2, [pc, #424]	@ (80041a4 <DMA_List_Init+0x270>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04a      	beq.n	8004094 <DMA_List_Init+0x160>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a69      	ldr	r2, [pc, #420]	@ (80041a8 <DMA_List_Init+0x274>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d045      	beq.n	8004094 <DMA_List_Init+0x160>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a67      	ldr	r2, [pc, #412]	@ (80041ac <DMA_List_Init+0x278>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d040      	beq.n	8004094 <DMA_List_Init+0x160>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a66      	ldr	r2, [pc, #408]	@ (80041b0 <DMA_List_Init+0x27c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d03b      	beq.n	8004094 <DMA_List_Init+0x160>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a64      	ldr	r2, [pc, #400]	@ (80041b4 <DMA_List_Init+0x280>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d036      	beq.n	8004094 <DMA_List_Init+0x160>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a63      	ldr	r2, [pc, #396]	@ (80041b8 <DMA_List_Init+0x284>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d031      	beq.n	8004094 <DMA_List_Init+0x160>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a61      	ldr	r2, [pc, #388]	@ (80041bc <DMA_List_Init+0x288>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d02c      	beq.n	8004094 <DMA_List_Init+0x160>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a60      	ldr	r2, [pc, #384]	@ (80041c0 <DMA_List_Init+0x28c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d027      	beq.n	8004094 <DMA_List_Init+0x160>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a5e      	ldr	r2, [pc, #376]	@ (80041c4 <DMA_List_Init+0x290>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <DMA_List_Init+0x160>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a5d      	ldr	r2, [pc, #372]	@ (80041c8 <DMA_List_Init+0x294>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01d      	beq.n	8004094 <DMA_List_Init+0x160>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <DMA_List_Init+0x298>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <DMA_List_Init+0x160>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a5a      	ldr	r2, [pc, #360]	@ (80041d0 <DMA_List_Init+0x29c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <DMA_List_Init+0x160>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a58      	ldr	r2, [pc, #352]	@ (80041d4 <DMA_List_Init+0x2a0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <DMA_List_Init+0x160>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a57      	ldr	r2, [pc, #348]	@ (80041d8 <DMA_List_Init+0x2a4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <DMA_List_Init+0x160>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a55      	ldr	r2, [pc, #340]	@ (80041dc <DMA_List_Init+0x2a8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <DMA_List_Init+0x160>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a54      	ldr	r2, [pc, #336]	@ (80041e0 <DMA_List_Init+0x2ac>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <DMA_List_Init+0x164>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <DMA_List_Init+0x166>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a36      	ldr	r2, [pc, #216]	@ (80041c4 <DMA_List_Init+0x290>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d022      	beq.n	8004136 <DMA_List_Init+0x202>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a34      	ldr	r2, [pc, #208]	@ (80041c8 <DMA_List_Init+0x294>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01d      	beq.n	8004136 <DMA_List_Init+0x202>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a33      	ldr	r2, [pc, #204]	@ (80041cc <DMA_List_Init+0x298>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d018      	beq.n	8004136 <DMA_List_Init+0x202>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a31      	ldr	r2, [pc, #196]	@ (80041d0 <DMA_List_Init+0x29c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <DMA_List_Init+0x202>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a30      	ldr	r2, [pc, #192]	@ (80041d4 <DMA_List_Init+0x2a0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <DMA_List_Init+0x202>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a2e      	ldr	r2, [pc, #184]	@ (80041d8 <DMA_List_Init+0x2a4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d009      	beq.n	8004136 <DMA_List_Init+0x202>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a2d      	ldr	r2, [pc, #180]	@ (80041dc <DMA_List_Init+0x2a8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <DMA_List_Init+0x202>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2b      	ldr	r2, [pc, #172]	@ (80041e0 <DMA_List_Init+0x2ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <DMA_List_Init+0x206>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <DMA_List_Init+0x208>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2200      	movs	r2, #0
 800414e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2200      	movs	r2, #0
 8004156:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40020050 	.word	0x40020050
 8004168:	50020050 	.word	0x50020050
 800416c:	400200d0 	.word	0x400200d0
 8004170:	500200d0 	.word	0x500200d0
 8004174:	40020150 	.word	0x40020150
 8004178:	50020150 	.word	0x50020150
 800417c:	400201d0 	.word	0x400201d0
 8004180:	500201d0 	.word	0x500201d0
 8004184:	40020250 	.word	0x40020250
 8004188:	50020250 	.word	0x50020250
 800418c:	400202d0 	.word	0x400202d0
 8004190:	500202d0 	.word	0x500202d0
 8004194:	40020350 	.word	0x40020350
 8004198:	50020350 	.word	0x50020350
 800419c:	400203d0 	.word	0x400203d0
 80041a0:	500203d0 	.word	0x500203d0
 80041a4:	40020450 	.word	0x40020450
 80041a8:	50020450 	.word	0x50020450
 80041ac:	400204d0 	.word	0x400204d0
 80041b0:	500204d0 	.word	0x500204d0
 80041b4:	40020550 	.word	0x40020550
 80041b8:	50020550 	.word	0x50020550
 80041bc:	400205d0 	.word	0x400205d0
 80041c0:	500205d0 	.word	0x500205d0
 80041c4:	40020650 	.word	0x40020650
 80041c8:	50020650 	.word	0x50020650
 80041cc:	400206d0 	.word	0x400206d0
 80041d0:	500206d0 	.word	0x500206d0
 80041d4:	40020750 	.word	0x40020750
 80041d8:	50020750 	.word	0x50020750
 80041dc:	400207d0 	.word	0x400207d0
 80041e0:	500207d0 	.word	0x500207d0

080041e4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80041f6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80041fc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004202:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004208:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	051b      	lsls	r3, r3, #20
 8004230:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004234:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	3b01      	subs	r3, #1
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004242:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004244:	431a      	orrs	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	f240 237f 	movw	r3, #639	@ 0x27f
 8004256:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004258:	431a      	orrs	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004266:	d10c      	bne.n	8004282 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d011      	beq.n	8004298 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	605a      	str	r2, [r3, #4]
 8004280:	e00a      	b.n	8004298 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800428a:	d105      	bne.n	8004298 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00f      	beq.n	80042c0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ac:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80042b8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80042ba:	431a      	orrs	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04e      	beq.n	8004374 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	3b01      	subs	r3, #1
 80042e0:	0419      	lsls	r1, r3, #16
 80042e2:	4b6a      	ldr	r3, [pc, #424]	@ (800448c <DMA_List_BuildNode+0x2a8>)
 80042e4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80042e6:	431a      	orrs	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	da06      	bge.n	8004302 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	e005      	b.n	800430e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004312:	2b00      	cmp	r3, #0
 8004314:	da06      	bge.n	8004324 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	e005      	b.n	8004330 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	2b00      	cmp	r3, #0
 8004336:	da06      	bge.n	8004346 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	e005      	b.n	8004352 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004356:	2b00      	cmp	r3, #0
 8004358:	da06      	bge.n	8004368 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	609a      	str	r2, [r3, #8]
 8004366:	e005      	b.n	8004374 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05d      	beq.n	800444c <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004394:	2b00      	cmp	r3, #0
 8004396:	da09      	bge.n	80043ac <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	425b      	negs	r3, r3
 800439e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	615a      	str	r2, [r3, #20]
 80043aa:	e005      	b.n	80043b8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da0d      	bge.n	80043dc <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c4:	425b      	negs	r3, r3
 80043c6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	0419      	lsls	r1, r3, #16
 80043d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004490 <DMA_List_BuildNode+0x2ac>)
 80043d2:	400b      	ands	r3, r1
 80043d4:	431a      	orrs	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	615a      	str	r2, [r3, #20]
 80043da:	e009      	b.n	80043f0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e4:	0419      	lsls	r1, r3, #16
 80043e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004490 <DMA_List_BuildNode+0x2ac>)
 80043e8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80043ea:	431a      	orrs	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	da08      	bge.n	800440a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	425b      	negs	r3, r3
 80043fe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	b29a      	uxth	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	619a      	str	r2, [r3, #24]
 8004408:	e004      	b.n	8004414 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004418:	2b00      	cmp	r3, #0
 800441a:	da0b      	bge.n	8004434 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004420:	425b      	negs	r3, r3
 8004422:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800442c:	431a      	orrs	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	619a      	str	r2, [r3, #24]
 8004432:	e007      	b.n	8004444 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800443e:	431a      	orrs	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
 800444a:	e002      	b.n	8004452 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d006      	beq.n	8004474 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004472:	e005      	b.n	8004480 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	621a      	str	r2, [r3, #32]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	07ff0000 	.word	0x07ff0000
 8004490:	1fff0000 	.word	0x1fff0000

08004494 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e00a      	b.n	80044d6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e004      	b.n	80044d6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d001      	beq.n	80044e6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e00e      	b.n	8004532 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e006      	b.n	8004532 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004544:	2302      	movs	r3, #2
 8004546:	e00b      	b.n	8004560 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	429a      	cmp	r2, r3
 8004558:	d001      	beq.n	800455e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800455a:	2303      	movs	r3, #3
 800455c:	e000      	b.n	8004560 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4a0d      	ldr	r2, [pc, #52]	@ (80045c4 <DMA_List_GetCLLRNodeInfo+0x58>)
 800458e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00f      	beq.n	80045b6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2207      	movs	r2, #7
 800459a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800459c:	e00b      	b.n	80045b6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80045a8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2205      	movs	r2, #5
 80045b4:	601a      	str	r2, [r3, #0]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	fe010000 	.word	0xfe010000
 80045c8:	f8010000 	.word	0xf8010000

080045cc <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	@ 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d142      	bne.n	8004676 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80045f0:	e01d      	b.n	800462e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e00f      	b.n	8004628 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4413      	add	r3, r2
 8004618:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004620:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3301      	adds	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	429a      	cmp	r2, r3
 8004636:	d3dc      	bcc.n	80045f2 <DMA_List_FindNode+0x26>
 8004638:	e029      	b.n	800468e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e00f      	b.n	8004670 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4413      	add	r3, r2
 8004660:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004668:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	3301      	adds	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	429a      	cmp	r2, r3
 800467e:	d206      	bcs.n	800468e <DMA_List_FindNode+0xc2>
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004686:	4013      	ands	r3, r2
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	429a      	cmp	r2, r3
 800468c:	d1d5      	bne.n	800463a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800469a:	4013      	ands	r3, r2
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d001      	beq.n	80046a6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e02b      	b.n	80046fe <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	041b      	lsls	r3, r3, #16
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	461a      	mov	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00f      	beq.n	80046fc <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	461a      	mov	r2, r3
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80046ec:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3724      	adds	r7, #36	@ 0x24
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	@ 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800471e:	e1ba      	b.n	8004a96 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 81aa 	beq.w	8004a90 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a55      	ldr	r2, [pc, #340]	@ (8004894 <HAL_GPIO_Init+0x188>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d15d      	bne.n	8004800 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800474a:	2201      	movs	r2, #1
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	4013      	ands	r3, r2
 8004758:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0201 	and.w	r2, r3, #1
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	4313      	orrs	r3, r2
 800476c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004774:	4a48      	ldr	r2, [pc, #288]	@ (8004898 <HAL_GPIO_Init+0x18c>)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800477c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800477e:	4a46      	ldr	r2, [pc, #280]	@ (8004898 <HAL_GPIO_Init+0x18c>)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4413      	add	r3, r2
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	08da      	lsrs	r2, r3, #3
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	3208      	adds	r2, #8
 8004792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004796:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	220f      	movs	r2, #15
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	220b      	movs	r2, #11
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	08da      	lsrs	r2, r3, #3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3208      	adds	r2, #8
 80047ca:	69f9      	ldr	r1, [r7, #28]
 80047cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	2202      	movs	r2, #2
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e067      	b.n	80048d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0x104>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b12      	cmp	r3, #18
 800480e:	d145      	bne.n	800489c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	08da      	lsrs	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3208      	adds	r2, #8
 8004818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	220f      	movs	r2, #15
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	4013      	ands	r3, r2
 8004832:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 020f 	and.w	r2, r3, #15
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	4313      	orrs	r3, r2
 800484c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	08da      	lsrs	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3208      	adds	r2, #8
 8004856:	69f9      	ldr	r1, [r7, #28]
 8004858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	4013      	ands	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0203 	and.w	r2, r3, #3
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	4313      	orrs	r3, r2
 8004888:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e01e      	b.n	80048d0 <HAL_GPIO_Init+0x1c4>
 8004892:	bf00      	nop
 8004894:	46020000 	.word	0x46020000
 8004898:	08015338 	.word	0x08015338
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	2203      	movs	r2, #3
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0203 	and.w	r2, r3, #3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d00b      	beq.n	80048f0 <HAL_GPIO_Init+0x1e4>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d007      	beq.n	80048f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048e4:	2b11      	cmp	r3, #17
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b12      	cmp	r3, #18
 80048ee:	d130      	bne.n	8004952 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	4013      	ands	r3, r2
 8004906:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	4313      	orrs	r3, r2
 8004918:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004926:	2201      	movs	r2, #1
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	4013      	ands	r3, r2
 8004934:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0201 	and.w	r2, r3, #1
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	4313      	orrs	r3, r2
 800494a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d017      	beq.n	800498a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	4013      	ands	r3, r2
 8004970:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	4313      	orrs	r3, r2
 8004982:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d07c      	beq.n	8004a90 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004996:	4a47      	ldr	r2, [pc, #284]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3318      	adds	r3, #24
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0a9a      	lsrs	r2, r3, #10
 80049be:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab8 <HAL_GPIO_Init+0x3ac>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	f002 0203 	and.w	r2, r2, #3
 80049c8:	00d2      	lsls	r2, r2, #3
 80049ca:	4093      	lsls	r3, r2
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80049d2:	4938      	ldr	r1, [pc, #224]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	3318      	adds	r3, #24
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80049e0:	4b34      	ldr	r3, [pc, #208]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004a04:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004a2e:	4a21      	ldr	r2, [pc, #132]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004a34:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004a5a:	4a16      	ldr	r2, [pc, #88]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004a62:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a68:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <HAL_GPIO_Init+0x3a8>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3301      	adds	r3, #1
 8004a94:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f ae3d 	bne.w	8004720 <HAL_GPIO_Init+0x14>
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	3724      	adds	r7, #36	@ 0x24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	46022000 	.word	0x46022000
 8004ab8:	002f7f7f 	.word	0x002f7f7f

08004abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004acc:	787b      	ldrb	r3, [r7, #1]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004ad8:	e002      	b.n	8004ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4013      	ands	r3, r2
 8004b04:	041a      	lsls	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	43d9      	mvns	r1, r3
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	400b      	ands	r3, r1
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	619a      	str	r2, [r3, #24]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e08d      	b.n	8004c4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fd faa2 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e006      	b.n	8004ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d108      	bne.n	8004bc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	e007      	b.n	8004bd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d138      	bne.n	8004cde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e032      	b.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2224      	movs	r2, #36	@ 0x24
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d139      	bne.n	8004d76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e033      	b.n	8004d78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	@ 0x24
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
 8004da0:	e007      	b.n	8004db2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004da2:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 0204 	bic.w	r2, r3, #4
 8004daa:	4905      	ldr	r1, [pc, #20]	@ (8004dc0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40030400 	.word	0x40030400

08004dc4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <HAL_ICACHE_Enable+0x1c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <HAL_ICACHE_Enable+0x1c>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40030400 	.word	0x40030400

08004de4 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004df0:	230a      	movs	r3, #10
 8004df2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004df4:	e002      	b.n	8004dfc <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f9      	bne.n	8004df6 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e18:	b29b      	uxth	r3, r3
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004e32:	230a      	movs	r3, #10
 8004e34:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004e36:	e002      	b.n	8004e3e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f9      	bne.n	8004e38 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e5a:	b29b      	uxth	r3, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004e74:	230a      	movs	r3, #10
 8004e76:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004e78:	e002      	b.n	8004e80 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f9      	bne.n	8004e7a <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8004e86:	887b      	ldrh	r3, [r7, #2]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9c:	b29b      	uxth	r3, r3
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b086      	sub	sp, #24
 8004eae:	af02      	add	r7, sp, #8
 8004eb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0f3      	b.n	80050a4 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fd fe11 	bl	8002af8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f007 fbd5 	bl	800c692 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7c1a      	ldrb	r2, [r3, #16]
 8004ef0:	f88d 2000 	strb.w	r2, [sp]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ef8:	f007 fb99 	bl	800c62e <USB_CoreInit>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e0ca      	b.n	80050a4 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f007 fbd1 	bl	800c6bc <USB_SetCurrentMode>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0bb      	b.n	80050a4 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e03f      	b.n	8004fb2 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	3315      	adds	r3, #21
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	440b      	add	r3, r1
 8004f54:	3314      	adds	r3, #20
 8004f56:	7bfa      	ldrb	r2, [r7, #15]
 8004f58:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	440b      	add	r3, r1
 8004f68:	3317      	adds	r3, #23
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f6e:	7bfa      	ldrb	r2, [r7, #15]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3324      	adds	r3, #36	@ 0x24
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3328      	adds	r3, #40	@ 0x28
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	791b      	ldrb	r3, [r3, #4]
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3ba      	bcc.n	8004f32 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	73fb      	strb	r3, [r7, #15]
 8004fc0:	e044      	b.n	800504c <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	440b      	add	r3, r1
 8004fe6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004fea:	7bfa      	ldrb	r2, [r7, #15]
 8004fec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fee:	7bfa      	ldrb	r2, [r7, #15]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	440b      	add	r3, r1
 8005012:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005030:	7bfa      	ldrb	r2, [r7, #15]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	440b      	add	r3, r1
 800503e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	3301      	adds	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	791b      	ldrb	r3, [r3, #4]
 8005050:	7bfa      	ldrb	r2, [r7, #15]
 8005052:	429a      	cmp	r2, r3
 8005054:	d3b5      	bcc.n	8004fc2 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7c1a      	ldrb	r2, [r3, #16]
 800505e:	f88d 2000 	strb.w	r2, [sp]
 8005062:	3304      	adds	r3, #4
 8005064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005066:	f007 fb4c 	bl	800c702 <USB_DevInit>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e013      	b.n	80050a4 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	7b1b      	ldrb	r3, [r3, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d102      	bne.n	8005098 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fb61 	bl	800675a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f009 f81d 	bl	800e0dc <USB_DevDisconnect>

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_PCD_Start+0x16>
 80050be:	2302      	movs	r3, #2
 80050c0:	e012      	b.n	80050e8 <HAL_PCD_Start+0x3c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f007 facb 	bl	800c66a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f008 ffee 	bl	800e0ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f008 fffe 	bl	800e0fe <USB_ReadInterrupts>
 8005102:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 faf2 	bl	80056f8 <PCD_EP_ISR_Handler>

    return;
 8005114:	e0de      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511c:	2b00      	cmp	r3, #0
 800511e:	d010      	beq.n	8005142 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800512e:	400b      	ands	r3, r1
 8005130:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f009 fef1 	bl	800ef1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005138:	2100      	movs	r1, #0
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8e1 	bl	8005302 <HAL_PCD_SetAddress>

    return;
 8005140:	e0c8      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800515a:	400b      	ands	r3, r1
 800515c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800515e:	e0b9      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8005178:	400b      	ands	r3, r1
 800517a:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800517c:	e0aa      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d029      	beq.n	80051dc <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0204 	bic.w	r2, r2, #4
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0208 	bic.w	r2, r2, #8
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d107      	bne.n	80051c2 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051ba:	2100      	movs	r1, #0
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 faee 	bl	800679e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f893 	bl	80052ee <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80051d6:	400b      	ands	r3, r1
 80051d8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80051da:	e07b      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01c      	beq.n	8005220 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0208 	orr.w	r2, r2, #8
 80051f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8005204:	400b      	ands	r3, r1
 8005206:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0204 	orr.w	r2, r2, #4
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f85e 	bl	80052da <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800521e:	e059      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d033      	beq.n	8005292 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8005238:	400b      	ands	r3, r1
 800523a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8005242:	2b00      	cmp	r3, #0
 8005244:	d121      	bne.n	800528a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0204 	orr.w	r2, r2, #4
 8005254:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0208 	orr.w	r2, r2, #8
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005280:	2101      	movs	r1, #1
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 fa8b 	bl	800679e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005288:	e024      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f825 	bl	80052da <HAL_PCD_SuspendCallback>
    return;
 8005290:	e020      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00c      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80052aa:	400b      	ands	r3, r1
 80052ac:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f009 fe25 	bl	800eefe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80052b4:	e00e      	b.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80052ce:	400b      	ands	r3, r1
 80052d0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80052d2:	bf00      	nop
  }
}
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_PCD_SetAddress+0x1a>
 8005318:	2302      	movs	r3, #2
 800531a:	e012      	b.n	8005342 <HAL_PCD_SetAddress+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	4611      	mov	r1, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f008 feae 	bl	800e094 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	4608      	mov	r0, r1
 8005354:	4611      	mov	r1, r2
 8005356:	461a      	mov	r2, r3
 8005358:	4603      	mov	r3, r0
 800535a:	70fb      	strb	r3, [r7, #3]
 800535c:	460b      	mov	r3, r1
 800535e:	803b      	strh	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800536c:	2b00      	cmp	r3, #0
 800536e:	da0f      	bge.n	8005390 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 0207 	and.w	r2, r3, #7
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	3310      	adds	r3, #16
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4413      	add	r3, r2
 8005384:	3304      	adds	r3, #4
 8005386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	705a      	strb	r2, [r3, #1]
 800538e:	e00f      	b.n	80053b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4413      	add	r3, r2
 80053a6:	3304      	adds	r3, #4
 80053a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80053bc:	883b      	ldrh	r3, [r7, #0]
 80053be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	78ba      	ldrb	r2, [r7, #2]
 80053ca:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053cc:	78bb      	ldrb	r3, [r7, #2]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d102      	bne.n	80053d8 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_PCD_EP_Open+0x9c>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e00e      	b.n	8005404 <HAL_PCD_EP_Open+0xba>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f007 f9a7 	bl	800c748 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8005402:	7afb      	ldrb	r3, [r7, #11]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800541c:	2b00      	cmp	r3, #0
 800541e:	da0f      	bge.n	8005440 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	f003 0207 	and.w	r2, r3, #7
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	3310      	adds	r3, #16
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	3304      	adds	r3, #4
 8005436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	705a      	strb	r2, [r3, #1]
 800543e:	e00f      	b.n	8005460 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 0207 	and.w	r2, r3, #7
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	3304      	adds	r3, #4
 8005458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	b2da      	uxtb	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_PCD_EP_Close+0x6e>
 8005476:	2302      	movs	r3, #2
 8005478:	e00e      	b.n	8005498 <HAL_PCD_EP_Close+0x8c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	4618      	mov	r0, r3
 800548a:	f007 fdf9 	bl	800d080 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	460b      	mov	r3, r1
 80054ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	7afb      	ldrb	r3, [r7, #11]
 80054b2:	f003 0207 	and.w	r2, r3, #7
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2200      	movs	r2, #0
 80054da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2200      	movs	r2, #0
 80054e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f007 ff4d 	bl	800d394 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	f003 0207 	and.w	r2, r3, #7
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	440b      	add	r3, r1
 8005522:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	460b      	mov	r3, r1
 8005542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005544:	7afb      	ldrb	r3, [r7, #11]
 8005546:	f003 0207 	and.w	r2, r3, #7
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	3310      	adds	r3, #16
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	3304      	adds	r3, #4
 800555a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2201      	movs	r2, #1
 8005580:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005582:	7afb      	ldrb	r3, [r7, #11]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	b2da      	uxtb	r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	4618      	mov	r0, r3
 8005596:	f007 fefd 	bl	800d394 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	7912      	ldrb	r2, [r2, #4]
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e040      	b.n	8005644 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da0f      	bge.n	80055ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	f003 0207 	and.w	r2, r3, #7
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	3310      	adds	r3, #16
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	3304      	adds	r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	705a      	strb	r2, [r3, #1]
 80055e8:	e00d      	b.n	8005606 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	3304      	adds	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_PCD_EP_SetStall+0x82>
 8005622:	2302      	movs	r3, #2
 8005624:	e00e      	b.n	8005644 <HAL_PCD_EP_SetStall+0xa0>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	4618      	mov	r0, r3
 8005636:	f008 fc57 	bl	800dee8 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	7912      	ldrb	r2, [r2, #4]
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e042      	b.n	80056f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800566a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da0f      	bge.n	8005692 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	f003 0207 	and.w	r2, r3, #7
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	3310      	adds	r3, #16
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	3304      	adds	r3, #4
 8005688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	705a      	strb	r2, [r3, #1]
 8005690:	e00f      	b.n	80056b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	f003 0207 	and.w	r2, r3, #7
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4413      	add	r3, r2
 80056a8:	3304      	adds	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_PCD_EP_ClrStall+0x86>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e00e      	b.n	80056f0 <HAL_PCD_EP_ClrStall+0xa4>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f008 fc47 	bl	800df74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08e      	sub	sp, #56	@ 0x38
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005700:	e2d9      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x5be>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005708:	837b      	strh	r3, [r7, #26]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800570a:	8b7b      	ldrh	r3, [r7, #26]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	767b      	strb	r3, [r7, #25]

    if (epindex == 0U)
 8005714:	7e7b      	ldrb	r3, [r7, #25]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f040 80dc 	bne.w	80058d4 <PCD_EP_ISR_Handler+0x1dc>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800571c:	8b7b      	ldrh	r3, [r7, #26]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	d13e      	bne.n	80057a4 <PCD_EP_ISR_Handler+0xac>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b93      	ldr	r3, [pc, #588]	@ (800597c <PCD_EP_ISR_Handler+0x284>)
 800572e:	4013      	ands	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800573c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3314      	adds	r3, #20
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800574e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	441a      	add	r2, r3
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800576c:	2100      	movs	r1, #0
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f009 fbab 	bl	800eeca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	7c5b      	ldrb	r3, [r3, #17]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 829b 	beq.w	8005cb6 <PCD_EP_ISR_Handler+0x5be>
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 8296 	bne.w	8005cb6 <PCD_EP_ISR_Handler+0x5be>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7c5b      	ldrb	r3, [r3, #17]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005794:	b2da      	uxtb	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	745a      	strb	r2, [r3, #17]
 80057a2:	e288      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x5be>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80057aa:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80057b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80057b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d027      	beq.n	800580e <PCD_EP_ISR_Handler+0x116>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7ff fb0b 	bl	8004de4 <PCD_GET_EP_RX_CNT>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 80057e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80057e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f008 fcf7 	bl	800e1dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b62      	ldr	r3, [pc, #392]	@ (8005980 <PCD_EP_ISR_Handler+0x288>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005804:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f009 fb32 	bl	800ee70 <HAL_PCD_SetupStageCallback>
 800580c:	e253      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x5be>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800580e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005812:	2b00      	cmp	r3, #0
 8005814:	f280 824f 	bge.w	8005cb6 <PCD_EP_ISR_Handler+0x5be>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b58      	ldr	r3, [pc, #352]	@ (8005980 <PCD_EP_ISR_Handler+0x288>)
 8005820:	4013      	ands	r3, r2
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800582a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800582e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7ff fad2 	bl	8004de4 <PCD_GET_EP_RX_CNT>
 8005840:	4603      	mov	r3, r0
 8005842:	461a      	mov	r2, r3
 8005844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005846:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d019      	beq.n	8005884 <PCD_EP_ISR_Handler+0x18c>
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d015      	beq.n	8005884 <PCD_EP_ISR_Handler+0x18c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585e:	6959      	ldr	r1, [r3, #20]
 8005860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005862:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005866:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005868:	b29b      	uxth	r3, r3
 800586a:	f008 fcb7 	bl	800e1dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	441a      	add	r2, r3
 8005878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800587c:	2100      	movs	r1, #0
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f009 fb08 	bl	800ee94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800588c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800588e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 820f 	bne.w	8005cb6 <PCD_EP_ISR_Handler+0x5be>
 8005898:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800589a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800589e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058a2:	f000 8208 	beq.w	8005cb6 <PCD_EP_ISR_Handler+0x5be>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b35      	ldr	r3, [pc, #212]	@ (8005984 <PCD_EP_ISR_Handler+0x28c>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e1f0      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x5be>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	7e7b      	ldrb	r3, [r7, #25]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80058e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f280 80c0 	bge.w	8005a6e <PCD_EP_ISR_Handler+0x376>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	7e7b      	ldrb	r3, [r7, #25]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4b20      	ldr	r3, [pc, #128]	@ (8005980 <PCD_EP_ISR_Handler+0x288>)
 80058fe:	4013      	ands	r3, r2
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	7e7b      	ldrb	r3, [r7, #25]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005914:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005916:	7e7a      	ldrb	r2, [r7, #25]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4413      	add	r3, r2
 8005928:	3304      	adds	r3, #4
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	7b1b      	ldrb	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d116      	bne.n	8005962 <PCD_EP_ISR_Handler+0x26a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f7ff fa50 	bl	8004de4 <PCD_GET_EP_RX_CNT>
 8005944:	4603      	mov	r3, r0
 8005946:	853b      	strh	r3, [r7, #40]	@ 0x28

          if (count != 0U)
 8005948:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800594a:	2b00      	cmp	r3, #0
 800594c:	d06d      	beq.n	8005a2a <PCD_EP_ISR_Handler+0x332>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005954:	6959      	ldr	r1, [r3, #20]
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	88da      	ldrh	r2, [r3, #6]
 800595a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800595c:	f008 fc3e 	bl	800e1dc <USB_ReadPMA>
 8005960:	e063      	b.n	8005a2a <PCD_EP_ISR_Handler+0x332>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d10e      	bne.n	8005988 <PCD_EP_ISR_Handler+0x290>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800596a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800596c:	461a      	mov	r2, r3
 800596e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f9ad 	bl	8005cd0 <HAL_PCD_EP_DB_Receive>
 8005976:	4603      	mov	r3, r0
 8005978:	853b      	strh	r3, [r7, #40]	@ 0x28
 800597a:	e056      	b.n	8005a2a <PCD_EP_ISR_Handler+0x332>
 800597c:	07ff8f0f 	.word	0x07ff8f0f
 8005980:	07ff0f8f 	.word	0x07ff0f8f
 8005984:	07ffbf8f 	.word	0x07ffbf8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4ba2      	ldr	r3, [pc, #648]	@ (8005c24 <PCD_EP_ISR_Handler+0x52c>)
 800599a:	4013      	ands	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	441a      	add	r2, r3
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059b6:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d016      	beq.n	80059fe <PCD_EP_ISR_Handler+0x306>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f7ff fa23 	bl	8004e26 <PCD_GET_EP_DBUF0_CNT>
 80059e0:	4603      	mov	r3, r0
 80059e2:	853b      	strh	r3, [r7, #40]	@ 0x28

              if (count != 0U)
 80059e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01f      	beq.n	8005a2a <PCD_EP_ISR_Handler+0x332>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	6959      	ldr	r1, [r3, #20]
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	891a      	ldrh	r2, [r3, #8]
 80059f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059f8:	f008 fbf0 	bl	800e1dc <USB_ReadPMA>
 80059fc:	e015      	b.n	8005a2a <PCD_EP_ISR_Handler+0x332>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f7ff fa2d 	bl	8004e68 <PCD_GET_EP_DBUF1_CNT>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	853b      	strh	r3, [r7, #40]	@ 0x28

              if (count != 0U)
 8005a12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <PCD_EP_ISR_Handler+0x332>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1e:	6959      	ldr	r1, [r3, #20]
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	895a      	ldrh	r2, [r3, #10]
 8005a24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a26:	f008 fbd9 	bl	800e1dc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a30:	441a      	add	r2, r3
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a3c:	441a      	add	r2, r3
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <PCD_EP_ISR_Handler+0x35c>
 8005a4a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d206      	bcs.n	8005a62 <PCD_EP_ISR_Handler+0x36a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f009 fa1a 	bl	800ee94 <HAL_PCD_DataOutStageCallback>
 8005a60:	e005      	b.n	8005a6e <PCD_EP_ISR_Handler+0x376>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f007 fc93 	bl	800d394 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8005a6e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 811e 	beq.w	8005cb6 <PCD_EP_ISR_Handler+0x5be>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a7a:	7e7a      	ldrb	r2, [r7, #25]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	3310      	adds	r3, #16
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	7e7b      	ldrb	r3, [r7, #25]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	4b62      	ldr	r3, [pc, #392]	@ (8005c28 <PCD_EP_ISR_Handler+0x530>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	7e7b      	ldrb	r3, [r7, #25]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ab4:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	78db      	ldrb	r3, [r3, #3]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	f040 80b6 	bne.w	8005c2c <PCD_EP_ISR_Handler+0x534>
        {
          ep->xfer_len = 0U;
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac8:	7b1b      	ldrb	r3, [r3, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80a2 	beq.w	8005c14 <PCD_EP_ISR_Handler+0x51c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ad0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d04e      	beq.n	8005b78 <PCD_EP_ISR_Handler+0x480>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d124      	bne.n	8005b2c <PCD_EP_ISR_Handler+0x434>
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005aec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005afc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b00:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e073      	b.n	8005c14 <PCD_EP_ISR_Handler+0x51c>
 8005b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d16f      	bne.n	8005c14 <PCD_EP_ISR_Handler+0x51c>
 8005b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b52:	b292      	uxth	r2, r2
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005b60:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e04d      	b.n	8005c14 <PCD_EP_ISR_Handler+0x51c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d124      	bne.n	8005bca <PCD_EP_ISR_Handler+0x4d2>
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b9e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005bc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	e024      	b.n	8005c14 <PCD_EP_ISR_Handler+0x51c>
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d120      	bne.n	8005c14 <PCD_EP_ISR_Handler+0x51c>
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005bfe:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c10:	6852      	ldr	r2, [r2, #4]
 8005c12:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f009 f955 	bl	800eeca <HAL_PCD_DataInStageCallback>
 8005c20:	e049      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x5be>
 8005c22:	bf00      	nop
 8005c24:	07ff8f8f 	.word	0x07ff8f8f
 8005c28:	07ff8f0f 	.word	0x07ff8f0f
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005c2c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d139      	bne.n	8005caa <PCD_EP_ISR_Handler+0x5b2>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	0c1b      	lsrs	r3, r3, #16
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c4e:	857b      	strh	r3, [r7, #42]	@ 0x2a

            if (ep->xfer_len > TxPctSize)
 8005c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d906      	bls.n	8005c68 <PCD_EP_ISR_Handler+0x570>
            {
              ep->xfer_len -= TxPctSize;
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c64:	619a      	str	r2, [r3, #24]
 8005c66:	e002      	b.n	8005c6e <PCD_EP_ISR_Handler+0x576>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <PCD_EP_ISR_Handler+0x58c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f009 f924 	bl	800eeca <HAL_PCD_DataInStageCallback>
 8005c82:	e018      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x5be>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c8a:	441a      	add	r2, r3
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c96:	441a      	add	r2, r3
 8005c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f007 fb76 	bl	800d394 <USB_EPStartXfer>
 8005ca8:	e005      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x5be>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005caa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005cac:	461a      	mov	r2, r3
 8005cae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8e7 	bl	8005e84 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f47f ad1e 	bne.w	8005702 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3738      	adds	r7, #56	@ 0x38
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	@ 0x28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d062      	beq.n	8005dae <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f7ff f897 	bl	8004e26 <PCD_GET_EP_DBUF0_CNT>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	8bfb      	ldrh	r3, [r7, #30]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d306      	bcc.n	8005d14 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	8bfb      	ldrh	r3, [r7, #30]
 8005d0c:	1ad2      	subs	r2, r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	619a      	str	r2, [r3, #24]
 8005d12:	e002      	b.n	8005d1a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2200      	movs	r2, #0
 8005d18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d11b      	bne.n	8005d5a <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b52      	ldr	r3, [pc, #328]	@ (8005e7c <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	441a      	add	r2, r3
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d58:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d017      	beq.n	8005d94 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b42      	ldr	r3, [pc, #264]	@ (8005e80 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	441a      	add	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d92:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005d94:	8bfb      	ldrh	r3, [r7, #30]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d06b      	beq.n	8005e72 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6959      	ldr	r1, [r3, #20]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	891a      	ldrh	r2, [r3, #8]
 8005da6:	8bfb      	ldrh	r3, [r7, #30]
 8005da8:	f008 fa18 	bl	800e1dc <USB_ReadPMA>
 8005dac:	e061      	b.n	8005e72 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f7ff f855 	bl	8004e68 <PCD_GET_EP_DBUF1_CNT>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	8bfb      	ldrh	r3, [r7, #30]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d306      	bcc.n	8005dda <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	8bfb      	ldrh	r3, [r7, #30]
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	619a      	str	r2, [r3, #24]
 8005dd8:	e002      	b.n	8005de0 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11b      	bne.n	8005e20 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b20      	ldr	r3, [pc, #128]	@ (8005e7c <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1e:	6013      	str	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e20:	88fb      	ldrh	r3, [r7, #6]
 8005e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d117      	bne.n	8005e5a <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e58:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005e5a:	8bfb      	ldrh	r3, [r7, #30]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6959      	ldr	r1, [r3, #20]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	895a      	ldrh	r2, [r3, #10]
 8005e6c:	8bfb      	ldrh	r3, [r7, #30]
 8005e6e:	f008 f9b5 	bl	800e1dc <USB_ReadPMA>
    }
  }

  return count;
 8005e72:	8bfb      	ldrh	r3, [r7, #30]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3728      	adds	r7, #40	@ 0x28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	07ffbf8f 	.word	0x07ffbf8f
 8005e80:	07ff8f8f 	.word	0x07ff8f8f

08005e84 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b090      	sub	sp, #64	@ 0x40
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 81f5 	beq.w	8006288 <HAL_PCD_EP_DB_Transmit+0x404>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fe ffbc 	bl	8004e26 <PCD_GET_EP_DBUF0_CNT>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	8bfb      	ldrh	r3, [r7, #30]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d906      	bls.n	8005eca <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	8bfb      	ldrh	r3, [r7, #30]
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	619a      	str	r2, [r3, #24]
 8005ec8:	e002      	b.n	8005ed0 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 80e1 	bne.w	800609c <HAL_PCD_EP_DB_Transmit+0x218>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d124      	bne.n	8005f2c <HAL_PCD_EP_DB_Transmit+0xa8>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005eec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005efc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f00:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e024      	b.n	8005f76 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d120      	bne.n	8005f76 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f52:	b292      	uxth	r2, r2
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005f60:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d124      	bne.n	8005fc8 <HAL_PCD_EP_DB_Transmit+0x144>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f9c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fc0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	e024      	b.n	8006012 <HAL_PCD_EP_DB_Transmit+0x18e>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d120      	bne.n	8006012 <HAL_PCD_EP_DB_Transmit+0x18e>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	605a      	str	r2, [r3, #4]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005ffc:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800600a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800600e:	6852      	ldr	r2, [r2, #4]
 8006010:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	78db      	ldrb	r3, [r3, #3]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d11b      	bne.n	8006052 <HAL_PCD_EP_DB_Transmit+0x1ce>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4ba2      	ldr	r3, [pc, #648]	@ (80062b4 <HAL_PCD_EP_DB_Transmit+0x430>)
 800602c:	4013      	ands	r3, r2
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006032:	f083 0320 	eor.w	r3, r3, #32
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	441a      	add	r2, r3
 8006046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006050:	6013      	str	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f008 ff36 	bl	800eeca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d017      	beq.n	8006098 <HAL_PCD_EP_DB_Transmit+0x214>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b8f      	ldr	r3, [pc, #572]	@ (80062b8 <HAL_PCD_EP_DB_Transmit+0x434>)
 800607a:	4013      	ands	r3, r2
 800607c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	6013      	str	r3, [r2, #0]
      }

      return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e312      	b.n	80066c2 <HAL_PCD_EP_DB_Transmit+0x83e>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d017      	beq.n	80060d6 <HAL_PCD_EP_DB_Transmit+0x252>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b80      	ldr	r3, [pc, #512]	@ (80062b8 <HAL_PCD_EP_DB_Transmit+0x434>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d4:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060dc:	2b01      	cmp	r3, #1
 80060de:	f040 82cf 	bne.w	8006680 <HAL_PCD_EP_DB_Transmit+0x7fc>
      {
        ep->xfer_buff += TxPctSize;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	8bfb      	ldrh	r3, [r7, #30]
 80060e8:	441a      	add	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	8bfb      	ldrh	r3, [r7, #30]
 80060f4:	441a      	add	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6a1a      	ldr	r2, [r3, #32]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	429a      	cmp	r2, r3
 8006104:	d309      	bcc.n	800611a <HAL_PCD_EP_DB_Transmit+0x296>
        {
          len = ep->maxpacket;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6a1a      	ldr	r2, [r3, #32]
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	1ad2      	subs	r2, r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	621a      	str	r2, [r3, #32]
 8006118:	e014      	b.n	8006144 <HAL_PCD_EP_DB_Transmit+0x2c0>
        }
        else if (ep->xfer_len_db == 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_PCD_EP_DB_Transmit+0x2ac>
        {
          len = TxPctSize;
 8006122:	8bfb      	ldrh	r3, [r7, #30]
 8006124:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800612e:	e009      	b.n	8006144 <HAL_PCD_EP_DB_Transmit+0x2c0>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2200      	movs	r2, #0
 8006142:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d16a      	bne.n	8006222 <HAL_PCD_EP_DB_Transmit+0x39e>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006156:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800616a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d112      	bne.n	800619c <HAL_PCD_EP_DB_Transmit+0x318>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006180:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006190:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006194:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e06a      	b.n	8006272 <HAL_PCD_EP_DB_Transmit+0x3ee>
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	2b3e      	cmp	r3, #62	@ 0x3e
 80061a0:	d81e      	bhi.n	80061e0 <HAL_PCD_EP_DB_Transmit+0x35c>
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_PCD_EP_DB_Transmit+0x334>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	3301      	adds	r3, #1
 80061b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	069a      	lsls	r2, r3, #26
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e048      	b.n	8006272 <HAL_PCD_EP_DB_Transmit+0x3ee>
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <HAL_PCD_EP_DB_Transmit+0x372>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	3b01      	subs	r3, #1
 80061f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006200:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	069b      	lsls	r3, r3, #26
 800620a:	431a      	orrs	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006216:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800621a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e027      	b.n	8006272 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d123      	bne.n	8006272 <HAL_PCD_EP_DB_Transmit+0x3ee>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006234:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006244:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006248:	b292      	uxth	r2, r2
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006256:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	041a      	lsls	r2, r3, #16
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800626a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800626e:	430a      	orrs	r2, r1
 8006270:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6959      	ldr	r1, [r3, #20]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	891a      	ldrh	r2, [r3, #8]
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	b29b      	uxth	r3, r3
 8006282:	f007 ff4a 	bl	800e11a <USB_WritePMA>
 8006286:	e1fb      	b.n	8006680 <HAL_PCD_EP_DB_Transmit+0x7fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7fe fde8 	bl	8004e68 <PCD_GET_EP_DBUF1_CNT>
 8006298:	4603      	mov	r3, r0
 800629a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	8bfb      	ldrh	r3, [r7, #30]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d30a      	bcc.n	80062bc <HAL_PCD_EP_DB_Transmit+0x438>
    {
      ep->xfer_len -= TxPctSize;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	8bfb      	ldrh	r3, [r7, #30]
 80062ac:	1ad2      	subs	r2, r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	619a      	str	r2, [r3, #24]
 80062b2:	e006      	b.n	80062c2 <HAL_PCD_EP_DB_Transmit+0x43e>
 80062b4:	07ff8fbf 	.word	0x07ff8fbf
 80062b8:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2200      	movs	r2, #0
 80062c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 80e1 	bne.w	800648e <HAL_PCD_EP_DB_Transmit+0x60a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d124      	bne.n	800631e <HAL_PCD_EP_DB_Transmit+0x49a>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062f2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006302:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006312:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006316:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e024      	b.n	8006368 <HAL_PCD_EP_DB_Transmit+0x4e4>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d120      	bne.n	8006368 <HAL_PCD_EP_DB_Transmit+0x4e4>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006330:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006340:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006344:	b292      	uxth	r2, r2
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8006352:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d124      	bne.n	80063ba <HAL_PCD_EP_DB_Transmit+0x536>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800637a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800638a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800638e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800639e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80063b6:	605a      	str	r2, [r3, #4]
 80063b8:	e024      	b.n	8006404 <HAL_PCD_EP_DB_Transmit+0x580>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d120      	bne.n	8006404 <HAL_PCD_EP_DB_Transmit+0x580>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063e0:	b292      	uxth	r2, r2
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80063ee:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006400:	6852      	ldr	r2, [r2, #4]
 8006402:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	78db      	ldrb	r3, [r3, #3]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d11b      	bne.n	8006444 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b7d      	ldr	r3, [pc, #500]	@ (8006614 <HAL_PCD_EP_DB_Transmit+0x790>)
 800641e:	4013      	ands	r3, r2
 8006420:	627b      	str	r3, [r7, #36]	@ 0x24
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	f083 0320 	eor.w	r3, r3, #32
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006442:	6013      	str	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	4619      	mov	r1, r3
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f008 fd3d 	bl	800eeca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006450:	88fb      	ldrh	r3, [r7, #6]
 8006452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d117      	bne.n	800648a <HAL_PCD_EP_DB_Transmit+0x606>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b6b      	ldr	r3, [pc, #428]	@ (8006618 <HAL_PCD_EP_DB_Transmit+0x794>)
 800646c:	4013      	ands	r3, r2
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	441a      	add	r2, r3
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006488:	6013      	str	r3, [r2, #0]
      }

      return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e119      	b.n	80066c2 <HAL_PCD_EP_DB_Transmit+0x83e>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d117      	bne.n	80064c8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006618 <HAL_PCD_EP_DB_Transmit+0x794>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c6:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	f040 80d6 	bne.w	8006680 <HAL_PCD_EP_DB_Transmit+0x7fc>
      {
        ep->xfer_buff += TxPctSize;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	695a      	ldr	r2, [r3, #20]
 80064d8:	8bfb      	ldrh	r3, [r7, #30]
 80064da:	441a      	add	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	8bfb      	ldrh	r3, [r7, #30]
 80064e6:	441a      	add	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d309      	bcc.n	800650c <HAL_PCD_EP_DB_Transmit+0x688>
        {
          len = ep->maxpacket;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6a1a      	ldr	r2, [r3, #32]
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	1ad2      	subs	r2, r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	621a      	str	r2, [r3, #32]
 800650a:	e014      	b.n	8006536 <HAL_PCD_EP_DB_Transmit+0x6b2>
        }
        else if (ep->xfer_len_db == 0U)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_PCD_EP_DB_Transmit+0x69e>
        {
          len = TxPctSize;
 8006514:	8bfb      	ldrh	r3, [r7, #30]
 8006516:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006520:	e009      	b.n	8006536 <HAL_PCD_EP_DB_Transmit+0x6b2>
        }
        else
        {
          len = ep->xfer_len_db;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d16e      	bne.n	800661c <HAL_PCD_EP_DB_Transmit+0x798>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006558:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800655c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d112      	bne.n	800658e <HAL_PCD_EP_DB_Transmit+0x70a>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006572:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006582:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006586:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	e06e      	b.n	800666c <HAL_PCD_EP_DB_Transmit+0x7e8>
 800658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006590:	2b3e      	cmp	r3, #62	@ 0x3e
 8006592:	d81e      	bhi.n	80065d2 <HAL_PCD_EP_DB_Transmit+0x74e>
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <HAL_PCD_EP_DB_Transmit+0x726>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	3301      	adds	r3, #1
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	069a      	lsls	r2, r3, #26
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	e04c      	b.n	800666c <HAL_PCD_EP_DB_Transmit+0x7e8>
 80065d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <HAL_PCD_EP_DB_Transmit+0x764>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	069b      	lsls	r3, r3, #26
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800660c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	e02b      	b.n	800666c <HAL_PCD_EP_DB_Transmit+0x7e8>
 8006614:	07ff8fbf 	.word	0x07ff8fbf
 8006618:	07ff8f8f 	.word	0x07ff8f8f
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d123      	bne.n	800666c <HAL_PCD_EP_DB_Transmit+0x7e8>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800662e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800663e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006642:	b292      	uxth	r2, r2
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006654:	6859      	ldr	r1, [r3, #4]
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	041a      	lsls	r2, r3, #16
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6959      	ldr	r1, [r3, #20]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	895a      	ldrh	r2, [r3, #10]
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	b29b      	uxth	r3, r3
 800667c:	f007 fd4d 	bl	800e11a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <HAL_PCD_EP_DB_Transmit+0x848>)
 8006692:	4013      	ands	r3, r2
 8006694:	637b      	str	r3, [r7, #52]	@ 0x34
 8006696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006698:	f083 0310 	eor.w	r3, r3, #16
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	f083 0320 	eor.w	r3, r3, #32
 80066a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3740      	adds	r7, #64	@ 0x40
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	07ff8fbf 	.word	0x07ff8fbf

080066d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	817b      	strh	r3, [r7, #10]
 80066de:	4613      	mov	r3, r2
 80066e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80066e2:	897b      	ldrh	r3, [r7, #10]
 80066e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ee:	897b      	ldrh	r3, [r7, #10]
 80066f0:	f003 0207 	and.w	r2, r3, #7
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	3310      	adds	r3, #16
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	3304      	adds	r3, #4
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	e00a      	b.n	800671e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006708:	897a      	ldrh	r2, [r7, #10]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	3304      	adds	r3, #4
 800671c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800671e:	893b      	ldrh	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d107      	bne.n	8006734 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	b29a      	uxth	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	80da      	strh	r2, [r3, #6]
 8006732:	e00b      	b.n	800674c <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2201      	movs	r2, #1
 8006738:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	b29a      	uxth	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0c1b      	lsrs	r3, r3, #16
 8006746:	b29a      	uxth	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677c:	f043 0201 	orr.w	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006788:	f043 0202 	orr.w	r2, r3, #2
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80067c0:	4b39      	ldr	r3, [pc, #228]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80067c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067c8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d10b      	bne.n	80067ea <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d8:	d905      	bls.n	80067e6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80067da:	4b33      	ldr	r3, [pc, #204]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	4a32      	ldr	r2, [pc, #200]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067e4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e057      	b.n	800689a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f0:	d90a      	bls.n	8006808 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80067f2:	4b2d      	ldr	r3, [pc, #180]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	4a2a      	ldr	r2, [pc, #168]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006804:	60d3      	str	r3, [r2, #12]
 8006806:	e007      	b.n	8006818 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006808:	4b27      	ldr	r3, [pc, #156]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006810:	4925      	ldr	r1, [pc, #148]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4313      	orrs	r3, r2
 8006816:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006818:	4b24      	ldr	r3, [pc, #144]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a24      	ldr	r2, [pc, #144]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	099b      	lsrs	r3, r3, #6
 8006824:	2232      	movs	r2, #50	@ 0x32
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800682c:	fba2 2303 	umull	r2, r3, r2, r3
 8006830:	099b      	lsrs	r3, r3, #6
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006836:	e002      	b.n	800683e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800683e:	4b1a      	ldr	r3, [pc, #104]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <HAL_PWREx_ControlVoltageScaling+0x98>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f3      	bne.n	8006838 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006856:	4b15      	ldr	r3, [pc, #84]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a15      	ldr	r2, [pc, #84]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	099b      	lsrs	r3, r3, #6
 8006862:	2232      	movs	r2, #50	@ 0x32
 8006864:	fb02 f303 	mul.w	r3, r2, r3
 8006868:	4a11      	ldr	r2, [pc, #68]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006874:	e002      	b.n	800687c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3b01      	subs	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800687c:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800687e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f3      	bne.n	8006876 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e000      	b.n	800689a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	46020800 	.word	0x46020800
 80068ac:	20000030 	.word	0x20000030
 80068b0:	10624dd3 	.word	0x10624dd3

080068b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80068b8:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <HAL_PWREx_GetVoltageRange+0x18>)
 80068ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	46020800 	.word	0x46020800

080068d0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80068d4:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	4a04      	ldr	r2, [pc, #16]	@ (80068ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068de:	6113      	str	r3, [r2, #16]
}
 80068e0:	bf00      	nop
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	46020800 	.word	0x46020800

080068f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08e      	sub	sp, #56	@ 0x38
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f000 bec8 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800690a:	4b99      	ldr	r3, [pc, #612]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f003 030c 	and.w	r3, r3, #12
 8006912:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006914:	4b96      	ldr	r3, [pc, #600]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 816c 	beq.w	8006c04 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <HAL_RCC_OscConfig+0x52>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	2b0c      	cmp	r3, #12
 8006936:	f040 80de 	bne.w	8006af6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800693a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693c:	2b01      	cmp	r3, #1
 800693e:	f040 80da 	bne.w	8006af6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f000 bea5 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006954:	4b86      	ldr	r3, [pc, #536]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_RCC_OscConfig+0x7a>
 8006960:	4b83      	ldr	r3, [pc, #524]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006968:	e005      	b.n	8006976 <HAL_RCC_OscConfig+0x86>
 800696a:	4b81      	ldr	r3, [pc, #516]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 800696c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006970:	041b      	lsls	r3, r3, #16
 8006972:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006976:	4293      	cmp	r3, r2
 8006978:	d255      	bcs.n	8006a26 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f9d9 	bl	8007d3c <RCC_SetFlashLatencyFromMSIRange>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	f000 be82 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006996:	4b76      	ldr	r3, [pc, #472]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	4a75      	ldr	r2, [pc, #468]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 800699c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80069a0:	6093      	str	r3, [r2, #8]
 80069a2:	4b73      	ldr	r3, [pc, #460]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	4970      	ldr	r1, [pc, #448]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80069bc:	d309      	bcc.n	80069d2 <HAL_RCC_OscConfig+0xe2>
 80069be:	4b6c      	ldr	r3, [pc, #432]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f023 021f 	bic.w	r2, r3, #31
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	4969      	ldr	r1, [pc, #420]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60cb      	str	r3, [r1, #12]
 80069d0:	e07e      	b.n	8006ad0 <HAL_RCC_OscConfig+0x1e0>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da0a      	bge.n	80069f0 <HAL_RCC_OscConfig+0x100>
 80069da:	4b65      	ldr	r3, [pc, #404]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	015b      	lsls	r3, r3, #5
 80069e8:	4961      	ldr	r1, [pc, #388]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60cb      	str	r3, [r1, #12]
 80069ee:	e06f      	b.n	8006ad0 <HAL_RCC_OscConfig+0x1e0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f8:	d30a      	bcc.n	8006a10 <HAL_RCC_OscConfig+0x120>
 80069fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	4959      	ldr	r1, [pc, #356]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60cb      	str	r3, [r1, #12]
 8006a0e:	e05f      	b.n	8006ad0 <HAL_RCC_OscConfig+0x1e0>
 8006a10:	4b57      	ldr	r3, [pc, #348]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	03db      	lsls	r3, r3, #15
 8006a1e:	4954      	ldr	r1, [pc, #336]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60cb      	str	r3, [r1, #12]
 8006a24:	e054      	b.n	8006ad0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006a26:	4b52      	ldr	r3, [pc, #328]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	4a51      	ldr	r2, [pc, #324]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a30:	6093      	str	r3, [r2, #8]
 8006a32:	4b4f      	ldr	r3, [pc, #316]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	494c      	ldr	r1, [pc, #304]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006a4c:	d309      	bcc.n	8006a62 <HAL_RCC_OscConfig+0x172>
 8006a4e:	4b48      	ldr	r3, [pc, #288]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f023 021f 	bic.w	r2, r3, #31
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	4945      	ldr	r1, [pc, #276]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60cb      	str	r3, [r1, #12]
 8006a60:	e028      	b.n	8006ab4 <HAL_RCC_OscConfig+0x1c4>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	da0a      	bge.n	8006a80 <HAL_RCC_OscConfig+0x190>
 8006a6a:	4b41      	ldr	r3, [pc, #260]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	015b      	lsls	r3, r3, #5
 8006a78:	493d      	ldr	r1, [pc, #244]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60cb      	str	r3, [r1, #12]
 8006a7e:	e019      	b.n	8006ab4 <HAL_RCC_OscConfig+0x1c4>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a88:	d30a      	bcc.n	8006aa0 <HAL_RCC_OscConfig+0x1b0>
 8006a8a:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	4935      	ldr	r1, [pc, #212]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60cb      	str	r3, [r1, #12]
 8006a9e:	e009      	b.n	8006ab4 <HAL_RCC_OscConfig+0x1c4>
 8006aa0:	4b33      	ldr	r3, [pc, #204]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	03db      	lsls	r3, r3, #15
 8006aae:	4930      	ldr	r1, [pc, #192]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 f93c 	bl	8007d3c <RCC_SetFlashLatencyFromMSIRange>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f000 bde5 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006ad0:	f001 f8de 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ad4:	4b27      	ldr	r3, [pc, #156]	@ (8006b74 <HAL_RCC_OscConfig+0x284>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fc fa25 	bl	8002f28 <HAL_InitTick>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 808a 	beq.w	8006c02 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006aee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006af2:	f000 bdd2 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d066      	beq.n	8006bcc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006afe:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1b      	ldr	r2, [pc, #108]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b0a:	f7fc fa97 	bl	800303c <HAL_GetTick>
 8006b0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006b10:	e009      	b.n	8006b26 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b12:	f7fc fa93 	bl	800303c <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d902      	bls.n	8006b26 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	f000 bdba 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ef      	beq.n	8006b12 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006b32:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	4a0e      	ldr	r2, [pc, #56]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b3c:	6093      	str	r3, [r2, #8]
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4a:	4909      	ldr	r1, [pc, #36]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b58:	d30e      	bcc.n	8006b78 <HAL_RCC_OscConfig+0x288>
 8006b5a:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f023 021f 	bic.w	r2, r3, #31
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	4902      	ldr	r1, [pc, #8]	@ (8006b70 <HAL_RCC_OscConfig+0x280>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60cb      	str	r3, [r1, #12]
 8006b6c:	e04a      	b.n	8006c04 <HAL_RCC_OscConfig+0x314>
 8006b6e:	bf00      	nop
 8006b70:	46020c00 	.word	0x46020c00
 8006b74:	20000034 	.word	0x20000034
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da0a      	bge.n	8006b96 <HAL_RCC_OscConfig+0x2a6>
 8006b80:	4b98      	ldr	r3, [pc, #608]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	015b      	lsls	r3, r3, #5
 8006b8e:	4995      	ldr	r1, [pc, #596]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60cb      	str	r3, [r1, #12]
 8006b94:	e036      	b.n	8006c04 <HAL_RCC_OscConfig+0x314>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9e:	d30a      	bcc.n	8006bb6 <HAL_RCC_OscConfig+0x2c6>
 8006ba0:	4b90      	ldr	r3, [pc, #576]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	498d      	ldr	r1, [pc, #564]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60cb      	str	r3, [r1, #12]
 8006bb4:	e026      	b.n	8006c04 <HAL_RCC_OscConfig+0x314>
 8006bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	03db      	lsls	r3, r3, #15
 8006bc4:	4987      	ldr	r1, [pc, #540]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60cb      	str	r3, [r1, #12]
 8006bca:	e01b      	b.n	8006c04 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006bcc:	4b85      	ldr	r3, [pc, #532]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a84      	ldr	r2, [pc, #528]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006bd2:	f023 0301 	bic.w	r3, r3, #1
 8006bd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006bd8:	f7fc fa30 	bl	800303c <HAL_GetTick>
 8006bdc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006bde:	e009      	b.n	8006bf4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006be0:	f7fc fa2c 	bl	800303c <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d902      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	f000 bd53 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006bf4:	4b7b      	ldr	r3, [pc, #492]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1ef      	bne.n	8006be0 <HAL_RCC_OscConfig+0x2f0>
 8006c00:	e000      	b.n	8006c04 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006c02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 808b 	beq.w	8006d28 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_OscConfig+0x334>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	2b0c      	cmp	r3, #12
 8006c1c:	d109      	bne.n	8006c32 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d106      	bne.n	8006c32 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d17d      	bne.n	8006d28 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f000 bd34 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c3a:	d106      	bne.n	8006c4a <HAL_RCC_OscConfig+0x35a>
 8006c3c:	4b69      	ldr	r3, [pc, #420]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a68      	ldr	r2, [pc, #416]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	e041      	b.n	8006cce <HAL_RCC_OscConfig+0x3de>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c52:	d112      	bne.n	8006c7a <HAL_RCC_OscConfig+0x38a>
 8006c54:	4b63      	ldr	r3, [pc, #396]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a62      	ldr	r2, [pc, #392]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	4b60      	ldr	r3, [pc, #384]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5f      	ldr	r2, [pc, #380]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c66:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	4b5d      	ldr	r3, [pc, #372]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5c      	ldr	r2, [pc, #368]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	e029      	b.n	8006cce <HAL_RCC_OscConfig+0x3de>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006c82:	d112      	bne.n	8006caa <HAL_RCC_OscConfig+0x3ba>
 8006c84:	4b57      	ldr	r3, [pc, #348]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a56      	ldr	r2, [pc, #344]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	4b54      	ldr	r3, [pc, #336]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a53      	ldr	r2, [pc, #332]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	4b51      	ldr	r3, [pc, #324]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a50      	ldr	r2, [pc, #320]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	e011      	b.n	8006cce <HAL_RCC_OscConfig+0x3de>
 8006caa:	4b4e      	ldr	r3, [pc, #312]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a4d      	ldr	r2, [pc, #308]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a4a      	ldr	r2, [pc, #296]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006cbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4b48      	ldr	r3, [pc, #288]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a47      	ldr	r2, [pc, #284]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006cc8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ccc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d014      	beq.n	8006d00 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006cd6:	f7fc f9b1 	bl	800303c <HAL_GetTick>
 8006cda:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cdc:	e009      	b.n	8006cf2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cde:	f7fc f9ad 	bl	800303c <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b64      	cmp	r3, #100	@ 0x64
 8006cea:	d902      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	f000 bcd4 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0ef      	beq.n	8006cde <HAL_RCC_OscConfig+0x3ee>
 8006cfe:	e013      	b.n	8006d28 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006d00:	f7fc f99c 	bl	800303c <HAL_GetTick>
 8006d04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d06:	e009      	b.n	8006d1c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d08:	f7fc f998 	bl	800303c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b64      	cmp	r3, #100	@ 0x64
 8006d14:	d902      	bls.n	8006d1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	f000 bcbf 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d1c:	4b31      	ldr	r3, [pc, #196]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1ef      	bne.n	8006d08 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d05f      	beq.n	8006df4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d005      	beq.n	8006d46 <HAL_RCC_OscConfig+0x456>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	2b0c      	cmp	r3, #12
 8006d3e:	d114      	bne.n	8006d6a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d111      	bne.n	8006d6a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f000 bca3 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006d54:	4b23      	ldr	r3, [pc, #140]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	4920      	ldr	r1, [pc, #128]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006d68:	e044      	b.n	8006df4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d024      	beq.n	8006dbc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006d72:	4b1c      	ldr	r3, [pc, #112]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d7e:	f7fc f95d 	bl	800303c <HAL_GetTick>
 8006d82:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d84:	e009      	b.n	8006d9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d86:	f7fc f959 	bl	800303c <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d902      	bls.n	8006d9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	f000 bc80 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d9a:	4b12      	ldr	r3, [pc, #72]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0ef      	beq.n	8006d86 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006da6:	4b0f      	ldr	r3, [pc, #60]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	490b      	ldr	r1, [pc, #44]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	610b      	str	r3, [r1, #16]
 8006dba:	e01b      	b.n	8006df4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006dbc:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a08      	ldr	r2, [pc, #32]	@ (8006de4 <HAL_RCC_OscConfig+0x4f4>)
 8006dc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dc6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006dc8:	f7fc f938 	bl	800303c <HAL_GetTick>
 8006dcc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dd0:	f7fc f934 	bl	800303c <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d904      	bls.n	8006de8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	f000 bc5b 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
 8006de4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006de8:	4baf      	ldr	r3, [pc, #700]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ed      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80c8 	beq.w	8006f92 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006e02:	2300      	movs	r3, #0
 8006e04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e08:	4ba7      	ldr	r3, [pc, #668]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d111      	bne.n	8006e3a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e16:	4ba4      	ldr	r3, [pc, #656]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e1c:	4aa2      	ldr	r2, [pc, #648]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006e1e:	f043 0304 	orr.w	r3, r3, #4
 8006e22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006e26:	4ba0      	ldr	r3, [pc, #640]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e3a:	4b9c      	ldr	r3, [pc, #624]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d119      	bne.n	8006e7a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006e46:	4b99      	ldr	r3, [pc, #612]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	4a98      	ldr	r2, [pc, #608]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e52:	f7fc f8f3 	bl	800303c <HAL_GetTick>
 8006e56:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e58:	e009      	b.n	8006e6e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5a:	f7fc f8ef 	bl	800303c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d902      	bls.n	8006e6e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	f000 bc16 	b.w	800769a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0ef      	beq.n	8006e5a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d05f      	beq.n	8006f42 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006e82:	4b89      	ldr	r3, [pc, #548]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e88:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699a      	ldr	r2, [r3, #24]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d037      	beq.n	8006f08 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e3f4      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01b      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006eba:	4b7b      	ldr	r3, [pc, #492]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ec0:	4a79      	ldr	r2, [pc, #484]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006ec2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006eca:	f7fc f8b7 	bl	800303c <HAL_GetTick>
 8006ece:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ed2:	f7fc f8b3 	bl	800303c <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e3da      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006ee4:	4b70      	ldr	r3, [pc, #448]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1ef      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	4969      	ldr	r1, [pc, #420]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006f08:	4b67      	ldr	r3, [pc, #412]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f0e:	4a66      	ldr	r2, [pc, #408]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006f18:	f7fc f890 	bl	800303c <HAL_GetTick>
 8006f1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f20:	f7fc f88c 	bl	800303c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e3b3      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006f32:	4b5d      	ldr	r3, [pc, #372]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0ef      	beq.n	8006f20 <HAL_RCC_OscConfig+0x630>
 8006f40:	e01b      	b.n	8006f7a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006f42:	4b59      	ldr	r3, [pc, #356]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f48:	4a57      	ldr	r2, [pc, #348]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f4a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006f52:	f7fc f873 	bl	800303c <HAL_GetTick>
 8006f56:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f5a:	f7fc f86f 	bl	800303c <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e396      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1ef      	bne.n	8006f5a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f7a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d107      	bne.n	8006f92 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f82:	4b49      	ldr	r3, [pc, #292]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f88:	4a47      	ldr	r2, [pc, #284]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006f8a:	f023 0304 	bic.w	r3, r3, #4
 8006f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 8111 	beq.w	80071c2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa6:	4b40      	ldr	r3, [pc, #256]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d111      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fba:	4a3b      	ldr	r2, [pc, #236]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006fbc:	f043 0304 	orr.w	r3, r3, #4
 8006fc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006fc4:	4b38      	ldr	r3, [pc, #224]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8006fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	613b      	str	r3, [r7, #16]
 8006fd0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006fd8:	4b34      	ldr	r3, [pc, #208]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d118      	bne.n	8007016 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006fe4:	4b31      	ldr	r3, [pc, #196]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	4a30      	ldr	r2, [pc, #192]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 8006fea:	f043 0301 	orr.w	r3, r3, #1
 8006fee:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ff0:	f7fc f824 	bl	800303c <HAL_GetTick>
 8006ff4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff8:	f7fc f820 	bl	800303c <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e347      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800700a:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <HAL_RCC_OscConfig+0x7bc>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01f      	beq.n	8007062 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d010      	beq.n	8007050 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800702e:	4b1e      	ldr	r3, [pc, #120]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007034:	4a1c      	ldr	r2, [pc, #112]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007036:	f043 0304 	orr.w	r3, r3, #4
 800703a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800703e:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007044:	4a18      	ldr	r2, [pc, #96]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800704e:	e018      	b.n	8007082 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007050:	4b15      	ldr	r3, [pc, #84]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007056:	4a14      	ldr	r2, [pc, #80]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007060:	e00f      	b.n	8007082 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007062:	4b11      	ldr	r3, [pc, #68]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007068:	4a0f      	ldr	r2, [pc, #60]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007072:	4b0d      	ldr	r3, [pc, #52]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 8007074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007078:	4a0b      	ldr	r2, [pc, #44]	@ (80070a8 <HAL_RCC_OscConfig+0x7b8>)
 800707a:	f023 0304 	bic.w	r3, r3, #4
 800707e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d057      	beq.n	800713a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800708a:	f7fb ffd7 	bl	800303c <HAL_GetTick>
 800708e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007090:	e00e      	b.n	80070b0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fb ffd3 	bl	800303c <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d905      	bls.n	80070b0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e2f8      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
 80070a8:	46020c00 	.word	0x46020c00
 80070ac:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070b0:	4b9c      	ldr	r3, [pc, #624]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80070b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0e9      	beq.n	8007092 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01b      	beq.n	8007102 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80070ca:	4b96      	ldr	r3, [pc, #600]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80070cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d0:	4a94      	ldr	r2, [pc, #592]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80070d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80070da:	e00a      	b.n	80070f2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070dc:	f7fb ffae 	bl	800303c <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e2d3      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80070f2:	4b8c      	ldr	r3, [pc, #560]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80070f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0ed      	beq.n	80070dc <HAL_RCC_OscConfig+0x7ec>
 8007100:	e053      	b.n	80071aa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007102:	4b88      	ldr	r3, [pc, #544]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007108:	4a86      	ldr	r2, [pc, #536]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800710a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800710e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007112:	e00a      	b.n	800712a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007114:	f7fb ff92 	bl	800303c <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e2b7      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800712a:	4b7e      	ldr	r3, [pc, #504]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800712c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1ed      	bne.n	8007114 <HAL_RCC_OscConfig+0x824>
 8007138:	e037      	b.n	80071aa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800713a:	f7fb ff7f 	bl	800303c <HAL_GetTick>
 800713e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007140:	e00a      	b.n	8007158 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007142:	f7fb ff7b 	bl	800303c <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007150:	4293      	cmp	r3, r2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e2a0      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007158:	4b72      	ldr	r3, [pc, #456]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800715a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1ed      	bne.n	8007142 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007166:	4b6f      	ldr	r3, [pc, #444]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800716c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01a      	beq.n	80071aa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007174:	4b6b      	ldr	r3, [pc, #428]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800717a:	4a6a      	ldr	r2, [pc, #424]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800717c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007180:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007184:	e00a      	b.n	800719c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007186:	f7fb ff59 	bl	800303c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007194:	4293      	cmp	r3, r2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e27e      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800719c:	4b61      	ldr	r3, [pc, #388]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800719e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1ed      	bne.n	8007186 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071aa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d107      	bne.n	80071c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b2:	4b5c      	ldr	r3, [pc, #368]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80071b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b8:	4a5a      	ldr	r2, [pc, #360]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80071ba:	f023 0304 	bic.w	r3, r3, #4
 80071be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d036      	beq.n	800723c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d019      	beq.n	800720a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80071d6:	4b53      	ldr	r3, [pc, #332]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a52      	ldr	r2, [pc, #328]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80071dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071e0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80071e2:	f7fb ff2b 	bl	800303c <HAL_GetTick>
 80071e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ea:	f7fb ff27 	bl	800303c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e24e      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80071fc:	4b49      	ldr	r3, [pc, #292]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCC_OscConfig+0x8fa>
 8007208:	e018      	b.n	800723c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800720a:	4b46      	ldr	r3, [pc, #280]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a45      	ldr	r2, [pc, #276]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007210:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007214:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007216:	f7fb ff11 	bl	800303c <HAL_GetTick>
 800721a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800721c:	e008      	b.n	8007230 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800721e:	f7fb ff0d 	bl	800303c <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e234      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007230:	4b3c      	ldr	r3, [pc, #240]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f0      	bne.n	800721e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007244:	2b00      	cmp	r3, #0
 8007246:	d036      	beq.n	80072b6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724c:	2b00      	cmp	r3, #0
 800724e:	d019      	beq.n	8007284 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007250:	4b34      	ldr	r3, [pc, #208]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a33      	ldr	r2, [pc, #204]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800725a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800725c:	f7fb feee 	bl	800303c <HAL_GetTick>
 8007260:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007264:	f7fb feea 	bl	800303c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e211      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007276:	4b2b      	ldr	r3, [pc, #172]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0x974>
 8007282:	e018      	b.n	80072b6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007284:	4b27      	ldr	r3, [pc, #156]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a26      	ldr	r2, [pc, #152]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800728a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800728e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007290:	f7fb fed4 	bl	800303c <HAL_GetTick>
 8007294:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007298:	f7fb fed0 	bl	800303c <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e1f7      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80072aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1f0      	bne.n	8007298 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d07f      	beq.n	80073c2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d062      	beq.n	8007390 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80072ca:	4b16      	ldr	r3, [pc, #88]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4a15      	ldr	r2, [pc, #84]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80072d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072d4:	6093      	str	r3, [r2, #8]
 80072d6:	4b13      	ldr	r3, [pc, #76]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e2:	4910      	ldr	r1, [pc, #64]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80072f0:	d309      	bcc.n	8007306 <HAL_RCC_OscConfig+0xa16>
 80072f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f023 021f 	bic.w	r2, r3, #31
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	4909      	ldr	r1, [pc, #36]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007300:	4313      	orrs	r3, r2
 8007302:	60cb      	str	r3, [r1, #12]
 8007304:	e02a      	b.n	800735c <HAL_RCC_OscConfig+0xa6c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730a:	2b00      	cmp	r3, #0
 800730c:	da0c      	bge.n	8007328 <HAL_RCC_OscConfig+0xa38>
 800730e:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	015b      	lsls	r3, r3, #5
 800731c:	4901      	ldr	r1, [pc, #4]	@ (8007324 <HAL_RCC_OscConfig+0xa34>)
 800731e:	4313      	orrs	r3, r2
 8007320:	60cb      	str	r3, [r1, #12]
 8007322:	e01b      	b.n	800735c <HAL_RCC_OscConfig+0xa6c>
 8007324:	46020c00 	.word	0x46020c00
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007330:	d30a      	bcc.n	8007348 <HAL_RCC_OscConfig+0xa58>
 8007332:	4ba1      	ldr	r3, [pc, #644]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	029b      	lsls	r3, r3, #10
 8007340:	499d      	ldr	r1, [pc, #628]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007342:	4313      	orrs	r3, r2
 8007344:	60cb      	str	r3, [r1, #12]
 8007346:	e009      	b.n	800735c <HAL_RCC_OscConfig+0xa6c>
 8007348:	4b9b      	ldr	r3, [pc, #620]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	03db      	lsls	r3, r3, #15
 8007356:	4998      	ldr	r1, [pc, #608]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007358:	4313      	orrs	r3, r2
 800735a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800735c:	4b96      	ldr	r3, [pc, #600]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a95      	ldr	r2, [pc, #596]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007362:	f043 0310 	orr.w	r3, r3, #16
 8007366:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007368:	f7fb fe68 	bl	800303c <HAL_GetTick>
 800736c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007370:	f7fb fe64 	bl	800303c <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e18b      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007382:	4b8d      	ldr	r3, [pc, #564]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0xa80>
 800738e:	e018      	b.n	80073c2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007390:	4b89      	ldr	r3, [pc, #548]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a88      	ldr	r2, [pc, #544]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007396:	f023 0310 	bic.w	r3, r3, #16
 800739a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800739c:	f7fb fe4e 	bl	800303c <HAL_GetTick>
 80073a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80073a4:	f7fb fe4a 	bl	800303c <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e171      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80073b6:	4b80      	ldr	r3, [pc, #512]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f0      	bne.n	80073a4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8166 	beq.w	8007698 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073d2:	4b79      	ldr	r3, [pc, #484]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f003 030c 	and.w	r3, r3, #12
 80073da:	2b0c      	cmp	r3, #12
 80073dc:	f000 80f2 	beq.w	80075c4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	f040 80c5 	bne.w	8007574 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80073ea:	4b73      	ldr	r3, [pc, #460]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a72      	ldr	r2, [pc, #456]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80073f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80073f6:	f7fb fe21 	bl	800303c <HAL_GetTick>
 80073fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073fe:	f7fb fe1d 	bl	800303c <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e144      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007410:	4b69      	ldr	r3, [pc, #420]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f0      	bne.n	80073fe <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800741c:	4b66      	ldr	r3, [pc, #408]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800741e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d111      	bne.n	800744e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800742a:	4b63      	ldr	r3, [pc, #396]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800742c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007430:	4a61      	ldr	r2, [pc, #388]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007432:	f043 0304 	orr.w	r3, r3, #4
 8007436:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800743a:	4b5f      	ldr	r3, [pc, #380]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800743c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800744e:	4b5b      	ldr	r3, [pc, #364]	@ (80075bc <HAL_RCC_OscConfig+0xccc>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007456:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800745a:	d102      	bne.n	8007462 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800745c:	2301      	movs	r3, #1
 800745e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007462:	4b56      	ldr	r3, [pc, #344]	@ (80075bc <HAL_RCC_OscConfig+0xccc>)
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4a55      	ldr	r2, [pc, #340]	@ (80075bc <HAL_RCC_OscConfig+0xccc>)
 8007468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800746c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800746e:	4b52      	ldr	r3, [pc, #328]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007482:	3a01      	subs	r2, #1
 8007484:	0212      	lsls	r2, r2, #8
 8007486:	4311      	orrs	r1, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800748c:	430a      	orrs	r2, r1
 800748e:	494a      	ldr	r1, [pc, #296]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007490:	4313      	orrs	r3, r2
 8007492:	628b      	str	r3, [r1, #40]	@ 0x28
 8007494:	4b48      	ldr	r3, [pc, #288]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007498:	4b49      	ldr	r3, [pc, #292]	@ (80075c0 <HAL_RCC_OscConfig+0xcd0>)
 800749a:	4013      	ands	r3, r2
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80074a0:	3a01      	subs	r2, #1
 80074a2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80074aa:	3a01      	subs	r2, #1
 80074ac:	0252      	lsls	r2, r2, #9
 80074ae:	b292      	uxth	r2, r2
 80074b0:	4311      	orrs	r1, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80074b6:	3a01      	subs	r2, #1
 80074b8:	0412      	lsls	r2, r2, #16
 80074ba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80074be:	4311      	orrs	r1, r2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80074c4:	3a01      	subs	r2, #1
 80074c6:	0612      	lsls	r2, r2, #24
 80074c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80074cc:	430a      	orrs	r2, r1
 80074ce:	493a      	ldr	r1, [pc, #232]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80074d4:	4b38      	ldr	r3, [pc, #224]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	4a37      	ldr	r2, [pc, #220]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80074da:	f023 0310 	bic.w	r3, r3, #16
 80074de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e4:	4a34      	ldr	r2, [pc, #208]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80074ea:	4b33      	ldr	r3, [pc, #204]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	4a32      	ldr	r2, [pc, #200]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80074f0:	f043 0310 	orr.w	r3, r3, #16
 80074f4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80074f6:	4b30      	ldr	r3, [pc, #192]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fa:	f023 020c 	bic.w	r2, r3, #12
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007502:	492d      	ldr	r1, [pc, #180]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007504:	4313      	orrs	r3, r2
 8007506:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007508:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800750c:	2b01      	cmp	r3, #1
 800750e:	d105      	bne.n	800751c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007510:	4b2a      	ldr	r3, [pc, #168]	@ (80075bc <HAL_RCC_OscConfig+0xccc>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4a29      	ldr	r2, [pc, #164]	@ (80075bc <HAL_RCC_OscConfig+0xccc>)
 8007516:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800751a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800751c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007520:	2b01      	cmp	r3, #1
 8007522:	d107      	bne.n	8007534 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007524:	4b24      	ldr	r3, [pc, #144]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800752a:	4a23      	ldr	r2, [pc, #140]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800752c:	f023 0304 	bic.w	r3, r3, #4
 8007530:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007534:	4b20      	ldr	r3, [pc, #128]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a1f      	ldr	r2, [pc, #124]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800753a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800753e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007540:	f7fb fd7c 	bl	800303c <HAL_GetTick>
 8007544:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007548:	f7fb fd78 	bl	800303c <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e09f      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800755a:	4b17      	ldr	r3, [pc, #92]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0f0      	beq.n	8007548 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007566:	4b14      	ldr	r3, [pc, #80]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756a:	4a13      	ldr	r2, [pc, #76]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800756c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007570:	6293      	str	r3, [r2, #40]	@ 0x28
 8007572:	e091      	b.n	8007698 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007574:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800757a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800757e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007580:	f7fb fd5c 	bl	800303c <HAL_GetTick>
 8007584:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007588:	f7fb fd58 	bl	800303c <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e07f      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800759a:	4b07      	ldr	r3, [pc, #28]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1f0      	bne.n	8007588 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80075a6:	4b04      	ldr	r3, [pc, #16]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80075a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075aa:	4a03      	ldr	r2, [pc, #12]	@ (80075b8 <HAL_RCC_OscConfig+0xcc8>)
 80075ac:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80075b0:	f023 0303 	bic.w	r3, r3, #3
 80075b4:	6293      	str	r3, [r2, #40]	@ 0x28
 80075b6:	e06f      	b.n	8007698 <HAL_RCC_OscConfig+0xda8>
 80075b8:	46020c00 	.word	0x46020c00
 80075bc:	46020800 	.word	0x46020800
 80075c0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80075c4:	4b37      	ldr	r3, [pc, #220]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075ca:	4b36      	ldr	r3, [pc, #216]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 80075cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ce:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d039      	beq.n	800764c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	f003 0203 	and.w	r2, r3, #3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d132      	bne.n	800764c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	0a1b      	lsrs	r3, r3, #8
 80075ea:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d129      	bne.n	800764c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007602:	429a      	cmp	r2, r3
 8007604:	d122      	bne.n	800764c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007610:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007612:	429a      	cmp	r2, r3
 8007614:	d11a      	bne.n	800764c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	0a5b      	lsrs	r3, r3, #9
 800761a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007622:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007624:	429a      	cmp	r2, r3
 8007626:	d111      	bne.n	800764c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007634:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007636:	429a      	cmp	r2, r3
 8007638:	d108      	bne.n	800764c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	0e1b      	lsrs	r3, r3, #24
 800763e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007646:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d001      	beq.n	8007650 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e024      	b.n	800769a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007650:	4b14      	ldr	r3, [pc, #80]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800765e:	429a      	cmp	r2, r3
 8007660:	d01a      	beq.n	8007698 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007662:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 8007664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007666:	4a0f      	ldr	r2, [pc, #60]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 8007668:	f023 0310 	bic.w	r3, r3, #16
 800766c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766e:	f7fb fce5 	bl	800303c <HAL_GetTick>
 8007672:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007674:	bf00      	nop
 8007676:	f7fb fce1 	bl	800303c <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767e:	4293      	cmp	r3, r2
 8007680:	d0f9      	beq.n	8007676 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007686:	4a07      	ldr	r2, [pc, #28]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800768c:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 800768e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007690:	4a04      	ldr	r2, [pc, #16]	@ (80076a4 <HAL_RCC_OscConfig+0xdb4>)
 8007692:	f043 0310 	orr.w	r3, r3, #16
 8007696:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3738      	adds	r7, #56	@ 0x38
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	46020c00 	.word	0x46020c00

080076a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e1d9      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076bc:	4b9b      	ldr	r3, [pc, #620]	@ (800792c <HAL_RCC_ClockConfig+0x284>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d910      	bls.n	80076ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ca:	4b98      	ldr	r3, [pc, #608]	@ (800792c <HAL_RCC_ClockConfig+0x284>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f023 020f 	bic.w	r2, r3, #15
 80076d2:	4996      	ldr	r1, [pc, #600]	@ (800792c <HAL_RCC_ClockConfig+0x284>)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076da:	4b94      	ldr	r3, [pc, #592]	@ (800792c <HAL_RCC_ClockConfig+0x284>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d001      	beq.n	80076ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e1c1      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d010      	beq.n	800771a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695a      	ldr	r2, [r3, #20]
 80076fc:	4b8c      	ldr	r3, [pc, #560]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007704:	429a      	cmp	r2, r3
 8007706:	d908      	bls.n	800771a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007708:	4b89      	ldr	r3, [pc, #548]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	4986      	ldr	r1, [pc, #536]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007716:	4313      	orrs	r3, r2
 8007718:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d012      	beq.n	800774c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691a      	ldr	r2, [r3, #16]
 800772a:	4b81      	ldr	r3, [pc, #516]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	091b      	lsrs	r3, r3, #4
 8007730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007734:	429a      	cmp	r2, r3
 8007736:	d909      	bls.n	800774c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007738:	4b7d      	ldr	r3, [pc, #500]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	497a      	ldr	r1, [pc, #488]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007748:	4313      	orrs	r3, r2
 800774a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d010      	beq.n	800777a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	4b74      	ldr	r3, [pc, #464]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007764:	429a      	cmp	r2, r3
 8007766:	d908      	bls.n	800777a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007768:	4b71      	ldr	r3, [pc, #452]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	496e      	ldr	r1, [pc, #440]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007776:	4313      	orrs	r3, r2
 8007778:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d010      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	4b69      	ldr	r3, [pc, #420]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	429a      	cmp	r2, r3
 8007794:	d908      	bls.n	80077a8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007796:	4b66      	ldr	r3, [pc, #408]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f023 020f 	bic.w	r2, r3, #15
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	4963      	ldr	r1, [pc, #396]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80d2 	beq.w	800795a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d143      	bne.n	800784a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077c2:	4b5b      	ldr	r3, [pc, #364]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80077c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d110      	bne.n	80077f2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80077d0:	4b57      	ldr	r3, [pc, #348]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80077d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077d6:	4a56      	ldr	r2, [pc, #344]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80077d8:	f043 0304 	orr.w	r3, r3, #4
 80077dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80077e0:	4b53      	ldr	r3, [pc, #332]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80077e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	60bb      	str	r3, [r7, #8]
 80077ec:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80077f2:	f7fb fc23 	bl	800303c <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80077f8:	4b4e      	ldr	r3, [pc, #312]	@ (8007934 <HAL_RCC_ClockConfig+0x28c>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00f      	beq.n	8007824 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007804:	e008      	b.n	8007818 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007806:	f7fb fc19 	bl	800303c <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e12b      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007818:	4b46      	ldr	r3, [pc, #280]	@ (8007934 <HAL_RCC_ClockConfig+0x28c>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d107      	bne.n	800783a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800782a:	4b41      	ldr	r3, [pc, #260]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800782c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007830:	4a3f      	ldr	r2, [pc, #252]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007832:	f023 0304 	bic.w	r3, r3, #4
 8007836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800783a:	4b3d      	ldr	r3, [pc, #244]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d121      	bne.n	800788a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e112      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d107      	bne.n	8007862 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007852:	4b37      	ldr	r3, [pc, #220]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d115      	bne.n	800788a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e106      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d107      	bne.n	800787a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800786a:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e0fa      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800787a:	4b2d      	ldr	r3, [pc, #180]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e0f2      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800788a:	4b29      	ldr	r3, [pc, #164]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f023 0203 	bic.w	r2, r3, #3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	4926      	ldr	r1, [pc, #152]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007898:	4313      	orrs	r3, r2
 800789a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800789c:	f7fb fbce 	bl	800303c <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d112      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078aa:	e00a      	b.n	80078c2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078ac:	f7fb fbc6 	bl	800303c <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e0d6      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f003 030c 	and.w	r3, r3, #12
 80078ca:	2b0c      	cmp	r3, #12
 80078cc:	d1ee      	bne.n	80078ac <HAL_RCC_ClockConfig+0x204>
 80078ce:	e044      	b.n	800795a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d112      	bne.n	80078fe <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80078d8:	e00a      	b.n	80078f0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078da:	f7fb fbaf 	bl	800303c <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e0bf      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80078f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f003 030c 	and.w	r3, r3, #12
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d1ee      	bne.n	80078da <HAL_RCC_ClockConfig+0x232>
 80078fc:	e02d      	b.n	800795a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d123      	bne.n	800794e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007906:	e00a      	b.n	800791e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007908:	f7fb fb98 	bl	800303c <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007916:	4293      	cmp	r3, r2
 8007918:	d901      	bls.n	800791e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e0a8      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800791e:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <HAL_RCC_ClockConfig+0x288>)
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f003 030c 	and.w	r3, r3, #12
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1ee      	bne.n	8007908 <HAL_RCC_ClockConfig+0x260>
 800792a:	e016      	b.n	800795a <HAL_RCC_ClockConfig+0x2b2>
 800792c:	40022000 	.word	0x40022000
 8007930:	46020c00 	.word	0x46020c00
 8007934:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007938:	f7fb fb80 	bl	800303c <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e090      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800794e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f003 030c 	and.w	r3, r3, #12
 8007956:	2b04      	cmp	r3, #4
 8007958:	d1ee      	bne.n	8007938 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	4b43      	ldr	r3, [pc, #268]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	429a      	cmp	r2, r3
 8007974:	d208      	bcs.n	8007988 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007976:	4b40      	ldr	r3, [pc, #256]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f023 020f 	bic.w	r2, r3, #15
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	493d      	ldr	r1, [pc, #244]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007984:	4313      	orrs	r3, r2
 8007986:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007988:	4b3c      	ldr	r3, [pc, #240]	@ (8007a7c <HAL_RCC_ClockConfig+0x3d4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d210      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007996:	4b39      	ldr	r3, [pc, #228]	@ (8007a7c <HAL_RCC_ClockConfig+0x3d4>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 020f 	bic.w	r2, r3, #15
 800799e:	4937      	ldr	r1, [pc, #220]	@ (8007a7c <HAL_RCC_ClockConfig+0x3d4>)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a6:	4b35      	ldr	r3, [pc, #212]	@ (8007a7c <HAL_RCC_ClockConfig+0x3d4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e05b      	b.n	8007a70 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d010      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d208      	bcs.n	80079e6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80079d4:	4b28      	ldr	r3, [pc, #160]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	4925      	ldr	r1, [pc, #148]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d012      	beq.n	8007a18 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	4b20      	ldr	r3, [pc, #128]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d209      	bcs.n	8007a18 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007a04:	4b1c      	ldr	r3, [pc, #112]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	4919      	ldr	r1, [pc, #100]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d010      	beq.n	8007a46 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	4b13      	ldr	r3, [pc, #76]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d208      	bcs.n	8007a46 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007a34:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	490d      	ldr	r1, [pc, #52]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007a46:	f000 f821 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a78 <HAL_RCC_ClockConfig+0x3d0>)
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	490a      	ldr	r1, [pc, #40]	@ (8007a80 <HAL_RCC_ClockConfig+0x3d8>)
 8007a56:	5ccb      	ldrb	r3, [r1, r3]
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5c:	4a09      	ldr	r2, [pc, #36]	@ (8007a84 <HAL_RCC_ClockConfig+0x3dc>)
 8007a5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a60:	4b09      	ldr	r3, [pc, #36]	@ (8007a88 <HAL_RCC_ClockConfig+0x3e0>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fb fa5f 	bl	8002f28 <HAL_InitTick>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	46020c00 	.word	0x46020c00
 8007a7c:	40022000 	.word	0x40022000
 8007a80:	080152e0 	.word	0x080152e0
 8007a84:	20000030 	.word	0x20000030
 8007a88:	20000034 	.word	0x20000034

08007a8c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b08b      	sub	sp, #44	@ 0x2c
 8007a90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a9a:	4b78      	ldr	r3, [pc, #480]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 030c 	and.w	r3, r3, #12
 8007aa2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007aa4:	4b75      	ldr	r3, [pc, #468]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b0c      	cmp	r3, #12
 8007ab8:	d121      	bne.n	8007afe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d11e      	bne.n	8007afe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007ac0:	4b6e      	ldr	r3, [pc, #440]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d107      	bne.n	8007adc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007acc:	4b6b      	ldr	r3, [pc, #428]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ad2:	0b1b      	lsrs	r3, r3, #12
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ada:	e005      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007adc:	4b67      	ldr	r3, [pc, #412]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	0f1b      	lsrs	r3, r3, #28
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007ae8:	4a65      	ldr	r2, [pc, #404]	@ (8007c80 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d110      	bne.n	8007b1a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007afc:	e00d      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007afe:	4b5f      	ldr	r3, [pc, #380]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f003 030c 	and.w	r3, r3, #12
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d102      	bne.n	8007b10 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007b0c:	623b      	str	r3, [r7, #32]
 8007b0e:	e004      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d101      	bne.n	8007b1a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007b16:	4b5b      	ldr	r3, [pc, #364]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007b18:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b0c      	cmp	r3, #12
 8007b1e:	f040 80a5 	bne.w	8007c6c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007b22:	4b56      	ldr	r3, [pc, #344]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007b2c:	4b53      	ldr	r3, [pc, #332]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	3301      	adds	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007b3a:	4b50      	ldr	r3, [pc, #320]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	091b      	lsrs	r3, r3, #4
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007b46:	4b4d      	ldr	r3, [pc, #308]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	08db      	lsrs	r3, r3, #3
 8007b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d003      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0xe4>
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d022      	beq.n	8007bb4 <HAL_RCC_GetSysClockFreq+0x128>
 8007b6e:	e043      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007c88 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b82:	4b3e      	ldr	r3, [pc, #248]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007b92:	ed97 6a01 	vldr	s12, [r7, #4]
 8007b96:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007c8c <HAL_RCC_GetSysClockFreq+0x200>
 8007b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bb2:	e046      	b.n	8007c42 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007c88 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007bd6:	ed97 6a01 	vldr	s12, [r7, #4]
 8007bda:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007c8c <HAL_RCC_GetSysClockFreq+0x200>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bf6:	e024      	b.n	8007c42 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	ee07 3a90 	vmov	s15, r3
 8007c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c10:	4b1a      	ldr	r3, [pc, #104]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007c20:	ed97 6a01 	vldr	s12, [r7, #4]
 8007c24:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007c8c <HAL_RCC_GetSysClockFreq+0x200>
 8007c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c40:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007c42:	4b0e      	ldr	r3, [pc, #56]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c46:	0e1b      	lsrs	r3, r3, #24
 8007c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c66:	ee17 3a90 	vmov	r3, s15
 8007c6a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	372c      	adds	r7, #44	@ 0x2c
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	46020c00 	.word	0x46020c00
 8007c80:	080152f8 	.word	0x080152f8
 8007c84:	00f42400 	.word	0x00f42400
 8007c88:	4b742400 	.word	0x4b742400
 8007c8c:	46000000 	.word	0x46000000

08007c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007c94:	f7ff fefa 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <HAL_RCC_GetHCLKFreq+0x28>)
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	4906      	ldr	r1, [pc, #24]	@ (8007cbc <HAL_RCC_GetHCLKFreq+0x2c>)
 8007ca4:	5ccb      	ldrb	r3, [r1, r3]
 8007ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8007caa:	4a05      	ldr	r2, [pc, #20]	@ (8007cc0 <HAL_RCC_GetHCLKFreq+0x30>)
 8007cac:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007cae:	4b04      	ldr	r3, [pc, #16]	@ (8007cc0 <HAL_RCC_GetHCLKFreq+0x30>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	46020c00 	.word	0x46020c00
 8007cbc:	080152e0 	.word	0x080152e0
 8007cc0:	20000030 	.word	0x20000030

08007cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007cc8:	f7ff ffe2 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	091b      	lsrs	r3, r3, #4
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	4903      	ldr	r1, [pc, #12]	@ (8007ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cda:	5ccb      	ldrb	r3, [r1, r3]
 8007cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	46020c00 	.word	0x46020c00
 8007ce8:	080152f0 	.word	0x080152f0

08007cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007cf0:	f7ff ffce 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	4b05      	ldr	r3, [pc, #20]	@ (8007d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	0a1b      	lsrs	r3, r3, #8
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	4903      	ldr	r1, [pc, #12]	@ (8007d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d02:	5ccb      	ldrb	r3, [r1, r3]
 8007d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	46020c00 	.word	0x46020c00
 8007d10:	080152f0 	.word	0x080152f0

08007d14 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007d18:	f7ff ffba 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	4b05      	ldr	r3, [pc, #20]	@ (8007d34 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d22:	091b      	lsrs	r3, r3, #4
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	4903      	ldr	r1, [pc, #12]	@ (8007d38 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007d2a:	5ccb      	ldrb	r3, [r1, r3]
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	46020c00 	.word	0x46020c00
 8007d38:	080152f0 	.word	0x080152f0

08007d3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d44:	4b3e      	ldr	r3, [pc, #248]	@ (8007e40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007d52:	f7fe fdaf 	bl	80068b4 <HAL_PWREx_GetVoltageRange>
 8007d56:	6178      	str	r0, [r7, #20]
 8007d58:	e019      	b.n	8007d8e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d5a:	4b39      	ldr	r3, [pc, #228]	@ (8007e40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d60:	4a37      	ldr	r2, [pc, #220]	@ (8007e40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d62:	f043 0304 	orr.w	r3, r3, #4
 8007d66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007d6a:	4b35      	ldr	r3, [pc, #212]	@ (8007e40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007d78:	f7fe fd9c 	bl	80068b4 <HAL_PWREx_GetVoltageRange>
 8007d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d7e:	4b30      	ldr	r3, [pc, #192]	@ (8007e40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d84:	4a2e      	ldr	r2, [pc, #184]	@ (8007e40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d86:	f023 0304 	bic.w	r3, r3, #4
 8007d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d94:	d003      	beq.n	8007d9e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d9c:	d109      	bne.n	8007db2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007da4:	d202      	bcs.n	8007dac <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007da6:	2301      	movs	r3, #1
 8007da8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007daa:	e033      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007dac:	2300      	movs	r3, #0
 8007dae:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007db0:	e030      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007db8:	d208      	bcs.n	8007dcc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc0:	d102      	bne.n	8007dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	e025      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e035      	b.n	8007e38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dd2:	d90f      	bls.n	8007df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007de0:	d902      	bls.n	8007de8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	e015      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007de8:	2301      	movs	r3, #1
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	e012      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e00f      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dfa:	d109      	bne.n	8007e10 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e02:	d102      	bne.n	8007e0a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007e04:	2301      	movs	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	e004      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	613b      	str	r3, [r7, #16]
 8007e0e:	e001      	b.n	8007e14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007e10:	2301      	movs	r3, #1
 8007e12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e14:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f023 020f 	bic.w	r2, r3, #15
 8007e1c:	4909      	ldr	r1, [pc, #36]	@ (8007e44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007e24:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d001      	beq.n	8007e36 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	46020c00 	.word	0x46020c00
 8007e44:	40022000 	.word	0x40022000

08007e48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e4c:	b0b6      	sub	sp, #216	@ 0xd8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f002 0401 	and.w	r4, r2, #1
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	ea54 0305 	orrs.w	r3, r4, r5
 8007e72:	d00b      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007e74:	4bc5      	ldr	r3, [pc, #788]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e7a:	f023 0103 	bic.w	r1, r3, #3
 8007e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e84:	4ac1      	ldr	r2, [pc, #772]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f002 0804 	and.w	r8, r2, #4
 8007e98:	f04f 0900 	mov.w	r9, #0
 8007e9c:	ea58 0309 	orrs.w	r3, r8, r9
 8007ea0:	d00b      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007ea2:	4bba      	ldr	r3, [pc, #744]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ea8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb2:	4ab6      	ldr	r2, [pc, #728]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f002 0a08 	and.w	sl, r2, #8
 8007ec6:	f04f 0b00 	mov.w	fp, #0
 8007eca:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ece:	d00b      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007ed0:	4bae      	ldr	r3, [pc, #696]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ed6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee0:	4aaa      	ldr	r2, [pc, #680]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f002 0310 	and.w	r3, r2, #16
 8007ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007efe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f02:	460b      	mov	r3, r1
 8007f04:	4313      	orrs	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007f08:	4ba0      	ldr	r3, [pc, #640]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f18:	4a9c      	ldr	r2, [pc, #624]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f002 0320 	and.w	r3, r2, #32
 8007f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	d00b      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007f40:	4b92      	ldr	r3, [pc, #584]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f46:	f023 0107 	bic.w	r1, r3, #7
 8007f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f50:	4a8e      	ldr	r2, [pc, #568]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f52:	430b      	orrs	r3, r1
 8007f54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f72:	460b      	mov	r3, r1
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d00b      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007f78:	4b84      	ldr	r3, [pc, #528]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f7e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f88:	4a80      	ldr	r2, [pc, #512]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fa6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4313      	orrs	r3, r2
 8007fae:	d00b      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007fb0:	4b76      	ldr	r3, [pc, #472]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fc0:	4a72      	ldr	r2, [pc, #456]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007fe8:	4b68      	ldr	r3, [pc, #416]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff8:	4a64      	ldr	r2, [pc, #400]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800800c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008010:	2300      	movs	r3, #0
 8008012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008016:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800801a:	460b      	mov	r3, r1
 800801c:	4313      	orrs	r3, r2
 800801e:	d00b      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008020:	4b5a      	ldr	r3, [pc, #360]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008026:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800802a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800802e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008030:	4a56      	ldr	r2, [pc, #344]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008032:	430b      	orrs	r3, r1
 8008034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008048:	2300      	movs	r3, #0
 800804a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800804e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008052:	460b      	mov	r3, r1
 8008054:	4313      	orrs	r3, r2
 8008056:	d00b      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008058:	4b4c      	ldr	r3, [pc, #304]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800805a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800805e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008062:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008068:	4a48      	ldr	r2, [pc, #288]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800806a:	430b      	orrs	r3, r1
 800806c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008070:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800807c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008080:	2300      	movs	r3, #0
 8008082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008086:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800808a:	460b      	mov	r3, r1
 800808c:	4313      	orrs	r3, r2
 800808e:	d00b      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008090:	4b3e      	ldr	r3, [pc, #248]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008096:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800809a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800809e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a0:	4a3a      	ldr	r2, [pc, #232]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80080a2:	430b      	orrs	r3, r1
 80080a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80080a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80080b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080b6:	2300      	movs	r3, #0
 80080b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080be:	460b      	mov	r3, r1
 80080c0:	4313      	orrs	r3, r2
 80080c2:	d00b      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80080c4:	4b31      	ldr	r3, [pc, #196]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80080c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080d4:	4a2d      	ldr	r2, [pc, #180]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80080e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80080ea:	2300      	movs	r3, #0
 80080ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80080ee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80080f2:	460b      	mov	r3, r1
 80080f4:	4313      	orrs	r3, r2
 80080f6:	d04f      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80080f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008100:	2b80      	cmp	r3, #128	@ 0x80
 8008102:	d02d      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8008104:	2b80      	cmp	r3, #128	@ 0x80
 8008106:	d827      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008108:	2b60      	cmp	r3, #96	@ 0x60
 800810a:	d02b      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800810c:	2b60      	cmp	r3, #96	@ 0x60
 800810e:	d823      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008110:	2b40      	cmp	r3, #64	@ 0x40
 8008112:	d006      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008114:	2b40      	cmp	r3, #64	@ 0x40
 8008116:	d81f      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800811c:	2b20      	cmp	r3, #32
 800811e:	d011      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008120:	e01a      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008122:	4b1a      	ldr	r3, [pc, #104]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	4a19      	ldr	r2, [pc, #100]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800812c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800812e:	e01a      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008134:	3308      	adds	r3, #8
 8008136:	4618      	mov	r0, r3
 8008138:	f002 f956 	bl	800a3e8 <RCCEx_PLL2_Config>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008142:	e010      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008148:	332c      	adds	r3, #44	@ 0x2c
 800814a:	4618      	mov	r0, r3
 800814c:	f002 f9e4 	bl	800a518 <RCCEx_PLL3_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008156:	e006      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800815e:	e002      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8008160:	bf00      	nop
 8008162:	e000      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8008164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008166:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d110      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800816e:	4b07      	ldr	r3, [pc, #28]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008174:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8008178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800817c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008180:	4a02      	ldr	r2, [pc, #8]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008182:	430b      	orrs	r3, r1
 8008184:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008188:	e006      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800818a:	bf00      	nop
 800818c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008190:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008194:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80081a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081a6:	2300      	movs	r3, #0
 80081a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081ae:	460b      	mov	r3, r1
 80081b0:	4313      	orrs	r3, r2
 80081b2:	d046      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80081b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80081c0:	d028      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80081c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80081c6:	d821      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80081c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081cc:	d022      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80081ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081d2:	d81b      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80081d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081d8:	d01c      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80081da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081de:	d815      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80081e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081e4:	d008      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80081e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ea:	d80f      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d011      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80081f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f4:	d00e      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80081f6:	e009      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081fc:	3308      	adds	r3, #8
 80081fe:	4618      	mov	r0, r3
 8008200:	f002 f8f2 	bl	800a3e8 <RCCEx_PLL2_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800820a:	e004      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8008212:	e000      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8008214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008216:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10d      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800821e:	4bb6      	ldr	r3, [pc, #728]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008224:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800822c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008230:	4ab1      	ldr	r2, [pc, #708]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008232:	430b      	orrs	r3, r1
 8008234:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008238:	e003      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800823e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800824e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008250:	2300      	movs	r3, #0
 8008252:	667b      	str	r3, [r7, #100]	@ 0x64
 8008254:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008258:	460b      	mov	r3, r1
 800825a:	4313      	orrs	r3, r2
 800825c:	d03e      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800825e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008266:	2b04      	cmp	r3, #4
 8008268:	d81d      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800826a:	a201      	add	r2, pc, #4	@ (adr r2, 8008270 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	080082af 	.word	0x080082af
 8008274:	08008285 	.word	0x08008285
 8008278:	08008293 	.word	0x08008293
 800827c:	080082af 	.word	0x080082af
 8008280:	080082af 	.word	0x080082af
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008284:	4b9c      	ldr	r3, [pc, #624]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008288:	4a9b      	ldr	r2, [pc, #620]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800828a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800828e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008290:	e00e      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008296:	332c      	adds	r3, #44	@ 0x2c
 8008298:	4618      	mov	r0, r3
 800829a:	f002 f93d 	bl	800a518 <RCCEx_PLL3_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80082a4:	e004      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80082ac:	e000      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80082ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80082b0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10d      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80082b8:	4b8f      	ldr	r3, [pc, #572]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80082ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082be:	f023 0107 	bic.w	r1, r3, #7
 80082c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ca:	4a8b      	ldr	r2, [pc, #556]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80082cc:	430b      	orrs	r3, r1
 80082ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80082d8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80082dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80082e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082ea:	2300      	movs	r3, #0
 80082ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80082f2:	460b      	mov	r3, r1
 80082f4:	4313      	orrs	r3, r2
 80082f6:	d04a      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80082f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008300:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008304:	d028      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008306:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800830a:	d821      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800830c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008310:	d024      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008312:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008316:	d81b      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800831c:	d00e      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800831e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008322:	d815      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01b      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832c:	d110      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800832e:	4b72      	ldr	r3, [pc, #456]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008332:	4a71      	ldr	r2, [pc, #452]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008338:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800833a:	e012      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800833c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008340:	332c      	adds	r3, #44	@ 0x2c
 8008342:	4618      	mov	r0, r3
 8008344:	f002 f8e8 	bl	800a518 <RCCEx_PLL3_Config>
 8008348:	4603      	mov	r3, r0
 800834a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800834e:	e008      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8008356:	e004      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8008358:	bf00      	nop
 800835a:	e002      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800835c:	bf00      	nop
 800835e:	e000      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8008360:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008362:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10d      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800836a:	4b63      	ldr	r3, [pc, #396]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800836c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008370:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837c:	4a5e      	ldr	r2, [pc, #376]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800837e:	430b      	orrs	r3, r1
 8008380:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008384:	e003      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008386:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800838a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800838e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800839a:	653b      	str	r3, [r7, #80]	@ 0x50
 800839c:	2300      	movs	r3, #0
 800839e:	657b      	str	r3, [r7, #84]	@ 0x54
 80083a0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80083a4:	460b      	mov	r3, r1
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f000 80ba 	beq.w	8008520 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083b2:	4b51      	ldr	r3, [pc, #324]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80083b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d113      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083c0:	4b4d      	ldr	r3, [pc, #308]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80083c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083c6:	4a4c      	ldr	r2, [pc, #304]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80083c8:	f043 0304 	orr.w	r3, r3, #4
 80083cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80083d0:	4b49      	ldr	r3, [pc, #292]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80083d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80083e8:	4b44      	ldr	r3, [pc, #272]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80083ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ec:	4a43      	ldr	r2, [pc, #268]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80083ee:	f043 0301 	orr.w	r3, r3, #1
 80083f2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083f4:	f7fa fe22 	bl	800303c <HAL_GetTick>
 80083f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80083fc:	e00b      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083fe:	f7fa fe1d 	bl	800303c <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d903      	bls.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8008414:	e005      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008416:	4b39      	ldr	r3, [pc, #228]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8008418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0ed      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8008422:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d16a      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800842a:	4b33      	ldr	r3, [pc, #204]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800842c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008434:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d023      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8008440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008444:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8008448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800844c:	4293      	cmp	r3, r2
 800844e:	d01b      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008450:	4b29      	ldr	r3, [pc, #164]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800845e:	4b26      	ldr	r3, [pc, #152]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008464:	4a24      	ldr	r2, [pc, #144]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800846a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800846e:	4b22      	ldr	r3, [pc, #136]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008474:	4a20      	ldr	r2, [pc, #128]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800847a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800847e:	4a1e      	ldr	r2, [pc, #120]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008484:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d019      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7fa fdd2 	bl	800303c <HAL_GetTick>
 8008498:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800849c:	e00d      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800849e:	f7fa fdcd 	bl	800303c <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084a8:	1ad2      	subs	r2, r2, r3
 80084aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d903      	bls.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80084b8:	e006      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084ba:	4b0f      	ldr	r3, [pc, #60]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80084bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0ea      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80084c8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10d      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80084d0:	4b09      	ldr	r3, [pc, #36]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80084d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084e2:	4a05      	ldr	r2, [pc, #20]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80084ea:	e00d      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80084f0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80084f4:	e008      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80084f6:	bf00      	nop
 80084f8:	46020c00 	.word	0x46020c00
 80084fc:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008504:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008508:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800850c:	2b01      	cmp	r3, #1
 800850e:	d107      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008510:	4bb2      	ldr	r3, [pc, #712]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008516:	4ab1      	ldr	r2, [pc, #708]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008518:	f023 0304 	bic.w	r3, r3, #4
 800851c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800852c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800852e:	2300      	movs	r3, #0
 8008530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008532:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008536:	460b      	mov	r3, r1
 8008538:	4313      	orrs	r3, r2
 800853a:	d042      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800853c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008540:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008544:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008548:	d022      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800854a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800854e:	d81b      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008554:	d011      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x732>
 8008556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800855a:	d815      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d019      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008564:	d110      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800856a:	3308      	adds	r3, #8
 800856c:	4618      	mov	r0, r3
 800856e:	f001 ff3b 	bl	800a3e8 <RCCEx_PLL2_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8008578:	e00d      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800857a:	4b98      	ldr	r3, [pc, #608]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857e:	4a97      	ldr	r2, [pc, #604]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008584:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008586:	e006      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800858e:	e002      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8008590:	bf00      	nop
 8008592:	e000      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8008594:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008596:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10d      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800859e:	4b8f      	ldr	r3, [pc, #572]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80085a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085a4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80085a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80085ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085b0:	4a8a      	ldr	r2, [pc, #552]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80085b2:	430b      	orrs	r3, r1
 80085b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80085b8:	e003      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ba:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80085be:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80085ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80085d0:	2300      	movs	r3, #0
 80085d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80085d8:	460b      	mov	r3, r1
 80085da:	4313      	orrs	r3, r2
 80085dc:	d02d      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80085de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ea:	d00b      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80085ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f0:	d804      	bhi.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d008      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80085f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085fa:	d007      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8008602:	e004      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8008604:	bf00      	nop
 8008606:	e002      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8008608:	bf00      	nop
 800860a:	e000      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800860c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800860e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10d      	bne.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008616:	4b71      	ldr	r3, [pc, #452]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800861c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008628:	4a6c      	ldr	r2, [pc, #432]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800862a:	430b      	orrs	r3, r1
 800862c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008630:	e003      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008632:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008636:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800863a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008648:	2300      	movs	r3, #0
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800864c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008650:	460b      	mov	r3, r1
 8008652:	4313      	orrs	r3, r2
 8008654:	d00c      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008656:	4b61      	ldr	r3, [pc, #388]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800865c:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8008660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008668:	4a5c      	ldr	r2, [pc, #368]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800866a:	430b      	orrs	r3, r1
 800866c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800867c:	633b      	str	r3, [r7, #48]	@ 0x30
 800867e:	2300      	movs	r3, #0
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
 8008682:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008686:	460b      	mov	r3, r1
 8008688:	4313      	orrs	r3, r2
 800868a:	d019      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800868c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008698:	d105      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800869a:	4b50      	ldr	r3, [pc, #320]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800869c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869e:	4a4f      	ldr	r2, [pc, #316]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80086a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086a4:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80086a6:	4b4d      	ldr	r3, [pc, #308]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80086a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80086b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086b8:	4a48      	ldr	r2, [pc, #288]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80086ba:	430b      	orrs	r3, r1
 80086bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80086c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80086cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086ce:	2300      	movs	r3, #0
 80086d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80086d6:	460b      	mov	r3, r1
 80086d8:	4313      	orrs	r3, r2
 80086da:	d00c      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80086dc:	4b3f      	ldr	r3, [pc, #252]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80086de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086ee:	493b      	ldr	r1, [pc, #236]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80086f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008702:	623b      	str	r3, [r7, #32]
 8008704:	2300      	movs	r3, #0
 8008706:	627b      	str	r3, [r7, #36]	@ 0x24
 8008708:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800870c:	460b      	mov	r3, r1
 800870e:	4313      	orrs	r3, r2
 8008710:	d00c      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008712:	4b32      	ldr	r3, [pc, #200]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008718:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800871c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008724:	492d      	ldr	r1, [pc, #180]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800872c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	2300      	movs	r3, #0
 800873c:	61fb      	str	r3, [r7, #28]
 800873e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008742:	460b      	mov	r3, r1
 8008744:	4313      	orrs	r3, r2
 8008746:	d00c      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008748:	4b24      	ldr	r3, [pc, #144]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800874a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800874e:	f023 0218 	bic.w	r2, r3, #24
 8008752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008756:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800875a:	4920      	ldr	r1, [pc, #128]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800875c:	4313      	orrs	r3, r2
 800875e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008778:	460b      	mov	r3, r1
 800877a:	4313      	orrs	r3, r2
 800877c:	d034      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800877e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800878a:	d105      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008790:	4a12      	ldr	r2, [pc, #72]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008796:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800879c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80087a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087a4:	d108      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087aa:	3308      	adds	r3, #8
 80087ac:	4618      	mov	r0, r3
 80087ae:	f001 fe1b 	bl	800a3e8 <RCCEx_PLL2_Config>
 80087b2:	4603      	mov	r3, r0
 80087b4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 80087b8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10f      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80087c0:	4b06      	ldr	r3, [pc, #24]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80087c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80087ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80087d2:	4902      	ldr	r1, [pc, #8]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80087da:	e005      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80087dc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80087e4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80087e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087fe:	460b      	mov	r3, r1
 8008800:	4313      	orrs	r3, r2
 8008802:	d03a      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008810:	d00e      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008812:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008816:	d815      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8008818:	2b00      	cmp	r3, #0
 800881a:	d017      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800881c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008820:	d110      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008822:	4b27      	ldr	r3, [pc, #156]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8008824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008826:	4a26      	ldr	r2, [pc, #152]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8008828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800882c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800882e:	e00e      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008834:	3308      	adds	r3, #8
 8008836:	4618      	mov	r0, r3
 8008838:	f001 fdd6 	bl	800a3e8 <RCCEx_PLL2_Config>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008842:	e004      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800884a:	e000      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 800884c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800884e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10d      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008856:	4b1a      	ldr	r3, [pc, #104]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8008858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800885c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008868:	4915      	ldr	r1, [pc, #84]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008870:	e003      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008872:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8008876:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800887a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	2300      	movs	r3, #0
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008890:	460b      	mov	r3, r1
 8008892:	4313      	orrs	r3, r2
 8008894:	d00c      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008896:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8008898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800889c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80088a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80088a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088a8:	4905      	ldr	r1, [pc, #20]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80088b0:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	37d8      	adds	r7, #216	@ 0xd8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088be:	bf00      	nop
 80088c0:	46020c00 	.word	0x46020c00

080088c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b089      	sub	sp, #36	@ 0x24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80088cc:	4ba6      	ldr	r3, [pc, #664]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80088d6:	4ba4      	ldr	r3, [pc, #656]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80088e0:	4ba1      	ldr	r3, [pc, #644]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e4:	0a1b      	lsrs	r3, r3, #8
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	3301      	adds	r3, #1
 80088ec:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80088ee:	4b9e      	ldr	r3, [pc, #632]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f2:	091b      	lsrs	r3, r3, #4
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80088fa:	4b9b      	ldr	r3, [pc, #620]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fe:	08db      	lsrs	r3, r3, #3
 8008900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d062      	beq.n	80089e2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b03      	cmp	r3, #3
 8008920:	f200 8081 	bhi.w	8008a26 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d024      	beq.n	8008974 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d17a      	bne.n	8008a26 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800893e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008942:	4b89      	ldr	r3, [pc, #548]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008952:	ed97 6a02 	vldr	s12, [r7, #8]
 8008956:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800895a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800895e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008966:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008972:	e08f      	b.n	8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008974:	4b7c      	ldr	r3, [pc, #496]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008980:	4b79      	ldr	r3, [pc, #484]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	0f1b      	lsrs	r3, r3, #28
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	e006      	b.n	800899a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800898c:	4b76      	ldr	r3, [pc, #472]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800898e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008992:	041b      	lsls	r3, r3, #16
 8008994:	0f1b      	lsrs	r3, r3, #28
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	4a76      	ldr	r2, [pc, #472]	@ (8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800899c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	ee07 3a90 	vmov	s15, r3
 80089bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80089c4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80089c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80089d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089e0:	e058      	b.n	8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	ee07 3a90 	vmov	s15, r3
 80089e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ec:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80089f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f4:	4b5c      	ldr	r3, [pc, #368]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fc:	ee07 3a90 	vmov	s15, r3
 8008a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a04:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a08:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a24:	e036      	b.n	8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008a26:	4b50      	ldr	r3, [pc, #320]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008a32:	4b4d      	ldr	r3, [pc, #308]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	0f1b      	lsrs	r3, r3, #28
 8008a38:	f003 030f 	and.w	r3, r3, #15
 8008a3c:	e006      	b.n	8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a44:	041b      	lsls	r3, r3, #16
 8008a46:	0f1b      	lsrs	r3, r3, #28
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	4a49      	ldr	r2, [pc, #292]	@ (8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a76:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a92:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008a94:	4b34      	ldr	r3, [pc, #208]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d017      	beq.n	8008ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008aa0:	4b31      	ldr	r3, [pc, #196]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa4:	0a5b      	lsrs	r3, r3, #9
 8008aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac6:	ee17 2a90 	vmov	r2, s15
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	e002      	b.n	8008ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008ad6:	4b24      	ldr	r3, [pc, #144]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d017      	beq.n	8008b12 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008ae2:	4b21      	ldr	r3, [pc, #132]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae6:	0c1b      	lsrs	r3, r3, #16
 8008ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008af4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008af8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b08:	ee17 2a90 	vmov	r2, s15
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	605a      	str	r2, [r3, #4]
 8008b10:	e002      	b.n	8008b18 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008b18:	4b13      	ldr	r3, [pc, #76]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d017      	beq.n	8008b54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b24:	4b10      	ldr	r3, [pc, #64]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b28:	0e1b      	lsrs	r3, r3, #24
 8008b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4a:	ee17 2a90 	vmov	r2, s15
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008b52:	e002      	b.n	8008b5a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	609a      	str	r2, [r3, #8]
}
 8008b5a:	bf00      	nop
 8008b5c:	3724      	adds	r7, #36	@ 0x24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	46020c00 	.word	0x46020c00
 8008b6c:	4b742400 	.word	0x4b742400
 8008b70:	46000000 	.word	0x46000000
 8008b74:	080152f8 	.word	0x080152f8

08008b78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b089      	sub	sp, #36	@ 0x24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008b80:	4ba6      	ldr	r3, [pc, #664]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b88:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008b8a:	4ba4      	ldr	r3, [pc, #656]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008b94:	4ba1      	ldr	r3, [pc, #644]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008ba2:	4b9e      	ldr	r3, [pc, #632]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba6:	091b      	lsrs	r3, r3, #4
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008bae:	4b9b      	ldr	r3, [pc, #620]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb2:	08db      	lsrs	r3, r3, #3
 8008bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d062      	beq.n	8008c96 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	f200 8081 	bhi.w	8008cda <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d024      	beq.n	8008c28 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d17a      	bne.n	8008cda <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf6:	4b89      	ldr	r3, [pc, #548]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c0a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c26:	e08f      	b.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008c28:	4b7c      	ldr	r3, [pc, #496]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008c34:	4b79      	ldr	r3, [pc, #484]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	0f1b      	lsrs	r3, r3, #28
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	e006      	b.n	8008c4e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008c40:	4b76      	ldr	r3, [pc, #472]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c46:	041b      	lsls	r3, r3, #16
 8008c48:	0f1b      	lsrs	r3, r3, #28
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	4a76      	ldr	r2, [pc, #472]	@ (8008e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c54:	ee07 3a90 	vmov	s15, r3
 8008c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	ee07 3a90 	vmov	s15, r3
 8008c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c74:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c78:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c94:	e058      	b.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cbc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cd8:	e036      	b.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008cda:	4b50      	ldr	r3, [pc, #320]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d005      	beq.n	8008cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	0f1b      	lsrs	r3, r3, #28
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	e006      	b.n	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cf8:	041b      	lsls	r3, r3, #16
 8008cfa:	0f1b      	lsrs	r3, r3, #28
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	4a49      	ldr	r2, [pc, #292]	@ (8008e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	ee07 3a90 	vmov	s15, r3
 8008d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d2a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d46:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008d48:	4b34      	ldr	r3, [pc, #208]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d017      	beq.n	8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008d54:	4b31      	ldr	r3, [pc, #196]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d58:	0a5b      	lsrs	r3, r3, #9
 8008d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d7a:	ee17 2a90 	vmov	r2, s15
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	e002      	b.n	8008d8a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008d8a:	4b24      	ldr	r3, [pc, #144]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d017      	beq.n	8008dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008d96:	4b21      	ldr	r3, [pc, #132]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d9a:	0c1b      	lsrs	r3, r3, #16
 8008d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da0:	ee07 3a90 	vmov	s15, r3
 8008da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008da8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dbc:	ee17 2a90 	vmov	r2, s15
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	605a      	str	r2, [r3, #4]
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008dcc:	4b13      	ldr	r3, [pc, #76]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d017      	beq.n	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008dd8:	4b10      	ldr	r3, [pc, #64]	@ (8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ddc:	0e1b      	lsrs	r3, r3, #24
 8008dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008dea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dfe:	ee17 2a90 	vmov	r2, s15
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e06:	e002      	b.n	8008e0e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	609a      	str	r2, [r3, #8]
}
 8008e0e:	bf00      	nop
 8008e10:	3724      	adds	r7, #36	@ 0x24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	46020c00 	.word	0x46020c00
 8008e20:	4b742400 	.word	0x4b742400
 8008e24:	46000000 	.word	0x46000000
 8008e28:	080152f8 	.word	0x080152f8

08008e2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b089      	sub	sp, #36	@ 0x24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008e34:	4ba6      	ldr	r3, [pc, #664]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008e3e:	4ba4      	ldr	r3, [pc, #656]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008e48:	4ba1      	ldr	r3, [pc, #644]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4c:	0a1b      	lsrs	r3, r3, #8
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	3301      	adds	r3, #1
 8008e54:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008e56:	4b9e      	ldr	r3, [pc, #632]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e5a:	091b      	lsrs	r3, r3, #4
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008e62:	4b9b      	ldr	r3, [pc, #620]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e66:	08db      	lsrs	r3, r3, #3
 8008e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d062      	beq.n	8008f4a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	f200 8081 	bhi.w	8008f8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d024      	beq.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d17a      	bne.n	8008f8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eaa:	4b89      	ldr	r3, [pc, #548]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ebe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80090d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008eda:	e08f      	b.n	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008edc:	4b7c      	ldr	r3, [pc, #496]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008ee8:	4b79      	ldr	r3, [pc, #484]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	0f1b      	lsrs	r3, r3, #28
 8008eee:	f003 030f 	and.w	r3, r3, #15
 8008ef2:	e006      	b.n	8008f02 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008ef4:	4b76      	ldr	r3, [pc, #472]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008efa:	041b      	lsls	r3, r3, #16
 8008efc:	0f1b      	lsrs	r3, r3, #28
 8008efe:	f003 030f 	and.w	r3, r3, #15
 8008f02:	4a76      	ldr	r2, [pc, #472]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f28:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f2c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80090d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f48:	e058      	b.n	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f54:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f70:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80090d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f8c:	e036      	b.n	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008f8e:	4b50      	ldr	r3, [pc, #320]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	0f1b      	lsrs	r3, r3, #28
 8008fa0:	f003 030f 	and.w	r3, r3, #15
 8008fa4:	e006      	b.n	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fac:	041b      	lsls	r3, r3, #16
 8008fae:	0f1b      	lsrs	r3, r3, #28
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	4a49      	ldr	r2, [pc, #292]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	ee07 3a90 	vmov	s15, r3
 8008fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fde:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80090d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ffa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008ffc:	4b34      	ldr	r3, [pc, #208]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d017      	beq.n	8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009008:	4b31      	ldr	r3, [pc, #196]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800900a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900c:	0a5b      	lsrs	r3, r3, #9
 800900e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800901a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800901e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009022:	edd7 6a07 	vldr	s13, [r7, #28]
 8009026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902e:	ee17 2a90 	vmov	r2, s15
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	e002      	b.n	800903e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800903e:	4b24      	ldr	r3, [pc, #144]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d017      	beq.n	800907a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800904a:	4b21      	ldr	r3, [pc, #132]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800904c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904e:	0c1b      	lsrs	r3, r3, #16
 8009050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800905c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009060:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009064:	edd7 6a07 	vldr	s13, [r7, #28]
 8009068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800906c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009070:	ee17 2a90 	vmov	r2, s15
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	605a      	str	r2, [r3, #4]
 8009078:	e002      	b.n	8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009080:	4b13      	ldr	r3, [pc, #76]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009084:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d017      	beq.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800908c:	4b10      	ldr	r3, [pc, #64]	@ (80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800908e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009090:	0e1b      	lsrs	r3, r3, #24
 8009092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800909e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80090a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090b2:	ee17 2a90 	vmov	r2, s15
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090ba:	e002      	b.n	80090c2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	609a      	str	r2, [r3, #8]
}
 80090c2:	bf00      	nop
 80090c4:	3724      	adds	r7, #36	@ 0x24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	46020c00 	.word	0x46020c00
 80090d4:	4b742400 	.word	0x4b742400
 80090d8:	46000000 	.word	0x46000000
 80090dc:	080152f8 	.word	0x080152f8

080090e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08e      	sub	sp, #56	@ 0x38
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80090ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ee:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80090f2:	430b      	orrs	r3, r1
 80090f4:	d145      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80090f6:	4b9b      	ldr	r3, [pc, #620]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80090f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009100:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009102:	4b98      	ldr	r3, [pc, #608]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009108:	f003 0302 	and.w	r3, r3, #2
 800910c:	2b02      	cmp	r3, #2
 800910e:	d108      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009116:	d104      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
 800911e:	f001 b912 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009122:	4b90      	ldr	r3, [pc, #576]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800912c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009130:	d114      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009138:	d110      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800913a:	4b8a      	ldr	r3, [pc, #552]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800913c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009148:	d103      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800914a:	23fa      	movs	r3, #250	@ 0xfa
 800914c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800914e:	f001 b8fa 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8009152:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009158:	f001 b8f5 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800915c:	4b81      	ldr	r3, [pc, #516]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009168:	d107      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009170:	d103      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009172:	4b7d      	ldr	r3, [pc, #500]	@ (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009174:	637b      	str	r3, [r7, #52]	@ 0x34
 8009176:	f001 b8e6 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
 800917e:	f001 b8e2 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009186:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800918a:	430b      	orrs	r3, r1
 800918c:	d151      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800918e:	4b75      	ldr	r3, [pc, #468]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009190:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009194:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009198:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	2b80      	cmp	r3, #128	@ 0x80
 800919e:	d035      	beq.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	2b80      	cmp	r3, #128	@ 0x80
 80091a4:	d841      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	2b60      	cmp	r3, #96	@ 0x60
 80091aa:	d02a      	beq.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ae:	2b60      	cmp	r3, #96	@ 0x60
 80091b0:	d83b      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	2b40      	cmp	r3, #64	@ 0x40
 80091b6:	d009      	beq.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80091b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ba:	2b40      	cmp	r3, #64	@ 0x40
 80091bc:	d835      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00c      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	d012      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80091ca:	e02e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fb77 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091da:	f001 b8b4 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091de:	f107 0318 	add.w	r3, r7, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fcc8 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ec:	f001 b8ab 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f0:	f107 030c 	add.w	r3, r7, #12
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff fe19 	bl	8008e2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091fe:	f001 b8a2 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009202:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009206:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009208:	f001 b89d 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800920c:	4b55      	ldr	r3, [pc, #340]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009218:	d103      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800921a:	4b54      	ldr	r3, [pc, #336]	@ (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800921e:	f001 b892 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009226:	f001 b88e 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800922e:	f001 b88a 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009236:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800923a:	430b      	orrs	r3, r1
 800923c:	d126      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800923e:	4b49      	ldr	r3, [pc, #292]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009240:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009248:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800924a:	4b46      	ldr	r3, [pc, #280]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009256:	d106      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	2b00      	cmp	r3, #0
 800925c:	d103      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 800925e:	4b43      	ldr	r3, [pc, #268]	@ (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
 8009262:	f001 b870 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8009266:	4b3f      	ldr	r3, [pc, #252]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800926e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009272:	d107      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800927a:	d103      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 800927c:	4b3c      	ldr	r3, [pc, #240]	@ (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009280:	f001 b861 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8009284:	2300      	movs	r3, #0
 8009286:	637b      	str	r3, [r7, #52]	@ 0x34
 8009288:	f001 b85d 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800928c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009290:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8009294:	430b      	orrs	r3, r1
 8009296:	d171      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009298:	4b32      	ldr	r3, [pc, #200]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800929a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800929e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80092a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80092a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80092aa:	d034      	beq.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80092b2:	d853      	bhi.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092ba:	d00b      	beq.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c2:	d84b      	bhi.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d016      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092d0:	d009      	beq.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80092d2:	e043      	b.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092d8:	4618      	mov	r0, r3
 80092da:	f7ff faf3 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092e2:	f001 b830 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e6:	f107 0318 	add.w	r3, r7, #24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff fc44 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092f4:	f001 b827 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80092f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009304:	d103      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8009306:	4b1b      	ldr	r3, [pc, #108]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009308:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800930a:	f001 b81c 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009312:	f001 b818 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009316:	4b13      	ldr	r3, [pc, #76]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b20      	cmp	r3, #32
 8009320:	d118      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009322:	4b10      	ldr	r3, [pc, #64]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800932e:	4b0d      	ldr	r3, [pc, #52]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	0e1b      	lsrs	r3, r3, #24
 8009334:	f003 030f 	and.w	r3, r3, #15
 8009338:	e006      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 800933a:	4b0a      	ldr	r3, [pc, #40]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800933c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009340:	041b      	lsls	r3, r3, #16
 8009342:	0e1b      	lsrs	r3, r3, #24
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	4a0b      	ldr	r2, [pc, #44]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800934a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009350:	f000 bff9 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009358:	f000 bff5 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009360:	f000 bff1 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009364:	46020c00 	.word	0x46020c00
 8009368:	0007a120 	.word	0x0007a120
 800936c:	00f42400 	.word	0x00f42400
 8009370:	007a1200 	.word	0x007a1200
 8009374:	02dc6c00 	.word	0x02dc6c00
 8009378:	080152f8 	.word	0x080152f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800937c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009380:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009384:	430b      	orrs	r3, r1
 8009386:	d17f      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009388:	4ba8      	ldr	r3, [pc, #672]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800938a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800938e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009392:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	2b00      	cmp	r3, #0
 8009398:	d165      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800939a:	4ba4      	ldr	r3, [pc, #656]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800939c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093a0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80093a4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80093ac:	d034      	beq.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80093b4:	d853      	bhi.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093bc:	d00b      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093c4:	d84b      	bhi.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d016      	beq.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093d2:	d009      	beq.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80093d4:	e043      	b.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fa72 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80093e4:	f000 bfaf 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e8:	f107 0318 	add.w	r3, r7, #24
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fbc3 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80093f6:	f000 bfa6 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80093fa:	4b8c      	ldr	r3, [pc, #560]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009406:	d103      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8009408:	4b89      	ldr	r3, [pc, #548]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800940a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800940c:	f000 bf9b 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009414:	f000 bf97 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009418:	4b84      	ldr	r3, [pc, #528]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b20      	cmp	r3, #32
 8009422:	d118      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009424:	4b81      	ldr	r3, [pc, #516]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8009430:	4b7e      	ldr	r3, [pc, #504]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	0e1b      	lsrs	r3, r3, #24
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	e006      	b.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 800943c:	4b7b      	ldr	r3, [pc, #492]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800943e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009442:	041b      	lsls	r3, r3, #16
 8009444:	0e1b      	lsrs	r3, r3, #24
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	4a7a      	ldr	r2, [pc, #488]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800944c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009452:	f000 bf78 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800945a:	f000 bf74 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009462:	f000 bf70 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800946c:	d108      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800946e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff fa26 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
 800947c:	f000 bf63 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
 8009484:	f000 bf5f 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800948c:	1e51      	subs	r1, r2, #1
 800948e:	430b      	orrs	r3, r1
 8009490:	d136      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009492:	4b66      	ldr	r3, [pc, #408]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80094a4:	f7fe fc22 	bl	8007cec <HAL_RCC_GetPCLK2Freq>
 80094a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80094aa:	f000 bf4c 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d104      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094b4:	f7fe faea 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 80094b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80094ba:	f000 bf44 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80094be:	4b5b      	ldr	r3, [pc, #364]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ca:	d106      	bne.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80094d2:	4b59      	ldr	r3, [pc, #356]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80094d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d6:	f000 bf36 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80094da:	4b54      	ldr	r3, [pc, #336]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80094dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094e0:	f003 0302 	and.w	r3, r3, #2
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d107      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d104      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 80094ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f4:	f000 bf27 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fc:	f000 bf23 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009504:	1f11      	subs	r1, r2, #4
 8009506:	430b      	orrs	r3, r1
 8009508:	d136      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800950a:	4b48      	ldr	r3, [pc, #288]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800950c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009510:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009514:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	2b00      	cmp	r3, #0
 800951a:	d104      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800951c:	f7fe fbd2 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8009520:	6378      	str	r0, [r7, #52]	@ 0x34
 8009522:	f000 bf10 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	2b10      	cmp	r3, #16
 800952a:	d104      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800952c:	f7fe faae 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009530:	6378      	str	r0, [r7, #52]	@ 0x34
 8009532:	f000 bf08 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009536:	4b3d      	ldr	r3, [pc, #244]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800953e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009542:	d106      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	2b20      	cmp	r3, #32
 8009548:	d103      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 800954a:	4b3b      	ldr	r3, [pc, #236]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
 800954e:	f000 befa 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009552:	4b36      	ldr	r3, [pc, #216]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b02      	cmp	r3, #2
 800955e:	d107      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	2b30      	cmp	r3, #48	@ 0x30
 8009564:	d104      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8009566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	f000 beeb 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	637b      	str	r3, [r7, #52]	@ 0x34
 8009574:	f000 bee7 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800957c:	f1a2 0108 	sub.w	r1, r2, #8
 8009580:	430b      	orrs	r3, r1
 8009582:	d136      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009584:	4b29      	ldr	r3, [pc, #164]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800958a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800958e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009596:	f7fe fb95 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 800959a:	6378      	str	r0, [r7, #52]	@ 0x34
 800959c:	f000 bed3 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	2b40      	cmp	r3, #64	@ 0x40
 80095a4:	d104      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80095a6:	f7fe fa71 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 80095aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80095ac:	f000 becb 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80095b0:	4b1e      	ldr	r3, [pc, #120]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095bc:	d106      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	2b80      	cmp	r3, #128	@ 0x80
 80095c2:	d103      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 80095c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c8:	f000 bebd 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80095cc:	4b17      	ldr	r3, [pc, #92]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80095ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d107      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80095da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80095de:	d104      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 80095e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e6:	f000 beae 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ee:	f000 beaa 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80095f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f6:	f1a2 0110 	sub.w	r1, r2, #16
 80095fa:	430b      	orrs	r3, r1
 80095fc:	d141      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80095fe:	4b0b      	ldr	r3, [pc, #44]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8009600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009604:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009608:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	2b00      	cmp	r3, #0
 800960e:	d104      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009610:	f7fe fb58 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8009614:	6378      	str	r0, [r7, #52]	@ 0x34
 8009616:	f000 be96 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009620:	d10c      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009622:	f7fe fa33 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009626:	6378      	str	r0, [r7, #52]	@ 0x34
 8009628:	f000 be8d 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800962c:	46020c00 	.word	0x46020c00
 8009630:	02dc6c00 	.word	0x02dc6c00
 8009634:	080152f8 	.word	0x080152f8
 8009638:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800963c:	4baa      	ldr	r3, [pc, #680]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009648:	d107      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009650:	d103      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8009652:	4ba6      	ldr	r3, [pc, #664]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
 8009656:	f000 be76 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800965a:	4ba3      	ldr	r3, [pc, #652]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800965c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b02      	cmp	r3, #2
 8009666:	d108      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800966e:	d104      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8009670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
 8009676:	f000 be66 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	637b      	str	r3, [r7, #52]	@ 0x34
 800967e:	f000 be62 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009686:	f1a2 0120 	sub.w	r1, r2, #32
 800968a:	430b      	orrs	r3, r1
 800968c:	d158      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800968e:	4b96      	ldr	r3, [pc, #600]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80096a0:	f7fe fb38 	bl	8007d14 <HAL_RCC_GetPCLK3Freq>
 80096a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80096a6:	f000 be4e 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d104      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096b0:	f7fe f9ec 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 80096b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80096b6:	f000 be46 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80096ba:	4b8b      	ldr	r3, [pc, #556]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c6:	d106      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d103      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 80096ce:	4b87      	ldr	r3, [pc, #540]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80096d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d2:	f000 be38 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80096d6:	4b84      	ldr	r3, [pc, #528]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80096d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d107      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80096e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d104      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 80096ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f0:	f000 be29 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80096f4:	4b7c      	ldr	r3, [pc, #496]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	d11b      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009702:	2b04      	cmp	r3, #4
 8009704:	d118      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009706:	4b78      	ldr	r3, [pc, #480]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8009712:	4b75      	ldr	r3, [pc, #468]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	0e1b      	lsrs	r3, r3, #24
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	e006      	b.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800971e:	4b72      	ldr	r3, [pc, #456]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	0e1b      	lsrs	r3, r3, #24
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	4a70      	ldr	r2, [pc, #448]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800972e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
 8009734:	f000 be07 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	637b      	str	r3, [r7, #52]	@ 0x34
 800973c:	f000 be03 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8009740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009744:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009748:	430b      	orrs	r3, r1
 800974a:	d16c      	bne.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800974c:	4b66      	ldr	r3, [pc, #408]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800974e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009752:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009756:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800975e:	d104      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009760:	f7fe f994 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009764:	6378      	str	r0, [r7, #52]	@ 0x34
 8009766:	f000 bdee 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009770:	d108      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009772:	f107 0318 	add.w	r3, r7, #24
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff f9fe 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009780:	f000 bde1 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009786:	2b00      	cmp	r3, #0
 8009788:	d104      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800978a:	f7fe fa81 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 800978e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009790:	f000 bdd9 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800979a:	d122      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800979c:	4b52      	ldr	r3, [pc, #328]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b20      	cmp	r3, #32
 80097a6:	d118      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097a8:	4b4f      	ldr	r3, [pc, #316]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80097b4:	4b4c      	ldr	r3, [pc, #304]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	0e1b      	lsrs	r3, r3, #24
 80097ba:	f003 030f 	and.w	r3, r3, #15
 80097be:	e006      	b.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80097c0:	4b49      	ldr	r3, [pc, #292]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80097c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097c6:	041b      	lsls	r3, r3, #16
 80097c8:	0e1b      	lsrs	r3, r3, #24
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	4a48      	ldr	r2, [pc, #288]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80097d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d6:	f000 bdb6 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097de:	f000 bdb2 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80097e2:	4b41      	ldr	r3, [pc, #260]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ee:	d107      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097f6:	d103      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80097f8:	4b3c      	ldr	r3, [pc, #240]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fc:	f000 bda3 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009800:	4b39      	ldr	r3, [pc, #228]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800980c:	d107      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009814:	d103      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8009816:	4b35      	ldr	r3, [pc, #212]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
 800981a:	f000 bd94 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	637b      	str	r3, [r7, #52]	@ 0x34
 8009822:	f000 bd90 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800982a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800982e:	430b      	orrs	r3, r1
 8009830:	d160      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009832:	4b2d      	ldr	r3, [pc, #180]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009834:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009838:	f003 0307 	and.w	r3, r3, #7
 800983c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	2b04      	cmp	r3, #4
 8009842:	d84c      	bhi.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8009844:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	08009885 	.word	0x08009885
 8009850:	08009861 	.word	0x08009861
 8009854:	08009873 	.word	0x08009873
 8009858:	0800988f 	.word	0x0800988f
 800985c:	08009899 	.word	0x08009899
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff f82d 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800986e:	f000 bd6a 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009872:	f107 030c 	add.w	r3, r7, #12
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff fad8 	bl	8008e2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009880:	f000 bd61 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009884:	f7fe fa04 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8009888:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800988a:	f000 bd5c 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800988e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009892:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009894:	f000 bd57 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009898:	4b13      	ldr	r3, [pc, #76]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0320 	and.w	r3, r3, #32
 80098a0:	2b20      	cmp	r3, #32
 80098a2:	d118      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098a4:	4b10      	ldr	r3, [pc, #64]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d005      	beq.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80098b0:	4b0d      	ldr	r3, [pc, #52]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	0e1b      	lsrs	r3, r3, #24
 80098b6:	f003 030f 	and.w	r3, r3, #15
 80098ba:	e006      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80098bc:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80098be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	0e1b      	lsrs	r3, r3, #24
 80098c6:	f003 030f 	and.w	r3, r3, #15
 80098ca:	4a09      	ldr	r2, [pc, #36]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80098cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80098d2:	f000 bd38 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098da:	f000 bd34 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098e2:	f000 bd30 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80098e6:	bf00      	nop
 80098e8:	46020c00 	.word	0x46020c00
 80098ec:	00f42400 	.word	0x00f42400
 80098f0:	080152f8 	.word	0x080152f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80098f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f8:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80098fc:	430b      	orrs	r3, r1
 80098fe:	d167      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009900:	4ba0      	ldr	r3, [pc, #640]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009906:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800990a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800990c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009912:	d036      	beq.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800991a:	d855      	bhi.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009922:	d029      	beq.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800992a:	d84d      	bhi.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009932:	d013      	beq.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800993a:	d845      	bhi.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	2b00      	cmp	r3, #0
 8009940:	d015      	beq.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009948:	d13e      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800994a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe ffb8 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009956:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009958:	f000 bcf5 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800995c:	f107 030c 	add.w	r3, r7, #12
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff fa63 	bl	8008e2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800996a:	f000 bcec 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800996e:	f7fe f98f 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8009972:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009974:	f000 bce7 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009978:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800997c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800997e:	f000 bce2 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009982:	4b80      	ldr	r3, [pc, #512]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b20      	cmp	r3, #32
 800998c:	d118      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800998e:	4b7d      	ldr	r3, [pc, #500]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800999a:	4b7a      	ldr	r3, [pc, #488]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	0e1b      	lsrs	r3, r3, #24
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	e006      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80099a6:	4b77      	ldr	r3, [pc, #476]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80099a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	0e1b      	lsrs	r3, r3, #24
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	4a74      	ldr	r2, [pc, #464]	@ (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80099b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099bc:	f000 bcc3 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099c4:	f000 bcbf 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099cc:	f000 bcbb 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80099d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80099d8:	430b      	orrs	r3, r1
 80099da:	d14c      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80099dc:	4b69      	ldr	r3, [pc, #420]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80099de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d104      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80099ee:	f7fe f969 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 80099f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80099f4:	f000 bca7 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80099f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099fe:	d104      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a00:	f7fe f844 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009a04:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a06:	f000 bc9e 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a16:	d107      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8009a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a1e:	d103      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8009a20:	4b5a      	ldr	r3, [pc, #360]	@ (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a24:	f000 bc8f 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009a28:	4b56      	ldr	r3, [pc, #344]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d11c      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a3a:	d118      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a3c:	4b51      	ldr	r3, [pc, #324]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d005      	beq.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8009a48:	4b4e      	ldr	r3, [pc, #312]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	0e1b      	lsrs	r3, r3, #24
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	e006      	b.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8009a54:	4b4b      	ldr	r3, [pc, #300]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a5a:	041b      	lsls	r3, r3, #16
 8009a5c:	0e1b      	lsrs	r3, r3, #24
 8009a5e:	f003 030f 	and.w	r3, r3, #15
 8009a62:	4a49      	ldr	r2, [pc, #292]	@ (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8009a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6a:	f000 bc6c 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a72:	f000 bc68 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7a:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	d14c      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009a82:	4b40      	ldr	r3, [pc, #256]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a88:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009a8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d104      	bne.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a94:	f7fe f916 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8009a98:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a9a:	f000 bc54 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aa4:	d104      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009aa6:	f7fd fff1 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009aaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8009aac:	f000 bc4b 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009ab0:	4b34      	ldr	r3, [pc, #208]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009abc:	d107      	bne.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ac4:	d103      	bne.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8009ac6:	4b31      	ldr	r3, [pc, #196]	@ (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aca:	f000 bc3c 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009ace:	4b2d      	ldr	r3, [pc, #180]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d11c      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ae0:	d118      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ae2:	4b28      	ldr	r3, [pc, #160]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8009aee:	4b25      	ldr	r3, [pc, #148]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	0e1b      	lsrs	r3, r3, #24
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	e006      	b.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8009afa:	4b22      	ldr	r3, [pc, #136]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	0e1b      	lsrs	r3, r3, #24
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	4a1f      	ldr	r2, [pc, #124]	@ (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8009b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b10:	f000 bc19 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b18:	f000 bc15 	b.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b20:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009b24:	430b      	orrs	r3, r1
 8009b26:	d157      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009b28:	4b16      	ldr	r3, [pc, #88]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b38:	d02a      	beq.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b3e:	d848      	bhi.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8009b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b42:	2b80      	cmp	r3, #128	@ 0x80
 8009b44:	d00d      	beq.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b48:	2b80      	cmp	r3, #128	@ 0x80
 8009b4a:	d842      	bhi.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	2b40      	cmp	r3, #64	@ 0x40
 8009b56:	d011      	beq.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009b58:	e03b      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009b5a:	f7fe f8db 	bl	8007d14 <HAL_RCC_GetPCLK3Freq>
 8009b5e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b60:	e3f1      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b62:	4b08      	ldr	r3, [pc, #32]	@ (8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b6e:	d102      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8009b70:	4b06      	ldr	r3, [pc, #24]	@ (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b74:	e3e7      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b7a:	e3e4      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009b7c:	f7fd ff86 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009b80:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b82:	e3e0      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009b84:	46020c00 	.word	0x46020c00
 8009b88:	080152f8 	.word	0x080152f8
 8009b8c:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b90:	4ba3      	ldr	r3, [pc, #652]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	d117      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b9c:	4ba0      	ldr	r3, [pc, #640]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d005      	beq.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8009ba8:	4b9d      	ldr	r3, [pc, #628]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	0e1b      	lsrs	r3, r3, #24
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	e006      	b.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8009bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bba:	041b      	lsls	r3, r3, #16
 8009bbc:	0e1b      	lsrs	r3, r3, #24
 8009bbe:	f003 030f 	and.w	r3, r3, #15
 8009bc2:	4a98      	ldr	r2, [pc, #608]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8009bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bca:	e3bc      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bd0:	e3b9      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bd6:	e3b6      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bdc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009be0:	430b      	orrs	r3, r1
 8009be2:	d147      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009be4:	4b8e      	ldr	r3, [pc, #568]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009bee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009bf6:	f7fe f865 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8009bfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8009bfc:	e3a3      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c04:	d103      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009c06:	f7fd ff41 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009c0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8009c0c:	e39b      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009c0e:	4b84      	ldr	r3, [pc, #528]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c1a:	d106      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c22:	d102      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8009c24:	4b80      	ldr	r3, [pc, #512]	@ (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c28:	e38d      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d11b      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c3c:	d117      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c3e:	4b78      	ldr	r3, [pc, #480]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d005      	beq.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8009c4a:	4b75      	ldr	r3, [pc, #468]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	0e1b      	lsrs	r3, r3, #24
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	e006      	b.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8009c56:	4b72      	ldr	r3, [pc, #456]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c5c:	041b      	lsls	r3, r3, #16
 8009c5e:	0e1b      	lsrs	r3, r3, #24
 8009c60:	f003 030f 	and.w	r3, r3, #15
 8009c64:	4a6f      	ldr	r2, [pc, #444]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8009c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c6c:	e36b      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c72:	e368      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c78:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	d164      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009c80:	4b67      	ldr	r3, [pc, #412]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d120      	bne.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c92:	4b63      	ldr	r3, [pc, #396]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	d117      	bne.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c9e:	4b60      	ldr	r3, [pc, #384]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8009caa:	4b5d      	ldr	r3, [pc, #372]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	0e1b      	lsrs	r3, r3, #24
 8009cb0:	f003 030f 	and.w	r3, r3, #15
 8009cb4:	e006      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8009cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cbc:	041b      	lsls	r3, r3, #16
 8009cbe:	0e1b      	lsrs	r3, r3, #24
 8009cc0:	f003 030f 	and.w	r3, r3, #15
 8009cc4:	4a57      	ldr	r2, [pc, #348]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8009cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ccc:	e33b      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd2:	e338      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009cd4:	4b52      	ldr	r3, [pc, #328]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ce2:	d112      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cea:	d10e      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009cec:	4b4c      	ldr	r3, [pc, #304]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cfa:	d102      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8009cfc:	23fa      	movs	r3, #250	@ 0xfa
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d00:	e321      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d08:	e31d      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009d0a:	4b45      	ldr	r3, [pc, #276]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d16:	d106      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d1e:	d102      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8009d20:	4b41      	ldr	r3, [pc, #260]	@ (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d24:	e30f      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009d26:	4b3e      	ldr	r3, [pc, #248]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d2c:	f003 0302 	and.w	r3, r3, #2
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d107      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d3a:	d103      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8009d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d42:	e300      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d48:	e2fd      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d4e:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009d52:	430b      	orrs	r3, r1
 8009d54:	d16a      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009d56:	4b32      	ldr	r3, [pc, #200]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d120      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d68:	4b2d      	ldr	r3, [pc, #180]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0320 	and.w	r3, r3, #32
 8009d70:	2b20      	cmp	r3, #32
 8009d72:	d117      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d74:	4b2a      	ldr	r3, [pc, #168]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009d80:	4b27      	ldr	r3, [pc, #156]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	0e1b      	lsrs	r3, r3, #24
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	e006      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009d8c:	4b24      	ldr	r3, [pc, #144]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d92:	041b      	lsls	r3, r3, #16
 8009d94:	0e1b      	lsrs	r3, r3, #24
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	4a22      	ldr	r2, [pc, #136]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8009d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da2:	e2d0      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da8:	e2cd      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009daa:	4b1d      	ldr	r3, [pc, #116]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009db8:	d112      	bne.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dc0:	d10e      	bne.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009dc2:	4b17      	ldr	r3, [pc, #92]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dd0:	d102      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8009dd2:	23fa      	movs	r3, #250	@ 0xfa
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009dd6:	e2b6      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8009dd8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009dde:	e2b2      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009de0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dec:	d106      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009df4:	d102      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009df6:	4b0c      	ldr	r3, [pc, #48]	@ (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8009df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dfa:	e2a4      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009dfc:	4b08      	ldr	r3, [pc, #32]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8009dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d107      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e10:	d103      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8009e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e18:	e295      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e1e:	e292      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009e20:	46020c00 	.word	0x46020c00
 8009e24:	080152f8 	.word	0x080152f8
 8009e28:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e30:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009e34:	430b      	orrs	r3, r1
 8009e36:	d147      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009e38:	4b9a      	ldr	r3, [pc, #616]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e3e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009e42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d103      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009e4a:	f7fd ff3b 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 8009e4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e50:	e279      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009e52:	4b94      	ldr	r3, [pc, #592]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e60:	d112      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e68:	d10e      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e6a:	4b8e      	ldr	r3, [pc, #568]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e78:	d102      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8009e7a:	23fa      	movs	r3, #250	@ 0xfa
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e7e:	e262      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e86:	e25e      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009e88:	4b86      	ldr	r3, [pc, #536]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e94:	d106      	bne.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e9c:	d102      	bne.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8009e9e:	4b82      	ldr	r3, [pc, #520]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8009ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea2:	e250      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009ea4:	4b7f      	ldr	r3, [pc, #508]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eaa:	f003 0302 	and.w	r3, r3, #2
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009eb8:	d103      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8009eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec0:	e241      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec6:	e23e      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ecc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	d12d      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009ed4:	4b73      	ldr	r3, [pc, #460]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009eda:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009ede:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009ee0:	4b70      	ldr	r3, [pc, #448]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eec:	d105      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8009eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8009ef4:	4b6c      	ldr	r3, [pc, #432]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8009ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef8:	e225      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f00:	d107      	bne.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fcdc 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f10:	e219      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f18:	d107      	bne.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1a:	f107 0318 	add.w	r3, r7, #24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fe2a 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f28:	e20d      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f2e:	e20a      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f34:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	d156      	bne.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009f3c:	4b59      	ldr	r3, [pc, #356]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009f46:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f4e:	d028      	beq.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f56:	d845      	bhi.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f5e:	d013      	beq.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f66:	d83d      	bhi.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d004      	beq.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f74:	d004      	beq.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8009f76:	e035      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009f78:	f7fd feb8 	bl	8007cec <HAL_RCC_GetPCLK2Freq>
 8009f7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f7e:	e1e2      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f80:	f7fd fd84 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 8009f84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f86:	e1de      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f88:	4b46      	ldr	r3, [pc, #280]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f94:	d102      	bne.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8009f96:	4b44      	ldr	r3, [pc, #272]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8009f98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f9a:	e1d4      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fa0:	e1d1      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009fa2:	4b40      	ldr	r3, [pc, #256]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0320 	and.w	r3, r3, #32
 8009faa:	2b20      	cmp	r3, #32
 8009fac:	d117      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009fae:	4b3d      	ldr	r3, [pc, #244]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d005      	beq.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8009fba:	4b3a      	ldr	r3, [pc, #232]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	0e1b      	lsrs	r3, r3, #24
 8009fc0:	f003 030f 	and.w	r3, r3, #15
 8009fc4:	e006      	b.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009fc6:	4b37      	ldr	r3, [pc, #220]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009fcc:	041b      	lsls	r3, r3, #16
 8009fce:	0e1b      	lsrs	r3, r3, #24
 8009fd0:	f003 030f 	and.w	r3, r3, #15
 8009fd4:	4a35      	ldr	r2, [pc, #212]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8009fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009fdc:	e1b3      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fe2:	e1b0      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fe8:	e1ad      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fee:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009ff2:	430b      	orrs	r3, r1
 8009ff4:	d15c      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009ff6:	4b2b      	ldr	r3, [pc, #172]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8009ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a000:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a008:	d028      	beq.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a010:	d845      	bhi.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a018:	d013      	beq.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a020:	d83d      	bhi.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800a028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a02e:	d004      	beq.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800a030:	e035      	b.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800a032:	f7fd fe47 	bl	8007cc4 <HAL_RCC_GetPCLK1Freq>
 800a036:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a038:	e185      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a03a:	f7fd fd27 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 800a03e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a040:	e181      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a042:	4b18      	ldr	r3, [pc, #96]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a04a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a04e:	d102      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 800a050:	4b15      	ldr	r3, [pc, #84]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800a052:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a054:	e177      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a05a:	e174      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a05c:	4b11      	ldr	r3, [pc, #68]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0320 	and.w	r3, r3, #32
 800a064:	2b20      	cmp	r3, #32
 800a066:	d117      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a068:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 800a074:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	0e1b      	lsrs	r3, r3, #24
 800a07a:	f003 030f 	and.w	r3, r3, #15
 800a07e:	e006      	b.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800a080:	4b08      	ldr	r3, [pc, #32]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800a082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a086:	041b      	lsls	r3, r3, #16
 800a088:	0e1b      	lsrs	r3, r3, #24
 800a08a:	f003 030f 	and.w	r3, r3, #15
 800a08e:	4a07      	ldr	r2, [pc, #28]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 800a090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a094:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a096:	e156      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a09c:	e153      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0a2:	e150      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800a0a4:	46020c00 	.word	0x46020c00
 800a0a8:	00f42400 	.word	0x00f42400
 800a0ac:	080152f8 	.word	0x080152f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	d176      	bne.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a0bc:	4ba4      	ldr	r3, [pc, #656]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a0be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0c2:	f003 0318 	and.w	r3, r3, #24
 800a0c6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ca:	2b18      	cmp	r3, #24
 800a0cc:	d86a      	bhi.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800a0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a139 	.word	0x0800a139
 800a0d8:	0800a1a5 	.word	0x0800a1a5
 800a0dc:	0800a1a5 	.word	0x0800a1a5
 800a0e0:	0800a1a5 	.word	0x0800a1a5
 800a0e4:	0800a1a5 	.word	0x0800a1a5
 800a0e8:	0800a1a5 	.word	0x0800a1a5
 800a0ec:	0800a1a5 	.word	0x0800a1a5
 800a0f0:	0800a1a5 	.word	0x0800a1a5
 800a0f4:	0800a141 	.word	0x0800a141
 800a0f8:	0800a1a5 	.word	0x0800a1a5
 800a0fc:	0800a1a5 	.word	0x0800a1a5
 800a100:	0800a1a5 	.word	0x0800a1a5
 800a104:	0800a1a5 	.word	0x0800a1a5
 800a108:	0800a1a5 	.word	0x0800a1a5
 800a10c:	0800a1a5 	.word	0x0800a1a5
 800a110:	0800a1a5 	.word	0x0800a1a5
 800a114:	0800a149 	.word	0x0800a149
 800a118:	0800a1a5 	.word	0x0800a1a5
 800a11c:	0800a1a5 	.word	0x0800a1a5
 800a120:	0800a1a5 	.word	0x0800a1a5
 800a124:	0800a1a5 	.word	0x0800a1a5
 800a128:	0800a1a5 	.word	0x0800a1a5
 800a12c:	0800a1a5 	.word	0x0800a1a5
 800a130:	0800a1a5 	.word	0x0800a1a5
 800a134:	0800a163 	.word	0x0800a163
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a138:	f7fd fdec 	bl	8007d14 <HAL_RCC_GetPCLK3Freq>
 800a13c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a13e:	e102      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a140:	f7fd fca4 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 800a144:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a146:	e0fe      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a148:	4b81      	ldr	r3, [pc, #516]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a154:	d102      	bne.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 800a156:	4b7f      	ldr	r3, [pc, #508]	@ (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 800a158:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a15a:	e0f4      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a160:	e0f1      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a162:	4b7b      	ldr	r3, [pc, #492]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d117      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a16e:	4b78      	ldr	r3, [pc, #480]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d005      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a17a:	4b75      	ldr	r3, [pc, #468]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	0e1b      	lsrs	r3, r3, #24
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	e006      	b.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 800a186:	4b72      	ldr	r3, [pc, #456]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a18c:	041b      	lsls	r3, r3, #16
 800a18e:	0e1b      	lsrs	r3, r3, #24
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	4a70      	ldr	r2, [pc, #448]	@ (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800a196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a19a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a19c:	e0d3      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1a2:	e0d0      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1a8:	e0cd      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ae:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	d155      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a1b6:	4b66      	ldr	r3, [pc, #408]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a1b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a1c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1c8:	d013      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1d0:	d844      	bhi.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1d8:	d013      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1e0:	d83c      	bhi.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d014      	beq.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ee:	d014      	beq.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800a1f0:	e034      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f2:	f107 0318 	add.w	r3, r7, #24
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fcbe 	bl	8008b78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a200:	e0a1      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe fb5c 	bl	80088c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a210:	e099      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a212:	f7fd fc3b 	bl	8007a8c <HAL_RCC_GetSysClockFreq>
 800a216:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a218:	e095      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a21a:	4b4d      	ldr	r3, [pc, #308]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b20      	cmp	r3, #32
 800a224:	d117      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a226:	4b4a      	ldr	r3, [pc, #296]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800a232:	4b47      	ldr	r3, [pc, #284]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	0e1b      	lsrs	r3, r3, #24
 800a238:	f003 030f 	and.w	r3, r3, #15
 800a23c:	e006      	b.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 800a23e:	4b44      	ldr	r3, [pc, #272]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a244:	041b      	lsls	r3, r3, #16
 800a246:	0e1b      	lsrs	r3, r3, #24
 800a248:	f003 030f 	and.w	r3, r3, #15
 800a24c:	4a42      	ldr	r2, [pc, #264]	@ (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800a24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a252:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a254:	e077      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a25a:	e074      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a260:	e071      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a266:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a26a:	430b      	orrs	r3, r1
 800a26c:	d131      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a26e:	4b38      	ldr	r3, [pc, #224]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a278:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a27a:	4b35      	ldr	r3, [pc, #212]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a27c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b02      	cmp	r3, #2
 800a286:	d106      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d103      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 800a28e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a292:	637b      	str	r3, [r7, #52]	@ 0x34
 800a294:	e057      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a296:	4b2e      	ldr	r3, [pc, #184]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a29c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2a4:	d112      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2ac:	d10e      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2ae:	4b28      	ldr	r3, [pc, #160]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a2b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2bc:	d102      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 800a2be:	23fa      	movs	r3, #250	@ 0xfa
 800a2c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2c2:	e040      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800a2c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a2c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2ca:	e03c      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d0:	e039      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a2d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	d131      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a2de:	4b1c      	ldr	r3, [pc, #112]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a2e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2e4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a2e8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a2ea:	4b19      	ldr	r3, [pc, #100]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f6:	d105      	bne.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 800a2fe:	4b17      	ldr	r3, [pc, #92]	@ (800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
 800a302:	e020      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a304:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a30c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a310:	d106      	bne.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a318:	d102      	bne.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a31a:	4b11      	ldr	r3, [pc, #68]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a31c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a31e:	e012      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a320:	4b0b      	ldr	r3, [pc, #44]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a32c:	d106      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 800a32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a334:	d102      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 800a336:	4b07      	ldr	r3, [pc, #28]	@ (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 800a338:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33a:	e004      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a340:	e001      	b.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3738      	adds	r7, #56	@ 0x38
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	46020c00 	.word	0x46020c00
 800a354:	00f42400 	.word	0x00f42400
 800a358:	080152f8 	.word	0x080152f8
 800a35c:	02dc6c00 	.word	0x02dc6c00
 800a360:	016e3600 	.word	0x016e3600

0800a364 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a36c:	4b1c      	ldr	r3, [pc, #112]	@ (800a3e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800a36e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a370:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800a372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a376:	6753      	str	r3, [r2, #116]	@ 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 800a378:	4b19      	ldr	r3, [pc, #100]	@ (800a3e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800a37a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a37c:	4a18      	ldr	r2, [pc, #96]	@ (800a3e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800a37e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a382:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	4313      	orrs	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a3ac:	4a0d      	ldr	r2, [pc, #52]	@ (800a3e4 <HAL_RCCEx_CRSConfig+0x80>)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <HAL_RCCEx_CRSConfig+0x80>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	021b      	lsls	r3, r3, #8
 800a3c0:	4908      	ldr	r1, [pc, #32]	@ (800a3e4 <HAL_RCCEx_CRSConfig+0x80>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a3c6:	4b07      	ldr	r3, [pc, #28]	@ (800a3e4 <HAL_RCCEx_CRSConfig+0x80>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a06      	ldr	r2, [pc, #24]	@ (800a3e4 <HAL_RCCEx_CRSConfig+0x80>)
 800a3cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a3d0:	6013      	str	r3, [r2, #0]
}
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	46020c00 	.word	0x46020c00
 800a3e4:	40006000 	.word	0x40006000

0800a3e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a3f0:	4b47      	ldr	r3, [pc, #284]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a46      	ldr	r2, [pc, #280]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a3f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3fc:	f7f8 fe1e 	bl	800303c <HAL_GetTick>
 800a400:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a402:	e008      	b.n	800a416 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a404:	f7f8 fe1a 	bl	800303c <HAL_GetTick>
 800a408:	4602      	mov	r2, r0
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d901      	bls.n	800a416 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e077      	b.n	800a506 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a416:	4b3e      	ldr	r3, [pc, #248]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f0      	bne.n	800a404 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a422:	4b3b      	ldr	r3, [pc, #236]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a426:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a42a:	f023 0303 	bic.w	r3, r3, #3
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6811      	ldr	r1, [r2, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6852      	ldr	r2, [r2, #4]
 800a436:	3a01      	subs	r2, #1
 800a438:	0212      	lsls	r2, r2, #8
 800a43a:	430a      	orrs	r2, r1
 800a43c:	4934      	ldr	r1, [pc, #208]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a442:	4b33      	ldr	r3, [pc, #204]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a446:	4b33      	ldr	r3, [pc, #204]	@ (800a514 <RCCEx_PLL2_Config+0x12c>)
 800a448:	4013      	ands	r3, r2
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	6892      	ldr	r2, [r2, #8]
 800a44e:	3a01      	subs	r2, #1
 800a450:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	68d2      	ldr	r2, [r2, #12]
 800a458:	3a01      	subs	r2, #1
 800a45a:	0252      	lsls	r2, r2, #9
 800a45c:	b292      	uxth	r2, r2
 800a45e:	4311      	orrs	r1, r2
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6912      	ldr	r2, [r2, #16]
 800a464:	3a01      	subs	r2, #1
 800a466:	0412      	lsls	r2, r2, #16
 800a468:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a46c:	4311      	orrs	r1, r2
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6952      	ldr	r2, [r2, #20]
 800a472:	3a01      	subs	r2, #1
 800a474:	0612      	lsls	r2, r2, #24
 800a476:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a47a:	430a      	orrs	r2, r1
 800a47c:	4924      	ldr	r1, [pc, #144]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a482:	4b23      	ldr	r3, [pc, #140]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a486:	f023 020c 	bic.w	r2, r3, #12
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	4920      	ldr	r1, [pc, #128]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a490:	4313      	orrs	r3, r2
 800a492:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a494:	4b1e      	ldr	r3, [pc, #120]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	491c      	ldr	r1, [pc, #112]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	4a1a      	ldr	r2, [pc, #104]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4a8:	f023 0310 	bic.w	r3, r3, #16
 800a4ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a4ae:	4b18      	ldr	r3, [pc, #96]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	69d2      	ldr	r2, [r2, #28]
 800a4be:	00d2      	lsls	r2, r2, #3
 800a4c0:	4913      	ldr	r1, [pc, #76]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a4c6:	4b12      	ldr	r3, [pc, #72]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ca:	4a11      	ldr	r2, [pc, #68]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4cc:	f043 0310 	orr.w	r3, r3, #16
 800a4d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a0e      	ldr	r2, [pc, #56]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4de:	f7f8 fdad 	bl	800303c <HAL_GetTick>
 800a4e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4e4:	e008      	b.n	800a4f8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4e6:	f7f8 fda9 	bl	800303c <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d901      	bls.n	800a4f8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e006      	b.n	800a506 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4f8:	4b05      	ldr	r3, [pc, #20]	@ (800a510 <RCCEx_PLL2_Config+0x128>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0f0      	beq.n	800a4e6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a504:	2300      	movs	r3, #0

}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	46020c00 	.word	0x46020c00
 800a514:	80800000 	.word	0x80800000

0800a518 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a520:	4b47      	ldr	r3, [pc, #284]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a46      	ldr	r2, [pc, #280]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a52a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a52c:	f7f8 fd86 	bl	800303c <HAL_GetTick>
 800a530:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a532:	e008      	b.n	800a546 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a534:	f7f8 fd82 	bl	800303c <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d901      	bls.n	800a546 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e077      	b.n	800a636 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a546:	4b3e      	ldr	r3, [pc, #248]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1f0      	bne.n	800a534 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a552:	4b3b      	ldr	r3, [pc, #236]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a556:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6811      	ldr	r1, [r2, #0]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6852      	ldr	r2, [r2, #4]
 800a566:	3a01      	subs	r2, #1
 800a568:	0212      	lsls	r2, r2, #8
 800a56a:	430a      	orrs	r2, r1
 800a56c:	4934      	ldr	r1, [pc, #208]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	630b      	str	r3, [r1, #48]	@ 0x30
 800a572:	4b33      	ldr	r3, [pc, #204]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a576:	4b33      	ldr	r3, [pc, #204]	@ (800a644 <RCCEx_PLL3_Config+0x12c>)
 800a578:	4013      	ands	r3, r2
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6892      	ldr	r2, [r2, #8]
 800a57e:	3a01      	subs	r2, #1
 800a580:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	68d2      	ldr	r2, [r2, #12]
 800a588:	3a01      	subs	r2, #1
 800a58a:	0252      	lsls	r2, r2, #9
 800a58c:	b292      	uxth	r2, r2
 800a58e:	4311      	orrs	r1, r2
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6912      	ldr	r2, [r2, #16]
 800a594:	3a01      	subs	r2, #1
 800a596:	0412      	lsls	r2, r2, #16
 800a598:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a59c:	4311      	orrs	r1, r2
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6952      	ldr	r2, [r2, #20]
 800a5a2:	3a01      	subs	r2, #1
 800a5a4:	0612      	lsls	r2, r2, #24
 800a5a6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	4924      	ldr	r1, [pc, #144]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a5b2:	4b23      	ldr	r3, [pc, #140]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b6:	f023 020c 	bic.w	r2, r3, #12
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	4920      	ldr	r1, [pc, #128]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a5c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	491c      	ldr	r1, [pc, #112]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d6:	4a1a      	ldr	r2, [pc, #104]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5d8:	f023 0310 	bic.w	r3, r3, #16
 800a5dc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5de:	4b18      	ldr	r3, [pc, #96]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	69d2      	ldr	r2, [r2, #28]
 800a5ee:	00d2      	lsls	r2, r2, #3
 800a5f0:	4913      	ldr	r1, [pc, #76]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a5f6:	4b12      	ldr	r3, [pc, #72]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5fa:	4a11      	ldr	r2, [pc, #68]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a5fc:	f043 0310 	orr.w	r3, r3, #16
 800a600:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a602:	4b0f      	ldr	r3, [pc, #60]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a0e      	ldr	r2, [pc, #56]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a60c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a60e:	f7f8 fd15 	bl	800303c <HAL_GetTick>
 800a612:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a614:	e008      	b.n	800a628 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a616:	f7f8 fd11 	bl	800303c <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	2b02      	cmp	r3, #2
 800a622:	d901      	bls.n	800a628 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a624:	2303      	movs	r3, #3
 800a626:	e006      	b.n	800a636 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a628:	4b05      	ldr	r3, [pc, #20]	@ (800a640 <RCCEx_PLL3_Config+0x128>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d0f0      	beq.n	800a616 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	46020c00 	.word	0x46020c00
 800a644:	80800000 	.word	0x80800000

0800a648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e049      	b.n	800a6ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7f7 fd76 	bl	8002160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2202      	movs	r2, #2
 800a678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3304      	adds	r3, #4
 800a684:	4619      	mov	r1, r3
 800a686:	4610      	mov	r0, r2
 800a688:	f000 fe14 	bl	800b2b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d001      	beq.n	800a710 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e06a      	b.n	800a7e6 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2202      	movs	r2, #2
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a35      	ldr	r2, [pc, #212]	@ (800a7f4 <HAL_TIM_Base_Start+0xfc>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d040      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a34      	ldr	r2, [pc, #208]	@ (800a7f8 <HAL_TIM_Base_Start+0x100>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d03b      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a734:	d036      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a73e:	d031      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a2d      	ldr	r2, [pc, #180]	@ (800a7fc <HAL_TIM_Base_Start+0x104>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d02c      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a2c      	ldr	r2, [pc, #176]	@ (800a800 <HAL_TIM_Base_Start+0x108>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d027      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a2a      	ldr	r2, [pc, #168]	@ (800a804 <HAL_TIM_Base_Start+0x10c>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d022      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a29      	ldr	r2, [pc, #164]	@ (800a808 <HAL_TIM_Base_Start+0x110>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d01d      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a27      	ldr	r2, [pc, #156]	@ (800a80c <HAL_TIM_Base_Start+0x114>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d018      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a26      	ldr	r2, [pc, #152]	@ (800a810 <HAL_TIM_Base_Start+0x118>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d013      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a24      	ldr	r2, [pc, #144]	@ (800a814 <HAL_TIM_Base_Start+0x11c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d00e      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a23      	ldr	r2, [pc, #140]	@ (800a818 <HAL_TIM_Base_Start+0x120>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d009      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a21      	ldr	r2, [pc, #132]	@ (800a81c <HAL_TIM_Base_Start+0x124>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d004      	beq.n	800a7a4 <HAL_TIM_Base_Start+0xac>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a20      	ldr	r2, [pc, #128]	@ (800a820 <HAL_TIM_Base_Start+0x128>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d115      	bne.n	800a7d0 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	4b1e      	ldr	r3, [pc, #120]	@ (800a824 <HAL_TIM_Base_Start+0x12c>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b06      	cmp	r3, #6
 800a7b4:	d015      	beq.n	800a7e2 <HAL_TIM_Base_Start+0xea>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7bc:	d011      	beq.n	800a7e2 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f042 0201 	orr.w	r2, r2, #1
 800a7cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ce:	e008      	b.n	800a7e2 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0201 	orr.w	r2, r2, #1
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	e000      	b.n	800a7e4 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	40012c00 	.word	0x40012c00
 800a7f8:	50012c00 	.word	0x50012c00
 800a7fc:	40000400 	.word	0x40000400
 800a800:	50000400 	.word	0x50000400
 800a804:	40000800 	.word	0x40000800
 800a808:	50000800 	.word	0x50000800
 800a80c:	40000c00 	.word	0x40000c00
 800a810:	50000c00 	.word	0x50000c00
 800a814:	40013400 	.word	0x40013400
 800a818:	50013400 	.word	0x50013400
 800a81c:	40014000 	.word	0x40014000
 800a820:	50014000 	.word	0x50014000
 800a824:	00010007 	.word	0x00010007

0800a828 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e049      	b.n	800a8ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d106      	bne.n	800a854 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f841 	bl	800a8d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2202      	movs	r2, #2
 800a858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3304      	adds	r3, #4
 800a864:	4619      	mov	r1, r3
 800a866:	4610      	mov	r0, r2
 800a868:	f000 fd24 	bl	800b2b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a8de:	bf00      	nop
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
	...

0800a8ec <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <HAL_TIM_IC_Start_DMA+0x22>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	e023      	b.n	800a956 <HAL_TIM_IC_Start_DMA+0x6a>
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b04      	cmp	r3, #4
 800a912:	d104      	bne.n	800a91e <HAL_TIM_IC_Start_DMA+0x32>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	e01b      	b.n	800a956 <HAL_TIM_IC_Start_DMA+0x6a>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b08      	cmp	r3, #8
 800a922:	d104      	bne.n	800a92e <HAL_TIM_IC_Start_DMA+0x42>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	e013      	b.n	800a956 <HAL_TIM_IC_Start_DMA+0x6a>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b0c      	cmp	r3, #12
 800a932:	d104      	bne.n	800a93e <HAL_TIM_IC_Start_DMA+0x52>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	e00b      	b.n	800a956 <HAL_TIM_IC_Start_DMA+0x6a>
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b10      	cmp	r3, #16
 800a942:	d104      	bne.n	800a94e <HAL_TIM_IC_Start_DMA+0x62>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	e003      	b.n	800a956 <HAL_TIM_IC_Start_DMA+0x6a>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a954:	b2db      	uxtb	r3, r3
 800a956:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <HAL_TIM_IC_Start_DMA+0x7c>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a964:	b2db      	uxtb	r3, r3
 800a966:	e013      	b.n	800a990 <HAL_TIM_IC_Start_DMA+0xa4>
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d104      	bne.n	800a978 <HAL_TIM_IC_Start_DMA+0x8c>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a974:	b2db      	uxtb	r3, r3
 800a976:	e00b      	b.n	800a990 <HAL_TIM_IC_Start_DMA+0xa4>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2b08      	cmp	r3, #8
 800a97c:	d104      	bne.n	800a988 <HAL_TIM_IC_Start_DMA+0x9c>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a984:	b2db      	uxtb	r3, r3
 800a986:	e003      	b.n	800a990 <HAL_TIM_IC_Start_DMA+0xa4>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800a992:	7dbb      	ldrb	r3, [r7, #22]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d002      	beq.n	800a99e <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800a998:	7d7b      	ldrb	r3, [r7, #21]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d101      	bne.n	800a9a2 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e17a      	b.n	800ac98 <HAL_TIM_IC_Start_DMA+0x3ac>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800a9a2:	7dbb      	ldrb	r3, [r7, #22]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d153      	bne.n	800aa50 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800a9a8:	7d7b      	ldrb	r3, [r7, #21]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d150      	bne.n	800aa50 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <HAL_TIM_IC_Start_DMA+0xce>
 800a9b4:	887b      	ldrh	r3, [r7, #2]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e16c      	b.n	800ac98 <HAL_TIM_IC_Start_DMA+0x3ac>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d104      	bne.n	800a9ce <HAL_TIM_IC_Start_DMA+0xe2>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9cc:	e023      	b.n	800aa16 <HAL_TIM_IC_Start_DMA+0x12a>
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b04      	cmp	r3, #4
 800a9d2:	d104      	bne.n	800a9de <HAL_TIM_IC_Start_DMA+0xf2>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9dc:	e01b      	b.n	800aa16 <HAL_TIM_IC_Start_DMA+0x12a>
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d104      	bne.n	800a9ee <HAL_TIM_IC_Start_DMA+0x102>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9ec:	e013      	b.n	800aa16 <HAL_TIM_IC_Start_DMA+0x12a>
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2b0c      	cmp	r3, #12
 800a9f2:	d104      	bne.n	800a9fe <HAL_TIM_IC_Start_DMA+0x112>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9fc:	e00b      	b.n	800aa16 <HAL_TIM_IC_Start_DMA+0x12a>
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	d104      	bne.n	800aa0e <HAL_TIM_IC_Start_DMA+0x122>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa0c:	e003      	b.n	800aa16 <HAL_TIM_IC_Start_DMA+0x12a>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2202      	movs	r2, #2
 800aa12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d104      	bne.n	800aa26 <HAL_TIM_IC_Start_DMA+0x13a>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 800aa24:	e016      	b.n	800aa54 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d104      	bne.n	800aa36 <HAL_TIM_IC_Start_DMA+0x14a>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 800aa34:	e00e      	b.n	800aa54 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d104      	bne.n	800aa46 <HAL_TIM_IC_Start_DMA+0x15a>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 800aa44:	e006      	b.n	800aa54 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2202      	movs	r2, #2
 800aa4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 800aa4e:	e001      	b.n	800aa54 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e121      	b.n	800ac98 <HAL_TIM_IC_Start_DMA+0x3ac>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 ffdd 	bl	800ba1c <TIM_CCxChannelCmd>

  switch (Channel)
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b0c      	cmp	r3, #12
 800aa66:	f200 80ad 	bhi.w	800abc4 <HAL_TIM_IC_Start_DMA+0x2d8>
 800aa6a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa70 <HAL_TIM_IC_Start_DMA+0x184>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aaa5 	.word	0x0800aaa5
 800aa74:	0800abc5 	.word	0x0800abc5
 800aa78:	0800abc5 	.word	0x0800abc5
 800aa7c:	0800abc5 	.word	0x0800abc5
 800aa80:	0800aaed 	.word	0x0800aaed
 800aa84:	0800abc5 	.word	0x0800abc5
 800aa88:	0800abc5 	.word	0x0800abc5
 800aa8c:	0800abc5 	.word	0x0800abc5
 800aa90:	0800ab35 	.word	0x0800ab35
 800aa94:	0800abc5 	.word	0x0800abc5
 800aa98:	0800abc5 	.word	0x0800abc5
 800aa9c:	0800abc5 	.word	0x0800abc5
 800aaa0:	0800ab7d 	.word	0x0800ab7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa8:	4a7d      	ldr	r2, [pc, #500]	@ (800aca0 <HAL_TIM_IC_Start_DMA+0x3b4>)
 800aaaa:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab0:	4a7c      	ldr	r2, [pc, #496]	@ (800aca4 <HAL_TIM_IC_Start_DMA+0x3b8>)
 800aab2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab8:	4a7b      	ldr	r2, [pc, #492]	@ (800aca8 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800aaba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3334      	adds	r3, #52	@ 0x34
 800aac6:	4619      	mov	r1, r3
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	887b      	ldrh	r3, [r7, #2]
 800aacc:	f000 fae8 	bl	800b0a0 <TIM_DMA_Start_IT>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e0de      	b.n	800ac98 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68da      	ldr	r2, [r3, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aae8:	60da      	str	r2, [r3, #12]
      break;
 800aaea:	e06e      	b.n	800abca <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf0:	4a6b      	ldr	r2, [pc, #428]	@ (800aca0 <HAL_TIM_IC_Start_DMA+0x3b4>)
 800aaf2:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf8:	4a6a      	ldr	r2, [pc, #424]	@ (800aca4 <HAL_TIM_IC_Start_DMA+0x3b8>)
 800aafa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab00:	4a69      	ldr	r2, [pc, #420]	@ (800aca8 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800ab02:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3338      	adds	r3, #56	@ 0x38
 800ab0e:	4619      	mov	r1, r3
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	887b      	ldrh	r3, [r7, #2]
 800ab14:	f000 fac4 	bl	800b0a0 <TIM_DMA_Start_IT>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e0ba      	b.n	800ac98 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab30:	60da      	str	r2, [r3, #12]
      break;
 800ab32:	e04a      	b.n	800abca <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab38:	4a59      	ldr	r2, [pc, #356]	@ (800aca0 <HAL_TIM_IC_Start_DMA+0x3b4>)
 800ab3a:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab40:	4a58      	ldr	r2, [pc, #352]	@ (800aca4 <HAL_TIM_IC_Start_DMA+0x3b8>)
 800ab42:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	4a57      	ldr	r2, [pc, #348]	@ (800aca8 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800ab4a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	333c      	adds	r3, #60	@ 0x3c
 800ab56:	4619      	mov	r1, r3
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	887b      	ldrh	r3, [r7, #2]
 800ab5c:	f000 faa0 	bl	800b0a0 <TIM_DMA_Start_IT>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e096      	b.n	800ac98 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab78:	60da      	str	r2, [r3, #12]
      break;
 800ab7a:	e026      	b.n	800abca <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab80:	4a47      	ldr	r2, [pc, #284]	@ (800aca0 <HAL_TIM_IC_Start_DMA+0x3b4>)
 800ab82:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab88:	4a46      	ldr	r2, [pc, #280]	@ (800aca4 <HAL_TIM_IC_Start_DMA+0x3b8>)
 800ab8a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab90:	4a45      	ldr	r2, [pc, #276]	@ (800aca8 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800ab92:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3340      	adds	r3, #64	@ 0x40
 800ab9e:	4619      	mov	r1, r3
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	887b      	ldrh	r3, [r7, #2]
 800aba4:	f000 fa7c 	bl	800b0a0 <TIM_DMA_Start_IT>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e072      	b.n	800ac98 <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68da      	ldr	r2, [r3, #12]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800abc0:	60da      	str	r2, [r3, #12]
      break;
 800abc2:	e002      	b.n	800abca <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	75fb      	strb	r3, [r7, #23]
      break;
 800abc8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a37      	ldr	r2, [pc, #220]	@ (800acac <HAL_TIM_IC_Start_DMA+0x3c0>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d040      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a35      	ldr	r2, [pc, #212]	@ (800acb0 <HAL_TIM_IC_Start_DMA+0x3c4>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d03b      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe6:	d036      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abf0:	d031      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a2f      	ldr	r2, [pc, #188]	@ (800acb4 <HAL_TIM_IC_Start_DMA+0x3c8>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d02c      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a2d      	ldr	r2, [pc, #180]	@ (800acb8 <HAL_TIM_IC_Start_DMA+0x3cc>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d027      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a2c      	ldr	r2, [pc, #176]	@ (800acbc <HAL_TIM_IC_Start_DMA+0x3d0>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d022      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a2a      	ldr	r2, [pc, #168]	@ (800acc0 <HAL_TIM_IC_Start_DMA+0x3d4>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d01d      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a29      	ldr	r2, [pc, #164]	@ (800acc4 <HAL_TIM_IC_Start_DMA+0x3d8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d018      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a27      	ldr	r2, [pc, #156]	@ (800acc8 <HAL_TIM_IC_Start_DMA+0x3dc>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d013      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a26      	ldr	r2, [pc, #152]	@ (800accc <HAL_TIM_IC_Start_DMA+0x3e0>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00e      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a24      	ldr	r2, [pc, #144]	@ (800acd0 <HAL_TIM_IC_Start_DMA+0x3e4>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d009      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a23      	ldr	r2, [pc, #140]	@ (800acd4 <HAL_TIM_IC_Start_DMA+0x3e8>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d004      	beq.n	800ac56 <HAL_TIM_IC_Start_DMA+0x36a>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a21      	ldr	r2, [pc, #132]	@ (800acd8 <HAL_TIM_IC_Start_DMA+0x3ec>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d115      	bne.n	800ac82 <HAL_TIM_IC_Start_DMA+0x396>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	4b1f      	ldr	r3, [pc, #124]	@ (800acdc <HAL_TIM_IC_Start_DMA+0x3f0>)
 800ac5e:	4013      	ands	r3, r2
 800ac60:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b06      	cmp	r3, #6
 800ac66:	d015      	beq.n	800ac94 <HAL_TIM_IC_Start_DMA+0x3a8>
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac6e:	d011      	beq.n	800ac94 <HAL_TIM_IC_Start_DMA+0x3a8>
    {
      __HAL_TIM_ENABLE(htim);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac80:	e008      	b.n	800ac94 <HAL_TIM_IC_Start_DMA+0x3a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f042 0201 	orr.w	r2, r2, #1
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	e000      	b.n	800ac96 <HAL_TIM_IC_Start_DMA+0x3aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac94:	bf00      	nop
  }

  /* Return function status */
  return status;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	0800b1e5 	.word	0x0800b1e5
 800aca4:	0800b24d 	.word	0x0800b24d
 800aca8:	0800b153 	.word	0x0800b153
 800acac:	40012c00 	.word	0x40012c00
 800acb0:	50012c00 	.word	0x50012c00
 800acb4:	40000400 	.word	0x40000400
 800acb8:	50000400 	.word	0x50000400
 800acbc:	40000800 	.word	0x40000800
 800acc0:	50000800 	.word	0x50000800
 800acc4:	40000c00 	.word	0x40000c00
 800acc8:	50000c00 	.word	0x50000c00
 800accc:	40013400 	.word	0x40013400
 800acd0:	50013400 	.word	0x50013400
 800acd4:	40014000 	.word	0x40014000
 800acd8:	50014000 	.word	0x50014000
 800acdc:	00010007 	.word	0x00010007

0800ace0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d101      	bne.n	800acfe <HAL_TIM_IC_ConfigChannel+0x1e>
 800acfa:	2302      	movs	r3, #2
 800acfc:	e088      	b.n	800ae10 <HAL_TIM_IC_ConfigChannel+0x130>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d11b      	bne.n	800ad44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ad1c:	f000 fc96 	bl	800b64c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	699a      	ldr	r2, [r3, #24]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f022 020c 	bic.w	r2, r2, #12
 800ad2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6999      	ldr	r1, [r3, #24]
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	619a      	str	r2, [r3, #24]
 800ad42:	e060      	b.n	800ae06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d11c      	bne.n	800ad84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ad5a:	f000 fd3c 	bl	800b7d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	699a      	ldr	r2, [r3, #24]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ad6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6999      	ldr	r1, [r3, #24]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	021a      	lsls	r2, r3, #8
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	619a      	str	r2, [r3, #24]
 800ad82:	e040      	b.n	800ae06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	d11b      	bne.n	800adc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ad9a:	f000 fd89 	bl	800b8b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 020c 	bic.w	r2, r2, #12
 800adac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69d9      	ldr	r1, [r3, #28]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	61da      	str	r2, [r3, #28]
 800adc0:	e021      	b.n	800ae06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b0c      	cmp	r3, #12
 800adc6:	d11c      	bne.n	800ae02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800add8:	f000 fda6 	bl	800b928 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	69da      	ldr	r2, [r3, #28]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800adea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	69d9      	ldr	r1, [r3, #28]
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	021a      	lsls	r2, r3, #8
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	61da      	str	r2, [r3, #28]
 800ae00:	e001      	b.n	800ae06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3718      	adds	r7, #24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_TIM_ConfigClockSource+0x1c>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e0e6      	b.n	800b002 <HAL_TIM_ConfigClockSource+0x1ea>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ae52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ae56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a67      	ldr	r2, [pc, #412]	@ (800b00c <HAL_TIM_ConfigClockSource+0x1f4>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	f000 80b1 	beq.w	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800ae74:	4a65      	ldr	r2, [pc, #404]	@ (800b00c <HAL_TIM_ConfigClockSource+0x1f4>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	f200 80b6 	bhi.w	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae7c:	4a64      	ldr	r2, [pc, #400]	@ (800b010 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	f000 80a9 	beq.w	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800ae84:	4a62      	ldr	r2, [pc, #392]	@ (800b010 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	f200 80ae 	bhi.w	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae8c:	4a61      	ldr	r2, [pc, #388]	@ (800b014 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	f000 80a1 	beq.w	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800ae94:	4a5f      	ldr	r2, [pc, #380]	@ (800b014 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	f200 80a6 	bhi.w	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae9c:	4a5e      	ldr	r2, [pc, #376]	@ (800b018 <HAL_TIM_ConfigClockSource+0x200>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	f000 8099 	beq.w	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800aea4:	4a5c      	ldr	r2, [pc, #368]	@ (800b018 <HAL_TIM_ConfigClockSource+0x200>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	f200 809e 	bhi.w	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aeac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aeb0:	f000 8091 	beq.w	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800aeb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aeb8:	f200 8096 	bhi.w	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aec0:	f000 8089 	beq.w	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800aec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aec8:	f200 808e 	bhi.w	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aed0:	d03e      	beq.n	800af50 <HAL_TIM_ConfigClockSource+0x138>
 800aed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aed6:	f200 8087 	bhi.w	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aeda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aede:	f000 8086 	beq.w	800afee <HAL_TIM_ConfigClockSource+0x1d6>
 800aee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aee6:	d87f      	bhi.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aee8:	2b70      	cmp	r3, #112	@ 0x70
 800aeea:	d01a      	beq.n	800af22 <HAL_TIM_ConfigClockSource+0x10a>
 800aeec:	2b70      	cmp	r3, #112	@ 0x70
 800aeee:	d87b      	bhi.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aef0:	2b60      	cmp	r3, #96	@ 0x60
 800aef2:	d050      	beq.n	800af96 <HAL_TIM_ConfigClockSource+0x17e>
 800aef4:	2b60      	cmp	r3, #96	@ 0x60
 800aef6:	d877      	bhi.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aef8:	2b50      	cmp	r3, #80	@ 0x50
 800aefa:	d03c      	beq.n	800af76 <HAL_TIM_ConfigClockSource+0x15e>
 800aefc:	2b50      	cmp	r3, #80	@ 0x50
 800aefe:	d873      	bhi.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800af00:	2b40      	cmp	r3, #64	@ 0x40
 800af02:	d058      	beq.n	800afb6 <HAL_TIM_ConfigClockSource+0x19e>
 800af04:	2b40      	cmp	r3, #64	@ 0x40
 800af06:	d86f      	bhi.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800af08:	2b30      	cmp	r3, #48	@ 0x30
 800af0a:	d064      	beq.n	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800af0c:	2b30      	cmp	r3, #48	@ 0x30
 800af0e:	d86b      	bhi.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800af10:	2b20      	cmp	r3, #32
 800af12:	d060      	beq.n	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800af14:	2b20      	cmp	r3, #32
 800af16:	d867      	bhi.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d05c      	beq.n	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800af1c:	2b10      	cmp	r3, #16
 800af1e:	d05a      	beq.n	800afd6 <HAL_TIM_ConfigClockSource+0x1be>
 800af20:	e062      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af32:	f000 fd53 	bl	800b9dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	609a      	str	r2, [r3, #8]
      break;
 800af4e:	e04f      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af60:	f000 fd3c 	bl	800b9dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af72:	609a      	str	r2, [r3, #8]
      break;
 800af74:	e03c      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af82:	461a      	mov	r2, r3
 800af84:	f000 fbf8 	bl	800b778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2150      	movs	r1, #80	@ 0x50
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 fd07 	bl	800b9a2 <TIM_ITRx_SetConfig>
      break;
 800af94:	e02c      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800afa2:	461a      	mov	r2, r3
 800afa4:	f000 fc54 	bl	800b850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2160      	movs	r1, #96	@ 0x60
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 fcf7 	bl	800b9a2 <TIM_ITRx_SetConfig>
      break;
 800afb4:	e01c      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afc2:	461a      	mov	r2, r3
 800afc4:	f000 fbd8 	bl	800b778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2140      	movs	r1, #64	@ 0x40
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 fce7 	bl	800b9a2 <TIM_ITRx_SetConfig>
      break;
 800afd4:	e00c      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f000 fcde 	bl	800b9a2 <TIM_ITRx_SetConfig>
      break;
 800afe6:	e003      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
      break;
 800afec:	e000      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800afee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	00100070 	.word	0x00100070
 800b010:	00100040 	.word	0x00100040
 800b014:	00100030 	.word	0x00100030
 800b018:	00100020 	.word	0x00100020

0800b01c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b030:	2302      	movs	r3, #2
 800b032:	e031      	b.n	800b098 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fa34 	bl	800b4b4 <TIM_SlaveTimer_SetConfig>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d009      	beq.n	800b066 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e018      	b.n	800b098 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68da      	ldr	r2, [r3, #12]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b074:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68da      	ldr	r2, [r3, #12]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b084:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d020      	beq.n	800b0fc <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d019      	beq.n	800b0f6 <TIM_DMA_Start_IT+0x56>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d014      	beq.n	800b0f6 <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f7f8 fcb8 	bl	8003a60 <HAL_DMAEx_List_Start_IT>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75fb      	strb	r3, [r7, #23]
 800b0f4:	e00a      	b.n	800b10c <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	75fb      	strb	r3, [r7, #23]
 800b0fa:	e007      	b.n	800b10c <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	68b9      	ldr	r1, [r7, #8]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7f8 f95e 	bl	80033c4 <HAL_DMA_Start_IT>
 800b108:	4603      	mov	r3, r0
 800b10a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b13e:	b480      	push	{r7}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b15e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d107      	bne.n	800b17a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2201      	movs	r2, #1
 800b16e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b178:	e02a      	b.n	800b1d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d107      	bne.n	800b194 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2202      	movs	r2, #2
 800b188:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b192:	e01d      	b.n	800b1d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d107      	bne.n	800b1ae <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2204      	movs	r2, #4
 800b1a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b1ac:	e010      	b.n	800b1d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d107      	bne.n	800b1c8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2208      	movs	r2, #8
 800b1bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b1c6:	e003      	b.n	800b1d0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f7ff ffb4 	bl	800b13e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	771a      	strb	r2, [r3, #28]
}
 800b1dc:	bf00      	nop
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d103      	bne.n	800b204 <TIM_DMACaptureCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2201      	movs	r2, #1
 800b200:	771a      	strb	r2, [r3, #28]
 800b202:	e019      	b.n	800b238 <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d103      	bne.n	800b216 <TIM_DMACaptureCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2202      	movs	r2, #2
 800b212:	771a      	strb	r2, [r3, #28]
 800b214:	e010      	b.n	800b238 <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d103      	bne.n	800b228 <TIM_DMACaptureCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2204      	movs	r2, #4
 800b224:	771a      	strb	r2, [r3, #28]
 800b226:	e007      	b.n	800b238 <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d102      	bne.n	800b238 <TIM_DMACaptureCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2208      	movs	r2, #8
 800b236:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff ff6c 	bl	800b116 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	771a      	strb	r2, [r3, #28]
}
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b258:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d103      	bne.n	800b26c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2201      	movs	r2, #1
 800b268:	771a      	strb	r2, [r3, #28]
 800b26a:	e019      	b.n	800b2a0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	429a      	cmp	r2, r3
 800b274:	d103      	bne.n	800b27e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2202      	movs	r2, #2
 800b27a:	771a      	strb	r2, [r3, #28]
 800b27c:	e010      	b.n	800b2a0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	429a      	cmp	r2, r3
 800b286:	d103      	bne.n	800b290 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2204      	movs	r2, #4
 800b28c:	771a      	strb	r2, [r3, #28]
 800b28e:	e007      	b.n	800b2a0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	429a      	cmp	r2, r3
 800b298:	d102      	bne.n	800b2a0 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2208      	movs	r2, #8
 800b29e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff ff42 	bl	800b12a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	771a      	strb	r2, [r3, #28]
}
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a6b      	ldr	r2, [pc, #428]	@ (800b474 <TIM_Base_SetConfig+0x1c0>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d02b      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a6a      	ldr	r2, [pc, #424]	@ (800b478 <TIM_Base_SetConfig+0x1c4>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d027      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2da:	d023      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2e2:	d01f      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a65      	ldr	r2, [pc, #404]	@ (800b47c <TIM_Base_SetConfig+0x1c8>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d01b      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a64      	ldr	r2, [pc, #400]	@ (800b480 <TIM_Base_SetConfig+0x1cc>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d017      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a63      	ldr	r2, [pc, #396]	@ (800b484 <TIM_Base_SetConfig+0x1d0>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d013      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a62      	ldr	r2, [pc, #392]	@ (800b488 <TIM_Base_SetConfig+0x1d4>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d00f      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a61      	ldr	r2, [pc, #388]	@ (800b48c <TIM_Base_SetConfig+0x1d8>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d00b      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a60      	ldr	r2, [pc, #384]	@ (800b490 <TIM_Base_SetConfig+0x1dc>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d007      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a5f      	ldr	r2, [pc, #380]	@ (800b494 <TIM_Base_SetConfig+0x1e0>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d003      	beq.n	800b324 <TIM_Base_SetConfig+0x70>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a5e      	ldr	r2, [pc, #376]	@ (800b498 <TIM_Base_SetConfig+0x1e4>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d108      	bne.n	800b336 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b32a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a4e      	ldr	r2, [pc, #312]	@ (800b474 <TIM_Base_SetConfig+0x1c0>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d043      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a4d      	ldr	r2, [pc, #308]	@ (800b478 <TIM_Base_SetConfig+0x1c4>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d03f      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b34c:	d03b      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b354:	d037      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a48      	ldr	r2, [pc, #288]	@ (800b47c <TIM_Base_SetConfig+0x1c8>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d033      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a47      	ldr	r2, [pc, #284]	@ (800b480 <TIM_Base_SetConfig+0x1cc>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d02f      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a46      	ldr	r2, [pc, #280]	@ (800b484 <TIM_Base_SetConfig+0x1d0>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d02b      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a45      	ldr	r2, [pc, #276]	@ (800b488 <TIM_Base_SetConfig+0x1d4>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d027      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a44      	ldr	r2, [pc, #272]	@ (800b48c <TIM_Base_SetConfig+0x1d8>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d023      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a43      	ldr	r2, [pc, #268]	@ (800b490 <TIM_Base_SetConfig+0x1dc>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d01f      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a42      	ldr	r2, [pc, #264]	@ (800b494 <TIM_Base_SetConfig+0x1e0>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d01b      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a41      	ldr	r2, [pc, #260]	@ (800b498 <TIM_Base_SetConfig+0x1e4>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d017      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a40      	ldr	r2, [pc, #256]	@ (800b49c <TIM_Base_SetConfig+0x1e8>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d013      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a3f      	ldr	r2, [pc, #252]	@ (800b4a0 <TIM_Base_SetConfig+0x1ec>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00f      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a3e      	ldr	r2, [pc, #248]	@ (800b4a4 <TIM_Base_SetConfig+0x1f0>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00b      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a3d      	ldr	r2, [pc, #244]	@ (800b4a8 <TIM_Base_SetConfig+0x1f4>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d007      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a3c      	ldr	r2, [pc, #240]	@ (800b4ac <TIM_Base_SetConfig+0x1f8>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d003      	beq.n	800b3c6 <TIM_Base_SetConfig+0x112>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a3b      	ldr	r2, [pc, #236]	@ (800b4b0 <TIM_Base_SetConfig+0x1fc>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d108      	bne.n	800b3d8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	689a      	ldr	r2, [r3, #8]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a1e      	ldr	r2, [pc, #120]	@ (800b474 <TIM_Base_SetConfig+0x1c0>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d023      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a1d      	ldr	r2, [pc, #116]	@ (800b478 <TIM_Base_SetConfig+0x1c4>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d01f      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a22      	ldr	r2, [pc, #136]	@ (800b494 <TIM_Base_SetConfig+0x1e0>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d01b      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a21      	ldr	r2, [pc, #132]	@ (800b498 <TIM_Base_SetConfig+0x1e4>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d017      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a20      	ldr	r2, [pc, #128]	@ (800b49c <TIM_Base_SetConfig+0x1e8>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d013      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a1f      	ldr	r2, [pc, #124]	@ (800b4a0 <TIM_Base_SetConfig+0x1ec>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00f      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a1e      	ldr	r2, [pc, #120]	@ (800b4a4 <TIM_Base_SetConfig+0x1f0>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d00b      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a1d      	ldr	r2, [pc, #116]	@ (800b4a8 <TIM_Base_SetConfig+0x1f4>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d007      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a1c      	ldr	r2, [pc, #112]	@ (800b4ac <TIM_Base_SetConfig+0x1f8>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d003      	beq.n	800b446 <TIM_Base_SetConfig+0x192>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b0 <TIM_Base_SetConfig+0x1fc>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d103      	bne.n	800b44e <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	691a      	ldr	r2, [r3, #16]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f043 0204 	orr.w	r2, r3, #4
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]
}
 800b466:	bf00      	nop
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	40012c00 	.word	0x40012c00
 800b478:	50012c00 	.word	0x50012c00
 800b47c:	40000400 	.word	0x40000400
 800b480:	50000400 	.word	0x50000400
 800b484:	40000800 	.word	0x40000800
 800b488:	50000800 	.word	0x50000800
 800b48c:	40000c00 	.word	0x40000c00
 800b490:	50000c00 	.word	0x50000c00
 800b494:	40013400 	.word	0x40013400
 800b498:	50013400 	.word	0x50013400
 800b49c:	40014000 	.word	0x40014000
 800b4a0:	50014000 	.word	0x50014000
 800b4a4:	40014400 	.word	0x40014400
 800b4a8:	50014400 	.word	0x50014400
 800b4ac:	40014800 	.word	0x40014800
 800b4b0:	50014800 	.word	0x50014800

0800b4b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b4d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4e6:	f023 0307 	bic.w	r3, r3, #7
 800b4ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	4a4e      	ldr	r2, [pc, #312]	@ (800b63c <TIM_SlaveTimer_SetConfig+0x188>)
 800b504:	4293      	cmp	r3, r2
 800b506:	f000 8092 	beq.w	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b50a:	4a4c      	ldr	r2, [pc, #304]	@ (800b63c <TIM_SlaveTimer_SetConfig+0x188>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	f200 808b 	bhi.w	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b512:	4a4b      	ldr	r2, [pc, #300]	@ (800b640 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b514:	4293      	cmp	r3, r2
 800b516:	f000 808a 	beq.w	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b51a:	4a49      	ldr	r2, [pc, #292]	@ (800b640 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	f200 8083 	bhi.w	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b522:	4a48      	ldr	r2, [pc, #288]	@ (800b644 <TIM_SlaveTimer_SetConfig+0x190>)
 800b524:	4293      	cmp	r3, r2
 800b526:	f000 8082 	beq.w	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b52a:	4a46      	ldr	r2, [pc, #280]	@ (800b644 <TIM_SlaveTimer_SetConfig+0x190>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d87b      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b530:	4a45      	ldr	r2, [pc, #276]	@ (800b648 <TIM_SlaveTimer_SetConfig+0x194>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d07b      	beq.n	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b536:	4a44      	ldr	r2, [pc, #272]	@ (800b648 <TIM_SlaveTimer_SetConfig+0x194>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d875      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b53c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b540:	d075      	beq.n	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b542:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b546:	d86f      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b54c:	d06f      	beq.n	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b54e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b552:	d869      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b554:	2b70      	cmp	r3, #112	@ 0x70
 800b556:	d01a      	beq.n	800b58e <TIM_SlaveTimer_SetConfig+0xda>
 800b558:	2b70      	cmp	r3, #112	@ 0x70
 800b55a:	d865      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b55c:	2b60      	cmp	r3, #96	@ 0x60
 800b55e:	d059      	beq.n	800b614 <TIM_SlaveTimer_SetConfig+0x160>
 800b560:	2b60      	cmp	r3, #96	@ 0x60
 800b562:	d861      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b564:	2b50      	cmp	r3, #80	@ 0x50
 800b566:	d04b      	beq.n	800b600 <TIM_SlaveTimer_SetConfig+0x14c>
 800b568:	2b50      	cmp	r3, #80	@ 0x50
 800b56a:	d85d      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b56c:	2b40      	cmp	r3, #64	@ 0x40
 800b56e:	d019      	beq.n	800b5a4 <TIM_SlaveTimer_SetConfig+0xf0>
 800b570:	2b40      	cmp	r3, #64	@ 0x40
 800b572:	d859      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b574:	2b30      	cmp	r3, #48	@ 0x30
 800b576:	d05a      	beq.n	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b578:	2b30      	cmp	r3, #48	@ 0x30
 800b57a:	d855      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	d056      	beq.n	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b580:	2b20      	cmp	r3, #32
 800b582:	d851      	bhi.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d052      	beq.n	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b588:	2b10      	cmp	r3, #16
 800b58a:	d050      	beq.n	800b62e <TIM_SlaveTimer_SetConfig+0x17a>
 800b58c:	e04c      	b.n	800b628 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b59e:	f000 fa1d 	bl	800b9dc <TIM_ETR_SetConfig>
      break;
 800b5a2:	e045      	b.n	800b630 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b05      	cmp	r3, #5
 800b5aa:	d004      	beq.n	800b5b6 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b5b0:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800b5b4:	d101      	bne.n	800b5ba <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e03b      	b.n	800b632 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6a1a      	ldr	r2, [r3, #32]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f022 0201 	bic.w	r2, r2, #1
 800b5d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b5e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	011b      	lsls	r3, r3, #4
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	621a      	str	r2, [r3, #32]
      break;
 800b5fe:	e017      	b.n	800b630 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b60c:	461a      	mov	r2, r3
 800b60e:	f000 f8b3 	bl	800b778 <TIM_TI1_ConfigInputStage>
      break;
 800b612:	e00d      	b.n	800b630 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b620:	461a      	mov	r2, r3
 800b622:	f000 f915 	bl	800b850 <TIM_TI2_ConfigInputStage>
      break;
 800b626:	e003      	b.n	800b630 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	75fb      	strb	r3, [r7, #23]
      break;
 800b62c:	e000      	b.n	800b630 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800b62e:	bf00      	nop
  }

  return status;
 800b630:	7dfb      	ldrb	r3, [r7, #23]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	00100070 	.word	0x00100070
 800b640:	00100040 	.word	0x00100040
 800b644:	00100030 	.word	0x00100030
 800b648:	00100020 	.word	0x00100020

0800b64c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	f023 0201 	bic.w	r2, r3, #1
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4a34      	ldr	r2, [pc, #208]	@ (800b748 <TIM_TI1_SetConfig+0xfc>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d033      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4a33      	ldr	r2, [pc, #204]	@ (800b74c <TIM_TI1_SetConfig+0x100>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d02f      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b688:	d02b      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b690:	d027      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	4a2e      	ldr	r2, [pc, #184]	@ (800b750 <TIM_TI1_SetConfig+0x104>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d023      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4a2d      	ldr	r2, [pc, #180]	@ (800b754 <TIM_TI1_SetConfig+0x108>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d01f      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4a2c      	ldr	r2, [pc, #176]	@ (800b758 <TIM_TI1_SetConfig+0x10c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d01b      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	4a2b      	ldr	r2, [pc, #172]	@ (800b75c <TIM_TI1_SetConfig+0x110>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d017      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4a2a      	ldr	r2, [pc, #168]	@ (800b760 <TIM_TI1_SetConfig+0x114>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d013      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4a29      	ldr	r2, [pc, #164]	@ (800b764 <TIM_TI1_SetConfig+0x118>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00f      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	4a28      	ldr	r2, [pc, #160]	@ (800b768 <TIM_TI1_SetConfig+0x11c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d00b      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	4a27      	ldr	r2, [pc, #156]	@ (800b76c <TIM_TI1_SetConfig+0x120>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d007      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4a26      	ldr	r2, [pc, #152]	@ (800b770 <TIM_TI1_SetConfig+0x124>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d003      	beq.n	800b6e2 <TIM_TI1_SetConfig+0x96>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4a25      	ldr	r2, [pc, #148]	@ (800b774 <TIM_TI1_SetConfig+0x128>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d101      	bne.n	800b6e6 <TIM_TI1_SetConfig+0x9a>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e000      	b.n	800b6e8 <TIM_TI1_SetConfig+0x9c>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d008      	beq.n	800b6fe <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f023 0303 	bic.w	r3, r3, #3
 800b6f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e003      	b.n	800b706 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f043 0301 	orr.w	r3, r3, #1
 800b704:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b70c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	b2db      	uxtb	r3, r3
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	4313      	orrs	r3, r2
 800b718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f023 030a 	bic.w	r3, r3, #10
 800b720:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	f003 030a 	and.w	r3, r3, #10
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	621a      	str	r2, [r3, #32]
}
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	40012c00 	.word	0x40012c00
 800b74c:	50012c00 	.word	0x50012c00
 800b750:	40000400 	.word	0x40000400
 800b754:	50000400 	.word	0x50000400
 800b758:	40000800 	.word	0x40000800
 800b75c:	50000800 	.word	0x50000800
 800b760:	40000c00 	.word	0x40000c00
 800b764:	50000c00 	.word	0x50000c00
 800b768:	40013400 	.word	0x40013400
 800b76c:	50013400 	.word	0x50013400
 800b770:	40014000 	.word	0x40014000
 800b774:	50014000 	.word	0x50014000

0800b778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b778:	b480      	push	{r7}
 800b77a:	b087      	sub	sp, #28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	f023 0201 	bic.w	r2, r3, #1
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	011b      	lsls	r3, r3, #4
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f023 030a 	bic.w	r3, r3, #10
 800b7b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	621a      	str	r2, [r3, #32]
}
 800b7ca:	bf00      	nop
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b087      	sub	sp, #28
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	60b9      	str	r1, [r7, #8]
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	f023 0210 	bic.w	r2, r3, #16
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	021b      	lsls	r3, r3, #8
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	031b      	lsls	r3, r3, #12
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4313      	orrs	r3, r2
 800b820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b828:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	011b      	lsls	r3, r3, #4
 800b82e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	4313      	orrs	r3, r2
 800b836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	621a      	str	r2, [r3, #32]
}
 800b844:	bf00      	nop
 800b846:	371c      	adds	r7, #28
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	f023 0210 	bic.w	r2, r3, #16
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b87a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	031b      	lsls	r3, r3, #12
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	4313      	orrs	r3, r2
 800b884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b88c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	011b      	lsls	r3, r3, #4
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	4313      	orrs	r3, r2
 800b896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	621a      	str	r2, [r3, #32]
}
 800b8a4:	bf00      	nop
 800b8a6:	371c      	adds	r7, #28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6a1b      	ldr	r3, [r3, #32]
 800b8c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	f023 0303 	bic.w	r3, r3, #3
 800b8dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	011b      	lsls	r3, r3, #4
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800b900:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	021b      	lsls	r3, r3, #8
 800b906:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	621a      	str	r2, [r3, #32]
}
 800b91c:	bf00      	nop
 800b91e:	371c      	adds	r7, #28
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b928:	b480      	push	{r7}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
 800b934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6a1b      	ldr	r3, [r3, #32]
 800b940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	69db      	ldr	r3, [r3, #28]
 800b94c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b954:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b966:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	031b      	lsls	r3, r3, #12
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	4313      	orrs	r3, r2
 800b972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800b97a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	031b      	lsls	r3, r3, #12
 800b980:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	4313      	orrs	r3, r2
 800b988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	621a      	str	r2, [r3, #32]
}
 800b996:	bf00      	nop
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b085      	sub	sp, #20
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b9b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	f043 0307 	orr.w	r3, r3, #7
 800b9c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	609a      	str	r2, [r3, #8]
}
 800b9d0:	bf00      	nop
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	021a      	lsls	r2, r3, #8
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	609a      	str	r2, [r3, #8]
}
 800ba10:	bf00      	nop
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f003 031f 	and.w	r3, r3, #31
 800ba2e:	2201      	movs	r2, #1
 800ba30:	fa02 f303 	lsl.w	r3, r2, r3
 800ba34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6a1a      	ldr	r2, [r3, #32]
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	43db      	mvns	r3, r3
 800ba3e:	401a      	ands	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6a1a      	ldr	r2, [r3, #32]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f003 031f 	and.w	r3, r3, #31
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	fa01 f303 	lsl.w	r3, r1, r3
 800ba54:	431a      	orrs	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	621a      	str	r2, [r3, #32]
}
 800ba5a:	bf00      	nop
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
	...

0800ba68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e097      	b.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a45      	ldr	r2, [pc, #276]	@ (800bbbc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d00e      	beq.n	800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a44      	ldr	r2, [pc, #272]	@ (800bbc0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d009      	beq.n	800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a42      	ldr	r2, [pc, #264]	@ (800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d004      	beq.n	800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a41      	ldr	r2, [pc, #260]	@ (800bbc8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d108      	bne.n	800bada <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bace:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	4313      	orrs	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a2f      	ldr	r2, [pc, #188]	@ (800bbbc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d040      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a2e      	ldr	r2, [pc, #184]	@ (800bbc0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d03b      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb14:	d036      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb1e:	d031      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a29      	ldr	r2, [pc, #164]	@ (800bbcc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d02c      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a28      	ldr	r2, [pc, #160]	@ (800bbd0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d027      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a26      	ldr	r2, [pc, #152]	@ (800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d022      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a25      	ldr	r2, [pc, #148]	@ (800bbd8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d01d      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a23      	ldr	r2, [pc, #140]	@ (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d018      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a22      	ldr	r2, [pc, #136]	@ (800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d013      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a18      	ldr	r2, [pc, #96]	@ (800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d00e      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a17      	ldr	r2, [pc, #92]	@ (800bbc8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d009      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d004      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a1a      	ldr	r2, [pc, #104]	@ (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d10c      	bne.n	800bb9e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	40012c00 	.word	0x40012c00
 800bbc0:	50012c00 	.word	0x50012c00
 800bbc4:	40013400 	.word	0x40013400
 800bbc8:	50013400 	.word	0x50013400
 800bbcc:	40000400 	.word	0x40000400
 800bbd0:	50000400 	.word	0x50000400
 800bbd4:	40000800 	.word	0x40000800
 800bbd8:	50000800 	.word	0x50000800
 800bbdc:	40000c00 	.word	0x40000c00
 800bbe0:	50000c00 	.word	0x50000c00
 800bbe4:	40014000 	.word	0x40014000
 800bbe8:	50014000 	.word	0x50014000

0800bbec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e042      	b.n	800bc84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d106      	bne.n	800bc16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7f6 ff09 	bl	8002a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2224      	movs	r2, #36	@ 0x24
 800bc1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f022 0201 	bic.w	r2, r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d002      	beq.n	800bc3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f9c0 	bl	800bfbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f825 	bl	800bc8c <UART_SetConfig>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d101      	bne.n	800bc4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e01b      	b.n	800bc84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689a      	ldr	r2, [r3, #8]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f042 0201 	orr.w	r2, r2, #1
 800bc7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fa3f 	bl	800c100 <UART_CheckIdleState>
 800bc82:	4603      	mov	r3, r0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc90:	b094      	sub	sp, #80	@ 0x50
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	4b9b      	ldr	r3, [pc, #620]	@ (800bf10 <UART_SetConfig+0x284>)
 800bca2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	431a      	orrs	r2, r3
 800bcae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	431a      	orrs	r2, r3
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4994      	ldr	r1, [pc, #592]	@ (800bf14 <UART_SetConfig+0x288>)
 800bcc4:	4019      	ands	r1, r3
 800bcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bccc:	430b      	orrs	r3, r1
 800bcce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcdc:	68d9      	ldr	r1, [r3, #12]
 800bcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	ea40 0301 	orr.w	r3, r0, r1
 800bce6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	4b87      	ldr	r3, [pc, #540]	@ (800bf10 <UART_SetConfig+0x284>)
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d009      	beq.n	800bd0c <UART_SetConfig+0x80>
 800bcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	4b86      	ldr	r3, [pc, #536]	@ (800bf18 <UART_SetConfig+0x28c>)
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d004      	beq.n	800bd0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	6a1a      	ldr	r2, [r3, #32]
 800bd06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bd16:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd20:	430b      	orrs	r3, r1
 800bd22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2a:	f023 000f 	bic.w	r0, r3, #15
 800bd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	ea40 0301 	orr.w	r3, r0, r1
 800bd3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	4b76      	ldr	r3, [pc, #472]	@ (800bf1c <UART_SetConfig+0x290>)
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d102      	bne.n	800bd4c <UART_SetConfig+0xc0>
 800bd46:	2301      	movs	r3, #1
 800bd48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd4a:	e021      	b.n	800bd90 <UART_SetConfig+0x104>
 800bd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	4b73      	ldr	r3, [pc, #460]	@ (800bf20 <UART_SetConfig+0x294>)
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d102      	bne.n	800bd5c <UART_SetConfig+0xd0>
 800bd56:	2304      	movs	r3, #4
 800bd58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd5a:	e019      	b.n	800bd90 <UART_SetConfig+0x104>
 800bd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	4b70      	ldr	r3, [pc, #448]	@ (800bf24 <UART_SetConfig+0x298>)
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d102      	bne.n	800bd6c <UART_SetConfig+0xe0>
 800bd66:	2308      	movs	r3, #8
 800bd68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd6a:	e011      	b.n	800bd90 <UART_SetConfig+0x104>
 800bd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	4b6d      	ldr	r3, [pc, #436]	@ (800bf28 <UART_SetConfig+0x29c>)
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d102      	bne.n	800bd7c <UART_SetConfig+0xf0>
 800bd76:	2310      	movs	r3, #16
 800bd78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd7a:	e009      	b.n	800bd90 <UART_SetConfig+0x104>
 800bd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	4b63      	ldr	r3, [pc, #396]	@ (800bf10 <UART_SetConfig+0x284>)
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d102      	bne.n	800bd8c <UART_SetConfig+0x100>
 800bd86:	2320      	movs	r3, #32
 800bd88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd8a:	e001      	b.n	800bd90 <UART_SetConfig+0x104>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	4b5e      	ldr	r3, [pc, #376]	@ (800bf10 <UART_SetConfig+0x284>)
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d004      	beq.n	800bda4 <UART_SetConfig+0x118>
 800bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	4b5e      	ldr	r3, [pc, #376]	@ (800bf18 <UART_SetConfig+0x28c>)
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d172      	bne.n	800be8a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bda4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bda6:	2200      	movs	r2, #0
 800bda8:	623b      	str	r3, [r7, #32]
 800bdaa:	627a      	str	r2, [r7, #36]	@ 0x24
 800bdac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bdb0:	f7fd f996 	bl	80090e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800bdb4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bdb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 80e7 	beq.w	800bf8c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc2:	4a5a      	ldr	r2, [pc, #360]	@ (800bf2c <UART_SetConfig+0x2a0>)
 800bdc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdd0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd4:	685a      	ldr	r2, [r3, #4]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d305      	bcc.n	800bdee <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bde8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d903      	bls.n	800bdf6 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bdf4:	e048      	b.n	800be88 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	61bb      	str	r3, [r7, #24]
 800bdfc:	61fa      	str	r2, [r7, #28]
 800bdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be02:	4a4a      	ldr	r2, [pc, #296]	@ (800bf2c <UART_SetConfig+0x2a0>)
 800be04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2200      	movs	r2, #0
 800be0c:	613b      	str	r3, [r7, #16]
 800be0e:	617a      	str	r2, [r7, #20]
 800be10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800be18:	f7f4 ff3a 	bl	8000c90 <__aeabi_uldivmod>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4610      	mov	r0, r2
 800be22:	4619      	mov	r1, r3
 800be24:	f04f 0200 	mov.w	r2, #0
 800be28:	f04f 0300 	mov.w	r3, #0
 800be2c:	020b      	lsls	r3, r1, #8
 800be2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be32:	0202      	lsls	r2, r0, #8
 800be34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be36:	6849      	ldr	r1, [r1, #4]
 800be38:	0849      	lsrs	r1, r1, #1
 800be3a:	2000      	movs	r0, #0
 800be3c:	460c      	mov	r4, r1
 800be3e:	4605      	mov	r5, r0
 800be40:	eb12 0804 	adds.w	r8, r2, r4
 800be44:	eb43 0905 	adc.w	r9, r3, r5
 800be48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	60bb      	str	r3, [r7, #8]
 800be50:	60fa      	str	r2, [r7, #12]
 800be52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be56:	4640      	mov	r0, r8
 800be58:	4649      	mov	r1, r9
 800be5a:	f7f4 ff19 	bl	8000c90 <__aeabi_uldivmod>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4613      	mov	r3, r2
 800be64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be6c:	d308      	bcc.n	800be80 <UART_SetConfig+0x1f4>
 800be6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be74:	d204      	bcs.n	800be80 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be7c:	60da      	str	r2, [r3, #12]
 800be7e:	e003      	b.n	800be88 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800be86:	e081      	b.n	800bf8c <UART_SetConfig+0x300>
 800be88:	e080      	b.n	800bf8c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be92:	d14d      	bne.n	800bf30 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800be94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be96:	2200      	movs	r2, #0
 800be98:	603b      	str	r3, [r7, #0]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bea0:	f7fd f91e 	bl	80090e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800bea4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d06f      	beq.n	800bf8c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb0:	4a1e      	ldr	r2, [pc, #120]	@ (800bf2c <UART_SetConfig+0x2a0>)
 800beb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beb6:	461a      	mov	r2, r3
 800beb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beba:	fbb3 f3f2 	udiv	r3, r3, r2
 800bebe:	005a      	lsls	r2, r3, #1
 800bec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	085b      	lsrs	r3, r3, #1
 800bec6:	441a      	add	r2, r3
 800bec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed4:	2b0f      	cmp	r3, #15
 800bed6:	d916      	bls.n	800bf06 <UART_SetConfig+0x27a>
 800bed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bede:	d212      	bcs.n	800bf06 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f023 030f 	bic.w	r3, r3, #15
 800bee8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800beea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beec:	085b      	lsrs	r3, r3, #1
 800beee:	b29b      	uxth	r3, r3
 800bef0:	f003 0307 	and.w	r3, r3, #7
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bef8:	4313      	orrs	r3, r2
 800befa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800befc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bf02:	60da      	str	r2, [r3, #12]
 800bf04:	e042      	b.n	800bf8c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf0c:	e03e      	b.n	800bf8c <UART_SetConfig+0x300>
 800bf0e:	bf00      	nop
 800bf10:	46002400 	.word	0x46002400
 800bf14:	cfff69f3 	.word	0xcfff69f3
 800bf18:	56002400 	.word	0x56002400
 800bf1c:	40013800 	.word	0x40013800
 800bf20:	40004800 	.word	0x40004800
 800bf24:	40004c00 	.word	0x40004c00
 800bf28:	40005000 	.word	0x40005000
 800bf2c:	080153b8 	.word	0x080153b8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bf30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf32:	2200      	movs	r2, #0
 800bf34:	469a      	mov	sl, r3
 800bf36:	4693      	mov	fp, r2
 800bf38:	4650      	mov	r0, sl
 800bf3a:	4659      	mov	r1, fp
 800bf3c:	f7fd f8d0 	bl	80090e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf40:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bf42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d021      	beq.n	800bf8c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf4c:	4a1a      	ldr	r2, [pc, #104]	@ (800bfb8 <UART_SetConfig+0x32c>)
 800bf4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf52:	461a      	mov	r2, r3
 800bf54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf56:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	441a      	add	r2, r3
 800bf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf6e:	2b0f      	cmp	r3, #15
 800bf70:	d909      	bls.n	800bf86 <UART_SetConfig+0x2fa>
 800bf72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf78:	d205      	bcs.n	800bf86 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60da      	str	r2, [r3, #12]
 800bf84:	e002      	b.n	800bf8c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bf94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf96:	2201      	movs	r2, #1
 800bf98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bfa8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3750      	adds	r7, #80	@ 0x50
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfb6:	bf00      	nop
 800bfb8:	080153b8 	.word	0x080153b8

0800bfbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc8:	f003 0308 	and.w	r3, r3, #8
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00a      	beq.n	800bfe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00a      	beq.n	800c008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	430a      	orrs	r2, r1
 800c006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c00c:	f003 0302 	and.w	r3, r3, #2
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00a      	beq.n	800c02a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	430a      	orrs	r2, r1
 800c028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c02e:	f003 0304 	and.w	r3, r3, #4
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00a      	beq.n	800c04c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	430a      	orrs	r2, r1
 800c04a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c050:	f003 0310 	and.w	r3, r3, #16
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00a      	beq.n	800c06e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c072:	f003 0320 	and.w	r3, r3, #32
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	430a      	orrs	r2, r1
 800c08e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d01a      	beq.n	800c0d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0ba:	d10a      	bne.n	800c0d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00a      	beq.n	800c0f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	430a      	orrs	r2, r1
 800c0f2:	605a      	str	r2, [r3, #4]
  }
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b098      	sub	sp, #96	@ 0x60
 800c104:	af02      	add	r7, sp, #8
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c110:	f7f6 ff94 	bl	800303c <HAL_GetTick>
 800c114:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f003 0308 	and.w	r3, r3, #8
 800c120:	2b08      	cmp	r3, #8
 800c122:	d12f      	bne.n	800c184 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c12c:	2200      	movs	r2, #0
 800c12e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f88e 	bl	800c254 <UART_WaitOnFlagUntilTimeout>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d022      	beq.n	800c184 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c146:	e853 3f00 	ldrex	r3, [r3]
 800c14a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c14e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c152:	653b      	str	r3, [r7, #80]	@ 0x50
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	461a      	mov	r2, r3
 800c15a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c15c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c15e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c164:	e841 2300 	strex	r3, r2, [r1]
 800c168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e6      	bne.n	800c13e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2220      	movs	r2, #32
 800c174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	e063      	b.n	800c24c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 0304 	and.w	r3, r3, #4
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d149      	bne.n	800c226 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c192:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c19a:	2200      	movs	r2, #0
 800c19c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f857 	bl	800c254 <UART_WaitOnFlagUntilTimeout>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d03c      	beq.n	800c226 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1d2:	e841 2300 	strex	r3, r2, [r1]
 800c1d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e6      	bne.n	800c1ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	e853 3f00 	ldrex	r3, [r3]
 800c1ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f023 0301 	bic.w	r3, r3, #1
 800c1f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1fe:	61fa      	str	r2, [r7, #28]
 800c200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	69b9      	ldr	r1, [r7, #24]
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	617b      	str	r3, [r7, #20]
   return(result);
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e5      	bne.n	800c1de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2220      	movs	r2, #32
 800c216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c222:	2303      	movs	r3, #3
 800c224:	e012      	b.n	800c24c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2220      	movs	r2, #32
 800c22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2220      	movs	r2, #32
 800c232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3758      	adds	r7, #88	@ 0x58
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	603b      	str	r3, [r7, #0]
 800c260:	4613      	mov	r3, r2
 800c262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c264:	e04f      	b.n	800c306 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26c:	d04b      	beq.n	800c306 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c26e:	f7f6 fee5 	bl	800303c <HAL_GetTick>
 800c272:	4602      	mov	r2, r0
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d302      	bcc.n	800c284 <UART_WaitOnFlagUntilTimeout+0x30>
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e04e      	b.n	800c326 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0304 	and.w	r3, r3, #4
 800c292:	2b00      	cmp	r3, #0
 800c294:	d037      	beq.n	800c306 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b80      	cmp	r3, #128	@ 0x80
 800c29a:	d034      	beq.n	800c306 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2b40      	cmp	r3, #64	@ 0x40
 800c2a0:	d031      	beq.n	800c306 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	69db      	ldr	r3, [r3, #28]
 800c2a8:	f003 0308 	and.w	r3, r3, #8
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d110      	bne.n	800c2d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2208      	movs	r2, #8
 800c2b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f000 f838 	bl	800c32e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e029      	b.n	800c326 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2e0:	d111      	bne.n	800c306 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 f81e 	bl	800c32e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2220      	movs	r2, #32
 800c2f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e00f      	b.n	800c326 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	69da      	ldr	r2, [r3, #28]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	4013      	ands	r3, r2
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	429a      	cmp	r2, r3
 800c314:	bf0c      	ite	eq
 800c316:	2301      	moveq	r3, #1
 800c318:	2300      	movne	r3, #0
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	461a      	mov	r2, r3
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	429a      	cmp	r2, r3
 800c322:	d0a0      	beq.n	800c266 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c32e:	b480      	push	{r7}
 800c330:	b095      	sub	sp, #84	@ 0x54
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c33e:	e853 3f00 	ldrex	r3, [r3]
 800c342:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c346:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c34a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	461a      	mov	r2, r3
 800c352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c354:	643b      	str	r3, [r7, #64]	@ 0x40
 800c356:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c358:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c35a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c35c:	e841 2300 	strex	r3, r2, [r1]
 800c360:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1e6      	bne.n	800c336 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3308      	adds	r3, #8
 800c36e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c370:	6a3b      	ldr	r3, [r7, #32]
 800c372:	e853 3f00 	ldrex	r3, [r3]
 800c376:	61fb      	str	r3, [r7, #28]
   return(result);
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c37e:	f023 0301 	bic.w	r3, r3, #1
 800c382:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3308      	adds	r3, #8
 800c38a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c38c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c38e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c394:	e841 2300 	strex	r3, r2, [r1]
 800c398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e3      	bne.n	800c368 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d118      	bne.n	800c3da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	f023 0310 	bic.w	r3, r3, #16
 800c3bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3c6:	61bb      	str	r3, [r7, #24]
 800c3c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	6979      	ldr	r1, [r7, #20]
 800c3cc:	69ba      	ldr	r2, [r7, #24]
 800c3ce:	e841 2300 	strex	r3, r2, [r1]
 800c3d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1e6      	bne.n	800c3a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2220      	movs	r2, #32
 800c3de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c3ee:	bf00      	nop
 800c3f0:	3754      	adds	r7, #84	@ 0x54
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b085      	sub	sp, #20
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d101      	bne.n	800c410 <HAL_UARTEx_DisableFifoMode+0x16>
 800c40c:	2302      	movs	r3, #2
 800c40e:	e027      	b.n	800c460 <HAL_UARTEx_DisableFifoMode+0x66>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2224      	movs	r2, #36	@ 0x24
 800c41c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f022 0201 	bic.w	r2, r2, #1
 800c436:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c43e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2220      	movs	r2, #32
 800c452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3714      	adds	r7, #20
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d101      	bne.n	800c484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c480:	2302      	movs	r3, #2
 800c482:	e02d      	b.n	800c4e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2224      	movs	r2, #36	@ 0x24
 800c490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f022 0201 	bic.w	r2, r2, #1
 800c4aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 f84f 	bl	800c564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d101      	bne.n	800c500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	e02d      	b.n	800c55c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2224      	movs	r2, #36	@ 0x24
 800c50c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f022 0201 	bic.w	r2, r2, #1
 800c526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f811 	bl	800c564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2220      	movs	r2, #32
 800c54e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c570:	2b00      	cmp	r3, #0
 800c572:	d108      	bne.n	800c586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c584:	e031      	b.n	800c5ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c586:	2308      	movs	r3, #8
 800c588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c58a:	2308      	movs	r3, #8
 800c58c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	0e5b      	lsrs	r3, r3, #25
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0307 	and.w	r3, r3, #7
 800c59c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	0f5b      	lsrs	r3, r3, #29
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
 800c5b0:	7b3a      	ldrb	r2, [r7, #12]
 800c5b2:	4911      	ldr	r1, [pc, #68]	@ (800c5f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c5b4:	5c8a      	ldrb	r2, [r1, r2]
 800c5b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c5ba:	7b3a      	ldrb	r2, [r7, #12]
 800c5bc:	490f      	ldr	r1, [pc, #60]	@ (800c5fc <UARTEx_SetNbDataToProcess+0x98>)
 800c5be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c5c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	7b7a      	ldrb	r2, [r7, #13]
 800c5d0:	4909      	ldr	r1, [pc, #36]	@ (800c5f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c5d2:	5c8a      	ldrb	r2, [r1, r2]
 800c5d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c5d8:	7b7a      	ldrb	r2, [r7, #13]
 800c5da:	4908      	ldr	r1, [pc, #32]	@ (800c5fc <UARTEx_SetNbDataToProcess+0x98>)
 800c5dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c5de:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c5ea:	bf00      	nop
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	080153d0 	.word	0x080153d0
 800c5fc:	080153d8 	.word	0x080153d8

0800c600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c60c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c618:	f043 0201 	orr.w	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c62e:	b084      	sub	sp, #16
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	f107 001c 	add.w	r0, r7, #28
 800c63c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e008      	b.n	800c65c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff ffd8 	bl	800c600 <USB_CoreReset>
 800c650:	4603      	mov	r3, r0
 800c652:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c666:	b004      	add	sp, #16
 800c668:	4770      	bx	lr

0800c66a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c66a:	b480      	push	{r7}
 800c66c:	b085      	sub	sp, #20
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c678:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c67c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c69a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c69e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	43db      	mvns	r3, r3
 800c6a8:	401a      	ands	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800c6c8:	78fb      	ldrb	r3, [r7, #3]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	641a      	str	r2, [r3, #64]	@ 0x40
 800c6da:	e00b      	b.n	800c6f4 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800c6dc:	78fb      	ldrb	r3, [r7, #3]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d106      	bne.n	800c6f0 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	641a      	str	r2, [r3, #64]	@ 0x40
 800c6ee:	e001      	b.n	800c6f4 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e000      	b.n	800c6f6 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c702:	b084      	sub	sp, #16
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	f107 001c 	add.w	r0, r7, #28
 800c710:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c71e:	f023 0201 	bic.w	r2, r3, #1
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c726:	2100      	movs	r1, #0
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff ffc7 	bl	800c6bc <USB_SetCurrentMode>
 800c72e:	4603      	mov	r3, r0
 800c730:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c738:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c744:	b004      	add	sp, #16
 800c746:	4770      	bx	lr

0800c748 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c748:	b480      	push	{r7}
 800c74a:	b0a1      	sub	sp, #132	@ 0x84
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	4ba0      	ldr	r3, [pc, #640]	@ (800c9e8 <USB_ActivateEndpoint+0x2a0>)
 800c766:	4013      	ands	r3, r2
 800c768:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* initialize Endpoint */
  switch (ep->type)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	78db      	ldrb	r3, [r3, #3]
 800c76e:	2b03      	cmp	r3, #3
 800c770:	d819      	bhi.n	800c7a6 <USB_ActivateEndpoint+0x5e>
 800c772:	a201      	add	r2, pc, #4	@ (adr r2, 800c778 <USB_ActivateEndpoint+0x30>)
 800c774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c778:	0800c789 	.word	0x0800c789
 800c77c:	0800c79d 	.word	0x0800c79d
 800c780:	0800c7af 	.word	0x0800c7af
 800c784:	0800c793 	.word	0x0800c793
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c78a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c78e:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800c790:	e00e      	b.n	800c7b0 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c794:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c798:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800c79a:	e009      	b.n	800c7b0 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c79c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c79e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c7a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800c7a4:	e004      	b.n	800c7b0 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800c7ac:	e000      	b.n	800c7b0 <USB_ActivateEndpoint+0x68>
      break;
 800c7ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	441a      	add	r2, r3
 800c7ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7c4:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	4b86      	ldr	r3, [pc, #536]	@ (800c9ec <USB_ActivateEndpoint+0x2a4>)
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	7812      	ldrb	r2, [r2, #0]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	441a      	add	r2, r3
 800c7e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7f2:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	7b1b      	ldrb	r3, [r3, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f040 8177 	bne.w	800caec <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d079      	beq.n	800c8fa <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c810:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c820:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c824:	0c12      	lsrs	r2, r2, #16
 800c826:	0412      	lsls	r2, r2, #16
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c834:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c838:	6819      	ldr	r1, [r3, #0]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	88db      	ldrh	r3, [r3, #6]
 800c83e:	089b      	lsrs	r3, r3, #2
 800c840:	b29b      	uxth	r3, r3
 800c842:	009a      	lsls	r2, r3, #2
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c84e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c852:	430a      	orrs	r2, r1
 800c854:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	61bb      	str	r3, [r7, #24]
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d013      	beq.n	800c896 <USB_ActivateEndpoint+0x14e>
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	4b5c      	ldr	r3, [pc, #368]	@ (800c9ec <USB_ActivateEndpoint+0x2a4>)
 800c87c:	4013      	ands	r3, r2
 800c87e:	617b      	str	r3, [r7, #20]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	441a      	add	r2, r3
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c890:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c894:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	78db      	ldrb	r3, [r3, #3]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d018      	beq.n	800c8d0 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	4b51      	ldr	r3, [pc, #324]	@ (800c9f0 <USB_ActivateEndpoint+0x2a8>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f083 0320 	eor.w	r3, r3, #32
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	441a      	add	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	e3c8      	b.n	800d062 <USB_ActivateEndpoint+0x91a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	4b44      	ldr	r3, [pc, #272]	@ (800c9f0 <USB_ActivateEndpoint+0x2a8>)
 800c8de:	4013      	ands	r3, r2
 800c8e0:	613b      	str	r3, [r7, #16]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	441a      	add	r2, r3
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	e3b3      	b.n	800d062 <USB_ActivateEndpoint+0x91a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c904:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c908:	685a      	ldr	r2, [r3, #4]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c918:	0c12      	lsrs	r2, r2, #16
 800c91a:	0412      	lsls	r2, r2, #16
 800c91c:	605a      	str	r2, [r3, #4]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c928:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c92c:	6859      	ldr	r1, [r3, #4]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	88db      	ldrh	r3, [r3, #6]
 800c932:	089b      	lsrs	r3, r3, #2
 800c934:	b29b      	uxth	r3, r3
 800c936:	009a      	lsls	r2, r3, #2
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c946:	430a      	orrs	r2, r1
 800c948:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c954:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c964:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c968:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c96c:	605a      	str	r2, [r3, #4]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d112      	bne.n	800c99c <USB_ActivateEndpoint+0x254>
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c980:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c990:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c994:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c998:	605a      	str	r2, [r3, #4]
 800c99a:	e04d      	b.n	800ca38 <USB_ActivateEndpoint+0x2f0>
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9a2:	d827      	bhi.n	800c9f4 <USB_ActivateEndpoint+0x2ac>
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	085b      	lsrs	r3, r3, #1
 800c9aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <USB_ActivateEndpoint+0x276>
 800c9b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9cc:	6859      	ldr	r1, [r3, #4]
 800c9ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9d0:	069a      	lsls	r2, r3, #26
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	605a      	str	r2, [r3, #4]
 800c9e4:	e028      	b.n	800ca38 <USB_ActivateEndpoint+0x2f0>
 800c9e6:	bf00      	nop
 800c9e8:	07ff898f 	.word	0x07ff898f
 800c9ec:	07ff8f8f 	.word	0x07ff8f8f
 800c9f0:	07ff8fbf 	.word	0x07ff8fbf
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	095b      	lsrs	r3, r3, #5
 800c9fa:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	f003 031f 	and.w	r3, r3, #31
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <USB_ActivateEndpoint+0x2c6>
 800ca08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	677b      	str	r3, [r7, #116]	@ 0x74
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	00db      	lsls	r3, r3, #3
 800ca14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca20:	069b      	lsls	r3, r3, #26
 800ca22:	431a      	orrs	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca32:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca36:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d013      	beq.n	800ca78 <USB_ActivateEndpoint+0x330>
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	4b9b      	ldr	r3, [pc, #620]	@ (800cccc <USB_ActivateEndpoint+0x584>)
 800ca5e:	4013      	ands	r3, r2
 800ca60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	441a      	add	r2, r3
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca76:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d11c      	bne.n	800caba <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4413      	add	r3, r2
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	4b90      	ldr	r3, [pc, #576]	@ (800ccd0 <USB_ActivateEndpoint+0x588>)
 800ca8e:	4013      	ands	r3, r2
 800ca90:	61fb      	str	r3, [r7, #28]
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ca98:	61fb      	str	r3, [r7, #28]
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800caa0:	61fb      	str	r3, [r7, #28]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	441a      	add	r2, r3
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	e2d3      	b.n	800d062 <USB_ActivateEndpoint+0x91a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	4b82      	ldr	r3, [pc, #520]	@ (800ccd0 <USB_ActivateEndpoint+0x588>)
 800cac8:	4013      	ands	r3, r2
 800caca:	623b      	str	r3, [r7, #32]
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cad2:	623b      	str	r3, [r7, #32]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	441a      	add	r2, r3
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	e2ba      	b.n	800d062 <USB_ActivateEndpoint+0x91a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	78db      	ldrb	r3, [r3, #3]
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d114      	bne.n	800cb1e <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	4b72      	ldr	r3, [pc, #456]	@ (800cccc <USB_ActivateEndpoint+0x584>)
 800cb02:	4013      	ands	r3, r2
 800cb04:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	441a      	add	r2, r3
 800cb10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cb16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	e013      	b.n	800cb46 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	4b6a      	ldr	r3, [pc, #424]	@ (800ccd4 <USB_ActivateEndpoint+0x58c>)
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	441a      	add	r2, r3
 800cb3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb44:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	00db      	lsls	r3, r3, #3
 800cb5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb64:	0c12      	lsrs	r2, r2, #16
 800cb66:	0412      	lsls	r2, r2, #16
 800cb68:	601a      	str	r2, [r3, #0]
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb78:	6819      	ldr	r1, [r3, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	891b      	ldrh	r3, [r3, #8]
 800cb7e:	089b      	lsrs	r3, r3, #2
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	009a      	lsls	r2, r3, #2
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb92:	430a      	orrs	r2, r1
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cba0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba4:	685a      	ldr	r2, [r3, #4]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbb4:	0c12      	lsrs	r2, r2, #16
 800cbb6:	0412      	lsls	r2, r2, #16
 800cbb8:	605a      	str	r2, [r3, #4]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbc8:	6859      	ldr	r1, [r3, #4]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	895b      	ldrh	r3, [r3, #10]
 800cbce:	089b      	lsrs	r3, r3, #2
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	009a      	lsls	r2, r3, #2
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f040 81b4 	bne.w	800cf58 <USB_ActivateEndpoint+0x810>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d013      	beq.n	800cc30 <USB_ActivateEndpoint+0x4e8>
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	4b2d      	ldr	r3, [pc, #180]	@ (800cccc <USB_ActivateEndpoint+0x584>)
 800cc16:	4013      	ands	r3, r2
 800cc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	441a      	add	r2, r3
 800cc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc2e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d013      	beq.n	800cc70 <USB_ActivateEndpoint+0x528>
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	4b1d      	ldr	r3, [pc, #116]	@ (800cccc <USB_ActivateEndpoint+0x584>)
 800cc56:	4013      	ands	r3, r2
 800cc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	441a      	add	r2, r3
 800cc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc6e:	6013      	str	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	785b      	ldrb	r3, [r3, #1]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d177      	bne.n	800cd68 <USB_ActivateEndpoint+0x620>
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc96:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cc9a:	601a      	str	r2, [r3, #0]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d119      	bne.n	800ccd8 <USB_ActivateEndpoint+0x590>
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	e077      	b.n	800cdba <USB_ActivateEndpoint+0x672>
 800ccca:	bf00      	nop
 800cccc:	07ff8f8f 	.word	0x07ff8f8f
 800ccd0:	07ffbf8f 	.word	0x07ffbf8f
 800ccd4:	07ff8e8f 	.word	0x07ff8e8f
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccde:	d820      	bhi.n	800cd22 <USB_ActivateEndpoint+0x5da>
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	085b      	lsrs	r3, r3, #1
 800cce6:	673b      	str	r3, [r7, #112]	@ 0x70
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d002      	beq.n	800ccfa <USB_ActivateEndpoint+0x5b2>
 800ccf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	673b      	str	r3, [r7, #112]	@ 0x70
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd08:	6819      	ldr	r1, [r3, #0]
 800cd0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd0c:	069a      	lsls	r2, r3, #26
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd1c:	430a      	orrs	r2, r1
 800cd1e:	601a      	str	r2, [r3, #0]
 800cd20:	e04b      	b.n	800cdba <USB_ActivateEndpoint+0x672>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	095b      	lsrs	r3, r3, #5
 800cd28:	673b      	str	r3, [r7, #112]	@ 0x70
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	f003 031f 	and.w	r3, r3, #31
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d102      	bne.n	800cd3c <USB_ActivateEndpoint+0x5f4>
 800cd36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	673b      	str	r3, [r7, #112]	@ 0x70
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd4e:	069b      	lsls	r3, r3, #26
 800cd50:	431a      	orrs	r2, r3
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	00db      	lsls	r3, r3, #3
 800cd58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd64:	601a      	str	r2, [r3, #0]
 800cd66:	e028      	b.n	800cdba <USB_ActivateEndpoint+0x672>
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	785b      	ldrb	r3, [r3, #1]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d124      	bne.n	800cdba <USB_ActivateEndpoint+0x672>
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd8e:	b292      	uxth	r2, r2
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cda0:	6819      	ldr	r1, [r3, #0]
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	041a      	lsls	r2, r3, #16
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	785b      	ldrb	r3, [r3, #1]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d170      	bne.n	800cea4 <USB_ActivateEndpoint+0x75c>
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cddc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cde0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cde4:	605a      	str	r2, [r3, #4]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d112      	bne.n	800ce14 <USB_ActivateEndpoint+0x6cc>
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	00db      	lsls	r3, r3, #3
 800ce04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce0c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	e070      	b.n	800cef6 <USB_ActivateEndpoint+0x7ae>
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce1a:	d820      	bhi.n	800ce5e <USB_ActivateEndpoint+0x716>
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	085b      	lsrs	r3, r3, #1
 800ce22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	691b      	ldr	r3, [r3, #16]
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <USB_ActivateEndpoint+0x6ee>
 800ce30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce32:	3301      	adds	r3, #1
 800ce34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce44:	6859      	ldr	r1, [r3, #4]
 800ce46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce48:	069a      	lsls	r2, r3, #26
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	605a      	str	r2, [r3, #4]
 800ce5c:	e04b      	b.n	800cef6 <USB_ActivateEndpoint+0x7ae>
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	095b      	lsrs	r3, r3, #5
 800ce64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	f003 031f 	and.w	r3, r3, #31
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d102      	bne.n	800ce78 <USB_ActivateEndpoint+0x730>
 800ce72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce74:	3b01      	subs	r3, #1
 800ce76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce8a:	069b      	lsls	r3, r3, #26
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cea0:	605a      	str	r2, [r3, #4]
 800cea2:	e028      	b.n	800cef6 <USB_ActivateEndpoint+0x7ae>
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	785b      	ldrb	r3, [r3, #1]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d124      	bne.n	800cef6 <USB_ActivateEndpoint+0x7ae>
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	00db      	lsls	r3, r3, #3
 800ceb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	00db      	lsls	r3, r3, #3
 800cec2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cec6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceca:	b292      	uxth	r2, r2
 800cecc:	605a      	str	r2, [r3, #4]
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	00db      	lsls	r3, r3, #3
 800ced4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ced8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cedc:	6859      	ldr	r1, [r3, #4]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	691b      	ldr	r3, [r3, #16]
 800cee2:	041a      	lsls	r2, r3, #16
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cef2:	430a      	orrs	r2, r1
 800cef4:	605a      	str	r2, [r3, #4]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	4b5c      	ldr	r3, [pc, #368]	@ (800d074 <USB_ActivateEndpoint+0x92c>)
 800cf04:	4013      	ands	r3, r2
 800cf06:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cf0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cf16:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	441a      	add	r2, r3
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf2c:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	4413      	add	r3, r2
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	4b4f      	ldr	r3, [pc, #316]	@ (800d078 <USB_ActivateEndpoint+0x930>)
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	441a      	add	r2, r3
 800cf4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	e084      	b.n	800d062 <USB_ActivateEndpoint+0x91a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d013      	beq.n	800cf98 <USB_ActivateEndpoint+0x850>
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4413      	add	r3, r2
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	4b3f      	ldr	r3, [pc, #252]	@ (800d07c <USB_ActivateEndpoint+0x934>)
 800cf7e:	4013      	ands	r3, r2
 800cf80:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	441a      	add	r2, r3
 800cf8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf96:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	657b      	str	r3, [r7, #84]	@ 0x54
 800cfa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d013      	beq.n	800cfd8 <USB_ActivateEndpoint+0x890>
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	4b2f      	ldr	r3, [pc, #188]	@ (800d07c <USB_ActivateEndpoint+0x934>)
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	441a      	add	r2, r3
 800cfcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cfd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	78db      	ldrb	r3, [r3, #3]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d018      	beq.n	800d012 <USB_ActivateEndpoint+0x8ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	4413      	add	r3, r2
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	4b22      	ldr	r3, [pc, #136]	@ (800d078 <USB_ActivateEndpoint+0x930>)
 800cfee:	4013      	ands	r3, r2
 800cff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cff4:	f083 0320 	eor.w	r3, r3, #32
 800cff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	441a      	add	r2, r3
 800d004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d00a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	e013      	b.n	800d03a <USB_ActivateEndpoint+0x8f2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b16      	ldr	r3, [pc, #88]	@ (800d078 <USB_ActivateEndpoint+0x930>)
 800d020:	4013      	ands	r3, r2
 800d022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	441a      	add	r2, r3
 800d02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d038:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	4b0b      	ldr	r3, [pc, #44]	@ (800d074 <USB_ActivateEndpoint+0x92c>)
 800d048:	4013      	ands	r3, r2
 800d04a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	441a      	add	r2, r3
 800d056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d060:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d062:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800d066:	4618      	mov	r0, r3
 800d068:	3784      	adds	r7, #132	@ 0x84
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	07ffbf8f 	.word	0x07ffbf8f
 800d078:	07ff8fbf 	.word	0x07ff8fbf
 800d07c:	07ff8f8f 	.word	0x07ff8f8f

0800d080 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d080:	b480      	push	{r7}
 800d082:	b097      	sub	sp, #92	@ 0x5c
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	7b1b      	ldrb	r3, [r3, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d16d      	bne.n	800d16e <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	785b      	ldrb	r3, [r3, #1]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d034      	beq.n	800d104 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	613b      	str	r3, [r7, #16]
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d013      	beq.n	800d0da <USB_DeactivateEndpoint+0x5a>
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	4b6d      	ldr	r3, [pc, #436]	@ (800d274 <USB_DeactivateEndpoint+0x1f4>)
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	60fb      	str	r3, [r7, #12]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	441a      	add	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d0d8:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	4b64      	ldr	r3, [pc, #400]	@ (800d278 <USB_DeactivateEndpoint+0x1f8>)
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	60bb      	str	r3, [r7, #8]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	441a      	add	r2, r3
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	e139      	b.n	800d378 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	61fb      	str	r3, [r7, #28]
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d013      	beq.n	800d144 <USB_DeactivateEndpoint+0xc4>
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	4413      	add	r3, r2
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	4b52      	ldr	r3, [pc, #328]	@ (800d274 <USB_DeactivateEndpoint+0x1f4>)
 800d12a:	4013      	ands	r3, r2
 800d12c:	61bb      	str	r3, [r7, #24]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	441a      	add	r2, r3
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d142:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	4b4a      	ldr	r3, [pc, #296]	@ (800d27c <USB_DeactivateEndpoint+0x1fc>)
 800d152:	4013      	ands	r3, r2
 800d154:	617b      	str	r3, [r7, #20]
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	441a      	add	r2, r3
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d16a:	6013      	str	r3, [r2, #0]
 800d16c:	e104      	b.n	800d378 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	785b      	ldrb	r3, [r3, #1]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f040 8084 	bne.w	800d280 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d013      	beq.n	800d1b8 <USB_DeactivateEndpoint+0x138>
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	4b35      	ldr	r3, [pc, #212]	@ (800d274 <USB_DeactivateEndpoint+0x1f4>)
 800d19e:	4013      	ands	r3, r2
 800d1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	441a      	add	r2, r3
 800d1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d1b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1b6:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4413      	add	r3, r2
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d013      	beq.n	800d1f8 <USB_DeactivateEndpoint+0x178>
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	4b25      	ldr	r3, [pc, #148]	@ (800d274 <USB_DeactivateEndpoint+0x1f4>)
 800d1de:	4013      	ands	r3, r2
 800d1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	441a      	add	r2, r3
 800d1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d1f6:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4413      	add	r3, r2
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	4b1b      	ldr	r3, [pc, #108]	@ (800d274 <USB_DeactivateEndpoint+0x1f4>)
 800d206:	4013      	ands	r3, r2
 800d208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	441a      	add	r2, r3
 800d214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d21a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d21e:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	4b13      	ldr	r3, [pc, #76]	@ (800d27c <USB_DeactivateEndpoint+0x1fc>)
 800d22e:	4013      	ands	r3, r2
 800d230:	627b      	str	r3, [r7, #36]	@ 0x24
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	441a      	add	r2, r3
 800d23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d246:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	4b08      	ldr	r3, [pc, #32]	@ (800d278 <USB_DeactivateEndpoint+0x1f8>)
 800d256:	4013      	ands	r3, r2
 800d258:	623b      	str	r3, [r7, #32]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	441a      	add	r2, r3
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	e082      	b.n	800d378 <USB_DeactivateEndpoint+0x2f8>
 800d272:	bf00      	nop
 800d274:	07ff8f8f 	.word	0x07ff8f8f
 800d278:	07ff8fbf 	.word	0x07ff8fbf
 800d27c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d013      	beq.n	800d2c0 <USB_DeactivateEndpoint+0x240>
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	4b38      	ldr	r3, [pc, #224]	@ (800d388 <USB_DeactivateEndpoint+0x308>)
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	441a      	add	r2, r3
 800d2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2be:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d013      	beq.n	800d300 <USB_DeactivateEndpoint+0x280>
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	4b28      	ldr	r3, [pc, #160]	@ (800d388 <USB_DeactivateEndpoint+0x308>)
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	441a      	add	r2, r3
 800d2f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d2fe:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	4b1e      	ldr	r3, [pc, #120]	@ (800d388 <USB_DeactivateEndpoint+0x308>)
 800d30e:	4013      	ands	r3, r2
 800d310:	647b      	str	r3, [r7, #68]	@ 0x44
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	441a      	add	r2, r3
 800d31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d31e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d326:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	4b15      	ldr	r3, [pc, #84]	@ (800d38c <USB_DeactivateEndpoint+0x30c>)
 800d336:	4013      	ands	r3, r2
 800d338:	643b      	str	r3, [r7, #64]	@ 0x40
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	441a      	add	r2, r3
 800d344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d34e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4413      	add	r3, r2
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	4b0c      	ldr	r3, [pc, #48]	@ (800d390 <USB_DeactivateEndpoint+0x310>)
 800d35e:	4013      	ands	r3, r2
 800d360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	441a      	add	r2, r3
 800d36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d376:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	375c      	adds	r7, #92	@ 0x5c
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	07ff8f8f 	.word	0x07ff8f8f
 800d38c:	07ff8fbf 	.word	0x07ff8fbf
 800d390:	07ffbf8f 	.word	0x07ffbf8f

0800d394 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b092      	sub	sp, #72	@ 0x48
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	f040 84ed 	bne.w	800dd82 <USB_EPStartXfer+0x9ee>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	699a      	ldr	r2, [r3, #24]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d903      	bls.n	800d3bc <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3ba:	e002      	b.n	800d3c2 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	7b1b      	ldrb	r3, [r3, #12]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d12e      	bne.n	800d428 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	6959      	ldr	r1, [r3, #20]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	88da      	ldrh	r2, [r3, #6]
 800d3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fe9f 	bl	800e11a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	00db      	lsls	r3, r3, #3
 800d3e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	00db      	lsls	r3, r3, #3
 800d3f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3fa:	b292      	uxth	r2, r2
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d408:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d40c:	6819      	ldr	r1, [r3, #0]
 800d40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d410:	041a      	lsls	r2, r3, #16
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	00db      	lsls	r3, r3, #3
 800d418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d41c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d420:	430a      	orrs	r2, r1
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	f000 bc90 	b.w	800dd48 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	78db      	ldrb	r3, [r3, #3]
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	f040 8332 	bne.w	800da96 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	6a1a      	ldr	r2, [r3, #32]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	f240 82e4 	bls.w	800da08 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4413      	add	r3, r2
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	4ba4      	ldr	r3, [pc, #656]	@ (800d6e0 <USB_EPStartXfer+0x34c>)
 800d44e:	4013      	ands	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	441a      	add	r2, r3
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d466:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	6a1a      	ldr	r2, [r3, #32]
 800d46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d46e:	1ad2      	subs	r2, r2, r3
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4413      	add	r3, r2
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 8161 	beq.w	800d74c <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	785b      	ldrb	r3, [r3, #1]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d16a      	bne.n	800d568 <USB_EPStartXfer+0x1d4>
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	00db      	lsls	r3, r3, #3
 800d498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d49c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4b0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d4b4:	605a      	str	r2, [r3, #4]
 800d4b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d112      	bne.n	800d4e2 <USB_EPStartXfer+0x14e>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4de:	605a      	str	r2, [r3, #4]
 800d4e0:	e06a      	b.n	800d5b8 <USB_EPStartXfer+0x224>
 800d4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4e6:	d81e      	bhi.n	800d526 <USB_EPStartXfer+0x192>
 800d4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4ea:	085b      	lsrs	r3, r3, #1
 800d4ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <USB_EPStartXfer+0x16a>
 800d4f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d508:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d50c:	6859      	ldr	r1, [r3, #4]
 800d50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d510:	069a      	lsls	r2, r3, #26
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d51c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d520:	430a      	orrs	r2, r1
 800d522:	605a      	str	r2, [r3, #4]
 800d524:	e048      	b.n	800d5b8 <USB_EPStartXfer+0x224>
 800d526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d528:	095b      	lsrs	r3, r3, #5
 800d52a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d52e:	f003 031f 	and.w	r3, r3, #31
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <USB_EPStartXfer+0x1a8>
 800d536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d538:	3b01      	subs	r3, #1
 800d53a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d546:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d54e:	069b      	lsls	r3, r3, #26
 800d550:	431a      	orrs	r2, r3
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d55c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d560:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d564:	605a      	str	r2, [r3, #4]
 800d566:	e027      	b.n	800d5b8 <USB_EPStartXfer+0x224>
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	785b      	ldrb	r3, [r3, #1]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d123      	bne.n	800d5b8 <USB_EPStartXfer+0x224>
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d57a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d58a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d58e:	b292      	uxth	r2, r2
 800d590:	605a      	str	r2, [r3, #4]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d59c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5a0:	6859      	ldr	r1, [r3, #4]
 800d5a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5a4:	041a      	lsls	r2, r3, #16
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5b4:	430a      	orrs	r2, r1
 800d5b6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	895b      	ldrh	r3, [r3, #10]
 800d5bc:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	6959      	ldr	r1, [r3, #20]
 800d5c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	8afa      	ldrh	r2, [r7, #22]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fda6 	bl	800e11a <USB_WritePMA>
            ep->xfer_buff += len;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	695a      	ldr	r2, [r3, #20]
 800d5d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5d4:	441a      	add	r2, r3
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	6a1a      	ldr	r2, [r3, #32]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d906      	bls.n	800d5f4 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	6a1a      	ldr	r2, [r3, #32]
 800d5ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ec:	1ad2      	subs	r2, r2, r3
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	621a      	str	r2, [r3, #32]
 800d5f2:	e005      	b.n	800d600 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	6a1b      	ldr	r3, [r3, #32]
 800d5f8:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	785b      	ldrb	r3, [r3, #1]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d16d      	bne.n	800d6e4 <USB_EPStartXfer+0x350>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d626:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d62a:	601a      	str	r2, [r3, #0]
 800d62c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d112      	bne.n	800d658 <USB_EPStartXfer+0x2c4>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	00db      	lsls	r3, r3, #3
 800d638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d63c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d64c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d650:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	e06d      	b.n	800d734 <USB_EPStartXfer+0x3a0>
 800d658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d65a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d65c:	d81e      	bhi.n	800d69c <USB_EPStartXfer+0x308>
 800d65e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d660:	085b      	lsrs	r3, r3, #1
 800d662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <USB_EPStartXfer+0x2e0>
 800d66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d670:	3301      	adds	r3, #1
 800d672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	00db      	lsls	r3, r3, #3
 800d67a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d67e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d682:	6819      	ldr	r1, [r3, #0]
 800d684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d686:	069a      	lsls	r2, r3, #26
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	00db      	lsls	r3, r3, #3
 800d68e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d692:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d696:	430a      	orrs	r2, r1
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	e04b      	b.n	800d734 <USB_EPStartXfer+0x3a0>
 800d69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d69e:	095b      	lsrs	r3, r3, #5
 800d6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6a4:	f003 031f 	and.w	r3, r3, #31
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d102      	bne.n	800d6b2 <USB_EPStartXfer+0x31e>
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c4:	069b      	lsls	r3, r3, #26
 800d6c6:	431a      	orrs	r2, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	e02a      	b.n	800d734 <USB_EPStartXfer+0x3a0>
 800d6de:	bf00      	nop
 800d6e0:	07ff8f8f 	.word	0x07ff8f8f
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	785b      	ldrb	r3, [r3, #1]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d123      	bne.n	800d734 <USB_EPStartXfer+0x3a0>
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	00db      	lsls	r3, r3, #3
 800d6f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	00db      	lsls	r3, r3, #3
 800d702:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d706:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d70a:	b292      	uxth	r2, r2
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d718:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d71c:	6819      	ldr	r1, [r3, #0]
 800d71e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d720:	041a      	lsls	r2, r3, #16
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	00db      	lsls	r3, r3, #3
 800d728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d72c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d730:	430a      	orrs	r2, r1
 800d732:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	891b      	ldrh	r3, [r3, #8]
 800d738:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	6959      	ldr	r1, [r3, #20]
 800d73e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d740:	b29b      	uxth	r3, r3
 800d742:	8afa      	ldrh	r2, [r7, #22]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fce8 	bl	800e11a <USB_WritePMA>
 800d74a:	e2fd      	b.n	800dd48 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	785b      	ldrb	r3, [r3, #1]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d16a      	bne.n	800d82a <USB_EPStartXfer+0x496>
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d75e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d76e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d772:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d112      	bne.n	800d7a4 <USB_EPStartXfer+0x410>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d788:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d79c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	e06a      	b.n	800d87a <USB_EPStartXfer+0x4e6>
 800d7a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7a8:	d81e      	bhi.n	800d7e8 <USB_EPStartXfer+0x454>
 800d7aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ac:	085b      	lsrs	r3, r3, #1
 800d7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <USB_EPStartXfer+0x42c>
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7bc:	3301      	adds	r3, #1
 800d7be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	00db      	lsls	r3, r3, #3
 800d7c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7ce:	6819      	ldr	r1, [r3, #0]
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d2:	069a      	lsls	r2, r3, #26
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	00db      	lsls	r3, r3, #3
 800d7da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7e2:	430a      	orrs	r2, r1
 800d7e4:	601a      	str	r2, [r3, #0]
 800d7e6:	e048      	b.n	800d87a <USB_EPStartXfer+0x4e6>
 800d7e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ea:	095b      	lsrs	r3, r3, #5
 800d7ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7f0:	f003 031f 	and.w	r3, r3, #31
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <USB_EPStartXfer+0x46a>
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d808:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d810:	069b      	lsls	r3, r3, #26
 800d812:	431a      	orrs	r2, r3
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	00db      	lsls	r3, r3, #3
 800d81a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d81e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d822:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	e027      	b.n	800d87a <USB_EPStartXfer+0x4e6>
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	785b      	ldrb	r3, [r3, #1]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d123      	bne.n	800d87a <USB_EPStartXfer+0x4e6>
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d83c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	00db      	lsls	r3, r3, #3
 800d848:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d84c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d850:	b292      	uxth	r2, r2
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d85e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d862:	6819      	ldr	r1, [r3, #0]
 800d864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d866:	041a      	lsls	r2, r3, #16
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d872:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d876:	430a      	orrs	r2, r1
 800d878:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	891b      	ldrh	r3, [r3, #8]
 800d87e:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	6959      	ldr	r1, [r3, #20]
 800d884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d886:	b29b      	uxth	r3, r3
 800d888:	8afa      	ldrh	r2, [r7, #22]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fc45 	bl	800e11a <USB_WritePMA>
            ep->xfer_buff += len;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	695a      	ldr	r2, [r3, #20]
 800d894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d896:	441a      	add	r2, r3
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	6a1a      	ldr	r2, [r3, #32]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d906      	bls.n	800d8b6 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	6a1a      	ldr	r2, [r3, #32]
 800d8ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8ae:	1ad2      	subs	r2, r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	621a      	str	r2, [r3, #32]
 800d8b4:	e005      	b.n	800d8c2 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	6a1b      	ldr	r3, [r3, #32]
 800d8ba:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	785b      	ldrb	r3, [r3, #1]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d16a      	bne.n	800d9a0 <USB_EPStartXfer+0x60c>
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	00db      	lsls	r3, r3, #3
 800d8e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8e8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d8ec:	605a      	str	r2, [r3, #4]
 800d8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d112      	bne.n	800d91a <USB_EPStartXfer+0x586>
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	00db      	lsls	r3, r3, #3
 800d8fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d90e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d912:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d916:	605a      	str	r2, [r3, #4]
 800d918:	e06a      	b.n	800d9f0 <USB_EPStartXfer+0x65c>
 800d91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d91c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d91e:	d81e      	bhi.n	800d95e <USB_EPStartXfer+0x5ca>
 800d920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d922:	085b      	lsrs	r3, r3, #1
 800d924:	637b      	str	r3, [r7, #52]	@ 0x34
 800d926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d002      	beq.n	800d936 <USB_EPStartXfer+0x5a2>
 800d930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d932:	3301      	adds	r3, #1
 800d934:	637b      	str	r3, [r7, #52]	@ 0x34
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	00db      	lsls	r3, r3, #3
 800d93c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d940:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d944:	6859      	ldr	r1, [r3, #4]
 800d946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d948:	069a      	lsls	r2, r3, #26
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d954:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d958:	430a      	orrs	r2, r1
 800d95a:	605a      	str	r2, [r3, #4]
 800d95c:	e048      	b.n	800d9f0 <USB_EPStartXfer+0x65c>
 800d95e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d960:	095b      	lsrs	r3, r3, #5
 800d962:	637b      	str	r3, [r7, #52]	@ 0x34
 800d964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d966:	f003 031f 	and.w	r3, r3, #31
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d102      	bne.n	800d974 <USB_EPStartXfer+0x5e0>
 800d96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d970:	3b01      	subs	r3, #1
 800d972:	637b      	str	r3, [r7, #52]	@ 0x34
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d97e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d982:	685a      	ldr	r2, [r3, #4]
 800d984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d986:	069b      	lsls	r3, r3, #26
 800d988:	431a      	orrs	r2, r3
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d994:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d998:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	e027      	b.n	800d9f0 <USB_EPStartXfer+0x65c>
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	785b      	ldrb	r3, [r3, #1]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d123      	bne.n	800d9f0 <USB_EPStartXfer+0x65c>
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9b6:	685a      	ldr	r2, [r3, #4]
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9c6:	b292      	uxth	r2, r2
 800d9c8:	605a      	str	r2, [r3, #4]
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9d8:	6859      	ldr	r1, [r3, #4]
 800d9da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9dc:	041a      	lsls	r2, r3, #16
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9ec:	430a      	orrs	r2, r1
 800d9ee:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	895b      	ldrh	r3, [r3, #10]
 800d9f4:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	6959      	ldr	r1, [r3, #20]
 800d9fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	8afa      	ldrh	r2, [r7, #22]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fb8a 	bl	800e11a <USB_WritePMA>
 800da06:	e19f      	b.n	800dd48 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	647b      	str	r3, [r7, #68]	@ 0x44

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	4413      	add	r3, r2
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	4ba0      	ldr	r3, [pc, #640]	@ (800dc9c <USB_EPStartXfer+0x908>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	613b      	str	r3, [r7, #16]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	441a      	add	r2, r3
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da34:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	00db      	lsls	r3, r3, #3
 800da4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da54:	b292      	uxth	r2, r2
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	00db      	lsls	r3, r3, #3
 800da5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da66:	6819      	ldr	r1, [r3, #0]
 800da68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da6a:	041a      	lsls	r2, r3, #16
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	00db      	lsls	r3, r3, #3
 800da72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da7a:	430a      	orrs	r2, r1
 800da7c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	891b      	ldrh	r3, [r3, #8]
 800da82:	82fb      	strh	r3, [r7, #22]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	6959      	ldr	r1, [r3, #20]
 800da88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	8afa      	ldrh	r2, [r7, #22]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fb43 	bl	800e11a <USB_WritePMA>
 800da94:	e158      	b.n	800dd48 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	6a1a      	ldr	r2, [r3, #32]
 800da9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da9c:	1ad2      	subs	r2, r2, r3
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	4413      	add	r3, r2
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 80a3 	beq.w	800dbfe <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d16a      	bne.n	800db96 <USB_EPStartXfer+0x802>
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	00db      	lsls	r3, r3, #3
 800dac6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800daca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dace:	685a      	ldr	r2, [r3, #4]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	00db      	lsls	r3, r3, #3
 800dad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dada:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dade:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dae2:	605a      	str	r2, [r3, #4]
 800dae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d112      	bne.n	800db10 <USB_EPStartXfer+0x77c>
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	00db      	lsls	r3, r3, #3
 800daf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800daf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800daf8:	685a      	ldr	r2, [r3, #4]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800db0c:	605a      	str	r2, [r3, #4]
 800db0e:	e06a      	b.n	800dbe6 <USB_EPStartXfer+0x852>
 800db10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db12:	2b3e      	cmp	r3, #62	@ 0x3e
 800db14:	d81e      	bhi.n	800db54 <USB_EPStartXfer+0x7c0>
 800db16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db18:	085b      	lsrs	r3, r3, #1
 800db1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800db1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b00      	cmp	r3, #0
 800db24:	d002      	beq.n	800db2c <USB_EPStartXfer+0x798>
 800db26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db28:	3301      	adds	r3, #1
 800db2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db3a:	6859      	ldr	r1, [r3, #4]
 800db3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3e:	069a      	lsls	r2, r3, #26
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	00db      	lsls	r3, r3, #3
 800db46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db4e:	430a      	orrs	r2, r1
 800db50:	605a      	str	r2, [r3, #4]
 800db52:	e048      	b.n	800dbe6 <USB_EPStartXfer+0x852>
 800db54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db56:	095b      	lsrs	r3, r3, #5
 800db58:	633b      	str	r3, [r7, #48]	@ 0x30
 800db5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db5c:	f003 031f 	and.w	r3, r3, #31
 800db60:	2b00      	cmp	r3, #0
 800db62:	d102      	bne.n	800db6a <USB_EPStartXfer+0x7d6>
 800db64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db66:	3b01      	subs	r3, #1
 800db68:	633b      	str	r3, [r7, #48]	@ 0x30
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7c:	069b      	lsls	r3, r3, #26
 800db7e:	431a      	orrs	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	00db      	lsls	r3, r3, #3
 800db86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800db92:	605a      	str	r2, [r3, #4]
 800db94:	e027      	b.n	800dbe6 <USB_EPStartXfer+0x852>
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	785b      	ldrb	r3, [r3, #1]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d123      	bne.n	800dbe6 <USB_EPStartXfer+0x852>
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dba8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbac:	685a      	ldr	r2, [r3, #4]
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbbc:	b292      	uxth	r2, r2
 800dbbe:	605a      	str	r2, [r3, #4]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbce:	6859      	ldr	r1, [r3, #4]
 800dbd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbd2:	041a      	lsls	r2, r3, #16
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbe2:	430a      	orrs	r2, r1
 800dbe4:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	895b      	ldrh	r3, [r3, #10]
 800dbea:	82fb      	strh	r3, [r7, #22]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	6959      	ldr	r1, [r3, #20]
 800dbf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	8afa      	ldrh	r2, [r7, #22]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fa8f 	bl	800e11a <USB_WritePMA>
 800dbfc:	e0a4      	b.n	800dd48 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	785b      	ldrb	r3, [r3, #1]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d16d      	bne.n	800dce2 <USB_EPStartXfer+0x94e>
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	00db      	lsls	r3, r3, #3
 800dc0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	00db      	lsls	r3, r3, #3
 800dc1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc24:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d112      	bne.n	800dc56 <USB_EPStartXfer+0x8c2>
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	00db      	lsls	r3, r3, #3
 800dc46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc4e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	e06d      	b.n	800dd32 <USB_EPStartXfer+0x99e>
 800dc56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc58:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc5a:	d821      	bhi.n	800dca0 <USB_EPStartXfer+0x90c>
 800dc5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc5e:	085b      	lsrs	r3, r3, #1
 800dc60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <USB_EPStartXfer+0x8de>
 800dc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc6e:	3301      	adds	r3, #1
 800dc70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc80:	6819      	ldr	r1, [r3, #0]
 800dc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc84:	069a      	lsls	r2, r3, #26
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc94:	430a      	orrs	r2, r1
 800dc96:	601a      	str	r2, [r3, #0]
 800dc98:	e04b      	b.n	800dd32 <USB_EPStartXfer+0x99e>
 800dc9a:	bf00      	nop
 800dc9c:	07ff8e8f 	.word	0x07ff8e8f
 800dca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dca2:	095b      	lsrs	r3, r3, #5
 800dca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dca8:	f003 031f 	and.w	r3, r3, #31
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <USB_EPStartXfer+0x922>
 800dcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	00db      	lsls	r3, r3, #3
 800dcbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc8:	069b      	lsls	r3, r3, #26
 800dcca:	431a      	orrs	r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	00db      	lsls	r3, r3, #3
 800dcd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcda:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	e027      	b.n	800dd32 <USB_EPStartXfer+0x99e>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	785b      	ldrb	r3, [r3, #1]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d123      	bne.n	800dd32 <USB_EPStartXfer+0x99e>
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd08:	b292      	uxth	r2, r2
 800dd0a:	601a      	str	r2, [r3, #0]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	00db      	lsls	r3, r3, #3
 800dd12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd1a:	6819      	ldr	r1, [r3, #0]
 800dd1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd1e:	041a      	lsls	r2, r3, #16
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	00db      	lsls	r3, r3, #3
 800dd26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd2e:	430a      	orrs	r2, r1
 800dd30:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	891b      	ldrh	r3, [r3, #8]
 800dd36:	82fb      	strh	r3, [r7, #22]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	6959      	ldr	r1, [r3, #20]
 800dd3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	8afa      	ldrh	r2, [r7, #22]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f9e9 	bl	800e11a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	4b60      	ldr	r3, [pc, #384]	@ (800ded8 <USB_EPStartXfer+0xb44>)
 800dd56:	4013      	ands	r3, r2
 800dd58:	60bb      	str	r3, [r7, #8]
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f083 0310 	eor.w	r3, r3, #16
 800dd60:	60bb      	str	r3, [r7, #8]
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f083 0320 	eor.w	r3, r3, #32
 800dd68:	60bb      	str	r3, [r7, #8]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	441a      	add	r2, r3
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd7e:	6013      	str	r3, [r2, #0]
 800dd80:	e0a4      	b.n	800decc <USB_EPStartXfer+0xb38>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	7b1b      	ldrb	r3, [r3, #12]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d142      	bne.n	800de10 <USB_EPStartXfer+0xa7c>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d118      	bne.n	800ddc4 <USB_EPStartXfer+0xa30>
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	78db      	ldrb	r3, [r3, #3]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d114      	bne.n	800ddc4 <USB_EPStartXfer+0xa30>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	4b4d      	ldr	r3, [pc, #308]	@ (800dedc <USB_EPStartXfer+0xb48>)
 800dda8:	4013      	ands	r3, r2
 800ddaa:	623b      	str	r3, [r7, #32]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	441a      	add	r2, r3
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ddbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddc0:	6013      	str	r3, [r2, #0]
 800ddc2:	e013      	b.n	800ddec <USB_EPStartXfer+0xa58>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	4b43      	ldr	r3, [pc, #268]	@ (800dee0 <USB_EPStartXfer+0xb4c>)
 800ddd2:	4013      	ands	r3, r2
 800ddd4:	61fb      	str	r3, [r7, #28]
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	441a      	add	r2, r3
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dde6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddea:	6013      	str	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	699a      	ldr	r2, [r3, #24]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	691b      	ldr	r3, [r3, #16]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d907      	bls.n	800de08 <USB_EPStartXfer+0xa74>
      {
        ep->xfer_len -= ep->maxpacket;
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	699a      	ldr	r2, [r3, #24]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	1ad2      	subs	r2, r2, r3
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	619a      	str	r2, [r3, #24]
 800de06:	e045      	b.n	800de94 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2200      	movs	r2, #0
 800de0c:	619a      	str	r2, [r3, #24]
 800de0e:	e041      	b.n	800de94 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	78db      	ldrb	r3, [r3, #3]
 800de14:	2b02      	cmp	r3, #2
 800de16:	d133      	bne.n	800de80 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	69db      	ldr	r3, [r3, #28]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d039      	beq.n	800de94 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	4413      	add	r3, r2
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	857b      	strh	r3, [r7, #42]	@ 0x2a

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800de2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800de30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d004      	beq.n	800de42 <USB_EPStartXfer+0xaae>
 800de38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800de3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d109      	bne.n	800de56 <USB_EPStartXfer+0xac2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800de42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800de44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d123      	bne.n	800de94 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800de4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800de4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de52:	2b00      	cmp	r3, #0
 800de54:	d11e      	bne.n	800de94 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4413      	add	r3, r2
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	4b1e      	ldr	r3, [pc, #120]	@ (800dedc <USB_EPStartXfer+0xb48>)
 800de64:	4013      	ands	r3, r2
 800de66:	627b      	str	r3, [r7, #36]	@ 0x24
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	441a      	add	r2, r3
 800de72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	e009      	b.n	800de94 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	78db      	ldrb	r3, [r3, #3]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d103      	bne.n	800de90 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	2200      	movs	r2, #0
 800de8c:	619a      	str	r2, [r3, #24]
 800de8e:	e001      	b.n	800de94 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800de90:	2301      	movs	r3, #1
 800de92:	e01c      	b.n	800dece <USB_EPStartXfer+0xb3a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	4b10      	ldr	r3, [pc, #64]	@ (800dee4 <USB_EPStartXfer+0xb50>)
 800dea2:	4013      	ands	r3, r2
 800dea4:	61bb      	str	r3, [r7, #24]
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800deac:	61bb      	str	r3, [r7, #24]
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800deb4:	61bb      	str	r3, [r7, #24]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	441a      	add	r2, r3
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800deca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3748      	adds	r7, #72	@ 0x48
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	07ff8fbf 	.word	0x07ff8fbf
 800dedc:	07ff8f8f 	.word	0x07ff8f8f
 800dee0:	07ff8e8f 	.word	0x07ff8e8f
 800dee4:	07ffbf8f 	.word	0x07ffbf8f

0800dee8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	785b      	ldrb	r3, [r3, #1]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d018      	beq.n	800df2c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	4b19      	ldr	r3, [pc, #100]	@ (800df6c <USB_EPSetStall+0x84>)
 800df08:	4013      	ands	r3, r2
 800df0a:	60bb      	str	r3, [r7, #8]
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f083 0310 	eor.w	r3, r3, #16
 800df12:	60bb      	str	r3, [r7, #8]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	441a      	add	r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	e017      	b.n	800df5c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	4b0d      	ldr	r3, [pc, #52]	@ (800df70 <USB_EPSetStall+0x88>)
 800df3a:	4013      	ands	r3, r2
 800df3c:	60fb      	str	r3, [r7, #12]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800df44:	60fb      	str	r3, [r7, #12]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	441a      	add	r2, r3
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	07ff8fbf 	.word	0x07ff8fbf
 800df70:	07ffbf8f 	.word	0x07ffbf8f

0800df74 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800df74:	b480      	push	{r7}
 800df76:	b089      	sub	sp, #36	@ 0x24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	785b      	ldrb	r3, [r3, #1]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d03c      	beq.n	800e000 <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	613b      	str	r3, [r7, #16]
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d013      	beq.n	800dfc6 <USB_EPClearStall+0x52>
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	4b37      	ldr	r3, [pc, #220]	@ (800e088 <USB_EPClearStall+0x114>)
 800dfac:	4013      	ands	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	441a      	add	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dfc4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	78db      	ldrb	r3, [r3, #3]
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d054      	beq.n	800e078 <USB_EPClearStall+0x104>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	4b2c      	ldr	r3, [pc, #176]	@ (800e08c <USB_EPClearStall+0x118>)
 800dfdc:	4013      	ands	r3, r2
 800dfde:	60bb      	str	r3, [r7, #8]
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	f083 0320 	eor.w	r3, r3, #32
 800dfe6:	60bb      	str	r3, [r7, #8]
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	441a      	add	r2, r3
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	e03b      	b.n	800e078 <USB_EPClearStall+0x104>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	4413      	add	r3, r2
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	61fb      	str	r3, [r7, #28]
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d013      	beq.n	800e040 <USB_EPClearStall+0xcc>
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	4b18      	ldr	r3, [pc, #96]	@ (800e088 <USB_EPClearStall+0x114>)
 800e026:	4013      	ands	r3, r2
 800e028:	61bb      	str	r3, [r7, #24]
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	441a      	add	r2, r3
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e03a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e03e:	6013      	str	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	4b10      	ldr	r3, [pc, #64]	@ (800e090 <USB_EPClearStall+0x11c>)
 800e04e:	4013      	ands	r3, r2
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e058:	617b      	str	r3, [r7, #20]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	441a      	add	r2, r3
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3724      	adds	r7, #36	@ 0x24
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	07ff8f8f 	.word	0x07ff8f8f
 800e08c:	07ff8fbf 	.word	0x07ff8fbf
 800e090:	07ffbf8f 	.word	0x07ffbf8f

0800e094 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e0a0:	78fb      	ldrb	r3, [r7, #3]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d102      	bne.n	800e0ac <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2280      	movs	r2, #128	@ 0x80
 800e0aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	370c      	adds	r7, #12
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b083      	sub	sp, #12
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0c6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0e8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800e0fe:	b480      	push	{r7}
 800e100:	b085      	sub	sp, #20
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e10a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e10c:	68fb      	ldr	r3, [r7, #12]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e11a:	b480      	push	{r7}
 800e11c:	b08b      	sub	sp, #44	@ 0x2c
 800e11e:	af00      	add	r7, sp, #0
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	4611      	mov	r1, r2
 800e126:	461a      	mov	r2, r3
 800e128:	460b      	mov	r3, r1
 800e12a:	80fb      	strh	r3, [r7, #6]
 800e12c:	4613      	mov	r3, r2
 800e12e:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800e130:	88bb      	ldrh	r3, [r7, #4]
 800e132:	3303      	adds	r3, #3
 800e134:	089b      	lsrs	r3, r3, #2
 800e136:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800e138:	88bb      	ldrh	r3, [r7, #4]
 800e13a:	f003 0303 	and.w	r3, r3, #3
 800e13e:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800e144:	8afb      	ldrh	r3, [r7, #22]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <USB_WritePMA+0x36>
  {
    NbWords--;
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	3b01      	subs	r3, #1
 800e14e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800e150:	88fb      	ldrh	r3, [r7, #6]
 800e152:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e156:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e15a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	623b      	str	r3, [r7, #32]
 800e160:	e015      	b.n	800e18e <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	3304      	adds	r3, #4
 800e16e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	3301      	adds	r3, #1
 800e174:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	3301      	adds	r3, #1
 800e17a:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	3301      	adds	r3, #1
 800e180:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	3301      	adds	r3, #1
 800e186:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	3b01      	subs	r3, #1
 800e18c:	623b      	str	r3, [r7, #32]
 800e18e:	6a3b      	ldr	r3, [r7, #32]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1e6      	bne.n	800e162 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800e194:	8afb      	ldrh	r3, [r7, #22]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d01a      	beq.n	800e1d0 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800e19a:	2300      	movs	r3, #0
 800e19c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	00db      	lsls	r3, r3, #3
 800e1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	623b      	str	r3, [r7, #32]
      pBuf++;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800e1be:	8afb      	ldrh	r3, [r7, #22]
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800e1c4:	8afb      	ldrh	r3, [r7, #22]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1e9      	bne.n	800e19e <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1ce:	601a      	str	r2, [r3, #0]
  }
}
 800e1d0:	bf00      	nop
 800e1d2:	372c      	adds	r7, #44	@ 0x2c
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b08b      	sub	sp, #44	@ 0x2c
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	80fb      	strh	r3, [r7, #6]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800e1f2:	88bb      	ldrh	r3, [r7, #4]
 800e1f4:	3303      	adds	r3, #3
 800e1f6:	089b      	lsrs	r3, r3, #2
 800e1f8:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800e1fa:	88bb      	ldrh	r3, [r7, #4]
 800e1fc:	f003 0303 	and.w	r3, r3, #3
 800e200:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800e206:	88fb      	ldrh	r3, [r7, #6]
 800e208:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e20c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e210:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800e212:	8b7b      	ldrh	r3, [r7, #26]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <USB_ReadPMA+0x42>
  {
    NbWords--;
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	3b01      	subs	r3, #1
 800e21c:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	627b      	str	r3, [r7, #36]	@ 0x24
 800e222:	e015      	b.n	800e250 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	3304      	adds	r3, #4
 800e230:	623b      	str	r3, [r7, #32]
    pBuf++;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	3301      	adds	r3, #1
 800e236:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	3301      	adds	r3, #1
 800e23c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	3301      	adds	r3, #1
 800e242:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	3301      	adds	r3, #1
 800e248:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800e24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24c:	3b01      	subs	r3, #1
 800e24e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1e6      	bne.n	800e224 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800e256:	8b7b      	ldrh	r3, [r7, #26]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d017      	beq.n	800e28c <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800e25c:	6a3b      	ldr	r3, [r7, #32]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800e262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e264:	b2db      	uxtb	r3, r3
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	fa22 f303 	lsr.w	r3, r2, r3
 800e26e:	b2da      	uxtb	r2, r3
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	701a      	strb	r2, [r3, #0]
      count++;
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	3301      	adds	r3, #1
 800e278:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	3301      	adds	r3, #1
 800e27e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800e280:	8b7b      	ldrh	r3, [r7, #26]
 800e282:	3b01      	subs	r3, #1
 800e284:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800e286:	8b7b      	ldrh	r3, [r7, #26]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1ea      	bne.n	800e262 <USB_ReadPMA+0x86>
  }
}
 800e28c:	bf00      	nop
 800e28e:	372c      	adds	r7, #44	@ 0x2c
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e2a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e2a8:	f000 ffa4 	bl	800f1f4 <USBD_static_malloc>
 800e2ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10a      	bne.n	800e2ca <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	33b0      	adds	r3, #176	@ 0xb0
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	e0d6      	b.n	800e478 <USBD_CDC_Init+0x1e0>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e2ca:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f003 fb0c 	bl	80118ee <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	33b0      	adds	r3, #176	@ 0xb0
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	33b0      	adds	r3, #176	@ 0xb0
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4413      	add	r3, r2
 800e2f6:	685a      	ldr	r2, [r3, #4]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	7c1b      	ldrb	r3, [r3, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d138      	bne.n	800e378 <USBD_CDC_Init+0xe0>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e306:	4b5e      	ldr	r3, [pc, #376]	@ (800e480 <USBD_CDC_Init+0x1e8>)
 800e308:	7819      	ldrb	r1, [r3, #0]
 800e30a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e30e:	2202      	movs	r2, #2
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fe76 	bl	800f002 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e316:	4b5a      	ldr	r3, [pc, #360]	@ (800e480 <USBD_CDC_Init+0x1e8>)
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	f003 020f 	and.w	r2, r3, #15
 800e31e:	6879      	ldr	r1, [r7, #4]
 800e320:	4613      	mov	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	440b      	add	r3, r1
 800e32a:	3324      	adds	r3, #36	@ 0x24
 800e32c:	2201      	movs	r2, #1
 800e32e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e330:	4b54      	ldr	r3, [pc, #336]	@ (800e484 <USBD_CDC_Init+0x1ec>)
 800e332:	7819      	ldrb	r1, [r3, #0]
 800e334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e338:	2202      	movs	r2, #2
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fe61 	bl	800f002 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e340:	4b50      	ldr	r3, [pc, #320]	@ (800e484 <USBD_CDC_Init+0x1ec>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	f003 020f 	and.w	r2, r3, #15
 800e348:	6879      	ldr	r1, [r7, #4]
 800e34a:	4613      	mov	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	4413      	add	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	440b      	add	r3, r1
 800e354:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e358:	2201      	movs	r2, #1
 800e35a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e35c:	4b4a      	ldr	r3, [pc, #296]	@ (800e488 <USBD_CDC_Init+0x1f0>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	f003 020f 	and.w	r2, r3, #15
 800e364:	6879      	ldr	r1, [r7, #4]
 800e366:	4613      	mov	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	440b      	add	r3, r1
 800e370:	3326      	adds	r3, #38	@ 0x26
 800e372:	2210      	movs	r2, #16
 800e374:	801a      	strh	r2, [r3, #0]
 800e376:	e035      	b.n	800e3e4 <USBD_CDC_Init+0x14c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e378:	4b41      	ldr	r3, [pc, #260]	@ (800e480 <USBD_CDC_Init+0x1e8>)
 800e37a:	7819      	ldrb	r1, [r3, #0]
 800e37c:	2340      	movs	r3, #64	@ 0x40
 800e37e:	2202      	movs	r2, #2
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fe3e 	bl	800f002 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e386:	4b3e      	ldr	r3, [pc, #248]	@ (800e480 <USBD_CDC_Init+0x1e8>)
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	f003 020f 	and.w	r2, r3, #15
 800e38e:	6879      	ldr	r1, [r7, #4]
 800e390:	4613      	mov	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	440b      	add	r3, r1
 800e39a:	3324      	adds	r3, #36	@ 0x24
 800e39c:	2201      	movs	r2, #1
 800e39e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e3a0:	4b38      	ldr	r3, [pc, #224]	@ (800e484 <USBD_CDC_Init+0x1ec>)
 800e3a2:	7819      	ldrb	r1, [r3, #0]
 800e3a4:	2340      	movs	r3, #64	@ 0x40
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fe2a 	bl	800f002 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e3ae:	4b35      	ldr	r3, [pc, #212]	@ (800e484 <USBD_CDC_Init+0x1ec>)
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	f003 020f 	and.w	r2, r3, #15
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4413      	add	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	440b      	add	r3, r1
 800e3c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e3ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e488 <USBD_CDC_Init+0x1f0>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f003 020f 	and.w	r2, r3, #15
 800e3d2:	6879      	ldr	r1, [r7, #4]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	440b      	add	r3, r1
 800e3de:	3326      	adds	r3, #38	@ 0x26
 800e3e0:	2210      	movs	r2, #16
 800e3e2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e3e4:	4b28      	ldr	r3, [pc, #160]	@ (800e488 <USBD_CDC_Init+0x1f0>)
 800e3e6:	7819      	ldrb	r1, [r3, #0]
 800e3e8:	2308      	movs	r3, #8
 800e3ea:	2203      	movs	r2, #3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 fe08 	bl	800f002 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e3f2:	4b25      	ldr	r3, [pc, #148]	@ (800e488 <USBD_CDC_Init+0x1f0>)
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	f003 020f 	and.w	r2, r3, #15
 800e3fa:	6879      	ldr	r1, [r7, #4]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	4413      	add	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	440b      	add	r3, r1
 800e406:	3324      	adds	r3, #36	@ 0x24
 800e408:	2201      	movs	r2, #1
 800e40a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	33b2      	adds	r3, #178	@ 0xb2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <USBD_CDC_Init+0x1ae>
  {
    return (uint8_t)USBD_EMEM;
 800e442:	2302      	movs	r3, #2
 800e444:	e018      	b.n	800e478 <USBD_CDC_Init+0x1e0>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	7c1b      	ldrb	r3, [r3, #16]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10a      	bne.n	800e464 <USBD_CDC_Init+0x1cc>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e44e:	4b0d      	ldr	r3, [pc, #52]	@ (800e484 <USBD_CDC_Init+0x1ec>)
 800e450:	7819      	ldrb	r1, [r3, #0]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f000 fe9b 	bl	800f198 <USBD_LL_PrepareReceive>
 800e462:	e008      	b.n	800e476 <USBD_CDC_Init+0x1de>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e464:	4b07      	ldr	r3, [pc, #28]	@ (800e484 <USBD_CDC_Init+0x1ec>)
 800e466:	7819      	ldrb	r1, [r3, #0]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e46e:	2340      	movs	r3, #64	@ 0x40
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fe91 	bl	800f198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	200000c3 	.word	0x200000c3
 800e484:	200000c4 	.word	0x200000c4
 800e488:	200000c5 	.word	0x200000c5

0800e48c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e498:	4b3b      	ldr	r3, [pc, #236]	@ (800e588 <USBD_CDC_DeInit+0xfc>)
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 fdcf 	bl	800f042 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e4a4:	4b38      	ldr	r3, [pc, #224]	@ (800e588 <USBD_CDC_DeInit+0xfc>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	f003 020f 	and.w	r2, r3, #15
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	440b      	add	r3, r1
 800e4b8:	3324      	adds	r3, #36	@ 0x24
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e4be:	4b33      	ldr	r3, [pc, #204]	@ (800e58c <USBD_CDC_DeInit+0x100>)
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fdbc 	bl	800f042 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e4ca:	4b30      	ldr	r3, [pc, #192]	@ (800e58c <USBD_CDC_DeInit+0x100>)
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	f003 020f 	and.w	r2, r3, #15
 800e4d2:	6879      	ldr	r1, [r7, #4]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	440b      	add	r3, r1
 800e4de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e4e6:	4b2a      	ldr	r3, [pc, #168]	@ (800e590 <USBD_CDC_DeInit+0x104>)
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fda8 	bl	800f042 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e4f2:	4b27      	ldr	r3, [pc, #156]	@ (800e590 <USBD_CDC_DeInit+0x104>)
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	f003 020f 	and.w	r2, r3, #15
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	440b      	add	r3, r1
 800e506:	3324      	adds	r3, #36	@ 0x24
 800e508:	2200      	movs	r2, #0
 800e50a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e50c:	4b20      	ldr	r3, [pc, #128]	@ (800e590 <USBD_CDC_DeInit+0x104>)
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	f003 020f 	and.w	r2, r3, #15
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	4613      	mov	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4413      	add	r3, r2
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	440b      	add	r3, r1
 800e520:	3326      	adds	r3, #38	@ 0x26
 800e522:	2200      	movs	r2, #0
 800e524:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	33b0      	adds	r3, #176	@ 0xb0
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d021      	beq.n	800e57e <USBD_CDC_DeInit+0xf2>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	33b2      	adds	r3, #178	@ 0xb2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4413      	add	r3, r2
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	33b0      	adds	r3, #176	@ 0xb0
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 fe56 	bl	800f210 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	33b0      	adds	r3, #176	@ 0xb0
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	2200      	movs	r2, #0
 800e574:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	200000c3 	.word	0x200000c3
 800e58c:	200000c4 	.word	0x200000c4
 800e590:	200000c5 	.word	0x200000c5

0800e594 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	33b0      	adds	r3, #176	@ 0xb0
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4413      	add	r3, r2
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	e0c0      	b.n	800e748 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d050      	beq.n	800e674 <USBD_CDC_Setup+0xe0>
 800e5d2:	2b20      	cmp	r3, #32
 800e5d4:	f040 80b0 	bne.w	800e738 <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	88db      	ldrh	r3, [r3, #6]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d03a      	beq.n	800e656 <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	b25b      	sxtb	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	da1b      	bge.n	800e622 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	33b2      	adds	r3, #178	@ 0xb2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e600:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	88d2      	ldrh	r2, [r2, #6]
 800e606:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	88db      	ldrh	r3, [r3, #6]
 800e60c:	2b07      	cmp	r3, #7
 800e60e:	bf28      	it	cs
 800e610:	2307      	movcs	r3, #7
 800e612:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	89fa      	ldrh	r2, [r7, #14]
 800e618:	4619      	mov	r1, r3
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f002 f907 	bl	801082e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e620:	e091      	b.n	800e746 <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	785a      	ldrb	r2, [r3, #1]
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	88db      	ldrh	r3, [r3, #6]
 800e630:	2b3f      	cmp	r3, #63	@ 0x3f
 800e632:	d803      	bhi.n	800e63c <USBD_CDC_Setup+0xa8>
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	88db      	ldrh	r3, [r3, #6]
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	e000      	b.n	800e63e <USBD_CDC_Setup+0xaa>
 800e63c:	2240      	movs	r2, #64	@ 0x40
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e644:	6939      	ldr	r1, [r7, #16]
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e64c:	461a      	mov	r2, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f002 f919 	bl	8010886 <USBD_CtlPrepareRx>
      break;
 800e654:	e077      	b.n	800e746 <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	33b2      	adds	r3, #178	@ 0xb2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	7850      	ldrb	r0, [r2, #1]
 800e66c:	2200      	movs	r2, #0
 800e66e:	6839      	ldr	r1, [r7, #0]
 800e670:	4798      	blx	r3
      break;
 800e672:	e068      	b.n	800e746 <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	785b      	ldrb	r3, [r3, #1]
 800e678:	2b0b      	cmp	r3, #11
 800e67a:	d852      	bhi.n	800e722 <USBD_CDC_Setup+0x18e>
 800e67c:	a201      	add	r2, pc, #4	@ (adr r2, 800e684 <USBD_CDC_Setup+0xf0>)
 800e67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e682:	bf00      	nop
 800e684:	0800e6b5 	.word	0x0800e6b5
 800e688:	0800e731 	.word	0x0800e731
 800e68c:	0800e723 	.word	0x0800e723
 800e690:	0800e723 	.word	0x0800e723
 800e694:	0800e723 	.word	0x0800e723
 800e698:	0800e723 	.word	0x0800e723
 800e69c:	0800e723 	.word	0x0800e723
 800e6a0:	0800e723 	.word	0x0800e723
 800e6a4:	0800e723 	.word	0x0800e723
 800e6a8:	0800e723 	.word	0x0800e723
 800e6ac:	0800e6df 	.word	0x0800e6df
 800e6b0:	0800e709 	.word	0x0800e709
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b03      	cmp	r3, #3
 800e6be:	d107      	bne.n	800e6d0 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e6c0:	f107 030a 	add.w	r3, r7, #10
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f002 f8b0 	bl	801082e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6ce:	e032      	b.n	800e736 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f001 ff2d 	bl	8010532 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	75fb      	strb	r3, [r7, #23]
          break;
 800e6dc:	e02b      	b.n	800e736 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	d107      	bne.n	800e6fa <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e6ea:	f107 030d 	add.w	r3, r7, #13
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f002 f89b 	bl	801082e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6f8:	e01d      	b.n	800e736 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800e6fa:	6839      	ldr	r1, [r7, #0]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f001 ff18 	bl	8010532 <USBD_CtlError>
            ret = USBD_FAIL;
 800e702:	2303      	movs	r3, #3
 800e704:	75fb      	strb	r3, [r7, #23]
          break;
 800e706:	e016      	b.n	800e736 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	2b03      	cmp	r3, #3
 800e712:	d00f      	beq.n	800e734 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 800e714:	6839      	ldr	r1, [r7, #0]
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f001 ff0b 	bl	8010532 <USBD_CtlError>
            ret = USBD_FAIL;
 800e71c:	2303      	movs	r3, #3
 800e71e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e720:	e008      	b.n	800e734 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f001 ff04 	bl	8010532 <USBD_CtlError>
          ret = USBD_FAIL;
 800e72a:	2303      	movs	r3, #3
 800e72c:	75fb      	strb	r3, [r7, #23]
          break;
 800e72e:	e002      	b.n	800e736 <USBD_CDC_Setup+0x1a2>
          break;
 800e730:	bf00      	nop
 800e732:	e008      	b.n	800e746 <USBD_CDC_Setup+0x1b2>
          break;
 800e734:	bf00      	nop
      }
      break;
 800e736:	e006      	b.n	800e746 <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 800e738:	6839      	ldr	r1, [r7, #0]
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f001 fef9 	bl	8010532 <USBD_CtlError>
      ret = USBD_FAIL;
 800e740:	2303      	movs	r3, #3
 800e742:	75fb      	strb	r3, [r7, #23]
      break;
 800e744:	bf00      	nop
  }

  return (uint8_t)ret;
 800e746:	7dfb      	ldrb	r3, [r7, #23]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e762:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	33b0      	adds	r3, #176	@ 0xb0
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	4413      	add	r3, r2
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800e778:	2303      	movs	r3, #3
 800e77a:	e066      	b.n	800e84a <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	33b0      	adds	r3, #176	@ 0xb0
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	4413      	add	r3, r2
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e78e:	78fb      	ldrb	r3, [r7, #3]
 800e790:	f003 020f 	and.w	r2, r3, #15
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	4613      	mov	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4413      	add	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	440b      	add	r3, r1
 800e7a0:	3318      	adds	r3, #24
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d02f      	beq.n	800e808 <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e7a8:	78fb      	ldrb	r3, [r7, #3]
 800e7aa:	f003 020f 	and.w	r2, r3, #15
 800e7ae:	6879      	ldr	r1, [r7, #4]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	4413      	add	r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	440b      	add	r3, r1
 800e7ba:	3318      	adds	r3, #24
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	78fb      	ldrb	r3, [r7, #3]
 800e7c0:	f003 010f 	and.w	r1, r3, #15
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	440b      	add	r3, r1
 800e7cc:	00db      	lsls	r3, r3, #3
 800e7ce:	4403      	add	r3, r0
 800e7d0:	3324      	adds	r3, #36	@ 0x24
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e7d8:	fb01 f303 	mul.w	r3, r1, r3
 800e7dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d112      	bne.n	800e808 <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e7e2:	78fb      	ldrb	r3, [r7, #3]
 800e7e4:	f003 020f 	and.w	r2, r3, #15
 800e7e8:	6879      	ldr	r1, [r7, #4]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	4413      	add	r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	440b      	add	r3, r1
 800e7f4:	3318      	adds	r3, #24
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e7fa:	78f9      	ldrb	r1, [r7, #3]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	2200      	movs	r2, #0
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fcae 	bl	800f162 <USBD_LL_Transmit>
 800e806:	e01f      	b.n	800e848 <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	33b2      	adds	r3, #178	@ 0xb2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d010      	beq.n	800e848 <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	33b2      	adds	r3, #178	@ 0xb2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e844:	78fa      	ldrb	r2, [r7, #3]
 800e846:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b084      	sub	sp, #16
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	460b      	mov	r3, r1
 800e85c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	33b0      	adds	r3, #176	@ 0xb0
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	4413      	add	r3, r2
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	33b0      	adds	r3, #176	@ 0xb0
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	4413      	add	r3, r2
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 800e884:	2303      	movs	r3, #3
 800e886:	e01a      	b.n	800e8be <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e888:	78fb      	ldrb	r3, [r7, #3]
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fc9e 	bl	800f1ce <USBD_LL_GetRxDataSize>
 800e892:	4602      	mov	r2, r0
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	33b2      	adds	r3, #178	@ 0xb2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4413      	add	r3, r2
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b084      	sub	sp, #16
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	33b0      	adds	r3, #176	@ 0xb0
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d101      	bne.n	800e8ea <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e8e6:	2303      	movs	r3, #3
 800e8e8:	e024      	b.n	800e934 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	33b2      	adds	r3, #178	@ 0xb2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d019      	beq.n	800e932 <USBD_CDC_EP0_RxReady+0x6c>
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e904:	2bff      	cmp	r3, #255	@ 0xff
 800e906:	d014      	beq.n	800e932 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	33b2      	adds	r3, #178	@ 0xb2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e920:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e928:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	22ff      	movs	r2, #255	@ 0xff
 800e92e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3710      	adds	r7, #16
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e944:	2183      	movs	r1, #131	@ 0x83
 800e946:	4818      	ldr	r0, [pc, #96]	@ (800e9a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e948:	f000 ffbd 	bl	800f8c6 <USBD_GetEpDesc>
 800e94c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e94e:	2101      	movs	r1, #1
 800e950:	4815      	ldr	r0, [pc, #84]	@ (800e9a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e952:	f000 ffb8 	bl	800f8c6 <USBD_GetEpDesc>
 800e956:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e958:	2182      	movs	r1, #130	@ 0x82
 800e95a:	4813      	ldr	r0, [pc, #76]	@ (800e9a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e95c:	f000 ffb3 	bl	800f8c6 <USBD_GetEpDesc>
 800e960:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	2210      	movs	r2, #16
 800e96c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d006      	beq.n	800e982 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	2200      	movs	r2, #0
 800e978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e97c:	711a      	strb	r2, [r3, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d006      	beq.n	800e996 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e990:	711a      	strb	r2, [r3, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2243      	movs	r2, #67	@ 0x43
 800e99a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e99c:	4b02      	ldr	r3, [pc, #8]	@ (800e9a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3718      	adds	r7, #24
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	20000080 	.word	0x20000080

0800e9ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b086      	sub	sp, #24
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e9b4:	2183      	movs	r1, #131	@ 0x83
 800e9b6:	4818      	ldr	r0, [pc, #96]	@ (800ea18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9b8:	f000 ff85 	bl	800f8c6 <USBD_GetEpDesc>
 800e9bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e9be:	2101      	movs	r1, #1
 800e9c0:	4815      	ldr	r0, [pc, #84]	@ (800ea18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9c2:	f000 ff80 	bl	800f8c6 <USBD_GetEpDesc>
 800e9c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e9c8:	2182      	movs	r1, #130	@ 0x82
 800e9ca:	4813      	ldr	r0, [pc, #76]	@ (800ea18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9cc:	f000 ff7b 	bl	800f8c6 <USBD_GetEpDesc>
 800e9d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	2210      	movs	r2, #16
 800e9dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d006      	beq.n	800e9f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	711a      	strb	r2, [r3, #4]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f042 0202 	orr.w	r2, r2, #2
 800e9f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d006      	beq.n	800ea06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	711a      	strb	r2, [r3, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f042 0202 	orr.w	r2, r2, #2
 800ea04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2243      	movs	r2, #67	@ 0x43
 800ea0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea0c:	4b02      	ldr	r3, [pc, #8]	@ (800ea18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3718      	adds	r7, #24
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000080 	.word	0x20000080

0800ea1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ea24:	2183      	movs	r1, #131	@ 0x83
 800ea26:	4818      	ldr	r0, [pc, #96]	@ (800ea88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea28:	f000 ff4d 	bl	800f8c6 <USBD_GetEpDesc>
 800ea2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ea2e:	2101      	movs	r1, #1
 800ea30:	4815      	ldr	r0, [pc, #84]	@ (800ea88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea32:	f000 ff48 	bl	800f8c6 <USBD_GetEpDesc>
 800ea36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ea38:	2182      	movs	r1, #130	@ 0x82
 800ea3a:	4813      	ldr	r0, [pc, #76]	@ (800ea88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea3c:	f000 ff43 	bl	800f8c6 <USBD_GetEpDesc>
 800ea40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2210      	movs	r2, #16
 800ea4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d006      	beq.n	800ea62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea5c:	711a      	strb	r2, [r3, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d006      	beq.n	800ea76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea70:	711a      	strb	r2, [r3, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2243      	movs	r2, #67	@ 0x43
 800ea7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea7c:	4b02      	ldr	r3, [pc, #8]	@ (800ea88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3718      	adds	r7, #24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	20000080 	.word	0x20000080

0800ea8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	220a      	movs	r2, #10
 800ea98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ea9a:	4b03      	ldr	r3, [pc, #12]	@ (800eaa8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr
 800eaa8:	2000003c 	.word	0x2000003c

0800eaac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d101      	bne.n	800eac0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eabc:	2303      	movs	r3, #3
 800eabe:	e009      	b.n	800ead4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	33b2      	adds	r3, #178	@ 0xb2
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	4413      	add	r3, r2
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b087      	sub	sp, #28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	33b0      	adds	r3, #176	@ 0xb0
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	4413      	add	r3, r2
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800eb04:	2303      	movs	r3, #3
 800eb06:	e008      	b.n	800eb1a <USBD_CDC_SetTxBuffer+0x3a>
  }

  hcdc->TxBuffer = pbuff;
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	371c      	adds	r7, #28
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr

0800eb26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eb26:	b480      	push	{r7}
 800eb28:	b085      	sub	sp, #20
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	33b0      	adds	r3, #176	@ 0xb0
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	4413      	add	r3, r2
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d101      	bne.n	800eb4c <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eb48:	2303      	movs	r3, #3
 800eb4a:	e004      	b.n	800eb56 <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
	...

0800eb64 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	33b0      	adds	r3, #176	@ 0xb0
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800eb88:	2303      	movs	r3, #3
 800eb8a:	e025      	b.n	800ebd8 <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d11f      	bne.n	800ebd6 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2201      	movs	r2, #1
 800eb9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800eb9e:	4b10      	ldr	r3, [pc, #64]	@ (800ebe0 <USBD_CDC_TransmitPacket+0x7c>)
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	f003 020f 	and.w	r2, r3, #15
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4403      	add	r3, r0
 800ebb8:	3318      	adds	r3, #24
 800ebba:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ebbc:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <USBD_CDC_TransmitPacket+0x7c>)
 800ebbe:	7819      	ldrb	r1, [r3, #0]
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 fac8 	bl	800f162 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	200000c3 	.word	0x200000c3

0800ebe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	33b0      	adds	r3, #176	@ 0xb0
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	4413      	add	r3, r2
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	33b0      	adds	r3, #176	@ 0xb0
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4413      	add	r3, r2
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d101      	bne.n	800ec16 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ec12:	2303      	movs	r3, #3
 800ec14:	e018      	b.n	800ec48 <USBD_CDC_ReceivePacket+0x64>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	7c1b      	ldrb	r3, [r3, #16]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10a      	bne.n	800ec34 <USBD_CDC_ReceivePacket+0x50>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ec1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec50 <USBD_CDC_ReceivePacket+0x6c>)
 800ec20:	7819      	ldrb	r1, [r3, #0]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fab3 	bl	800f198 <USBD_LL_PrepareReceive>
 800ec32:	e008      	b.n	800ec46 <USBD_CDC_ReceivePacket+0x62>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ec34:	4b06      	ldr	r3, [pc, #24]	@ (800ec50 <USBD_CDC_ReceivePacket+0x6c>)
 800ec36:	7819      	ldrb	r1, [r3, #0]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec3e:	2340      	movs	r3, #64	@ 0x40
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 faa9 	bl	800f198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	200000c4 	.word	0x200000c4

0800ec54 <TEMPLATE_Init>:
 *         Initializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Init(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	af00      	add	r7, sp, #0
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ec58:	2200      	movs	r2, #0
 800ec5a:	4905      	ldr	r1, [pc, #20]	@ (800ec70 <TEMPLATE_Init+0x1c>)
 800ec5c:	4805      	ldr	r0, [pc, #20]	@ (800ec74 <TEMPLATE_Init+0x20>)
 800ec5e:	f7ff ff3f 	bl	800eae0 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ec62:	4905      	ldr	r1, [pc, #20]	@ (800ec78 <TEMPLATE_Init+0x24>)
 800ec64:	4803      	ldr	r0, [pc, #12]	@ (800ec74 <TEMPLATE_Init+0x20>)
 800ec66:	f7ff ff5e 	bl	800eb26 <USBD_CDC_SetRxBuffer>
    return (0);
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	200011d4 	.word	0x200011d4
 800ec74:	20000ce4 	.word	0x20000ce4
 800ec78:	20000fd4 	.word	0x20000fd4

0800ec7c <TEMPLATE_DeInit>:
 *         DeInitializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_DeInit(void)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	af00      	add	r7, sp, #0
	/*
     Add your deinitialization code here
	 */
	return (0);
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <TEMPLATE_Control>:
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	6039      	str	r1, [r7, #0]
 800ec96:	71fb      	strb	r3, [r7, #7]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	80bb      	strh	r3, [r7, #4]
	UNUSED(length);

	switch (cmd)
 800ec9c:	79fb      	ldrb	r3, [r7, #7]
 800ec9e:	2b23      	cmp	r3, #35	@ 0x23
 800eca0:	f200 8098 	bhi.w	800edd4 <TEMPLATE_Control+0x148>
 800eca4:	a201      	add	r2, pc, #4	@ (adr r2, 800ecac <TEMPLATE_Control+0x20>)
 800eca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecaa:	bf00      	nop
 800ecac:	0800edd5 	.word	0x0800edd5
 800ecb0:	0800edd5 	.word	0x0800edd5
 800ecb4:	0800edd5 	.word	0x0800edd5
 800ecb8:	0800edd5 	.word	0x0800edd5
 800ecbc:	0800edd5 	.word	0x0800edd5
 800ecc0:	0800edd5 	.word	0x0800edd5
 800ecc4:	0800edd5 	.word	0x0800edd5
 800ecc8:	0800edd5 	.word	0x0800edd5
 800eccc:	0800edd5 	.word	0x0800edd5
 800ecd0:	0800edd5 	.word	0x0800edd5
 800ecd4:	0800edd5 	.word	0x0800edd5
 800ecd8:	0800edd5 	.word	0x0800edd5
 800ecdc:	0800edd5 	.word	0x0800edd5
 800ece0:	0800edd5 	.word	0x0800edd5
 800ece4:	0800edd5 	.word	0x0800edd5
 800ece8:	0800edd5 	.word	0x0800edd5
 800ecec:	0800edd5 	.word	0x0800edd5
 800ecf0:	0800edd5 	.word	0x0800edd5
 800ecf4:	0800edd5 	.word	0x0800edd5
 800ecf8:	0800edd5 	.word	0x0800edd5
 800ecfc:	0800edd5 	.word	0x0800edd5
 800ed00:	0800edd5 	.word	0x0800edd5
 800ed04:	0800edd5 	.word	0x0800edd5
 800ed08:	0800edd5 	.word	0x0800edd5
 800ed0c:	0800edd5 	.word	0x0800edd5
 800ed10:	0800edd5 	.word	0x0800edd5
 800ed14:	0800edd5 	.word	0x0800edd5
 800ed18:	0800edd5 	.word	0x0800edd5
 800ed1c:	0800edd5 	.word	0x0800edd5
 800ed20:	0800edd5 	.word	0x0800edd5
 800ed24:	0800edd5 	.word	0x0800edd5
 800ed28:	0800edd5 	.word	0x0800edd5
 800ed2c:	0800ed3d 	.word	0x0800ed3d
 800ed30:	0800ed81 	.word	0x0800ed81
 800ed34:	0800edd5 	.word	0x0800edd5
 800ed38:	0800edd5 	.word	0x0800edd5
	case CDC_CLEAR_COMM_FEATURE:
		/* Add your code here */
		break;

	case CDC_SET_LINE_CODING:
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	461a      	mov	r2, r3
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	3301      	adds	r3, #1
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	021b      	lsls	r3, r3, #8
 800ed4a:	431a      	orrs	r2, r3
				(pbuf[2] << 16) | (pbuf[3] << 24));
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	3302      	adds	r3, #2
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	041b      	lsls	r3, r3, #16
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800ed54:	431a      	orrs	r2, r3
				(pbuf[2] << 16) | (pbuf[3] << 24));
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	3303      	adds	r3, #3
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	061b      	lsls	r3, r3, #24
 800ed5e:	4313      	orrs	r3, r2
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800ed60:	461a      	mov	r2, r3
 800ed62:	4b20      	ldr	r3, [pc, #128]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800ed64:	601a      	str	r2, [r3, #0]
		linecoding.format     = pbuf[4];
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	791a      	ldrb	r2, [r3, #4]
 800ed6a:	4b1e      	ldr	r3, [pc, #120]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800ed6c:	711a      	strb	r2, [r3, #4]
		linecoding.paritytype = pbuf[5];
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	795a      	ldrb	r2, [r3, #5]
 800ed72:	4b1c      	ldr	r3, [pc, #112]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800ed74:	715a      	strb	r2, [r3, #5]
		linecoding.datatype   = pbuf[6];
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	799a      	ldrb	r2, [r3, #6]
 800ed7a:	4b1a      	ldr	r3, [pc, #104]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800ed7c:	719a      	strb	r2, [r3, #6]

		/* Add your code here */
		break;
 800ed7e:	e02a      	b.n	800edd6 <TEMPLATE_Control+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(linecoding.bitrate);
 800ed80:	4b18      	ldr	r3, [pc, #96]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800ed8a:	4b16      	ldr	r3, [pc, #88]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	0a1a      	lsrs	r2, r3, #8
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	3301      	adds	r3, #1
 800ed94:	b2d2      	uxtb	r2, r2
 800ed96:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800ed98:	4b12      	ldr	r3, [pc, #72]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	0c1a      	lsrs	r2, r3, #16
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	3302      	adds	r3, #2
 800eda2:	b2d2      	uxtb	r2, r2
 800eda4:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800eda6:	4b0f      	ldr	r3, [pc, #60]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	0e1a      	lsrs	r2, r3, #24
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	3303      	adds	r3, #3
 800edb0:	b2d2      	uxtb	r2, r2
 800edb2:	701a      	strb	r2, [r3, #0]
		pbuf[4] = linecoding.format;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	3304      	adds	r3, #4
 800edb8:	4a0a      	ldr	r2, [pc, #40]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800edba:	7912      	ldrb	r2, [r2, #4]
 800edbc:	701a      	strb	r2, [r3, #0]
		pbuf[5] = linecoding.paritytype;
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	3305      	adds	r3, #5
 800edc2:	4a08      	ldr	r2, [pc, #32]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800edc4:	7952      	ldrb	r2, [r2, #5]
 800edc6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = linecoding.datatype;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	3306      	adds	r3, #6
 800edcc:	4a05      	ldr	r2, [pc, #20]	@ (800ede4 <TEMPLATE_Control+0x158>)
 800edce:	7992      	ldrb	r2, [r2, #6]
 800edd0:	701a      	strb	r2, [r3, #0]

		/* Add your code here */
		break;
 800edd2:	e000      	b.n	800edd6 <TEMPLATE_Control+0x14a>
	case CDC_SEND_BREAK:
		/* Add your code here */
		break;

	default:
		break;
 800edd4:	bf00      	nop
	}

	return (0);
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr
 800ede4:	200000dc 	.word	0x200000dc

0800ede8 <TEMPLATE_Receive>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800edf2:	4804      	ldr	r0, [pc, #16]	@ (800ee04 <TEMPLATE_Receive+0x1c>)
 800edf4:	f7ff fef6 	bl	800ebe4 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	20000ce4 	.word	0x20000ce4

0800ee08 <TEMPLATE_Transmit>:


uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	460b      	mov	r3, r1
 800ee12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee18:	4b0d      	ldr	r3, [pc, #52]	@ (800ee50 <TEMPLATE_Transmit+0x48>)
 800ee1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e00b      	b.n	800ee46 <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee2e:	887b      	ldrh	r3, [r7, #2]
 800ee30:	461a      	mov	r2, r3
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	4806      	ldr	r0, [pc, #24]	@ (800ee50 <TEMPLATE_Transmit+0x48>)
 800ee36:	f7ff fe53 	bl	800eae0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee3a:	4805      	ldr	r0, [pc, #20]	@ (800ee50 <TEMPLATE_Transmit+0x48>)
 800ee3c:	f7ff fe92 	bl	800eb64 <USBD_CDC_TransmitPacket>
 800ee40:	4603      	mov	r3, r0
 800ee42:	73fb      	strb	r3, [r7, #15]
  return result;
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	20000ce4 	.word	0x20000ce4

0800ee54 <TEMPLATE_TransmitCplt>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	4613      	mov	r3, r2
 800ee60:	71fb      	strb	r3, [r7, #7]
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);

	return (0);
 800ee62:	2300      	movs	r3, #0
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3714      	adds	r7, #20
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <HAL_PCD_SetupStageCallback>:
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);

/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
	USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ee84:	4619      	mov	r1, r3
 800ee86:	4610      	mov	r0, r2
 800ee88:	f000 fac7 	bl	800f41a <USBD_LL_SetupStage>
}
 800ee8c:	bf00      	nop
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800eea6:	78fa      	ldrb	r2, [r7, #3]
 800eea8:	6879      	ldr	r1, [r7, #4]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	440b      	add	r3, r1
 800eeb4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	78fb      	ldrb	r3, [r7, #3]
 800eebc:	4619      	mov	r1, r3
 800eebe:	f000 fb01 	bl	800f4c4 <USBD_LL_DataOutStage>
}
 800eec2:	bf00      	nop
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b082      	sub	sp, #8
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	460b      	mov	r3, r1
 800eed4:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800eedc:	78fa      	ldrb	r2, [r7, #3]
 800eede:	6879      	ldr	r1, [r7, #4]
 800eee0:	4613      	mov	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	00db      	lsls	r3, r3, #3
 800eee8:	440b      	add	r3, r1
 800eeea:	3328      	adds	r3, #40	@ 0x28
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	78fb      	ldrb	r3, [r7, #3]
 800eef0:	4619      	mov	r1, r3
 800eef2:	f000 fb9a 	bl	800f62a <USBD_LL_DataInStage>
}
 800eef6:	bf00      	nop
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
	USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f000 fca0 	bl	800f852 <USBD_LL_SOF>
}
 800ef12:	bf00      	nop
 800ef14:	3708      	adds	r7, #8
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}

0800ef1a <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
	USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef22:	2301      	movs	r3, #1
 800ef24:	73fb      	strb	r3, [r7, #15]

	if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	79db      	ldrb	r3, [r3, #7]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d001      	beq.n	800ef32 <HAL_PCD_ResetCallback+0x18>
	{
		Error_Handler();
 800ef2e:	f7f3 f885 	bl	800203c <Error_Handler>
	}
	/* Set Speed. */
	USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ef38:	7bfa      	ldrb	r2, [r7, #15]
 800ef3a:	4611      	mov	r1, r2
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f000 fc78 	bl	800f832 <USBD_LL_SetSpeed>

	/* Reset Device. */
	USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f000 fc20 	bl	800f78e <USBD_LL_Reset>
}
 800ef4e:	bf00      	nop
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
	...

0800ef58 <USBD_LL_Init>:
 * @brief  Initializes the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a1c      	ldr	r2, [pc, #112]	@ (800efd4 <USBD_LL_Init+0x7c>)
 800ef64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 800ef68:	4a1a      	ldr	r2, [pc, #104]	@ (800efd4 <USBD_LL_Init+0x7c>)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8c2 32e0 	str.w	r3, [r2, #736]	@ 0x2e0

	/* Initialize LL Driver */
	MX_USB_DRD_FS_PCD_Init();
 800ef70:	f7f2 ffb2 	bl	8001ed8 <MX_USB_DRD_FS_PCD_Init>

	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ef7a:	2320      	movs	r3, #32
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	2100      	movs	r1, #0
 800ef80:	f7f7 fba6 	bl	80066d0 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ef8a:	2360      	movs	r3, #96	@ 0x60
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2180      	movs	r1, #128	@ 0x80
 800ef90:	f7f7 fb9e 	bl	80066d0 <HAL_PCDEx_PMAConfig>

	/* HID Endpoints */
	//HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);

	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ef9a:	23e0      	movs	r3, #224	@ 0xe0
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2101      	movs	r1, #1
 800efa0:	f7f7 fb96 	bl	80066d0 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800efaa:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800efae:	2200      	movs	r2, #0
 800efb0:	2182      	movs	r1, #130	@ 0x82
 800efb2:	f7f7 fb8d 	bl	80066d0 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800efbc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800efc0:	2200      	movs	r2, #0
 800efc2:	2183      	movs	r1, #131	@ 0x83
 800efc4:	f7f7 fb84 	bl	80066d0 <HAL_PCDEx_PMAConfig>

	return USBD_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	20000a00 	.word	0x20000a00

0800efd8 <USBD_LL_Start>:
 * @brief  Starts the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f6 f860 	bl	80050ac <HAL_PCD_Start>
 800efec:	4603      	mov	r3, r0
 800efee:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 f916 	bl	800f224 <USBD_Get_USB_Status>
 800eff8:	4603      	mov	r3, r0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <USBD_LL_OpenEP>:
 * @param  ep_mps: Endpoint Max Packet Size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	4608      	mov	r0, r1
 800f00c:	4611      	mov	r1, r2
 800f00e:	461a      	mov	r2, r3
 800f010:	4603      	mov	r3, r0
 800f012:	70fb      	strb	r3, [r7, #3]
 800f014:	460b      	mov	r3, r1
 800f016:	70bb      	strb	r3, [r7, #2]
 800f018:	4613      	mov	r3, r2
 800f01a:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800f022:	78bb      	ldrb	r3, [r7, #2]
 800f024:	883a      	ldrh	r2, [r7, #0]
 800f026:	78f9      	ldrb	r1, [r7, #3]
 800f028:	f7f6 f98f 	bl	800534a <HAL_PCD_EP_Open>
 800f02c:	4603      	mov	r3, r0
 800f02e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 800f030:	7bfb      	ldrb	r3, [r7, #15]
 800f032:	4618      	mov	r0, r3
 800f034:	f000 f8f6 	bl	800f224 <USBD_Get_USB_Status>
 800f038:	4603      	mov	r3, r0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <USBD_LL_CloseEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b084      	sub	sp, #16
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
 800f04a:	460b      	mov	r3, r1
 800f04c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f054:	78fa      	ldrb	r2, [r7, #3]
 800f056:	4611      	mov	r1, r2
 800f058:	4618      	mov	r0, r3
 800f05a:	f7f6 f9d7 	bl	800540c <HAL_PCD_EP_Close>
 800f05e:	4603      	mov	r3, r0
 800f060:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 800f062:	7bfb      	ldrb	r3, [r7, #15]
 800f064:	4618      	mov	r0, r3
 800f066:	f000 f8dd 	bl	800f224 <USBD_Get_USB_Status>
 800f06a:	4603      	mov	r3, r0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	460b      	mov	r3, r1
 800f07e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f086:	78fa      	ldrb	r2, [r7, #3]
 800f088:	4611      	mov	r1, r2
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7f6 fa8a 	bl	80055a4 <HAL_PCD_EP_SetStall>
 800f090:	4603      	mov	r3, r0
 800f092:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 800f094:	7bfb      	ldrb	r3, [r7, #15]
 800f096:	4618      	mov	r0, r3
 800f098:	f000 f8c4 	bl	800f224 <USBD_Get_USB_Status>
 800f09c:	4603      	mov	r3, r0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b084      	sub	sp, #16
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f0b8:	78fa      	ldrb	r2, [r7, #3]
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f6 fac5 	bl	800564c <HAL_PCD_EP_ClrStall>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 800f0c6:	7bfb      	ldrb	r3, [r7, #15]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 f8ab 	bl	800f224 <USBD_Get_USB_Status>
 800f0ce:	4603      	mov	r3, r0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f0ea:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 800f0ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	da0b      	bge.n	800f10c <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0f4:	78fb      	ldrb	r3, [r7, #3]
 800f0f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0fa:	68f9      	ldr	r1, [r7, #12]
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	4413      	add	r3, r2
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	440b      	add	r3, r1
 800f106:	3316      	adds	r3, #22
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	e00b      	b.n	800f124 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f10c:	78fb      	ldrb	r3, [r7, #3]
 800f10e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f112:	68f9      	ldr	r1, [r7, #12]
 800f114:	4613      	mov	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4413      	add	r3, r2
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	440b      	add	r3, r1
 800f11e:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800f122:	781b      	ldrb	r3, [r3, #0]
	}
}
 800f124:	4618      	mov	r0, r3
 800f126:	3714      	adds	r7, #20
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <USBD_LL_SetUSBAddress>:
 * @param  dev_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	460b      	mov	r3, r1
 800f13a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f142:	78fa      	ldrb	r2, [r7, #3]
 800f144:	4611      	mov	r1, r2
 800f146:	4618      	mov	r0, r3
 800f148:	f7f6 f8db 	bl	8005302 <HAL_PCD_SetAddress>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 800f150:	7bfb      	ldrb	r3, [r7, #15]
 800f152:	4618      	mov	r0, r3
 800f154:	f000 f866 	bl	800f224 <USBD_Get_USB_Status>
 800f158:	4603      	mov	r3, r0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <USBD_LL_Transmit>:
 * @param  size: Data size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b086      	sub	sp, #24
 800f166:	af00      	add	r7, sp, #0
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	607a      	str	r2, [r7, #4]
 800f16c:	603b      	str	r3, [r7, #0]
 800f16e:	460b      	mov	r3, r1
 800f170:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800f178:	7af9      	ldrb	r1, [r7, #11]
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	f7f6 f9d9 	bl	8005534 <HAL_PCD_EP_Transmit>
 800f182:	4603      	mov	r3, r0
 800f184:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 800f186:	7dfb      	ldrb	r3, [r7, #23]
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 f84b 	bl	800f224 <USBD_Get_USB_Status>
 800f18e:	4603      	mov	r3, r0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3718      	adds	r7, #24
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <USBD_LL_PrepareReceive>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	607a      	str	r2, [r7, #4]
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800f1ae:	7af9      	ldrb	r1, [r7, #11]
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	f7f6 f974 	bl	80054a0 <HAL_PCD_EP_Receive>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 800f1bc:	7dfb      	ldrb	r3, [r7, #23]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 f830 	bl	800f224 <USBD_Get_USB_Status>
 800f1c4:	4603      	mov	r3, r0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <USBD_LL_GetRxDataSize>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b082      	sub	sp, #8
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1e0:	78fa      	ldrb	r2, [r7, #3]
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7f6 f98d 	bl	8005504 <HAL_PCD_EP_GetRxCount>
 800f1ea:	4603      	mov	r3, r0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3708      	adds	r7, #8
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <USBD_static_malloc>:
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void *USBD_static_malloc(uint32_t size)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 800f1fc:	4b03      	ldr	r3, [pc, #12]	@ (800f20c <USBD_static_malloc+0x18>)
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	200013d4 	.word	0x200013d4

0800f210 <USBD_static_free>:
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void *p)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 800f218:	bf00      	nop
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <USBD_Get_USB_Status>:
{
	HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	4603      	mov	r3, r0
 800f22c:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 800f22e:	2300      	movs	r3, #0
 800f230:	73fb      	strb	r3, [r7, #15]

	switch (hal_status)
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	2b03      	cmp	r3, #3
 800f236:	d817      	bhi.n	800f268 <USBD_Get_USB_Status+0x44>
 800f238:	a201      	add	r2, pc, #4	@ (adr r2, 800f240 <USBD_Get_USB_Status+0x1c>)
 800f23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23e:	bf00      	nop
 800f240:	0800f251 	.word	0x0800f251
 800f244:	0800f257 	.word	0x0800f257
 800f248:	0800f25d 	.word	0x0800f25d
 800f24c:	0800f263 	.word	0x0800f263
	{
	case HAL_OK :
		usb_status = USBD_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	73fb      	strb	r3, [r7, #15]
		break;
 800f254:	e00b      	b.n	800f26e <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 800f256:	2303      	movs	r3, #3
 800f258:	73fb      	strb	r3, [r7, #15]
		break;
 800f25a:	e008      	b.n	800f26e <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 800f25c:	2301      	movs	r3, #1
 800f25e:	73fb      	strb	r3, [r7, #15]
		break;
 800f260:	e005      	b.n	800f26e <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 800f262:	2303      	movs	r3, #3
 800f264:	73fb      	strb	r3, [r7, #15]
		break;
 800f266:	e002      	b.n	800f26e <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 800f268:	2303      	movs	r3, #3
 800f26a:	73fb      	strb	r3, [r7, #15]
		break;
 800f26c:	bf00      	nop
	}
	return usb_status;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	4613      	mov	r3, r2
 800f288:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d10a      	bne.n	800f2a6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800f290:	4817      	ldr	r0, [pc, #92]	@ (800f2f0 <USBD_Init+0x74>)
 800f292:	f002 fa7b 	bl	801178c <iprintf>
 800f296:	4817      	ldr	r0, [pc, #92]	@ (800f2f4 <USBD_Init+0x78>)
 800f298:	f002 fa78 	bl	801178c <iprintf>
 800f29c:	200a      	movs	r0, #10
 800f29e:	f002 fa87 	bl	80117b0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	e01f      	b.n	800f2e6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d003      	beq.n	800f2cc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	79fa      	ldrb	r2, [r7, #7]
 800f2d8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f7ff fe3c 	bl	800ef58 <USBD_LL_Init>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3718      	adds	r7, #24
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	08015260 	.word	0x08015260
 800f2f4:	08015268 	.word	0x08015268

0800f2f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f302:	2300      	movs	r3, #0
 800f304:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d10a      	bne.n	800f322 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800f30c:	481a      	ldr	r0, [pc, #104]	@ (800f378 <USBD_RegisterClass+0x80>)
 800f30e:	f002 fa3d 	bl	801178c <iprintf>
 800f312:	481a      	ldr	r0, [pc, #104]	@ (800f37c <USBD_RegisterClass+0x84>)
 800f314:	f002 fa3a 	bl	801178c <iprintf>
 800f318:	200a      	movs	r0, #10
 800f31a:	f002 fa49 	bl	80117b0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f31e:	2303      	movs	r3, #3
 800f320:	e025      	b.n	800f36e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	32ae      	adds	r2, #174	@ 0xae
 800f334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00f      	beq.n	800f35e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	32ae      	adds	r2, #174	@ 0xae
 800f348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f34e:	f107 020e 	add.w	r2, r7, #14
 800f352:	4610      	mov	r0, r2
 800f354:	4798      	blx	r3
 800f356:	4602      	mov	r2, r0
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4

  return USBD_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	08015260 	.word	0x08015260
 800f37c:	08015280 	.word	0x08015280

0800f380 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff fe25 	bl	800efd8 <USBD_LL_Start>
 800f38e:	4603      	mov	r3, r0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f3a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	370c      	adds	r7, #12
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr

0800f3ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b084      	sub	sp, #16
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d009      	beq.n	800f3dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	78fa      	ldrb	r2, [r7, #3]
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	4798      	blx	r3
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	78fa      	ldrb	r2, [r7, #3]
 800f400:	4611      	mov	r1, r2
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	4798      	blx	r3
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f40c:	2303      	movs	r3, #3
 800f40e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f410:	7bfb      	ldrb	r3, [r7, #15]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f42a:	6839      	ldr	r1, [r7, #0]
 800f42c:	4618      	mov	r0, r3
 800f42e:	f001 f846 	bl	80104be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f440:	461a      	mov	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f44e:	f003 031f 	and.w	r3, r3, #31
 800f452:	2b02      	cmp	r3, #2
 800f454:	d01a      	beq.n	800f48c <USBD_LL_SetupStage+0x72>
 800f456:	2b02      	cmp	r3, #2
 800f458:	d822      	bhi.n	800f4a0 <USBD_LL_SetupStage+0x86>
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <USBD_LL_SetupStage+0x4a>
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d00a      	beq.n	800f478 <USBD_LL_SetupStage+0x5e>
 800f462:	e01d      	b.n	800f4a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f46a:	4619      	mov	r1, r3
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 fa9d 	bl	800f9ac <USBD_StdDevReq>
 800f472:	4603      	mov	r3, r0
 800f474:	73fb      	strb	r3, [r7, #15]
      break;
 800f476:	e020      	b.n	800f4ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f47e:	4619      	mov	r1, r3
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fb05 	bl	800fa90 <USBD_StdItfReq>
 800f486:	4603      	mov	r3, r0
 800f488:	73fb      	strb	r3, [r7, #15]
      break;
 800f48a:	e016      	b.n	800f4ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f492:	4619      	mov	r1, r3
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fb67 	bl	800fb68 <USBD_StdEPReq>
 800f49a:	4603      	mov	r3, r0
 800f49c:	73fb      	strb	r3, [r7, #15]
      break;
 800f49e:	e00c      	b.n	800f4ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f4a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f7ff fde0 	bl	800f074 <USBD_LL_StallEP>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800f4b8:	bf00      	nop
  }

  return ret;
 800f4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	607a      	str	r2, [r7, #4]
 800f4d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f4d6:	7afb      	ldrb	r3, [r7, #11]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d16e      	bne.n	800f5ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f4e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f4ea:	2b03      	cmp	r3, #3
 800f4ec:	f040 8098 	bne.w	800f620 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	689a      	ldr	r2, [r3, #8]
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d913      	bls.n	800f524 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	689a      	ldr	r2, [r3, #8]
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	1ad2      	subs	r2, r2, r3
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	68da      	ldr	r2, [r3, #12]
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	4293      	cmp	r3, r2
 800f514:	bf28      	it	cs
 800f516:	4613      	movcs	r3, r2
 800f518:	461a      	mov	r2, r3
 800f51a:	6879      	ldr	r1, [r7, #4]
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f001 f9cf 	bl	80108c0 <USBD_CtlContinueRx>
 800f522:	e07d      	b.n	800f620 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f52a:	f003 031f 	and.w	r3, r3, #31
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d014      	beq.n	800f55c <USBD_LL_DataOutStage+0x98>
 800f532:	2b02      	cmp	r3, #2
 800f534:	d81d      	bhi.n	800f572 <USBD_LL_DataOutStage+0xae>
 800f536:	2b00      	cmp	r3, #0
 800f538:	d002      	beq.n	800f540 <USBD_LL_DataOutStage+0x7c>
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d003      	beq.n	800f546 <USBD_LL_DataOutStage+0x82>
 800f53e:	e018      	b.n	800f572 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f540:	2300      	movs	r3, #0
 800f542:	75bb      	strb	r3, [r7, #22]
            break;
 800f544:	e018      	b.n	800f578 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	4619      	mov	r1, r3
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 f99e 	bl	800f892 <USBD_CoreFindIF>
 800f556:	4603      	mov	r3, r0
 800f558:	75bb      	strb	r3, [r7, #22]
            break;
 800f55a:	e00d      	b.n	800f578 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f562:	b2db      	uxtb	r3, r3
 800f564:	4619      	mov	r1, r3
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f000 f9a0 	bl	800f8ac <USBD_CoreFindEP>
 800f56c:	4603      	mov	r3, r0
 800f56e:	75bb      	strb	r3, [r7, #22]
            break;
 800f570:	e002      	b.n	800f578 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f572:	2300      	movs	r3, #0
 800f574:	75bb      	strb	r3, [r7, #22]
            break;
 800f576:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f578:	7dbb      	ldrb	r3, [r7, #22]
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d819      	bhi.n	800f5b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f584:	b2db      	uxtb	r3, r3
 800f586:	2b03      	cmp	r3, #3
 800f588:	d113      	bne.n	800f5b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f58a:	7dba      	ldrb	r2, [r7, #22]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	32ae      	adds	r2, #174	@ 0xae
 800f590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f594:	691b      	ldr	r3, [r3, #16]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00b      	beq.n	800f5b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f59a:	7dba      	ldrb	r2, [r7, #22]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f5a2:	7dba      	ldrb	r2, [r7, #22]
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	32ae      	adds	r2, #174	@ 0xae
 800f5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f001 f995 	bl	80108e2 <USBD_CtlSendStatus>
 800f5b8:	e032      	b.n	800f620 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f5ba:	7afb      	ldrb	r3, [r7, #11]
 800f5bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f000 f971 	bl	800f8ac <USBD_CoreFindEP>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5ce:	7dbb      	ldrb	r3, [r7, #22]
 800f5d0:	2bff      	cmp	r3, #255	@ 0xff
 800f5d2:	d025      	beq.n	800f620 <USBD_LL_DataOutStage+0x15c>
 800f5d4:	7dbb      	ldrb	r3, [r7, #22]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d822      	bhi.n	800f620 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d117      	bne.n	800f616 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f5e6:	7dba      	ldrb	r2, [r7, #22]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	32ae      	adds	r2, #174	@ 0xae
 800f5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00f      	beq.n	800f616 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f5f6:	7dba      	ldrb	r2, [r7, #22]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f5fe:	7dba      	ldrb	r2, [r7, #22]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	32ae      	adds	r2, #174	@ 0xae
 800f604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f608:	699b      	ldr	r3, [r3, #24]
 800f60a:	7afa      	ldrb	r2, [r7, #11]
 800f60c:	4611      	mov	r1, r2
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	4798      	blx	r3
 800f612:	4603      	mov	r3, r0
 800f614:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f61c:	7dfb      	ldrb	r3, [r7, #23]
 800f61e:	e000      	b.n	800f622 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3718      	adds	r7, #24
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b086      	sub	sp, #24
 800f62e:	af00      	add	r7, sp, #0
 800f630:	60f8      	str	r0, [r7, #12]
 800f632:	460b      	mov	r3, r1
 800f634:	607a      	str	r2, [r7, #4]
 800f636:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f638:	7afb      	ldrb	r3, [r7, #11]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d16f      	bne.n	800f71e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3314      	adds	r3, #20
 800f642:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	d15a      	bne.n	800f704 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	689a      	ldr	r2, [r3, #8]
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	429a      	cmp	r2, r3
 800f658:	d914      	bls.n	800f684 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	689a      	ldr	r2, [r3, #8]
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	1ad2      	subs	r2, r2, r3
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	689b      	ldr	r3, [r3, #8]
 800f66c:	461a      	mov	r2, r3
 800f66e:	6879      	ldr	r1, [r7, #4]
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	f001 f8f7 	bl	8010864 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f676:	2300      	movs	r3, #0
 800f678:	2200      	movs	r2, #0
 800f67a:	2100      	movs	r1, #0
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f7ff fd8b 	bl	800f198 <USBD_LL_PrepareReceive>
 800f682:	e03f      	b.n	800f704 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	68da      	ldr	r2, [r3, #12]
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d11c      	bne.n	800f6ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	685a      	ldr	r2, [r3, #4]
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f698:	429a      	cmp	r2, r3
 800f69a:	d316      	bcc.n	800f6ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	685a      	ldr	r2, [r3, #4]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d20f      	bcs.n	800f6ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f001 f8d8 	bl	8010864 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6bc:	2300      	movs	r3, #0
 800f6be:	2200      	movs	r2, #0
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f7ff fd68 	bl	800f198 <USBD_LL_PrepareReceive>
 800f6c8:	e01c      	b.n	800f704 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b03      	cmp	r3, #3
 800f6d4:	d10f      	bne.n	800f6f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d009      	beq.n	800f6f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6f6:	2180      	movs	r1, #128	@ 0x80
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f7ff fcbb 	bl	800f074 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f001 f902 	bl	8010908 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d03a      	beq.n	800f784 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f7ff fe42 	bl	800f398 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f71c:	e032      	b.n	800f784 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f71e:	7afb      	ldrb	r3, [r7, #11]
 800f720:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f724:	b2db      	uxtb	r3, r3
 800f726:	4619      	mov	r1, r3
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f000 f8bf 	bl	800f8ac <USBD_CoreFindEP>
 800f72e:	4603      	mov	r3, r0
 800f730:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f732:	7dfb      	ldrb	r3, [r7, #23]
 800f734:	2bff      	cmp	r3, #255	@ 0xff
 800f736:	d025      	beq.n	800f784 <USBD_LL_DataInStage+0x15a>
 800f738:	7dfb      	ldrb	r3, [r7, #23]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d822      	bhi.n	800f784 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b03      	cmp	r3, #3
 800f748:	d11c      	bne.n	800f784 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f74a:	7dfa      	ldrb	r2, [r7, #23]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	32ae      	adds	r2, #174	@ 0xae
 800f750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f754:	695b      	ldr	r3, [r3, #20]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d014      	beq.n	800f784 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f75a:	7dfa      	ldrb	r2, [r7, #23]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f762:	7dfa      	ldrb	r2, [r7, #23]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	32ae      	adds	r2, #174	@ 0xae
 800f768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f76c:	695b      	ldr	r3, [r3, #20]
 800f76e:	7afa      	ldrb	r2, [r7, #11]
 800f770:	4611      	mov	r1, r2
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	4798      	blx	r3
 800f776:	4603      	mov	r3, r0
 800f778:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f77a:	7dbb      	ldrb	r3, [r7, #22]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f780:	7dbb      	ldrb	r3, [r7, #22]
 800f782:	e000      	b.n	800f786 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b084      	sub	sp, #16
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f796:	2300      	movs	r3, #0
 800f798:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2201      	movs	r2, #1
 800f79e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d014      	beq.n	800f7f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00e      	beq.n	800f7f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	6852      	ldr	r2, [r2, #4]
 800f7e2:	b2d2      	uxtb	r2, r2
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	4798      	blx	r3
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f7f4:	2340      	movs	r3, #64	@ 0x40
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff fc01 	bl	800f002 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2201      	movs	r2, #1
 800f804:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2240      	movs	r2, #64	@ 0x40
 800f80c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f810:	2340      	movs	r3, #64	@ 0x40
 800f812:	2200      	movs	r2, #0
 800f814:	2180      	movs	r1, #128	@ 0x80
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7ff fbf3 	bl	800f002 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2201      	movs	r2, #1
 800f820:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2240      	movs	r2, #64	@ 0x40
 800f826:	621a      	str	r2, [r3, #32]

  return ret;
 800f828:	7bfb      	ldrb	r3, [r7, #15]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3710      	adds	r7, #16
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f832:	b480      	push	{r7}
 800f834:	b083      	sub	sp, #12
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	460b      	mov	r3, r1
 800f83c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	78fa      	ldrb	r2, [r7, #3]
 800f842:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f844:	2300      	movs	r3, #0
}
 800f846:	4618      	mov	r0, r3
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f852:	b580      	push	{r7, lr}
 800f854:	b082      	sub	sp, #8
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f860:	b2db      	uxtb	r3, r3
 800f862:	2b03      	cmp	r3, #3
 800f864:	d110      	bne.n	800f888 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00b      	beq.n	800f888 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d005      	beq.n	800f888 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f882:	69db      	ldr	r3, [r3, #28]
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f888:	2300      	movs	r3, #0
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3708      	adds	r7, #8
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f892:	b480      	push	{r7}
 800f894:	b083      	sub	sp, #12
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
 800f89a:	460b      	mov	r3, r1
 800f89c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f89e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f8b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	370c      	adds	r7, #12
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr

0800f8c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f8c6:	b580      	push	{r7, lr}
 800f8c8:	b086      	sub	sp, #24
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	885b      	ldrh	r3, [r3, #2]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	68fa      	ldr	r2, [r7, #12]
 800f8e6:	7812      	ldrb	r2, [r2, #0]
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d91f      	bls.n	800f92c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f8f2:	e013      	b.n	800f91c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f8f4:	f107 030a 	add.w	r3, r7, #10
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	6978      	ldr	r0, [r7, #20]
 800f8fc:	f000 f81b 	bl	800f936 <USBD_GetNextDesc>
 800f900:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	785b      	ldrb	r3, [r3, #1]
 800f906:	2b05      	cmp	r3, #5
 800f908:	d108      	bne.n	800f91c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	789b      	ldrb	r3, [r3, #2]
 800f912:	78fa      	ldrb	r2, [r7, #3]
 800f914:	429a      	cmp	r2, r3
 800f916:	d008      	beq.n	800f92a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	885b      	ldrh	r3, [r3, #2]
 800f920:	b29a      	uxth	r2, r3
 800f922:	897b      	ldrh	r3, [r7, #10]
 800f924:	429a      	cmp	r2, r3
 800f926:	d8e5      	bhi.n	800f8f4 <USBD_GetEpDesc+0x2e>
 800f928:	e000      	b.n	800f92c <USBD_GetEpDesc+0x66>
          break;
 800f92a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f92c:	693b      	ldr	r3, [r7, #16]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3718      	adds	r7, #24
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f936:	b480      	push	{r7}
 800f938:	b085      	sub	sp, #20
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	7812      	ldrb	r2, [r2, #0]
 800f94c:	4413      	add	r3, r2
 800f94e:	b29a      	uxth	r2, r3
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	461a      	mov	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4413      	add	r3, r2
 800f95e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f960:	68fb      	ldr	r3, [r7, #12]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f96e:	b480      	push	{r7}
 800f970:	b087      	sub	sp, #28
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	3301      	adds	r3, #1
 800f984:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f98c:	8a3b      	ldrh	r3, [r7, #16]
 800f98e:	021b      	lsls	r3, r3, #8
 800f990:	b21a      	sxth	r2, r3
 800f992:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f996:	4313      	orrs	r3, r2
 800f998:	b21b      	sxth	r3, r3
 800f99a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f99c:	89fb      	ldrh	r3, [r7, #14]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	371c      	adds	r7, #28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
	...

0800f9ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9c2:	2b40      	cmp	r3, #64	@ 0x40
 800f9c4:	d005      	beq.n	800f9d2 <USBD_StdDevReq+0x26>
 800f9c6:	2b40      	cmp	r3, #64	@ 0x40
 800f9c8:	d857      	bhi.n	800fa7a <USBD_StdDevReq+0xce>
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00f      	beq.n	800f9ee <USBD_StdDevReq+0x42>
 800f9ce:	2b20      	cmp	r3, #32
 800f9d0:	d153      	bne.n	800fa7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	32ae      	adds	r2, #174	@ 0xae
 800f9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	6839      	ldr	r1, [r7, #0]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	4798      	blx	r3
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f9ec:	e04a      	b.n	800fa84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	785b      	ldrb	r3, [r3, #1]
 800f9f2:	2b09      	cmp	r3, #9
 800f9f4:	d83b      	bhi.n	800fa6e <USBD_StdDevReq+0xc2>
 800f9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9fc <USBD_StdDevReq+0x50>)
 800f9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9fc:	0800fa51 	.word	0x0800fa51
 800fa00:	0800fa65 	.word	0x0800fa65
 800fa04:	0800fa6f 	.word	0x0800fa6f
 800fa08:	0800fa5b 	.word	0x0800fa5b
 800fa0c:	0800fa6f 	.word	0x0800fa6f
 800fa10:	0800fa2f 	.word	0x0800fa2f
 800fa14:	0800fa25 	.word	0x0800fa25
 800fa18:	0800fa6f 	.word	0x0800fa6f
 800fa1c:	0800fa47 	.word	0x0800fa47
 800fa20:	0800fa39 	.word	0x0800fa39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fa24:	6839      	ldr	r1, [r7, #0]
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 fa3c 	bl	800fea4 <USBD_GetDescriptor>
          break;
 800fa2c:	e024      	b.n	800fa78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fa2e:	6839      	ldr	r1, [r7, #0]
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 fba1 	bl	8010178 <USBD_SetAddress>
          break;
 800fa36:	e01f      	b.n	800fa78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fa38:	6839      	ldr	r1, [r7, #0]
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 fbe0 	bl	8010200 <USBD_SetConfig>
 800fa40:	4603      	mov	r3, r0
 800fa42:	73fb      	strb	r3, [r7, #15]
          break;
 800fa44:	e018      	b.n	800fa78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fa46:	6839      	ldr	r1, [r7, #0]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 fc83 	bl	8010354 <USBD_GetConfig>
          break;
 800fa4e:	e013      	b.n	800fa78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fcb4 	bl	80103c0 <USBD_GetStatus>
          break;
 800fa58:	e00e      	b.n	800fa78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 fce3 	bl	8010428 <USBD_SetFeature>
          break;
 800fa62:	e009      	b.n	800fa78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 fd07 	bl	801047a <USBD_ClrFeature>
          break;
 800fa6c:	e004      	b.n	800fa78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fd5e 	bl	8010532 <USBD_CtlError>
          break;
 800fa76:	bf00      	nop
      }
      break;
 800fa78:	e004      	b.n	800fa84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fa7a:	6839      	ldr	r1, [r7, #0]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 fd58 	bl	8010532 <USBD_CtlError>
      break;
 800fa82:	bf00      	nop
  }

  return ret;
 800fa84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop

0800fa90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800faa6:	2b40      	cmp	r3, #64	@ 0x40
 800faa8:	d005      	beq.n	800fab6 <USBD_StdItfReq+0x26>
 800faaa:	2b40      	cmp	r3, #64	@ 0x40
 800faac:	d852      	bhi.n	800fb54 <USBD_StdItfReq+0xc4>
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <USBD_StdItfReq+0x26>
 800fab2:	2b20      	cmp	r3, #32
 800fab4:	d14e      	bne.n	800fb54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	3b01      	subs	r3, #1
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	d840      	bhi.n	800fb46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	889b      	ldrh	r3, [r3, #4]
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	2b01      	cmp	r3, #1
 800facc:	d836      	bhi.n	800fb3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	889b      	ldrh	r3, [r3, #4]
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7ff fedb 	bl	800f892 <USBD_CoreFindIF>
 800fadc:	4603      	mov	r3, r0
 800fade:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fae0:	7bbb      	ldrb	r3, [r7, #14]
 800fae2:	2bff      	cmp	r3, #255	@ 0xff
 800fae4:	d01d      	beq.n	800fb22 <USBD_StdItfReq+0x92>
 800fae6:	7bbb      	ldrb	r3, [r7, #14]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d81a      	bhi.n	800fb22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800faec:	7bba      	ldrb	r2, [r7, #14]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	32ae      	adds	r2, #174	@ 0xae
 800faf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00f      	beq.n	800fb1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fafc:	7bba      	ldrb	r2, [r7, #14]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb04:	7bba      	ldrb	r2, [r7, #14]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	32ae      	adds	r2, #174	@ 0xae
 800fb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	4798      	blx	r3
 800fb16:	4603      	mov	r3, r0
 800fb18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb1a:	e004      	b.n	800fb26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb20:	e001      	b.n	800fb26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fb22:	2303      	movs	r3, #3
 800fb24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	88db      	ldrh	r3, [r3, #6]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d110      	bne.n	800fb50 <USBD_StdItfReq+0xc0>
 800fb2e:	7bfb      	ldrb	r3, [r7, #15]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d10d      	bne.n	800fb50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fed4 	bl	80108e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fb3a:	e009      	b.n	800fb50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fb3c:	6839      	ldr	r1, [r7, #0]
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 fcf7 	bl	8010532 <USBD_CtlError>
          break;
 800fb44:	e004      	b.n	800fb50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fcf2 	bl	8010532 <USBD_CtlError>
          break;
 800fb4e:	e000      	b.n	800fb52 <USBD_StdItfReq+0xc2>
          break;
 800fb50:	bf00      	nop
      }
      break;
 800fb52:	e004      	b.n	800fb5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fb54:	6839      	ldr	r1, [r7, #0]
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fceb 	bl	8010532 <USBD_CtlError>
      break;
 800fb5c:	bf00      	nop
  }

  return ret;
 800fb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800fb72:	2300      	movs	r3, #0
 800fb74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	889b      	ldrh	r3, [r3, #4]
 800fb7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fb84:	2b40      	cmp	r3, #64	@ 0x40
 800fb86:	d007      	beq.n	800fb98 <USBD_StdEPReq+0x30>
 800fb88:	2b40      	cmp	r3, #64	@ 0x40
 800fb8a:	f200 817f 	bhi.w	800fe8c <USBD_StdEPReq+0x324>
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d02a      	beq.n	800fbe8 <USBD_StdEPReq+0x80>
 800fb92:	2b20      	cmp	r3, #32
 800fb94:	f040 817a 	bne.w	800fe8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fb98:	7bbb      	ldrb	r3, [r7, #14]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7ff fe85 	bl	800f8ac <USBD_CoreFindEP>
 800fba2:	4603      	mov	r3, r0
 800fba4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fba6:	7b7b      	ldrb	r3, [r7, #13]
 800fba8:	2bff      	cmp	r3, #255	@ 0xff
 800fbaa:	f000 8174 	beq.w	800fe96 <USBD_StdEPReq+0x32e>
 800fbae:	7b7b      	ldrb	r3, [r7, #13]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	f200 8170 	bhi.w	800fe96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fbb6:	7b7a      	ldrb	r2, [r7, #13]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fbbe:	7b7a      	ldrb	r2, [r7, #13]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	32ae      	adds	r2, #174	@ 0xae
 800fbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 8163 	beq.w	800fe96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fbd0:	7b7a      	ldrb	r2, [r7, #13]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	32ae      	adds	r2, #174	@ 0xae
 800fbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	6839      	ldr	r1, [r7, #0]
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	4798      	blx	r3
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fbe6:	e156      	b.n	800fe96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	785b      	ldrb	r3, [r3, #1]
 800fbec:	2b03      	cmp	r3, #3
 800fbee:	d008      	beq.n	800fc02 <USBD_StdEPReq+0x9a>
 800fbf0:	2b03      	cmp	r3, #3
 800fbf2:	f300 8145 	bgt.w	800fe80 <USBD_StdEPReq+0x318>
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f000 809b 	beq.w	800fd32 <USBD_StdEPReq+0x1ca>
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d03c      	beq.n	800fc7a <USBD_StdEPReq+0x112>
 800fc00:	e13e      	b.n	800fe80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d002      	beq.n	800fc14 <USBD_StdEPReq+0xac>
 800fc0e:	2b03      	cmp	r3, #3
 800fc10:	d016      	beq.n	800fc40 <USBD_StdEPReq+0xd8>
 800fc12:	e02c      	b.n	800fc6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00d      	beq.n	800fc36 <USBD_StdEPReq+0xce>
 800fc1a:	7bbb      	ldrb	r3, [r7, #14]
 800fc1c:	2b80      	cmp	r3, #128	@ 0x80
 800fc1e:	d00a      	beq.n	800fc36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc20:	7bbb      	ldrb	r3, [r7, #14]
 800fc22:	4619      	mov	r1, r3
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7ff fa25 	bl	800f074 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc2a:	2180      	movs	r1, #128	@ 0x80
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7ff fa21 	bl	800f074 <USBD_LL_StallEP>
 800fc32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc34:	e020      	b.n	800fc78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 fc7a 	bl	8010532 <USBD_CtlError>
              break;
 800fc3e:	e01b      	b.n	800fc78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	885b      	ldrh	r3, [r3, #2]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10e      	bne.n	800fc66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc48:	7bbb      	ldrb	r3, [r7, #14]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00b      	beq.n	800fc66 <USBD_StdEPReq+0xfe>
 800fc4e:	7bbb      	ldrb	r3, [r7, #14]
 800fc50:	2b80      	cmp	r3, #128	@ 0x80
 800fc52:	d008      	beq.n	800fc66 <USBD_StdEPReq+0xfe>
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	88db      	ldrh	r3, [r3, #6]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d104      	bne.n	800fc66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc5c:	7bbb      	ldrb	r3, [r7, #14]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7ff fa07 	bl	800f074 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 fe3b 	bl	80108e2 <USBD_CtlSendStatus>

              break;
 800fc6c:	e004      	b.n	800fc78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fc5e 	bl	8010532 <USBD_CtlError>
              break;
 800fc76:	bf00      	nop
          }
          break;
 800fc78:	e107      	b.n	800fe8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	2b02      	cmp	r3, #2
 800fc84:	d002      	beq.n	800fc8c <USBD_StdEPReq+0x124>
 800fc86:	2b03      	cmp	r3, #3
 800fc88:	d016      	beq.n	800fcb8 <USBD_StdEPReq+0x150>
 800fc8a:	e04b      	b.n	800fd24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc8c:	7bbb      	ldrb	r3, [r7, #14]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d00d      	beq.n	800fcae <USBD_StdEPReq+0x146>
 800fc92:	7bbb      	ldrb	r3, [r7, #14]
 800fc94:	2b80      	cmp	r3, #128	@ 0x80
 800fc96:	d00a      	beq.n	800fcae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc98:	7bbb      	ldrb	r3, [r7, #14]
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7ff f9e9 	bl	800f074 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fca2:	2180      	movs	r1, #128	@ 0x80
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff f9e5 	bl	800f074 <USBD_LL_StallEP>
 800fcaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fcac:	e040      	b.n	800fd30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fcae:	6839      	ldr	r1, [r7, #0]
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 fc3e 	bl	8010532 <USBD_CtlError>
              break;
 800fcb6:	e03b      	b.n	800fd30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	885b      	ldrh	r3, [r3, #2]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d136      	bne.n	800fd2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fcc0:	7bbb      	ldrb	r3, [r7, #14]
 800fcc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d004      	beq.n	800fcd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fcca:	7bbb      	ldrb	r3, [r7, #14]
 800fccc:	4619      	mov	r1, r3
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7ff f9e9 	bl	800f0a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 fe04 	bl	80108e2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fcda:	7bbb      	ldrb	r3, [r7, #14]
 800fcdc:	4619      	mov	r1, r3
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7ff fde4 	bl	800f8ac <USBD_CoreFindEP>
 800fce4:	4603      	mov	r3, r0
 800fce6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fce8:	7b7b      	ldrb	r3, [r7, #13]
 800fcea:	2bff      	cmp	r3, #255	@ 0xff
 800fcec:	d01f      	beq.n	800fd2e <USBD_StdEPReq+0x1c6>
 800fcee:	7b7b      	ldrb	r3, [r7, #13]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d81c      	bhi.n	800fd2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fcf4:	7b7a      	ldrb	r2, [r7, #13]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fcfc:	7b7a      	ldrb	r2, [r7, #13]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	32ae      	adds	r2, #174	@ 0xae
 800fd02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d010      	beq.n	800fd2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fd0c:	7b7a      	ldrb	r2, [r7, #13]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	32ae      	adds	r2, #174	@ 0xae
 800fd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	6839      	ldr	r1, [r7, #0]
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	4798      	blx	r3
 800fd1e:	4603      	mov	r3, r0
 800fd20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fd22:	e004      	b.n	800fd2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fd24:	6839      	ldr	r1, [r7, #0]
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fc03 	bl	8010532 <USBD_CtlError>
              break;
 800fd2c:	e000      	b.n	800fd30 <USBD_StdEPReq+0x1c8>
              break;
 800fd2e:	bf00      	nop
          }
          break;
 800fd30:	e0ab      	b.n	800fe8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	2b02      	cmp	r3, #2
 800fd3c:	d002      	beq.n	800fd44 <USBD_StdEPReq+0x1dc>
 800fd3e:	2b03      	cmp	r3, #3
 800fd40:	d032      	beq.n	800fda8 <USBD_StdEPReq+0x240>
 800fd42:	e097      	b.n	800fe74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd44:	7bbb      	ldrb	r3, [r7, #14]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d007      	beq.n	800fd5a <USBD_StdEPReq+0x1f2>
 800fd4a:	7bbb      	ldrb	r3, [r7, #14]
 800fd4c:	2b80      	cmp	r3, #128	@ 0x80
 800fd4e:	d004      	beq.n	800fd5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fd50:	6839      	ldr	r1, [r7, #0]
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 fbed 	bl	8010532 <USBD_CtlError>
                break;
 800fd58:	e091      	b.n	800fe7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	da0b      	bge.n	800fd7a <USBD_StdEPReq+0x212>
 800fd62:	7bbb      	ldrb	r3, [r7, #14]
 800fd64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fd68:	4613      	mov	r3, r2
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	4413      	add	r3, r2
 800fd6e:	009b      	lsls	r3, r3, #2
 800fd70:	3310      	adds	r3, #16
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	4413      	add	r3, r2
 800fd76:	3304      	adds	r3, #4
 800fd78:	e00b      	b.n	800fd92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fd7a:	7bbb      	ldrb	r3, [r7, #14]
 800fd7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd80:	4613      	mov	r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	4413      	add	r3, r2
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	4413      	add	r3, r2
 800fd90:	3304      	adds	r3, #4
 800fd92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2200      	movs	r2, #0
 800fd98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	4619      	mov	r1, r3
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fd44 	bl	801082e <USBD_CtlSendData>
              break;
 800fda6:	e06a      	b.n	800fe7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fda8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	da11      	bge.n	800fdd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fdb0:	7bbb      	ldrb	r3, [r7, #14]
 800fdb2:	f003 020f 	and.w	r2, r3, #15
 800fdb6:	6879      	ldr	r1, [r7, #4]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	440b      	add	r3, r1
 800fdc2:	3324      	adds	r3, #36	@ 0x24
 800fdc4:	881b      	ldrh	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d117      	bne.n	800fdfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fdca:	6839      	ldr	r1, [r7, #0]
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 fbb0 	bl	8010532 <USBD_CtlError>
                  break;
 800fdd2:	e054      	b.n	800fe7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fdd4:	7bbb      	ldrb	r3, [r7, #14]
 800fdd6:	f003 020f 	and.w	r2, r3, #15
 800fdda:	6879      	ldr	r1, [r7, #4]
 800fddc:	4613      	mov	r3, r2
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	4413      	add	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	440b      	add	r3, r1
 800fde6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fdea:	881b      	ldrh	r3, [r3, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d104      	bne.n	800fdfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fdf0:	6839      	ldr	r1, [r7, #0]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fb9d 	bl	8010532 <USBD_CtlError>
                  break;
 800fdf8:	e041      	b.n	800fe7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	da0b      	bge.n	800fe1a <USBD_StdEPReq+0x2b2>
 800fe02:	7bbb      	ldrb	r3, [r7, #14]
 800fe04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fe08:	4613      	mov	r3, r2
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	4413      	add	r3, r2
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	3310      	adds	r3, #16
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	4413      	add	r3, r2
 800fe16:	3304      	adds	r3, #4
 800fe18:	e00b      	b.n	800fe32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe1a:	7bbb      	ldrb	r3, [r7, #14]
 800fe1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe20:	4613      	mov	r3, r2
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	4413      	add	r3, r2
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	4413      	add	r3, r2
 800fe30:	3304      	adds	r3, #4
 800fe32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe34:	7bbb      	ldrb	r3, [r7, #14]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d002      	beq.n	800fe40 <USBD_StdEPReq+0x2d8>
 800fe3a:	7bbb      	ldrb	r3, [r7, #14]
 800fe3c:	2b80      	cmp	r3, #128	@ 0x80
 800fe3e:	d103      	bne.n	800fe48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	2200      	movs	r2, #0
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	e00e      	b.n	800fe66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe48:	7bbb      	ldrb	r3, [r7, #14]
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7ff f943 	bl	800f0d8 <USBD_LL_IsStallEP>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d003      	beq.n	800fe60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	e002      	b.n	800fe66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2202      	movs	r2, #2
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 fcde 	bl	801082e <USBD_CtlSendData>
              break;
 800fe72:	e004      	b.n	800fe7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fe74:	6839      	ldr	r1, [r7, #0]
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 fb5b 	bl	8010532 <USBD_CtlError>
              break;
 800fe7c:	bf00      	nop
          }
          break;
 800fe7e:	e004      	b.n	800fe8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fe80:	6839      	ldr	r1, [r7, #0]
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fb55 	bl	8010532 <USBD_CtlError>
          break;
 800fe88:	bf00      	nop
      }
      break;
 800fe8a:	e005      	b.n	800fe98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fe8c:	6839      	ldr	r1, [r7, #0]
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fb4f 	bl	8010532 <USBD_CtlError>
      break;
 800fe94:	e000      	b.n	800fe98 <USBD_StdEPReq+0x330>
      break;
 800fe96:	bf00      	nop
  }

  return ret;
 800fe98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3710      	adds	r7, #16
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
	...

0800fea4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800feae:	2300      	movs	r3, #0
 800feb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800feb2:	2300      	movs	r3, #0
 800feb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800feb6:	2300      	movs	r3, #0
 800feb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	885b      	ldrh	r3, [r3, #2]
 800febe:	0a1b      	lsrs	r3, r3, #8
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	3b01      	subs	r3, #1
 800fec4:	2b06      	cmp	r3, #6
 800fec6:	f200 8128 	bhi.w	801011a <USBD_GetDescriptor+0x276>
 800feca:	a201      	add	r2, pc, #4	@ (adr r2, 800fed0 <USBD_GetDescriptor+0x2c>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800feed 	.word	0x0800feed
 800fed4:	0800ff05 	.word	0x0800ff05
 800fed8:	0800ff45 	.word	0x0800ff45
 800fedc:	0801011b 	.word	0x0801011b
 800fee0:	0801011b 	.word	0x0801011b
 800fee4:	080100bb 	.word	0x080100bb
 800fee8:	080100e7 	.word	0x080100e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	7c12      	ldrb	r2, [r2, #16]
 800fef8:	f107 0108 	add.w	r1, r7, #8
 800fefc:	4610      	mov	r0, r2
 800fefe:	4798      	blx	r3
 800ff00:	60f8      	str	r0, [r7, #12]
      break;
 800ff02:	e112      	b.n	801012a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	7c1b      	ldrb	r3, [r3, #16]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d10d      	bne.n	800ff28 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff14:	f107 0208 	add.w	r2, r7, #8
 800ff18:	4610      	mov	r0, r2
 800ff1a:	4798      	blx	r3
 800ff1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3301      	adds	r3, #1
 800ff22:	2202      	movs	r2, #2
 800ff24:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ff26:	e100      	b.n	801012a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff30:	f107 0208 	add.w	r2, r7, #8
 800ff34:	4610      	mov	r0, r2
 800ff36:	4798      	blx	r3
 800ff38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	2202      	movs	r2, #2
 800ff40:	701a      	strb	r2, [r3, #0]
      break;
 800ff42:	e0f2      	b.n	801012a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	885b      	ldrh	r3, [r3, #2]
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b05      	cmp	r3, #5
 800ff4c:	f200 80ac 	bhi.w	80100a8 <USBD_GetDescriptor+0x204>
 800ff50:	a201      	add	r2, pc, #4	@ (adr r2, 800ff58 <USBD_GetDescriptor+0xb4>)
 800ff52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff56:	bf00      	nop
 800ff58:	0800ff71 	.word	0x0800ff71
 800ff5c:	0800ffa5 	.word	0x0800ffa5
 800ff60:	0800ffd9 	.word	0x0800ffd9
 800ff64:	0801000d 	.word	0x0801000d
 800ff68:	08010041 	.word	0x08010041
 800ff6c:	08010075 	.word	0x08010075
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d00b      	beq.n	800ff94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	7c12      	ldrb	r2, [r2, #16]
 800ff88:	f107 0108 	add.w	r1, r7, #8
 800ff8c:	4610      	mov	r0, r2
 800ff8e:	4798      	blx	r3
 800ff90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff92:	e091      	b.n	80100b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff94:	6839      	ldr	r1, [r7, #0]
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 facb 	bl	8010532 <USBD_CtlError>
            err++;
 800ff9c:	7afb      	ldrb	r3, [r7, #11]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	72fb      	strb	r3, [r7, #11]
          break;
 800ffa2:	e089      	b.n	80100b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d00b      	beq.n	800ffc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	7c12      	ldrb	r2, [r2, #16]
 800ffbc:	f107 0108 	add.w	r1, r7, #8
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	4798      	blx	r3
 800ffc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffc6:	e077      	b.n	80100b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ffc8:	6839      	ldr	r1, [r7, #0]
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 fab1 	bl	8010532 <USBD_CtlError>
            err++;
 800ffd0:	7afb      	ldrb	r3, [r7, #11]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	72fb      	strb	r3, [r7, #11]
          break;
 800ffd6:	e06f      	b.n	80100b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d00b      	beq.n	800fffc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	7c12      	ldrb	r2, [r2, #16]
 800fff0:	f107 0108 	add.w	r1, r7, #8
 800fff4:	4610      	mov	r0, r2
 800fff6:	4798      	blx	r3
 800fff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fffa:	e05d      	b.n	80100b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fffc:	6839      	ldr	r1, [r7, #0]
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f000 fa97 	bl	8010532 <USBD_CtlError>
            err++;
 8010004:	7afb      	ldrb	r3, [r7, #11]
 8010006:	3301      	adds	r3, #1
 8010008:	72fb      	strb	r3, [r7, #11]
          break;
 801000a:	e055      	b.n	80100b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010012:	691b      	ldr	r3, [r3, #16]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d00b      	beq.n	8010030 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801001e:	691b      	ldr	r3, [r3, #16]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	7c12      	ldrb	r2, [r2, #16]
 8010024:	f107 0108 	add.w	r1, r7, #8
 8010028:	4610      	mov	r0, r2
 801002a:	4798      	blx	r3
 801002c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801002e:	e043      	b.n	80100b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010030:	6839      	ldr	r1, [r7, #0]
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 fa7d 	bl	8010532 <USBD_CtlError>
            err++;
 8010038:	7afb      	ldrb	r3, [r7, #11]
 801003a:	3301      	adds	r3, #1
 801003c:	72fb      	strb	r3, [r7, #11]
          break;
 801003e:	e03b      	b.n	80100b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010046:	695b      	ldr	r3, [r3, #20]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00b      	beq.n	8010064 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010052:	695b      	ldr	r3, [r3, #20]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	7c12      	ldrb	r2, [r2, #16]
 8010058:	f107 0108 	add.w	r1, r7, #8
 801005c:	4610      	mov	r0, r2
 801005e:	4798      	blx	r3
 8010060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010062:	e029      	b.n	80100b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010064:	6839      	ldr	r1, [r7, #0]
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 fa63 	bl	8010532 <USBD_CtlError>
            err++;
 801006c:	7afb      	ldrb	r3, [r7, #11]
 801006e:	3301      	adds	r3, #1
 8010070:	72fb      	strb	r3, [r7, #11]
          break;
 8010072:	e021      	b.n	80100b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801007a:	699b      	ldr	r3, [r3, #24]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d00b      	beq.n	8010098 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010086:	699b      	ldr	r3, [r3, #24]
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	7c12      	ldrb	r2, [r2, #16]
 801008c:	f107 0108 	add.w	r1, r7, #8
 8010090:	4610      	mov	r0, r2
 8010092:	4798      	blx	r3
 8010094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010096:	e00f      	b.n	80100b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010098:	6839      	ldr	r1, [r7, #0]
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fa49 	bl	8010532 <USBD_CtlError>
            err++;
 80100a0:	7afb      	ldrb	r3, [r7, #11]
 80100a2:	3301      	adds	r3, #1
 80100a4:	72fb      	strb	r3, [r7, #11]
          break;
 80100a6:	e007      	b.n	80100b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 fa41 	bl	8010532 <USBD_CtlError>
          err++;
 80100b0:	7afb      	ldrb	r3, [r7, #11]
 80100b2:	3301      	adds	r3, #1
 80100b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80100b6:	bf00      	nop
      }
      break;
 80100b8:	e037      	b.n	801012a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	7c1b      	ldrb	r3, [r3, #16]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d109      	bne.n	80100d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100ca:	f107 0208 	add.w	r2, r7, #8
 80100ce:	4610      	mov	r0, r2
 80100d0:	4798      	blx	r3
 80100d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80100d4:	e029      	b.n	801012a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80100d6:	6839      	ldr	r1, [r7, #0]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fa2a 	bl	8010532 <USBD_CtlError>
        err++;
 80100de:	7afb      	ldrb	r3, [r7, #11]
 80100e0:	3301      	adds	r3, #1
 80100e2:	72fb      	strb	r3, [r7, #11]
      break;
 80100e4:	e021      	b.n	801012a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7c1b      	ldrb	r3, [r3, #16]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d10d      	bne.n	801010a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100f6:	f107 0208 	add.w	r2, r7, #8
 80100fa:	4610      	mov	r0, r2
 80100fc:	4798      	blx	r3
 80100fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	3301      	adds	r3, #1
 8010104:	2207      	movs	r2, #7
 8010106:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010108:	e00f      	b.n	801012a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801010a:	6839      	ldr	r1, [r7, #0]
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fa10 	bl	8010532 <USBD_CtlError>
        err++;
 8010112:	7afb      	ldrb	r3, [r7, #11]
 8010114:	3301      	adds	r3, #1
 8010116:	72fb      	strb	r3, [r7, #11]
      break;
 8010118:	e007      	b.n	801012a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801011a:	6839      	ldr	r1, [r7, #0]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 fa08 	bl	8010532 <USBD_CtlError>
      err++;
 8010122:	7afb      	ldrb	r3, [r7, #11]
 8010124:	3301      	adds	r3, #1
 8010126:	72fb      	strb	r3, [r7, #11]
      break;
 8010128:	bf00      	nop
  }

  if (err != 0U)
 801012a:	7afb      	ldrb	r3, [r7, #11]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d11e      	bne.n	801016e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	88db      	ldrh	r3, [r3, #6]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d016      	beq.n	8010166 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010138:	893b      	ldrh	r3, [r7, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d00e      	beq.n	801015c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	88da      	ldrh	r2, [r3, #6]
 8010142:	893b      	ldrh	r3, [r7, #8]
 8010144:	4293      	cmp	r3, r2
 8010146:	bf28      	it	cs
 8010148:	4613      	movcs	r3, r2
 801014a:	b29b      	uxth	r3, r3
 801014c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801014e:	893b      	ldrh	r3, [r7, #8]
 8010150:	461a      	mov	r2, r3
 8010152:	68f9      	ldr	r1, [r7, #12]
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fb6a 	bl	801082e <USBD_CtlSendData>
 801015a:	e009      	b.n	8010170 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801015c:	6839      	ldr	r1, [r7, #0]
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 f9e7 	bl	8010532 <USBD_CtlError>
 8010164:	e004      	b.n	8010170 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 fbbb 	bl	80108e2 <USBD_CtlSendStatus>
 801016c:	e000      	b.n	8010170 <USBD_GetDescriptor+0x2cc>
    return;
 801016e:	bf00      	nop
  }
}
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop

08010178 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	889b      	ldrh	r3, [r3, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d131      	bne.n	80101ee <USBD_SetAddress+0x76>
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	88db      	ldrh	r3, [r3, #6]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d12d      	bne.n	80101ee <USBD_SetAddress+0x76>
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	885b      	ldrh	r3, [r3, #2]
 8010196:	2b7f      	cmp	r3, #127	@ 0x7f
 8010198:	d829      	bhi.n	80101ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	885b      	ldrh	r3, [r3, #2]
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	2b03      	cmp	r3, #3
 80101b0:	d104      	bne.n	80101bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80101b2:	6839      	ldr	r1, [r7, #0]
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 f9bc 	bl	8010532 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101ba:	e01d      	b.n	80101f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	7bfa      	ldrb	r2, [r7, #15]
 80101c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
 80101c6:	4619      	mov	r1, r3
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7fe ffb1 	bl	800f130 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 fb87 	bl	80108e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80101d4:	7bfb      	ldrb	r3, [r7, #15]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d004      	beq.n	80101e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2202      	movs	r2, #2
 80101de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101e2:	e009      	b.n	80101f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101ec:	e004      	b.n	80101f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80101ee:	6839      	ldr	r1, [r7, #0]
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 f99e 	bl	8010532 <USBD_CtlError>
  }
}
 80101f6:	bf00      	nop
 80101f8:	bf00      	nop
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801020a:	2300      	movs	r3, #0
 801020c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	885b      	ldrh	r3, [r3, #2]
 8010212:	b2da      	uxtb	r2, r3
 8010214:	4b4e      	ldr	r3, [pc, #312]	@ (8010350 <USBD_SetConfig+0x150>)
 8010216:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010218:	4b4d      	ldr	r3, [pc, #308]	@ (8010350 <USBD_SetConfig+0x150>)
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	2b01      	cmp	r3, #1
 801021e:	d905      	bls.n	801022c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 f985 	bl	8010532 <USBD_CtlError>
    return USBD_FAIL;
 8010228:	2303      	movs	r3, #3
 801022a:	e08c      	b.n	8010346 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010232:	b2db      	uxtb	r3, r3
 8010234:	2b02      	cmp	r3, #2
 8010236:	d002      	beq.n	801023e <USBD_SetConfig+0x3e>
 8010238:	2b03      	cmp	r3, #3
 801023a:	d029      	beq.n	8010290 <USBD_SetConfig+0x90>
 801023c:	e075      	b.n	801032a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801023e:	4b44      	ldr	r3, [pc, #272]	@ (8010350 <USBD_SetConfig+0x150>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d020      	beq.n	8010288 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010246:	4b42      	ldr	r3, [pc, #264]	@ (8010350 <USBD_SetConfig+0x150>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	461a      	mov	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010250:	4b3f      	ldr	r3, [pc, #252]	@ (8010350 <USBD_SetConfig+0x150>)
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	4619      	mov	r1, r3
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7ff f8a9 	bl	800f3ae <USBD_SetClassConfig>
 801025c:	4603      	mov	r3, r0
 801025e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010260:	7bfb      	ldrb	r3, [r7, #15]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d008      	beq.n	8010278 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010266:	6839      	ldr	r1, [r7, #0]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 f962 	bl	8010532 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2202      	movs	r2, #2
 8010272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010276:	e065      	b.n	8010344 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 fb32 	bl	80108e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2203      	movs	r2, #3
 8010282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010286:	e05d      	b.n	8010344 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 fb2a 	bl	80108e2 <USBD_CtlSendStatus>
      break;
 801028e:	e059      	b.n	8010344 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010290:	4b2f      	ldr	r3, [pc, #188]	@ (8010350 <USBD_SetConfig+0x150>)
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d112      	bne.n	80102be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2202      	movs	r2, #2
 801029c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80102a0:	4b2b      	ldr	r3, [pc, #172]	@ (8010350 <USBD_SetConfig+0x150>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	461a      	mov	r2, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80102aa:	4b29      	ldr	r3, [pc, #164]	@ (8010350 <USBD_SetConfig+0x150>)
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	4619      	mov	r1, r3
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f7ff f898 	bl	800f3e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 fb13 	bl	80108e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80102bc:	e042      	b.n	8010344 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80102be:	4b24      	ldr	r3, [pc, #144]	@ (8010350 <USBD_SetConfig+0x150>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	461a      	mov	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d02a      	beq.n	8010322 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	4619      	mov	r1, r3
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f7ff f886 	bl	800f3e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80102da:	4b1d      	ldr	r3, [pc, #116]	@ (8010350 <USBD_SetConfig+0x150>)
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80102e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010350 <USBD_SetConfig+0x150>)
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	4619      	mov	r1, r3
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7ff f85f 	bl	800f3ae <USBD_SetClassConfig>
 80102f0:	4603      	mov	r3, r0
 80102f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80102f4:	7bfb      	ldrb	r3, [r7, #15]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00f      	beq.n	801031a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 f918 	bl	8010532 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	b2db      	uxtb	r3, r3
 8010308:	4619      	mov	r1, r3
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7ff f86b 	bl	800f3e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2202      	movs	r2, #2
 8010314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010318:	e014      	b.n	8010344 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fae1 	bl	80108e2 <USBD_CtlSendStatus>
      break;
 8010320:	e010      	b.n	8010344 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fadd 	bl	80108e2 <USBD_CtlSendStatus>
      break;
 8010328:	e00c      	b.n	8010344 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801032a:	6839      	ldr	r1, [r7, #0]
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f900 	bl	8010532 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010332:	4b07      	ldr	r3, [pc, #28]	@ (8010350 <USBD_SetConfig+0x150>)
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	4619      	mov	r1, r3
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7ff f854 	bl	800f3e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801033e:	2303      	movs	r3, #3
 8010340:	73fb      	strb	r3, [r7, #15]
      break;
 8010342:	bf00      	nop
  }

  return ret;
 8010344:	7bfb      	ldrb	r3, [r7, #15]
}
 8010346:	4618      	mov	r0, r3
 8010348:	3710      	adds	r7, #16
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	200015f4 	.word	0x200015f4

08010354 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	88db      	ldrh	r3, [r3, #6]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d004      	beq.n	8010370 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010366:	6839      	ldr	r1, [r7, #0]
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f8e2 	bl	8010532 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801036e:	e023      	b.n	80103b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b02      	cmp	r3, #2
 801037a:	dc02      	bgt.n	8010382 <USBD_GetConfig+0x2e>
 801037c:	2b00      	cmp	r3, #0
 801037e:	dc03      	bgt.n	8010388 <USBD_GetConfig+0x34>
 8010380:	e015      	b.n	80103ae <USBD_GetConfig+0x5a>
 8010382:	2b03      	cmp	r3, #3
 8010384:	d00b      	beq.n	801039e <USBD_GetConfig+0x4a>
 8010386:	e012      	b.n	80103ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3308      	adds	r3, #8
 8010392:	2201      	movs	r2, #1
 8010394:	4619      	mov	r1, r3
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 fa49 	bl	801082e <USBD_CtlSendData>
        break;
 801039c:	e00c      	b.n	80103b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	3304      	adds	r3, #4
 80103a2:	2201      	movs	r2, #1
 80103a4:	4619      	mov	r1, r3
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 fa41 	bl	801082e <USBD_CtlSendData>
        break;
 80103ac:	e004      	b.n	80103b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80103ae:	6839      	ldr	r1, [r7, #0]
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 f8be 	bl	8010532 <USBD_CtlError>
        break;
 80103b6:	bf00      	nop
}
 80103b8:	bf00      	nop
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	3b01      	subs	r3, #1
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d81e      	bhi.n	8010416 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	88db      	ldrh	r3, [r3, #6]
 80103dc:	2b02      	cmp	r3, #2
 80103de:	d004      	beq.n	80103ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80103e0:	6839      	ldr	r1, [r7, #0]
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 f8a5 	bl	8010532 <USBD_CtlError>
        break;
 80103e8:	e01a      	b.n	8010420 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2201      	movs	r2, #1
 80103ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d005      	beq.n	8010406 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	f043 0202 	orr.w	r2, r3, #2
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	330c      	adds	r3, #12
 801040a:	2202      	movs	r2, #2
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fa0d 	bl	801082e <USBD_CtlSendData>
      break;
 8010414:	e004      	b.n	8010420 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010416:	6839      	ldr	r1, [r7, #0]
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f000 f88a 	bl	8010532 <USBD_CtlError>
      break;
 801041e:	bf00      	nop
  }
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	885b      	ldrh	r3, [r3, #2]
 8010436:	2b01      	cmp	r3, #1
 8010438:	d107      	bne.n	801044a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2201      	movs	r2, #1
 801043e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 fa4d 	bl	80108e2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010448:	e013      	b.n	8010472 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	885b      	ldrh	r3, [r3, #2]
 801044e:	2b02      	cmp	r3, #2
 8010450:	d10b      	bne.n	801046a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	889b      	ldrh	r3, [r3, #4]
 8010456:	0a1b      	lsrs	r3, r3, #8
 8010458:	b29b      	uxth	r3, r3
 801045a:	b2da      	uxtb	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 fa3d 	bl	80108e2 <USBD_CtlSendStatus>
}
 8010468:	e003      	b.n	8010472 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801046a:	6839      	ldr	r1, [r7, #0]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f000 f860 	bl	8010532 <USBD_CtlError>
}
 8010472:	bf00      	nop
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b082      	sub	sp, #8
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
 8010482:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801048a:	b2db      	uxtb	r3, r3
 801048c:	3b01      	subs	r3, #1
 801048e:	2b02      	cmp	r3, #2
 8010490:	d80b      	bhi.n	80104aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	885b      	ldrh	r3, [r3, #2]
 8010496:	2b01      	cmp	r3, #1
 8010498:	d10c      	bne.n	80104b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2200      	movs	r2, #0
 801049e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 fa1d 	bl	80108e2 <USBD_CtlSendStatus>
      }
      break;
 80104a8:	e004      	b.n	80104b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80104aa:	6839      	ldr	r1, [r7, #0]
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f840 	bl	8010532 <USBD_CtlError>
      break;
 80104b2:	e000      	b.n	80104b6 <USBD_ClrFeature+0x3c>
      break;
 80104b4:	bf00      	nop
  }
}
 80104b6:	bf00      	nop
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b084      	sub	sp, #16
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	781a      	ldrb	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	3301      	adds	r3, #1
 80104d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	781a      	ldrb	r2, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3301      	adds	r3, #1
 80104e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80104e8:	68f8      	ldr	r0, [r7, #12]
 80104ea:	f7ff fa40 	bl	800f96e <SWAPBYTE>
 80104ee:	4603      	mov	r3, r0
 80104f0:	461a      	mov	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	3301      	adds	r3, #1
 80104fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	3301      	adds	r3, #1
 8010500:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010502:	68f8      	ldr	r0, [r7, #12]
 8010504:	f7ff fa33 	bl	800f96e <SWAPBYTE>
 8010508:	4603      	mov	r3, r0
 801050a:	461a      	mov	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	3301      	adds	r3, #1
 8010514:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	3301      	adds	r3, #1
 801051a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801051c:	68f8      	ldr	r0, [r7, #12]
 801051e:	f7ff fa26 	bl	800f96e <SWAPBYTE>
 8010522:	4603      	mov	r3, r0
 8010524:	461a      	mov	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	80da      	strh	r2, [r3, #6]
}
 801052a:	bf00      	nop
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b082      	sub	sp, #8
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801053c:	2180      	movs	r1, #128	@ 0x80
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f7fe fd98 	bl	800f074 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010544:	2100      	movs	r1, #0
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7fe fd94 	bl	800f074 <USBD_LL_StallEP>
}
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b086      	sub	sp, #24
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010560:	2300      	movs	r3, #0
 8010562:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d036      	beq.n	80105d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801056e:	6938      	ldr	r0, [r7, #16]
 8010570:	f000 f836 	bl	80105e0 <USBD_GetLen>
 8010574:	4603      	mov	r3, r0
 8010576:	3301      	adds	r3, #1
 8010578:	b29b      	uxth	r3, r3
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	b29a      	uxth	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010582:	7dfb      	ldrb	r3, [r7, #23]
 8010584:	68ba      	ldr	r2, [r7, #8]
 8010586:	4413      	add	r3, r2
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	7812      	ldrb	r2, [r2, #0]
 801058c:	701a      	strb	r2, [r3, #0]
  idx++;
 801058e:	7dfb      	ldrb	r3, [r7, #23]
 8010590:	3301      	adds	r3, #1
 8010592:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010594:	7dfb      	ldrb	r3, [r7, #23]
 8010596:	68ba      	ldr	r2, [r7, #8]
 8010598:	4413      	add	r3, r2
 801059a:	2203      	movs	r2, #3
 801059c:	701a      	strb	r2, [r3, #0]
  idx++;
 801059e:	7dfb      	ldrb	r3, [r7, #23]
 80105a0:	3301      	adds	r3, #1
 80105a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80105a4:	e013      	b.n	80105ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80105a6:	7dfb      	ldrb	r3, [r7, #23]
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	4413      	add	r3, r2
 80105ac:	693a      	ldr	r2, [r7, #16]
 80105ae:	7812      	ldrb	r2, [r2, #0]
 80105b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	3301      	adds	r3, #1
 80105b6:	613b      	str	r3, [r7, #16]
    idx++;
 80105b8:	7dfb      	ldrb	r3, [r7, #23]
 80105ba:	3301      	adds	r3, #1
 80105bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80105be:	7dfb      	ldrb	r3, [r7, #23]
 80105c0:	68ba      	ldr	r2, [r7, #8]
 80105c2:	4413      	add	r3, r2
 80105c4:	2200      	movs	r2, #0
 80105c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80105c8:	7dfb      	ldrb	r3, [r7, #23]
 80105ca:	3301      	adds	r3, #1
 80105cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d1e7      	bne.n	80105a6 <USBD_GetString+0x52>
 80105d6:	e000      	b.n	80105da <USBD_GetString+0x86>
    return;
 80105d8:	bf00      	nop
  }
}
 80105da:	3718      	adds	r7, #24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80105e8:	2300      	movs	r3, #0
 80105ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80105f0:	e005      	b.n	80105fe <USBD_GetLen+0x1e>
  {
    len++;
 80105f2:	7bfb      	ldrb	r3, [r7, #15]
 80105f4:	3301      	adds	r3, #1
 80105f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	3301      	adds	r3, #1
 80105fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1f5      	bne.n	80105f2 <USBD_GetLen+0x12>
  }

  return len;
 8010606:	7bfb      	ldrb	r3, [r7, #15]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3714      	adds	r7, #20
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	4603      	mov	r3, r0
 801061c:	6039      	str	r1, [r7, #0]
 801061e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	2212      	movs	r2, #18
 8010624:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8010626:	4b03      	ldr	r3, [pc, #12]	@ (8010634 <USBD_Class_DeviceDescriptor+0x20>)
}
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr
 8010634:	20000100 	.word	0x20000100

08010638 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010638:	b480      	push	{r7}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
 801063e:	4603      	mov	r3, r0
 8010640:	6039      	str	r1, [r7, #0]
 8010642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	2204      	movs	r2, #4
 8010648:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 801064a:	4b03      	ldr	r3, [pc, #12]	@ (8010658 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 801064c:	4618      	mov	r0, r3
 801064e:	370c      	adds	r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr
 8010658:	20000114 	.word	0x20000114

0801065c <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	4603      	mov	r3, r0
 8010664:	6039      	str	r1, [r7, #0]
 8010666:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010668:	79fb      	ldrb	r3, [r7, #7]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d105      	bne.n	801067a <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	4907      	ldr	r1, [pc, #28]	@ (8010690 <USBD_Class_ProductStrDescriptor+0x34>)
 8010672:	4808      	ldr	r0, [pc, #32]	@ (8010694 <USBD_Class_ProductStrDescriptor+0x38>)
 8010674:	f7ff ff6e 	bl	8010554 <USBD_GetString>
 8010678:	e004      	b.n	8010684 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	4904      	ldr	r1, [pc, #16]	@ (8010690 <USBD_Class_ProductStrDescriptor+0x34>)
 801067e:	4805      	ldr	r0, [pc, #20]	@ (8010694 <USBD_Class_ProductStrDescriptor+0x38>)
 8010680:	f7ff ff68 	bl	8010554 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010684:	4b02      	ldr	r3, [pc, #8]	@ (8010690 <USBD_Class_ProductStrDescriptor+0x34>)
}
 8010686:	4618      	mov	r0, r3
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
 801068e:	bf00      	nop
 8010690:	200015f8 	.word	0x200015f8
 8010694:	08015298 	.word	0x08015298

08010698 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	4603      	mov	r3, r0
 80106a0:	6039      	str	r1, [r7, #0]
 80106a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	4904      	ldr	r1, [pc, #16]	@ (80106b8 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 80106a8:	4804      	ldr	r0, [pc, #16]	@ (80106bc <USBD_Class_ManufacturerStrDescriptor+0x24>)
 80106aa:	f7ff ff53 	bl	8010554 <USBD_GetString>
  return USBD_StrDesc;
 80106ae:	4b02      	ldr	r3, [pc, #8]	@ (80106b8 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	200015f8 	.word	0x200015f8
 80106bc:	080152b0 	.word	0x080152b0

080106c0 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	4603      	mov	r3, r0
 80106c8:	6039      	str	r1, [r7, #0]
 80106ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	221a      	movs	r2, #26
 80106d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80106d2:	f000 f843 	bl	801075c <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 80106d6:	4b02      	ldr	r3, [pc, #8]	@ (80106e0 <USBD_Class_SerialStrDescriptor+0x20>)
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3708      	adds	r7, #8
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	20000118 	.word	0x20000118

080106e4 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	4603      	mov	r3, r0
 80106ec:	6039      	str	r1, [r7, #0]
 80106ee:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80106f0:	79fb      	ldrb	r3, [r7, #7]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d105      	bne.n	8010702 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	4907      	ldr	r1, [pc, #28]	@ (8010718 <USBD_Class_ConfigStrDescriptor+0x34>)
 80106fa:	4808      	ldr	r0, [pc, #32]	@ (801071c <USBD_Class_ConfigStrDescriptor+0x38>)
 80106fc:	f7ff ff2a 	bl	8010554 <USBD_GetString>
 8010700:	e004      	b.n	801070c <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8010702:	683a      	ldr	r2, [r7, #0]
 8010704:	4904      	ldr	r1, [pc, #16]	@ (8010718 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010706:	4805      	ldr	r0, [pc, #20]	@ (801071c <USBD_Class_ConfigStrDescriptor+0x38>)
 8010708:	f7ff ff24 	bl	8010554 <USBD_GetString>
  }
  return USBD_StrDesc;
 801070c:	4b02      	ldr	r3, [pc, #8]	@ (8010718 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 801070e:	4618      	mov	r0, r3
 8010710:	3708      	adds	r7, #8
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	200015f8 	.word	0x200015f8
 801071c:	080152c4 	.word	0x080152c4

08010720 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	af00      	add	r7, sp, #0
 8010726:	4603      	mov	r3, r0
 8010728:	6039      	str	r1, [r7, #0]
 801072a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801072c:	79fb      	ldrb	r3, [r7, #7]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d105      	bne.n	801073e <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8010732:	683a      	ldr	r2, [r7, #0]
 8010734:	4907      	ldr	r1, [pc, #28]	@ (8010754 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8010736:	4808      	ldr	r0, [pc, #32]	@ (8010758 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8010738:	f7ff ff0c 	bl	8010554 <USBD_GetString>
 801073c:	e004      	b.n	8010748 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 801073e:	683a      	ldr	r2, [r7, #0]
 8010740:	4904      	ldr	r1, [pc, #16]	@ (8010754 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8010742:	4805      	ldr	r0, [pc, #20]	@ (8010758 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8010744:	f7ff ff06 	bl	8010554 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010748:	4b02      	ldr	r3, [pc, #8]	@ (8010754 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 801074a:	4618      	mov	r0, r3
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	200015f8 	.word	0x200015f8
 8010758:	080152d0 	.word	0x080152d0

0801075c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8010762:	4b0f      	ldr	r3, [pc, #60]	@ (80107a0 <Get_SerialNum+0x44>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8010768:	4b0e      	ldr	r3, [pc, #56]	@ (80107a4 <Get_SerialNum+0x48>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 801076e:	4b0e      	ldr	r3, [pc, #56]	@ (80107a8 <Get_SerialNum+0x4c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4413      	add	r3, r2
 801077a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d009      	beq.n	8010796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8010782:	2208      	movs	r2, #8
 8010784:	4909      	ldr	r1, [pc, #36]	@ (80107ac <Get_SerialNum+0x50>)
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f000 f814 	bl	80107b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 801078c:	2204      	movs	r2, #4
 801078e:	4908      	ldr	r1, [pc, #32]	@ (80107b0 <Get_SerialNum+0x54>)
 8010790:	68b8      	ldr	r0, [r7, #8]
 8010792:	f000 f80f 	bl	80107b4 <IntToUnicode>
  }
}
 8010796:	bf00      	nop
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	0bfa0700 	.word	0x0bfa0700
 80107a4:	0bfa0704 	.word	0x0bfa0704
 80107a8:	0bfa0708 	.word	0x0bfa0708
 80107ac:	2000011a 	.word	0x2000011a
 80107b0:	2000012a 	.word	0x2000012a

080107b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b087      	sub	sp, #28
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	4613      	mov	r3, r2
 80107c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 80107c2:	2300      	movs	r3, #0
 80107c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 80107c6:	2300      	movs	r3, #0
 80107c8:	75fb      	strb	r3, [r7, #23]
 80107ca:	e025      	b.n	8010818 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	0f1b      	lsrs	r3, r3, #28
 80107d0:	2b09      	cmp	r3, #9
 80107d2:	d80a      	bhi.n	80107ea <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	0f1b      	lsrs	r3, r3, #28
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	7dfb      	ldrb	r3, [r7, #23]
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	68b9      	ldr	r1, [r7, #8]
 80107e0:	440b      	add	r3, r1
 80107e2:	3230      	adds	r2, #48	@ 0x30
 80107e4:	b2d2      	uxtb	r2, r2
 80107e6:	701a      	strb	r2, [r3, #0]
 80107e8:	e009      	b.n	80107fe <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	0f1b      	lsrs	r3, r3, #28
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	7dfb      	ldrb	r3, [r7, #23]
 80107f2:	005b      	lsls	r3, r3, #1
 80107f4:	68b9      	ldr	r1, [r7, #8]
 80107f6:	440b      	add	r3, r1
 80107f8:	3237      	adds	r2, #55	@ 0x37
 80107fa:	b2d2      	uxtb	r2, r2
 80107fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	011b      	lsls	r3, r3, #4
 8010802:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8010804:	7dfb      	ldrb	r3, [r7, #23]
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	3301      	adds	r3, #1
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	4413      	add	r3, r2
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	3301      	adds	r3, #1
 8010816:	75fb      	strb	r3, [r7, #23]
 8010818:	7dfa      	ldrb	r2, [r7, #23]
 801081a:	79fb      	ldrb	r3, [r7, #7]
 801081c:	429a      	cmp	r2, r3
 801081e:	d3d5      	bcc.n	80107cc <IntToUnicode+0x18>
  }
}
 8010820:	bf00      	nop
 8010822:	bf00      	nop
 8010824:	371c      	adds	r7, #28
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr

0801082e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801082e:	b580      	push	{r7, lr}
 8010830:	b084      	sub	sp, #16
 8010832:	af00      	add	r7, sp, #0
 8010834:	60f8      	str	r0, [r7, #12]
 8010836:	60b9      	str	r1, [r7, #8]
 8010838:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2202      	movs	r2, #2
 801083e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	68ba      	ldr	r2, [r7, #8]
 8010852:	2100      	movs	r1, #0
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f7fe fc84 	bl	800f162 <USBD_LL_Transmit>

  return USBD_OK;
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	2100      	movs	r1, #0
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f7fe fc73 	bl	800f162 <USBD_LL_Transmit>

  return USBD_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b084      	sub	sp, #16
 801088a:	af00      	add	r7, sp, #0
 801088c:	60f8      	str	r0, [r7, #12]
 801088e:	60b9      	str	r1, [r7, #8]
 8010890:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2203      	movs	r2, #3
 8010896:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	2100      	movs	r1, #0
 80108b0:	68f8      	ldr	r0, [r7, #12]
 80108b2:	f7fe fc71 	bl	800f198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108b6:	2300      	movs	r3, #0
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3710      	adds	r7, #16
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	2100      	movs	r1, #0
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f7fe fc60 	bl	800f198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2204      	movs	r2, #4
 80108ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108f2:	2300      	movs	r3, #0
 80108f4:	2200      	movs	r2, #0
 80108f6:	2100      	movs	r1, #0
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7fe fc32 	bl	800f162 <USBD_LL_Transmit>

  return USBD_OK;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2205      	movs	r2, #5
 8010914:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010918:	2300      	movs	r3, #0
 801091a:	2200      	movs	r2, #0
 801091c:	2100      	movs	r1, #0
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f7fe fc3a 	bl	800f198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <__cvt>:
 801092e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010932:	ec57 6b10 	vmov	r6, r7, d0
 8010936:	2f00      	cmp	r7, #0
 8010938:	460c      	mov	r4, r1
 801093a:	4619      	mov	r1, r3
 801093c:	463b      	mov	r3, r7
 801093e:	bfb4      	ite	lt
 8010940:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010944:	2300      	movge	r3, #0
 8010946:	4691      	mov	r9, r2
 8010948:	bfbf      	itttt	lt
 801094a:	4632      	movlt	r2, r6
 801094c:	461f      	movlt	r7, r3
 801094e:	232d      	movlt	r3, #45	@ 0x2d
 8010950:	4616      	movlt	r6, r2
 8010952:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010956:	700b      	strb	r3, [r1, #0]
 8010958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801095a:	f023 0820 	bic.w	r8, r3, #32
 801095e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010962:	d005      	beq.n	8010970 <__cvt+0x42>
 8010964:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010968:	d100      	bne.n	801096c <__cvt+0x3e>
 801096a:	3401      	adds	r4, #1
 801096c:	2102      	movs	r1, #2
 801096e:	e000      	b.n	8010972 <__cvt+0x44>
 8010970:	2103      	movs	r1, #3
 8010972:	ab03      	add	r3, sp, #12
 8010974:	4622      	mov	r2, r4
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	ab02      	add	r3, sp, #8
 801097a:	ec47 6b10 	vmov	d0, r6, r7
 801097e:	9300      	str	r3, [sp, #0]
 8010980:	4653      	mov	r3, sl
 8010982:	f001 f8d9 	bl	8011b38 <_dtoa_r>
 8010986:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801098a:	4605      	mov	r5, r0
 801098c:	d119      	bne.n	80109c2 <__cvt+0x94>
 801098e:	f019 0f01 	tst.w	r9, #1
 8010992:	d00e      	beq.n	80109b2 <__cvt+0x84>
 8010994:	eb00 0904 	add.w	r9, r0, r4
 8010998:	2200      	movs	r2, #0
 801099a:	2300      	movs	r3, #0
 801099c:	4630      	mov	r0, r6
 801099e:	4639      	mov	r1, r7
 80109a0:	f7f0 f896 	bl	8000ad0 <__aeabi_dcmpeq>
 80109a4:	b108      	cbz	r0, 80109aa <__cvt+0x7c>
 80109a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80109aa:	2230      	movs	r2, #48	@ 0x30
 80109ac:	9b03      	ldr	r3, [sp, #12]
 80109ae:	454b      	cmp	r3, r9
 80109b0:	d31e      	bcc.n	80109f0 <__cvt+0xc2>
 80109b2:	9b03      	ldr	r3, [sp, #12]
 80109b4:	4628      	mov	r0, r5
 80109b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109b8:	1b5b      	subs	r3, r3, r5
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	b004      	add	sp, #16
 80109be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80109c6:	eb00 0904 	add.w	r9, r0, r4
 80109ca:	d1e5      	bne.n	8010998 <__cvt+0x6a>
 80109cc:	7803      	ldrb	r3, [r0, #0]
 80109ce:	2b30      	cmp	r3, #48	@ 0x30
 80109d0:	d10a      	bne.n	80109e8 <__cvt+0xba>
 80109d2:	2200      	movs	r2, #0
 80109d4:	2300      	movs	r3, #0
 80109d6:	4630      	mov	r0, r6
 80109d8:	4639      	mov	r1, r7
 80109da:	f7f0 f879 	bl	8000ad0 <__aeabi_dcmpeq>
 80109de:	b918      	cbnz	r0, 80109e8 <__cvt+0xba>
 80109e0:	f1c4 0401 	rsb	r4, r4, #1
 80109e4:	f8ca 4000 	str.w	r4, [sl]
 80109e8:	f8da 3000 	ldr.w	r3, [sl]
 80109ec:	4499      	add	r9, r3
 80109ee:	e7d3      	b.n	8010998 <__cvt+0x6a>
 80109f0:	1c59      	adds	r1, r3, #1
 80109f2:	9103      	str	r1, [sp, #12]
 80109f4:	701a      	strb	r2, [r3, #0]
 80109f6:	e7d9      	b.n	80109ac <__cvt+0x7e>

080109f8 <__exponent>:
 80109f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109fa:	2900      	cmp	r1, #0
 80109fc:	7002      	strb	r2, [r0, #0]
 80109fe:	bfba      	itte	lt
 8010a00:	4249      	neglt	r1, r1
 8010a02:	232d      	movlt	r3, #45	@ 0x2d
 8010a04:	232b      	movge	r3, #43	@ 0x2b
 8010a06:	2909      	cmp	r1, #9
 8010a08:	7043      	strb	r3, [r0, #1]
 8010a0a:	dd28      	ble.n	8010a5e <__exponent+0x66>
 8010a0c:	f10d 0307 	add.w	r3, sp, #7
 8010a10:	270a      	movs	r7, #10
 8010a12:	461d      	mov	r5, r3
 8010a14:	461a      	mov	r2, r3
 8010a16:	3b01      	subs	r3, #1
 8010a18:	fbb1 f6f7 	udiv	r6, r1, r7
 8010a1c:	fb07 1416 	mls	r4, r7, r6, r1
 8010a20:	3430      	adds	r4, #48	@ 0x30
 8010a22:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010a26:	460c      	mov	r4, r1
 8010a28:	4631      	mov	r1, r6
 8010a2a:	2c63      	cmp	r4, #99	@ 0x63
 8010a2c:	dcf2      	bgt.n	8010a14 <__exponent+0x1c>
 8010a2e:	3130      	adds	r1, #48	@ 0x30
 8010a30:	1e94      	subs	r4, r2, #2
 8010a32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010a36:	1c41      	adds	r1, r0, #1
 8010a38:	4623      	mov	r3, r4
 8010a3a:	42ab      	cmp	r3, r5
 8010a3c:	d30a      	bcc.n	8010a54 <__exponent+0x5c>
 8010a3e:	f10d 0309 	add.w	r3, sp, #9
 8010a42:	1a9b      	subs	r3, r3, r2
 8010a44:	42ac      	cmp	r4, r5
 8010a46:	bf88      	it	hi
 8010a48:	2300      	movhi	r3, #0
 8010a4a:	3302      	adds	r3, #2
 8010a4c:	4403      	add	r3, r0
 8010a4e:	1a18      	subs	r0, r3, r0
 8010a50:	b003      	add	sp, #12
 8010a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010a58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010a5c:	e7ed      	b.n	8010a3a <__exponent+0x42>
 8010a5e:	2330      	movs	r3, #48	@ 0x30
 8010a60:	3130      	adds	r1, #48	@ 0x30
 8010a62:	7083      	strb	r3, [r0, #2]
 8010a64:	1d03      	adds	r3, r0, #4
 8010a66:	70c1      	strb	r1, [r0, #3]
 8010a68:	e7f1      	b.n	8010a4e <__exponent+0x56>
	...

08010a6c <_printf_float>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	b08d      	sub	sp, #52	@ 0x34
 8010a72:	460c      	mov	r4, r1
 8010a74:	4616      	mov	r6, r2
 8010a76:	461f      	mov	r7, r3
 8010a78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	f000 ff3f 	bl	8011900 <_localeconv_r>
 8010a82:	6803      	ldr	r3, [r0, #0]
 8010a84:	4618      	mov	r0, r3
 8010a86:	9304      	str	r3, [sp, #16]
 8010a88:	f7ef fbf6 	bl	8000278 <strlen>
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	9005      	str	r0, [sp, #20]
 8010a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a92:	f8d8 3000 	ldr.w	r3, [r8]
 8010a96:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010a9a:	3307      	adds	r3, #7
 8010a9c:	f8d4 b000 	ldr.w	fp, [r4]
 8010aa0:	f023 0307 	bic.w	r3, r3, #7
 8010aa4:	f103 0208 	add.w	r2, r3, #8
 8010aa8:	f8c8 2000 	str.w	r2, [r8]
 8010aac:	f04f 32ff 	mov.w	r2, #4294967295
 8010ab0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ab4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8010abc:	9307      	str	r3, [sp, #28]
 8010abe:	4b9d      	ldr	r3, [pc, #628]	@ (8010d34 <_printf_float+0x2c8>)
 8010ac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ac4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010ac8:	f7f0 f834 	bl	8000b34 <__aeabi_dcmpun>
 8010acc:	bb70      	cbnz	r0, 8010b2c <_printf_float+0xc0>
 8010ace:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad2:	4b98      	ldr	r3, [pc, #608]	@ (8010d34 <_printf_float+0x2c8>)
 8010ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ad8:	f7f0 f80e 	bl	8000af8 <__aeabi_dcmple>
 8010adc:	bb30      	cbnz	r0, 8010b2c <_printf_float+0xc0>
 8010ade:	2200      	movs	r2, #0
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	4640      	mov	r0, r8
 8010ae4:	4649      	mov	r1, r9
 8010ae6:	f7ef fffd 	bl	8000ae4 <__aeabi_dcmplt>
 8010aea:	b110      	cbz	r0, 8010af2 <_printf_float+0x86>
 8010aec:	232d      	movs	r3, #45	@ 0x2d
 8010aee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010af2:	4a91      	ldr	r2, [pc, #580]	@ (8010d38 <_printf_float+0x2cc>)
 8010af4:	4b91      	ldr	r3, [pc, #580]	@ (8010d3c <_printf_float+0x2d0>)
 8010af6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010afa:	bf94      	ite	ls
 8010afc:	4690      	movls	r8, r2
 8010afe:	4698      	movhi	r8, r3
 8010b00:	2303      	movs	r3, #3
 8010b02:	f04f 0900 	mov.w	r9, #0
 8010b06:	6123      	str	r3, [r4, #16]
 8010b08:	f02b 0304 	bic.w	r3, fp, #4
 8010b0c:	6023      	str	r3, [r4, #0]
 8010b0e:	4633      	mov	r3, r6
 8010b10:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010b12:	4621      	mov	r1, r4
 8010b14:	4628      	mov	r0, r5
 8010b16:	9700      	str	r7, [sp, #0]
 8010b18:	f000 f9d2 	bl	8010ec0 <_printf_common>
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	f040 808d 	bne.w	8010c3c <_printf_float+0x1d0>
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295
 8010b26:	b00d      	add	sp, #52	@ 0x34
 8010b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2c:	4642      	mov	r2, r8
 8010b2e:	464b      	mov	r3, r9
 8010b30:	4640      	mov	r0, r8
 8010b32:	4649      	mov	r1, r9
 8010b34:	f7ef fffe 	bl	8000b34 <__aeabi_dcmpun>
 8010b38:	b140      	cbz	r0, 8010b4c <_printf_float+0xe0>
 8010b3a:	464b      	mov	r3, r9
 8010b3c:	4a80      	ldr	r2, [pc, #512]	@ (8010d40 <_printf_float+0x2d4>)
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	bfbc      	itt	lt
 8010b42:	232d      	movlt	r3, #45	@ 0x2d
 8010b44:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010b48:	4b7e      	ldr	r3, [pc, #504]	@ (8010d44 <_printf_float+0x2d8>)
 8010b4a:	e7d4      	b.n	8010af6 <_printf_float+0x8a>
 8010b4c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010b50:	6863      	ldr	r3, [r4, #4]
 8010b52:	9206      	str	r2, [sp, #24]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	d13b      	bne.n	8010bd0 <_printf_float+0x164>
 8010b58:	2306      	movs	r3, #6
 8010b5a:	6063      	str	r3, [r4, #4]
 8010b5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010b60:	2300      	movs	r3, #0
 8010b62:	4628      	mov	r0, r5
 8010b64:	6022      	str	r2, [r4, #0]
 8010b66:	9303      	str	r3, [sp, #12]
 8010b68:	ab0a      	add	r3, sp, #40	@ 0x28
 8010b6a:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010b6e:	ab09      	add	r3, sp, #36	@ 0x24
 8010b70:	ec49 8b10 	vmov	d0, r8, r9
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010b7a:	6861      	ldr	r1, [r4, #4]
 8010b7c:	f7ff fed7 	bl	801092e <__cvt>
 8010b80:	9b06      	ldr	r3, [sp, #24]
 8010b82:	4680      	mov	r8, r0
 8010b84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b86:	2b47      	cmp	r3, #71	@ 0x47
 8010b88:	d129      	bne.n	8010bde <_printf_float+0x172>
 8010b8a:	1cc8      	adds	r0, r1, #3
 8010b8c:	db02      	blt.n	8010b94 <_printf_float+0x128>
 8010b8e:	6863      	ldr	r3, [r4, #4]
 8010b90:	4299      	cmp	r1, r3
 8010b92:	dd41      	ble.n	8010c18 <_printf_float+0x1ac>
 8010b94:	f1aa 0a02 	sub.w	sl, sl, #2
 8010b98:	fa5f fa8a 	uxtb.w	sl, sl
 8010b9c:	3901      	subs	r1, #1
 8010b9e:	4652      	mov	r2, sl
 8010ba0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010ba4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ba6:	f7ff ff27 	bl	80109f8 <__exponent>
 8010baa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bac:	4681      	mov	r9, r0
 8010bae:	1813      	adds	r3, r2, r0
 8010bb0:	2a01      	cmp	r2, #1
 8010bb2:	6123      	str	r3, [r4, #16]
 8010bb4:	dc02      	bgt.n	8010bbc <_printf_float+0x150>
 8010bb6:	6822      	ldr	r2, [r4, #0]
 8010bb8:	07d2      	lsls	r2, r2, #31
 8010bba:	d501      	bpl.n	8010bc0 <_printf_float+0x154>
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	6123      	str	r3, [r4, #16]
 8010bc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d0a2      	beq.n	8010b0e <_printf_float+0xa2>
 8010bc8:	232d      	movs	r3, #45	@ 0x2d
 8010bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010bce:	e79e      	b.n	8010b0e <_printf_float+0xa2>
 8010bd0:	9a06      	ldr	r2, [sp, #24]
 8010bd2:	2a47      	cmp	r2, #71	@ 0x47
 8010bd4:	d1c2      	bne.n	8010b5c <_printf_float+0xf0>
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d1c0      	bne.n	8010b5c <_printf_float+0xf0>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e7bd      	b.n	8010b5a <_printf_float+0xee>
 8010bde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010be2:	d9db      	bls.n	8010b9c <_printf_float+0x130>
 8010be4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010be8:	d118      	bne.n	8010c1c <_printf_float+0x1b0>
 8010bea:	2900      	cmp	r1, #0
 8010bec:	6863      	ldr	r3, [r4, #4]
 8010bee:	dd0b      	ble.n	8010c08 <_printf_float+0x19c>
 8010bf0:	6121      	str	r1, [r4, #16]
 8010bf2:	b913      	cbnz	r3, 8010bfa <_printf_float+0x18e>
 8010bf4:	6822      	ldr	r2, [r4, #0]
 8010bf6:	07d0      	lsls	r0, r2, #31
 8010bf8:	d502      	bpl.n	8010c00 <_printf_float+0x194>
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	440b      	add	r3, r1
 8010bfe:	6123      	str	r3, [r4, #16]
 8010c00:	f04f 0900 	mov.w	r9, #0
 8010c04:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010c06:	e7db      	b.n	8010bc0 <_printf_float+0x154>
 8010c08:	b913      	cbnz	r3, 8010c10 <_printf_float+0x1a4>
 8010c0a:	6822      	ldr	r2, [r4, #0]
 8010c0c:	07d2      	lsls	r2, r2, #31
 8010c0e:	d501      	bpl.n	8010c14 <_printf_float+0x1a8>
 8010c10:	3302      	adds	r3, #2
 8010c12:	e7f4      	b.n	8010bfe <_printf_float+0x192>
 8010c14:	2301      	movs	r3, #1
 8010c16:	e7f2      	b.n	8010bfe <_printf_float+0x192>
 8010c18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c1e:	4299      	cmp	r1, r3
 8010c20:	db05      	blt.n	8010c2e <_printf_float+0x1c2>
 8010c22:	6823      	ldr	r3, [r4, #0]
 8010c24:	6121      	str	r1, [r4, #16]
 8010c26:	07d8      	lsls	r0, r3, #31
 8010c28:	d5ea      	bpl.n	8010c00 <_printf_float+0x194>
 8010c2a:	1c4b      	adds	r3, r1, #1
 8010c2c:	e7e7      	b.n	8010bfe <_printf_float+0x192>
 8010c2e:	2900      	cmp	r1, #0
 8010c30:	bfd4      	ite	le
 8010c32:	f1c1 0202 	rsble	r2, r1, #2
 8010c36:	2201      	movgt	r2, #1
 8010c38:	4413      	add	r3, r2
 8010c3a:	e7e0      	b.n	8010bfe <_printf_float+0x192>
 8010c3c:	6823      	ldr	r3, [r4, #0]
 8010c3e:	055a      	lsls	r2, r3, #21
 8010c40:	d407      	bmi.n	8010c52 <_printf_float+0x1e6>
 8010c42:	6923      	ldr	r3, [r4, #16]
 8010c44:	4642      	mov	r2, r8
 8010c46:	4631      	mov	r1, r6
 8010c48:	4628      	mov	r0, r5
 8010c4a:	47b8      	blx	r7
 8010c4c:	3001      	adds	r0, #1
 8010c4e:	d12b      	bne.n	8010ca8 <_printf_float+0x23c>
 8010c50:	e767      	b.n	8010b22 <_printf_float+0xb6>
 8010c52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010c56:	f240 80dd 	bls.w	8010e14 <_printf_float+0x3a8>
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010c62:	f7ef ff35 	bl	8000ad0 <__aeabi_dcmpeq>
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d033      	beq.n	8010cd2 <_printf_float+0x266>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	4a36      	ldr	r2, [pc, #216]	@ (8010d48 <_printf_float+0x2dc>)
 8010c6e:	4631      	mov	r1, r6
 8010c70:	4628      	mov	r0, r5
 8010c72:	47b8      	blx	r7
 8010c74:	3001      	adds	r0, #1
 8010c76:	f43f af54 	beq.w	8010b22 <_printf_float+0xb6>
 8010c7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010c7e:	4543      	cmp	r3, r8
 8010c80:	db02      	blt.n	8010c88 <_printf_float+0x21c>
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	07d8      	lsls	r0, r3, #31
 8010c86:	d50f      	bpl.n	8010ca8 <_printf_float+0x23c>
 8010c88:	4631      	mov	r1, r6
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c90:	47b8      	blx	r7
 8010c92:	3001      	adds	r0, #1
 8010c94:	f43f af45 	beq.w	8010b22 <_printf_float+0xb6>
 8010c98:	f04f 0900 	mov.w	r9, #0
 8010c9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ca0:	f104 0a1a 	add.w	sl, r4, #26
 8010ca4:	45c8      	cmp	r8, r9
 8010ca6:	dc09      	bgt.n	8010cbc <_printf_float+0x250>
 8010ca8:	6823      	ldr	r3, [r4, #0]
 8010caa:	079b      	lsls	r3, r3, #30
 8010cac:	f100 8103 	bmi.w	8010eb6 <_printf_float+0x44a>
 8010cb0:	68e0      	ldr	r0, [r4, #12]
 8010cb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cb4:	4298      	cmp	r0, r3
 8010cb6:	bfb8      	it	lt
 8010cb8:	4618      	movlt	r0, r3
 8010cba:	e734      	b.n	8010b26 <_printf_float+0xba>
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	4652      	mov	r2, sl
 8010cc0:	4631      	mov	r1, r6
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	47b8      	blx	r7
 8010cc6:	3001      	adds	r0, #1
 8010cc8:	f43f af2b 	beq.w	8010b22 <_printf_float+0xb6>
 8010ccc:	f109 0901 	add.w	r9, r9, #1
 8010cd0:	e7e8      	b.n	8010ca4 <_printf_float+0x238>
 8010cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	dc39      	bgt.n	8010d4c <_printf_float+0x2e0>
 8010cd8:	2301      	movs	r3, #1
 8010cda:	4a1b      	ldr	r2, [pc, #108]	@ (8010d48 <_printf_float+0x2dc>)
 8010cdc:	4631      	mov	r1, r6
 8010cde:	4628      	mov	r0, r5
 8010ce0:	47b8      	blx	r7
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	f43f af1d 	beq.w	8010b22 <_printf_float+0xb6>
 8010ce8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010cec:	ea59 0303 	orrs.w	r3, r9, r3
 8010cf0:	d102      	bne.n	8010cf8 <_printf_float+0x28c>
 8010cf2:	6823      	ldr	r3, [r4, #0]
 8010cf4:	07d9      	lsls	r1, r3, #31
 8010cf6:	d5d7      	bpl.n	8010ca8 <_printf_float+0x23c>
 8010cf8:	4631      	mov	r1, r6
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d00:	47b8      	blx	r7
 8010d02:	3001      	adds	r0, #1
 8010d04:	f43f af0d 	beq.w	8010b22 <_printf_float+0xb6>
 8010d08:	f04f 0a00 	mov.w	sl, #0
 8010d0c:	f104 0b1a 	add.w	fp, r4, #26
 8010d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d12:	425b      	negs	r3, r3
 8010d14:	4553      	cmp	r3, sl
 8010d16:	dc01      	bgt.n	8010d1c <_printf_float+0x2b0>
 8010d18:	464b      	mov	r3, r9
 8010d1a:	e793      	b.n	8010c44 <_printf_float+0x1d8>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	465a      	mov	r2, fp
 8010d20:	4631      	mov	r1, r6
 8010d22:	4628      	mov	r0, r5
 8010d24:	47b8      	blx	r7
 8010d26:	3001      	adds	r0, #1
 8010d28:	f43f aefb 	beq.w	8010b22 <_printf_float+0xb6>
 8010d2c:	f10a 0a01 	add.w	sl, sl, #1
 8010d30:	e7ee      	b.n	8010d10 <_printf_float+0x2a4>
 8010d32:	bf00      	nop
 8010d34:	7fefffff 	.word	0x7fefffff
 8010d38:	080153e0 	.word	0x080153e0
 8010d3c:	080153e4 	.word	0x080153e4
 8010d40:	080153e8 	.word	0x080153e8
 8010d44:	080153ec 	.word	0x080153ec
 8010d48:	080153f0 	.word	0x080153f0
 8010d4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d52:	4553      	cmp	r3, sl
 8010d54:	bfa8      	it	ge
 8010d56:	4653      	movge	r3, sl
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	4699      	mov	r9, r3
 8010d5c:	dc36      	bgt.n	8010dcc <_printf_float+0x360>
 8010d5e:	f04f 0b00 	mov.w	fp, #0
 8010d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d66:	f104 021a 	add.w	r2, r4, #26
 8010d6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d6c:	9306      	str	r3, [sp, #24]
 8010d6e:	eba3 0309 	sub.w	r3, r3, r9
 8010d72:	455b      	cmp	r3, fp
 8010d74:	dc31      	bgt.n	8010dda <_printf_float+0x36e>
 8010d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d78:	459a      	cmp	sl, r3
 8010d7a:	dc3a      	bgt.n	8010df2 <_printf_float+0x386>
 8010d7c:	6823      	ldr	r3, [r4, #0]
 8010d7e:	07da      	lsls	r2, r3, #31
 8010d80:	d437      	bmi.n	8010df2 <_printf_float+0x386>
 8010d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d84:	ebaa 0903 	sub.w	r9, sl, r3
 8010d88:	9b06      	ldr	r3, [sp, #24]
 8010d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8010d8e:	4599      	cmp	r9, r3
 8010d90:	bfa8      	it	ge
 8010d92:	4699      	movge	r9, r3
 8010d94:	f1b9 0f00 	cmp.w	r9, #0
 8010d98:	dc33      	bgt.n	8010e02 <_printf_float+0x396>
 8010d9a:	f04f 0800 	mov.w	r8, #0
 8010d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010da2:	f104 0b1a 	add.w	fp, r4, #26
 8010da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010da8:	ebaa 0303 	sub.w	r3, sl, r3
 8010dac:	eba3 0309 	sub.w	r3, r3, r9
 8010db0:	4543      	cmp	r3, r8
 8010db2:	f77f af79 	ble.w	8010ca8 <_printf_float+0x23c>
 8010db6:	2301      	movs	r3, #1
 8010db8:	465a      	mov	r2, fp
 8010dba:	4631      	mov	r1, r6
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	47b8      	blx	r7
 8010dc0:	3001      	adds	r0, #1
 8010dc2:	f43f aeae 	beq.w	8010b22 <_printf_float+0xb6>
 8010dc6:	f108 0801 	add.w	r8, r8, #1
 8010dca:	e7ec      	b.n	8010da6 <_printf_float+0x33a>
 8010dcc:	4642      	mov	r2, r8
 8010dce:	4631      	mov	r1, r6
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	47b8      	blx	r7
 8010dd4:	3001      	adds	r0, #1
 8010dd6:	d1c2      	bne.n	8010d5e <_printf_float+0x2f2>
 8010dd8:	e6a3      	b.n	8010b22 <_printf_float+0xb6>
 8010dda:	2301      	movs	r3, #1
 8010ddc:	4631      	mov	r1, r6
 8010dde:	4628      	mov	r0, r5
 8010de0:	9206      	str	r2, [sp, #24]
 8010de2:	47b8      	blx	r7
 8010de4:	3001      	adds	r0, #1
 8010de6:	f43f ae9c 	beq.w	8010b22 <_printf_float+0xb6>
 8010dea:	f10b 0b01 	add.w	fp, fp, #1
 8010dee:	9a06      	ldr	r2, [sp, #24]
 8010df0:	e7bb      	b.n	8010d6a <_printf_float+0x2fe>
 8010df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010df6:	4631      	mov	r1, r6
 8010df8:	4628      	mov	r0, r5
 8010dfa:	47b8      	blx	r7
 8010dfc:	3001      	adds	r0, #1
 8010dfe:	d1c0      	bne.n	8010d82 <_printf_float+0x316>
 8010e00:	e68f      	b.n	8010b22 <_printf_float+0xb6>
 8010e02:	9a06      	ldr	r2, [sp, #24]
 8010e04:	464b      	mov	r3, r9
 8010e06:	4631      	mov	r1, r6
 8010e08:	4628      	mov	r0, r5
 8010e0a:	4442      	add	r2, r8
 8010e0c:	47b8      	blx	r7
 8010e0e:	3001      	adds	r0, #1
 8010e10:	d1c3      	bne.n	8010d9a <_printf_float+0x32e>
 8010e12:	e686      	b.n	8010b22 <_printf_float+0xb6>
 8010e14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010e18:	f1ba 0f01 	cmp.w	sl, #1
 8010e1c:	dc01      	bgt.n	8010e22 <_printf_float+0x3b6>
 8010e1e:	07db      	lsls	r3, r3, #31
 8010e20:	d536      	bpl.n	8010e90 <_printf_float+0x424>
 8010e22:	2301      	movs	r3, #1
 8010e24:	4642      	mov	r2, r8
 8010e26:	4631      	mov	r1, r6
 8010e28:	4628      	mov	r0, r5
 8010e2a:	47b8      	blx	r7
 8010e2c:	3001      	adds	r0, #1
 8010e2e:	f43f ae78 	beq.w	8010b22 <_printf_float+0xb6>
 8010e32:	4631      	mov	r1, r6
 8010e34:	4628      	mov	r0, r5
 8010e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e3a:	47b8      	blx	r7
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	f43f ae70 	beq.w	8010b22 <_printf_float+0xb6>
 8010e42:	2200      	movs	r2, #0
 8010e44:	2300      	movs	r3, #0
 8010e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010e4e:	f7ef fe3f 	bl	8000ad0 <__aeabi_dcmpeq>
 8010e52:	b9c0      	cbnz	r0, 8010e86 <_printf_float+0x41a>
 8010e54:	4653      	mov	r3, sl
 8010e56:	f108 0201 	add.w	r2, r8, #1
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	47b8      	blx	r7
 8010e60:	3001      	adds	r0, #1
 8010e62:	d10c      	bne.n	8010e7e <_printf_float+0x412>
 8010e64:	e65d      	b.n	8010b22 <_printf_float+0xb6>
 8010e66:	2301      	movs	r3, #1
 8010e68:	465a      	mov	r2, fp
 8010e6a:	4631      	mov	r1, r6
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	47b8      	blx	r7
 8010e70:	3001      	adds	r0, #1
 8010e72:	f43f ae56 	beq.w	8010b22 <_printf_float+0xb6>
 8010e76:	f108 0801 	add.w	r8, r8, #1
 8010e7a:	45d0      	cmp	r8, sl
 8010e7c:	dbf3      	blt.n	8010e66 <_printf_float+0x3fa>
 8010e7e:	464b      	mov	r3, r9
 8010e80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010e84:	e6df      	b.n	8010c46 <_printf_float+0x1da>
 8010e86:	f04f 0800 	mov.w	r8, #0
 8010e8a:	f104 0b1a 	add.w	fp, r4, #26
 8010e8e:	e7f4      	b.n	8010e7a <_printf_float+0x40e>
 8010e90:	2301      	movs	r3, #1
 8010e92:	4642      	mov	r2, r8
 8010e94:	e7e1      	b.n	8010e5a <_printf_float+0x3ee>
 8010e96:	2301      	movs	r3, #1
 8010e98:	464a      	mov	r2, r9
 8010e9a:	4631      	mov	r1, r6
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	47b8      	blx	r7
 8010ea0:	3001      	adds	r0, #1
 8010ea2:	f43f ae3e 	beq.w	8010b22 <_printf_float+0xb6>
 8010ea6:	f108 0801 	add.w	r8, r8, #1
 8010eaa:	68e3      	ldr	r3, [r4, #12]
 8010eac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010eae:	1a5b      	subs	r3, r3, r1
 8010eb0:	4543      	cmp	r3, r8
 8010eb2:	dcf0      	bgt.n	8010e96 <_printf_float+0x42a>
 8010eb4:	e6fc      	b.n	8010cb0 <_printf_float+0x244>
 8010eb6:	f04f 0800 	mov.w	r8, #0
 8010eba:	f104 0919 	add.w	r9, r4, #25
 8010ebe:	e7f4      	b.n	8010eaa <_printf_float+0x43e>

08010ec0 <_printf_common>:
 8010ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec4:	4616      	mov	r6, r2
 8010ec6:	4698      	mov	r8, r3
 8010ec8:	688a      	ldr	r2, [r1, #8]
 8010eca:	4607      	mov	r7, r0
 8010ecc:	690b      	ldr	r3, [r1, #16]
 8010ece:	460c      	mov	r4, r1
 8010ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	bfb8      	it	lt
 8010ed8:	4613      	movlt	r3, r2
 8010eda:	6033      	str	r3, [r6, #0]
 8010edc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ee0:	b10a      	cbz	r2, 8010ee6 <_printf_common+0x26>
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	6033      	str	r3, [r6, #0]
 8010ee6:	6823      	ldr	r3, [r4, #0]
 8010ee8:	0699      	lsls	r1, r3, #26
 8010eea:	bf42      	ittt	mi
 8010eec:	6833      	ldrmi	r3, [r6, #0]
 8010eee:	3302      	addmi	r3, #2
 8010ef0:	6033      	strmi	r3, [r6, #0]
 8010ef2:	6825      	ldr	r5, [r4, #0]
 8010ef4:	f015 0506 	ands.w	r5, r5, #6
 8010ef8:	d106      	bne.n	8010f08 <_printf_common+0x48>
 8010efa:	f104 0a19 	add.w	sl, r4, #25
 8010efe:	68e3      	ldr	r3, [r4, #12]
 8010f00:	6832      	ldr	r2, [r6, #0]
 8010f02:	1a9b      	subs	r3, r3, r2
 8010f04:	42ab      	cmp	r3, r5
 8010f06:	dc2b      	bgt.n	8010f60 <_printf_common+0xa0>
 8010f08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f0c:	6822      	ldr	r2, [r4, #0]
 8010f0e:	3b00      	subs	r3, #0
 8010f10:	bf18      	it	ne
 8010f12:	2301      	movne	r3, #1
 8010f14:	0692      	lsls	r2, r2, #26
 8010f16:	d430      	bmi.n	8010f7a <_printf_common+0xba>
 8010f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f1c:	4641      	mov	r1, r8
 8010f1e:	4638      	mov	r0, r7
 8010f20:	47c8      	blx	r9
 8010f22:	3001      	adds	r0, #1
 8010f24:	d023      	beq.n	8010f6e <_printf_common+0xae>
 8010f26:	6823      	ldr	r3, [r4, #0]
 8010f28:	341a      	adds	r4, #26
 8010f2a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010f2e:	f003 0306 	and.w	r3, r3, #6
 8010f32:	2b04      	cmp	r3, #4
 8010f34:	bf0a      	itet	eq
 8010f36:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010f3a:	2500      	movne	r5, #0
 8010f3c:	6833      	ldreq	r3, [r6, #0]
 8010f3e:	f04f 0600 	mov.w	r6, #0
 8010f42:	bf08      	it	eq
 8010f44:	1aed      	subeq	r5, r5, r3
 8010f46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010f4a:	bf08      	it	eq
 8010f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f50:	4293      	cmp	r3, r2
 8010f52:	bfc4      	itt	gt
 8010f54:	1a9b      	subgt	r3, r3, r2
 8010f56:	18ed      	addgt	r5, r5, r3
 8010f58:	42b5      	cmp	r5, r6
 8010f5a:	d11a      	bne.n	8010f92 <_printf_common+0xd2>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	e008      	b.n	8010f72 <_printf_common+0xb2>
 8010f60:	2301      	movs	r3, #1
 8010f62:	4652      	mov	r2, sl
 8010f64:	4641      	mov	r1, r8
 8010f66:	4638      	mov	r0, r7
 8010f68:	47c8      	blx	r9
 8010f6a:	3001      	adds	r0, #1
 8010f6c:	d103      	bne.n	8010f76 <_printf_common+0xb6>
 8010f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f76:	3501      	adds	r5, #1
 8010f78:	e7c1      	b.n	8010efe <_printf_common+0x3e>
 8010f7a:	18e1      	adds	r1, r4, r3
 8010f7c:	1c5a      	adds	r2, r3, #1
 8010f7e:	2030      	movs	r0, #48	@ 0x30
 8010f80:	3302      	adds	r3, #2
 8010f82:	4422      	add	r2, r4
 8010f84:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f90:	e7c2      	b.n	8010f18 <_printf_common+0x58>
 8010f92:	2301      	movs	r3, #1
 8010f94:	4622      	mov	r2, r4
 8010f96:	4641      	mov	r1, r8
 8010f98:	4638      	mov	r0, r7
 8010f9a:	47c8      	blx	r9
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	d0e6      	beq.n	8010f6e <_printf_common+0xae>
 8010fa0:	3601      	adds	r6, #1
 8010fa2:	e7d9      	b.n	8010f58 <_printf_common+0x98>

08010fa4 <_printf_i>:
 8010fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa8:	7e0f      	ldrb	r7, [r1, #24]
 8010faa:	4691      	mov	r9, r2
 8010fac:	4680      	mov	r8, r0
 8010fae:	460c      	mov	r4, r1
 8010fb0:	2f78      	cmp	r7, #120	@ 0x78
 8010fb2:	469a      	mov	sl, r3
 8010fb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010fb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010fba:	d807      	bhi.n	8010fcc <_printf_i+0x28>
 8010fbc:	2f62      	cmp	r7, #98	@ 0x62
 8010fbe:	d80a      	bhi.n	8010fd6 <_printf_i+0x32>
 8010fc0:	2f00      	cmp	r7, #0
 8010fc2:	f000 80d2 	beq.w	801116a <_printf_i+0x1c6>
 8010fc6:	2f58      	cmp	r7, #88	@ 0x58
 8010fc8:	f000 80b9 	beq.w	801113e <_printf_i+0x19a>
 8010fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010fd4:	e03a      	b.n	801104c <_printf_i+0xa8>
 8010fd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010fda:	2b15      	cmp	r3, #21
 8010fdc:	d8f6      	bhi.n	8010fcc <_printf_i+0x28>
 8010fde:	a101      	add	r1, pc, #4	@ (adr r1, 8010fe4 <_printf_i+0x40>)
 8010fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fe4:	0801103d 	.word	0x0801103d
 8010fe8:	08011051 	.word	0x08011051
 8010fec:	08010fcd 	.word	0x08010fcd
 8010ff0:	08010fcd 	.word	0x08010fcd
 8010ff4:	08010fcd 	.word	0x08010fcd
 8010ff8:	08010fcd 	.word	0x08010fcd
 8010ffc:	08011051 	.word	0x08011051
 8011000:	08010fcd 	.word	0x08010fcd
 8011004:	08010fcd 	.word	0x08010fcd
 8011008:	08010fcd 	.word	0x08010fcd
 801100c:	08010fcd 	.word	0x08010fcd
 8011010:	08011151 	.word	0x08011151
 8011014:	0801107b 	.word	0x0801107b
 8011018:	0801110b 	.word	0x0801110b
 801101c:	08010fcd 	.word	0x08010fcd
 8011020:	08010fcd 	.word	0x08010fcd
 8011024:	08011173 	.word	0x08011173
 8011028:	08010fcd 	.word	0x08010fcd
 801102c:	0801107b 	.word	0x0801107b
 8011030:	08010fcd 	.word	0x08010fcd
 8011034:	08010fcd 	.word	0x08010fcd
 8011038:	08011113 	.word	0x08011113
 801103c:	6833      	ldr	r3, [r6, #0]
 801103e:	1d1a      	adds	r2, r3, #4
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	6032      	str	r2, [r6, #0]
 8011044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801104c:	2301      	movs	r3, #1
 801104e:	e09d      	b.n	801118c <_printf_i+0x1e8>
 8011050:	6833      	ldr	r3, [r6, #0]
 8011052:	6820      	ldr	r0, [r4, #0]
 8011054:	1d19      	adds	r1, r3, #4
 8011056:	6031      	str	r1, [r6, #0]
 8011058:	0606      	lsls	r6, r0, #24
 801105a:	d501      	bpl.n	8011060 <_printf_i+0xbc>
 801105c:	681d      	ldr	r5, [r3, #0]
 801105e:	e003      	b.n	8011068 <_printf_i+0xc4>
 8011060:	0645      	lsls	r5, r0, #25
 8011062:	d5fb      	bpl.n	801105c <_printf_i+0xb8>
 8011064:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011068:	2d00      	cmp	r5, #0
 801106a:	da03      	bge.n	8011074 <_printf_i+0xd0>
 801106c:	232d      	movs	r3, #45	@ 0x2d
 801106e:	426d      	negs	r5, r5
 8011070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011074:	4859      	ldr	r0, [pc, #356]	@ (80111dc <_printf_i+0x238>)
 8011076:	230a      	movs	r3, #10
 8011078:	e011      	b.n	801109e <_printf_i+0xfa>
 801107a:	6821      	ldr	r1, [r4, #0]
 801107c:	6833      	ldr	r3, [r6, #0]
 801107e:	0608      	lsls	r0, r1, #24
 8011080:	f853 5b04 	ldr.w	r5, [r3], #4
 8011084:	d402      	bmi.n	801108c <_printf_i+0xe8>
 8011086:	0649      	lsls	r1, r1, #25
 8011088:	bf48      	it	mi
 801108a:	b2ad      	uxthmi	r5, r5
 801108c:	2f6f      	cmp	r7, #111	@ 0x6f
 801108e:	6033      	str	r3, [r6, #0]
 8011090:	4852      	ldr	r0, [pc, #328]	@ (80111dc <_printf_i+0x238>)
 8011092:	bf14      	ite	ne
 8011094:	230a      	movne	r3, #10
 8011096:	2308      	moveq	r3, #8
 8011098:	2100      	movs	r1, #0
 801109a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801109e:	6866      	ldr	r6, [r4, #4]
 80110a0:	2e00      	cmp	r6, #0
 80110a2:	60a6      	str	r6, [r4, #8]
 80110a4:	bfa2      	ittt	ge
 80110a6:	6821      	ldrge	r1, [r4, #0]
 80110a8:	f021 0104 	bicge.w	r1, r1, #4
 80110ac:	6021      	strge	r1, [r4, #0]
 80110ae:	b90d      	cbnz	r5, 80110b4 <_printf_i+0x110>
 80110b0:	2e00      	cmp	r6, #0
 80110b2:	d04b      	beq.n	801114c <_printf_i+0x1a8>
 80110b4:	4616      	mov	r6, r2
 80110b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80110ba:	fb03 5711 	mls	r7, r3, r1, r5
 80110be:	5dc7      	ldrb	r7, [r0, r7]
 80110c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110c4:	462f      	mov	r7, r5
 80110c6:	460d      	mov	r5, r1
 80110c8:	42bb      	cmp	r3, r7
 80110ca:	d9f4      	bls.n	80110b6 <_printf_i+0x112>
 80110cc:	2b08      	cmp	r3, #8
 80110ce:	d10b      	bne.n	80110e8 <_printf_i+0x144>
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	07df      	lsls	r7, r3, #31
 80110d4:	d508      	bpl.n	80110e8 <_printf_i+0x144>
 80110d6:	6923      	ldr	r3, [r4, #16]
 80110d8:	6861      	ldr	r1, [r4, #4]
 80110da:	4299      	cmp	r1, r3
 80110dc:	bfde      	ittt	le
 80110de:	2330      	movle	r3, #48	@ 0x30
 80110e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80110e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80110e8:	1b92      	subs	r2, r2, r6
 80110ea:	6122      	str	r2, [r4, #16]
 80110ec:	464b      	mov	r3, r9
 80110ee:	aa03      	add	r2, sp, #12
 80110f0:	4621      	mov	r1, r4
 80110f2:	4640      	mov	r0, r8
 80110f4:	f8cd a000 	str.w	sl, [sp]
 80110f8:	f7ff fee2 	bl	8010ec0 <_printf_common>
 80110fc:	3001      	adds	r0, #1
 80110fe:	d14a      	bne.n	8011196 <_printf_i+0x1f2>
 8011100:	f04f 30ff 	mov.w	r0, #4294967295
 8011104:	b004      	add	sp, #16
 8011106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801110a:	6823      	ldr	r3, [r4, #0]
 801110c:	f043 0320 	orr.w	r3, r3, #32
 8011110:	6023      	str	r3, [r4, #0]
 8011112:	2778      	movs	r7, #120	@ 0x78
 8011114:	4832      	ldr	r0, [pc, #200]	@ (80111e0 <_printf_i+0x23c>)
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801111c:	061f      	lsls	r7, r3, #24
 801111e:	6831      	ldr	r1, [r6, #0]
 8011120:	f851 5b04 	ldr.w	r5, [r1], #4
 8011124:	d402      	bmi.n	801112c <_printf_i+0x188>
 8011126:	065f      	lsls	r7, r3, #25
 8011128:	bf48      	it	mi
 801112a:	b2ad      	uxthmi	r5, r5
 801112c:	6031      	str	r1, [r6, #0]
 801112e:	07d9      	lsls	r1, r3, #31
 8011130:	bf44      	itt	mi
 8011132:	f043 0320 	orrmi.w	r3, r3, #32
 8011136:	6023      	strmi	r3, [r4, #0]
 8011138:	b11d      	cbz	r5, 8011142 <_printf_i+0x19e>
 801113a:	2310      	movs	r3, #16
 801113c:	e7ac      	b.n	8011098 <_printf_i+0xf4>
 801113e:	4827      	ldr	r0, [pc, #156]	@ (80111dc <_printf_i+0x238>)
 8011140:	e7e9      	b.n	8011116 <_printf_i+0x172>
 8011142:	6823      	ldr	r3, [r4, #0]
 8011144:	f023 0320 	bic.w	r3, r3, #32
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	e7f6      	b.n	801113a <_printf_i+0x196>
 801114c:	4616      	mov	r6, r2
 801114e:	e7bd      	b.n	80110cc <_printf_i+0x128>
 8011150:	6833      	ldr	r3, [r6, #0]
 8011152:	6825      	ldr	r5, [r4, #0]
 8011154:	1d18      	adds	r0, r3, #4
 8011156:	6961      	ldr	r1, [r4, #20]
 8011158:	6030      	str	r0, [r6, #0]
 801115a:	062e      	lsls	r6, r5, #24
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	d501      	bpl.n	8011164 <_printf_i+0x1c0>
 8011160:	6019      	str	r1, [r3, #0]
 8011162:	e002      	b.n	801116a <_printf_i+0x1c6>
 8011164:	0668      	lsls	r0, r5, #25
 8011166:	d5fb      	bpl.n	8011160 <_printf_i+0x1bc>
 8011168:	8019      	strh	r1, [r3, #0]
 801116a:	2300      	movs	r3, #0
 801116c:	4616      	mov	r6, r2
 801116e:	6123      	str	r3, [r4, #16]
 8011170:	e7bc      	b.n	80110ec <_printf_i+0x148>
 8011172:	6833      	ldr	r3, [r6, #0]
 8011174:	2100      	movs	r1, #0
 8011176:	1d1a      	adds	r2, r3, #4
 8011178:	6032      	str	r2, [r6, #0]
 801117a:	681e      	ldr	r6, [r3, #0]
 801117c:	6862      	ldr	r2, [r4, #4]
 801117e:	4630      	mov	r0, r6
 8011180:	f000 fc35 	bl	80119ee <memchr>
 8011184:	b108      	cbz	r0, 801118a <_printf_i+0x1e6>
 8011186:	1b80      	subs	r0, r0, r6
 8011188:	6060      	str	r0, [r4, #4]
 801118a:	6863      	ldr	r3, [r4, #4]
 801118c:	6123      	str	r3, [r4, #16]
 801118e:	2300      	movs	r3, #0
 8011190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011194:	e7aa      	b.n	80110ec <_printf_i+0x148>
 8011196:	6923      	ldr	r3, [r4, #16]
 8011198:	4632      	mov	r2, r6
 801119a:	4649      	mov	r1, r9
 801119c:	4640      	mov	r0, r8
 801119e:	47d0      	blx	sl
 80111a0:	3001      	adds	r0, #1
 80111a2:	d0ad      	beq.n	8011100 <_printf_i+0x15c>
 80111a4:	6823      	ldr	r3, [r4, #0]
 80111a6:	079b      	lsls	r3, r3, #30
 80111a8:	d413      	bmi.n	80111d2 <_printf_i+0x22e>
 80111aa:	68e0      	ldr	r0, [r4, #12]
 80111ac:	9b03      	ldr	r3, [sp, #12]
 80111ae:	4298      	cmp	r0, r3
 80111b0:	bfb8      	it	lt
 80111b2:	4618      	movlt	r0, r3
 80111b4:	e7a6      	b.n	8011104 <_printf_i+0x160>
 80111b6:	2301      	movs	r3, #1
 80111b8:	4632      	mov	r2, r6
 80111ba:	4649      	mov	r1, r9
 80111bc:	4640      	mov	r0, r8
 80111be:	47d0      	blx	sl
 80111c0:	3001      	adds	r0, #1
 80111c2:	d09d      	beq.n	8011100 <_printf_i+0x15c>
 80111c4:	3501      	adds	r5, #1
 80111c6:	68e3      	ldr	r3, [r4, #12]
 80111c8:	9903      	ldr	r1, [sp, #12]
 80111ca:	1a5b      	subs	r3, r3, r1
 80111cc:	42ab      	cmp	r3, r5
 80111ce:	dcf2      	bgt.n	80111b6 <_printf_i+0x212>
 80111d0:	e7eb      	b.n	80111aa <_printf_i+0x206>
 80111d2:	2500      	movs	r5, #0
 80111d4:	f104 0619 	add.w	r6, r4, #25
 80111d8:	e7f5      	b.n	80111c6 <_printf_i+0x222>
 80111da:	bf00      	nop
 80111dc:	080153f2 	.word	0x080153f2
 80111e0:	08015403 	.word	0x08015403

080111e4 <_scanf_float>:
 80111e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e8:	b087      	sub	sp, #28
 80111ea:	4617      	mov	r7, r2
 80111ec:	4680      	mov	r8, r0
 80111ee:	460c      	mov	r4, r1
 80111f0:	9303      	str	r3, [sp, #12]
 80111f2:	688b      	ldr	r3, [r1, #8]
 80111f4:	1e5a      	subs	r2, r3, #1
 80111f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80111fa:	460a      	mov	r2, r1
 80111fc:	bf89      	itett	hi
 80111fe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011202:	f04f 0b00 	movls.w	fp, #0
 8011206:	eb03 0b05 	addhi.w	fp, r3, r5
 801120a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801120e:	f04f 0500 	mov.w	r5, #0
 8011212:	bf88      	it	hi
 8011214:	608b      	strhi	r3, [r1, #8]
 8011216:	680b      	ldr	r3, [r1, #0]
 8011218:	46aa      	mov	sl, r5
 801121a:	46a9      	mov	r9, r5
 801121c:	9502      	str	r5, [sp, #8]
 801121e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011222:	f842 3b1c 	str.w	r3, [r2], #28
 8011226:	4616      	mov	r6, r2
 8011228:	9201      	str	r2, [sp, #4]
 801122a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801122e:	68a2      	ldr	r2, [r4, #8]
 8011230:	b152      	cbz	r2, 8011248 <_scanf_float+0x64>
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	2b4e      	cmp	r3, #78	@ 0x4e
 8011238:	d864      	bhi.n	8011304 <_scanf_float+0x120>
 801123a:	2b40      	cmp	r3, #64	@ 0x40
 801123c:	d83c      	bhi.n	80112b8 <_scanf_float+0xd4>
 801123e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011242:	b2c8      	uxtb	r0, r1
 8011244:	280e      	cmp	r0, #14
 8011246:	d93a      	bls.n	80112be <_scanf_float+0xda>
 8011248:	f1b9 0f00 	cmp.w	r9, #0
 801124c:	d003      	beq.n	8011256 <_scanf_float+0x72>
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	f10a 3aff 	add.w	sl, sl, #4294967295
 801125a:	f1ba 0f01 	cmp.w	sl, #1
 801125e:	f200 8117 	bhi.w	8011490 <_scanf_float+0x2ac>
 8011262:	9b01      	ldr	r3, [sp, #4]
 8011264:	429e      	cmp	r6, r3
 8011266:	f200 8108 	bhi.w	801147a <_scanf_float+0x296>
 801126a:	2001      	movs	r0, #1
 801126c:	b007      	add	sp, #28
 801126e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011272:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011276:	2a0d      	cmp	r2, #13
 8011278:	d8e6      	bhi.n	8011248 <_scanf_float+0x64>
 801127a:	a101      	add	r1, pc, #4	@ (adr r1, 8011280 <_scanf_float+0x9c>)
 801127c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011280:	080113c7 	.word	0x080113c7
 8011284:	08011249 	.word	0x08011249
 8011288:	08011249 	.word	0x08011249
 801128c:	08011249 	.word	0x08011249
 8011290:	08011427 	.word	0x08011427
 8011294:	080113ff 	.word	0x080113ff
 8011298:	08011249 	.word	0x08011249
 801129c:	08011249 	.word	0x08011249
 80112a0:	080113d5 	.word	0x080113d5
 80112a4:	08011249 	.word	0x08011249
 80112a8:	08011249 	.word	0x08011249
 80112ac:	08011249 	.word	0x08011249
 80112b0:	08011249 	.word	0x08011249
 80112b4:	0801138d 	.word	0x0801138d
 80112b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80112bc:	e7db      	b.n	8011276 <_scanf_float+0x92>
 80112be:	290e      	cmp	r1, #14
 80112c0:	d8c2      	bhi.n	8011248 <_scanf_float+0x64>
 80112c2:	a001      	add	r0, pc, #4	@ (adr r0, 80112c8 <_scanf_float+0xe4>)
 80112c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80112c8:	0801137d 	.word	0x0801137d
 80112cc:	08011249 	.word	0x08011249
 80112d0:	0801137d 	.word	0x0801137d
 80112d4:	08011413 	.word	0x08011413
 80112d8:	08011249 	.word	0x08011249
 80112dc:	08011325 	.word	0x08011325
 80112e0:	08011363 	.word	0x08011363
 80112e4:	08011363 	.word	0x08011363
 80112e8:	08011363 	.word	0x08011363
 80112ec:	08011363 	.word	0x08011363
 80112f0:	08011363 	.word	0x08011363
 80112f4:	08011363 	.word	0x08011363
 80112f8:	08011363 	.word	0x08011363
 80112fc:	08011363 	.word	0x08011363
 8011300:	08011363 	.word	0x08011363
 8011304:	2b6e      	cmp	r3, #110	@ 0x6e
 8011306:	d809      	bhi.n	801131c <_scanf_float+0x138>
 8011308:	2b60      	cmp	r3, #96	@ 0x60
 801130a:	d8b2      	bhi.n	8011272 <_scanf_float+0x8e>
 801130c:	2b54      	cmp	r3, #84	@ 0x54
 801130e:	d07b      	beq.n	8011408 <_scanf_float+0x224>
 8011310:	2b59      	cmp	r3, #89	@ 0x59
 8011312:	d199      	bne.n	8011248 <_scanf_float+0x64>
 8011314:	2d07      	cmp	r5, #7
 8011316:	d197      	bne.n	8011248 <_scanf_float+0x64>
 8011318:	2508      	movs	r5, #8
 801131a:	e02c      	b.n	8011376 <_scanf_float+0x192>
 801131c:	2b74      	cmp	r3, #116	@ 0x74
 801131e:	d073      	beq.n	8011408 <_scanf_float+0x224>
 8011320:	2b79      	cmp	r3, #121	@ 0x79
 8011322:	e7f6      	b.n	8011312 <_scanf_float+0x12e>
 8011324:	6821      	ldr	r1, [r4, #0]
 8011326:	05c8      	lsls	r0, r1, #23
 8011328:	d51b      	bpl.n	8011362 <_scanf_float+0x17e>
 801132a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801132e:	f109 0901 	add.w	r9, r9, #1
 8011332:	6021      	str	r1, [r4, #0]
 8011334:	f1bb 0f00 	cmp.w	fp, #0
 8011338:	d003      	beq.n	8011342 <_scanf_float+0x15e>
 801133a:	3201      	adds	r2, #1
 801133c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011340:	60a2      	str	r2, [r4, #8]
 8011342:	68a3      	ldr	r3, [r4, #8]
 8011344:	3b01      	subs	r3, #1
 8011346:	60a3      	str	r3, [r4, #8]
 8011348:	6923      	ldr	r3, [r4, #16]
 801134a:	3301      	adds	r3, #1
 801134c:	6123      	str	r3, [r4, #16]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	3b01      	subs	r3, #1
 8011352:	2b00      	cmp	r3, #0
 8011354:	607b      	str	r3, [r7, #4]
 8011356:	f340 8087 	ble.w	8011468 <_scanf_float+0x284>
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	3301      	adds	r3, #1
 801135e:	603b      	str	r3, [r7, #0]
 8011360:	e765      	b.n	801122e <_scanf_float+0x4a>
 8011362:	eb1a 0105 	adds.w	r1, sl, r5
 8011366:	f47f af6f 	bne.w	8011248 <_scanf_float+0x64>
 801136a:	6822      	ldr	r2, [r4, #0]
 801136c:	460d      	mov	r5, r1
 801136e:	468a      	mov	sl, r1
 8011370:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011374:	6022      	str	r2, [r4, #0]
 8011376:	f806 3b01 	strb.w	r3, [r6], #1
 801137a:	e7e2      	b.n	8011342 <_scanf_float+0x15e>
 801137c:	6822      	ldr	r2, [r4, #0]
 801137e:	0610      	lsls	r0, r2, #24
 8011380:	f57f af62 	bpl.w	8011248 <_scanf_float+0x64>
 8011384:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011388:	6022      	str	r2, [r4, #0]
 801138a:	e7f4      	b.n	8011376 <_scanf_float+0x192>
 801138c:	f1ba 0f00 	cmp.w	sl, #0
 8011390:	d10e      	bne.n	80113b0 <_scanf_float+0x1cc>
 8011392:	f1b9 0f00 	cmp.w	r9, #0
 8011396:	d10e      	bne.n	80113b6 <_scanf_float+0x1d2>
 8011398:	6822      	ldr	r2, [r4, #0]
 801139a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801139e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80113a2:	d108      	bne.n	80113b6 <_scanf_float+0x1d2>
 80113a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80113a8:	f04f 0a01 	mov.w	sl, #1
 80113ac:	6022      	str	r2, [r4, #0]
 80113ae:	e7e2      	b.n	8011376 <_scanf_float+0x192>
 80113b0:	f1ba 0f02 	cmp.w	sl, #2
 80113b4:	d055      	beq.n	8011462 <_scanf_float+0x27e>
 80113b6:	2d01      	cmp	r5, #1
 80113b8:	d002      	beq.n	80113c0 <_scanf_float+0x1dc>
 80113ba:	2d04      	cmp	r5, #4
 80113bc:	f47f af44 	bne.w	8011248 <_scanf_float+0x64>
 80113c0:	3501      	adds	r5, #1
 80113c2:	b2ed      	uxtb	r5, r5
 80113c4:	e7d7      	b.n	8011376 <_scanf_float+0x192>
 80113c6:	f1ba 0f01 	cmp.w	sl, #1
 80113ca:	f47f af3d 	bne.w	8011248 <_scanf_float+0x64>
 80113ce:	f04f 0a02 	mov.w	sl, #2
 80113d2:	e7d0      	b.n	8011376 <_scanf_float+0x192>
 80113d4:	b97d      	cbnz	r5, 80113f6 <_scanf_float+0x212>
 80113d6:	f1b9 0f00 	cmp.w	r9, #0
 80113da:	f47f af38 	bne.w	801124e <_scanf_float+0x6a>
 80113de:	6822      	ldr	r2, [r4, #0]
 80113e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80113e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80113e8:	f040 8107 	bne.w	80115fa <_scanf_float+0x416>
 80113ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80113f0:	2501      	movs	r5, #1
 80113f2:	6022      	str	r2, [r4, #0]
 80113f4:	e7bf      	b.n	8011376 <_scanf_float+0x192>
 80113f6:	2d03      	cmp	r5, #3
 80113f8:	d0e2      	beq.n	80113c0 <_scanf_float+0x1dc>
 80113fa:	2d05      	cmp	r5, #5
 80113fc:	e7de      	b.n	80113bc <_scanf_float+0x1d8>
 80113fe:	2d02      	cmp	r5, #2
 8011400:	f47f af22 	bne.w	8011248 <_scanf_float+0x64>
 8011404:	2503      	movs	r5, #3
 8011406:	e7b6      	b.n	8011376 <_scanf_float+0x192>
 8011408:	2d06      	cmp	r5, #6
 801140a:	f47f af1d 	bne.w	8011248 <_scanf_float+0x64>
 801140e:	2507      	movs	r5, #7
 8011410:	e7b1      	b.n	8011376 <_scanf_float+0x192>
 8011412:	6822      	ldr	r2, [r4, #0]
 8011414:	0591      	lsls	r1, r2, #22
 8011416:	f57f af17 	bpl.w	8011248 <_scanf_float+0x64>
 801141a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801141e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011422:	6022      	str	r2, [r4, #0]
 8011424:	e7a7      	b.n	8011376 <_scanf_float+0x192>
 8011426:	6822      	ldr	r2, [r4, #0]
 8011428:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801142c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011430:	d006      	beq.n	8011440 <_scanf_float+0x25c>
 8011432:	0550      	lsls	r0, r2, #21
 8011434:	f57f af08 	bpl.w	8011248 <_scanf_float+0x64>
 8011438:	f1b9 0f00 	cmp.w	r9, #0
 801143c:	f000 80dd 	beq.w	80115fa <_scanf_float+0x416>
 8011440:	0591      	lsls	r1, r2, #22
 8011442:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011446:	bf58      	it	pl
 8011448:	9902      	ldrpl	r1, [sp, #8]
 801144a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801144e:	bf58      	it	pl
 8011450:	eba9 0101 	subpl.w	r1, r9, r1
 8011454:	6022      	str	r2, [r4, #0]
 8011456:	f04f 0900 	mov.w	r9, #0
 801145a:	bf58      	it	pl
 801145c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011460:	e789      	b.n	8011376 <_scanf_float+0x192>
 8011462:	f04f 0a03 	mov.w	sl, #3
 8011466:	e786      	b.n	8011376 <_scanf_float+0x192>
 8011468:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801146c:	4639      	mov	r1, r7
 801146e:	4640      	mov	r0, r8
 8011470:	4798      	blx	r3
 8011472:	2800      	cmp	r0, #0
 8011474:	f43f aedb 	beq.w	801122e <_scanf_float+0x4a>
 8011478:	e6e6      	b.n	8011248 <_scanf_float+0x64>
 801147a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801147e:	463a      	mov	r2, r7
 8011480:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011484:	4640      	mov	r0, r8
 8011486:	4798      	blx	r3
 8011488:	6923      	ldr	r3, [r4, #16]
 801148a:	3b01      	subs	r3, #1
 801148c:	6123      	str	r3, [r4, #16]
 801148e:	e6e8      	b.n	8011262 <_scanf_float+0x7e>
 8011490:	1e6b      	subs	r3, r5, #1
 8011492:	2b06      	cmp	r3, #6
 8011494:	d824      	bhi.n	80114e0 <_scanf_float+0x2fc>
 8011496:	2d02      	cmp	r5, #2
 8011498:	d836      	bhi.n	8011508 <_scanf_float+0x324>
 801149a:	9b01      	ldr	r3, [sp, #4]
 801149c:	429e      	cmp	r6, r3
 801149e:	f67f aee4 	bls.w	801126a <_scanf_float+0x86>
 80114a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114a6:	463a      	mov	r2, r7
 80114a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114ac:	4640      	mov	r0, r8
 80114ae:	4798      	blx	r3
 80114b0:	6923      	ldr	r3, [r4, #16]
 80114b2:	3b01      	subs	r3, #1
 80114b4:	6123      	str	r3, [r4, #16]
 80114b6:	e7f0      	b.n	801149a <_scanf_float+0x2b6>
 80114b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114bc:	463a      	mov	r2, r7
 80114be:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80114c2:	4640      	mov	r0, r8
 80114c4:	4798      	blx	r3
 80114c6:	6923      	ldr	r3, [r4, #16]
 80114c8:	3b01      	subs	r3, #1
 80114ca:	6123      	str	r3, [r4, #16]
 80114cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114d0:	fa5f fa8a 	uxtb.w	sl, sl
 80114d4:	f1ba 0f02 	cmp.w	sl, #2
 80114d8:	d1ee      	bne.n	80114b8 <_scanf_float+0x2d4>
 80114da:	3d03      	subs	r5, #3
 80114dc:	b2ed      	uxtb	r5, r5
 80114de:	1b76      	subs	r6, r6, r5
 80114e0:	6823      	ldr	r3, [r4, #0]
 80114e2:	05da      	lsls	r2, r3, #23
 80114e4:	d52f      	bpl.n	8011546 <_scanf_float+0x362>
 80114e6:	055b      	lsls	r3, r3, #21
 80114e8:	d511      	bpl.n	801150e <_scanf_float+0x32a>
 80114ea:	9b01      	ldr	r3, [sp, #4]
 80114ec:	429e      	cmp	r6, r3
 80114ee:	f67f aebc 	bls.w	801126a <_scanf_float+0x86>
 80114f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114f6:	463a      	mov	r2, r7
 80114f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114fc:	4640      	mov	r0, r8
 80114fe:	4798      	blx	r3
 8011500:	6923      	ldr	r3, [r4, #16]
 8011502:	3b01      	subs	r3, #1
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	e7f0      	b.n	80114ea <_scanf_float+0x306>
 8011508:	46aa      	mov	sl, r5
 801150a:	46b3      	mov	fp, r6
 801150c:	e7de      	b.n	80114cc <_scanf_float+0x2e8>
 801150e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011512:	1e75      	subs	r5, r6, #1
 8011514:	6923      	ldr	r3, [r4, #16]
 8011516:	2965      	cmp	r1, #101	@ 0x65
 8011518:	f103 33ff 	add.w	r3, r3, #4294967295
 801151c:	6123      	str	r3, [r4, #16]
 801151e:	d00c      	beq.n	801153a <_scanf_float+0x356>
 8011520:	2945      	cmp	r1, #69	@ 0x45
 8011522:	d00a      	beq.n	801153a <_scanf_float+0x356>
 8011524:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011528:	463a      	mov	r2, r7
 801152a:	4640      	mov	r0, r8
 801152c:	1eb5      	subs	r5, r6, #2
 801152e:	4798      	blx	r3
 8011530:	6923      	ldr	r3, [r4, #16]
 8011532:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011536:	3b01      	subs	r3, #1
 8011538:	6123      	str	r3, [r4, #16]
 801153a:	462e      	mov	r6, r5
 801153c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011540:	463a      	mov	r2, r7
 8011542:	4640      	mov	r0, r8
 8011544:	4798      	blx	r3
 8011546:	6822      	ldr	r2, [r4, #0]
 8011548:	f012 0210 	ands.w	r2, r2, #16
 801154c:	d001      	beq.n	8011552 <_scanf_float+0x36e>
 801154e:	2000      	movs	r0, #0
 8011550:	e68c      	b.n	801126c <_scanf_float+0x88>
 8011552:	7032      	strb	r2, [r6, #0]
 8011554:	6823      	ldr	r3, [r4, #0]
 8011556:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801155a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801155e:	d11c      	bne.n	801159a <_scanf_float+0x3b6>
 8011560:	9b02      	ldr	r3, [sp, #8]
 8011562:	454b      	cmp	r3, r9
 8011564:	eba3 0209 	sub.w	r2, r3, r9
 8011568:	d123      	bne.n	80115b2 <_scanf_float+0x3ce>
 801156a:	2200      	movs	r2, #0
 801156c:	9901      	ldr	r1, [sp, #4]
 801156e:	4640      	mov	r0, r8
 8011570:	f002 fc66 	bl	8013e40 <_strtod_r>
 8011574:	6821      	ldr	r1, [r4, #0]
 8011576:	9b03      	ldr	r3, [sp, #12]
 8011578:	f011 0f02 	tst.w	r1, #2
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	ec57 6b10 	vmov	r6, r7, d0
 8011582:	f103 0204 	add.w	r2, r3, #4
 8011586:	d01f      	beq.n	80115c8 <_scanf_float+0x3e4>
 8011588:	9903      	ldr	r1, [sp, #12]
 801158a:	600a      	str	r2, [r1, #0]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	e9c3 6700 	strd	r6, r7, [r3]
 8011592:	68e3      	ldr	r3, [r4, #12]
 8011594:	3301      	adds	r3, #1
 8011596:	60e3      	str	r3, [r4, #12]
 8011598:	e7d9      	b.n	801154e <_scanf_float+0x36a>
 801159a:	9b04      	ldr	r3, [sp, #16]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d0e4      	beq.n	801156a <_scanf_float+0x386>
 80115a0:	9905      	ldr	r1, [sp, #20]
 80115a2:	230a      	movs	r3, #10
 80115a4:	4640      	mov	r0, r8
 80115a6:	3101      	adds	r1, #1
 80115a8:	f002 fcca 	bl	8013f40 <_strtol_r>
 80115ac:	9b04      	ldr	r3, [sp, #16]
 80115ae:	9e05      	ldr	r6, [sp, #20]
 80115b0:	1ac2      	subs	r2, r0, r3
 80115b2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80115b6:	4912      	ldr	r1, [pc, #72]	@ (8011600 <_scanf_float+0x41c>)
 80115b8:	429e      	cmp	r6, r3
 80115ba:	bf28      	it	cs
 80115bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80115c0:	4630      	mov	r0, r6
 80115c2:	f000 f931 	bl	8011828 <siprintf>
 80115c6:	e7d0      	b.n	801156a <_scanf_float+0x386>
 80115c8:	f011 0f04 	tst.w	r1, #4
 80115cc:	9903      	ldr	r1, [sp, #12]
 80115ce:	600a      	str	r2, [r1, #0]
 80115d0:	d1dc      	bne.n	801158c <_scanf_float+0x3a8>
 80115d2:	681d      	ldr	r5, [r3, #0]
 80115d4:	4632      	mov	r2, r6
 80115d6:	463b      	mov	r3, r7
 80115d8:	4630      	mov	r0, r6
 80115da:	4639      	mov	r1, r7
 80115dc:	f7ef faaa 	bl	8000b34 <__aeabi_dcmpun>
 80115e0:	b128      	cbz	r0, 80115ee <_scanf_float+0x40a>
 80115e2:	4808      	ldr	r0, [pc, #32]	@ (8011604 <_scanf_float+0x420>)
 80115e4:	f000 fa12 	bl	8011a0c <nanf>
 80115e8:	ed85 0a00 	vstr	s0, [r5]
 80115ec:	e7d1      	b.n	8011592 <_scanf_float+0x3ae>
 80115ee:	4630      	mov	r0, r6
 80115f0:	4639      	mov	r1, r7
 80115f2:	f7ef fafd 	bl	8000bf0 <__aeabi_d2f>
 80115f6:	6028      	str	r0, [r5, #0]
 80115f8:	e7cb      	b.n	8011592 <_scanf_float+0x3ae>
 80115fa:	f04f 0900 	mov.w	r9, #0
 80115fe:	e62a      	b.n	8011256 <_scanf_float+0x72>
 8011600:	08015414 	.word	0x08015414
 8011604:	080157ad 	.word	0x080157ad

08011608 <std>:
 8011608:	2300      	movs	r3, #0
 801160a:	b510      	push	{r4, lr}
 801160c:	4604      	mov	r4, r0
 801160e:	6083      	str	r3, [r0, #8]
 8011610:	8181      	strh	r1, [r0, #12]
 8011612:	4619      	mov	r1, r3
 8011614:	6643      	str	r3, [r0, #100]	@ 0x64
 8011616:	81c2      	strh	r2, [r0, #14]
 8011618:	2208      	movs	r2, #8
 801161a:	6183      	str	r3, [r0, #24]
 801161c:	e9c0 3300 	strd	r3, r3, [r0]
 8011620:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011624:	305c      	adds	r0, #92	@ 0x5c
 8011626:	f000 f962 	bl	80118ee <memset>
 801162a:	4b0d      	ldr	r3, [pc, #52]	@ (8011660 <std+0x58>)
 801162c:	6224      	str	r4, [r4, #32]
 801162e:	6263      	str	r3, [r4, #36]	@ 0x24
 8011630:	4b0c      	ldr	r3, [pc, #48]	@ (8011664 <std+0x5c>)
 8011632:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011634:	4b0c      	ldr	r3, [pc, #48]	@ (8011668 <std+0x60>)
 8011636:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011638:	4b0c      	ldr	r3, [pc, #48]	@ (801166c <std+0x64>)
 801163a:	6323      	str	r3, [r4, #48]	@ 0x30
 801163c:	4b0c      	ldr	r3, [pc, #48]	@ (8011670 <std+0x68>)
 801163e:	429c      	cmp	r4, r3
 8011640:	d006      	beq.n	8011650 <std+0x48>
 8011642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011646:	4294      	cmp	r4, r2
 8011648:	d002      	beq.n	8011650 <std+0x48>
 801164a:	33d0      	adds	r3, #208	@ 0xd0
 801164c:	429c      	cmp	r4, r3
 801164e:	d105      	bne.n	801165c <std+0x54>
 8011650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011658:	f000 b9c6 	b.w	80119e8 <__retarget_lock_init_recursive>
 801165c:	bd10      	pop	{r4, pc}
 801165e:	bf00      	nop
 8011660:	08011869 	.word	0x08011869
 8011664:	0801188b 	.word	0x0801188b
 8011668:	080118c3 	.word	0x080118c3
 801166c:	080118e7 	.word	0x080118e7
 8011670:	200016f8 	.word	0x200016f8

08011674 <stdio_exit_handler>:
 8011674:	4a02      	ldr	r2, [pc, #8]	@ (8011680 <stdio_exit_handler+0xc>)
 8011676:	4903      	ldr	r1, [pc, #12]	@ (8011684 <stdio_exit_handler+0x10>)
 8011678:	4803      	ldr	r0, [pc, #12]	@ (8011688 <stdio_exit_handler+0x14>)
 801167a:	f000 b869 	b.w	8011750 <_fwalk_sglue>
 801167e:	bf00      	nop
 8011680:	20000134 	.word	0x20000134
 8011684:	08014581 	.word	0x08014581
 8011688:	20000144 	.word	0x20000144

0801168c <cleanup_stdio>:
 801168c:	6841      	ldr	r1, [r0, #4]
 801168e:	4b0c      	ldr	r3, [pc, #48]	@ (80116c0 <cleanup_stdio+0x34>)
 8011690:	4299      	cmp	r1, r3
 8011692:	b510      	push	{r4, lr}
 8011694:	4604      	mov	r4, r0
 8011696:	d001      	beq.n	801169c <cleanup_stdio+0x10>
 8011698:	f002 ff72 	bl	8014580 <_fflush_r>
 801169c:	68a1      	ldr	r1, [r4, #8]
 801169e:	4b09      	ldr	r3, [pc, #36]	@ (80116c4 <cleanup_stdio+0x38>)
 80116a0:	4299      	cmp	r1, r3
 80116a2:	d002      	beq.n	80116aa <cleanup_stdio+0x1e>
 80116a4:	4620      	mov	r0, r4
 80116a6:	f002 ff6b 	bl	8014580 <_fflush_r>
 80116aa:	68e1      	ldr	r1, [r4, #12]
 80116ac:	4b06      	ldr	r3, [pc, #24]	@ (80116c8 <cleanup_stdio+0x3c>)
 80116ae:	4299      	cmp	r1, r3
 80116b0:	d004      	beq.n	80116bc <cleanup_stdio+0x30>
 80116b2:	4620      	mov	r0, r4
 80116b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116b8:	f002 bf62 	b.w	8014580 <_fflush_r>
 80116bc:	bd10      	pop	{r4, pc}
 80116be:	bf00      	nop
 80116c0:	200016f8 	.word	0x200016f8
 80116c4:	20001760 	.word	0x20001760
 80116c8:	200017c8 	.word	0x200017c8

080116cc <global_stdio_init.part.0>:
 80116cc:	b510      	push	{r4, lr}
 80116ce:	4b0b      	ldr	r3, [pc, #44]	@ (80116fc <global_stdio_init.part.0+0x30>)
 80116d0:	2104      	movs	r1, #4
 80116d2:	4c0b      	ldr	r4, [pc, #44]	@ (8011700 <global_stdio_init.part.0+0x34>)
 80116d4:	4a0b      	ldr	r2, [pc, #44]	@ (8011704 <global_stdio_init.part.0+0x38>)
 80116d6:	4620      	mov	r0, r4
 80116d8:	601a      	str	r2, [r3, #0]
 80116da:	2200      	movs	r2, #0
 80116dc:	f7ff ff94 	bl	8011608 <std>
 80116e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80116e4:	2201      	movs	r2, #1
 80116e6:	2109      	movs	r1, #9
 80116e8:	f7ff ff8e 	bl	8011608 <std>
 80116ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80116f0:	2202      	movs	r2, #2
 80116f2:	2112      	movs	r1, #18
 80116f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116f8:	f7ff bf86 	b.w	8011608 <std>
 80116fc:	20001830 	.word	0x20001830
 8011700:	200016f8 	.word	0x200016f8
 8011704:	08011675 	.word	0x08011675

08011708 <__sfp_lock_acquire>:
 8011708:	4801      	ldr	r0, [pc, #4]	@ (8011710 <__sfp_lock_acquire+0x8>)
 801170a:	f000 b96e 	b.w	80119ea <__retarget_lock_acquire_recursive>
 801170e:	bf00      	nop
 8011710:	20001839 	.word	0x20001839

08011714 <__sfp_lock_release>:
 8011714:	4801      	ldr	r0, [pc, #4]	@ (801171c <__sfp_lock_release+0x8>)
 8011716:	f000 b969 	b.w	80119ec <__retarget_lock_release_recursive>
 801171a:	bf00      	nop
 801171c:	20001839 	.word	0x20001839

08011720 <__sinit>:
 8011720:	b510      	push	{r4, lr}
 8011722:	4604      	mov	r4, r0
 8011724:	f7ff fff0 	bl	8011708 <__sfp_lock_acquire>
 8011728:	6a23      	ldr	r3, [r4, #32]
 801172a:	b11b      	cbz	r3, 8011734 <__sinit+0x14>
 801172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011730:	f7ff bff0 	b.w	8011714 <__sfp_lock_release>
 8011734:	4b04      	ldr	r3, [pc, #16]	@ (8011748 <__sinit+0x28>)
 8011736:	6223      	str	r3, [r4, #32]
 8011738:	4b04      	ldr	r3, [pc, #16]	@ (801174c <__sinit+0x2c>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d1f5      	bne.n	801172c <__sinit+0xc>
 8011740:	f7ff ffc4 	bl	80116cc <global_stdio_init.part.0>
 8011744:	e7f2      	b.n	801172c <__sinit+0xc>
 8011746:	bf00      	nop
 8011748:	0801168d 	.word	0x0801168d
 801174c:	20001830 	.word	0x20001830

08011750 <_fwalk_sglue>:
 8011750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011754:	4607      	mov	r7, r0
 8011756:	4688      	mov	r8, r1
 8011758:	4614      	mov	r4, r2
 801175a:	2600      	movs	r6, #0
 801175c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011760:	f1b9 0901 	subs.w	r9, r9, #1
 8011764:	d505      	bpl.n	8011772 <_fwalk_sglue+0x22>
 8011766:	6824      	ldr	r4, [r4, #0]
 8011768:	2c00      	cmp	r4, #0
 801176a:	d1f7      	bne.n	801175c <_fwalk_sglue+0xc>
 801176c:	4630      	mov	r0, r6
 801176e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011772:	89ab      	ldrh	r3, [r5, #12]
 8011774:	2b01      	cmp	r3, #1
 8011776:	d907      	bls.n	8011788 <_fwalk_sglue+0x38>
 8011778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801177c:	3301      	adds	r3, #1
 801177e:	d003      	beq.n	8011788 <_fwalk_sglue+0x38>
 8011780:	4629      	mov	r1, r5
 8011782:	4638      	mov	r0, r7
 8011784:	47c0      	blx	r8
 8011786:	4306      	orrs	r6, r0
 8011788:	3568      	adds	r5, #104	@ 0x68
 801178a:	e7e9      	b.n	8011760 <_fwalk_sglue+0x10>

0801178c <iprintf>:
 801178c:	b40f      	push	{r0, r1, r2, r3}
 801178e:	b507      	push	{r0, r1, r2, lr}
 8011790:	4906      	ldr	r1, [pc, #24]	@ (80117ac <iprintf+0x20>)
 8011792:	ab04      	add	r3, sp, #16
 8011794:	6808      	ldr	r0, [r1, #0]
 8011796:	f853 2b04 	ldr.w	r2, [r3], #4
 801179a:	6881      	ldr	r1, [r0, #8]
 801179c:	9301      	str	r3, [sp, #4]
 801179e:	f002 fd53 	bl	8014248 <_vfiprintf_r>
 80117a2:	b003      	add	sp, #12
 80117a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80117a8:	b004      	add	sp, #16
 80117aa:	4770      	bx	lr
 80117ac:	20000140 	.word	0x20000140

080117b0 <putchar>:
 80117b0:	4b02      	ldr	r3, [pc, #8]	@ (80117bc <putchar+0xc>)
 80117b2:	4601      	mov	r1, r0
 80117b4:	6818      	ldr	r0, [r3, #0]
 80117b6:	6882      	ldr	r2, [r0, #8]
 80117b8:	f002 bf0a 	b.w	80145d0 <_putc_r>
 80117bc:	20000140 	.word	0x20000140

080117c0 <sniprintf>:
 80117c0:	b40c      	push	{r2, r3}
 80117c2:	4b18      	ldr	r3, [pc, #96]	@ (8011824 <sniprintf+0x64>)
 80117c4:	b530      	push	{r4, r5, lr}
 80117c6:	1e0c      	subs	r4, r1, #0
 80117c8:	b09d      	sub	sp, #116	@ 0x74
 80117ca:	681d      	ldr	r5, [r3, #0]
 80117cc:	da08      	bge.n	80117e0 <sniprintf+0x20>
 80117ce:	238b      	movs	r3, #139	@ 0x8b
 80117d0:	f04f 30ff 	mov.w	r0, #4294967295
 80117d4:	602b      	str	r3, [r5, #0]
 80117d6:	b01d      	add	sp, #116	@ 0x74
 80117d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117dc:	b002      	add	sp, #8
 80117de:	4770      	bx	lr
 80117e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80117e4:	9002      	str	r0, [sp, #8]
 80117e6:	9006      	str	r0, [sp, #24]
 80117e8:	a902      	add	r1, sp, #8
 80117ea:	f8ad 3014 	strh.w	r3, [sp, #20]
 80117ee:	bf14      	ite	ne
 80117f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80117f4:	4623      	moveq	r3, r4
 80117f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80117f8:	4628      	mov	r0, r5
 80117fa:	9304      	str	r3, [sp, #16]
 80117fc:	9307      	str	r3, [sp, #28]
 80117fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011802:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011806:	ab21      	add	r3, sp, #132	@ 0x84
 8011808:	9301      	str	r3, [sp, #4]
 801180a:	f002 fbf7 	bl	8013ffc <_svfiprintf_r>
 801180e:	1c43      	adds	r3, r0, #1
 8011810:	bfbc      	itt	lt
 8011812:	238b      	movlt	r3, #139	@ 0x8b
 8011814:	602b      	strlt	r3, [r5, #0]
 8011816:	2c00      	cmp	r4, #0
 8011818:	d0dd      	beq.n	80117d6 <sniprintf+0x16>
 801181a:	9b02      	ldr	r3, [sp, #8]
 801181c:	2200      	movs	r2, #0
 801181e:	701a      	strb	r2, [r3, #0]
 8011820:	e7d9      	b.n	80117d6 <sniprintf+0x16>
 8011822:	bf00      	nop
 8011824:	20000140 	.word	0x20000140

08011828 <siprintf>:
 8011828:	b40e      	push	{r1, r2, r3}
 801182a:	b500      	push	{lr}
 801182c:	b09c      	sub	sp, #112	@ 0x70
 801182e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011832:	ab1d      	add	r3, sp, #116	@ 0x74
 8011834:	9002      	str	r0, [sp, #8]
 8011836:	9006      	str	r0, [sp, #24]
 8011838:	9107      	str	r1, [sp, #28]
 801183a:	9104      	str	r1, [sp, #16]
 801183c:	4808      	ldr	r0, [pc, #32]	@ (8011860 <siprintf+0x38>)
 801183e:	4909      	ldr	r1, [pc, #36]	@ (8011864 <siprintf+0x3c>)
 8011840:	f853 2b04 	ldr.w	r2, [r3], #4
 8011844:	9105      	str	r1, [sp, #20]
 8011846:	a902      	add	r1, sp, #8
 8011848:	6800      	ldr	r0, [r0, #0]
 801184a:	9301      	str	r3, [sp, #4]
 801184c:	f002 fbd6 	bl	8013ffc <_svfiprintf_r>
 8011850:	9b02      	ldr	r3, [sp, #8]
 8011852:	2200      	movs	r2, #0
 8011854:	701a      	strb	r2, [r3, #0]
 8011856:	b01c      	add	sp, #112	@ 0x70
 8011858:	f85d eb04 	ldr.w	lr, [sp], #4
 801185c:	b003      	add	sp, #12
 801185e:	4770      	bx	lr
 8011860:	20000140 	.word	0x20000140
 8011864:	ffff0208 	.word	0xffff0208

08011868 <__sread>:
 8011868:	b510      	push	{r4, lr}
 801186a:	460c      	mov	r4, r1
 801186c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011870:	f000 f86c 	bl	801194c <_read_r>
 8011874:	2800      	cmp	r0, #0
 8011876:	bfab      	itete	ge
 8011878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801187a:	89a3      	ldrhlt	r3, [r4, #12]
 801187c:	181b      	addge	r3, r3, r0
 801187e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011882:	bfac      	ite	ge
 8011884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011886:	81a3      	strhlt	r3, [r4, #12]
 8011888:	bd10      	pop	{r4, pc}

0801188a <__swrite>:
 801188a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801188e:	461f      	mov	r7, r3
 8011890:	898b      	ldrh	r3, [r1, #12]
 8011892:	4605      	mov	r5, r0
 8011894:	460c      	mov	r4, r1
 8011896:	05db      	lsls	r3, r3, #23
 8011898:	4616      	mov	r6, r2
 801189a:	d505      	bpl.n	80118a8 <__swrite+0x1e>
 801189c:	2302      	movs	r3, #2
 801189e:	2200      	movs	r2, #0
 80118a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118a4:	f000 f840 	bl	8011928 <_lseek_r>
 80118a8:	89a3      	ldrh	r3, [r4, #12]
 80118aa:	4632      	mov	r2, r6
 80118ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118b0:	4628      	mov	r0, r5
 80118b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80118b6:	81a3      	strh	r3, [r4, #12]
 80118b8:	463b      	mov	r3, r7
 80118ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118be:	f000 b857 	b.w	8011970 <_write_r>

080118c2 <__sseek>:
 80118c2:	b510      	push	{r4, lr}
 80118c4:	460c      	mov	r4, r1
 80118c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118ca:	f000 f82d 	bl	8011928 <_lseek_r>
 80118ce:	1c43      	adds	r3, r0, #1
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	bf15      	itete	ne
 80118d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80118d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80118da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80118de:	81a3      	strheq	r3, [r4, #12]
 80118e0:	bf18      	it	ne
 80118e2:	81a3      	strhne	r3, [r4, #12]
 80118e4:	bd10      	pop	{r4, pc}

080118e6 <__sclose>:
 80118e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118ea:	f000 b80d 	b.w	8011908 <_close_r>

080118ee <memset>:
 80118ee:	4402      	add	r2, r0
 80118f0:	4603      	mov	r3, r0
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d100      	bne.n	80118f8 <memset+0xa>
 80118f6:	4770      	bx	lr
 80118f8:	f803 1b01 	strb.w	r1, [r3], #1
 80118fc:	e7f9      	b.n	80118f2 <memset+0x4>
	...

08011900 <_localeconv_r>:
 8011900:	4800      	ldr	r0, [pc, #0]	@ (8011904 <_localeconv_r+0x4>)
 8011902:	4770      	bx	lr
 8011904:	20000280 	.word	0x20000280

08011908 <_close_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	2300      	movs	r3, #0
 801190c:	4d05      	ldr	r5, [pc, #20]	@ (8011924 <_close_r+0x1c>)
 801190e:	4604      	mov	r4, r0
 8011910:	4608      	mov	r0, r1
 8011912:	602b      	str	r3, [r5, #0]
 8011914:	f7f1 fa0c 	bl	8002d30 <_close>
 8011918:	1c43      	adds	r3, r0, #1
 801191a:	d102      	bne.n	8011922 <_close_r+0x1a>
 801191c:	682b      	ldr	r3, [r5, #0]
 801191e:	b103      	cbz	r3, 8011922 <_close_r+0x1a>
 8011920:	6023      	str	r3, [r4, #0]
 8011922:	bd38      	pop	{r3, r4, r5, pc}
 8011924:	20001834 	.word	0x20001834

08011928 <_lseek_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4604      	mov	r4, r0
 801192c:	4d06      	ldr	r5, [pc, #24]	@ (8011948 <_lseek_r+0x20>)
 801192e:	4608      	mov	r0, r1
 8011930:	4611      	mov	r1, r2
 8011932:	2200      	movs	r2, #0
 8011934:	602a      	str	r2, [r5, #0]
 8011936:	461a      	mov	r2, r3
 8011938:	f7f1 fa21 	bl	8002d7e <_lseek>
 801193c:	1c43      	adds	r3, r0, #1
 801193e:	d102      	bne.n	8011946 <_lseek_r+0x1e>
 8011940:	682b      	ldr	r3, [r5, #0]
 8011942:	b103      	cbz	r3, 8011946 <_lseek_r+0x1e>
 8011944:	6023      	str	r3, [r4, #0]
 8011946:	bd38      	pop	{r3, r4, r5, pc}
 8011948:	20001834 	.word	0x20001834

0801194c <_read_r>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	4604      	mov	r4, r0
 8011950:	4d06      	ldr	r5, [pc, #24]	@ (801196c <_read_r+0x20>)
 8011952:	4608      	mov	r0, r1
 8011954:	4611      	mov	r1, r2
 8011956:	2200      	movs	r2, #0
 8011958:	602a      	str	r2, [r5, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	f7f1 f9cb 	bl	8002cf6 <_read>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_read_r+0x1e>
 8011964:	682b      	ldr	r3, [r5, #0]
 8011966:	b103      	cbz	r3, 801196a <_read_r+0x1e>
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	20001834 	.word	0x20001834

08011970 <_write_r>:
 8011970:	b538      	push	{r3, r4, r5, lr}
 8011972:	4604      	mov	r4, r0
 8011974:	4d06      	ldr	r5, [pc, #24]	@ (8011990 <_write_r+0x20>)
 8011976:	4608      	mov	r0, r1
 8011978:	4611      	mov	r1, r2
 801197a:	2200      	movs	r2, #0
 801197c:	602a      	str	r2, [r5, #0]
 801197e:	461a      	mov	r2, r3
 8011980:	f7f0 fb40 	bl	8002004 <_write>
 8011984:	1c43      	adds	r3, r0, #1
 8011986:	d102      	bne.n	801198e <_write_r+0x1e>
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	b103      	cbz	r3, 801198e <_write_r+0x1e>
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	bd38      	pop	{r3, r4, r5, pc}
 8011990:	20001834 	.word	0x20001834

08011994 <__errno>:
 8011994:	4b01      	ldr	r3, [pc, #4]	@ (801199c <__errno+0x8>)
 8011996:	6818      	ldr	r0, [r3, #0]
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	20000140 	.word	0x20000140

080119a0 <__libc_init_array>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	4d0d      	ldr	r5, [pc, #52]	@ (80119d8 <__libc_init_array+0x38>)
 80119a4:	2600      	movs	r6, #0
 80119a6:	4c0d      	ldr	r4, [pc, #52]	@ (80119dc <__libc_init_array+0x3c>)
 80119a8:	1b64      	subs	r4, r4, r5
 80119aa:	10a4      	asrs	r4, r4, #2
 80119ac:	42a6      	cmp	r6, r4
 80119ae:	d109      	bne.n	80119c4 <__libc_init_array+0x24>
 80119b0:	4d0b      	ldr	r5, [pc, #44]	@ (80119e0 <__libc_init_array+0x40>)
 80119b2:	2600      	movs	r6, #0
 80119b4:	4c0b      	ldr	r4, [pc, #44]	@ (80119e4 <__libc_init_array+0x44>)
 80119b6:	f003 fbc5 	bl	8015144 <_init>
 80119ba:	1b64      	subs	r4, r4, r5
 80119bc:	10a4      	asrs	r4, r4, #2
 80119be:	42a6      	cmp	r6, r4
 80119c0:	d105      	bne.n	80119ce <__libc_init_array+0x2e>
 80119c2:	bd70      	pop	{r4, r5, r6, pc}
 80119c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80119c8:	3601      	adds	r6, #1
 80119ca:	4798      	blx	r3
 80119cc:	e7ee      	b.n	80119ac <__libc_init_array+0xc>
 80119ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80119d2:	3601      	adds	r6, #1
 80119d4:	4798      	blx	r3
 80119d6:	e7f2      	b.n	80119be <__libc_init_array+0x1e>
 80119d8:	08015818 	.word	0x08015818
 80119dc:	08015818 	.word	0x08015818
 80119e0:	08015818 	.word	0x08015818
 80119e4:	0801581c 	.word	0x0801581c

080119e8 <__retarget_lock_init_recursive>:
 80119e8:	4770      	bx	lr

080119ea <__retarget_lock_acquire_recursive>:
 80119ea:	4770      	bx	lr

080119ec <__retarget_lock_release_recursive>:
 80119ec:	4770      	bx	lr

080119ee <memchr>:
 80119ee:	b2c9      	uxtb	r1, r1
 80119f0:	4603      	mov	r3, r0
 80119f2:	4402      	add	r2, r0
 80119f4:	b510      	push	{r4, lr}
 80119f6:	4293      	cmp	r3, r2
 80119f8:	4618      	mov	r0, r3
 80119fa:	d101      	bne.n	8011a00 <memchr+0x12>
 80119fc:	2000      	movs	r0, #0
 80119fe:	e003      	b.n	8011a08 <memchr+0x1a>
 8011a00:	7804      	ldrb	r4, [r0, #0]
 8011a02:	3301      	adds	r3, #1
 8011a04:	428c      	cmp	r4, r1
 8011a06:	d1f6      	bne.n	80119f6 <memchr+0x8>
 8011a08:	bd10      	pop	{r4, pc}
	...

08011a0c <nanf>:
 8011a0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011a14 <nanf+0x8>
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	7fc00000 	.word	0x7fc00000

08011a18 <quorem>:
 8011a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a1c:	6903      	ldr	r3, [r0, #16]
 8011a1e:	4607      	mov	r7, r0
 8011a20:	690c      	ldr	r4, [r1, #16]
 8011a22:	42a3      	cmp	r3, r4
 8011a24:	f2c0 8083 	blt.w	8011b2e <quorem+0x116>
 8011a28:	3c01      	subs	r4, #1
 8011a2a:	f100 0514 	add.w	r5, r0, #20
 8011a2e:	f101 0814 	add.w	r8, r1, #20
 8011a32:	00a3      	lsls	r3, r4, #2
 8011a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a42:	9301      	str	r3, [sp, #4]
 8011a44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a50:	d331      	bcc.n	8011ab6 <quorem+0x9e>
 8011a52:	f04f 0a00 	mov.w	sl, #0
 8011a56:	46c4      	mov	ip, r8
 8011a58:	46ae      	mov	lr, r5
 8011a5a:	46d3      	mov	fp, sl
 8011a5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011a60:	b298      	uxth	r0, r3
 8011a62:	45e1      	cmp	r9, ip
 8011a64:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8011a68:	fb06 a000 	mla	r0, r6, r0, sl
 8011a6c:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8011a70:	b280      	uxth	r0, r0
 8011a72:	fb06 2303 	mla	r3, r6, r3, r2
 8011a76:	f8de 2000 	ldr.w	r2, [lr]
 8011a7a:	b292      	uxth	r2, r2
 8011a7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011a80:	eba2 0200 	sub.w	r2, r2, r0
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	f8de 0000 	ldr.w	r0, [lr]
 8011a8a:	445a      	add	r2, fp
 8011a8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011a90:	b292      	uxth	r2, r2
 8011a92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011a96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011a9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011a9e:	f84e 2b04 	str.w	r2, [lr], #4
 8011aa2:	d2db      	bcs.n	8011a5c <quorem+0x44>
 8011aa4:	9b00      	ldr	r3, [sp, #0]
 8011aa6:	58eb      	ldr	r3, [r5, r3]
 8011aa8:	b92b      	cbnz	r3, 8011ab6 <quorem+0x9e>
 8011aaa:	9b01      	ldr	r3, [sp, #4]
 8011aac:	3b04      	subs	r3, #4
 8011aae:	429d      	cmp	r5, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	d330      	bcc.n	8011b16 <quorem+0xfe>
 8011ab4:	613c      	str	r4, [r7, #16]
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	f001 f9c8 	bl	8012e4c <__mcmp>
 8011abc:	2800      	cmp	r0, #0
 8011abe:	db26      	blt.n	8011b0e <quorem+0xf6>
 8011ac0:	4629      	mov	r1, r5
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ac8:	f8d1 c000 	ldr.w	ip, [r1]
 8011acc:	fa1f fe82 	uxth.w	lr, r2
 8011ad0:	45c1      	cmp	r9, r8
 8011ad2:	fa1f f38c 	uxth.w	r3, ip
 8011ad6:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8011ada:	eba3 030e 	sub.w	r3, r3, lr
 8011ade:	4403      	add	r3, r0
 8011ae0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011af2:	f841 3b04 	str.w	r3, [r1], #4
 8011af6:	d2e5      	bcs.n	8011ac4 <quorem+0xac>
 8011af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011afc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b00:	b922      	cbnz	r2, 8011b0c <quorem+0xf4>
 8011b02:	3b04      	subs	r3, #4
 8011b04:	429d      	cmp	r5, r3
 8011b06:	461a      	mov	r2, r3
 8011b08:	d30b      	bcc.n	8011b22 <quorem+0x10a>
 8011b0a:	613c      	str	r4, [r7, #16]
 8011b0c:	3601      	adds	r6, #1
 8011b0e:	4630      	mov	r0, r6
 8011b10:	b003      	add	sp, #12
 8011b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b16:	6812      	ldr	r2, [r2, #0]
 8011b18:	3b04      	subs	r3, #4
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	d1ca      	bne.n	8011ab4 <quorem+0x9c>
 8011b1e:	3c01      	subs	r4, #1
 8011b20:	e7c5      	b.n	8011aae <quorem+0x96>
 8011b22:	6812      	ldr	r2, [r2, #0]
 8011b24:	3b04      	subs	r3, #4
 8011b26:	2a00      	cmp	r2, #0
 8011b28:	d1ef      	bne.n	8011b0a <quorem+0xf2>
 8011b2a:	3c01      	subs	r4, #1
 8011b2c:	e7ea      	b.n	8011b04 <quorem+0xec>
 8011b2e:	2000      	movs	r0, #0
 8011b30:	e7ee      	b.n	8011b10 <quorem+0xf8>
 8011b32:	0000      	movs	r0, r0
 8011b34:	0000      	movs	r0, r0
	...

08011b38 <_dtoa_r>:
 8011b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3c:	69c7      	ldr	r7, [r0, #28]
 8011b3e:	b099      	sub	sp, #100	@ 0x64
 8011b40:	4683      	mov	fp, r0
 8011b42:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011b44:	9109      	str	r1, [sp, #36]	@ 0x24
 8011b46:	920e      	str	r2, [sp, #56]	@ 0x38
 8011b48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011b4a:	ec55 4b10 	vmov	r4, r5, d0
 8011b4e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011b52:	b97f      	cbnz	r7, 8011b74 <_dtoa_r+0x3c>
 8011b54:	2010      	movs	r0, #16
 8011b56:	f000 fdfd 	bl	8012754 <malloc>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011b60:	b920      	cbnz	r0, 8011b6c <_dtoa_r+0x34>
 8011b62:	4ba7      	ldr	r3, [pc, #668]	@ (8011e00 <_dtoa_r+0x2c8>)
 8011b64:	21ef      	movs	r1, #239	@ 0xef
 8011b66:	48a7      	ldr	r0, [pc, #668]	@ (8011e04 <_dtoa_r+0x2cc>)
 8011b68:	f002 fe4e 	bl	8014808 <__assert_func>
 8011b6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011b70:	6007      	str	r7, [r0, #0]
 8011b72:	60c7      	str	r7, [r0, #12]
 8011b74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011b78:	6819      	ldr	r1, [r3, #0]
 8011b7a:	b159      	cbz	r1, 8011b94 <_dtoa_r+0x5c>
 8011b7c:	685a      	ldr	r2, [r3, #4]
 8011b7e:	2301      	movs	r3, #1
 8011b80:	4658      	mov	r0, fp
 8011b82:	4093      	lsls	r3, r2
 8011b84:	604a      	str	r2, [r1, #4]
 8011b86:	608b      	str	r3, [r1, #8]
 8011b88:	f000 feda 	bl	8012940 <_Bfree>
 8011b8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011b90:	2200      	movs	r2, #0
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	1e2b      	subs	r3, r5, #0
 8011b96:	bfb7      	itett	lt
 8011b98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011b9c:	2300      	movge	r3, #0
 8011b9e:	2201      	movlt	r2, #1
 8011ba0:	9303      	strlt	r3, [sp, #12]
 8011ba2:	bfa8      	it	ge
 8011ba4:	6033      	strge	r3, [r6, #0]
 8011ba6:	9f03      	ldr	r7, [sp, #12]
 8011ba8:	4b97      	ldr	r3, [pc, #604]	@ (8011e08 <_dtoa_r+0x2d0>)
 8011baa:	bfb8      	it	lt
 8011bac:	6032      	strlt	r2, [r6, #0]
 8011bae:	43bb      	bics	r3, r7
 8011bb0:	d112      	bne.n	8011bd8 <_dtoa_r+0xa0>
 8011bb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011bb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011bb8:	6013      	str	r3, [r2, #0]
 8011bba:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011bbe:	4323      	orrs	r3, r4
 8011bc0:	f000 854c 	beq.w	801265c <_dtoa_r+0xb24>
 8011bc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011bc6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011e1c <_dtoa_r+0x2e4>
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f000 854e 	beq.w	801266c <_dtoa_r+0xb34>
 8011bd0:	f10a 0303 	add.w	r3, sl, #3
 8011bd4:	f000 bd48 	b.w	8012668 <_dtoa_r+0xb30>
 8011bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	2300      	movs	r3, #0
 8011be0:	ec51 0b17 	vmov	r0, r1, d7
 8011be4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011be8:	f7ee ff72 	bl	8000ad0 <__aeabi_dcmpeq>
 8011bec:	4680      	mov	r8, r0
 8011bee:	b158      	cbz	r0, 8011c08 <_dtoa_r+0xd0>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011bf4:	6013      	str	r3, [r2, #0]
 8011bf6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011bf8:	b113      	cbz	r3, 8011c00 <_dtoa_r+0xc8>
 8011bfa:	4b84      	ldr	r3, [pc, #528]	@ (8011e0c <_dtoa_r+0x2d4>)
 8011bfc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011bfe:	6013      	str	r3, [r2, #0]
 8011c00:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8011e20 <_dtoa_r+0x2e8>
 8011c04:	f000 bd32 	b.w	801266c <_dtoa_r+0xb34>
 8011c08:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011c0c:	aa16      	add	r2, sp, #88	@ 0x58
 8011c0e:	a917      	add	r1, sp, #92	@ 0x5c
 8011c10:	4658      	mov	r0, fp
 8011c12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011c16:	f001 fa41 	bl	801309c <__d2b>
 8011c1a:	4681      	mov	r9, r0
 8011c1c:	2e00      	cmp	r6, #0
 8011c1e:	d075      	beq.n	8011d0c <_dtoa_r+0x1d4>
 8011c20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c22:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011c26:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c2e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011c32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c36:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	4b74      	ldr	r3, [pc, #464]	@ (8011e10 <_dtoa_r+0x2d8>)
 8011c40:	f7ee fb26 	bl	8000290 <__aeabi_dsub>
 8011c44:	a368      	add	r3, pc, #416	@ (adr r3, 8011de8 <_dtoa_r+0x2b0>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	f7ee fcd9 	bl	8000600 <__aeabi_dmul>
 8011c4e:	a368      	add	r3, pc, #416	@ (adr r3, 8011df0 <_dtoa_r+0x2b8>)
 8011c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c54:	f7ee fb1e 	bl	8000294 <__adddf3>
 8011c58:	4604      	mov	r4, r0
 8011c5a:	460d      	mov	r5, r1
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	f7ee fc65 	bl	800052c <__aeabi_i2d>
 8011c62:	a365      	add	r3, pc, #404	@ (adr r3, 8011df8 <_dtoa_r+0x2c0>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	f7ee fcca 	bl	8000600 <__aeabi_dmul>
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	460b      	mov	r3, r1
 8011c70:	4620      	mov	r0, r4
 8011c72:	4629      	mov	r1, r5
 8011c74:	f7ee fb0e 	bl	8000294 <__adddf3>
 8011c78:	4604      	mov	r4, r0
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	f7ee ff70 	bl	8000b60 <__aeabi_d2iz>
 8011c80:	2200      	movs	r2, #0
 8011c82:	4607      	mov	r7, r0
 8011c84:	2300      	movs	r3, #0
 8011c86:	4620      	mov	r0, r4
 8011c88:	4629      	mov	r1, r5
 8011c8a:	f7ee ff2b 	bl	8000ae4 <__aeabi_dcmplt>
 8011c8e:	b140      	cbz	r0, 8011ca2 <_dtoa_r+0x16a>
 8011c90:	4638      	mov	r0, r7
 8011c92:	f7ee fc4b 	bl	800052c <__aeabi_i2d>
 8011c96:	4622      	mov	r2, r4
 8011c98:	462b      	mov	r3, r5
 8011c9a:	f7ee ff19 	bl	8000ad0 <__aeabi_dcmpeq>
 8011c9e:	b900      	cbnz	r0, 8011ca2 <_dtoa_r+0x16a>
 8011ca0:	3f01      	subs	r7, #1
 8011ca2:	2f16      	cmp	r7, #22
 8011ca4:	d851      	bhi.n	8011d4a <_dtoa_r+0x212>
 8011ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8011e14 <_dtoa_r+0x2dc>)
 8011ca8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	f7ee ff16 	bl	8000ae4 <__aeabi_dcmplt>
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	d048      	beq.n	8011d4e <_dtoa_r+0x216>
 8011cbc:	3f01      	subs	r7, #1
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	9312      	str	r3, [sp, #72]	@ 0x48
 8011cc2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011cc4:	1b9b      	subs	r3, r3, r6
 8011cc6:	1e5a      	subs	r2, r3, #1
 8011cc8:	bf46      	itte	mi
 8011cca:	f1c3 0801 	rsbmi	r8, r3, #1
 8011cce:	2300      	movmi	r3, #0
 8011cd0:	f04f 0800 	movpl.w	r8, #0
 8011cd4:	9208      	str	r2, [sp, #32]
 8011cd6:	bf48      	it	mi
 8011cd8:	9308      	strmi	r3, [sp, #32]
 8011cda:	2f00      	cmp	r7, #0
 8011cdc:	db39      	blt.n	8011d52 <_dtoa_r+0x21a>
 8011cde:	9b08      	ldr	r3, [sp, #32]
 8011ce0:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011ce2:	443b      	add	r3, r7
 8011ce4:	9308      	str	r3, [sp, #32]
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cec:	2b09      	cmp	r3, #9
 8011cee:	d864      	bhi.n	8011dba <_dtoa_r+0x282>
 8011cf0:	2b05      	cmp	r3, #5
 8011cf2:	bfc5      	ittet	gt
 8011cf4:	3b04      	subgt	r3, #4
 8011cf6:	2400      	movgt	r4, #0
 8011cf8:	2401      	movle	r4, #1
 8011cfa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cfe:	3b02      	subs	r3, #2
 8011d00:	2b03      	cmp	r3, #3
 8011d02:	d865      	bhi.n	8011dd0 <_dtoa_r+0x298>
 8011d04:	e8df f003 	tbb	[pc, r3]
 8011d08:	5737392c 	.word	0x5737392c
 8011d0c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011d10:	441e      	add	r6, r3
 8011d12:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011d16:	2b20      	cmp	r3, #32
 8011d18:	bfc9      	itett	gt
 8011d1a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011d1e:	f1c3 0320 	rsble	r3, r3, #32
 8011d22:	409f      	lslgt	r7, r3
 8011d24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011d28:	bfd8      	it	le
 8011d2a:	fa04 f003 	lslle.w	r0, r4, r3
 8011d2e:	f106 36ff 	add.w	r6, r6, #4294967295
 8011d32:	bfc4      	itt	gt
 8011d34:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011d38:	ea47 0003 	orrgt.w	r0, r7, r3
 8011d3c:	f7ee fbe6 	bl	800050c <__aeabi_ui2d>
 8011d40:	2201      	movs	r2, #1
 8011d42:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011d46:	9214      	str	r2, [sp, #80]	@ 0x50
 8011d48:	e777      	b.n	8011c3a <_dtoa_r+0x102>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	e7b8      	b.n	8011cc0 <_dtoa_r+0x188>
 8011d4e:	9012      	str	r0, [sp, #72]	@ 0x48
 8011d50:	e7b7      	b.n	8011cc2 <_dtoa_r+0x18a>
 8011d52:	427b      	negs	r3, r7
 8011d54:	eba8 0807 	sub.w	r8, r8, r7
 8011d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011d5e:	e7c4      	b.n	8011cea <_dtoa_r+0x1b2>
 8011d60:	2300      	movs	r3, #0
 8011d62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	dc35      	bgt.n	8011dd6 <_dtoa_r+0x29e>
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	9307      	str	r3, [sp, #28]
 8011d72:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d74:	e00b      	b.n	8011d8e <_dtoa_r+0x256>
 8011d76:	2301      	movs	r3, #1
 8011d78:	e7f3      	b.n	8011d62 <_dtoa_r+0x22a>
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d80:	18fb      	adds	r3, r7, r3
 8011d82:	9300      	str	r3, [sp, #0]
 8011d84:	3301      	adds	r3, #1
 8011d86:	2b01      	cmp	r3, #1
 8011d88:	9307      	str	r3, [sp, #28]
 8011d8a:	bfb8      	it	lt
 8011d8c:	2301      	movlt	r3, #1
 8011d8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011d92:	2100      	movs	r1, #0
 8011d94:	2204      	movs	r2, #4
 8011d96:	f102 0514 	add.w	r5, r2, #20
 8011d9a:	429d      	cmp	r5, r3
 8011d9c:	d91f      	bls.n	8011dde <_dtoa_r+0x2a6>
 8011d9e:	6041      	str	r1, [r0, #4]
 8011da0:	4658      	mov	r0, fp
 8011da2:	f000 fd8d 	bl	80128c0 <_Balloc>
 8011da6:	4682      	mov	sl, r0
 8011da8:	2800      	cmp	r0, #0
 8011daa:	d13b      	bne.n	8011e24 <_dtoa_r+0x2ec>
 8011dac:	4b1a      	ldr	r3, [pc, #104]	@ (8011e18 <_dtoa_r+0x2e0>)
 8011dae:	4602      	mov	r2, r0
 8011db0:	f240 11af 	movw	r1, #431	@ 0x1af
 8011db4:	e6d7      	b.n	8011b66 <_dtoa_r+0x2e>
 8011db6:	2301      	movs	r3, #1
 8011db8:	e7e0      	b.n	8011d7c <_dtoa_r+0x244>
 8011dba:	2401      	movs	r4, #1
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	9300      	str	r3, [sp, #0]
 8011dca:	9307      	str	r3, [sp, #28]
 8011dcc:	2312      	movs	r3, #18
 8011dce:	e7d0      	b.n	8011d72 <_dtoa_r+0x23a>
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011dd4:	e7f5      	b.n	8011dc2 <_dtoa_r+0x28a>
 8011dd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011dd8:	9300      	str	r3, [sp, #0]
 8011dda:	9307      	str	r3, [sp, #28]
 8011ddc:	e7d7      	b.n	8011d8e <_dtoa_r+0x256>
 8011dde:	3101      	adds	r1, #1
 8011de0:	0052      	lsls	r2, r2, #1
 8011de2:	e7d8      	b.n	8011d96 <_dtoa_r+0x25e>
 8011de4:	f3af 8000 	nop.w
 8011de8:	636f4361 	.word	0x636f4361
 8011dec:	3fd287a7 	.word	0x3fd287a7
 8011df0:	8b60c8b3 	.word	0x8b60c8b3
 8011df4:	3fc68a28 	.word	0x3fc68a28
 8011df8:	509f79fb 	.word	0x509f79fb
 8011dfc:	3fd34413 	.word	0x3fd34413
 8011e00:	08015426 	.word	0x08015426
 8011e04:	0801543d 	.word	0x0801543d
 8011e08:	7ff00000 	.word	0x7ff00000
 8011e0c:	080153f1 	.word	0x080153f1
 8011e10:	3ff80000 	.word	0x3ff80000
 8011e14:	08015538 	.word	0x08015538
 8011e18:	08015495 	.word	0x08015495
 8011e1c:	08015422 	.word	0x08015422
 8011e20:	080153f0 	.word	0x080153f0
 8011e24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011e28:	6018      	str	r0, [r3, #0]
 8011e2a:	9b07      	ldr	r3, [sp, #28]
 8011e2c:	2b0e      	cmp	r3, #14
 8011e2e:	f200 80a4 	bhi.w	8011f7a <_dtoa_r+0x442>
 8011e32:	2c00      	cmp	r4, #0
 8011e34:	f000 80a1 	beq.w	8011f7a <_dtoa_r+0x442>
 8011e38:	2f00      	cmp	r7, #0
 8011e3a:	dd33      	ble.n	8011ea4 <_dtoa_r+0x36c>
 8011e3c:	f007 020f 	and.w	r2, r7, #15
 8011e40:	4bac      	ldr	r3, [pc, #688]	@ (80120f4 <_dtoa_r+0x5bc>)
 8011e42:	05f8      	lsls	r0, r7, #23
 8011e44:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e4c:	ed93 7b00 	vldr	d7, [r3]
 8011e50:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e54:	d516      	bpl.n	8011e84 <_dtoa_r+0x34c>
 8011e56:	4ba8      	ldr	r3, [pc, #672]	@ (80120f8 <_dtoa_r+0x5c0>)
 8011e58:	f004 040f 	and.w	r4, r4, #15
 8011e5c:	2603      	movs	r6, #3
 8011e5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e66:	f7ee fcf5 	bl	8000854 <__aeabi_ddiv>
 8011e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e6e:	4da2      	ldr	r5, [pc, #648]	@ (80120f8 <_dtoa_r+0x5c0>)
 8011e70:	b954      	cbnz	r4, 8011e88 <_dtoa_r+0x350>
 8011e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e7a:	f7ee fceb 	bl	8000854 <__aeabi_ddiv>
 8011e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e82:	e028      	b.n	8011ed6 <_dtoa_r+0x39e>
 8011e84:	2602      	movs	r6, #2
 8011e86:	e7f2      	b.n	8011e6e <_dtoa_r+0x336>
 8011e88:	07e1      	lsls	r1, r4, #31
 8011e8a:	d508      	bpl.n	8011e9e <_dtoa_r+0x366>
 8011e8c:	3601      	adds	r6, #1
 8011e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e96:	f7ee fbb3 	bl	8000600 <__aeabi_dmul>
 8011e9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e9e:	1064      	asrs	r4, r4, #1
 8011ea0:	3508      	adds	r5, #8
 8011ea2:	e7e5      	b.n	8011e70 <_dtoa_r+0x338>
 8011ea4:	f000 80d2 	beq.w	801204c <_dtoa_r+0x514>
 8011ea8:	427c      	negs	r4, r7
 8011eaa:	4b92      	ldr	r3, [pc, #584]	@ (80120f4 <_dtoa_r+0x5bc>)
 8011eac:	4d92      	ldr	r5, [pc, #584]	@ (80120f8 <_dtoa_r+0x5c0>)
 8011eae:	2602      	movs	r6, #2
 8011eb0:	f004 020f 	and.w	r2, r4, #15
 8011eb4:	1124      	asrs	r4, r4, #4
 8011eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011eba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec2:	f7ee fb9d 	bl	8000600 <__aeabi_dmul>
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ecc:	2c00      	cmp	r4, #0
 8011ece:	f040 80b2 	bne.w	8012036 <_dtoa_r+0x4fe>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1d3      	bne.n	8011e7e <_dtoa_r+0x346>
 8011ed6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011ed8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f000 80b7 	beq.w	8012050 <_dtoa_r+0x518>
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	4b85      	ldr	r3, [pc, #532]	@ (80120fc <_dtoa_r+0x5c4>)
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	4629      	mov	r1, r5
 8011eea:	f7ee fdfb 	bl	8000ae4 <__aeabi_dcmplt>
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	f000 80ae 	beq.w	8012050 <_dtoa_r+0x518>
 8011ef4:	9b07      	ldr	r3, [sp, #28]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f000 80aa 	beq.w	8012050 <_dtoa_r+0x518>
 8011efc:	9b00      	ldr	r3, [sp, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	dd37      	ble.n	8011f72 <_dtoa_r+0x43a>
 8011f02:	1e7b      	subs	r3, r7, #1
 8011f04:	4620      	mov	r0, r4
 8011f06:	2200      	movs	r2, #0
 8011f08:	4629      	mov	r1, r5
 8011f0a:	9304      	str	r3, [sp, #16]
 8011f0c:	3601      	adds	r6, #1
 8011f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8012100 <_dtoa_r+0x5c8>)
 8011f10:	f7ee fb76 	bl	8000600 <__aeabi_dmul>
 8011f14:	9c00      	ldr	r4, [sp, #0]
 8011f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f7ee fb06 	bl	800052c <__aeabi_i2d>
 8011f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f24:	f7ee fb6c 	bl	8000600 <__aeabi_dmul>
 8011f28:	2200      	movs	r2, #0
 8011f2a:	4b76      	ldr	r3, [pc, #472]	@ (8012104 <_dtoa_r+0x5cc>)
 8011f2c:	f7ee f9b2 	bl	8000294 <__adddf3>
 8011f30:	4605      	mov	r5, r0
 8011f32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011f36:	2c00      	cmp	r4, #0
 8011f38:	f040 808d 	bne.w	8012056 <_dtoa_r+0x51e>
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	4b72      	ldr	r3, [pc, #456]	@ (8012108 <_dtoa_r+0x5d0>)
 8011f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f44:	f7ee f9a4 	bl	8000290 <__aeabi_dsub>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011f50:	462a      	mov	r2, r5
 8011f52:	4633      	mov	r3, r6
 8011f54:	f7ee fde4 	bl	8000b20 <__aeabi_dcmpgt>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	f040 828b 	bne.w	8012474 <_dtoa_r+0x93c>
 8011f5e:	462a      	mov	r2, r5
 8011f60:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f68:	f7ee fdbc 	bl	8000ae4 <__aeabi_dcmplt>
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	f040 8128 	bne.w	80121c2 <_dtoa_r+0x68a>
 8011f72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011f76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011f7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	f2c0 815a 	blt.w	8012236 <_dtoa_r+0x6fe>
 8011f82:	2f0e      	cmp	r7, #14
 8011f84:	f300 8157 	bgt.w	8012236 <_dtoa_r+0x6fe>
 8011f88:	4b5a      	ldr	r3, [pc, #360]	@ (80120f4 <_dtoa_r+0x5bc>)
 8011f8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011f8e:	ed93 7b00 	vldr	d7, [r3]
 8011f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	ed8d 7b00 	vstr	d7, [sp]
 8011f9a:	da03      	bge.n	8011fa4 <_dtoa_r+0x46c>
 8011f9c:	9b07      	ldr	r3, [sp, #28]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f340 8101 	ble.w	80121a6 <_dtoa_r+0x66e>
 8011fa4:	4656      	mov	r6, sl
 8011fa6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	4629      	mov	r1, r5
 8011fb2:	f7ee fc4f 	bl	8000854 <__aeabi_ddiv>
 8011fb6:	f7ee fdd3 	bl	8000b60 <__aeabi_d2iz>
 8011fba:	4680      	mov	r8, r0
 8011fbc:	f7ee fab6 	bl	800052c <__aeabi_i2d>
 8011fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fc4:	f7ee fb1c 	bl	8000600 <__aeabi_dmul>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	f7ee f95c 	bl	8000290 <__aeabi_dsub>
 8011fd8:	9d07      	ldr	r5, [sp, #28]
 8011fda:	f806 4b01 	strb.w	r4, [r6], #1
 8011fde:	eba6 040a 	sub.w	r4, r6, sl
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	42a5      	cmp	r5, r4
 8011fe8:	f040 8117 	bne.w	801221a <_dtoa_r+0x6e2>
 8011fec:	f7ee f952 	bl	8000294 <__adddf3>
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	460d      	mov	r5, r1
 8011ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ff8:	f7ee fd92 	bl	8000b20 <__aeabi_dcmpgt>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	f040 80f9 	bne.w	80121f4 <_dtoa_r+0x6bc>
 8012002:	4620      	mov	r0, r4
 8012004:	4629      	mov	r1, r5
 8012006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801200a:	f7ee fd61 	bl	8000ad0 <__aeabi_dcmpeq>
 801200e:	b118      	cbz	r0, 8012018 <_dtoa_r+0x4e0>
 8012010:	f018 0f01 	tst.w	r8, #1
 8012014:	f040 80ee 	bne.w	80121f4 <_dtoa_r+0x6bc>
 8012018:	4649      	mov	r1, r9
 801201a:	4658      	mov	r0, fp
 801201c:	f000 fc90 	bl	8012940 <_Bfree>
 8012020:	2300      	movs	r3, #0
 8012022:	3701      	adds	r7, #1
 8012024:	7033      	strb	r3, [r6, #0]
 8012026:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012028:	601f      	str	r7, [r3, #0]
 801202a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801202c:	2b00      	cmp	r3, #0
 801202e:	f000 831d 	beq.w	801266c <_dtoa_r+0xb34>
 8012032:	601e      	str	r6, [r3, #0]
 8012034:	e31a      	b.n	801266c <_dtoa_r+0xb34>
 8012036:	07e2      	lsls	r2, r4, #31
 8012038:	d505      	bpl.n	8012046 <_dtoa_r+0x50e>
 801203a:	3601      	adds	r6, #1
 801203c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012040:	f7ee fade 	bl	8000600 <__aeabi_dmul>
 8012044:	2301      	movs	r3, #1
 8012046:	1064      	asrs	r4, r4, #1
 8012048:	3508      	adds	r5, #8
 801204a:	e73f      	b.n	8011ecc <_dtoa_r+0x394>
 801204c:	2602      	movs	r6, #2
 801204e:	e742      	b.n	8011ed6 <_dtoa_r+0x39e>
 8012050:	9c07      	ldr	r4, [sp, #28]
 8012052:	9704      	str	r7, [sp, #16]
 8012054:	e761      	b.n	8011f1a <_dtoa_r+0x3e2>
 8012056:	4b27      	ldr	r3, [pc, #156]	@ (80120f4 <_dtoa_r+0x5bc>)
 8012058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801205a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801205e:	4454      	add	r4, sl
 8012060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012064:	2900      	cmp	r1, #0
 8012066:	d053      	beq.n	8012110 <_dtoa_r+0x5d8>
 8012068:	2000      	movs	r0, #0
 801206a:	4928      	ldr	r1, [pc, #160]	@ (801210c <_dtoa_r+0x5d4>)
 801206c:	f7ee fbf2 	bl	8000854 <__aeabi_ddiv>
 8012070:	4633      	mov	r3, r6
 8012072:	4656      	mov	r6, sl
 8012074:	462a      	mov	r2, r5
 8012076:	f7ee f90b 	bl	8000290 <__aeabi_dsub>
 801207a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801207e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012082:	f7ee fd6d 	bl	8000b60 <__aeabi_d2iz>
 8012086:	4605      	mov	r5, r0
 8012088:	f7ee fa50 	bl	800052c <__aeabi_i2d>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	3530      	adds	r5, #48	@ 0x30
 8012092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012096:	f7ee f8fb 	bl	8000290 <__aeabi_dsub>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	f806 5b01 	strb.w	r5, [r6], #1
 80120a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80120a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80120aa:	f7ee fd1b 	bl	8000ae4 <__aeabi_dcmplt>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d171      	bne.n	8012196 <_dtoa_r+0x65e>
 80120b2:	2000      	movs	r0, #0
 80120b4:	4911      	ldr	r1, [pc, #68]	@ (80120fc <_dtoa_r+0x5c4>)
 80120b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80120ba:	f7ee f8e9 	bl	8000290 <__aeabi_dsub>
 80120be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80120c2:	f7ee fd0f 	bl	8000ae4 <__aeabi_dcmplt>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	f040 8095 	bne.w	80121f6 <_dtoa_r+0x6be>
 80120cc:	42a6      	cmp	r6, r4
 80120ce:	f43f af50 	beq.w	8011f72 <_dtoa_r+0x43a>
 80120d2:	2200      	movs	r2, #0
 80120d4:	4b0a      	ldr	r3, [pc, #40]	@ (8012100 <_dtoa_r+0x5c8>)
 80120d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80120da:	f7ee fa91 	bl	8000600 <__aeabi_dmul>
 80120de:	2200      	movs	r2, #0
 80120e0:	4b07      	ldr	r3, [pc, #28]	@ (8012100 <_dtoa_r+0x5c8>)
 80120e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80120e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120ea:	f7ee fa89 	bl	8000600 <__aeabi_dmul>
 80120ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120f2:	e7c4      	b.n	801207e <_dtoa_r+0x546>
 80120f4:	08015538 	.word	0x08015538
 80120f8:	08015510 	.word	0x08015510
 80120fc:	3ff00000 	.word	0x3ff00000
 8012100:	40240000 	.word	0x40240000
 8012104:	401c0000 	.word	0x401c0000
 8012108:	40140000 	.word	0x40140000
 801210c:	3fe00000 	.word	0x3fe00000
 8012110:	4631      	mov	r1, r6
 8012112:	4656      	mov	r6, sl
 8012114:	4628      	mov	r0, r5
 8012116:	f7ee fa73 	bl	8000600 <__aeabi_dmul>
 801211a:	9415      	str	r4, [sp, #84]	@ 0x54
 801211c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012124:	f7ee fd1c 	bl	8000b60 <__aeabi_d2iz>
 8012128:	4605      	mov	r5, r0
 801212a:	f7ee f9ff 	bl	800052c <__aeabi_i2d>
 801212e:	4602      	mov	r2, r0
 8012130:	3530      	adds	r5, #48	@ 0x30
 8012132:	460b      	mov	r3, r1
 8012134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012138:	f7ee f8aa 	bl	8000290 <__aeabi_dsub>
 801213c:	f806 5b01 	strb.w	r5, [r6], #1
 8012140:	4602      	mov	r2, r0
 8012142:	460b      	mov	r3, r1
 8012144:	42a6      	cmp	r6, r4
 8012146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801214a:	f04f 0200 	mov.w	r2, #0
 801214e:	d124      	bne.n	801219a <_dtoa_r+0x662>
 8012150:	4bac      	ldr	r3, [pc, #688]	@ (8012404 <_dtoa_r+0x8cc>)
 8012152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012156:	f7ee f89d 	bl	8000294 <__adddf3>
 801215a:	4602      	mov	r2, r0
 801215c:	460b      	mov	r3, r1
 801215e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012162:	f7ee fcdd 	bl	8000b20 <__aeabi_dcmpgt>
 8012166:	2800      	cmp	r0, #0
 8012168:	d145      	bne.n	80121f6 <_dtoa_r+0x6be>
 801216a:	2000      	movs	r0, #0
 801216c:	49a5      	ldr	r1, [pc, #660]	@ (8012404 <_dtoa_r+0x8cc>)
 801216e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012172:	f7ee f88d 	bl	8000290 <__aeabi_dsub>
 8012176:	4602      	mov	r2, r0
 8012178:	460b      	mov	r3, r1
 801217a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801217e:	f7ee fcb1 	bl	8000ae4 <__aeabi_dcmplt>
 8012182:	2800      	cmp	r0, #0
 8012184:	f43f aef5 	beq.w	8011f72 <_dtoa_r+0x43a>
 8012188:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801218a:	1e73      	subs	r3, r6, #1
 801218c:	9315      	str	r3, [sp, #84]	@ 0x54
 801218e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012192:	2b30      	cmp	r3, #48	@ 0x30
 8012194:	d0f8      	beq.n	8012188 <_dtoa_r+0x650>
 8012196:	9f04      	ldr	r7, [sp, #16]
 8012198:	e73e      	b.n	8012018 <_dtoa_r+0x4e0>
 801219a:	4b9b      	ldr	r3, [pc, #620]	@ (8012408 <_dtoa_r+0x8d0>)
 801219c:	f7ee fa30 	bl	8000600 <__aeabi_dmul>
 80121a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121a4:	e7bc      	b.n	8012120 <_dtoa_r+0x5e8>
 80121a6:	d10c      	bne.n	80121c2 <_dtoa_r+0x68a>
 80121a8:	2200      	movs	r2, #0
 80121aa:	4b98      	ldr	r3, [pc, #608]	@ (801240c <_dtoa_r+0x8d4>)
 80121ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121b0:	f7ee fa26 	bl	8000600 <__aeabi_dmul>
 80121b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121b8:	f7ee fca8 	bl	8000b0c <__aeabi_dcmpge>
 80121bc:	2800      	cmp	r0, #0
 80121be:	f000 8157 	beq.w	8012470 <_dtoa_r+0x938>
 80121c2:	2400      	movs	r4, #0
 80121c4:	4625      	mov	r5, r4
 80121c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121c8:	4656      	mov	r6, sl
 80121ca:	43db      	mvns	r3, r3
 80121cc:	9304      	str	r3, [sp, #16]
 80121ce:	2700      	movs	r7, #0
 80121d0:	4621      	mov	r1, r4
 80121d2:	4658      	mov	r0, fp
 80121d4:	f000 fbb4 	bl	8012940 <_Bfree>
 80121d8:	2d00      	cmp	r5, #0
 80121da:	d0dc      	beq.n	8012196 <_dtoa_r+0x65e>
 80121dc:	b12f      	cbz	r7, 80121ea <_dtoa_r+0x6b2>
 80121de:	42af      	cmp	r7, r5
 80121e0:	d003      	beq.n	80121ea <_dtoa_r+0x6b2>
 80121e2:	4639      	mov	r1, r7
 80121e4:	4658      	mov	r0, fp
 80121e6:	f000 fbab 	bl	8012940 <_Bfree>
 80121ea:	4629      	mov	r1, r5
 80121ec:	4658      	mov	r0, fp
 80121ee:	f000 fba7 	bl	8012940 <_Bfree>
 80121f2:	e7d0      	b.n	8012196 <_dtoa_r+0x65e>
 80121f4:	9704      	str	r7, [sp, #16]
 80121f6:	4633      	mov	r3, r6
 80121f8:	461e      	mov	r6, r3
 80121fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121fe:	2a39      	cmp	r2, #57	@ 0x39
 8012200:	d107      	bne.n	8012212 <_dtoa_r+0x6da>
 8012202:	459a      	cmp	sl, r3
 8012204:	d1f8      	bne.n	80121f8 <_dtoa_r+0x6c0>
 8012206:	9a04      	ldr	r2, [sp, #16]
 8012208:	3201      	adds	r2, #1
 801220a:	9204      	str	r2, [sp, #16]
 801220c:	2230      	movs	r2, #48	@ 0x30
 801220e:	f88a 2000 	strb.w	r2, [sl]
 8012212:	781a      	ldrb	r2, [r3, #0]
 8012214:	3201      	adds	r2, #1
 8012216:	701a      	strb	r2, [r3, #0]
 8012218:	e7bd      	b.n	8012196 <_dtoa_r+0x65e>
 801221a:	2200      	movs	r2, #0
 801221c:	4b7a      	ldr	r3, [pc, #488]	@ (8012408 <_dtoa_r+0x8d0>)
 801221e:	f7ee f9ef 	bl	8000600 <__aeabi_dmul>
 8012222:	2200      	movs	r2, #0
 8012224:	2300      	movs	r3, #0
 8012226:	4604      	mov	r4, r0
 8012228:	460d      	mov	r5, r1
 801222a:	f7ee fc51 	bl	8000ad0 <__aeabi_dcmpeq>
 801222e:	2800      	cmp	r0, #0
 8012230:	f43f aebb 	beq.w	8011faa <_dtoa_r+0x472>
 8012234:	e6f0      	b.n	8012018 <_dtoa_r+0x4e0>
 8012236:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012238:	2a00      	cmp	r2, #0
 801223a:	f000 80db 	beq.w	80123f4 <_dtoa_r+0x8bc>
 801223e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012240:	2a01      	cmp	r2, #1
 8012242:	f300 80bf 	bgt.w	80123c4 <_dtoa_r+0x88c>
 8012246:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012248:	2a00      	cmp	r2, #0
 801224a:	f000 80b7 	beq.w	80123bc <_dtoa_r+0x884>
 801224e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012252:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012254:	4646      	mov	r6, r8
 8012256:	9a08      	ldr	r2, [sp, #32]
 8012258:	2101      	movs	r1, #1
 801225a:	4658      	mov	r0, fp
 801225c:	4498      	add	r8, r3
 801225e:	441a      	add	r2, r3
 8012260:	9208      	str	r2, [sp, #32]
 8012262:	f000 fc6d 	bl	8012b40 <__i2b>
 8012266:	4605      	mov	r5, r0
 8012268:	b15e      	cbz	r6, 8012282 <_dtoa_r+0x74a>
 801226a:	9b08      	ldr	r3, [sp, #32]
 801226c:	2b00      	cmp	r3, #0
 801226e:	dd08      	ble.n	8012282 <_dtoa_r+0x74a>
 8012270:	42b3      	cmp	r3, r6
 8012272:	9a08      	ldr	r2, [sp, #32]
 8012274:	bfa8      	it	ge
 8012276:	4633      	movge	r3, r6
 8012278:	eba8 0803 	sub.w	r8, r8, r3
 801227c:	1af6      	subs	r6, r6, r3
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	9308      	str	r3, [sp, #32]
 8012282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012284:	b1f3      	cbz	r3, 80122c4 <_dtoa_r+0x78c>
 8012286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 80b7 	beq.w	80123fc <_dtoa_r+0x8c4>
 801228e:	b18c      	cbz	r4, 80122b4 <_dtoa_r+0x77c>
 8012290:	4629      	mov	r1, r5
 8012292:	4622      	mov	r2, r4
 8012294:	4658      	mov	r0, fp
 8012296:	f000 fd13 	bl	8012cc0 <__pow5mult>
 801229a:	464a      	mov	r2, r9
 801229c:	4601      	mov	r1, r0
 801229e:	4605      	mov	r5, r0
 80122a0:	4658      	mov	r0, fp
 80122a2:	f000 fc63 	bl	8012b6c <__multiply>
 80122a6:	4649      	mov	r1, r9
 80122a8:	9004      	str	r0, [sp, #16]
 80122aa:	4658      	mov	r0, fp
 80122ac:	f000 fb48 	bl	8012940 <_Bfree>
 80122b0:	9b04      	ldr	r3, [sp, #16]
 80122b2:	4699      	mov	r9, r3
 80122b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122b6:	1b1a      	subs	r2, r3, r4
 80122b8:	d004      	beq.n	80122c4 <_dtoa_r+0x78c>
 80122ba:	4649      	mov	r1, r9
 80122bc:	4658      	mov	r0, fp
 80122be:	f000 fcff 	bl	8012cc0 <__pow5mult>
 80122c2:	4681      	mov	r9, r0
 80122c4:	2101      	movs	r1, #1
 80122c6:	4658      	mov	r0, fp
 80122c8:	f000 fc3a 	bl	8012b40 <__i2b>
 80122cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122ce:	4604      	mov	r4, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	f000 81cf 	beq.w	8012674 <_dtoa_r+0xb3c>
 80122d6:	461a      	mov	r2, r3
 80122d8:	4601      	mov	r1, r0
 80122da:	4658      	mov	r0, fp
 80122dc:	f000 fcf0 	bl	8012cc0 <__pow5mult>
 80122e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122e2:	4604      	mov	r4, r0
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	f300 8095 	bgt.w	8012414 <_dtoa_r+0x8dc>
 80122ea:	9b02      	ldr	r3, [sp, #8]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	f040 8087 	bne.w	8012400 <_dtoa_r+0x8c8>
 80122f2:	9b03      	ldr	r3, [sp, #12]
 80122f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f040 8089 	bne.w	8012410 <_dtoa_r+0x8d8>
 80122fe:	9b03      	ldr	r3, [sp, #12]
 8012300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012304:	0d1b      	lsrs	r3, r3, #20
 8012306:	051b      	lsls	r3, r3, #20
 8012308:	b12b      	cbz	r3, 8012316 <_dtoa_r+0x7de>
 801230a:	9b08      	ldr	r3, [sp, #32]
 801230c:	f108 0801 	add.w	r8, r8, #1
 8012310:	3301      	adds	r3, #1
 8012312:	9308      	str	r3, [sp, #32]
 8012314:	2301      	movs	r3, #1
 8012316:	930a      	str	r3, [sp, #40]	@ 0x28
 8012318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801231a:	2b00      	cmp	r3, #0
 801231c:	f000 81b0 	beq.w	8012680 <_dtoa_r+0xb48>
 8012320:	6923      	ldr	r3, [r4, #16]
 8012322:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012326:	6918      	ldr	r0, [r3, #16]
 8012328:	f000 fbbe 	bl	8012aa8 <__hi0bits>
 801232c:	f1c0 0020 	rsb	r0, r0, #32
 8012330:	9b08      	ldr	r3, [sp, #32]
 8012332:	4418      	add	r0, r3
 8012334:	f010 001f 	ands.w	r0, r0, #31
 8012338:	d077      	beq.n	801242a <_dtoa_r+0x8f2>
 801233a:	f1c0 0320 	rsb	r3, r0, #32
 801233e:	2b04      	cmp	r3, #4
 8012340:	dd6b      	ble.n	801241a <_dtoa_r+0x8e2>
 8012342:	f1c0 001c 	rsb	r0, r0, #28
 8012346:	9b08      	ldr	r3, [sp, #32]
 8012348:	4480      	add	r8, r0
 801234a:	4403      	add	r3, r0
 801234c:	4406      	add	r6, r0
 801234e:	9308      	str	r3, [sp, #32]
 8012350:	f1b8 0f00 	cmp.w	r8, #0
 8012354:	dd05      	ble.n	8012362 <_dtoa_r+0x82a>
 8012356:	4649      	mov	r1, r9
 8012358:	4642      	mov	r2, r8
 801235a:	4658      	mov	r0, fp
 801235c:	f000 fd0a 	bl	8012d74 <__lshift>
 8012360:	4681      	mov	r9, r0
 8012362:	9b08      	ldr	r3, [sp, #32]
 8012364:	2b00      	cmp	r3, #0
 8012366:	dd05      	ble.n	8012374 <_dtoa_r+0x83c>
 8012368:	4621      	mov	r1, r4
 801236a:	461a      	mov	r2, r3
 801236c:	4658      	mov	r0, fp
 801236e:	f000 fd01 	bl	8012d74 <__lshift>
 8012372:	4604      	mov	r4, r0
 8012374:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012376:	2b00      	cmp	r3, #0
 8012378:	d059      	beq.n	801242e <_dtoa_r+0x8f6>
 801237a:	4621      	mov	r1, r4
 801237c:	4648      	mov	r0, r9
 801237e:	f000 fd65 	bl	8012e4c <__mcmp>
 8012382:	2800      	cmp	r0, #0
 8012384:	da53      	bge.n	801242e <_dtoa_r+0x8f6>
 8012386:	1e7b      	subs	r3, r7, #1
 8012388:	4649      	mov	r1, r9
 801238a:	220a      	movs	r2, #10
 801238c:	4658      	mov	r0, fp
 801238e:	9304      	str	r3, [sp, #16]
 8012390:	2300      	movs	r3, #0
 8012392:	f000 faf7 	bl	8012984 <__multadd>
 8012396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012398:	4681      	mov	r9, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 8172 	beq.w	8012684 <_dtoa_r+0xb4c>
 80123a0:	2300      	movs	r3, #0
 80123a2:	4629      	mov	r1, r5
 80123a4:	220a      	movs	r2, #10
 80123a6:	4658      	mov	r0, fp
 80123a8:	f000 faec 	bl	8012984 <__multadd>
 80123ac:	9b00      	ldr	r3, [sp, #0]
 80123ae:	4605      	mov	r5, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	dc67      	bgt.n	8012484 <_dtoa_r+0x94c>
 80123b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	dc41      	bgt.n	801243e <_dtoa_r+0x906>
 80123ba:	e063      	b.n	8012484 <_dtoa_r+0x94c>
 80123bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80123be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80123c2:	e746      	b.n	8012252 <_dtoa_r+0x71a>
 80123c4:	9b07      	ldr	r3, [sp, #28]
 80123c6:	1e5c      	subs	r4, r3, #1
 80123c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80123ca:	42a3      	cmp	r3, r4
 80123cc:	bfb7      	itett	lt
 80123ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80123d0:	1b1c      	subge	r4, r3, r4
 80123d2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80123d4:	1ae3      	sublt	r3, r4, r3
 80123d6:	bfbe      	ittt	lt
 80123d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80123da:	2400      	movlt	r4, #0
 80123dc:	18d2      	addlt	r2, r2, r3
 80123de:	9b07      	ldr	r3, [sp, #28]
 80123e0:	bfb8      	it	lt
 80123e2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	bfb5      	itete	lt
 80123e8:	eba8 0603 	sublt.w	r6, r8, r3
 80123ec:	4646      	movge	r6, r8
 80123ee:	2300      	movlt	r3, #0
 80123f0:	9b07      	ldrge	r3, [sp, #28]
 80123f2:	e730      	b.n	8012256 <_dtoa_r+0x71e>
 80123f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80123f6:	4646      	mov	r6, r8
 80123f8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80123fa:	e735      	b.n	8012268 <_dtoa_r+0x730>
 80123fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123fe:	e75c      	b.n	80122ba <_dtoa_r+0x782>
 8012400:	2300      	movs	r3, #0
 8012402:	e788      	b.n	8012316 <_dtoa_r+0x7de>
 8012404:	3fe00000 	.word	0x3fe00000
 8012408:	40240000 	.word	0x40240000
 801240c:	40140000 	.word	0x40140000
 8012410:	9b02      	ldr	r3, [sp, #8]
 8012412:	e780      	b.n	8012316 <_dtoa_r+0x7de>
 8012414:	2300      	movs	r3, #0
 8012416:	930a      	str	r3, [sp, #40]	@ 0x28
 8012418:	e782      	b.n	8012320 <_dtoa_r+0x7e8>
 801241a:	d099      	beq.n	8012350 <_dtoa_r+0x818>
 801241c:	331c      	adds	r3, #28
 801241e:	9a08      	ldr	r2, [sp, #32]
 8012420:	441a      	add	r2, r3
 8012422:	4498      	add	r8, r3
 8012424:	441e      	add	r6, r3
 8012426:	9208      	str	r2, [sp, #32]
 8012428:	e792      	b.n	8012350 <_dtoa_r+0x818>
 801242a:	4603      	mov	r3, r0
 801242c:	e7f6      	b.n	801241c <_dtoa_r+0x8e4>
 801242e:	9b07      	ldr	r3, [sp, #28]
 8012430:	9704      	str	r7, [sp, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	dc20      	bgt.n	8012478 <_dtoa_r+0x940>
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801243a:	2b02      	cmp	r3, #2
 801243c:	dd1e      	ble.n	801247c <_dtoa_r+0x944>
 801243e:	9b00      	ldr	r3, [sp, #0]
 8012440:	2b00      	cmp	r3, #0
 8012442:	f47f aec0 	bne.w	80121c6 <_dtoa_r+0x68e>
 8012446:	4621      	mov	r1, r4
 8012448:	2205      	movs	r2, #5
 801244a:	4658      	mov	r0, fp
 801244c:	f000 fa9a 	bl	8012984 <__multadd>
 8012450:	4601      	mov	r1, r0
 8012452:	4604      	mov	r4, r0
 8012454:	4648      	mov	r0, r9
 8012456:	f000 fcf9 	bl	8012e4c <__mcmp>
 801245a:	2800      	cmp	r0, #0
 801245c:	f77f aeb3 	ble.w	80121c6 <_dtoa_r+0x68e>
 8012460:	2331      	movs	r3, #49	@ 0x31
 8012462:	4656      	mov	r6, sl
 8012464:	f806 3b01 	strb.w	r3, [r6], #1
 8012468:	9b04      	ldr	r3, [sp, #16]
 801246a:	3301      	adds	r3, #1
 801246c:	9304      	str	r3, [sp, #16]
 801246e:	e6ae      	b.n	80121ce <_dtoa_r+0x696>
 8012470:	9c07      	ldr	r4, [sp, #28]
 8012472:	9704      	str	r7, [sp, #16]
 8012474:	4625      	mov	r5, r4
 8012476:	e7f3      	b.n	8012460 <_dtoa_r+0x928>
 8012478:	9b07      	ldr	r3, [sp, #28]
 801247a:	9300      	str	r3, [sp, #0]
 801247c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801247e:	2b00      	cmp	r3, #0
 8012480:	f000 8104 	beq.w	801268c <_dtoa_r+0xb54>
 8012484:	2e00      	cmp	r6, #0
 8012486:	dd05      	ble.n	8012494 <_dtoa_r+0x95c>
 8012488:	4629      	mov	r1, r5
 801248a:	4632      	mov	r2, r6
 801248c:	4658      	mov	r0, fp
 801248e:	f000 fc71 	bl	8012d74 <__lshift>
 8012492:	4605      	mov	r5, r0
 8012494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012496:	2b00      	cmp	r3, #0
 8012498:	d05a      	beq.n	8012550 <_dtoa_r+0xa18>
 801249a:	6869      	ldr	r1, [r5, #4]
 801249c:	4658      	mov	r0, fp
 801249e:	f000 fa0f 	bl	80128c0 <_Balloc>
 80124a2:	4606      	mov	r6, r0
 80124a4:	b928      	cbnz	r0, 80124b2 <_dtoa_r+0x97a>
 80124a6:	4b84      	ldr	r3, [pc, #528]	@ (80126b8 <_dtoa_r+0xb80>)
 80124a8:	4602      	mov	r2, r0
 80124aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80124ae:	f7ff bb5a 	b.w	8011b66 <_dtoa_r+0x2e>
 80124b2:	692a      	ldr	r2, [r5, #16]
 80124b4:	f105 010c 	add.w	r1, r5, #12
 80124b8:	300c      	adds	r0, #12
 80124ba:	3202      	adds	r2, #2
 80124bc:	0092      	lsls	r2, r2, #2
 80124be:	f002 f98b 	bl	80147d8 <memcpy>
 80124c2:	2201      	movs	r2, #1
 80124c4:	4631      	mov	r1, r6
 80124c6:	4658      	mov	r0, fp
 80124c8:	f000 fc54 	bl	8012d74 <__lshift>
 80124cc:	f10a 0301 	add.w	r3, sl, #1
 80124d0:	462f      	mov	r7, r5
 80124d2:	4605      	mov	r5, r0
 80124d4:	9307      	str	r3, [sp, #28]
 80124d6:	9b00      	ldr	r3, [sp, #0]
 80124d8:	4453      	add	r3, sl
 80124da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124dc:	9b02      	ldr	r3, [sp, #8]
 80124de:	f003 0301 	and.w	r3, r3, #1
 80124e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80124e4:	9b07      	ldr	r3, [sp, #28]
 80124e6:	4621      	mov	r1, r4
 80124e8:	4648      	mov	r0, r9
 80124ea:	3b01      	subs	r3, #1
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	f7ff fa93 	bl	8011a18 <quorem>
 80124f2:	4639      	mov	r1, r7
 80124f4:	9002      	str	r0, [sp, #8]
 80124f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80124fa:	4648      	mov	r0, r9
 80124fc:	f000 fca6 	bl	8012e4c <__mcmp>
 8012500:	462a      	mov	r2, r5
 8012502:	9008      	str	r0, [sp, #32]
 8012504:	4621      	mov	r1, r4
 8012506:	4658      	mov	r0, fp
 8012508:	f000 fcbc 	bl	8012e84 <__mdiff>
 801250c:	68c2      	ldr	r2, [r0, #12]
 801250e:	4606      	mov	r6, r0
 8012510:	bb02      	cbnz	r2, 8012554 <_dtoa_r+0xa1c>
 8012512:	4601      	mov	r1, r0
 8012514:	4648      	mov	r0, r9
 8012516:	f000 fc99 	bl	8012e4c <__mcmp>
 801251a:	4602      	mov	r2, r0
 801251c:	4631      	mov	r1, r6
 801251e:	4658      	mov	r0, fp
 8012520:	920e      	str	r2, [sp, #56]	@ 0x38
 8012522:	f000 fa0d 	bl	8012940 <_Bfree>
 8012526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012528:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801252a:	9e07      	ldr	r6, [sp, #28]
 801252c:	ea43 0102 	orr.w	r1, r3, r2
 8012530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012532:	4319      	orrs	r1, r3
 8012534:	d110      	bne.n	8012558 <_dtoa_r+0xa20>
 8012536:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801253a:	d029      	beq.n	8012590 <_dtoa_r+0xa58>
 801253c:	9b08      	ldr	r3, [sp, #32]
 801253e:	2b00      	cmp	r3, #0
 8012540:	dd02      	ble.n	8012548 <_dtoa_r+0xa10>
 8012542:	9b02      	ldr	r3, [sp, #8]
 8012544:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012548:	9b00      	ldr	r3, [sp, #0]
 801254a:	f883 8000 	strb.w	r8, [r3]
 801254e:	e63f      	b.n	80121d0 <_dtoa_r+0x698>
 8012550:	4628      	mov	r0, r5
 8012552:	e7bb      	b.n	80124cc <_dtoa_r+0x994>
 8012554:	2201      	movs	r2, #1
 8012556:	e7e1      	b.n	801251c <_dtoa_r+0x9e4>
 8012558:	9b08      	ldr	r3, [sp, #32]
 801255a:	2b00      	cmp	r3, #0
 801255c:	db04      	blt.n	8012568 <_dtoa_r+0xa30>
 801255e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012560:	430b      	orrs	r3, r1
 8012562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012564:	430b      	orrs	r3, r1
 8012566:	d120      	bne.n	80125aa <_dtoa_r+0xa72>
 8012568:	2a00      	cmp	r2, #0
 801256a:	dded      	ble.n	8012548 <_dtoa_r+0xa10>
 801256c:	4649      	mov	r1, r9
 801256e:	2201      	movs	r2, #1
 8012570:	4658      	mov	r0, fp
 8012572:	f000 fbff 	bl	8012d74 <__lshift>
 8012576:	4621      	mov	r1, r4
 8012578:	4681      	mov	r9, r0
 801257a:	f000 fc67 	bl	8012e4c <__mcmp>
 801257e:	2800      	cmp	r0, #0
 8012580:	dc03      	bgt.n	801258a <_dtoa_r+0xa52>
 8012582:	d1e1      	bne.n	8012548 <_dtoa_r+0xa10>
 8012584:	f018 0f01 	tst.w	r8, #1
 8012588:	d0de      	beq.n	8012548 <_dtoa_r+0xa10>
 801258a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801258e:	d1d8      	bne.n	8012542 <_dtoa_r+0xa0a>
 8012590:	2339      	movs	r3, #57	@ 0x39
 8012592:	9a00      	ldr	r2, [sp, #0]
 8012594:	7013      	strb	r3, [r2, #0]
 8012596:	4633      	mov	r3, r6
 8012598:	461e      	mov	r6, r3
 801259a:	3b01      	subs	r3, #1
 801259c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80125a0:	2a39      	cmp	r2, #57	@ 0x39
 80125a2:	d052      	beq.n	801264a <_dtoa_r+0xb12>
 80125a4:	3201      	adds	r2, #1
 80125a6:	701a      	strb	r2, [r3, #0]
 80125a8:	e612      	b.n	80121d0 <_dtoa_r+0x698>
 80125aa:	2a00      	cmp	r2, #0
 80125ac:	dd07      	ble.n	80125be <_dtoa_r+0xa86>
 80125ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80125b2:	d0ed      	beq.n	8012590 <_dtoa_r+0xa58>
 80125b4:	f108 0301 	add.w	r3, r8, #1
 80125b8:	9a00      	ldr	r2, [sp, #0]
 80125ba:	7013      	strb	r3, [r2, #0]
 80125bc:	e608      	b.n	80121d0 <_dtoa_r+0x698>
 80125be:	9b07      	ldr	r3, [sp, #28]
 80125c0:	9a07      	ldr	r2, [sp, #28]
 80125c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80125c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125c8:	4293      	cmp	r3, r2
 80125ca:	d028      	beq.n	801261e <_dtoa_r+0xae6>
 80125cc:	4649      	mov	r1, r9
 80125ce:	2300      	movs	r3, #0
 80125d0:	220a      	movs	r2, #10
 80125d2:	4658      	mov	r0, fp
 80125d4:	f000 f9d6 	bl	8012984 <__multadd>
 80125d8:	42af      	cmp	r7, r5
 80125da:	4681      	mov	r9, r0
 80125dc:	f04f 0300 	mov.w	r3, #0
 80125e0:	f04f 020a 	mov.w	r2, #10
 80125e4:	4639      	mov	r1, r7
 80125e6:	4658      	mov	r0, fp
 80125e8:	d107      	bne.n	80125fa <_dtoa_r+0xac2>
 80125ea:	f000 f9cb 	bl	8012984 <__multadd>
 80125ee:	4607      	mov	r7, r0
 80125f0:	4605      	mov	r5, r0
 80125f2:	9b07      	ldr	r3, [sp, #28]
 80125f4:	3301      	adds	r3, #1
 80125f6:	9307      	str	r3, [sp, #28]
 80125f8:	e774      	b.n	80124e4 <_dtoa_r+0x9ac>
 80125fa:	f000 f9c3 	bl	8012984 <__multadd>
 80125fe:	4629      	mov	r1, r5
 8012600:	4607      	mov	r7, r0
 8012602:	2300      	movs	r3, #0
 8012604:	220a      	movs	r2, #10
 8012606:	4658      	mov	r0, fp
 8012608:	f000 f9bc 	bl	8012984 <__multadd>
 801260c:	4605      	mov	r5, r0
 801260e:	e7f0      	b.n	80125f2 <_dtoa_r+0xaba>
 8012610:	9b00      	ldr	r3, [sp, #0]
 8012612:	2700      	movs	r7, #0
 8012614:	2b00      	cmp	r3, #0
 8012616:	bfcc      	ite	gt
 8012618:	461e      	movgt	r6, r3
 801261a:	2601      	movle	r6, #1
 801261c:	4456      	add	r6, sl
 801261e:	4649      	mov	r1, r9
 8012620:	2201      	movs	r2, #1
 8012622:	4658      	mov	r0, fp
 8012624:	f000 fba6 	bl	8012d74 <__lshift>
 8012628:	4621      	mov	r1, r4
 801262a:	4681      	mov	r9, r0
 801262c:	f000 fc0e 	bl	8012e4c <__mcmp>
 8012630:	2800      	cmp	r0, #0
 8012632:	dcb0      	bgt.n	8012596 <_dtoa_r+0xa5e>
 8012634:	d102      	bne.n	801263c <_dtoa_r+0xb04>
 8012636:	f018 0f01 	tst.w	r8, #1
 801263a:	d1ac      	bne.n	8012596 <_dtoa_r+0xa5e>
 801263c:	4633      	mov	r3, r6
 801263e:	461e      	mov	r6, r3
 8012640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012644:	2a30      	cmp	r2, #48	@ 0x30
 8012646:	d0fa      	beq.n	801263e <_dtoa_r+0xb06>
 8012648:	e5c2      	b.n	80121d0 <_dtoa_r+0x698>
 801264a:	459a      	cmp	sl, r3
 801264c:	d1a4      	bne.n	8012598 <_dtoa_r+0xa60>
 801264e:	9b04      	ldr	r3, [sp, #16]
 8012650:	3301      	adds	r3, #1
 8012652:	9304      	str	r3, [sp, #16]
 8012654:	2331      	movs	r3, #49	@ 0x31
 8012656:	f88a 3000 	strb.w	r3, [sl]
 801265a:	e5b9      	b.n	80121d0 <_dtoa_r+0x698>
 801265c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801265e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80126bc <_dtoa_r+0xb84>
 8012662:	b11b      	cbz	r3, 801266c <_dtoa_r+0xb34>
 8012664:	f10a 0308 	add.w	r3, sl, #8
 8012668:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801266a:	6013      	str	r3, [r2, #0]
 801266c:	4650      	mov	r0, sl
 801266e:	b019      	add	sp, #100	@ 0x64
 8012670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012676:	2b01      	cmp	r3, #1
 8012678:	f77f ae37 	ble.w	80122ea <_dtoa_r+0x7b2>
 801267c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801267e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012680:	2001      	movs	r0, #1
 8012682:	e655      	b.n	8012330 <_dtoa_r+0x7f8>
 8012684:	9b00      	ldr	r3, [sp, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	f77f aed6 	ble.w	8012438 <_dtoa_r+0x900>
 801268c:	4656      	mov	r6, sl
 801268e:	4621      	mov	r1, r4
 8012690:	4648      	mov	r0, r9
 8012692:	f7ff f9c1 	bl	8011a18 <quorem>
 8012696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801269a:	9b00      	ldr	r3, [sp, #0]
 801269c:	f806 8b01 	strb.w	r8, [r6], #1
 80126a0:	eba6 020a 	sub.w	r2, r6, sl
 80126a4:	4293      	cmp	r3, r2
 80126a6:	ddb3      	ble.n	8012610 <_dtoa_r+0xad8>
 80126a8:	4649      	mov	r1, r9
 80126aa:	2300      	movs	r3, #0
 80126ac:	220a      	movs	r2, #10
 80126ae:	4658      	mov	r0, fp
 80126b0:	f000 f968 	bl	8012984 <__multadd>
 80126b4:	4681      	mov	r9, r0
 80126b6:	e7ea      	b.n	801268e <_dtoa_r+0xb56>
 80126b8:	08015495 	.word	0x08015495
 80126bc:	08015419 	.word	0x08015419

080126c0 <_free_r>:
 80126c0:	b538      	push	{r3, r4, r5, lr}
 80126c2:	4605      	mov	r5, r0
 80126c4:	2900      	cmp	r1, #0
 80126c6:	d041      	beq.n	801274c <_free_r+0x8c>
 80126c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126cc:	1f0c      	subs	r4, r1, #4
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	bfb8      	it	lt
 80126d2:	18e4      	addlt	r4, r4, r3
 80126d4:	f000 f8e8 	bl	80128a8 <__malloc_lock>
 80126d8:	4a1d      	ldr	r2, [pc, #116]	@ (8012750 <_free_r+0x90>)
 80126da:	6813      	ldr	r3, [r2, #0]
 80126dc:	b933      	cbnz	r3, 80126ec <_free_r+0x2c>
 80126de:	6063      	str	r3, [r4, #4]
 80126e0:	6014      	str	r4, [r2, #0]
 80126e2:	4628      	mov	r0, r5
 80126e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126e8:	f000 b8e4 	b.w	80128b4 <__malloc_unlock>
 80126ec:	42a3      	cmp	r3, r4
 80126ee:	d908      	bls.n	8012702 <_free_r+0x42>
 80126f0:	6820      	ldr	r0, [r4, #0]
 80126f2:	1821      	adds	r1, r4, r0
 80126f4:	428b      	cmp	r3, r1
 80126f6:	bf01      	itttt	eq
 80126f8:	6819      	ldreq	r1, [r3, #0]
 80126fa:	685b      	ldreq	r3, [r3, #4]
 80126fc:	1809      	addeq	r1, r1, r0
 80126fe:	6021      	streq	r1, [r4, #0]
 8012700:	e7ed      	b.n	80126de <_free_r+0x1e>
 8012702:	461a      	mov	r2, r3
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	b10b      	cbz	r3, 801270c <_free_r+0x4c>
 8012708:	42a3      	cmp	r3, r4
 801270a:	d9fa      	bls.n	8012702 <_free_r+0x42>
 801270c:	6811      	ldr	r1, [r2, #0]
 801270e:	1850      	adds	r0, r2, r1
 8012710:	42a0      	cmp	r0, r4
 8012712:	d10b      	bne.n	801272c <_free_r+0x6c>
 8012714:	6820      	ldr	r0, [r4, #0]
 8012716:	4401      	add	r1, r0
 8012718:	1850      	adds	r0, r2, r1
 801271a:	6011      	str	r1, [r2, #0]
 801271c:	4283      	cmp	r3, r0
 801271e:	d1e0      	bne.n	80126e2 <_free_r+0x22>
 8012720:	6818      	ldr	r0, [r3, #0]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	4408      	add	r0, r1
 8012726:	6053      	str	r3, [r2, #4]
 8012728:	6010      	str	r0, [r2, #0]
 801272a:	e7da      	b.n	80126e2 <_free_r+0x22>
 801272c:	d902      	bls.n	8012734 <_free_r+0x74>
 801272e:	230c      	movs	r3, #12
 8012730:	602b      	str	r3, [r5, #0]
 8012732:	e7d6      	b.n	80126e2 <_free_r+0x22>
 8012734:	6820      	ldr	r0, [r4, #0]
 8012736:	1821      	adds	r1, r4, r0
 8012738:	428b      	cmp	r3, r1
 801273a:	bf02      	ittt	eq
 801273c:	6819      	ldreq	r1, [r3, #0]
 801273e:	685b      	ldreq	r3, [r3, #4]
 8012740:	1809      	addeq	r1, r1, r0
 8012742:	6063      	str	r3, [r4, #4]
 8012744:	bf08      	it	eq
 8012746:	6021      	streq	r1, [r4, #0]
 8012748:	6054      	str	r4, [r2, #4]
 801274a:	e7ca      	b.n	80126e2 <_free_r+0x22>
 801274c:	bd38      	pop	{r3, r4, r5, pc}
 801274e:	bf00      	nop
 8012750:	20001840 	.word	0x20001840

08012754 <malloc>:
 8012754:	4b02      	ldr	r3, [pc, #8]	@ (8012760 <malloc+0xc>)
 8012756:	4601      	mov	r1, r0
 8012758:	6818      	ldr	r0, [r3, #0]
 801275a:	f000 b825 	b.w	80127a8 <_malloc_r>
 801275e:	bf00      	nop
 8012760:	20000140 	.word	0x20000140

08012764 <sbrk_aligned>:
 8012764:	b570      	push	{r4, r5, r6, lr}
 8012766:	4e0f      	ldr	r6, [pc, #60]	@ (80127a4 <sbrk_aligned+0x40>)
 8012768:	460c      	mov	r4, r1
 801276a:	4605      	mov	r5, r0
 801276c:	6831      	ldr	r1, [r6, #0]
 801276e:	b911      	cbnz	r1, 8012776 <sbrk_aligned+0x12>
 8012770:	f002 f822 	bl	80147b8 <_sbrk_r>
 8012774:	6030      	str	r0, [r6, #0]
 8012776:	4621      	mov	r1, r4
 8012778:	4628      	mov	r0, r5
 801277a:	f002 f81d 	bl	80147b8 <_sbrk_r>
 801277e:	1c43      	adds	r3, r0, #1
 8012780:	d103      	bne.n	801278a <sbrk_aligned+0x26>
 8012782:	f04f 34ff 	mov.w	r4, #4294967295
 8012786:	4620      	mov	r0, r4
 8012788:	bd70      	pop	{r4, r5, r6, pc}
 801278a:	1cc4      	adds	r4, r0, #3
 801278c:	f024 0403 	bic.w	r4, r4, #3
 8012790:	42a0      	cmp	r0, r4
 8012792:	d0f8      	beq.n	8012786 <sbrk_aligned+0x22>
 8012794:	1a21      	subs	r1, r4, r0
 8012796:	4628      	mov	r0, r5
 8012798:	f002 f80e 	bl	80147b8 <_sbrk_r>
 801279c:	3001      	adds	r0, #1
 801279e:	d1f2      	bne.n	8012786 <sbrk_aligned+0x22>
 80127a0:	e7ef      	b.n	8012782 <sbrk_aligned+0x1e>
 80127a2:	bf00      	nop
 80127a4:	2000183c 	.word	0x2000183c

080127a8 <_malloc_r>:
 80127a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127ac:	1ccd      	adds	r5, r1, #3
 80127ae:	4606      	mov	r6, r0
 80127b0:	f025 0503 	bic.w	r5, r5, #3
 80127b4:	3508      	adds	r5, #8
 80127b6:	2d0c      	cmp	r5, #12
 80127b8:	bf38      	it	cc
 80127ba:	250c      	movcc	r5, #12
 80127bc:	2d00      	cmp	r5, #0
 80127be:	db01      	blt.n	80127c4 <_malloc_r+0x1c>
 80127c0:	42a9      	cmp	r1, r5
 80127c2:	d904      	bls.n	80127ce <_malloc_r+0x26>
 80127c4:	230c      	movs	r3, #12
 80127c6:	6033      	str	r3, [r6, #0]
 80127c8:	2000      	movs	r0, #0
 80127ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80128a4 <_malloc_r+0xfc>
 80127d2:	f000 f869 	bl	80128a8 <__malloc_lock>
 80127d6:	f8d8 3000 	ldr.w	r3, [r8]
 80127da:	461c      	mov	r4, r3
 80127dc:	bb44      	cbnz	r4, 8012830 <_malloc_r+0x88>
 80127de:	4629      	mov	r1, r5
 80127e0:	4630      	mov	r0, r6
 80127e2:	f7ff ffbf 	bl	8012764 <sbrk_aligned>
 80127e6:	1c43      	adds	r3, r0, #1
 80127e8:	4604      	mov	r4, r0
 80127ea:	d158      	bne.n	801289e <_malloc_r+0xf6>
 80127ec:	f8d8 4000 	ldr.w	r4, [r8]
 80127f0:	4627      	mov	r7, r4
 80127f2:	2f00      	cmp	r7, #0
 80127f4:	d143      	bne.n	801287e <_malloc_r+0xd6>
 80127f6:	2c00      	cmp	r4, #0
 80127f8:	d04b      	beq.n	8012892 <_malloc_r+0xea>
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	4639      	mov	r1, r7
 80127fe:	4630      	mov	r0, r6
 8012800:	eb04 0903 	add.w	r9, r4, r3
 8012804:	f001 ffd8 	bl	80147b8 <_sbrk_r>
 8012808:	4581      	cmp	r9, r0
 801280a:	d142      	bne.n	8012892 <_malloc_r+0xea>
 801280c:	6821      	ldr	r1, [r4, #0]
 801280e:	4630      	mov	r0, r6
 8012810:	1a6d      	subs	r5, r5, r1
 8012812:	4629      	mov	r1, r5
 8012814:	f7ff ffa6 	bl	8012764 <sbrk_aligned>
 8012818:	3001      	adds	r0, #1
 801281a:	d03a      	beq.n	8012892 <_malloc_r+0xea>
 801281c:	6823      	ldr	r3, [r4, #0]
 801281e:	442b      	add	r3, r5
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	f8d8 3000 	ldr.w	r3, [r8]
 8012826:	685a      	ldr	r2, [r3, #4]
 8012828:	bb62      	cbnz	r2, 8012884 <_malloc_r+0xdc>
 801282a:	f8c8 7000 	str.w	r7, [r8]
 801282e:	e00f      	b.n	8012850 <_malloc_r+0xa8>
 8012830:	6822      	ldr	r2, [r4, #0]
 8012832:	1b52      	subs	r2, r2, r5
 8012834:	d420      	bmi.n	8012878 <_malloc_r+0xd0>
 8012836:	2a0b      	cmp	r2, #11
 8012838:	d917      	bls.n	801286a <_malloc_r+0xc2>
 801283a:	1961      	adds	r1, r4, r5
 801283c:	42a3      	cmp	r3, r4
 801283e:	6025      	str	r5, [r4, #0]
 8012840:	bf18      	it	ne
 8012842:	6059      	strne	r1, [r3, #4]
 8012844:	6863      	ldr	r3, [r4, #4]
 8012846:	bf08      	it	eq
 8012848:	f8c8 1000 	streq.w	r1, [r8]
 801284c:	5162      	str	r2, [r4, r5]
 801284e:	604b      	str	r3, [r1, #4]
 8012850:	4630      	mov	r0, r6
 8012852:	f000 f82f 	bl	80128b4 <__malloc_unlock>
 8012856:	f104 000b 	add.w	r0, r4, #11
 801285a:	1d23      	adds	r3, r4, #4
 801285c:	f020 0007 	bic.w	r0, r0, #7
 8012860:	1ac2      	subs	r2, r0, r3
 8012862:	bf1c      	itt	ne
 8012864:	1a1b      	subne	r3, r3, r0
 8012866:	50a3      	strne	r3, [r4, r2]
 8012868:	e7af      	b.n	80127ca <_malloc_r+0x22>
 801286a:	6862      	ldr	r2, [r4, #4]
 801286c:	42a3      	cmp	r3, r4
 801286e:	bf0c      	ite	eq
 8012870:	f8c8 2000 	streq.w	r2, [r8]
 8012874:	605a      	strne	r2, [r3, #4]
 8012876:	e7eb      	b.n	8012850 <_malloc_r+0xa8>
 8012878:	4623      	mov	r3, r4
 801287a:	6864      	ldr	r4, [r4, #4]
 801287c:	e7ae      	b.n	80127dc <_malloc_r+0x34>
 801287e:	463c      	mov	r4, r7
 8012880:	687f      	ldr	r7, [r7, #4]
 8012882:	e7b6      	b.n	80127f2 <_malloc_r+0x4a>
 8012884:	461a      	mov	r2, r3
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	42a3      	cmp	r3, r4
 801288a:	d1fb      	bne.n	8012884 <_malloc_r+0xdc>
 801288c:	2300      	movs	r3, #0
 801288e:	6053      	str	r3, [r2, #4]
 8012890:	e7de      	b.n	8012850 <_malloc_r+0xa8>
 8012892:	230c      	movs	r3, #12
 8012894:	4630      	mov	r0, r6
 8012896:	6033      	str	r3, [r6, #0]
 8012898:	f000 f80c 	bl	80128b4 <__malloc_unlock>
 801289c:	e794      	b.n	80127c8 <_malloc_r+0x20>
 801289e:	6005      	str	r5, [r0, #0]
 80128a0:	e7d6      	b.n	8012850 <_malloc_r+0xa8>
 80128a2:	bf00      	nop
 80128a4:	20001840 	.word	0x20001840

080128a8 <__malloc_lock>:
 80128a8:	4801      	ldr	r0, [pc, #4]	@ (80128b0 <__malloc_lock+0x8>)
 80128aa:	f7ff b89e 	b.w	80119ea <__retarget_lock_acquire_recursive>
 80128ae:	bf00      	nop
 80128b0:	20001838 	.word	0x20001838

080128b4 <__malloc_unlock>:
 80128b4:	4801      	ldr	r0, [pc, #4]	@ (80128bc <__malloc_unlock+0x8>)
 80128b6:	f7ff b899 	b.w	80119ec <__retarget_lock_release_recursive>
 80128ba:	bf00      	nop
 80128bc:	20001838 	.word	0x20001838

080128c0 <_Balloc>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	69c6      	ldr	r6, [r0, #28]
 80128c4:	4604      	mov	r4, r0
 80128c6:	460d      	mov	r5, r1
 80128c8:	b976      	cbnz	r6, 80128e8 <_Balloc+0x28>
 80128ca:	2010      	movs	r0, #16
 80128cc:	f7ff ff42 	bl	8012754 <malloc>
 80128d0:	4602      	mov	r2, r0
 80128d2:	61e0      	str	r0, [r4, #28]
 80128d4:	b920      	cbnz	r0, 80128e0 <_Balloc+0x20>
 80128d6:	4b18      	ldr	r3, [pc, #96]	@ (8012938 <_Balloc+0x78>)
 80128d8:	216b      	movs	r1, #107	@ 0x6b
 80128da:	4818      	ldr	r0, [pc, #96]	@ (801293c <_Balloc+0x7c>)
 80128dc:	f001 ff94 	bl	8014808 <__assert_func>
 80128e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128e4:	6006      	str	r6, [r0, #0]
 80128e6:	60c6      	str	r6, [r0, #12]
 80128e8:	69e6      	ldr	r6, [r4, #28]
 80128ea:	68f3      	ldr	r3, [r6, #12]
 80128ec:	b183      	cbz	r3, 8012910 <_Balloc+0x50>
 80128ee:	69e3      	ldr	r3, [r4, #28]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80128f6:	b9b8      	cbnz	r0, 8012928 <_Balloc+0x68>
 80128f8:	2101      	movs	r1, #1
 80128fa:	4620      	mov	r0, r4
 80128fc:	fa01 f605 	lsl.w	r6, r1, r5
 8012900:	1d72      	adds	r2, r6, #5
 8012902:	0092      	lsls	r2, r2, #2
 8012904:	f001 ff9e 	bl	8014844 <_calloc_r>
 8012908:	b160      	cbz	r0, 8012924 <_Balloc+0x64>
 801290a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801290e:	e00e      	b.n	801292e <_Balloc+0x6e>
 8012910:	2221      	movs	r2, #33	@ 0x21
 8012912:	2104      	movs	r1, #4
 8012914:	4620      	mov	r0, r4
 8012916:	f001 ff95 	bl	8014844 <_calloc_r>
 801291a:	69e3      	ldr	r3, [r4, #28]
 801291c:	60f0      	str	r0, [r6, #12]
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1e4      	bne.n	80128ee <_Balloc+0x2e>
 8012924:	2000      	movs	r0, #0
 8012926:	bd70      	pop	{r4, r5, r6, pc}
 8012928:	6802      	ldr	r2, [r0, #0]
 801292a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801292e:	2300      	movs	r3, #0
 8012930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012934:	e7f7      	b.n	8012926 <_Balloc+0x66>
 8012936:	bf00      	nop
 8012938:	08015426 	.word	0x08015426
 801293c:	080154a6 	.word	0x080154a6

08012940 <_Bfree>:
 8012940:	b570      	push	{r4, r5, r6, lr}
 8012942:	69c6      	ldr	r6, [r0, #28]
 8012944:	4605      	mov	r5, r0
 8012946:	460c      	mov	r4, r1
 8012948:	b976      	cbnz	r6, 8012968 <_Bfree+0x28>
 801294a:	2010      	movs	r0, #16
 801294c:	f7ff ff02 	bl	8012754 <malloc>
 8012950:	4602      	mov	r2, r0
 8012952:	61e8      	str	r0, [r5, #28]
 8012954:	b920      	cbnz	r0, 8012960 <_Bfree+0x20>
 8012956:	4b09      	ldr	r3, [pc, #36]	@ (801297c <_Bfree+0x3c>)
 8012958:	218f      	movs	r1, #143	@ 0x8f
 801295a:	4809      	ldr	r0, [pc, #36]	@ (8012980 <_Bfree+0x40>)
 801295c:	f001 ff54 	bl	8014808 <__assert_func>
 8012960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012964:	6006      	str	r6, [r0, #0]
 8012966:	60c6      	str	r6, [r0, #12]
 8012968:	b13c      	cbz	r4, 801297a <_Bfree+0x3a>
 801296a:	69eb      	ldr	r3, [r5, #28]
 801296c:	6862      	ldr	r2, [r4, #4]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012974:	6021      	str	r1, [r4, #0]
 8012976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801297a:	bd70      	pop	{r4, r5, r6, pc}
 801297c:	08015426 	.word	0x08015426
 8012980:	080154a6 	.word	0x080154a6

08012984 <__multadd>:
 8012984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012988:	f101 0c14 	add.w	ip, r1, #20
 801298c:	4607      	mov	r7, r0
 801298e:	460c      	mov	r4, r1
 8012990:	461e      	mov	r6, r3
 8012992:	690d      	ldr	r5, [r1, #16]
 8012994:	2000      	movs	r0, #0
 8012996:	f8dc 3000 	ldr.w	r3, [ip]
 801299a:	3001      	adds	r0, #1
 801299c:	b299      	uxth	r1, r3
 801299e:	4285      	cmp	r5, r0
 80129a0:	fb02 6101 	mla	r1, r2, r1, r6
 80129a4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80129a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80129ac:	b289      	uxth	r1, r1
 80129ae:	fb02 3306 	mla	r3, r2, r6, r3
 80129b2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80129b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80129ba:	f84c 1b04 	str.w	r1, [ip], #4
 80129be:	dcea      	bgt.n	8012996 <__multadd+0x12>
 80129c0:	b30e      	cbz	r6, 8012a06 <__multadd+0x82>
 80129c2:	68a3      	ldr	r3, [r4, #8]
 80129c4:	42ab      	cmp	r3, r5
 80129c6:	dc19      	bgt.n	80129fc <__multadd+0x78>
 80129c8:	6861      	ldr	r1, [r4, #4]
 80129ca:	4638      	mov	r0, r7
 80129cc:	3101      	adds	r1, #1
 80129ce:	f7ff ff77 	bl	80128c0 <_Balloc>
 80129d2:	4680      	mov	r8, r0
 80129d4:	b928      	cbnz	r0, 80129e2 <__multadd+0x5e>
 80129d6:	4602      	mov	r2, r0
 80129d8:	4b0c      	ldr	r3, [pc, #48]	@ (8012a0c <__multadd+0x88>)
 80129da:	21ba      	movs	r1, #186	@ 0xba
 80129dc:	480c      	ldr	r0, [pc, #48]	@ (8012a10 <__multadd+0x8c>)
 80129de:	f001 ff13 	bl	8014808 <__assert_func>
 80129e2:	6922      	ldr	r2, [r4, #16]
 80129e4:	f104 010c 	add.w	r1, r4, #12
 80129e8:	300c      	adds	r0, #12
 80129ea:	3202      	adds	r2, #2
 80129ec:	0092      	lsls	r2, r2, #2
 80129ee:	f001 fef3 	bl	80147d8 <memcpy>
 80129f2:	4621      	mov	r1, r4
 80129f4:	4644      	mov	r4, r8
 80129f6:	4638      	mov	r0, r7
 80129f8:	f7ff ffa2 	bl	8012940 <_Bfree>
 80129fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a00:	3501      	adds	r5, #1
 8012a02:	615e      	str	r6, [r3, #20]
 8012a04:	6125      	str	r5, [r4, #16]
 8012a06:	4620      	mov	r0, r4
 8012a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a0c:	08015495 	.word	0x08015495
 8012a10:	080154a6 	.word	0x080154a6

08012a14 <__s2b>:
 8012a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a18:	4615      	mov	r5, r2
 8012a1a:	461f      	mov	r7, r3
 8012a1c:	2209      	movs	r2, #9
 8012a1e:	3308      	adds	r3, #8
 8012a20:	460c      	mov	r4, r1
 8012a22:	4606      	mov	r6, r0
 8012a24:	2100      	movs	r1, #0
 8012a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	db09      	blt.n	8012a44 <__s2b+0x30>
 8012a30:	4630      	mov	r0, r6
 8012a32:	f7ff ff45 	bl	80128c0 <_Balloc>
 8012a36:	b940      	cbnz	r0, 8012a4a <__s2b+0x36>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	4b19      	ldr	r3, [pc, #100]	@ (8012aa0 <__s2b+0x8c>)
 8012a3c:	21d3      	movs	r1, #211	@ 0xd3
 8012a3e:	4819      	ldr	r0, [pc, #100]	@ (8012aa4 <__s2b+0x90>)
 8012a40:	f001 fee2 	bl	8014808 <__assert_func>
 8012a44:	0052      	lsls	r2, r2, #1
 8012a46:	3101      	adds	r1, #1
 8012a48:	e7f0      	b.n	8012a2c <__s2b+0x18>
 8012a4a:	9b08      	ldr	r3, [sp, #32]
 8012a4c:	2d09      	cmp	r5, #9
 8012a4e:	6143      	str	r3, [r0, #20]
 8012a50:	f04f 0301 	mov.w	r3, #1
 8012a54:	6103      	str	r3, [r0, #16]
 8012a56:	dd16      	ble.n	8012a86 <__s2b+0x72>
 8012a58:	f104 0909 	add.w	r9, r4, #9
 8012a5c:	442c      	add	r4, r5
 8012a5e:	46c8      	mov	r8, r9
 8012a60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012a64:	4601      	mov	r1, r0
 8012a66:	220a      	movs	r2, #10
 8012a68:	4630      	mov	r0, r6
 8012a6a:	3b30      	subs	r3, #48	@ 0x30
 8012a6c:	f7ff ff8a 	bl	8012984 <__multadd>
 8012a70:	45a0      	cmp	r8, r4
 8012a72:	d1f5      	bne.n	8012a60 <__s2b+0x4c>
 8012a74:	f1a5 0408 	sub.w	r4, r5, #8
 8012a78:	444c      	add	r4, r9
 8012a7a:	1b2d      	subs	r5, r5, r4
 8012a7c:	1963      	adds	r3, r4, r5
 8012a7e:	42bb      	cmp	r3, r7
 8012a80:	db04      	blt.n	8012a8c <__s2b+0x78>
 8012a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a86:	340a      	adds	r4, #10
 8012a88:	2509      	movs	r5, #9
 8012a8a:	e7f6      	b.n	8012a7a <__s2b+0x66>
 8012a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a90:	4601      	mov	r1, r0
 8012a92:	220a      	movs	r2, #10
 8012a94:	4630      	mov	r0, r6
 8012a96:	3b30      	subs	r3, #48	@ 0x30
 8012a98:	f7ff ff74 	bl	8012984 <__multadd>
 8012a9c:	e7ee      	b.n	8012a7c <__s2b+0x68>
 8012a9e:	bf00      	nop
 8012aa0:	08015495 	.word	0x08015495
 8012aa4:	080154a6 	.word	0x080154a6

08012aa8 <__hi0bits>:
 8012aa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012aac:	4603      	mov	r3, r0
 8012aae:	bf36      	itet	cc
 8012ab0:	0403      	lslcc	r3, r0, #16
 8012ab2:	2000      	movcs	r0, #0
 8012ab4:	2010      	movcc	r0, #16
 8012ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012aba:	bf3c      	itt	cc
 8012abc:	021b      	lslcc	r3, r3, #8
 8012abe:	3008      	addcc	r0, #8
 8012ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ac4:	bf3c      	itt	cc
 8012ac6:	011b      	lslcc	r3, r3, #4
 8012ac8:	3004      	addcc	r0, #4
 8012aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ace:	bf3c      	itt	cc
 8012ad0:	009b      	lslcc	r3, r3, #2
 8012ad2:	3002      	addcc	r0, #2
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	db05      	blt.n	8012ae4 <__hi0bits+0x3c>
 8012ad8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012adc:	f100 0001 	add.w	r0, r0, #1
 8012ae0:	bf08      	it	eq
 8012ae2:	2020      	moveq	r0, #32
 8012ae4:	4770      	bx	lr

08012ae6 <__lo0bits>:
 8012ae6:	6803      	ldr	r3, [r0, #0]
 8012ae8:	4602      	mov	r2, r0
 8012aea:	f013 0007 	ands.w	r0, r3, #7
 8012aee:	d00b      	beq.n	8012b08 <__lo0bits+0x22>
 8012af0:	07d9      	lsls	r1, r3, #31
 8012af2:	d421      	bmi.n	8012b38 <__lo0bits+0x52>
 8012af4:	0798      	lsls	r0, r3, #30
 8012af6:	bf47      	ittee	mi
 8012af8:	085b      	lsrmi	r3, r3, #1
 8012afa:	2001      	movmi	r0, #1
 8012afc:	089b      	lsrpl	r3, r3, #2
 8012afe:	2002      	movpl	r0, #2
 8012b00:	bf4c      	ite	mi
 8012b02:	6013      	strmi	r3, [r2, #0]
 8012b04:	6013      	strpl	r3, [r2, #0]
 8012b06:	4770      	bx	lr
 8012b08:	b299      	uxth	r1, r3
 8012b0a:	b909      	cbnz	r1, 8012b10 <__lo0bits+0x2a>
 8012b0c:	0c1b      	lsrs	r3, r3, #16
 8012b0e:	2010      	movs	r0, #16
 8012b10:	b2d9      	uxtb	r1, r3
 8012b12:	b909      	cbnz	r1, 8012b18 <__lo0bits+0x32>
 8012b14:	3008      	adds	r0, #8
 8012b16:	0a1b      	lsrs	r3, r3, #8
 8012b18:	0719      	lsls	r1, r3, #28
 8012b1a:	bf04      	itt	eq
 8012b1c:	091b      	lsreq	r3, r3, #4
 8012b1e:	3004      	addeq	r0, #4
 8012b20:	0799      	lsls	r1, r3, #30
 8012b22:	bf04      	itt	eq
 8012b24:	089b      	lsreq	r3, r3, #2
 8012b26:	3002      	addeq	r0, #2
 8012b28:	07d9      	lsls	r1, r3, #31
 8012b2a:	d403      	bmi.n	8012b34 <__lo0bits+0x4e>
 8012b2c:	085b      	lsrs	r3, r3, #1
 8012b2e:	f100 0001 	add.w	r0, r0, #1
 8012b32:	d003      	beq.n	8012b3c <__lo0bits+0x56>
 8012b34:	6013      	str	r3, [r2, #0]
 8012b36:	4770      	bx	lr
 8012b38:	2000      	movs	r0, #0
 8012b3a:	4770      	bx	lr
 8012b3c:	2020      	movs	r0, #32
 8012b3e:	4770      	bx	lr

08012b40 <__i2b>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	460c      	mov	r4, r1
 8012b44:	2101      	movs	r1, #1
 8012b46:	f7ff febb 	bl	80128c0 <_Balloc>
 8012b4a:	4602      	mov	r2, r0
 8012b4c:	b928      	cbnz	r0, 8012b5a <__i2b+0x1a>
 8012b4e:	4b05      	ldr	r3, [pc, #20]	@ (8012b64 <__i2b+0x24>)
 8012b50:	f240 1145 	movw	r1, #325	@ 0x145
 8012b54:	4804      	ldr	r0, [pc, #16]	@ (8012b68 <__i2b+0x28>)
 8012b56:	f001 fe57 	bl	8014808 <__assert_func>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	6144      	str	r4, [r0, #20]
 8012b5e:	6103      	str	r3, [r0, #16]
 8012b60:	bd10      	pop	{r4, pc}
 8012b62:	bf00      	nop
 8012b64:	08015495 	.word	0x08015495
 8012b68:	080154a6 	.word	0x080154a6

08012b6c <__multiply>:
 8012b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b70:	4614      	mov	r4, r2
 8012b72:	690a      	ldr	r2, [r1, #16]
 8012b74:	460f      	mov	r7, r1
 8012b76:	b085      	sub	sp, #20
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	bfa2      	ittt	ge
 8012b7e:	4623      	movge	r3, r4
 8012b80:	460c      	movge	r4, r1
 8012b82:	461f      	movge	r7, r3
 8012b84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012b88:	68a3      	ldr	r3, [r4, #8]
 8012b8a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012b8e:	6861      	ldr	r1, [r4, #4]
 8012b90:	eb0a 0609 	add.w	r6, sl, r9
 8012b94:	42b3      	cmp	r3, r6
 8012b96:	bfb8      	it	lt
 8012b98:	3101      	addlt	r1, #1
 8012b9a:	f7ff fe91 	bl	80128c0 <_Balloc>
 8012b9e:	b930      	cbnz	r0, 8012bae <__multiply+0x42>
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	4b45      	ldr	r3, [pc, #276]	@ (8012cb8 <__multiply+0x14c>)
 8012ba4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012ba8:	4844      	ldr	r0, [pc, #272]	@ (8012cbc <__multiply+0x150>)
 8012baa:	f001 fe2d 	bl	8014808 <__assert_func>
 8012bae:	f100 0514 	add.w	r5, r0, #20
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012bb8:	462b      	mov	r3, r5
 8012bba:	4543      	cmp	r3, r8
 8012bbc:	d321      	bcc.n	8012c02 <__multiply+0x96>
 8012bbe:	f107 0114 	add.w	r1, r7, #20
 8012bc2:	f104 0214 	add.w	r2, r4, #20
 8012bc6:	f104 0715 	add.w	r7, r4, #21
 8012bca:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012bce:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012bd2:	9302      	str	r3, [sp, #8]
 8012bd4:	1b13      	subs	r3, r2, r4
 8012bd6:	3b15      	subs	r3, #21
 8012bd8:	f023 0303 	bic.w	r3, r3, #3
 8012bdc:	3304      	adds	r3, #4
 8012bde:	42ba      	cmp	r2, r7
 8012be0:	bf38      	it	cc
 8012be2:	2304      	movcc	r3, #4
 8012be4:	9301      	str	r3, [sp, #4]
 8012be6:	9b02      	ldr	r3, [sp, #8]
 8012be8:	9103      	str	r1, [sp, #12]
 8012bea:	428b      	cmp	r3, r1
 8012bec:	d80c      	bhi.n	8012c08 <__multiply+0x9c>
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	dd03      	ble.n	8012bfa <__multiply+0x8e>
 8012bf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d05b      	beq.n	8012cb2 <__multiply+0x146>
 8012bfa:	6106      	str	r6, [r0, #16]
 8012bfc:	b005      	add	sp, #20
 8012bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c02:	f843 2b04 	str.w	r2, [r3], #4
 8012c06:	e7d8      	b.n	8012bba <__multiply+0x4e>
 8012c08:	f8b1 a000 	ldrh.w	sl, [r1]
 8012c0c:	f1ba 0f00 	cmp.w	sl, #0
 8012c10:	d024      	beq.n	8012c5c <__multiply+0xf0>
 8012c12:	f104 0e14 	add.w	lr, r4, #20
 8012c16:	46a9      	mov	r9, r5
 8012c18:	f04f 0c00 	mov.w	ip, #0
 8012c1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012c20:	f8d9 3000 	ldr.w	r3, [r9]
 8012c24:	fa1f fb87 	uxth.w	fp, r7
 8012c28:	4572      	cmp	r2, lr
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012c30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012c34:	f8d9 7000 	ldr.w	r7, [r9]
 8012c38:	4463      	add	r3, ip
 8012c3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012c3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8012c42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012c46:	b29b      	uxth	r3, r3
 8012c48:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012c4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012c50:	f849 3b04 	str.w	r3, [r9], #4
 8012c54:	d8e2      	bhi.n	8012c1c <__multiply+0xb0>
 8012c56:	9b01      	ldr	r3, [sp, #4]
 8012c58:	f845 c003 	str.w	ip, [r5, r3]
 8012c5c:	9b03      	ldr	r3, [sp, #12]
 8012c5e:	3104      	adds	r1, #4
 8012c60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012c64:	f1b9 0f00 	cmp.w	r9, #0
 8012c68:	d021      	beq.n	8012cae <__multiply+0x142>
 8012c6a:	682b      	ldr	r3, [r5, #0]
 8012c6c:	f104 0c14 	add.w	ip, r4, #20
 8012c70:	46ae      	mov	lr, r5
 8012c72:	f04f 0a00 	mov.w	sl, #0
 8012c76:	f8bc b000 	ldrh.w	fp, [ip]
 8012c7a:	b29b      	uxth	r3, r3
 8012c7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012c80:	fb09 770b 	mla	r7, r9, fp, r7
 8012c84:	4457      	add	r7, sl
 8012c86:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012c8a:	f84e 3b04 	str.w	r3, [lr], #4
 8012c8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012c92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012c96:	f8be 3000 	ldrh.w	r3, [lr]
 8012c9a:	4562      	cmp	r2, ip
 8012c9c:	fb09 330a 	mla	r3, r9, sl, r3
 8012ca0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012ca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012ca8:	d8e5      	bhi.n	8012c76 <__multiply+0x10a>
 8012caa:	9f01      	ldr	r7, [sp, #4]
 8012cac:	51eb      	str	r3, [r5, r7]
 8012cae:	3504      	adds	r5, #4
 8012cb0:	e799      	b.n	8012be6 <__multiply+0x7a>
 8012cb2:	3e01      	subs	r6, #1
 8012cb4:	e79b      	b.n	8012bee <__multiply+0x82>
 8012cb6:	bf00      	nop
 8012cb8:	08015495 	.word	0x08015495
 8012cbc:	080154a6 	.word	0x080154a6

08012cc0 <__pow5mult>:
 8012cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cc4:	4615      	mov	r5, r2
 8012cc6:	f012 0203 	ands.w	r2, r2, #3
 8012cca:	4607      	mov	r7, r0
 8012ccc:	460e      	mov	r6, r1
 8012cce:	d007      	beq.n	8012ce0 <__pow5mult+0x20>
 8012cd0:	3a01      	subs	r2, #1
 8012cd2:	4c25      	ldr	r4, [pc, #148]	@ (8012d68 <__pow5mult+0xa8>)
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012cda:	f7ff fe53 	bl	8012984 <__multadd>
 8012cde:	4606      	mov	r6, r0
 8012ce0:	10ad      	asrs	r5, r5, #2
 8012ce2:	d03d      	beq.n	8012d60 <__pow5mult+0xa0>
 8012ce4:	69fc      	ldr	r4, [r7, #28]
 8012ce6:	b97c      	cbnz	r4, 8012d08 <__pow5mult+0x48>
 8012ce8:	2010      	movs	r0, #16
 8012cea:	f7ff fd33 	bl	8012754 <malloc>
 8012cee:	4602      	mov	r2, r0
 8012cf0:	61f8      	str	r0, [r7, #28]
 8012cf2:	b928      	cbnz	r0, 8012d00 <__pow5mult+0x40>
 8012cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8012d6c <__pow5mult+0xac>)
 8012cf6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012cfa:	481d      	ldr	r0, [pc, #116]	@ (8012d70 <__pow5mult+0xb0>)
 8012cfc:	f001 fd84 	bl	8014808 <__assert_func>
 8012d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d04:	6004      	str	r4, [r0, #0]
 8012d06:	60c4      	str	r4, [r0, #12]
 8012d08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d10:	b94c      	cbnz	r4, 8012d26 <__pow5mult+0x66>
 8012d12:	f240 2171 	movw	r1, #625	@ 0x271
 8012d16:	4638      	mov	r0, r7
 8012d18:	f7ff ff12 	bl	8012b40 <__i2b>
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	4604      	mov	r4, r0
 8012d20:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d24:	6003      	str	r3, [r0, #0]
 8012d26:	f04f 0900 	mov.w	r9, #0
 8012d2a:	07eb      	lsls	r3, r5, #31
 8012d2c:	d50a      	bpl.n	8012d44 <__pow5mult+0x84>
 8012d2e:	4631      	mov	r1, r6
 8012d30:	4622      	mov	r2, r4
 8012d32:	4638      	mov	r0, r7
 8012d34:	f7ff ff1a 	bl	8012b6c <__multiply>
 8012d38:	4680      	mov	r8, r0
 8012d3a:	4631      	mov	r1, r6
 8012d3c:	4638      	mov	r0, r7
 8012d3e:	4646      	mov	r6, r8
 8012d40:	f7ff fdfe 	bl	8012940 <_Bfree>
 8012d44:	106d      	asrs	r5, r5, #1
 8012d46:	d00b      	beq.n	8012d60 <__pow5mult+0xa0>
 8012d48:	6820      	ldr	r0, [r4, #0]
 8012d4a:	b938      	cbnz	r0, 8012d5c <__pow5mult+0x9c>
 8012d4c:	4622      	mov	r2, r4
 8012d4e:	4621      	mov	r1, r4
 8012d50:	4638      	mov	r0, r7
 8012d52:	f7ff ff0b 	bl	8012b6c <__multiply>
 8012d56:	6020      	str	r0, [r4, #0]
 8012d58:	f8c0 9000 	str.w	r9, [r0]
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	e7e4      	b.n	8012d2a <__pow5mult+0x6a>
 8012d60:	4630      	mov	r0, r6
 8012d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d66:	bf00      	nop
 8012d68:	08015500 	.word	0x08015500
 8012d6c:	08015426 	.word	0x08015426
 8012d70:	080154a6 	.word	0x080154a6

08012d74 <__lshift>:
 8012d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d78:	460c      	mov	r4, r1
 8012d7a:	4607      	mov	r7, r0
 8012d7c:	4691      	mov	r9, r2
 8012d7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d82:	6923      	ldr	r3, [r4, #16]
 8012d84:	6849      	ldr	r1, [r1, #4]
 8012d86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012d8a:	68a3      	ldr	r3, [r4, #8]
 8012d8c:	f108 0601 	add.w	r6, r8, #1
 8012d90:	42b3      	cmp	r3, r6
 8012d92:	db0b      	blt.n	8012dac <__lshift+0x38>
 8012d94:	4638      	mov	r0, r7
 8012d96:	f7ff fd93 	bl	80128c0 <_Balloc>
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	b948      	cbnz	r0, 8012db2 <__lshift+0x3e>
 8012d9e:	4602      	mov	r2, r0
 8012da0:	4b28      	ldr	r3, [pc, #160]	@ (8012e44 <__lshift+0xd0>)
 8012da2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012da6:	4828      	ldr	r0, [pc, #160]	@ (8012e48 <__lshift+0xd4>)
 8012da8:	f001 fd2e 	bl	8014808 <__assert_func>
 8012dac:	3101      	adds	r1, #1
 8012dae:	005b      	lsls	r3, r3, #1
 8012db0:	e7ee      	b.n	8012d90 <__lshift+0x1c>
 8012db2:	2300      	movs	r3, #0
 8012db4:	f100 0114 	add.w	r1, r0, #20
 8012db8:	f100 0210 	add.w	r2, r0, #16
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	4553      	cmp	r3, sl
 8012dc0:	db33      	blt.n	8012e2a <__lshift+0xb6>
 8012dc2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012dc6:	f104 0314 	add.w	r3, r4, #20
 8012dca:	6920      	ldr	r0, [r4, #16]
 8012dcc:	f019 091f 	ands.w	r9, r9, #31
 8012dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012dd8:	d02b      	beq.n	8012e32 <__lshift+0xbe>
 8012dda:	f1c9 0e20 	rsb	lr, r9, #32
 8012dde:	468a      	mov	sl, r1
 8012de0:	2200      	movs	r2, #0
 8012de2:	6818      	ldr	r0, [r3, #0]
 8012de4:	fa00 f009 	lsl.w	r0, r0, r9
 8012de8:	4310      	orrs	r0, r2
 8012dea:	f84a 0b04 	str.w	r0, [sl], #4
 8012dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8012df2:	459c      	cmp	ip, r3
 8012df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8012df8:	d8f3      	bhi.n	8012de2 <__lshift+0x6e>
 8012dfa:	ebac 0304 	sub.w	r3, ip, r4
 8012dfe:	f104 0015 	add.w	r0, r4, #21
 8012e02:	3b15      	subs	r3, #21
 8012e04:	f023 0303 	bic.w	r3, r3, #3
 8012e08:	3304      	adds	r3, #4
 8012e0a:	4584      	cmp	ip, r0
 8012e0c:	bf38      	it	cc
 8012e0e:	2304      	movcc	r3, #4
 8012e10:	50ca      	str	r2, [r1, r3]
 8012e12:	b10a      	cbz	r2, 8012e18 <__lshift+0xa4>
 8012e14:	f108 0602 	add.w	r6, r8, #2
 8012e18:	3e01      	subs	r6, #1
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	4621      	mov	r1, r4
 8012e1e:	612e      	str	r6, [r5, #16]
 8012e20:	f7ff fd8e 	bl	8012940 <_Bfree>
 8012e24:	4628      	mov	r0, r5
 8012e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e2a:	3301      	adds	r3, #1
 8012e2c:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e30:	e7c5      	b.n	8012dbe <__lshift+0x4a>
 8012e32:	3904      	subs	r1, #4
 8012e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e38:	459c      	cmp	ip, r3
 8012e3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e3e:	d8f9      	bhi.n	8012e34 <__lshift+0xc0>
 8012e40:	e7ea      	b.n	8012e18 <__lshift+0xa4>
 8012e42:	bf00      	nop
 8012e44:	08015495 	.word	0x08015495
 8012e48:	080154a6 	.word	0x080154a6

08012e4c <__mcmp>:
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	690a      	ldr	r2, [r1, #16]
 8012e50:	6900      	ldr	r0, [r0, #16]
 8012e52:	1a80      	subs	r0, r0, r2
 8012e54:	b530      	push	{r4, r5, lr}
 8012e56:	d10e      	bne.n	8012e76 <__mcmp+0x2a>
 8012e58:	3314      	adds	r3, #20
 8012e5a:	3114      	adds	r1, #20
 8012e5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012e60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012e64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012e6c:	4295      	cmp	r5, r2
 8012e6e:	d003      	beq.n	8012e78 <__mcmp+0x2c>
 8012e70:	d205      	bcs.n	8012e7e <__mcmp+0x32>
 8012e72:	f04f 30ff 	mov.w	r0, #4294967295
 8012e76:	bd30      	pop	{r4, r5, pc}
 8012e78:	42a3      	cmp	r3, r4
 8012e7a:	d3f3      	bcc.n	8012e64 <__mcmp+0x18>
 8012e7c:	e7fb      	b.n	8012e76 <__mcmp+0x2a>
 8012e7e:	2001      	movs	r0, #1
 8012e80:	e7f9      	b.n	8012e76 <__mcmp+0x2a>
	...

08012e84 <__mdiff>:
 8012e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e88:	4689      	mov	r9, r1
 8012e8a:	4606      	mov	r6, r0
 8012e8c:	4611      	mov	r1, r2
 8012e8e:	4614      	mov	r4, r2
 8012e90:	4648      	mov	r0, r9
 8012e92:	f7ff ffdb 	bl	8012e4c <__mcmp>
 8012e96:	1e05      	subs	r5, r0, #0
 8012e98:	d112      	bne.n	8012ec0 <__mdiff+0x3c>
 8012e9a:	4629      	mov	r1, r5
 8012e9c:	4630      	mov	r0, r6
 8012e9e:	f7ff fd0f 	bl	80128c0 <_Balloc>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	b928      	cbnz	r0, 8012eb2 <__mdiff+0x2e>
 8012ea6:	4b41      	ldr	r3, [pc, #260]	@ (8012fac <__mdiff+0x128>)
 8012ea8:	f240 2137 	movw	r1, #567	@ 0x237
 8012eac:	4840      	ldr	r0, [pc, #256]	@ (8012fb0 <__mdiff+0x12c>)
 8012eae:	f001 fcab 	bl	8014808 <__assert_func>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012eb8:	4610      	mov	r0, r2
 8012eba:	b003      	add	sp, #12
 8012ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec0:	bfbc      	itt	lt
 8012ec2:	464b      	movlt	r3, r9
 8012ec4:	46a1      	movlt	r9, r4
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	bfb8      	it	lt
 8012eca:	2501      	movlt	r5, #1
 8012ecc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012ed0:	bfb4      	ite	lt
 8012ed2:	461c      	movlt	r4, r3
 8012ed4:	2500      	movge	r5, #0
 8012ed6:	f7ff fcf3 	bl	80128c0 <_Balloc>
 8012eda:	4602      	mov	r2, r0
 8012edc:	b918      	cbnz	r0, 8012ee6 <__mdiff+0x62>
 8012ede:	4b33      	ldr	r3, [pc, #204]	@ (8012fac <__mdiff+0x128>)
 8012ee0:	f240 2145 	movw	r1, #581	@ 0x245
 8012ee4:	e7e2      	b.n	8012eac <__mdiff+0x28>
 8012ee6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012eea:	f104 0e14 	add.w	lr, r4, #20
 8012eee:	6926      	ldr	r6, [r4, #16]
 8012ef0:	f100 0b14 	add.w	fp, r0, #20
 8012ef4:	60c5      	str	r5, [r0, #12]
 8012ef6:	f109 0514 	add.w	r5, r9, #20
 8012efa:	f109 0310 	add.w	r3, r9, #16
 8012efe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012f02:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012f06:	46d9      	mov	r9, fp
 8012f08:	f04f 0c00 	mov.w	ip, #0
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	9b01      	ldr	r3, [sp, #4]
 8012f10:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012f14:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012f18:	4576      	cmp	r6, lr
 8012f1a:	9301      	str	r3, [sp, #4]
 8012f1c:	fa1f f38a 	uxth.w	r3, sl
 8012f20:	4619      	mov	r1, r3
 8012f22:	b283      	uxth	r3, r0
 8012f24:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8012f28:	eba1 0303 	sub.w	r3, r1, r3
 8012f2c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012f30:	4463      	add	r3, ip
 8012f32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012f3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012f40:	f849 3b04 	str.w	r3, [r9], #4
 8012f44:	d8e3      	bhi.n	8012f0e <__mdiff+0x8a>
 8012f46:	1b33      	subs	r3, r6, r4
 8012f48:	3415      	adds	r4, #21
 8012f4a:	3b15      	subs	r3, #21
 8012f4c:	f023 0303 	bic.w	r3, r3, #3
 8012f50:	3304      	adds	r3, #4
 8012f52:	42a6      	cmp	r6, r4
 8012f54:	bf38      	it	cc
 8012f56:	2304      	movcc	r3, #4
 8012f58:	441d      	add	r5, r3
 8012f5a:	445b      	add	r3, fp
 8012f5c:	462c      	mov	r4, r5
 8012f5e:	461e      	mov	r6, r3
 8012f60:	4544      	cmp	r4, r8
 8012f62:	d30e      	bcc.n	8012f82 <__mdiff+0xfe>
 8012f64:	f108 0103 	add.w	r1, r8, #3
 8012f68:	1b49      	subs	r1, r1, r5
 8012f6a:	3d03      	subs	r5, #3
 8012f6c:	f021 0103 	bic.w	r1, r1, #3
 8012f70:	45a8      	cmp	r8, r5
 8012f72:	bf38      	it	cc
 8012f74:	2100      	movcc	r1, #0
 8012f76:	440b      	add	r3, r1
 8012f78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012f7c:	b199      	cbz	r1, 8012fa6 <__mdiff+0x122>
 8012f7e:	6117      	str	r7, [r2, #16]
 8012f80:	e79a      	b.n	8012eb8 <__mdiff+0x34>
 8012f82:	f854 1b04 	ldr.w	r1, [r4], #4
 8012f86:	46e6      	mov	lr, ip
 8012f88:	fa1f fc81 	uxth.w	ip, r1
 8012f8c:	0c08      	lsrs	r0, r1, #16
 8012f8e:	4471      	add	r1, lr
 8012f90:	44f4      	add	ip, lr
 8012f92:	b289      	uxth	r1, r1
 8012f94:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012f98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012f9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012fa0:	f846 1b04 	str.w	r1, [r6], #4
 8012fa4:	e7dc      	b.n	8012f60 <__mdiff+0xdc>
 8012fa6:	3f01      	subs	r7, #1
 8012fa8:	e7e6      	b.n	8012f78 <__mdiff+0xf4>
 8012faa:	bf00      	nop
 8012fac:	08015495 	.word	0x08015495
 8012fb0:	080154a6 	.word	0x080154a6

08012fb4 <__ulp>:
 8012fb4:	b082      	sub	sp, #8
 8012fb6:	4b11      	ldr	r3, [pc, #68]	@ (8012ffc <__ulp+0x48>)
 8012fb8:	ed8d 0b00 	vstr	d0, [sp]
 8012fbc:	9a01      	ldr	r2, [sp, #4]
 8012fbe:	4013      	ands	r3, r2
 8012fc0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	dc08      	bgt.n	8012fda <__ulp+0x26>
 8012fc8:	425b      	negs	r3, r3
 8012fca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012fce:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012fd2:	da04      	bge.n	8012fde <__ulp+0x2a>
 8012fd4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012fd8:	4113      	asrs	r3, r2
 8012fda:	2200      	movs	r2, #0
 8012fdc:	e008      	b.n	8012ff0 <__ulp+0x3c>
 8012fde:	f1a2 0314 	sub.w	r3, r2, #20
 8012fe2:	2b1e      	cmp	r3, #30
 8012fe4:	bfd6      	itet	le
 8012fe6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012fea:	2201      	movgt	r2, #1
 8012fec:	40da      	lsrle	r2, r3
 8012fee:	2300      	movs	r3, #0
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	4610      	mov	r0, r2
 8012ff4:	ec41 0b10 	vmov	d0, r0, r1
 8012ff8:	b002      	add	sp, #8
 8012ffa:	4770      	bx	lr
 8012ffc:	7ff00000 	.word	0x7ff00000

08013000 <__b2d>:
 8013000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013004:	6906      	ldr	r6, [r0, #16]
 8013006:	f100 0814 	add.w	r8, r0, #20
 801300a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801300e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013012:	1f37      	subs	r7, r6, #4
 8013014:	4610      	mov	r0, r2
 8013016:	f7ff fd47 	bl	8012aa8 <__hi0bits>
 801301a:	f1c0 0320 	rsb	r3, r0, #32
 801301e:	280a      	cmp	r0, #10
 8013020:	600b      	str	r3, [r1, #0]
 8013022:	491d      	ldr	r1, [pc, #116]	@ (8013098 <__b2d+0x98>)
 8013024:	dc16      	bgt.n	8013054 <__b2d+0x54>
 8013026:	f1c0 0c0b 	rsb	ip, r0, #11
 801302a:	45b8      	cmp	r8, r7
 801302c:	f100 0015 	add.w	r0, r0, #21
 8013030:	fa22 f30c 	lsr.w	r3, r2, ip
 8013034:	fa02 f000 	lsl.w	r0, r2, r0
 8013038:	ea43 0501 	orr.w	r5, r3, r1
 801303c:	bf34      	ite	cc
 801303e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013042:	2300      	movcs	r3, #0
 8013044:	fa23 f30c 	lsr.w	r3, r3, ip
 8013048:	4303      	orrs	r3, r0
 801304a:	461c      	mov	r4, r3
 801304c:	ec45 4b10 	vmov	d0, r4, r5
 8013050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013054:	45b8      	cmp	r8, r7
 8013056:	bf3a      	itte	cc
 8013058:	f1a6 0708 	subcc.w	r7, r6, #8
 801305c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013060:	2300      	movcs	r3, #0
 8013062:	380b      	subs	r0, #11
 8013064:	d014      	beq.n	8013090 <__b2d+0x90>
 8013066:	f1c0 0120 	rsb	r1, r0, #32
 801306a:	4082      	lsls	r2, r0
 801306c:	4547      	cmp	r7, r8
 801306e:	fa23 f401 	lsr.w	r4, r3, r1
 8013072:	fa03 f300 	lsl.w	r3, r3, r0
 8013076:	ea42 0204 	orr.w	r2, r2, r4
 801307a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801307e:	bf8c      	ite	hi
 8013080:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013084:	2200      	movls	r2, #0
 8013086:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801308a:	40ca      	lsrs	r2, r1
 801308c:	4313      	orrs	r3, r2
 801308e:	e7dc      	b.n	801304a <__b2d+0x4a>
 8013090:	ea42 0501 	orr.w	r5, r2, r1
 8013094:	e7d9      	b.n	801304a <__b2d+0x4a>
 8013096:	bf00      	nop
 8013098:	3ff00000 	.word	0x3ff00000

0801309c <__d2b>:
 801309c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80130a0:	460f      	mov	r7, r1
 80130a2:	2101      	movs	r1, #1
 80130a4:	4616      	mov	r6, r2
 80130a6:	ec59 8b10 	vmov	r8, r9, d0
 80130aa:	f7ff fc09 	bl	80128c0 <_Balloc>
 80130ae:	4604      	mov	r4, r0
 80130b0:	b930      	cbnz	r0, 80130c0 <__d2b+0x24>
 80130b2:	4602      	mov	r2, r0
 80130b4:	4b23      	ldr	r3, [pc, #140]	@ (8013144 <__d2b+0xa8>)
 80130b6:	f240 310f 	movw	r1, #783	@ 0x30f
 80130ba:	4823      	ldr	r0, [pc, #140]	@ (8013148 <__d2b+0xac>)
 80130bc:	f001 fba4 	bl	8014808 <__assert_func>
 80130c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80130c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80130c8:	b10d      	cbz	r5, 80130ce <__d2b+0x32>
 80130ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80130ce:	9301      	str	r3, [sp, #4]
 80130d0:	f1b8 0300 	subs.w	r3, r8, #0
 80130d4:	d023      	beq.n	801311e <__d2b+0x82>
 80130d6:	4668      	mov	r0, sp
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	f7ff fd04 	bl	8012ae6 <__lo0bits>
 80130de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80130e2:	b1d0      	cbz	r0, 801311a <__d2b+0x7e>
 80130e4:	f1c0 0320 	rsb	r3, r0, #32
 80130e8:	fa02 f303 	lsl.w	r3, r2, r3
 80130ec:	40c2      	lsrs	r2, r0
 80130ee:	430b      	orrs	r3, r1
 80130f0:	9201      	str	r2, [sp, #4]
 80130f2:	6163      	str	r3, [r4, #20]
 80130f4:	9b01      	ldr	r3, [sp, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	61a3      	str	r3, [r4, #24]
 80130fa:	bf0c      	ite	eq
 80130fc:	2201      	moveq	r2, #1
 80130fe:	2202      	movne	r2, #2
 8013100:	6122      	str	r2, [r4, #16]
 8013102:	b1a5      	cbz	r5, 801312e <__d2b+0x92>
 8013104:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013108:	4405      	add	r5, r0
 801310a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801310e:	603d      	str	r5, [r7, #0]
 8013110:	6030      	str	r0, [r6, #0]
 8013112:	4620      	mov	r0, r4
 8013114:	b003      	add	sp, #12
 8013116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801311a:	6161      	str	r1, [r4, #20]
 801311c:	e7ea      	b.n	80130f4 <__d2b+0x58>
 801311e:	a801      	add	r0, sp, #4
 8013120:	f7ff fce1 	bl	8012ae6 <__lo0bits>
 8013124:	9b01      	ldr	r3, [sp, #4]
 8013126:	3020      	adds	r0, #32
 8013128:	2201      	movs	r2, #1
 801312a:	6163      	str	r3, [r4, #20]
 801312c:	e7e8      	b.n	8013100 <__d2b+0x64>
 801312e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013132:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013136:	6038      	str	r0, [r7, #0]
 8013138:	6918      	ldr	r0, [r3, #16]
 801313a:	f7ff fcb5 	bl	8012aa8 <__hi0bits>
 801313e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013142:	e7e5      	b.n	8013110 <__d2b+0x74>
 8013144:	08015495 	.word	0x08015495
 8013148:	080154a6 	.word	0x080154a6

0801314c <__ratio>:
 801314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013150:	b085      	sub	sp, #20
 8013152:	e9cd 1000 	strd	r1, r0, [sp]
 8013156:	a902      	add	r1, sp, #8
 8013158:	f7ff ff52 	bl	8013000 <__b2d>
 801315c:	a903      	add	r1, sp, #12
 801315e:	9800      	ldr	r0, [sp, #0]
 8013160:	ec55 4b10 	vmov	r4, r5, d0
 8013164:	f7ff ff4c 	bl	8013000 <__b2d>
 8013168:	9b01      	ldr	r3, [sp, #4]
 801316a:	462f      	mov	r7, r5
 801316c:	4620      	mov	r0, r4
 801316e:	6919      	ldr	r1, [r3, #16]
 8013170:	9b00      	ldr	r3, [sp, #0]
 8013172:	691b      	ldr	r3, [r3, #16]
 8013174:	1ac9      	subs	r1, r1, r3
 8013176:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801317a:	ec5b ab10 	vmov	sl, fp, d0
 801317e:	1a9b      	subs	r3, r3, r2
 8013180:	46d9      	mov	r9, fp
 8013182:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013186:	2b00      	cmp	r3, #0
 8013188:	bfcd      	iteet	gt
 801318a:	462a      	movgt	r2, r5
 801318c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013190:	465a      	movle	r2, fp
 8013192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013196:	bfd8      	it	le
 8013198:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801319c:	4652      	mov	r2, sl
 801319e:	4639      	mov	r1, r7
 80131a0:	464b      	mov	r3, r9
 80131a2:	f7ed fb57 	bl	8000854 <__aeabi_ddiv>
 80131a6:	ec41 0b10 	vmov	d0, r0, r1
 80131aa:	b005      	add	sp, #20
 80131ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080131b0 <__copybits>:
 80131b0:	3901      	subs	r1, #1
 80131b2:	f102 0314 	add.w	r3, r2, #20
 80131b6:	1149      	asrs	r1, r1, #5
 80131b8:	b570      	push	{r4, r5, r6, lr}
 80131ba:	3101      	adds	r1, #1
 80131bc:	6914      	ldr	r4, [r2, #16]
 80131be:	1f05      	subs	r5, r0, #4
 80131c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80131c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80131c8:	42a3      	cmp	r3, r4
 80131ca:	d30c      	bcc.n	80131e6 <__copybits+0x36>
 80131cc:	1aa3      	subs	r3, r4, r2
 80131ce:	3211      	adds	r2, #17
 80131d0:	3b11      	subs	r3, #17
 80131d2:	f023 0303 	bic.w	r3, r3, #3
 80131d6:	42a2      	cmp	r2, r4
 80131d8:	bf88      	it	hi
 80131da:	2300      	movhi	r3, #0
 80131dc:	4418      	add	r0, r3
 80131de:	2300      	movs	r3, #0
 80131e0:	4288      	cmp	r0, r1
 80131e2:	d305      	bcc.n	80131f0 <__copybits+0x40>
 80131e4:	bd70      	pop	{r4, r5, r6, pc}
 80131e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80131ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80131ee:	e7eb      	b.n	80131c8 <__copybits+0x18>
 80131f0:	f840 3b04 	str.w	r3, [r0], #4
 80131f4:	e7f4      	b.n	80131e0 <__copybits+0x30>

080131f6 <__any_on>:
 80131f6:	f100 0214 	add.w	r2, r0, #20
 80131fa:	114b      	asrs	r3, r1, #5
 80131fc:	6900      	ldr	r0, [r0, #16]
 80131fe:	4298      	cmp	r0, r3
 8013200:	b510      	push	{r4, lr}
 8013202:	db11      	blt.n	8013228 <__any_on+0x32>
 8013204:	dd0a      	ble.n	801321c <__any_on+0x26>
 8013206:	f011 011f 	ands.w	r1, r1, #31
 801320a:	d007      	beq.n	801321c <__any_on+0x26>
 801320c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013210:	fa24 f001 	lsr.w	r0, r4, r1
 8013214:	fa00 f101 	lsl.w	r1, r0, r1
 8013218:	428c      	cmp	r4, r1
 801321a:	d10b      	bne.n	8013234 <__any_on+0x3e>
 801321c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013220:	4293      	cmp	r3, r2
 8013222:	d803      	bhi.n	801322c <__any_on+0x36>
 8013224:	2000      	movs	r0, #0
 8013226:	bd10      	pop	{r4, pc}
 8013228:	4603      	mov	r3, r0
 801322a:	e7f7      	b.n	801321c <__any_on+0x26>
 801322c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013230:	2900      	cmp	r1, #0
 8013232:	d0f5      	beq.n	8013220 <__any_on+0x2a>
 8013234:	2001      	movs	r0, #1
 8013236:	e7f6      	b.n	8013226 <__any_on+0x30>

08013238 <sulp>:
 8013238:	b570      	push	{r4, r5, r6, lr}
 801323a:	4604      	mov	r4, r0
 801323c:	460d      	mov	r5, r1
 801323e:	4616      	mov	r6, r2
 8013240:	ec45 4b10 	vmov	d0, r4, r5
 8013244:	f7ff feb6 	bl	8012fb4 <__ulp>
 8013248:	ec51 0b10 	vmov	r0, r1, d0
 801324c:	b17e      	cbz	r6, 801326e <sulp+0x36>
 801324e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013252:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013256:	2b00      	cmp	r3, #0
 8013258:	dd09      	ble.n	801326e <sulp+0x36>
 801325a:	051b      	lsls	r3, r3, #20
 801325c:	2400      	movs	r4, #0
 801325e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013262:	4622      	mov	r2, r4
 8013264:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013268:	462b      	mov	r3, r5
 801326a:	f7ed f9c9 	bl	8000600 <__aeabi_dmul>
 801326e:	ec41 0b10 	vmov	d0, r0, r1
 8013272:	bd70      	pop	{r4, r5, r6, pc}
 8013274:	0000      	movs	r0, r0
	...

08013278 <_strtod_l>:
 8013278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	b09f      	sub	sp, #124	@ 0x7c
 801327e:	460c      	mov	r4, r1
 8013280:	f04f 0a00 	mov.w	sl, #0
 8013284:	f04f 0b00 	mov.w	fp, #0
 8013288:	9217      	str	r2, [sp, #92]	@ 0x5c
 801328a:	2200      	movs	r2, #0
 801328c:	9005      	str	r0, [sp, #20]
 801328e:	921a      	str	r2, [sp, #104]	@ 0x68
 8013290:	460a      	mov	r2, r1
 8013292:	9219      	str	r2, [sp, #100]	@ 0x64
 8013294:	7811      	ldrb	r1, [r2, #0]
 8013296:	292b      	cmp	r1, #43	@ 0x2b
 8013298:	d04a      	beq.n	8013330 <_strtod_l+0xb8>
 801329a:	d838      	bhi.n	801330e <_strtod_l+0x96>
 801329c:	290d      	cmp	r1, #13
 801329e:	d832      	bhi.n	8013306 <_strtod_l+0x8e>
 80132a0:	2908      	cmp	r1, #8
 80132a2:	d832      	bhi.n	801330a <_strtod_l+0x92>
 80132a4:	2900      	cmp	r1, #0
 80132a6:	d03b      	beq.n	8013320 <_strtod_l+0xa8>
 80132a8:	2200      	movs	r2, #0
 80132aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80132ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80132ae:	782a      	ldrb	r2, [r5, #0]
 80132b0:	2a30      	cmp	r2, #48	@ 0x30
 80132b2:	f040 80b3 	bne.w	801341c <_strtod_l+0x1a4>
 80132b6:	786a      	ldrb	r2, [r5, #1]
 80132b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80132bc:	2a58      	cmp	r2, #88	@ 0x58
 80132be:	d16e      	bne.n	801339e <_strtod_l+0x126>
 80132c0:	9302      	str	r3, [sp, #8]
 80132c2:	a919      	add	r1, sp, #100	@ 0x64
 80132c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132c6:	4a90      	ldr	r2, [pc, #576]	@ (8013508 <_strtod_l+0x290>)
 80132c8:	9301      	str	r3, [sp, #4]
 80132ca:	ab1a      	add	r3, sp, #104	@ 0x68
 80132cc:	9805      	ldr	r0, [sp, #20]
 80132ce:	9300      	str	r3, [sp, #0]
 80132d0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80132d2:	f001 fb31 	bl	8014938 <__gethex>
 80132d6:	f010 060f 	ands.w	r6, r0, #15
 80132da:	4604      	mov	r4, r0
 80132dc:	d005      	beq.n	80132ea <_strtod_l+0x72>
 80132de:	2e06      	cmp	r6, #6
 80132e0:	d128      	bne.n	8013334 <_strtod_l+0xbc>
 80132e2:	3501      	adds	r5, #1
 80132e4:	2300      	movs	r3, #0
 80132e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80132e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80132ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f040 858e 	bne.w	8013e0e <_strtod_l+0xb96>
 80132f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132f4:	b1cb      	cbz	r3, 801332a <_strtod_l+0xb2>
 80132f6:	4652      	mov	r2, sl
 80132f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80132fc:	ec43 2b10 	vmov	d0, r2, r3
 8013300:	b01f      	add	sp, #124	@ 0x7c
 8013302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013306:	2920      	cmp	r1, #32
 8013308:	d1ce      	bne.n	80132a8 <_strtod_l+0x30>
 801330a:	3201      	adds	r2, #1
 801330c:	e7c1      	b.n	8013292 <_strtod_l+0x1a>
 801330e:	292d      	cmp	r1, #45	@ 0x2d
 8013310:	d1ca      	bne.n	80132a8 <_strtod_l+0x30>
 8013312:	2101      	movs	r1, #1
 8013314:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013316:	1c51      	adds	r1, r2, #1
 8013318:	9119      	str	r1, [sp, #100]	@ 0x64
 801331a:	7852      	ldrb	r2, [r2, #1]
 801331c:	2a00      	cmp	r2, #0
 801331e:	d1c5      	bne.n	80132ac <_strtod_l+0x34>
 8013320:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013322:	9419      	str	r4, [sp, #100]	@ 0x64
 8013324:	2b00      	cmp	r3, #0
 8013326:	f040 8570 	bne.w	8013e0a <_strtod_l+0xb92>
 801332a:	4652      	mov	r2, sl
 801332c:	465b      	mov	r3, fp
 801332e:	e7e5      	b.n	80132fc <_strtod_l+0x84>
 8013330:	2100      	movs	r1, #0
 8013332:	e7ef      	b.n	8013314 <_strtod_l+0x9c>
 8013334:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013336:	b13a      	cbz	r2, 8013348 <_strtod_l+0xd0>
 8013338:	2135      	movs	r1, #53	@ 0x35
 801333a:	a81c      	add	r0, sp, #112	@ 0x70
 801333c:	f7ff ff38 	bl	80131b0 <__copybits>
 8013340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013342:	9805      	ldr	r0, [sp, #20]
 8013344:	f7ff fafc 	bl	8012940 <_Bfree>
 8013348:	3e01      	subs	r6, #1
 801334a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801334c:	2e04      	cmp	r6, #4
 801334e:	d806      	bhi.n	801335e <_strtod_l+0xe6>
 8013350:	e8df f006 	tbb	[pc, r6]
 8013354:	201d0314 	.word	0x201d0314
 8013358:	14          	.byte	0x14
 8013359:	00          	.byte	0x00
 801335a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801335e:	05e1      	lsls	r1, r4, #23
 8013360:	bf48      	it	mi
 8013362:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801336a:	0d1b      	lsrs	r3, r3, #20
 801336c:	051b      	lsls	r3, r3, #20
 801336e:	2b00      	cmp	r3, #0
 8013370:	d1bb      	bne.n	80132ea <_strtod_l+0x72>
 8013372:	f7fe fb0f 	bl	8011994 <__errno>
 8013376:	2322      	movs	r3, #34	@ 0x22
 8013378:	6003      	str	r3, [r0, #0]
 801337a:	e7b6      	b.n	80132ea <_strtod_l+0x72>
 801337c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013380:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013384:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013388:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801338c:	e7e7      	b.n	801335e <_strtod_l+0xe6>
 801338e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013510 <_strtod_l+0x298>
 8013392:	e7e4      	b.n	801335e <_strtod_l+0xe6>
 8013394:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013398:	f04f 3aff 	mov.w	sl, #4294967295
 801339c:	e7df      	b.n	801335e <_strtod_l+0xe6>
 801339e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80133a0:	1c5a      	adds	r2, r3, #1
 80133a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80133a4:	785b      	ldrb	r3, [r3, #1]
 80133a6:	2b30      	cmp	r3, #48	@ 0x30
 80133a8:	d0f9      	beq.n	801339e <_strtod_l+0x126>
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d09d      	beq.n	80132ea <_strtod_l+0x72>
 80133ae:	2301      	movs	r3, #1
 80133b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80133b2:	220a      	movs	r2, #10
 80133b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80133b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80133b8:	2300      	movs	r3, #0
 80133ba:	461f      	mov	r7, r3
 80133bc:	9308      	str	r3, [sp, #32]
 80133be:	930a      	str	r3, [sp, #40]	@ 0x28
 80133c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80133c2:	7805      	ldrb	r5, [r0, #0]
 80133c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80133c8:	b2d9      	uxtb	r1, r3
 80133ca:	2909      	cmp	r1, #9
 80133cc:	d928      	bls.n	8013420 <_strtod_l+0x1a8>
 80133ce:	2201      	movs	r2, #1
 80133d0:	494e      	ldr	r1, [pc, #312]	@ (801350c <_strtod_l+0x294>)
 80133d2:	f001 f9df 	bl	8014794 <strncmp>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d033      	beq.n	8013442 <_strtod_l+0x1ca>
 80133da:	2000      	movs	r0, #0
 80133dc:	462a      	mov	r2, r5
 80133de:	463d      	mov	r5, r7
 80133e0:	4681      	mov	r9, r0
 80133e2:	4603      	mov	r3, r0
 80133e4:	2a65      	cmp	r2, #101	@ 0x65
 80133e6:	d001      	beq.n	80133ec <_strtod_l+0x174>
 80133e8:	2a45      	cmp	r2, #69	@ 0x45
 80133ea:	d114      	bne.n	8013416 <_strtod_l+0x19e>
 80133ec:	b91d      	cbnz	r5, 80133f6 <_strtod_l+0x17e>
 80133ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133f0:	4302      	orrs	r2, r0
 80133f2:	d095      	beq.n	8013320 <_strtod_l+0xa8>
 80133f4:	2500      	movs	r5, #0
 80133f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80133f8:	1c62      	adds	r2, r4, #1
 80133fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80133fc:	7862      	ldrb	r2, [r4, #1]
 80133fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8013400:	d078      	beq.n	80134f4 <_strtod_l+0x27c>
 8013402:	2a2d      	cmp	r2, #45	@ 0x2d
 8013404:	d07c      	beq.n	8013500 <_strtod_l+0x288>
 8013406:	f04f 0c00 	mov.w	ip, #0
 801340a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801340e:	2909      	cmp	r1, #9
 8013410:	f240 8084 	bls.w	801351c <_strtod_l+0x2a4>
 8013414:	9419      	str	r4, [sp, #100]	@ 0x64
 8013416:	f04f 0800 	mov.w	r8, #0
 801341a:	e0a4      	b.n	8013566 <_strtod_l+0x2ee>
 801341c:	2300      	movs	r3, #0
 801341e:	e7c7      	b.n	80133b0 <_strtod_l+0x138>
 8013420:	2f08      	cmp	r7, #8
 8013422:	f100 0001 	add.w	r0, r0, #1
 8013426:	f107 0701 	add.w	r7, r7, #1
 801342a:	bfd5      	itete	le
 801342c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801342e:	9908      	ldrgt	r1, [sp, #32]
 8013430:	fb02 3301 	mlale	r3, r2, r1, r3
 8013434:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013438:	bfd4      	ite	le
 801343a:	930a      	strle	r3, [sp, #40]	@ 0x28
 801343c:	9308      	strgt	r3, [sp, #32]
 801343e:	9019      	str	r0, [sp, #100]	@ 0x64
 8013440:	e7be      	b.n	80133c0 <_strtod_l+0x148>
 8013442:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013444:	1c5a      	adds	r2, r3, #1
 8013446:	9219      	str	r2, [sp, #100]	@ 0x64
 8013448:	785a      	ldrb	r2, [r3, #1]
 801344a:	b37f      	cbz	r7, 80134ac <_strtod_l+0x234>
 801344c:	4681      	mov	r9, r0
 801344e:	463d      	mov	r5, r7
 8013450:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013454:	2b09      	cmp	r3, #9
 8013456:	d912      	bls.n	801347e <_strtod_l+0x206>
 8013458:	2301      	movs	r3, #1
 801345a:	e7c3      	b.n	80133e4 <_strtod_l+0x16c>
 801345c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801345e:	3001      	adds	r0, #1
 8013460:	1c5a      	adds	r2, r3, #1
 8013462:	9219      	str	r2, [sp, #100]	@ 0x64
 8013464:	785a      	ldrb	r2, [r3, #1]
 8013466:	2a30      	cmp	r2, #48	@ 0x30
 8013468:	d0f8      	beq.n	801345c <_strtod_l+0x1e4>
 801346a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801346e:	2b08      	cmp	r3, #8
 8013470:	f200 84d2 	bhi.w	8013e18 <_strtod_l+0xba0>
 8013474:	4681      	mov	r9, r0
 8013476:	2000      	movs	r0, #0
 8013478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801347a:	4605      	mov	r5, r0
 801347c:	930c      	str	r3, [sp, #48]	@ 0x30
 801347e:	3a30      	subs	r2, #48	@ 0x30
 8013480:	f100 0301 	add.w	r3, r0, #1
 8013484:	d02a      	beq.n	80134dc <_strtod_l+0x264>
 8013486:	4499      	add	r9, r3
 8013488:	eb00 0c05 	add.w	ip, r0, r5
 801348c:	462b      	mov	r3, r5
 801348e:	210a      	movs	r1, #10
 8013490:	4563      	cmp	r3, ip
 8013492:	d10d      	bne.n	80134b0 <_strtod_l+0x238>
 8013494:	1c69      	adds	r1, r5, #1
 8013496:	4401      	add	r1, r0
 8013498:	4428      	add	r0, r5
 801349a:	2808      	cmp	r0, #8
 801349c:	dc16      	bgt.n	80134cc <_strtod_l+0x254>
 801349e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80134a0:	230a      	movs	r3, #10
 80134a2:	fb03 2300 	mla	r3, r3, r0, r2
 80134a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80134a8:	2300      	movs	r3, #0
 80134aa:	e018      	b.n	80134de <_strtod_l+0x266>
 80134ac:	4638      	mov	r0, r7
 80134ae:	e7da      	b.n	8013466 <_strtod_l+0x1ee>
 80134b0:	2b08      	cmp	r3, #8
 80134b2:	f103 0301 	add.w	r3, r3, #1
 80134b6:	dc03      	bgt.n	80134c0 <_strtod_l+0x248>
 80134b8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80134ba:	434e      	muls	r6, r1
 80134bc:	960a      	str	r6, [sp, #40]	@ 0x28
 80134be:	e7e7      	b.n	8013490 <_strtod_l+0x218>
 80134c0:	2b10      	cmp	r3, #16
 80134c2:	bfde      	ittt	le
 80134c4:	9e08      	ldrle	r6, [sp, #32]
 80134c6:	434e      	mulle	r6, r1
 80134c8:	9608      	strle	r6, [sp, #32]
 80134ca:	e7e1      	b.n	8013490 <_strtod_l+0x218>
 80134cc:	280f      	cmp	r0, #15
 80134ce:	dceb      	bgt.n	80134a8 <_strtod_l+0x230>
 80134d0:	9808      	ldr	r0, [sp, #32]
 80134d2:	230a      	movs	r3, #10
 80134d4:	fb03 2300 	mla	r3, r3, r0, r2
 80134d8:	9308      	str	r3, [sp, #32]
 80134da:	e7e5      	b.n	80134a8 <_strtod_l+0x230>
 80134dc:	4629      	mov	r1, r5
 80134de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80134e0:	460d      	mov	r5, r1
 80134e2:	1c50      	adds	r0, r2, #1
 80134e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80134e6:	4618      	mov	r0, r3
 80134e8:	7852      	ldrb	r2, [r2, #1]
 80134ea:	e7b1      	b.n	8013450 <_strtod_l+0x1d8>
 80134ec:	f04f 0900 	mov.w	r9, #0
 80134f0:	2301      	movs	r3, #1
 80134f2:	e77c      	b.n	80133ee <_strtod_l+0x176>
 80134f4:	f04f 0c00 	mov.w	ip, #0
 80134f8:	1ca2      	adds	r2, r4, #2
 80134fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80134fc:	78a2      	ldrb	r2, [r4, #2]
 80134fe:	e784      	b.n	801340a <_strtod_l+0x192>
 8013500:	f04f 0c01 	mov.w	ip, #1
 8013504:	e7f8      	b.n	80134f8 <_strtod_l+0x280>
 8013506:	bf00      	nop
 8013508:	08015618 	.word	0x08015618
 801350c:	08015600 	.word	0x08015600
 8013510:	7ff00000 	.word	0x7ff00000
 8013514:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013516:	1c51      	adds	r1, r2, #1
 8013518:	9119      	str	r1, [sp, #100]	@ 0x64
 801351a:	7852      	ldrb	r2, [r2, #1]
 801351c:	2a30      	cmp	r2, #48	@ 0x30
 801351e:	d0f9      	beq.n	8013514 <_strtod_l+0x29c>
 8013520:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013524:	2908      	cmp	r1, #8
 8013526:	f63f af76 	bhi.w	8013416 <_strtod_l+0x19e>
 801352a:	3a30      	subs	r2, #48	@ 0x30
 801352c:	f04f 080a 	mov.w	r8, #10
 8013530:	920e      	str	r2, [sp, #56]	@ 0x38
 8013532:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013534:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013536:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013538:	1c56      	adds	r6, r2, #1
 801353a:	9619      	str	r6, [sp, #100]	@ 0x64
 801353c:	7852      	ldrb	r2, [r2, #1]
 801353e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013542:	f1be 0f09 	cmp.w	lr, #9
 8013546:	d939      	bls.n	80135bc <_strtod_l+0x344>
 8013548:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801354a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801354e:	1a76      	subs	r6, r6, r1
 8013550:	2e08      	cmp	r6, #8
 8013552:	dc03      	bgt.n	801355c <_strtod_l+0x2e4>
 8013554:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013556:	4588      	cmp	r8, r1
 8013558:	bfa8      	it	ge
 801355a:	4688      	movge	r8, r1
 801355c:	f1bc 0f00 	cmp.w	ip, #0
 8013560:	d001      	beq.n	8013566 <_strtod_l+0x2ee>
 8013562:	f1c8 0800 	rsb	r8, r8, #0
 8013566:	2d00      	cmp	r5, #0
 8013568:	d14e      	bne.n	8013608 <_strtod_l+0x390>
 801356a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801356c:	4308      	orrs	r0, r1
 801356e:	f47f aebc 	bne.w	80132ea <_strtod_l+0x72>
 8013572:	2b00      	cmp	r3, #0
 8013574:	f47f aed4 	bne.w	8013320 <_strtod_l+0xa8>
 8013578:	2a69      	cmp	r2, #105	@ 0x69
 801357a:	d028      	beq.n	80135ce <_strtod_l+0x356>
 801357c:	dc25      	bgt.n	80135ca <_strtod_l+0x352>
 801357e:	2a49      	cmp	r2, #73	@ 0x49
 8013580:	d025      	beq.n	80135ce <_strtod_l+0x356>
 8013582:	2a4e      	cmp	r2, #78	@ 0x4e
 8013584:	f47f aecc 	bne.w	8013320 <_strtod_l+0xa8>
 8013588:	499b      	ldr	r1, [pc, #620]	@ (80137f8 <_strtod_l+0x580>)
 801358a:	a819      	add	r0, sp, #100	@ 0x64
 801358c:	f001 fbf4 	bl	8014d78 <__match>
 8013590:	2800      	cmp	r0, #0
 8013592:	f43f aec5 	beq.w	8013320 <_strtod_l+0xa8>
 8013596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	2b28      	cmp	r3, #40	@ 0x28
 801359c:	d12e      	bne.n	80135fc <_strtod_l+0x384>
 801359e:	aa1c      	add	r2, sp, #112	@ 0x70
 80135a0:	4996      	ldr	r1, [pc, #600]	@ (80137fc <_strtod_l+0x584>)
 80135a2:	a819      	add	r0, sp, #100	@ 0x64
 80135a4:	f001 fbfc 	bl	8014da0 <__hexnan>
 80135a8:	2805      	cmp	r0, #5
 80135aa:	d127      	bne.n	80135fc <_strtod_l+0x384>
 80135ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80135ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80135b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80135b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80135ba:	e696      	b.n	80132ea <_strtod_l+0x72>
 80135bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80135be:	fb08 2101 	mla	r1, r8, r1, r2
 80135c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80135c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80135c8:	e7b5      	b.n	8013536 <_strtod_l+0x2be>
 80135ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80135cc:	e7da      	b.n	8013584 <_strtod_l+0x30c>
 80135ce:	498c      	ldr	r1, [pc, #560]	@ (8013800 <_strtod_l+0x588>)
 80135d0:	a819      	add	r0, sp, #100	@ 0x64
 80135d2:	f001 fbd1 	bl	8014d78 <__match>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	f43f aea2 	beq.w	8013320 <_strtod_l+0xa8>
 80135dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80135de:	a819      	add	r0, sp, #100	@ 0x64
 80135e0:	4988      	ldr	r1, [pc, #544]	@ (8013804 <_strtod_l+0x58c>)
 80135e2:	3b01      	subs	r3, #1
 80135e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80135e6:	f001 fbc7 	bl	8014d78 <__match>
 80135ea:	b910      	cbnz	r0, 80135f2 <_strtod_l+0x37a>
 80135ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80135ee:	3301      	adds	r3, #1
 80135f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80135f2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013814 <_strtod_l+0x59c>
 80135f6:	f04f 0a00 	mov.w	sl, #0
 80135fa:	e676      	b.n	80132ea <_strtod_l+0x72>
 80135fc:	4882      	ldr	r0, [pc, #520]	@ (8013808 <_strtod_l+0x590>)
 80135fe:	f001 f8fb 	bl	80147f8 <nan>
 8013602:	ec5b ab10 	vmov	sl, fp, d0
 8013606:	e670      	b.n	80132ea <_strtod_l+0x72>
 8013608:	eba8 0309 	sub.w	r3, r8, r9
 801360c:	2f00      	cmp	r7, #0
 801360e:	bf08      	it	eq
 8013610:	462f      	moveq	r7, r5
 8013612:	2d10      	cmp	r5, #16
 8013614:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013616:	462c      	mov	r4, r5
 8013618:	9309      	str	r3, [sp, #36]	@ 0x24
 801361a:	bfa8      	it	ge
 801361c:	2410      	movge	r4, #16
 801361e:	f7ec ff75 	bl	800050c <__aeabi_ui2d>
 8013622:	2d09      	cmp	r5, #9
 8013624:	4682      	mov	sl, r0
 8013626:	468b      	mov	fp, r1
 8013628:	dc13      	bgt.n	8013652 <_strtod_l+0x3da>
 801362a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801362c:	2b00      	cmp	r3, #0
 801362e:	f43f ae5c 	beq.w	80132ea <_strtod_l+0x72>
 8013632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013634:	dd78      	ble.n	8013728 <_strtod_l+0x4b0>
 8013636:	2b16      	cmp	r3, #22
 8013638:	dc5f      	bgt.n	80136fa <_strtod_l+0x482>
 801363a:	4974      	ldr	r1, [pc, #464]	@ (801380c <_strtod_l+0x594>)
 801363c:	4652      	mov	r2, sl
 801363e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013642:	465b      	mov	r3, fp
 8013644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013648:	f7ec ffda 	bl	8000600 <__aeabi_dmul>
 801364c:	4682      	mov	sl, r0
 801364e:	468b      	mov	fp, r1
 8013650:	e64b      	b.n	80132ea <_strtod_l+0x72>
 8013652:	4b6e      	ldr	r3, [pc, #440]	@ (801380c <_strtod_l+0x594>)
 8013654:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013658:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801365c:	f7ec ffd0 	bl	8000600 <__aeabi_dmul>
 8013660:	4682      	mov	sl, r0
 8013662:	468b      	mov	fp, r1
 8013664:	9808      	ldr	r0, [sp, #32]
 8013666:	f7ec ff51 	bl	800050c <__aeabi_ui2d>
 801366a:	4602      	mov	r2, r0
 801366c:	460b      	mov	r3, r1
 801366e:	4650      	mov	r0, sl
 8013670:	4659      	mov	r1, fp
 8013672:	f7ec fe0f 	bl	8000294 <__adddf3>
 8013676:	2d0f      	cmp	r5, #15
 8013678:	4682      	mov	sl, r0
 801367a:	468b      	mov	fp, r1
 801367c:	ddd5      	ble.n	801362a <_strtod_l+0x3b2>
 801367e:	1b2c      	subs	r4, r5, r4
 8013680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013682:	441c      	add	r4, r3
 8013684:	2c00      	cmp	r4, #0
 8013686:	f340 8096 	ble.w	80137b6 <_strtod_l+0x53e>
 801368a:	f014 030f 	ands.w	r3, r4, #15
 801368e:	d00a      	beq.n	80136a6 <_strtod_l+0x42e>
 8013690:	495e      	ldr	r1, [pc, #376]	@ (801380c <_strtod_l+0x594>)
 8013692:	4652      	mov	r2, sl
 8013694:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013698:	465b      	mov	r3, fp
 801369a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801369e:	f7ec ffaf 	bl	8000600 <__aeabi_dmul>
 80136a2:	4682      	mov	sl, r0
 80136a4:	468b      	mov	fp, r1
 80136a6:	f034 040f 	bics.w	r4, r4, #15
 80136aa:	d073      	beq.n	8013794 <_strtod_l+0x51c>
 80136ac:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80136b0:	dd48      	ble.n	8013744 <_strtod_l+0x4cc>
 80136b2:	2400      	movs	r4, #0
 80136b4:	46a0      	mov	r8, r4
 80136b6:	46a1      	mov	r9, r4
 80136b8:	940a      	str	r4, [sp, #40]	@ 0x28
 80136ba:	2322      	movs	r3, #34	@ 0x22
 80136bc:	9a05      	ldr	r2, [sp, #20]
 80136be:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013814 <_strtod_l+0x59c>
 80136c2:	f04f 0a00 	mov.w	sl, #0
 80136c6:	6013      	str	r3, [r2, #0]
 80136c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f43f ae0d 	beq.w	80132ea <_strtod_l+0x72>
 80136d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136d2:	9805      	ldr	r0, [sp, #20]
 80136d4:	f7ff f934 	bl	8012940 <_Bfree>
 80136d8:	4649      	mov	r1, r9
 80136da:	9805      	ldr	r0, [sp, #20]
 80136dc:	f7ff f930 	bl	8012940 <_Bfree>
 80136e0:	4641      	mov	r1, r8
 80136e2:	9805      	ldr	r0, [sp, #20]
 80136e4:	f7ff f92c 	bl	8012940 <_Bfree>
 80136e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80136ea:	9805      	ldr	r0, [sp, #20]
 80136ec:	f7ff f928 	bl	8012940 <_Bfree>
 80136f0:	4621      	mov	r1, r4
 80136f2:	9805      	ldr	r0, [sp, #20]
 80136f4:	f7ff f924 	bl	8012940 <_Bfree>
 80136f8:	e5f7      	b.n	80132ea <_strtod_l+0x72>
 80136fa:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80136fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013700:	4293      	cmp	r3, r2
 8013702:	dbbc      	blt.n	801367e <_strtod_l+0x406>
 8013704:	f1c5 050f 	rsb	r5, r5, #15
 8013708:	4c40      	ldr	r4, [pc, #256]	@ (801380c <_strtod_l+0x594>)
 801370a:	4652      	mov	r2, sl
 801370c:	465b      	mov	r3, fp
 801370e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013716:	f7ec ff73 	bl	8000600 <__aeabi_dmul>
 801371a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801371c:	1b5d      	subs	r5, r3, r5
 801371e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013722:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013726:	e78f      	b.n	8013648 <_strtod_l+0x3d0>
 8013728:	3316      	adds	r3, #22
 801372a:	dba8      	blt.n	801367e <_strtod_l+0x406>
 801372c:	eba9 0808 	sub.w	r8, r9, r8
 8013730:	4b36      	ldr	r3, [pc, #216]	@ (801380c <_strtod_l+0x594>)
 8013732:	4650      	mov	r0, sl
 8013734:	4659      	mov	r1, fp
 8013736:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801373a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801373e:	f7ed f889 	bl	8000854 <__aeabi_ddiv>
 8013742:	e783      	b.n	801364c <_strtod_l+0x3d4>
 8013744:	4b32      	ldr	r3, [pc, #200]	@ (8013810 <_strtod_l+0x598>)
 8013746:	1124      	asrs	r4, r4, #4
 8013748:	4650      	mov	r0, sl
 801374a:	4659      	mov	r1, fp
 801374c:	9308      	str	r3, [sp, #32]
 801374e:	2300      	movs	r3, #0
 8013750:	461e      	mov	r6, r3
 8013752:	2c01      	cmp	r4, #1
 8013754:	dc21      	bgt.n	801379a <_strtod_l+0x522>
 8013756:	b10b      	cbz	r3, 801375c <_strtod_l+0x4e4>
 8013758:	4682      	mov	sl, r0
 801375a:	468b      	mov	fp, r1
 801375c:	492c      	ldr	r1, [pc, #176]	@ (8013810 <_strtod_l+0x598>)
 801375e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013762:	4652      	mov	r2, sl
 8013764:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013768:	465b      	mov	r3, fp
 801376a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801376e:	f7ec ff47 	bl	8000600 <__aeabi_dmul>
 8013772:	4b28      	ldr	r3, [pc, #160]	@ (8013814 <_strtod_l+0x59c>)
 8013774:	460a      	mov	r2, r1
 8013776:	4682      	mov	sl, r0
 8013778:	400b      	ands	r3, r1
 801377a:	4927      	ldr	r1, [pc, #156]	@ (8013818 <_strtod_l+0x5a0>)
 801377c:	428b      	cmp	r3, r1
 801377e:	d898      	bhi.n	80136b2 <_strtod_l+0x43a>
 8013780:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013784:	428b      	cmp	r3, r1
 8013786:	bf86      	itte	hi
 8013788:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801381c <_strtod_l+0x5a4>
 801378c:	f04f 3aff 	movhi.w	sl, #4294967295
 8013790:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013794:	2300      	movs	r3, #0
 8013796:	9308      	str	r3, [sp, #32]
 8013798:	e07a      	b.n	8013890 <_strtod_l+0x618>
 801379a:	07e2      	lsls	r2, r4, #31
 801379c:	d505      	bpl.n	80137aa <_strtod_l+0x532>
 801379e:	9b08      	ldr	r3, [sp, #32]
 80137a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a4:	f7ec ff2c 	bl	8000600 <__aeabi_dmul>
 80137a8:	2301      	movs	r3, #1
 80137aa:	9a08      	ldr	r2, [sp, #32]
 80137ac:	3601      	adds	r6, #1
 80137ae:	1064      	asrs	r4, r4, #1
 80137b0:	3208      	adds	r2, #8
 80137b2:	9208      	str	r2, [sp, #32]
 80137b4:	e7cd      	b.n	8013752 <_strtod_l+0x4da>
 80137b6:	d0ed      	beq.n	8013794 <_strtod_l+0x51c>
 80137b8:	4264      	negs	r4, r4
 80137ba:	f014 020f 	ands.w	r2, r4, #15
 80137be:	d00a      	beq.n	80137d6 <_strtod_l+0x55e>
 80137c0:	4b12      	ldr	r3, [pc, #72]	@ (801380c <_strtod_l+0x594>)
 80137c2:	4650      	mov	r0, sl
 80137c4:	4659      	mov	r1, fp
 80137c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80137ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ce:	f7ed f841 	bl	8000854 <__aeabi_ddiv>
 80137d2:	4682      	mov	sl, r0
 80137d4:	468b      	mov	fp, r1
 80137d6:	1124      	asrs	r4, r4, #4
 80137d8:	d0dc      	beq.n	8013794 <_strtod_l+0x51c>
 80137da:	2c1f      	cmp	r4, #31
 80137dc:	dd20      	ble.n	8013820 <_strtod_l+0x5a8>
 80137de:	2400      	movs	r4, #0
 80137e0:	46a0      	mov	r8, r4
 80137e2:	46a1      	mov	r9, r4
 80137e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80137e6:	2322      	movs	r3, #34	@ 0x22
 80137e8:	9a05      	ldr	r2, [sp, #20]
 80137ea:	f04f 0a00 	mov.w	sl, #0
 80137ee:	f04f 0b00 	mov.w	fp, #0
 80137f2:	6013      	str	r3, [r2, #0]
 80137f4:	e768      	b.n	80136c8 <_strtod_l+0x450>
 80137f6:	bf00      	nop
 80137f8:	080153ed 	.word	0x080153ed
 80137fc:	08015604 	.word	0x08015604
 8013800:	080153e5 	.word	0x080153e5
 8013804:	0801541c 	.word	0x0801541c
 8013808:	080157ad 	.word	0x080157ad
 801380c:	08015538 	.word	0x08015538
 8013810:	08015510 	.word	0x08015510
 8013814:	7ff00000 	.word	0x7ff00000
 8013818:	7ca00000 	.word	0x7ca00000
 801381c:	7fefffff 	.word	0x7fefffff
 8013820:	f014 0310 	ands.w	r3, r4, #16
 8013824:	4650      	mov	r0, sl
 8013826:	4659      	mov	r1, fp
 8013828:	4ea9      	ldr	r6, [pc, #676]	@ (8013ad0 <_strtod_l+0x858>)
 801382a:	bf18      	it	ne
 801382c:	236a      	movne	r3, #106	@ 0x6a
 801382e:	9308      	str	r3, [sp, #32]
 8013830:	2300      	movs	r3, #0
 8013832:	07e2      	lsls	r2, r4, #31
 8013834:	d504      	bpl.n	8013840 <_strtod_l+0x5c8>
 8013836:	e9d6 2300 	ldrd	r2, r3, [r6]
 801383a:	f7ec fee1 	bl	8000600 <__aeabi_dmul>
 801383e:	2301      	movs	r3, #1
 8013840:	1064      	asrs	r4, r4, #1
 8013842:	f106 0608 	add.w	r6, r6, #8
 8013846:	d1f4      	bne.n	8013832 <_strtod_l+0x5ba>
 8013848:	b10b      	cbz	r3, 801384e <_strtod_l+0x5d6>
 801384a:	4682      	mov	sl, r0
 801384c:	468b      	mov	fp, r1
 801384e:	9b08      	ldr	r3, [sp, #32]
 8013850:	b1b3      	cbz	r3, 8013880 <_strtod_l+0x608>
 8013852:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013856:	4659      	mov	r1, fp
 8013858:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801385c:	2b00      	cmp	r3, #0
 801385e:	dd0f      	ble.n	8013880 <_strtod_l+0x608>
 8013860:	2b1f      	cmp	r3, #31
 8013862:	dd55      	ble.n	8013910 <_strtod_l+0x698>
 8013864:	2b34      	cmp	r3, #52	@ 0x34
 8013866:	f04f 0a00 	mov.w	sl, #0
 801386a:	bfdb      	ittet	le
 801386c:	f04f 33ff 	movle.w	r3, #4294967295
 8013870:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013874:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013878:	4093      	lslle	r3, r2
 801387a:	bfd8      	it	le
 801387c:	ea03 0b01 	andle.w	fp, r3, r1
 8013880:	2200      	movs	r2, #0
 8013882:	2300      	movs	r3, #0
 8013884:	4650      	mov	r0, sl
 8013886:	4659      	mov	r1, fp
 8013888:	f7ed f922 	bl	8000ad0 <__aeabi_dcmpeq>
 801388c:	2800      	cmp	r0, #0
 801388e:	d1a6      	bne.n	80137de <_strtod_l+0x566>
 8013890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013892:	463a      	mov	r2, r7
 8013894:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	462b      	mov	r3, r5
 801389a:	9805      	ldr	r0, [sp, #20]
 801389c:	f7ff f8ba 	bl	8012a14 <__s2b>
 80138a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80138a2:	2800      	cmp	r0, #0
 80138a4:	f43f af05 	beq.w	80136b2 <_strtod_l+0x43a>
 80138a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138aa:	eba9 0308 	sub.w	r3, r9, r8
 80138ae:	2400      	movs	r4, #0
 80138b0:	2a00      	cmp	r2, #0
 80138b2:	46a0      	mov	r8, r4
 80138b4:	bfa8      	it	ge
 80138b6:	2300      	movge	r3, #0
 80138b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80138ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80138be:	9316      	str	r3, [sp, #88]	@ 0x58
 80138c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138c2:	9805      	ldr	r0, [sp, #20]
 80138c4:	6859      	ldr	r1, [r3, #4]
 80138c6:	f7fe fffb 	bl	80128c0 <_Balloc>
 80138ca:	4681      	mov	r9, r0
 80138cc:	2800      	cmp	r0, #0
 80138ce:	f43f aef4 	beq.w	80136ba <_strtod_l+0x442>
 80138d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138d4:	300c      	adds	r0, #12
 80138d6:	691a      	ldr	r2, [r3, #16]
 80138d8:	f103 010c 	add.w	r1, r3, #12
 80138dc:	3202      	adds	r2, #2
 80138de:	0092      	lsls	r2, r2, #2
 80138e0:	f000 ff7a 	bl	80147d8 <memcpy>
 80138e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80138e6:	a91b      	add	r1, sp, #108	@ 0x6c
 80138e8:	9805      	ldr	r0, [sp, #20]
 80138ea:	ec4b ab10 	vmov	d0, sl, fp
 80138ee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80138f2:	f7ff fbd3 	bl	801309c <__d2b>
 80138f6:	901a      	str	r0, [sp, #104]	@ 0x68
 80138f8:	2800      	cmp	r0, #0
 80138fa:	f43f aede 	beq.w	80136ba <_strtod_l+0x442>
 80138fe:	2101      	movs	r1, #1
 8013900:	9805      	ldr	r0, [sp, #20]
 8013902:	f7ff f91d 	bl	8012b40 <__i2b>
 8013906:	4680      	mov	r8, r0
 8013908:	b948      	cbnz	r0, 801391e <_strtod_l+0x6a6>
 801390a:	f04f 0800 	mov.w	r8, #0
 801390e:	e6d4      	b.n	80136ba <_strtod_l+0x442>
 8013910:	f04f 32ff 	mov.w	r2, #4294967295
 8013914:	fa02 f303 	lsl.w	r3, r2, r3
 8013918:	ea03 0a0a 	and.w	sl, r3, sl
 801391c:	e7b0      	b.n	8013880 <_strtod_l+0x608>
 801391e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013920:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013922:	2d00      	cmp	r5, #0
 8013924:	bfa9      	itett	ge
 8013926:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013928:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801392a:	18ef      	addge	r7, r5, r3
 801392c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801392e:	bfb8      	it	lt
 8013930:	1b5e      	sublt	r6, r3, r5
 8013932:	9b08      	ldr	r3, [sp, #32]
 8013934:	bfb8      	it	lt
 8013936:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013938:	1aed      	subs	r5, r5, r3
 801393a:	4b66      	ldr	r3, [pc, #408]	@ (8013ad4 <_strtod_l+0x85c>)
 801393c:	4415      	add	r5, r2
 801393e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013942:	3d01      	subs	r5, #1
 8013944:	429d      	cmp	r5, r3
 8013946:	da4f      	bge.n	80139e8 <_strtod_l+0x770>
 8013948:	1b5b      	subs	r3, r3, r5
 801394a:	2101      	movs	r1, #1
 801394c:	2b1f      	cmp	r3, #31
 801394e:	eba2 0203 	sub.w	r2, r2, r3
 8013952:	dc3d      	bgt.n	80139d0 <_strtod_l+0x758>
 8013954:	fa01 f303 	lsl.w	r3, r1, r3
 8013958:	9313      	str	r3, [sp, #76]	@ 0x4c
 801395a:	2300      	movs	r3, #0
 801395c:	9310      	str	r3, [sp, #64]	@ 0x40
 801395e:	18bd      	adds	r5, r7, r2
 8013960:	9b08      	ldr	r3, [sp, #32]
 8013962:	4416      	add	r6, r2
 8013964:	42af      	cmp	r7, r5
 8013966:	441e      	add	r6, r3
 8013968:	463b      	mov	r3, r7
 801396a:	bfa8      	it	ge
 801396c:	462b      	movge	r3, r5
 801396e:	42b3      	cmp	r3, r6
 8013970:	bfa8      	it	ge
 8013972:	4633      	movge	r3, r6
 8013974:	2b00      	cmp	r3, #0
 8013976:	bfc2      	ittt	gt
 8013978:	1aed      	subgt	r5, r5, r3
 801397a:	1af6      	subgt	r6, r6, r3
 801397c:	1aff      	subgt	r7, r7, r3
 801397e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013980:	2b00      	cmp	r3, #0
 8013982:	dd16      	ble.n	80139b2 <_strtod_l+0x73a>
 8013984:	4641      	mov	r1, r8
 8013986:	461a      	mov	r2, r3
 8013988:	9805      	ldr	r0, [sp, #20]
 801398a:	f7ff f999 	bl	8012cc0 <__pow5mult>
 801398e:	4680      	mov	r8, r0
 8013990:	2800      	cmp	r0, #0
 8013992:	d0ba      	beq.n	801390a <_strtod_l+0x692>
 8013994:	4601      	mov	r1, r0
 8013996:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013998:	9805      	ldr	r0, [sp, #20]
 801399a:	f7ff f8e7 	bl	8012b6c <__multiply>
 801399e:	900e      	str	r0, [sp, #56]	@ 0x38
 80139a0:	2800      	cmp	r0, #0
 80139a2:	f43f ae8a 	beq.w	80136ba <_strtod_l+0x442>
 80139a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80139a8:	9805      	ldr	r0, [sp, #20]
 80139aa:	f7fe ffc9 	bl	8012940 <_Bfree>
 80139ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80139b2:	2d00      	cmp	r5, #0
 80139b4:	dc1d      	bgt.n	80139f2 <_strtod_l+0x77a>
 80139b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	dd23      	ble.n	8013a04 <_strtod_l+0x78c>
 80139bc:	4649      	mov	r1, r9
 80139be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80139c0:	9805      	ldr	r0, [sp, #20]
 80139c2:	f7ff f97d 	bl	8012cc0 <__pow5mult>
 80139c6:	4681      	mov	r9, r0
 80139c8:	b9e0      	cbnz	r0, 8013a04 <_strtod_l+0x78c>
 80139ca:	f04f 0900 	mov.w	r9, #0
 80139ce:	e674      	b.n	80136ba <_strtod_l+0x442>
 80139d0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80139d4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80139d6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80139da:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80139de:	35e2      	adds	r5, #226	@ 0xe2
 80139e0:	fa01 f305 	lsl.w	r3, r1, r5
 80139e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80139e6:	e7ba      	b.n	801395e <_strtod_l+0x6e6>
 80139e8:	2300      	movs	r3, #0
 80139ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80139ec:	2301      	movs	r3, #1
 80139ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80139f0:	e7b5      	b.n	801395e <_strtod_l+0x6e6>
 80139f2:	462a      	mov	r2, r5
 80139f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80139f6:	9805      	ldr	r0, [sp, #20]
 80139f8:	f7ff f9bc 	bl	8012d74 <__lshift>
 80139fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d1d9      	bne.n	80139b6 <_strtod_l+0x73e>
 8013a02:	e65a      	b.n	80136ba <_strtod_l+0x442>
 8013a04:	2e00      	cmp	r6, #0
 8013a06:	dd07      	ble.n	8013a18 <_strtod_l+0x7a0>
 8013a08:	4649      	mov	r1, r9
 8013a0a:	4632      	mov	r2, r6
 8013a0c:	9805      	ldr	r0, [sp, #20]
 8013a0e:	f7ff f9b1 	bl	8012d74 <__lshift>
 8013a12:	4681      	mov	r9, r0
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d0d8      	beq.n	80139ca <_strtod_l+0x752>
 8013a18:	2f00      	cmp	r7, #0
 8013a1a:	dd08      	ble.n	8013a2e <_strtod_l+0x7b6>
 8013a1c:	4641      	mov	r1, r8
 8013a1e:	463a      	mov	r2, r7
 8013a20:	9805      	ldr	r0, [sp, #20]
 8013a22:	f7ff f9a7 	bl	8012d74 <__lshift>
 8013a26:	4680      	mov	r8, r0
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	f43f ae46 	beq.w	80136ba <_strtod_l+0x442>
 8013a2e:	464a      	mov	r2, r9
 8013a30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013a32:	9805      	ldr	r0, [sp, #20]
 8013a34:	f7ff fa26 	bl	8012e84 <__mdiff>
 8013a38:	4604      	mov	r4, r0
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	f43f ae3d 	beq.w	80136ba <_strtod_l+0x442>
 8013a40:	68c3      	ldr	r3, [r0, #12]
 8013a42:	4641      	mov	r1, r8
 8013a44:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a46:	2300      	movs	r3, #0
 8013a48:	60c3      	str	r3, [r0, #12]
 8013a4a:	f7ff f9ff 	bl	8012e4c <__mcmp>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	da46      	bge.n	8013ae0 <_strtod_l+0x868>
 8013a52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a54:	ea53 030a 	orrs.w	r3, r3, sl
 8013a58:	d16c      	bne.n	8013b34 <_strtod_l+0x8bc>
 8013a5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d168      	bne.n	8013b34 <_strtod_l+0x8bc>
 8013a62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013a66:	0d1b      	lsrs	r3, r3, #20
 8013a68:	051b      	lsls	r3, r3, #20
 8013a6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013a6e:	d961      	bls.n	8013b34 <_strtod_l+0x8bc>
 8013a70:	6963      	ldr	r3, [r4, #20]
 8013a72:	b913      	cbnz	r3, 8013a7a <_strtod_l+0x802>
 8013a74:	6923      	ldr	r3, [r4, #16]
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	dd5c      	ble.n	8013b34 <_strtod_l+0x8bc>
 8013a7a:	4621      	mov	r1, r4
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	9805      	ldr	r0, [sp, #20]
 8013a80:	f7ff f978 	bl	8012d74 <__lshift>
 8013a84:	4641      	mov	r1, r8
 8013a86:	4604      	mov	r4, r0
 8013a88:	f7ff f9e0 	bl	8012e4c <__mcmp>
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	dd51      	ble.n	8013b34 <_strtod_l+0x8bc>
 8013a90:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013a94:	9a08      	ldr	r2, [sp, #32]
 8013a96:	0d1b      	lsrs	r3, r3, #20
 8013a98:	051b      	lsls	r3, r3, #20
 8013a9a:	2a00      	cmp	r2, #0
 8013a9c:	d06b      	beq.n	8013b76 <_strtod_l+0x8fe>
 8013a9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013aa2:	d868      	bhi.n	8013b76 <_strtod_l+0x8fe>
 8013aa4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013aa8:	f67f ae9d 	bls.w	80137e6 <_strtod_l+0x56e>
 8013aac:	4b0a      	ldr	r3, [pc, #40]	@ (8013ad8 <_strtod_l+0x860>)
 8013aae:	4650      	mov	r0, sl
 8013ab0:	4659      	mov	r1, fp
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	f7ec fda4 	bl	8000600 <__aeabi_dmul>
 8013ab8:	4b08      	ldr	r3, [pc, #32]	@ (8013adc <_strtod_l+0x864>)
 8013aba:	4682      	mov	sl, r0
 8013abc:	468b      	mov	fp, r1
 8013abe:	400b      	ands	r3, r1
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f47f ae05 	bne.w	80136d0 <_strtod_l+0x458>
 8013ac6:	2322      	movs	r3, #34	@ 0x22
 8013ac8:	9a05      	ldr	r2, [sp, #20]
 8013aca:	6013      	str	r3, [r2, #0]
 8013acc:	e600      	b.n	80136d0 <_strtod_l+0x458>
 8013ace:	bf00      	nop
 8013ad0:	08015630 	.word	0x08015630
 8013ad4:	fffffc02 	.word	0xfffffc02
 8013ad8:	39500000 	.word	0x39500000
 8013adc:	7ff00000 	.word	0x7ff00000
 8013ae0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013ae4:	d165      	bne.n	8013bb2 <_strtod_l+0x93a>
 8013ae6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013ae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013aec:	b35a      	cbz	r2, 8013b46 <_strtod_l+0x8ce>
 8013aee:	4a9e      	ldr	r2, [pc, #632]	@ (8013d68 <_strtod_l+0xaf0>)
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d12b      	bne.n	8013b4c <_strtod_l+0x8d4>
 8013af4:	9b08      	ldr	r3, [sp, #32]
 8013af6:	4651      	mov	r1, sl
 8013af8:	b303      	cbz	r3, 8013b3c <_strtod_l+0x8c4>
 8013afa:	465a      	mov	r2, fp
 8013afc:	4b9b      	ldr	r3, [pc, #620]	@ (8013d6c <_strtod_l+0xaf4>)
 8013afe:	4013      	ands	r3, r2
 8013b00:	f04f 32ff 	mov.w	r2, #4294967295
 8013b04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013b08:	d81b      	bhi.n	8013b42 <_strtod_l+0x8ca>
 8013b0a:	0d1b      	lsrs	r3, r3, #20
 8013b0c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013b10:	fa02 f303 	lsl.w	r3, r2, r3
 8013b14:	4299      	cmp	r1, r3
 8013b16:	d119      	bne.n	8013b4c <_strtod_l+0x8d4>
 8013b18:	4b95      	ldr	r3, [pc, #596]	@ (8013d70 <_strtod_l+0xaf8>)
 8013b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d102      	bne.n	8013b26 <_strtod_l+0x8ae>
 8013b20:	3101      	adds	r1, #1
 8013b22:	f43f adca 	beq.w	80136ba <_strtod_l+0x442>
 8013b26:	4b91      	ldr	r3, [pc, #580]	@ (8013d6c <_strtod_l+0xaf4>)
 8013b28:	f04f 0a00 	mov.w	sl, #0
 8013b2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b2e:	401a      	ands	r2, r3
 8013b30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013b34:	9b08      	ldr	r3, [sp, #32]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d1b8      	bne.n	8013aac <_strtod_l+0x834>
 8013b3a:	e5c9      	b.n	80136d0 <_strtod_l+0x458>
 8013b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b40:	e7e8      	b.n	8013b14 <_strtod_l+0x89c>
 8013b42:	4613      	mov	r3, r2
 8013b44:	e7e6      	b.n	8013b14 <_strtod_l+0x89c>
 8013b46:	ea53 030a 	orrs.w	r3, r3, sl
 8013b4a:	d0a1      	beq.n	8013a90 <_strtod_l+0x818>
 8013b4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013b4e:	b1db      	cbz	r3, 8013b88 <_strtod_l+0x910>
 8013b50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b52:	4213      	tst	r3, r2
 8013b54:	d0ee      	beq.n	8013b34 <_strtod_l+0x8bc>
 8013b56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b58:	4650      	mov	r0, sl
 8013b5a:	9a08      	ldr	r2, [sp, #32]
 8013b5c:	4659      	mov	r1, fp
 8013b5e:	b1bb      	cbz	r3, 8013b90 <_strtod_l+0x918>
 8013b60:	f7ff fb6a 	bl	8013238 <sulp>
 8013b64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b68:	ec53 2b10 	vmov	r2, r3, d0
 8013b6c:	f7ec fb92 	bl	8000294 <__adddf3>
 8013b70:	4682      	mov	sl, r0
 8013b72:	468b      	mov	fp, r1
 8013b74:	e7de      	b.n	8013b34 <_strtod_l+0x8bc>
 8013b76:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013b7a:	f04f 3aff 	mov.w	sl, #4294967295
 8013b7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013b82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013b86:	e7d5      	b.n	8013b34 <_strtod_l+0x8bc>
 8013b88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013b8a:	ea13 0f0a 	tst.w	r3, sl
 8013b8e:	e7e1      	b.n	8013b54 <_strtod_l+0x8dc>
 8013b90:	f7ff fb52 	bl	8013238 <sulp>
 8013b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b98:	ec53 2b10 	vmov	r2, r3, d0
 8013b9c:	f7ec fb78 	bl	8000290 <__aeabi_dsub>
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	4682      	mov	sl, r0
 8013ba6:	468b      	mov	fp, r1
 8013ba8:	f7ec ff92 	bl	8000ad0 <__aeabi_dcmpeq>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d0c1      	beq.n	8013b34 <_strtod_l+0x8bc>
 8013bb0:	e619      	b.n	80137e6 <_strtod_l+0x56e>
 8013bb2:	4641      	mov	r1, r8
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f7ff fac9 	bl	801314c <__ratio>
 8013bba:	2200      	movs	r2, #0
 8013bbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013bc0:	ec57 6b10 	vmov	r6, r7, d0
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	4639      	mov	r1, r7
 8013bc8:	f7ec ff96 	bl	8000af8 <__aeabi_dcmple>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	d06f      	beq.n	8013cb0 <_strtod_l+0xa38>
 8013bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d17a      	bne.n	8013ccc <_strtod_l+0xa54>
 8013bd6:	f1ba 0f00 	cmp.w	sl, #0
 8013bda:	d158      	bne.n	8013c8e <_strtod_l+0xa16>
 8013bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d15a      	bne.n	8013c9c <_strtod_l+0xa24>
 8013be6:	2200      	movs	r2, #0
 8013be8:	4b62      	ldr	r3, [pc, #392]	@ (8013d74 <_strtod_l+0xafc>)
 8013bea:	4630      	mov	r0, r6
 8013bec:	4639      	mov	r1, r7
 8013bee:	f7ec ff79 	bl	8000ae4 <__aeabi_dcmplt>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d159      	bne.n	8013caa <_strtod_l+0xa32>
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	4639      	mov	r1, r7
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8013d78 <_strtod_l+0xb00>)
 8013bfe:	f7ec fcff 	bl	8000600 <__aeabi_dmul>
 8013c02:	4606      	mov	r6, r0
 8013c04:	460f      	mov	r7, r1
 8013c06:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013c0a:	9606      	str	r6, [sp, #24]
 8013c0c:	9307      	str	r3, [sp, #28]
 8013c0e:	4d57      	ldr	r5, [pc, #348]	@ (8013d6c <_strtod_l+0xaf4>)
 8013c10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013c18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c1a:	401d      	ands	r5, r3
 8013c1c:	4b57      	ldr	r3, [pc, #348]	@ (8013d7c <_strtod_l+0xb04>)
 8013c1e:	429d      	cmp	r5, r3
 8013c20:	f040 80b0 	bne.w	8013d84 <_strtod_l+0xb0c>
 8013c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c26:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013c2a:	ec4b ab10 	vmov	d0, sl, fp
 8013c2e:	f7ff f9c1 	bl	8012fb4 <__ulp>
 8013c32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c36:	ec51 0b10 	vmov	r0, r1, d0
 8013c3a:	f7ec fce1 	bl	8000600 <__aeabi_dmul>
 8013c3e:	4652      	mov	r2, sl
 8013c40:	465b      	mov	r3, fp
 8013c42:	f7ec fb27 	bl	8000294 <__adddf3>
 8013c46:	460b      	mov	r3, r1
 8013c48:	4948      	ldr	r1, [pc, #288]	@ (8013d6c <_strtod_l+0xaf4>)
 8013c4a:	4682      	mov	sl, r0
 8013c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8013d80 <_strtod_l+0xb08>)
 8013c4e:	4019      	ands	r1, r3
 8013c50:	4291      	cmp	r1, r2
 8013c52:	d942      	bls.n	8013cda <_strtod_l+0xa62>
 8013c54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013c56:	4b46      	ldr	r3, [pc, #280]	@ (8013d70 <_strtod_l+0xaf8>)
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d103      	bne.n	8013c64 <_strtod_l+0x9ec>
 8013c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c5e:	3301      	adds	r3, #1
 8013c60:	f43f ad2b 	beq.w	80136ba <_strtod_l+0x442>
 8013c64:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8013d70 <_strtod_l+0xaf8>
 8013c68:	f04f 3aff 	mov.w	sl, #4294967295
 8013c6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013c6e:	9805      	ldr	r0, [sp, #20]
 8013c70:	f7fe fe66 	bl	8012940 <_Bfree>
 8013c74:	4649      	mov	r1, r9
 8013c76:	9805      	ldr	r0, [sp, #20]
 8013c78:	f7fe fe62 	bl	8012940 <_Bfree>
 8013c7c:	4641      	mov	r1, r8
 8013c7e:	9805      	ldr	r0, [sp, #20]
 8013c80:	f7fe fe5e 	bl	8012940 <_Bfree>
 8013c84:	4621      	mov	r1, r4
 8013c86:	9805      	ldr	r0, [sp, #20]
 8013c88:	f7fe fe5a 	bl	8012940 <_Bfree>
 8013c8c:	e618      	b.n	80138c0 <_strtod_l+0x648>
 8013c8e:	f1ba 0f01 	cmp.w	sl, #1
 8013c92:	d103      	bne.n	8013c9c <_strtod_l+0xa24>
 8013c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	f43f ada5 	beq.w	80137e6 <_strtod_l+0x56e>
 8013c9c:	2600      	movs	r6, #0
 8013c9e:	4f35      	ldr	r7, [pc, #212]	@ (8013d74 <_strtod_l+0xafc>)
 8013ca0:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8013d48 <_strtod_l+0xad0>
 8013ca4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ca8:	e7b1      	b.n	8013c0e <_strtod_l+0x996>
 8013caa:	2600      	movs	r6, #0
 8013cac:	4f32      	ldr	r7, [pc, #200]	@ (8013d78 <_strtod_l+0xb00>)
 8013cae:	e7aa      	b.n	8013c06 <_strtod_l+0x98e>
 8013cb0:	4b31      	ldr	r3, [pc, #196]	@ (8013d78 <_strtod_l+0xb00>)
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f7ec fca2 	bl	8000600 <__aeabi_dmul>
 8013cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013cbe:	4606      	mov	r6, r0
 8013cc0:	460f      	mov	r7, r1
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d09f      	beq.n	8013c06 <_strtod_l+0x98e>
 8013cc6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013cca:	e7a0      	b.n	8013c0e <_strtod_l+0x996>
 8013ccc:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8013d50 <_strtod_l+0xad8>
 8013cd0:	ec57 6b17 	vmov	r6, r7, d7
 8013cd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013cd8:	e799      	b.n	8013c0e <_strtod_l+0x996>
 8013cda:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013cde:	9b08      	ldr	r3, [sp, #32]
 8013ce0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d1c1      	bne.n	8013c6c <_strtod_l+0x9f4>
 8013ce8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013cec:	0d1b      	lsrs	r3, r3, #20
 8013cee:	051b      	lsls	r3, r3, #20
 8013cf0:	429d      	cmp	r5, r3
 8013cf2:	d1bb      	bne.n	8013c6c <_strtod_l+0x9f4>
 8013cf4:	4630      	mov	r0, r6
 8013cf6:	4639      	mov	r1, r7
 8013cf8:	f7ec ffe2 	bl	8000cc0 <__aeabi_d2lz>
 8013cfc:	f7ec fc52 	bl	80005a4 <__aeabi_l2d>
 8013d00:	4602      	mov	r2, r0
 8013d02:	460b      	mov	r3, r1
 8013d04:	4630      	mov	r0, r6
 8013d06:	4639      	mov	r1, r7
 8013d08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013d0c:	f7ec fac0 	bl	8000290 <__aeabi_dsub>
 8013d10:	460b      	mov	r3, r1
 8013d12:	4602      	mov	r2, r0
 8013d14:	ea46 060a 	orr.w	r6, r6, sl
 8013d18:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d1e:	431e      	orrs	r6, r3
 8013d20:	d06d      	beq.n	8013dfe <_strtod_l+0xb86>
 8013d22:	a30d      	add	r3, pc, #52	@ (adr r3, 8013d58 <_strtod_l+0xae0>)
 8013d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d28:	f7ec fedc 	bl	8000ae4 <__aeabi_dcmplt>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	f47f accf 	bne.w	80136d0 <_strtod_l+0x458>
 8013d32:	a30b      	add	r3, pc, #44	@ (adr r3, 8013d60 <_strtod_l+0xae8>)
 8013d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013d3c:	f7ec fef0 	bl	8000b20 <__aeabi_dcmpgt>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d093      	beq.n	8013c6c <_strtod_l+0x9f4>
 8013d44:	e4c4      	b.n	80136d0 <_strtod_l+0x458>
 8013d46:	bf00      	nop
 8013d48:	00000000 	.word	0x00000000
 8013d4c:	bff00000 	.word	0xbff00000
 8013d50:	00000000 	.word	0x00000000
 8013d54:	3ff00000 	.word	0x3ff00000
 8013d58:	94a03595 	.word	0x94a03595
 8013d5c:	3fdfffff 	.word	0x3fdfffff
 8013d60:	35afe535 	.word	0x35afe535
 8013d64:	3fe00000 	.word	0x3fe00000
 8013d68:	000fffff 	.word	0x000fffff
 8013d6c:	7ff00000 	.word	0x7ff00000
 8013d70:	7fefffff 	.word	0x7fefffff
 8013d74:	3ff00000 	.word	0x3ff00000
 8013d78:	3fe00000 	.word	0x3fe00000
 8013d7c:	7fe00000 	.word	0x7fe00000
 8013d80:	7c9fffff 	.word	0x7c9fffff
 8013d84:	9b08      	ldr	r3, [sp, #32]
 8013d86:	b323      	cbz	r3, 8013dd2 <_strtod_l+0xb5a>
 8013d88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013d8c:	d821      	bhi.n	8013dd2 <_strtod_l+0xb5a>
 8013d8e:	4630      	mov	r0, r6
 8013d90:	4639      	mov	r1, r7
 8013d92:	a327      	add	r3, pc, #156	@ (adr r3, 8013e30 <_strtod_l+0xbb8>)
 8013d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d98:	f7ec feae 	bl	8000af8 <__aeabi_dcmple>
 8013d9c:	b1a0      	cbz	r0, 8013dc8 <_strtod_l+0xb50>
 8013d9e:	4639      	mov	r1, r7
 8013da0:	4630      	mov	r0, r6
 8013da2:	f7ec ff05 	bl	8000bb0 <__aeabi_d2uiz>
 8013da6:	2801      	cmp	r0, #1
 8013da8:	bf38      	it	cc
 8013daa:	2001      	movcc	r0, #1
 8013dac:	f7ec fbae 	bl	800050c <__aeabi_ui2d>
 8013db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013db2:	4606      	mov	r6, r0
 8013db4:	460f      	mov	r7, r1
 8013db6:	b9fb      	cbnz	r3, 8013df8 <_strtod_l+0xb80>
 8013db8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013dbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8013dbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8013dc0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013dc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013dc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013dca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013dce:	1b5b      	subs	r3, r3, r5
 8013dd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8013dd2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013dd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013dda:	f7ff f8eb 	bl	8012fb4 <__ulp>
 8013dde:	4650      	mov	r0, sl
 8013de0:	4659      	mov	r1, fp
 8013de2:	ec53 2b10 	vmov	r2, r3, d0
 8013de6:	f7ec fc0b 	bl	8000600 <__aeabi_dmul>
 8013dea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013dee:	f7ec fa51 	bl	8000294 <__adddf3>
 8013df2:	4682      	mov	sl, r0
 8013df4:	468b      	mov	fp, r1
 8013df6:	e772      	b.n	8013cde <_strtod_l+0xa66>
 8013df8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013dfc:	e7e0      	b.n	8013dc0 <_strtod_l+0xb48>
 8013dfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8013e38 <_strtod_l+0xbc0>)
 8013e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e04:	f7ec fe6e 	bl	8000ae4 <__aeabi_dcmplt>
 8013e08:	e79a      	b.n	8013d40 <_strtod_l+0xac8>
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e10:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013e12:	6013      	str	r3, [r2, #0]
 8013e14:	f7ff ba6d 	b.w	80132f2 <_strtod_l+0x7a>
 8013e18:	2a65      	cmp	r2, #101	@ 0x65
 8013e1a:	f43f ab67 	beq.w	80134ec <_strtod_l+0x274>
 8013e1e:	2a45      	cmp	r2, #69	@ 0x45
 8013e20:	f43f ab64 	beq.w	80134ec <_strtod_l+0x274>
 8013e24:	2301      	movs	r3, #1
 8013e26:	f7ff bba0 	b.w	801356a <_strtod_l+0x2f2>
 8013e2a:	bf00      	nop
 8013e2c:	f3af 8000 	nop.w
 8013e30:	ffc00000 	.word	0xffc00000
 8013e34:	41dfffff 	.word	0x41dfffff
 8013e38:	94a03595 	.word	0x94a03595
 8013e3c:	3fcfffff 	.word	0x3fcfffff

08013e40 <_strtod_r>:
 8013e40:	4b01      	ldr	r3, [pc, #4]	@ (8013e48 <_strtod_r+0x8>)
 8013e42:	f7ff ba19 	b.w	8013278 <_strtod_l>
 8013e46:	bf00      	nop
 8013e48:	20000190 	.word	0x20000190

08013e4c <_strtol_l.constprop.0>:
 8013e4c:	2b24      	cmp	r3, #36	@ 0x24
 8013e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e52:	4686      	mov	lr, r0
 8013e54:	4690      	mov	r8, r2
 8013e56:	d801      	bhi.n	8013e5c <_strtol_l.constprop.0+0x10>
 8013e58:	2b01      	cmp	r3, #1
 8013e5a:	d106      	bne.n	8013e6a <_strtol_l.constprop.0+0x1e>
 8013e5c:	f7fd fd9a 	bl	8011994 <__errno>
 8013e60:	2316      	movs	r3, #22
 8013e62:	6003      	str	r3, [r0, #0]
 8013e64:	2000      	movs	r0, #0
 8013e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e6a:	460d      	mov	r5, r1
 8013e6c:	4833      	ldr	r0, [pc, #204]	@ (8013f3c <_strtol_l.constprop.0+0xf0>)
 8013e6e:	462a      	mov	r2, r5
 8013e70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e74:	5d06      	ldrb	r6, [r0, r4]
 8013e76:	f016 0608 	ands.w	r6, r6, #8
 8013e7a:	d1f8      	bne.n	8013e6e <_strtol_l.constprop.0+0x22>
 8013e7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8013e7e:	d12d      	bne.n	8013edc <_strtol_l.constprop.0+0x90>
 8013e80:	782c      	ldrb	r4, [r5, #0]
 8013e82:	2601      	movs	r6, #1
 8013e84:	1c95      	adds	r5, r2, #2
 8013e86:	f033 0210 	bics.w	r2, r3, #16
 8013e8a:	d109      	bne.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013e8c:	2c30      	cmp	r4, #48	@ 0x30
 8013e8e:	d12a      	bne.n	8013ee6 <_strtol_l.constprop.0+0x9a>
 8013e90:	782a      	ldrb	r2, [r5, #0]
 8013e92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013e96:	2a58      	cmp	r2, #88	@ 0x58
 8013e98:	d125      	bne.n	8013ee6 <_strtol_l.constprop.0+0x9a>
 8013e9a:	786c      	ldrb	r4, [r5, #1]
 8013e9c:	2310      	movs	r3, #16
 8013e9e:	3502      	adds	r5, #2
 8013ea0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013eaa:	4610      	mov	r0, r2
 8013eac:	fbbc f9f3 	udiv	r9, ip, r3
 8013eb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8013eb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013eb8:	2f09      	cmp	r7, #9
 8013eba:	d81b      	bhi.n	8013ef4 <_strtol_l.constprop.0+0xa8>
 8013ebc:	463c      	mov	r4, r7
 8013ebe:	42a3      	cmp	r3, r4
 8013ec0:	dd27      	ble.n	8013f12 <_strtol_l.constprop.0+0xc6>
 8013ec2:	1c57      	adds	r7, r2, #1
 8013ec4:	d007      	beq.n	8013ed6 <_strtol_l.constprop.0+0x8a>
 8013ec6:	4581      	cmp	r9, r0
 8013ec8:	d320      	bcc.n	8013f0c <_strtol_l.constprop.0+0xc0>
 8013eca:	d101      	bne.n	8013ed0 <_strtol_l.constprop.0+0x84>
 8013ecc:	45a2      	cmp	sl, r4
 8013ece:	db1d      	blt.n	8013f0c <_strtol_l.constprop.0+0xc0>
 8013ed0:	fb00 4003 	mla	r0, r0, r3, r4
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013eda:	e7eb      	b.n	8013eb4 <_strtol_l.constprop.0+0x68>
 8013edc:	2c2b      	cmp	r4, #43	@ 0x2b
 8013ede:	bf04      	itt	eq
 8013ee0:	782c      	ldrbeq	r4, [r5, #0]
 8013ee2:	1c95      	addeq	r5, r2, #2
 8013ee4:	e7cf      	b.n	8013e86 <_strtol_l.constprop.0+0x3a>
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d1da      	bne.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013eea:	2c30      	cmp	r4, #48	@ 0x30
 8013eec:	bf0c      	ite	eq
 8013eee:	2308      	moveq	r3, #8
 8013ef0:	230a      	movne	r3, #10
 8013ef2:	e7d5      	b.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013ef4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013ef8:	2f19      	cmp	r7, #25
 8013efa:	d801      	bhi.n	8013f00 <_strtol_l.constprop.0+0xb4>
 8013efc:	3c37      	subs	r4, #55	@ 0x37
 8013efe:	e7de      	b.n	8013ebe <_strtol_l.constprop.0+0x72>
 8013f00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013f04:	2f19      	cmp	r7, #25
 8013f06:	d804      	bhi.n	8013f12 <_strtol_l.constprop.0+0xc6>
 8013f08:	3c57      	subs	r4, #87	@ 0x57
 8013f0a:	e7d8      	b.n	8013ebe <_strtol_l.constprop.0+0x72>
 8013f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f10:	e7e1      	b.n	8013ed6 <_strtol_l.constprop.0+0x8a>
 8013f12:	1c53      	adds	r3, r2, #1
 8013f14:	d108      	bne.n	8013f28 <_strtol_l.constprop.0+0xdc>
 8013f16:	2322      	movs	r3, #34	@ 0x22
 8013f18:	4660      	mov	r0, ip
 8013f1a:	f8ce 3000 	str.w	r3, [lr]
 8013f1e:	f1b8 0f00 	cmp.w	r8, #0
 8013f22:	d0a0      	beq.n	8013e66 <_strtol_l.constprop.0+0x1a>
 8013f24:	1e69      	subs	r1, r5, #1
 8013f26:	e006      	b.n	8013f36 <_strtol_l.constprop.0+0xea>
 8013f28:	b106      	cbz	r6, 8013f2c <_strtol_l.constprop.0+0xe0>
 8013f2a:	4240      	negs	r0, r0
 8013f2c:	f1b8 0f00 	cmp.w	r8, #0
 8013f30:	d099      	beq.n	8013e66 <_strtol_l.constprop.0+0x1a>
 8013f32:	2a00      	cmp	r2, #0
 8013f34:	d1f6      	bne.n	8013f24 <_strtol_l.constprop.0+0xd8>
 8013f36:	f8c8 1000 	str.w	r1, [r8]
 8013f3a:	e794      	b.n	8013e66 <_strtol_l.constprop.0+0x1a>
 8013f3c:	08015659 	.word	0x08015659

08013f40 <_strtol_r>:
 8013f40:	f7ff bf84 	b.w	8013e4c <_strtol_l.constprop.0>

08013f44 <__ssputs_r>:
 8013f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f48:	461f      	mov	r7, r3
 8013f4a:	688e      	ldr	r6, [r1, #8]
 8013f4c:	4682      	mov	sl, r0
 8013f4e:	460c      	mov	r4, r1
 8013f50:	42be      	cmp	r6, r7
 8013f52:	4690      	mov	r8, r2
 8013f54:	680b      	ldr	r3, [r1, #0]
 8013f56:	d82d      	bhi.n	8013fb4 <__ssputs_r+0x70>
 8013f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013f60:	d026      	beq.n	8013fb0 <__ssputs_r+0x6c>
 8013f62:	6965      	ldr	r5, [r4, #20]
 8013f64:	6909      	ldr	r1, [r1, #16]
 8013f66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f6a:	eba3 0901 	sub.w	r9, r3, r1
 8013f6e:	1c7b      	adds	r3, r7, #1
 8013f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f74:	444b      	add	r3, r9
 8013f76:	106d      	asrs	r5, r5, #1
 8013f78:	429d      	cmp	r5, r3
 8013f7a:	bf38      	it	cc
 8013f7c:	461d      	movcc	r5, r3
 8013f7e:	0553      	lsls	r3, r2, #21
 8013f80:	d527      	bpl.n	8013fd2 <__ssputs_r+0x8e>
 8013f82:	4629      	mov	r1, r5
 8013f84:	f7fe fc10 	bl	80127a8 <_malloc_r>
 8013f88:	4606      	mov	r6, r0
 8013f8a:	b360      	cbz	r0, 8013fe6 <__ssputs_r+0xa2>
 8013f8c:	464a      	mov	r2, r9
 8013f8e:	6921      	ldr	r1, [r4, #16]
 8013f90:	f000 fc22 	bl	80147d8 <memcpy>
 8013f94:	89a3      	ldrh	r3, [r4, #12]
 8013f96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f9e:	81a3      	strh	r3, [r4, #12]
 8013fa0:	6126      	str	r6, [r4, #16]
 8013fa2:	444e      	add	r6, r9
 8013fa4:	6165      	str	r5, [r4, #20]
 8013fa6:	eba5 0509 	sub.w	r5, r5, r9
 8013faa:	6026      	str	r6, [r4, #0]
 8013fac:	463e      	mov	r6, r7
 8013fae:	60a5      	str	r5, [r4, #8]
 8013fb0:	42be      	cmp	r6, r7
 8013fb2:	d900      	bls.n	8013fb6 <__ssputs_r+0x72>
 8013fb4:	463e      	mov	r6, r7
 8013fb6:	4632      	mov	r2, r6
 8013fb8:	4641      	mov	r1, r8
 8013fba:	6820      	ldr	r0, [r4, #0]
 8013fbc:	f000 fbd0 	bl	8014760 <memmove>
 8013fc0:	68a3      	ldr	r3, [r4, #8]
 8013fc2:	2000      	movs	r0, #0
 8013fc4:	1b9b      	subs	r3, r3, r6
 8013fc6:	60a3      	str	r3, [r4, #8]
 8013fc8:	6823      	ldr	r3, [r4, #0]
 8013fca:	4433      	add	r3, r6
 8013fcc:	6023      	str	r3, [r4, #0]
 8013fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fd2:	462a      	mov	r2, r5
 8013fd4:	f000 ff91 	bl	8014efa <_realloc_r>
 8013fd8:	4606      	mov	r6, r0
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d1e0      	bne.n	8013fa0 <__ssputs_r+0x5c>
 8013fde:	6921      	ldr	r1, [r4, #16]
 8013fe0:	4650      	mov	r0, sl
 8013fe2:	f7fe fb6d 	bl	80126c0 <_free_r>
 8013fe6:	230c      	movs	r3, #12
 8013fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fec:	f8ca 3000 	str.w	r3, [sl]
 8013ff0:	89a3      	ldrh	r3, [r4, #12]
 8013ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ff6:	81a3      	strh	r3, [r4, #12]
 8013ff8:	e7e9      	b.n	8013fce <__ssputs_r+0x8a>
	...

08013ffc <_svfiprintf_r>:
 8013ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014000:	4698      	mov	r8, r3
 8014002:	898b      	ldrh	r3, [r1, #12]
 8014004:	b09d      	sub	sp, #116	@ 0x74
 8014006:	4607      	mov	r7, r0
 8014008:	061b      	lsls	r3, r3, #24
 801400a:	460d      	mov	r5, r1
 801400c:	4614      	mov	r4, r2
 801400e:	d510      	bpl.n	8014032 <_svfiprintf_r+0x36>
 8014010:	690b      	ldr	r3, [r1, #16]
 8014012:	b973      	cbnz	r3, 8014032 <_svfiprintf_r+0x36>
 8014014:	2140      	movs	r1, #64	@ 0x40
 8014016:	f7fe fbc7 	bl	80127a8 <_malloc_r>
 801401a:	6028      	str	r0, [r5, #0]
 801401c:	6128      	str	r0, [r5, #16]
 801401e:	b930      	cbnz	r0, 801402e <_svfiprintf_r+0x32>
 8014020:	230c      	movs	r3, #12
 8014022:	603b      	str	r3, [r7, #0]
 8014024:	f04f 30ff 	mov.w	r0, #4294967295
 8014028:	b01d      	add	sp, #116	@ 0x74
 801402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801402e:	2340      	movs	r3, #64	@ 0x40
 8014030:	616b      	str	r3, [r5, #20]
 8014032:	2300      	movs	r3, #0
 8014034:	f8cd 800c 	str.w	r8, [sp, #12]
 8014038:	f04f 0901 	mov.w	r9, #1
 801403c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80141e0 <_svfiprintf_r+0x1e4>
 8014040:	9309      	str	r3, [sp, #36]	@ 0x24
 8014042:	2320      	movs	r3, #32
 8014044:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014048:	2330      	movs	r3, #48	@ 0x30
 801404a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801404e:	4623      	mov	r3, r4
 8014050:	469a      	mov	sl, r3
 8014052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014056:	b10a      	cbz	r2, 801405c <_svfiprintf_r+0x60>
 8014058:	2a25      	cmp	r2, #37	@ 0x25
 801405a:	d1f9      	bne.n	8014050 <_svfiprintf_r+0x54>
 801405c:	ebba 0b04 	subs.w	fp, sl, r4
 8014060:	d00b      	beq.n	801407a <_svfiprintf_r+0x7e>
 8014062:	465b      	mov	r3, fp
 8014064:	4622      	mov	r2, r4
 8014066:	4629      	mov	r1, r5
 8014068:	4638      	mov	r0, r7
 801406a:	f7ff ff6b 	bl	8013f44 <__ssputs_r>
 801406e:	3001      	adds	r0, #1
 8014070:	f000 80a7 	beq.w	80141c2 <_svfiprintf_r+0x1c6>
 8014074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014076:	445a      	add	r2, fp
 8014078:	9209      	str	r2, [sp, #36]	@ 0x24
 801407a:	f89a 3000 	ldrb.w	r3, [sl]
 801407e:	2b00      	cmp	r3, #0
 8014080:	f000 809f 	beq.w	80141c2 <_svfiprintf_r+0x1c6>
 8014084:	2300      	movs	r3, #0
 8014086:	f04f 32ff 	mov.w	r2, #4294967295
 801408a:	f10a 0a01 	add.w	sl, sl, #1
 801408e:	9304      	str	r3, [sp, #16]
 8014090:	9307      	str	r3, [sp, #28]
 8014092:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014096:	931a      	str	r3, [sp, #104]	@ 0x68
 8014098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801409c:	4654      	mov	r4, sl
 801409e:	2205      	movs	r2, #5
 80140a0:	484f      	ldr	r0, [pc, #316]	@ (80141e0 <_svfiprintf_r+0x1e4>)
 80140a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140a6:	f7fd fca2 	bl	80119ee <memchr>
 80140aa:	9a04      	ldr	r2, [sp, #16]
 80140ac:	b9d8      	cbnz	r0, 80140e6 <_svfiprintf_r+0xea>
 80140ae:	06d0      	lsls	r0, r2, #27
 80140b0:	bf44      	itt	mi
 80140b2:	2320      	movmi	r3, #32
 80140b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140b8:	0711      	lsls	r1, r2, #28
 80140ba:	bf44      	itt	mi
 80140bc:	232b      	movmi	r3, #43	@ 0x2b
 80140be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140c2:	f89a 3000 	ldrb.w	r3, [sl]
 80140c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80140c8:	d015      	beq.n	80140f6 <_svfiprintf_r+0xfa>
 80140ca:	9a07      	ldr	r2, [sp, #28]
 80140cc:	4654      	mov	r4, sl
 80140ce:	2000      	movs	r0, #0
 80140d0:	f04f 0c0a 	mov.w	ip, #10
 80140d4:	4621      	mov	r1, r4
 80140d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140da:	3b30      	subs	r3, #48	@ 0x30
 80140dc:	2b09      	cmp	r3, #9
 80140de:	d94b      	bls.n	8014178 <_svfiprintf_r+0x17c>
 80140e0:	b1b0      	cbz	r0, 8014110 <_svfiprintf_r+0x114>
 80140e2:	9207      	str	r2, [sp, #28]
 80140e4:	e014      	b.n	8014110 <_svfiprintf_r+0x114>
 80140e6:	eba0 0308 	sub.w	r3, r0, r8
 80140ea:	46a2      	mov	sl, r4
 80140ec:	fa09 f303 	lsl.w	r3, r9, r3
 80140f0:	4313      	orrs	r3, r2
 80140f2:	9304      	str	r3, [sp, #16]
 80140f4:	e7d2      	b.n	801409c <_svfiprintf_r+0xa0>
 80140f6:	9b03      	ldr	r3, [sp, #12]
 80140f8:	1d19      	adds	r1, r3, #4
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	9103      	str	r1, [sp, #12]
 8014100:	bfbb      	ittet	lt
 8014102:	425b      	neglt	r3, r3
 8014104:	f042 0202 	orrlt.w	r2, r2, #2
 8014108:	9307      	strge	r3, [sp, #28]
 801410a:	9307      	strlt	r3, [sp, #28]
 801410c:	bfb8      	it	lt
 801410e:	9204      	strlt	r2, [sp, #16]
 8014110:	7823      	ldrb	r3, [r4, #0]
 8014112:	2b2e      	cmp	r3, #46	@ 0x2e
 8014114:	d10a      	bne.n	801412c <_svfiprintf_r+0x130>
 8014116:	7863      	ldrb	r3, [r4, #1]
 8014118:	2b2a      	cmp	r3, #42	@ 0x2a
 801411a:	d132      	bne.n	8014182 <_svfiprintf_r+0x186>
 801411c:	9b03      	ldr	r3, [sp, #12]
 801411e:	3402      	adds	r4, #2
 8014120:	1d1a      	adds	r2, r3, #4
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014128:	9203      	str	r2, [sp, #12]
 801412a:	9305      	str	r3, [sp, #20]
 801412c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80141f0 <_svfiprintf_r+0x1f4>
 8014130:	2203      	movs	r2, #3
 8014132:	7821      	ldrb	r1, [r4, #0]
 8014134:	4650      	mov	r0, sl
 8014136:	f7fd fc5a 	bl	80119ee <memchr>
 801413a:	b138      	cbz	r0, 801414c <_svfiprintf_r+0x150>
 801413c:	eba0 000a 	sub.w	r0, r0, sl
 8014140:	2240      	movs	r2, #64	@ 0x40
 8014142:	9b04      	ldr	r3, [sp, #16]
 8014144:	3401      	adds	r4, #1
 8014146:	4082      	lsls	r2, r0
 8014148:	4313      	orrs	r3, r2
 801414a:	9304      	str	r3, [sp, #16]
 801414c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014150:	2206      	movs	r2, #6
 8014152:	4824      	ldr	r0, [pc, #144]	@ (80141e4 <_svfiprintf_r+0x1e8>)
 8014154:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014158:	f7fd fc49 	bl	80119ee <memchr>
 801415c:	2800      	cmp	r0, #0
 801415e:	d036      	beq.n	80141ce <_svfiprintf_r+0x1d2>
 8014160:	4b21      	ldr	r3, [pc, #132]	@ (80141e8 <_svfiprintf_r+0x1ec>)
 8014162:	bb1b      	cbnz	r3, 80141ac <_svfiprintf_r+0x1b0>
 8014164:	9b03      	ldr	r3, [sp, #12]
 8014166:	3307      	adds	r3, #7
 8014168:	f023 0307 	bic.w	r3, r3, #7
 801416c:	3308      	adds	r3, #8
 801416e:	9303      	str	r3, [sp, #12]
 8014170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014172:	4433      	add	r3, r6
 8014174:	9309      	str	r3, [sp, #36]	@ 0x24
 8014176:	e76a      	b.n	801404e <_svfiprintf_r+0x52>
 8014178:	fb0c 3202 	mla	r2, ip, r2, r3
 801417c:	460c      	mov	r4, r1
 801417e:	2001      	movs	r0, #1
 8014180:	e7a8      	b.n	80140d4 <_svfiprintf_r+0xd8>
 8014182:	2300      	movs	r3, #0
 8014184:	3401      	adds	r4, #1
 8014186:	f04f 0c0a 	mov.w	ip, #10
 801418a:	4619      	mov	r1, r3
 801418c:	9305      	str	r3, [sp, #20]
 801418e:	4620      	mov	r0, r4
 8014190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014194:	3a30      	subs	r2, #48	@ 0x30
 8014196:	2a09      	cmp	r2, #9
 8014198:	d903      	bls.n	80141a2 <_svfiprintf_r+0x1a6>
 801419a:	2b00      	cmp	r3, #0
 801419c:	d0c6      	beq.n	801412c <_svfiprintf_r+0x130>
 801419e:	9105      	str	r1, [sp, #20]
 80141a0:	e7c4      	b.n	801412c <_svfiprintf_r+0x130>
 80141a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80141a6:	4604      	mov	r4, r0
 80141a8:	2301      	movs	r3, #1
 80141aa:	e7f0      	b.n	801418e <_svfiprintf_r+0x192>
 80141ac:	ab03      	add	r3, sp, #12
 80141ae:	462a      	mov	r2, r5
 80141b0:	a904      	add	r1, sp, #16
 80141b2:	4638      	mov	r0, r7
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	4b0d      	ldr	r3, [pc, #52]	@ (80141ec <_svfiprintf_r+0x1f0>)
 80141b8:	f7fc fc58 	bl	8010a6c <_printf_float>
 80141bc:	1c42      	adds	r2, r0, #1
 80141be:	4606      	mov	r6, r0
 80141c0:	d1d6      	bne.n	8014170 <_svfiprintf_r+0x174>
 80141c2:	89ab      	ldrh	r3, [r5, #12]
 80141c4:	065b      	lsls	r3, r3, #25
 80141c6:	f53f af2d 	bmi.w	8014024 <_svfiprintf_r+0x28>
 80141ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80141cc:	e72c      	b.n	8014028 <_svfiprintf_r+0x2c>
 80141ce:	ab03      	add	r3, sp, #12
 80141d0:	462a      	mov	r2, r5
 80141d2:	a904      	add	r1, sp, #16
 80141d4:	4638      	mov	r0, r7
 80141d6:	9300      	str	r3, [sp, #0]
 80141d8:	4b04      	ldr	r3, [pc, #16]	@ (80141ec <_svfiprintf_r+0x1f0>)
 80141da:	f7fc fee3 	bl	8010fa4 <_printf_i>
 80141de:	e7ed      	b.n	80141bc <_svfiprintf_r+0x1c0>
 80141e0:	08015759 	.word	0x08015759
 80141e4:	08015763 	.word	0x08015763
 80141e8:	08010a6d 	.word	0x08010a6d
 80141ec:	08013f45 	.word	0x08013f45
 80141f0:	0801575f 	.word	0x0801575f

080141f4 <__sfputc_r>:
 80141f4:	6893      	ldr	r3, [r2, #8]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	6093      	str	r3, [r2, #8]
 80141fc:	b410      	push	{r4}
 80141fe:	da08      	bge.n	8014212 <__sfputc_r+0x1e>
 8014200:	6994      	ldr	r4, [r2, #24]
 8014202:	42a3      	cmp	r3, r4
 8014204:	db01      	blt.n	801420a <__sfputc_r+0x16>
 8014206:	290a      	cmp	r1, #10
 8014208:	d103      	bne.n	8014212 <__sfputc_r+0x1e>
 801420a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801420e:	f000 ba13 	b.w	8014638 <__swbuf_r>
 8014212:	6813      	ldr	r3, [r2, #0]
 8014214:	1c58      	adds	r0, r3, #1
 8014216:	6010      	str	r0, [r2, #0]
 8014218:	4608      	mov	r0, r1
 801421a:	7019      	strb	r1, [r3, #0]
 801421c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014220:	4770      	bx	lr

08014222 <__sfputs_r>:
 8014222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014224:	4606      	mov	r6, r0
 8014226:	460f      	mov	r7, r1
 8014228:	4614      	mov	r4, r2
 801422a:	18d5      	adds	r5, r2, r3
 801422c:	42ac      	cmp	r4, r5
 801422e:	d101      	bne.n	8014234 <__sfputs_r+0x12>
 8014230:	2000      	movs	r0, #0
 8014232:	e007      	b.n	8014244 <__sfputs_r+0x22>
 8014234:	463a      	mov	r2, r7
 8014236:	f814 1b01 	ldrb.w	r1, [r4], #1
 801423a:	4630      	mov	r0, r6
 801423c:	f7ff ffda 	bl	80141f4 <__sfputc_r>
 8014240:	1c43      	adds	r3, r0, #1
 8014242:	d1f3      	bne.n	801422c <__sfputs_r+0xa>
 8014244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014248 <_vfiprintf_r>:
 8014248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801424c:	460d      	mov	r5, r1
 801424e:	b09d      	sub	sp, #116	@ 0x74
 8014250:	4614      	mov	r4, r2
 8014252:	4698      	mov	r8, r3
 8014254:	4606      	mov	r6, r0
 8014256:	b118      	cbz	r0, 8014260 <_vfiprintf_r+0x18>
 8014258:	6a03      	ldr	r3, [r0, #32]
 801425a:	b90b      	cbnz	r3, 8014260 <_vfiprintf_r+0x18>
 801425c:	f7fd fa60 	bl	8011720 <__sinit>
 8014260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014262:	07d9      	lsls	r1, r3, #31
 8014264:	d405      	bmi.n	8014272 <_vfiprintf_r+0x2a>
 8014266:	89ab      	ldrh	r3, [r5, #12]
 8014268:	059a      	lsls	r2, r3, #22
 801426a:	d402      	bmi.n	8014272 <_vfiprintf_r+0x2a>
 801426c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801426e:	f7fd fbbc 	bl	80119ea <__retarget_lock_acquire_recursive>
 8014272:	89ab      	ldrh	r3, [r5, #12]
 8014274:	071b      	lsls	r3, r3, #28
 8014276:	d501      	bpl.n	801427c <_vfiprintf_r+0x34>
 8014278:	692b      	ldr	r3, [r5, #16]
 801427a:	b99b      	cbnz	r3, 80142a4 <_vfiprintf_r+0x5c>
 801427c:	4629      	mov	r1, r5
 801427e:	4630      	mov	r0, r6
 8014280:	f000 fa18 	bl	80146b4 <__swsetup_r>
 8014284:	b170      	cbz	r0, 80142a4 <_vfiprintf_r+0x5c>
 8014286:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014288:	07dc      	lsls	r4, r3, #31
 801428a:	d504      	bpl.n	8014296 <_vfiprintf_r+0x4e>
 801428c:	f04f 30ff 	mov.w	r0, #4294967295
 8014290:	b01d      	add	sp, #116	@ 0x74
 8014292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014296:	89ab      	ldrh	r3, [r5, #12]
 8014298:	0598      	lsls	r0, r3, #22
 801429a:	d4f7      	bmi.n	801428c <_vfiprintf_r+0x44>
 801429c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801429e:	f7fd fba5 	bl	80119ec <__retarget_lock_release_recursive>
 80142a2:	e7f3      	b.n	801428c <_vfiprintf_r+0x44>
 80142a4:	2300      	movs	r3, #0
 80142a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80142aa:	f04f 0901 	mov.w	r9, #1
 80142ae:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8014464 <_vfiprintf_r+0x21c>
 80142b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80142b4:	2320      	movs	r3, #32
 80142b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80142ba:	2330      	movs	r3, #48	@ 0x30
 80142bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80142c0:	4623      	mov	r3, r4
 80142c2:	469a      	mov	sl, r3
 80142c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142c8:	b10a      	cbz	r2, 80142ce <_vfiprintf_r+0x86>
 80142ca:	2a25      	cmp	r2, #37	@ 0x25
 80142cc:	d1f9      	bne.n	80142c2 <_vfiprintf_r+0x7a>
 80142ce:	ebba 0b04 	subs.w	fp, sl, r4
 80142d2:	d00b      	beq.n	80142ec <_vfiprintf_r+0xa4>
 80142d4:	465b      	mov	r3, fp
 80142d6:	4622      	mov	r2, r4
 80142d8:	4629      	mov	r1, r5
 80142da:	4630      	mov	r0, r6
 80142dc:	f7ff ffa1 	bl	8014222 <__sfputs_r>
 80142e0:	3001      	adds	r0, #1
 80142e2:	f000 80a7 	beq.w	8014434 <_vfiprintf_r+0x1ec>
 80142e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142e8:	445a      	add	r2, fp
 80142ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80142ec:	f89a 3000 	ldrb.w	r3, [sl]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	f000 809f 	beq.w	8014434 <_vfiprintf_r+0x1ec>
 80142f6:	2300      	movs	r3, #0
 80142f8:	f04f 32ff 	mov.w	r2, #4294967295
 80142fc:	f10a 0a01 	add.w	sl, sl, #1
 8014300:	9304      	str	r3, [sp, #16]
 8014302:	9307      	str	r3, [sp, #28]
 8014304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014308:	931a      	str	r3, [sp, #104]	@ 0x68
 801430a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801430e:	4654      	mov	r4, sl
 8014310:	2205      	movs	r2, #5
 8014312:	4854      	ldr	r0, [pc, #336]	@ (8014464 <_vfiprintf_r+0x21c>)
 8014314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014318:	f7fd fb69 	bl	80119ee <memchr>
 801431c:	9a04      	ldr	r2, [sp, #16]
 801431e:	b9d8      	cbnz	r0, 8014358 <_vfiprintf_r+0x110>
 8014320:	06d1      	lsls	r1, r2, #27
 8014322:	bf44      	itt	mi
 8014324:	2320      	movmi	r3, #32
 8014326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801432a:	0713      	lsls	r3, r2, #28
 801432c:	bf44      	itt	mi
 801432e:	232b      	movmi	r3, #43	@ 0x2b
 8014330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014334:	f89a 3000 	ldrb.w	r3, [sl]
 8014338:	2b2a      	cmp	r3, #42	@ 0x2a
 801433a:	d015      	beq.n	8014368 <_vfiprintf_r+0x120>
 801433c:	9a07      	ldr	r2, [sp, #28]
 801433e:	4654      	mov	r4, sl
 8014340:	2000      	movs	r0, #0
 8014342:	f04f 0c0a 	mov.w	ip, #10
 8014346:	4621      	mov	r1, r4
 8014348:	f811 3b01 	ldrb.w	r3, [r1], #1
 801434c:	3b30      	subs	r3, #48	@ 0x30
 801434e:	2b09      	cmp	r3, #9
 8014350:	d94b      	bls.n	80143ea <_vfiprintf_r+0x1a2>
 8014352:	b1b0      	cbz	r0, 8014382 <_vfiprintf_r+0x13a>
 8014354:	9207      	str	r2, [sp, #28]
 8014356:	e014      	b.n	8014382 <_vfiprintf_r+0x13a>
 8014358:	eba0 0308 	sub.w	r3, r0, r8
 801435c:	46a2      	mov	sl, r4
 801435e:	fa09 f303 	lsl.w	r3, r9, r3
 8014362:	4313      	orrs	r3, r2
 8014364:	9304      	str	r3, [sp, #16]
 8014366:	e7d2      	b.n	801430e <_vfiprintf_r+0xc6>
 8014368:	9b03      	ldr	r3, [sp, #12]
 801436a:	1d19      	adds	r1, r3, #4
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	2b00      	cmp	r3, #0
 8014370:	9103      	str	r1, [sp, #12]
 8014372:	bfbb      	ittet	lt
 8014374:	425b      	neglt	r3, r3
 8014376:	f042 0202 	orrlt.w	r2, r2, #2
 801437a:	9307      	strge	r3, [sp, #28]
 801437c:	9307      	strlt	r3, [sp, #28]
 801437e:	bfb8      	it	lt
 8014380:	9204      	strlt	r2, [sp, #16]
 8014382:	7823      	ldrb	r3, [r4, #0]
 8014384:	2b2e      	cmp	r3, #46	@ 0x2e
 8014386:	d10a      	bne.n	801439e <_vfiprintf_r+0x156>
 8014388:	7863      	ldrb	r3, [r4, #1]
 801438a:	2b2a      	cmp	r3, #42	@ 0x2a
 801438c:	d132      	bne.n	80143f4 <_vfiprintf_r+0x1ac>
 801438e:	9b03      	ldr	r3, [sp, #12]
 8014390:	3402      	adds	r4, #2
 8014392:	1d1a      	adds	r2, r3, #4
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801439a:	9203      	str	r2, [sp, #12]
 801439c:	9305      	str	r3, [sp, #20]
 801439e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014474 <_vfiprintf_r+0x22c>
 80143a2:	2203      	movs	r2, #3
 80143a4:	7821      	ldrb	r1, [r4, #0]
 80143a6:	4650      	mov	r0, sl
 80143a8:	f7fd fb21 	bl	80119ee <memchr>
 80143ac:	b138      	cbz	r0, 80143be <_vfiprintf_r+0x176>
 80143ae:	eba0 000a 	sub.w	r0, r0, sl
 80143b2:	2240      	movs	r2, #64	@ 0x40
 80143b4:	9b04      	ldr	r3, [sp, #16]
 80143b6:	3401      	adds	r4, #1
 80143b8:	4082      	lsls	r2, r0
 80143ba:	4313      	orrs	r3, r2
 80143bc:	9304      	str	r3, [sp, #16]
 80143be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143c2:	2206      	movs	r2, #6
 80143c4:	4828      	ldr	r0, [pc, #160]	@ (8014468 <_vfiprintf_r+0x220>)
 80143c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80143ca:	f7fd fb10 	bl	80119ee <memchr>
 80143ce:	2800      	cmp	r0, #0
 80143d0:	d03f      	beq.n	8014452 <_vfiprintf_r+0x20a>
 80143d2:	4b26      	ldr	r3, [pc, #152]	@ (801446c <_vfiprintf_r+0x224>)
 80143d4:	bb1b      	cbnz	r3, 801441e <_vfiprintf_r+0x1d6>
 80143d6:	9b03      	ldr	r3, [sp, #12]
 80143d8:	3307      	adds	r3, #7
 80143da:	f023 0307 	bic.w	r3, r3, #7
 80143de:	3308      	adds	r3, #8
 80143e0:	9303      	str	r3, [sp, #12]
 80143e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143e4:	443b      	add	r3, r7
 80143e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80143e8:	e76a      	b.n	80142c0 <_vfiprintf_r+0x78>
 80143ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80143ee:	460c      	mov	r4, r1
 80143f0:	2001      	movs	r0, #1
 80143f2:	e7a8      	b.n	8014346 <_vfiprintf_r+0xfe>
 80143f4:	2300      	movs	r3, #0
 80143f6:	3401      	adds	r4, #1
 80143f8:	f04f 0c0a 	mov.w	ip, #10
 80143fc:	4619      	mov	r1, r3
 80143fe:	9305      	str	r3, [sp, #20]
 8014400:	4620      	mov	r0, r4
 8014402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014406:	3a30      	subs	r2, #48	@ 0x30
 8014408:	2a09      	cmp	r2, #9
 801440a:	d903      	bls.n	8014414 <_vfiprintf_r+0x1cc>
 801440c:	2b00      	cmp	r3, #0
 801440e:	d0c6      	beq.n	801439e <_vfiprintf_r+0x156>
 8014410:	9105      	str	r1, [sp, #20]
 8014412:	e7c4      	b.n	801439e <_vfiprintf_r+0x156>
 8014414:	fb0c 2101 	mla	r1, ip, r1, r2
 8014418:	4604      	mov	r4, r0
 801441a:	2301      	movs	r3, #1
 801441c:	e7f0      	b.n	8014400 <_vfiprintf_r+0x1b8>
 801441e:	ab03      	add	r3, sp, #12
 8014420:	462a      	mov	r2, r5
 8014422:	a904      	add	r1, sp, #16
 8014424:	4630      	mov	r0, r6
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	4b11      	ldr	r3, [pc, #68]	@ (8014470 <_vfiprintf_r+0x228>)
 801442a:	f7fc fb1f 	bl	8010a6c <_printf_float>
 801442e:	4607      	mov	r7, r0
 8014430:	1c78      	adds	r0, r7, #1
 8014432:	d1d6      	bne.n	80143e2 <_vfiprintf_r+0x19a>
 8014434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014436:	07d9      	lsls	r1, r3, #31
 8014438:	d405      	bmi.n	8014446 <_vfiprintf_r+0x1fe>
 801443a:	89ab      	ldrh	r3, [r5, #12]
 801443c:	059a      	lsls	r2, r3, #22
 801443e:	d402      	bmi.n	8014446 <_vfiprintf_r+0x1fe>
 8014440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014442:	f7fd fad3 	bl	80119ec <__retarget_lock_release_recursive>
 8014446:	89ab      	ldrh	r3, [r5, #12]
 8014448:	065b      	lsls	r3, r3, #25
 801444a:	f53f af1f 	bmi.w	801428c <_vfiprintf_r+0x44>
 801444e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014450:	e71e      	b.n	8014290 <_vfiprintf_r+0x48>
 8014452:	ab03      	add	r3, sp, #12
 8014454:	462a      	mov	r2, r5
 8014456:	a904      	add	r1, sp, #16
 8014458:	4630      	mov	r0, r6
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	4b04      	ldr	r3, [pc, #16]	@ (8014470 <_vfiprintf_r+0x228>)
 801445e:	f7fc fda1 	bl	8010fa4 <_printf_i>
 8014462:	e7e4      	b.n	801442e <_vfiprintf_r+0x1e6>
 8014464:	08015759 	.word	0x08015759
 8014468:	08015763 	.word	0x08015763
 801446c:	08010a6d 	.word	0x08010a6d
 8014470:	08014223 	.word	0x08014223
 8014474:	0801575f 	.word	0x0801575f

08014478 <__sflush_r>:
 8014478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014480:	0716      	lsls	r6, r2, #28
 8014482:	4605      	mov	r5, r0
 8014484:	460c      	mov	r4, r1
 8014486:	d454      	bmi.n	8014532 <__sflush_r+0xba>
 8014488:	684b      	ldr	r3, [r1, #4]
 801448a:	2b00      	cmp	r3, #0
 801448c:	dc02      	bgt.n	8014494 <__sflush_r+0x1c>
 801448e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014490:	2b00      	cmp	r3, #0
 8014492:	dd48      	ble.n	8014526 <__sflush_r+0xae>
 8014494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014496:	2e00      	cmp	r6, #0
 8014498:	d045      	beq.n	8014526 <__sflush_r+0xae>
 801449a:	2300      	movs	r3, #0
 801449c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80144a0:	682f      	ldr	r7, [r5, #0]
 80144a2:	6a21      	ldr	r1, [r4, #32]
 80144a4:	602b      	str	r3, [r5, #0]
 80144a6:	d030      	beq.n	801450a <__sflush_r+0x92>
 80144a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80144aa:	89a3      	ldrh	r3, [r4, #12]
 80144ac:	0759      	lsls	r1, r3, #29
 80144ae:	d505      	bpl.n	80144bc <__sflush_r+0x44>
 80144b0:	6863      	ldr	r3, [r4, #4]
 80144b2:	1ad2      	subs	r2, r2, r3
 80144b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80144b6:	b10b      	cbz	r3, 80144bc <__sflush_r+0x44>
 80144b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80144ba:	1ad2      	subs	r2, r2, r3
 80144bc:	2300      	movs	r3, #0
 80144be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80144c0:	6a21      	ldr	r1, [r4, #32]
 80144c2:	4628      	mov	r0, r5
 80144c4:	47b0      	blx	r6
 80144c6:	1c43      	adds	r3, r0, #1
 80144c8:	89a3      	ldrh	r3, [r4, #12]
 80144ca:	d106      	bne.n	80144da <__sflush_r+0x62>
 80144cc:	6829      	ldr	r1, [r5, #0]
 80144ce:	291d      	cmp	r1, #29
 80144d0:	d82b      	bhi.n	801452a <__sflush_r+0xb2>
 80144d2:	4a2a      	ldr	r2, [pc, #168]	@ (801457c <__sflush_r+0x104>)
 80144d4:	410a      	asrs	r2, r1
 80144d6:	07d6      	lsls	r6, r2, #31
 80144d8:	d427      	bmi.n	801452a <__sflush_r+0xb2>
 80144da:	2200      	movs	r2, #0
 80144dc:	04d9      	lsls	r1, r3, #19
 80144de:	6062      	str	r2, [r4, #4]
 80144e0:	6922      	ldr	r2, [r4, #16]
 80144e2:	6022      	str	r2, [r4, #0]
 80144e4:	d504      	bpl.n	80144f0 <__sflush_r+0x78>
 80144e6:	1c42      	adds	r2, r0, #1
 80144e8:	d101      	bne.n	80144ee <__sflush_r+0x76>
 80144ea:	682b      	ldr	r3, [r5, #0]
 80144ec:	b903      	cbnz	r3, 80144f0 <__sflush_r+0x78>
 80144ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80144f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144f2:	602f      	str	r7, [r5, #0]
 80144f4:	b1b9      	cbz	r1, 8014526 <__sflush_r+0xae>
 80144f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144fa:	4299      	cmp	r1, r3
 80144fc:	d002      	beq.n	8014504 <__sflush_r+0x8c>
 80144fe:	4628      	mov	r0, r5
 8014500:	f7fe f8de 	bl	80126c0 <_free_r>
 8014504:	2300      	movs	r3, #0
 8014506:	6363      	str	r3, [r4, #52]	@ 0x34
 8014508:	e00d      	b.n	8014526 <__sflush_r+0xae>
 801450a:	2301      	movs	r3, #1
 801450c:	4628      	mov	r0, r5
 801450e:	47b0      	blx	r6
 8014510:	4602      	mov	r2, r0
 8014512:	1c50      	adds	r0, r2, #1
 8014514:	d1c9      	bne.n	80144aa <__sflush_r+0x32>
 8014516:	682b      	ldr	r3, [r5, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d0c6      	beq.n	80144aa <__sflush_r+0x32>
 801451c:	2b1d      	cmp	r3, #29
 801451e:	d001      	beq.n	8014524 <__sflush_r+0xac>
 8014520:	2b16      	cmp	r3, #22
 8014522:	d11d      	bne.n	8014560 <__sflush_r+0xe8>
 8014524:	602f      	str	r7, [r5, #0]
 8014526:	2000      	movs	r0, #0
 8014528:	e021      	b.n	801456e <__sflush_r+0xf6>
 801452a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801452e:	b21b      	sxth	r3, r3
 8014530:	e01a      	b.n	8014568 <__sflush_r+0xf0>
 8014532:	690f      	ldr	r7, [r1, #16]
 8014534:	2f00      	cmp	r7, #0
 8014536:	d0f6      	beq.n	8014526 <__sflush_r+0xae>
 8014538:	0793      	lsls	r3, r2, #30
 801453a:	680e      	ldr	r6, [r1, #0]
 801453c:	600f      	str	r7, [r1, #0]
 801453e:	bf0c      	ite	eq
 8014540:	694b      	ldreq	r3, [r1, #20]
 8014542:	2300      	movne	r3, #0
 8014544:	eba6 0807 	sub.w	r8, r6, r7
 8014548:	608b      	str	r3, [r1, #8]
 801454a:	f1b8 0f00 	cmp.w	r8, #0
 801454e:	ddea      	ble.n	8014526 <__sflush_r+0xae>
 8014550:	4643      	mov	r3, r8
 8014552:	463a      	mov	r2, r7
 8014554:	6a21      	ldr	r1, [r4, #32]
 8014556:	4628      	mov	r0, r5
 8014558:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801455a:	47b0      	blx	r6
 801455c:	2800      	cmp	r0, #0
 801455e:	dc08      	bgt.n	8014572 <__sflush_r+0xfa>
 8014560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014568:	f04f 30ff 	mov.w	r0, #4294967295
 801456c:	81a3      	strh	r3, [r4, #12]
 801456e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014572:	4407      	add	r7, r0
 8014574:	eba8 0800 	sub.w	r8, r8, r0
 8014578:	e7e7      	b.n	801454a <__sflush_r+0xd2>
 801457a:	bf00      	nop
 801457c:	dfbffffe 	.word	0xdfbffffe

08014580 <_fflush_r>:
 8014580:	b538      	push	{r3, r4, r5, lr}
 8014582:	690b      	ldr	r3, [r1, #16]
 8014584:	4605      	mov	r5, r0
 8014586:	460c      	mov	r4, r1
 8014588:	b913      	cbnz	r3, 8014590 <_fflush_r+0x10>
 801458a:	2500      	movs	r5, #0
 801458c:	4628      	mov	r0, r5
 801458e:	bd38      	pop	{r3, r4, r5, pc}
 8014590:	b118      	cbz	r0, 801459a <_fflush_r+0x1a>
 8014592:	6a03      	ldr	r3, [r0, #32]
 8014594:	b90b      	cbnz	r3, 801459a <_fflush_r+0x1a>
 8014596:	f7fd f8c3 	bl	8011720 <__sinit>
 801459a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d0f3      	beq.n	801458a <_fflush_r+0xa>
 80145a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80145a4:	07d0      	lsls	r0, r2, #31
 80145a6:	d404      	bmi.n	80145b2 <_fflush_r+0x32>
 80145a8:	0599      	lsls	r1, r3, #22
 80145aa:	d402      	bmi.n	80145b2 <_fflush_r+0x32>
 80145ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145ae:	f7fd fa1c 	bl	80119ea <__retarget_lock_acquire_recursive>
 80145b2:	4628      	mov	r0, r5
 80145b4:	4621      	mov	r1, r4
 80145b6:	f7ff ff5f 	bl	8014478 <__sflush_r>
 80145ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145bc:	4605      	mov	r5, r0
 80145be:	07da      	lsls	r2, r3, #31
 80145c0:	d4e4      	bmi.n	801458c <_fflush_r+0xc>
 80145c2:	89a3      	ldrh	r3, [r4, #12]
 80145c4:	059b      	lsls	r3, r3, #22
 80145c6:	d4e1      	bmi.n	801458c <_fflush_r+0xc>
 80145c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145ca:	f7fd fa0f 	bl	80119ec <__retarget_lock_release_recursive>
 80145ce:	e7dd      	b.n	801458c <_fflush_r+0xc>

080145d0 <_putc_r>:
 80145d0:	b570      	push	{r4, r5, r6, lr}
 80145d2:	460d      	mov	r5, r1
 80145d4:	4614      	mov	r4, r2
 80145d6:	4606      	mov	r6, r0
 80145d8:	b118      	cbz	r0, 80145e2 <_putc_r+0x12>
 80145da:	6a03      	ldr	r3, [r0, #32]
 80145dc:	b90b      	cbnz	r3, 80145e2 <_putc_r+0x12>
 80145de:	f7fd f89f 	bl	8011720 <__sinit>
 80145e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145e4:	07d8      	lsls	r0, r3, #31
 80145e6:	d405      	bmi.n	80145f4 <_putc_r+0x24>
 80145e8:	89a3      	ldrh	r3, [r4, #12]
 80145ea:	0599      	lsls	r1, r3, #22
 80145ec:	d402      	bmi.n	80145f4 <_putc_r+0x24>
 80145ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145f0:	f7fd f9fb 	bl	80119ea <__retarget_lock_acquire_recursive>
 80145f4:	68a3      	ldr	r3, [r4, #8]
 80145f6:	3b01      	subs	r3, #1
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	60a3      	str	r3, [r4, #8]
 80145fc:	da05      	bge.n	801460a <_putc_r+0x3a>
 80145fe:	69a2      	ldr	r2, [r4, #24]
 8014600:	4293      	cmp	r3, r2
 8014602:	db12      	blt.n	801462a <_putc_r+0x5a>
 8014604:	b2eb      	uxtb	r3, r5
 8014606:	2b0a      	cmp	r3, #10
 8014608:	d00f      	beq.n	801462a <_putc_r+0x5a>
 801460a:	6823      	ldr	r3, [r4, #0]
 801460c:	1c5a      	adds	r2, r3, #1
 801460e:	6022      	str	r2, [r4, #0]
 8014610:	701d      	strb	r5, [r3, #0]
 8014612:	b2ed      	uxtb	r5, r5
 8014614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014616:	07da      	lsls	r2, r3, #31
 8014618:	d405      	bmi.n	8014626 <_putc_r+0x56>
 801461a:	89a3      	ldrh	r3, [r4, #12]
 801461c:	059b      	lsls	r3, r3, #22
 801461e:	d402      	bmi.n	8014626 <_putc_r+0x56>
 8014620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014622:	f7fd f9e3 	bl	80119ec <__retarget_lock_release_recursive>
 8014626:	4628      	mov	r0, r5
 8014628:	bd70      	pop	{r4, r5, r6, pc}
 801462a:	4629      	mov	r1, r5
 801462c:	4622      	mov	r2, r4
 801462e:	4630      	mov	r0, r6
 8014630:	f000 f802 	bl	8014638 <__swbuf_r>
 8014634:	4605      	mov	r5, r0
 8014636:	e7ed      	b.n	8014614 <_putc_r+0x44>

08014638 <__swbuf_r>:
 8014638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801463a:	460e      	mov	r6, r1
 801463c:	4614      	mov	r4, r2
 801463e:	4605      	mov	r5, r0
 8014640:	b118      	cbz	r0, 801464a <__swbuf_r+0x12>
 8014642:	6a03      	ldr	r3, [r0, #32]
 8014644:	b90b      	cbnz	r3, 801464a <__swbuf_r+0x12>
 8014646:	f7fd f86b 	bl	8011720 <__sinit>
 801464a:	69a3      	ldr	r3, [r4, #24]
 801464c:	60a3      	str	r3, [r4, #8]
 801464e:	89a3      	ldrh	r3, [r4, #12]
 8014650:	071a      	lsls	r2, r3, #28
 8014652:	d501      	bpl.n	8014658 <__swbuf_r+0x20>
 8014654:	6923      	ldr	r3, [r4, #16]
 8014656:	b943      	cbnz	r3, 801466a <__swbuf_r+0x32>
 8014658:	4621      	mov	r1, r4
 801465a:	4628      	mov	r0, r5
 801465c:	f000 f82a 	bl	80146b4 <__swsetup_r>
 8014660:	b118      	cbz	r0, 801466a <__swbuf_r+0x32>
 8014662:	f04f 37ff 	mov.w	r7, #4294967295
 8014666:	4638      	mov	r0, r7
 8014668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801466a:	6823      	ldr	r3, [r4, #0]
 801466c:	b2f6      	uxtb	r6, r6
 801466e:	6922      	ldr	r2, [r4, #16]
 8014670:	4637      	mov	r7, r6
 8014672:	1a98      	subs	r0, r3, r2
 8014674:	6963      	ldr	r3, [r4, #20]
 8014676:	4283      	cmp	r3, r0
 8014678:	dc05      	bgt.n	8014686 <__swbuf_r+0x4e>
 801467a:	4621      	mov	r1, r4
 801467c:	4628      	mov	r0, r5
 801467e:	f7ff ff7f 	bl	8014580 <_fflush_r>
 8014682:	2800      	cmp	r0, #0
 8014684:	d1ed      	bne.n	8014662 <__swbuf_r+0x2a>
 8014686:	68a3      	ldr	r3, [r4, #8]
 8014688:	3b01      	subs	r3, #1
 801468a:	60a3      	str	r3, [r4, #8]
 801468c:	6823      	ldr	r3, [r4, #0]
 801468e:	1c5a      	adds	r2, r3, #1
 8014690:	6022      	str	r2, [r4, #0]
 8014692:	701e      	strb	r6, [r3, #0]
 8014694:	1c43      	adds	r3, r0, #1
 8014696:	6962      	ldr	r2, [r4, #20]
 8014698:	429a      	cmp	r2, r3
 801469a:	d004      	beq.n	80146a6 <__swbuf_r+0x6e>
 801469c:	89a3      	ldrh	r3, [r4, #12]
 801469e:	07db      	lsls	r3, r3, #31
 80146a0:	d5e1      	bpl.n	8014666 <__swbuf_r+0x2e>
 80146a2:	2e0a      	cmp	r6, #10
 80146a4:	d1df      	bne.n	8014666 <__swbuf_r+0x2e>
 80146a6:	4621      	mov	r1, r4
 80146a8:	4628      	mov	r0, r5
 80146aa:	f7ff ff69 	bl	8014580 <_fflush_r>
 80146ae:	2800      	cmp	r0, #0
 80146b0:	d0d9      	beq.n	8014666 <__swbuf_r+0x2e>
 80146b2:	e7d6      	b.n	8014662 <__swbuf_r+0x2a>

080146b4 <__swsetup_r>:
 80146b4:	b538      	push	{r3, r4, r5, lr}
 80146b6:	4b29      	ldr	r3, [pc, #164]	@ (801475c <__swsetup_r+0xa8>)
 80146b8:	4605      	mov	r5, r0
 80146ba:	460c      	mov	r4, r1
 80146bc:	6818      	ldr	r0, [r3, #0]
 80146be:	b118      	cbz	r0, 80146c8 <__swsetup_r+0x14>
 80146c0:	6a03      	ldr	r3, [r0, #32]
 80146c2:	b90b      	cbnz	r3, 80146c8 <__swsetup_r+0x14>
 80146c4:	f7fd f82c 	bl	8011720 <__sinit>
 80146c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146cc:	0719      	lsls	r1, r3, #28
 80146ce:	d422      	bmi.n	8014716 <__swsetup_r+0x62>
 80146d0:	06da      	lsls	r2, r3, #27
 80146d2:	d407      	bmi.n	80146e4 <__swsetup_r+0x30>
 80146d4:	2209      	movs	r2, #9
 80146d6:	602a      	str	r2, [r5, #0]
 80146d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146dc:	f04f 30ff 	mov.w	r0, #4294967295
 80146e0:	81a3      	strh	r3, [r4, #12]
 80146e2:	e033      	b.n	801474c <__swsetup_r+0x98>
 80146e4:	0758      	lsls	r0, r3, #29
 80146e6:	d512      	bpl.n	801470e <__swsetup_r+0x5a>
 80146e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146ea:	b141      	cbz	r1, 80146fe <__swsetup_r+0x4a>
 80146ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146f0:	4299      	cmp	r1, r3
 80146f2:	d002      	beq.n	80146fa <__swsetup_r+0x46>
 80146f4:	4628      	mov	r0, r5
 80146f6:	f7fd ffe3 	bl	80126c0 <_free_r>
 80146fa:	2300      	movs	r3, #0
 80146fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80146fe:	89a3      	ldrh	r3, [r4, #12]
 8014700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014704:	81a3      	strh	r3, [r4, #12]
 8014706:	2300      	movs	r3, #0
 8014708:	6063      	str	r3, [r4, #4]
 801470a:	6923      	ldr	r3, [r4, #16]
 801470c:	6023      	str	r3, [r4, #0]
 801470e:	89a3      	ldrh	r3, [r4, #12]
 8014710:	f043 0308 	orr.w	r3, r3, #8
 8014714:	81a3      	strh	r3, [r4, #12]
 8014716:	6923      	ldr	r3, [r4, #16]
 8014718:	b94b      	cbnz	r3, 801472e <__swsetup_r+0x7a>
 801471a:	89a3      	ldrh	r3, [r4, #12]
 801471c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014724:	d003      	beq.n	801472e <__swsetup_r+0x7a>
 8014726:	4621      	mov	r1, r4
 8014728:	4628      	mov	r0, r5
 801472a:	f000 fc58 	bl	8014fde <__smakebuf_r>
 801472e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014732:	f013 0201 	ands.w	r2, r3, #1
 8014736:	d00a      	beq.n	801474e <__swsetup_r+0x9a>
 8014738:	2200      	movs	r2, #0
 801473a:	60a2      	str	r2, [r4, #8]
 801473c:	6962      	ldr	r2, [r4, #20]
 801473e:	4252      	negs	r2, r2
 8014740:	61a2      	str	r2, [r4, #24]
 8014742:	6922      	ldr	r2, [r4, #16]
 8014744:	b942      	cbnz	r2, 8014758 <__swsetup_r+0xa4>
 8014746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801474a:	d1c5      	bne.n	80146d8 <__swsetup_r+0x24>
 801474c:	bd38      	pop	{r3, r4, r5, pc}
 801474e:	0799      	lsls	r1, r3, #30
 8014750:	bf58      	it	pl
 8014752:	6962      	ldrpl	r2, [r4, #20]
 8014754:	60a2      	str	r2, [r4, #8]
 8014756:	e7f4      	b.n	8014742 <__swsetup_r+0x8e>
 8014758:	2000      	movs	r0, #0
 801475a:	e7f7      	b.n	801474c <__swsetup_r+0x98>
 801475c:	20000140 	.word	0x20000140

08014760 <memmove>:
 8014760:	4288      	cmp	r0, r1
 8014762:	b510      	push	{r4, lr}
 8014764:	eb01 0402 	add.w	r4, r1, r2
 8014768:	d902      	bls.n	8014770 <memmove+0x10>
 801476a:	4284      	cmp	r4, r0
 801476c:	4623      	mov	r3, r4
 801476e:	d807      	bhi.n	8014780 <memmove+0x20>
 8014770:	1e43      	subs	r3, r0, #1
 8014772:	42a1      	cmp	r1, r4
 8014774:	d008      	beq.n	8014788 <memmove+0x28>
 8014776:	f811 2b01 	ldrb.w	r2, [r1], #1
 801477a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801477e:	e7f8      	b.n	8014772 <memmove+0x12>
 8014780:	4402      	add	r2, r0
 8014782:	4601      	mov	r1, r0
 8014784:	428a      	cmp	r2, r1
 8014786:	d100      	bne.n	801478a <memmove+0x2a>
 8014788:	bd10      	pop	{r4, pc}
 801478a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801478e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014792:	e7f7      	b.n	8014784 <memmove+0x24>

08014794 <strncmp>:
 8014794:	b510      	push	{r4, lr}
 8014796:	b16a      	cbz	r2, 80147b4 <strncmp+0x20>
 8014798:	3901      	subs	r1, #1
 801479a:	1884      	adds	r4, r0, r2
 801479c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d103      	bne.n	80147b0 <strncmp+0x1c>
 80147a8:	42a0      	cmp	r0, r4
 80147aa:	d001      	beq.n	80147b0 <strncmp+0x1c>
 80147ac:	2a00      	cmp	r2, #0
 80147ae:	d1f5      	bne.n	801479c <strncmp+0x8>
 80147b0:	1ad0      	subs	r0, r2, r3
 80147b2:	bd10      	pop	{r4, pc}
 80147b4:	4610      	mov	r0, r2
 80147b6:	e7fc      	b.n	80147b2 <strncmp+0x1e>

080147b8 <_sbrk_r>:
 80147b8:	b538      	push	{r3, r4, r5, lr}
 80147ba:	2300      	movs	r3, #0
 80147bc:	4d05      	ldr	r5, [pc, #20]	@ (80147d4 <_sbrk_r+0x1c>)
 80147be:	4604      	mov	r4, r0
 80147c0:	4608      	mov	r0, r1
 80147c2:	602b      	str	r3, [r5, #0]
 80147c4:	f7ee fae8 	bl	8002d98 <_sbrk>
 80147c8:	1c43      	adds	r3, r0, #1
 80147ca:	d102      	bne.n	80147d2 <_sbrk_r+0x1a>
 80147cc:	682b      	ldr	r3, [r5, #0]
 80147ce:	b103      	cbz	r3, 80147d2 <_sbrk_r+0x1a>
 80147d0:	6023      	str	r3, [r4, #0]
 80147d2:	bd38      	pop	{r3, r4, r5, pc}
 80147d4:	20001834 	.word	0x20001834

080147d8 <memcpy>:
 80147d8:	440a      	add	r2, r1
 80147da:	1e43      	subs	r3, r0, #1
 80147dc:	4291      	cmp	r1, r2
 80147de:	d100      	bne.n	80147e2 <memcpy+0xa>
 80147e0:	4770      	bx	lr
 80147e2:	b510      	push	{r4, lr}
 80147e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147e8:	4291      	cmp	r1, r2
 80147ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147ee:	d1f9      	bne.n	80147e4 <memcpy+0xc>
 80147f0:	bd10      	pop	{r4, pc}
 80147f2:	0000      	movs	r0, r0
 80147f4:	0000      	movs	r0, r0
	...

080147f8 <nan>:
 80147f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014800 <nan+0x8>
 80147fc:	4770      	bx	lr
 80147fe:	bf00      	nop
 8014800:	00000000 	.word	0x00000000
 8014804:	7ff80000 	.word	0x7ff80000

08014808 <__assert_func>:
 8014808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801480a:	4614      	mov	r4, r2
 801480c:	461a      	mov	r2, r3
 801480e:	4b09      	ldr	r3, [pc, #36]	@ (8014834 <__assert_func+0x2c>)
 8014810:	4605      	mov	r5, r0
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	68d8      	ldr	r0, [r3, #12]
 8014816:	b954      	cbnz	r4, 801482e <__assert_func+0x26>
 8014818:	4b07      	ldr	r3, [pc, #28]	@ (8014838 <__assert_func+0x30>)
 801481a:	461c      	mov	r4, r3
 801481c:	9100      	str	r1, [sp, #0]
 801481e:	4907      	ldr	r1, [pc, #28]	@ (801483c <__assert_func+0x34>)
 8014820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014824:	462b      	mov	r3, r5
 8014826:	f000 fba3 	bl	8014f70 <fiprintf>
 801482a:	f000 fc37 	bl	801509c <abort>
 801482e:	4b04      	ldr	r3, [pc, #16]	@ (8014840 <__assert_func+0x38>)
 8014830:	e7f4      	b.n	801481c <__assert_func+0x14>
 8014832:	bf00      	nop
 8014834:	20000140 	.word	0x20000140
 8014838:	080157ad 	.word	0x080157ad
 801483c:	0801577f 	.word	0x0801577f
 8014840:	08015772 	.word	0x08015772

08014844 <_calloc_r>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	fba1 5402 	umull	r5, r4, r1, r2
 801484a:	b93c      	cbnz	r4, 801485c <_calloc_r+0x18>
 801484c:	4629      	mov	r1, r5
 801484e:	f7fd ffab 	bl	80127a8 <_malloc_r>
 8014852:	4606      	mov	r6, r0
 8014854:	b928      	cbnz	r0, 8014862 <_calloc_r+0x1e>
 8014856:	2600      	movs	r6, #0
 8014858:	4630      	mov	r0, r6
 801485a:	bd70      	pop	{r4, r5, r6, pc}
 801485c:	220c      	movs	r2, #12
 801485e:	6002      	str	r2, [r0, #0]
 8014860:	e7f9      	b.n	8014856 <_calloc_r+0x12>
 8014862:	462a      	mov	r2, r5
 8014864:	4621      	mov	r1, r4
 8014866:	f7fd f842 	bl	80118ee <memset>
 801486a:	e7f5      	b.n	8014858 <_calloc_r+0x14>

0801486c <rshift>:
 801486c:	6903      	ldr	r3, [r0, #16]
 801486e:	114a      	asrs	r2, r1, #5
 8014870:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014878:	f100 0414 	add.w	r4, r0, #20
 801487c:	dd45      	ble.n	801490a <rshift+0x9e>
 801487e:	f011 011f 	ands.w	r1, r1, #31
 8014882:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014886:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801488a:	d10c      	bne.n	80148a6 <rshift+0x3a>
 801488c:	f100 0710 	add.w	r7, r0, #16
 8014890:	4629      	mov	r1, r5
 8014892:	42b1      	cmp	r1, r6
 8014894:	d334      	bcc.n	8014900 <rshift+0x94>
 8014896:	1a9b      	subs	r3, r3, r2
 8014898:	1eea      	subs	r2, r5, #3
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	4296      	cmp	r6, r2
 801489e:	bf38      	it	cc
 80148a0:	2300      	movcc	r3, #0
 80148a2:	4423      	add	r3, r4
 80148a4:	e015      	b.n	80148d2 <rshift+0x66>
 80148a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80148aa:	f1c1 0820 	rsb	r8, r1, #32
 80148ae:	f105 0e04 	add.w	lr, r5, #4
 80148b2:	46a1      	mov	r9, r4
 80148b4:	40cf      	lsrs	r7, r1
 80148b6:	4576      	cmp	r6, lr
 80148b8:	46f4      	mov	ip, lr
 80148ba:	d815      	bhi.n	80148e8 <rshift+0x7c>
 80148bc:	1a9a      	subs	r2, r3, r2
 80148be:	3501      	adds	r5, #1
 80148c0:	0092      	lsls	r2, r2, #2
 80148c2:	3a04      	subs	r2, #4
 80148c4:	42ae      	cmp	r6, r5
 80148c6:	bf38      	it	cc
 80148c8:	2200      	movcc	r2, #0
 80148ca:	18a3      	adds	r3, r4, r2
 80148cc:	50a7      	str	r7, [r4, r2]
 80148ce:	b107      	cbz	r7, 80148d2 <rshift+0x66>
 80148d0:	3304      	adds	r3, #4
 80148d2:	1b1a      	subs	r2, r3, r4
 80148d4:	42a3      	cmp	r3, r4
 80148d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80148da:	bf08      	it	eq
 80148dc:	2300      	moveq	r3, #0
 80148de:	6102      	str	r2, [r0, #16]
 80148e0:	bf08      	it	eq
 80148e2:	6143      	streq	r3, [r0, #20]
 80148e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148e8:	f8dc c000 	ldr.w	ip, [ip]
 80148ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80148f0:	ea4c 0707 	orr.w	r7, ip, r7
 80148f4:	f849 7b04 	str.w	r7, [r9], #4
 80148f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80148fc:	40cf      	lsrs	r7, r1
 80148fe:	e7da      	b.n	80148b6 <rshift+0x4a>
 8014900:	f851 cb04 	ldr.w	ip, [r1], #4
 8014904:	f847 cf04 	str.w	ip, [r7, #4]!
 8014908:	e7c3      	b.n	8014892 <rshift+0x26>
 801490a:	4623      	mov	r3, r4
 801490c:	e7e1      	b.n	80148d2 <rshift+0x66>

0801490e <__hexdig_fun>:
 801490e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014912:	2b09      	cmp	r3, #9
 8014914:	d802      	bhi.n	801491c <__hexdig_fun+0xe>
 8014916:	3820      	subs	r0, #32
 8014918:	b2c0      	uxtb	r0, r0
 801491a:	4770      	bx	lr
 801491c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014920:	2b05      	cmp	r3, #5
 8014922:	d801      	bhi.n	8014928 <__hexdig_fun+0x1a>
 8014924:	3847      	subs	r0, #71	@ 0x47
 8014926:	e7f7      	b.n	8014918 <__hexdig_fun+0xa>
 8014928:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801492c:	2b05      	cmp	r3, #5
 801492e:	d801      	bhi.n	8014934 <__hexdig_fun+0x26>
 8014930:	3827      	subs	r0, #39	@ 0x27
 8014932:	e7f1      	b.n	8014918 <__hexdig_fun+0xa>
 8014934:	2000      	movs	r0, #0
 8014936:	4770      	bx	lr

08014938 <__gethex>:
 8014938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	b085      	sub	sp, #20
 801493e:	468a      	mov	sl, r1
 8014940:	4690      	mov	r8, r2
 8014942:	9302      	str	r3, [sp, #8]
 8014944:	680b      	ldr	r3, [r1, #0]
 8014946:	9001      	str	r0, [sp, #4]
 8014948:	1c9c      	adds	r4, r3, #2
 801494a:	46a1      	mov	r9, r4
 801494c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014950:	2830      	cmp	r0, #48	@ 0x30
 8014952:	d0fa      	beq.n	801494a <__gethex+0x12>
 8014954:	eba9 0303 	sub.w	r3, r9, r3
 8014958:	f1a3 0b02 	sub.w	fp, r3, #2
 801495c:	f7ff ffd7 	bl	801490e <__hexdig_fun>
 8014960:	4605      	mov	r5, r0
 8014962:	2800      	cmp	r0, #0
 8014964:	d166      	bne.n	8014a34 <__gethex+0xfc>
 8014966:	2201      	movs	r2, #1
 8014968:	499e      	ldr	r1, [pc, #632]	@ (8014be4 <__gethex+0x2ac>)
 801496a:	4648      	mov	r0, r9
 801496c:	f7ff ff12 	bl	8014794 <strncmp>
 8014970:	4607      	mov	r7, r0
 8014972:	2800      	cmp	r0, #0
 8014974:	d165      	bne.n	8014a42 <__gethex+0x10a>
 8014976:	f899 0001 	ldrb.w	r0, [r9, #1]
 801497a:	4626      	mov	r6, r4
 801497c:	f7ff ffc7 	bl	801490e <__hexdig_fun>
 8014980:	2800      	cmp	r0, #0
 8014982:	d060      	beq.n	8014a46 <__gethex+0x10e>
 8014984:	4623      	mov	r3, r4
 8014986:	7818      	ldrb	r0, [r3, #0]
 8014988:	4699      	mov	r9, r3
 801498a:	3301      	adds	r3, #1
 801498c:	2830      	cmp	r0, #48	@ 0x30
 801498e:	d0fa      	beq.n	8014986 <__gethex+0x4e>
 8014990:	f7ff ffbd 	bl	801490e <__hexdig_fun>
 8014994:	fab0 f580 	clz	r5, r0
 8014998:	f04f 0b01 	mov.w	fp, #1
 801499c:	096d      	lsrs	r5, r5, #5
 801499e:	464a      	mov	r2, r9
 80149a0:	4616      	mov	r6, r2
 80149a2:	3201      	adds	r2, #1
 80149a4:	7830      	ldrb	r0, [r6, #0]
 80149a6:	f7ff ffb2 	bl	801490e <__hexdig_fun>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	d1f8      	bne.n	80149a0 <__gethex+0x68>
 80149ae:	2201      	movs	r2, #1
 80149b0:	498c      	ldr	r1, [pc, #560]	@ (8014be4 <__gethex+0x2ac>)
 80149b2:	4630      	mov	r0, r6
 80149b4:	f7ff feee 	bl	8014794 <strncmp>
 80149b8:	2800      	cmp	r0, #0
 80149ba:	d13e      	bne.n	8014a3a <__gethex+0x102>
 80149bc:	b944      	cbnz	r4, 80149d0 <__gethex+0x98>
 80149be:	1c74      	adds	r4, r6, #1
 80149c0:	4622      	mov	r2, r4
 80149c2:	4616      	mov	r6, r2
 80149c4:	3201      	adds	r2, #1
 80149c6:	7830      	ldrb	r0, [r6, #0]
 80149c8:	f7ff ffa1 	bl	801490e <__hexdig_fun>
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d1f8      	bne.n	80149c2 <__gethex+0x8a>
 80149d0:	1ba4      	subs	r4, r4, r6
 80149d2:	00a7      	lsls	r7, r4, #2
 80149d4:	7833      	ldrb	r3, [r6, #0]
 80149d6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80149da:	2b50      	cmp	r3, #80	@ 0x50
 80149dc:	d13d      	bne.n	8014a5a <__gethex+0x122>
 80149de:	7873      	ldrb	r3, [r6, #1]
 80149e0:	2b2b      	cmp	r3, #43	@ 0x2b
 80149e2:	d032      	beq.n	8014a4a <__gethex+0x112>
 80149e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80149e6:	d033      	beq.n	8014a50 <__gethex+0x118>
 80149e8:	1c71      	adds	r1, r6, #1
 80149ea:	2400      	movs	r4, #0
 80149ec:	7808      	ldrb	r0, [r1, #0]
 80149ee:	f7ff ff8e 	bl	801490e <__hexdig_fun>
 80149f2:	1e43      	subs	r3, r0, #1
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	2b18      	cmp	r3, #24
 80149f8:	d82f      	bhi.n	8014a5a <__gethex+0x122>
 80149fa:	f1a0 0210 	sub.w	r2, r0, #16
 80149fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a02:	f7ff ff84 	bl	801490e <__hexdig_fun>
 8014a06:	f100 3cff 	add.w	ip, r0, #4294967295
 8014a0a:	230a      	movs	r3, #10
 8014a0c:	fa5f fc8c 	uxtb.w	ip, ip
 8014a10:	f1bc 0f18 	cmp.w	ip, #24
 8014a14:	d91e      	bls.n	8014a54 <__gethex+0x11c>
 8014a16:	b104      	cbz	r4, 8014a1a <__gethex+0xe2>
 8014a18:	4252      	negs	r2, r2
 8014a1a:	4417      	add	r7, r2
 8014a1c:	f8ca 1000 	str.w	r1, [sl]
 8014a20:	b1ed      	cbz	r5, 8014a5e <__gethex+0x126>
 8014a22:	f1bb 0f00 	cmp.w	fp, #0
 8014a26:	bf0c      	ite	eq
 8014a28:	2506      	moveq	r5, #6
 8014a2a:	2500      	movne	r5, #0
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	b005      	add	sp, #20
 8014a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a34:	2500      	movs	r5, #0
 8014a36:	462c      	mov	r4, r5
 8014a38:	e7b1      	b.n	801499e <__gethex+0x66>
 8014a3a:	2c00      	cmp	r4, #0
 8014a3c:	d1c8      	bne.n	80149d0 <__gethex+0x98>
 8014a3e:	4627      	mov	r7, r4
 8014a40:	e7c8      	b.n	80149d4 <__gethex+0x9c>
 8014a42:	464e      	mov	r6, r9
 8014a44:	462f      	mov	r7, r5
 8014a46:	2501      	movs	r5, #1
 8014a48:	e7c4      	b.n	80149d4 <__gethex+0x9c>
 8014a4a:	2400      	movs	r4, #0
 8014a4c:	1cb1      	adds	r1, r6, #2
 8014a4e:	e7cd      	b.n	80149ec <__gethex+0xb4>
 8014a50:	2401      	movs	r4, #1
 8014a52:	e7fb      	b.n	8014a4c <__gethex+0x114>
 8014a54:	fb03 0002 	mla	r0, r3, r2, r0
 8014a58:	e7cf      	b.n	80149fa <__gethex+0xc2>
 8014a5a:	4631      	mov	r1, r6
 8014a5c:	e7de      	b.n	8014a1c <__gethex+0xe4>
 8014a5e:	eba6 0309 	sub.w	r3, r6, r9
 8014a62:	4629      	mov	r1, r5
 8014a64:	3b01      	subs	r3, #1
 8014a66:	2b07      	cmp	r3, #7
 8014a68:	dc0a      	bgt.n	8014a80 <__gethex+0x148>
 8014a6a:	9801      	ldr	r0, [sp, #4]
 8014a6c:	f7fd ff28 	bl	80128c0 <_Balloc>
 8014a70:	4604      	mov	r4, r0
 8014a72:	b940      	cbnz	r0, 8014a86 <__gethex+0x14e>
 8014a74:	4b5c      	ldr	r3, [pc, #368]	@ (8014be8 <__gethex+0x2b0>)
 8014a76:	4602      	mov	r2, r0
 8014a78:	21e4      	movs	r1, #228	@ 0xe4
 8014a7a:	485c      	ldr	r0, [pc, #368]	@ (8014bec <__gethex+0x2b4>)
 8014a7c:	f7ff fec4 	bl	8014808 <__assert_func>
 8014a80:	3101      	adds	r1, #1
 8014a82:	105b      	asrs	r3, r3, #1
 8014a84:	e7ef      	b.n	8014a66 <__gethex+0x12e>
 8014a86:	f100 0a14 	add.w	sl, r0, #20
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	4655      	mov	r5, sl
 8014a8e:	469b      	mov	fp, r3
 8014a90:	45b1      	cmp	r9, r6
 8014a92:	d337      	bcc.n	8014b04 <__gethex+0x1cc>
 8014a94:	f845 bb04 	str.w	fp, [r5], #4
 8014a98:	eba5 050a 	sub.w	r5, r5, sl
 8014a9c:	4658      	mov	r0, fp
 8014a9e:	10ad      	asrs	r5, r5, #2
 8014aa0:	6125      	str	r5, [r4, #16]
 8014aa2:	016d      	lsls	r5, r5, #5
 8014aa4:	f7fe f800 	bl	8012aa8 <__hi0bits>
 8014aa8:	f8d8 6000 	ldr.w	r6, [r8]
 8014aac:	1a2d      	subs	r5, r5, r0
 8014aae:	42b5      	cmp	r5, r6
 8014ab0:	dd54      	ble.n	8014b5c <__gethex+0x224>
 8014ab2:	1bad      	subs	r5, r5, r6
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	f7fe fb9d 	bl	80131f6 <__any_on>
 8014abc:	4681      	mov	r9, r0
 8014abe:	b178      	cbz	r0, 8014ae0 <__gethex+0x1a8>
 8014ac0:	1e6b      	subs	r3, r5, #1
 8014ac2:	f04f 0901 	mov.w	r9, #1
 8014ac6:	1159      	asrs	r1, r3, #5
 8014ac8:	f003 021f 	and.w	r2, r3, #31
 8014acc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014ad0:	fa09 f202 	lsl.w	r2, r9, r2
 8014ad4:	420a      	tst	r2, r1
 8014ad6:	d003      	beq.n	8014ae0 <__gethex+0x1a8>
 8014ad8:	454b      	cmp	r3, r9
 8014ada:	dc36      	bgt.n	8014b4a <__gethex+0x212>
 8014adc:	f04f 0902 	mov.w	r9, #2
 8014ae0:	442f      	add	r7, r5
 8014ae2:	4629      	mov	r1, r5
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f7ff fec1 	bl	801486c <rshift>
 8014aea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014aee:	42bb      	cmp	r3, r7
 8014af0:	da42      	bge.n	8014b78 <__gethex+0x240>
 8014af2:	4621      	mov	r1, r4
 8014af4:	9801      	ldr	r0, [sp, #4]
 8014af6:	f7fd ff23 	bl	8012940 <_Bfree>
 8014afa:	2300      	movs	r3, #0
 8014afc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014afe:	25a3      	movs	r5, #163	@ 0xa3
 8014b00:	6013      	str	r3, [r2, #0]
 8014b02:	e793      	b.n	8014a2c <__gethex+0xf4>
 8014b04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014b08:	2a2e      	cmp	r2, #46	@ 0x2e
 8014b0a:	d012      	beq.n	8014b32 <__gethex+0x1fa>
 8014b0c:	2b20      	cmp	r3, #32
 8014b0e:	d104      	bne.n	8014b1a <__gethex+0x1e2>
 8014b10:	f845 bb04 	str.w	fp, [r5], #4
 8014b14:	f04f 0b00 	mov.w	fp, #0
 8014b18:	465b      	mov	r3, fp
 8014b1a:	7830      	ldrb	r0, [r6, #0]
 8014b1c:	9303      	str	r3, [sp, #12]
 8014b1e:	f7ff fef6 	bl	801490e <__hexdig_fun>
 8014b22:	9b03      	ldr	r3, [sp, #12]
 8014b24:	f000 000f 	and.w	r0, r0, #15
 8014b28:	4098      	lsls	r0, r3
 8014b2a:	3304      	adds	r3, #4
 8014b2c:	ea4b 0b00 	orr.w	fp, fp, r0
 8014b30:	e7ae      	b.n	8014a90 <__gethex+0x158>
 8014b32:	45b1      	cmp	r9, r6
 8014b34:	d8ea      	bhi.n	8014b0c <__gethex+0x1d4>
 8014b36:	2201      	movs	r2, #1
 8014b38:	492a      	ldr	r1, [pc, #168]	@ (8014be4 <__gethex+0x2ac>)
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	9303      	str	r3, [sp, #12]
 8014b3e:	f7ff fe29 	bl	8014794 <strncmp>
 8014b42:	9b03      	ldr	r3, [sp, #12]
 8014b44:	2800      	cmp	r0, #0
 8014b46:	d1e1      	bne.n	8014b0c <__gethex+0x1d4>
 8014b48:	e7a2      	b.n	8014a90 <__gethex+0x158>
 8014b4a:	1ea9      	subs	r1, r5, #2
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	f7fe fb52 	bl	80131f6 <__any_on>
 8014b52:	2800      	cmp	r0, #0
 8014b54:	d0c2      	beq.n	8014adc <__gethex+0x1a4>
 8014b56:	f04f 0903 	mov.w	r9, #3
 8014b5a:	e7c1      	b.n	8014ae0 <__gethex+0x1a8>
 8014b5c:	da09      	bge.n	8014b72 <__gethex+0x23a>
 8014b5e:	1b75      	subs	r5, r6, r5
 8014b60:	4621      	mov	r1, r4
 8014b62:	9801      	ldr	r0, [sp, #4]
 8014b64:	462a      	mov	r2, r5
 8014b66:	1b7f      	subs	r7, r7, r5
 8014b68:	f7fe f904 	bl	8012d74 <__lshift>
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	f100 0a14 	add.w	sl, r0, #20
 8014b72:	f04f 0900 	mov.w	r9, #0
 8014b76:	e7b8      	b.n	8014aea <__gethex+0x1b2>
 8014b78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014b7c:	42bd      	cmp	r5, r7
 8014b7e:	dd6f      	ble.n	8014c60 <__gethex+0x328>
 8014b80:	1bed      	subs	r5, r5, r7
 8014b82:	42ae      	cmp	r6, r5
 8014b84:	dc34      	bgt.n	8014bf0 <__gethex+0x2b8>
 8014b86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b8a:	2b02      	cmp	r3, #2
 8014b8c:	d022      	beq.n	8014bd4 <__gethex+0x29c>
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	d024      	beq.n	8014bdc <__gethex+0x2a4>
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	d115      	bne.n	8014bc2 <__gethex+0x28a>
 8014b96:	42ae      	cmp	r6, r5
 8014b98:	d113      	bne.n	8014bc2 <__gethex+0x28a>
 8014b9a:	2e01      	cmp	r6, #1
 8014b9c:	d10b      	bne.n	8014bb6 <__gethex+0x27e>
 8014b9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ba2:	2562      	movs	r5, #98	@ 0x62
 8014ba4:	9a02      	ldr	r2, [sp, #8]
 8014ba6:	6013      	str	r3, [r2, #0]
 8014ba8:	2301      	movs	r3, #1
 8014baa:	6123      	str	r3, [r4, #16]
 8014bac:	f8ca 3000 	str.w	r3, [sl]
 8014bb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014bb2:	601c      	str	r4, [r3, #0]
 8014bb4:	e73a      	b.n	8014a2c <__gethex+0xf4>
 8014bb6:	1e71      	subs	r1, r6, #1
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f7fe fb1c 	bl	80131f6 <__any_on>
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	d1ed      	bne.n	8014b9e <__gethex+0x266>
 8014bc2:	4621      	mov	r1, r4
 8014bc4:	9801      	ldr	r0, [sp, #4]
 8014bc6:	f7fd febb 	bl	8012940 <_Bfree>
 8014bca:	2300      	movs	r3, #0
 8014bcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014bce:	2550      	movs	r5, #80	@ 0x50
 8014bd0:	6013      	str	r3, [r2, #0]
 8014bd2:	e72b      	b.n	8014a2c <__gethex+0xf4>
 8014bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d1f3      	bne.n	8014bc2 <__gethex+0x28a>
 8014bda:	e7e0      	b.n	8014b9e <__gethex+0x266>
 8014bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d1dd      	bne.n	8014b9e <__gethex+0x266>
 8014be2:	e7ee      	b.n	8014bc2 <__gethex+0x28a>
 8014be4:	08015600 	.word	0x08015600
 8014be8:	08015495 	.word	0x08015495
 8014bec:	080157ae 	.word	0x080157ae
 8014bf0:	1e6f      	subs	r7, r5, #1
 8014bf2:	f1b9 0f00 	cmp.w	r9, #0
 8014bf6:	d130      	bne.n	8014c5a <__gethex+0x322>
 8014bf8:	b127      	cbz	r7, 8014c04 <__gethex+0x2cc>
 8014bfa:	4639      	mov	r1, r7
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	f7fe fafa 	bl	80131f6 <__any_on>
 8014c02:	4681      	mov	r9, r0
 8014c04:	117a      	asrs	r2, r7, #5
 8014c06:	2301      	movs	r3, #1
 8014c08:	f007 071f 	and.w	r7, r7, #31
 8014c0c:	4629      	mov	r1, r5
 8014c0e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014c12:	4620      	mov	r0, r4
 8014c14:	40bb      	lsls	r3, r7
 8014c16:	1b76      	subs	r6, r6, r5
 8014c18:	2502      	movs	r5, #2
 8014c1a:	4213      	tst	r3, r2
 8014c1c:	bf18      	it	ne
 8014c1e:	f049 0902 	orrne.w	r9, r9, #2
 8014c22:	f7ff fe23 	bl	801486c <rshift>
 8014c26:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014c2a:	f1b9 0f00 	cmp.w	r9, #0
 8014c2e:	d047      	beq.n	8014cc0 <__gethex+0x388>
 8014c30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014c34:	2b02      	cmp	r3, #2
 8014c36:	d015      	beq.n	8014c64 <__gethex+0x32c>
 8014c38:	2b03      	cmp	r3, #3
 8014c3a:	d017      	beq.n	8014c6c <__gethex+0x334>
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d109      	bne.n	8014c54 <__gethex+0x31c>
 8014c40:	f019 0f02 	tst.w	r9, #2
 8014c44:	d006      	beq.n	8014c54 <__gethex+0x31c>
 8014c46:	f8da 3000 	ldr.w	r3, [sl]
 8014c4a:	ea49 0903 	orr.w	r9, r9, r3
 8014c4e:	f019 0f01 	tst.w	r9, #1
 8014c52:	d10e      	bne.n	8014c72 <__gethex+0x33a>
 8014c54:	f045 0510 	orr.w	r5, r5, #16
 8014c58:	e032      	b.n	8014cc0 <__gethex+0x388>
 8014c5a:	f04f 0901 	mov.w	r9, #1
 8014c5e:	e7d1      	b.n	8014c04 <__gethex+0x2cc>
 8014c60:	2501      	movs	r5, #1
 8014c62:	e7e2      	b.n	8014c2a <__gethex+0x2f2>
 8014c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c66:	f1c3 0301 	rsb	r3, r3, #1
 8014c6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d0f0      	beq.n	8014c54 <__gethex+0x31c>
 8014c72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c76:	f104 0314 	add.w	r3, r4, #20
 8014c7a:	f04f 0c00 	mov.w	ip, #0
 8014c7e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014c82:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014c86:	4618      	mov	r0, r3
 8014c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014c90:	d01b      	beq.n	8014cca <__gethex+0x392>
 8014c92:	3201      	adds	r2, #1
 8014c94:	6002      	str	r2, [r0, #0]
 8014c96:	2d02      	cmp	r5, #2
 8014c98:	f104 0314 	add.w	r3, r4, #20
 8014c9c:	d13c      	bne.n	8014d18 <__gethex+0x3e0>
 8014c9e:	f8d8 2000 	ldr.w	r2, [r8]
 8014ca2:	3a01      	subs	r2, #1
 8014ca4:	42b2      	cmp	r2, r6
 8014ca6:	d109      	bne.n	8014cbc <__gethex+0x384>
 8014ca8:	1171      	asrs	r1, r6, #5
 8014caa:	2201      	movs	r2, #1
 8014cac:	f006 061f 	and.w	r6, r6, #31
 8014cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014cb4:	fa02 f606 	lsl.w	r6, r2, r6
 8014cb8:	421e      	tst	r6, r3
 8014cba:	d13a      	bne.n	8014d32 <__gethex+0x3fa>
 8014cbc:	f045 0520 	orr.w	r5, r5, #32
 8014cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cc2:	601c      	str	r4, [r3, #0]
 8014cc4:	9b02      	ldr	r3, [sp, #8]
 8014cc6:	601f      	str	r7, [r3, #0]
 8014cc8:	e6b0      	b.n	8014a2c <__gethex+0xf4>
 8014cca:	4299      	cmp	r1, r3
 8014ccc:	f843 cc04 	str.w	ip, [r3, #-4]
 8014cd0:	d8d9      	bhi.n	8014c86 <__gethex+0x34e>
 8014cd2:	68a3      	ldr	r3, [r4, #8]
 8014cd4:	459b      	cmp	fp, r3
 8014cd6:	db17      	blt.n	8014d08 <__gethex+0x3d0>
 8014cd8:	6861      	ldr	r1, [r4, #4]
 8014cda:	9801      	ldr	r0, [sp, #4]
 8014cdc:	3101      	adds	r1, #1
 8014cde:	f7fd fdef 	bl	80128c0 <_Balloc>
 8014ce2:	4681      	mov	r9, r0
 8014ce4:	b918      	cbnz	r0, 8014cee <__gethex+0x3b6>
 8014ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8014d50 <__gethex+0x418>)
 8014ce8:	4602      	mov	r2, r0
 8014cea:	2184      	movs	r1, #132	@ 0x84
 8014cec:	e6c5      	b.n	8014a7a <__gethex+0x142>
 8014cee:	6922      	ldr	r2, [r4, #16]
 8014cf0:	f104 010c 	add.w	r1, r4, #12
 8014cf4:	300c      	adds	r0, #12
 8014cf6:	3202      	adds	r2, #2
 8014cf8:	0092      	lsls	r2, r2, #2
 8014cfa:	f7ff fd6d 	bl	80147d8 <memcpy>
 8014cfe:	4621      	mov	r1, r4
 8014d00:	464c      	mov	r4, r9
 8014d02:	9801      	ldr	r0, [sp, #4]
 8014d04:	f7fd fe1c 	bl	8012940 <_Bfree>
 8014d08:	6923      	ldr	r3, [r4, #16]
 8014d0a:	1c5a      	adds	r2, r3, #1
 8014d0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014d10:	6122      	str	r2, [r4, #16]
 8014d12:	2201      	movs	r2, #1
 8014d14:	615a      	str	r2, [r3, #20]
 8014d16:	e7be      	b.n	8014c96 <__gethex+0x35e>
 8014d18:	6922      	ldr	r2, [r4, #16]
 8014d1a:	455a      	cmp	r2, fp
 8014d1c:	dd0b      	ble.n	8014d36 <__gethex+0x3fe>
 8014d1e:	2101      	movs	r1, #1
 8014d20:	4620      	mov	r0, r4
 8014d22:	f7ff fda3 	bl	801486c <rshift>
 8014d26:	3701      	adds	r7, #1
 8014d28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014d2c:	42bb      	cmp	r3, r7
 8014d2e:	f6ff aee0 	blt.w	8014af2 <__gethex+0x1ba>
 8014d32:	2501      	movs	r5, #1
 8014d34:	e7c2      	b.n	8014cbc <__gethex+0x384>
 8014d36:	f016 061f 	ands.w	r6, r6, #31
 8014d3a:	d0fa      	beq.n	8014d32 <__gethex+0x3fa>
 8014d3c:	4453      	add	r3, sl
 8014d3e:	f1c6 0620 	rsb	r6, r6, #32
 8014d42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014d46:	f7fd feaf 	bl	8012aa8 <__hi0bits>
 8014d4a:	42b0      	cmp	r0, r6
 8014d4c:	dbe7      	blt.n	8014d1e <__gethex+0x3e6>
 8014d4e:	e7f0      	b.n	8014d32 <__gethex+0x3fa>
 8014d50:	08015495 	.word	0x08015495

08014d54 <L_shift>:
 8014d54:	f1c2 0208 	rsb	r2, r2, #8
 8014d58:	0092      	lsls	r2, r2, #2
 8014d5a:	b570      	push	{r4, r5, r6, lr}
 8014d5c:	f1c2 0620 	rsb	r6, r2, #32
 8014d60:	6843      	ldr	r3, [r0, #4]
 8014d62:	6804      	ldr	r4, [r0, #0]
 8014d64:	fa03 f506 	lsl.w	r5, r3, r6
 8014d68:	40d3      	lsrs	r3, r2
 8014d6a:	432c      	orrs	r4, r5
 8014d6c:	6004      	str	r4, [r0, #0]
 8014d6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014d72:	4288      	cmp	r0, r1
 8014d74:	d3f4      	bcc.n	8014d60 <L_shift+0xc>
 8014d76:	bd70      	pop	{r4, r5, r6, pc}

08014d78 <__match>:
 8014d78:	6803      	ldr	r3, [r0, #0]
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	b530      	push	{r4, r5, lr}
 8014d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d82:	b914      	cbnz	r4, 8014d8a <__match+0x12>
 8014d84:	6003      	str	r3, [r0, #0]
 8014d86:	2001      	movs	r0, #1
 8014d88:	bd30      	pop	{r4, r5, pc}
 8014d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014d92:	2d19      	cmp	r5, #25
 8014d94:	bf98      	it	ls
 8014d96:	3220      	addls	r2, #32
 8014d98:	42a2      	cmp	r2, r4
 8014d9a:	d0f0      	beq.n	8014d7e <__match+0x6>
 8014d9c:	2000      	movs	r0, #0
 8014d9e:	e7f3      	b.n	8014d88 <__match+0x10>

08014da0 <__hexnan>:
 8014da0:	680b      	ldr	r3, [r1, #0]
 8014da2:	6801      	ldr	r1, [r0, #0]
 8014da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da8:	115e      	asrs	r6, r3, #5
 8014daa:	f013 031f 	ands.w	r3, r3, #31
 8014dae:	f04f 0500 	mov.w	r5, #0
 8014db2:	b087      	sub	sp, #28
 8014db4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014db8:	4682      	mov	sl, r0
 8014dba:	4690      	mov	r8, r2
 8014dbc:	46ab      	mov	fp, r5
 8014dbe:	bf18      	it	ne
 8014dc0:	3604      	addne	r6, #4
 8014dc2:	9301      	str	r3, [sp, #4]
 8014dc4:	9502      	str	r5, [sp, #8]
 8014dc6:	1f37      	subs	r7, r6, #4
 8014dc8:	f846 5c04 	str.w	r5, [r6, #-4]
 8014dcc:	46b9      	mov	r9, r7
 8014dce:	463c      	mov	r4, r7
 8014dd0:	1c4b      	adds	r3, r1, #1
 8014dd2:	784a      	ldrb	r2, [r1, #1]
 8014dd4:	9303      	str	r3, [sp, #12]
 8014dd6:	b342      	cbz	r2, 8014e2a <__hexnan+0x8a>
 8014dd8:	4610      	mov	r0, r2
 8014dda:	9105      	str	r1, [sp, #20]
 8014ddc:	9204      	str	r2, [sp, #16]
 8014dde:	f7ff fd96 	bl	801490e <__hexdig_fun>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	d151      	bne.n	8014e8a <__hexnan+0xea>
 8014de6:	9a04      	ldr	r2, [sp, #16]
 8014de8:	9905      	ldr	r1, [sp, #20]
 8014dea:	2a20      	cmp	r2, #32
 8014dec:	d818      	bhi.n	8014e20 <__hexnan+0x80>
 8014dee:	9b02      	ldr	r3, [sp, #8]
 8014df0:	459b      	cmp	fp, r3
 8014df2:	dd13      	ble.n	8014e1c <__hexnan+0x7c>
 8014df4:	454c      	cmp	r4, r9
 8014df6:	d206      	bcs.n	8014e06 <__hexnan+0x66>
 8014df8:	2d07      	cmp	r5, #7
 8014dfa:	dc04      	bgt.n	8014e06 <__hexnan+0x66>
 8014dfc:	462a      	mov	r2, r5
 8014dfe:	4649      	mov	r1, r9
 8014e00:	4620      	mov	r0, r4
 8014e02:	f7ff ffa7 	bl	8014d54 <L_shift>
 8014e06:	4544      	cmp	r4, r8
 8014e08:	d951      	bls.n	8014eae <__hexnan+0x10e>
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	f1a4 0904 	sub.w	r9, r4, #4
 8014e10:	f8cd b008 	str.w	fp, [sp, #8]
 8014e14:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e18:	461d      	mov	r5, r3
 8014e1a:	464c      	mov	r4, r9
 8014e1c:	9903      	ldr	r1, [sp, #12]
 8014e1e:	e7d7      	b.n	8014dd0 <__hexnan+0x30>
 8014e20:	2a29      	cmp	r2, #41	@ 0x29
 8014e22:	d156      	bne.n	8014ed2 <__hexnan+0x132>
 8014e24:	3102      	adds	r1, #2
 8014e26:	f8ca 1000 	str.w	r1, [sl]
 8014e2a:	f1bb 0f00 	cmp.w	fp, #0
 8014e2e:	d050      	beq.n	8014ed2 <__hexnan+0x132>
 8014e30:	454c      	cmp	r4, r9
 8014e32:	d206      	bcs.n	8014e42 <__hexnan+0xa2>
 8014e34:	2d07      	cmp	r5, #7
 8014e36:	dc04      	bgt.n	8014e42 <__hexnan+0xa2>
 8014e38:	462a      	mov	r2, r5
 8014e3a:	4649      	mov	r1, r9
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	f7ff ff89 	bl	8014d54 <L_shift>
 8014e42:	4544      	cmp	r4, r8
 8014e44:	d935      	bls.n	8014eb2 <__hexnan+0x112>
 8014e46:	f1a8 0204 	sub.w	r2, r8, #4
 8014e4a:	4623      	mov	r3, r4
 8014e4c:	f853 1b04 	ldr.w	r1, [r3], #4
 8014e50:	429f      	cmp	r7, r3
 8014e52:	f842 1f04 	str.w	r1, [r2, #4]!
 8014e56:	d2f9      	bcs.n	8014e4c <__hexnan+0xac>
 8014e58:	1b3b      	subs	r3, r7, r4
 8014e5a:	3e03      	subs	r6, #3
 8014e5c:	3401      	adds	r4, #1
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f023 0303 	bic.w	r3, r3, #3
 8014e64:	3304      	adds	r3, #4
 8014e66:	42b4      	cmp	r4, r6
 8014e68:	bf88      	it	hi
 8014e6a:	2304      	movhi	r3, #4
 8014e6c:	4443      	add	r3, r8
 8014e6e:	f843 2b04 	str.w	r2, [r3], #4
 8014e72:	429f      	cmp	r7, r3
 8014e74:	d2fb      	bcs.n	8014e6e <__hexnan+0xce>
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	b91b      	cbnz	r3, 8014e82 <__hexnan+0xe2>
 8014e7a:	4547      	cmp	r7, r8
 8014e7c:	d127      	bne.n	8014ece <__hexnan+0x12e>
 8014e7e:	2301      	movs	r3, #1
 8014e80:	603b      	str	r3, [r7, #0]
 8014e82:	2005      	movs	r0, #5
 8014e84:	b007      	add	sp, #28
 8014e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8a:	3501      	adds	r5, #1
 8014e8c:	f10b 0b01 	add.w	fp, fp, #1
 8014e90:	2d08      	cmp	r5, #8
 8014e92:	dd05      	ble.n	8014ea0 <__hexnan+0x100>
 8014e94:	4544      	cmp	r4, r8
 8014e96:	d9c1      	bls.n	8014e1c <__hexnan+0x7c>
 8014e98:	2300      	movs	r3, #0
 8014e9a:	3c04      	subs	r4, #4
 8014e9c:	2501      	movs	r5, #1
 8014e9e:	6023      	str	r3, [r4, #0]
 8014ea0:	6822      	ldr	r2, [r4, #0]
 8014ea2:	f000 000f 	and.w	r0, r0, #15
 8014ea6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014eaa:	6020      	str	r0, [r4, #0]
 8014eac:	e7b6      	b.n	8014e1c <__hexnan+0x7c>
 8014eae:	2508      	movs	r5, #8
 8014eb0:	e7b4      	b.n	8014e1c <__hexnan+0x7c>
 8014eb2:	9b01      	ldr	r3, [sp, #4]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d0de      	beq.n	8014e76 <__hexnan+0xd6>
 8014eb8:	f1c3 0320 	rsb	r3, r3, #32
 8014ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8014ec0:	40da      	lsrs	r2, r3
 8014ec2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014ec6:	4013      	ands	r3, r2
 8014ec8:	f846 3c04 	str.w	r3, [r6, #-4]
 8014ecc:	e7d3      	b.n	8014e76 <__hexnan+0xd6>
 8014ece:	3f04      	subs	r7, #4
 8014ed0:	e7d1      	b.n	8014e76 <__hexnan+0xd6>
 8014ed2:	2004      	movs	r0, #4
 8014ed4:	e7d6      	b.n	8014e84 <__hexnan+0xe4>

08014ed6 <__ascii_mbtowc>:
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	b901      	cbnz	r1, 8014edc <__ascii_mbtowc+0x6>
 8014eda:	a901      	add	r1, sp, #4
 8014edc:	b142      	cbz	r2, 8014ef0 <__ascii_mbtowc+0x1a>
 8014ede:	b14b      	cbz	r3, 8014ef4 <__ascii_mbtowc+0x1e>
 8014ee0:	7813      	ldrb	r3, [r2, #0]
 8014ee2:	600b      	str	r3, [r1, #0]
 8014ee4:	7812      	ldrb	r2, [r2, #0]
 8014ee6:	1e10      	subs	r0, r2, #0
 8014ee8:	bf18      	it	ne
 8014eea:	2001      	movne	r0, #1
 8014eec:	b002      	add	sp, #8
 8014eee:	4770      	bx	lr
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	e7fb      	b.n	8014eec <__ascii_mbtowc+0x16>
 8014ef4:	f06f 0001 	mvn.w	r0, #1
 8014ef8:	e7f8      	b.n	8014eec <__ascii_mbtowc+0x16>

08014efa <_realloc_r>:
 8014efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014efe:	4680      	mov	r8, r0
 8014f00:	4615      	mov	r5, r2
 8014f02:	460c      	mov	r4, r1
 8014f04:	b921      	cbnz	r1, 8014f10 <_realloc_r+0x16>
 8014f06:	4611      	mov	r1, r2
 8014f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f0c:	f7fd bc4c 	b.w	80127a8 <_malloc_r>
 8014f10:	b92a      	cbnz	r2, 8014f1e <_realloc_r+0x24>
 8014f12:	f7fd fbd5 	bl	80126c0 <_free_r>
 8014f16:	2400      	movs	r4, #0
 8014f18:	4620      	mov	r0, r4
 8014f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f1e:	f000 f8c4 	bl	80150aa <_malloc_usable_size_r>
 8014f22:	4285      	cmp	r5, r0
 8014f24:	4606      	mov	r6, r0
 8014f26:	d802      	bhi.n	8014f2e <_realloc_r+0x34>
 8014f28:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014f2c:	d8f4      	bhi.n	8014f18 <_realloc_r+0x1e>
 8014f2e:	4629      	mov	r1, r5
 8014f30:	4640      	mov	r0, r8
 8014f32:	f7fd fc39 	bl	80127a8 <_malloc_r>
 8014f36:	4607      	mov	r7, r0
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	d0ec      	beq.n	8014f16 <_realloc_r+0x1c>
 8014f3c:	42b5      	cmp	r5, r6
 8014f3e:	462a      	mov	r2, r5
 8014f40:	4621      	mov	r1, r4
 8014f42:	bf28      	it	cs
 8014f44:	4632      	movcs	r2, r6
 8014f46:	f7ff fc47 	bl	80147d8 <memcpy>
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	4640      	mov	r0, r8
 8014f4e:	463c      	mov	r4, r7
 8014f50:	f7fd fbb6 	bl	80126c0 <_free_r>
 8014f54:	e7e0      	b.n	8014f18 <_realloc_r+0x1e>

08014f56 <__ascii_wctomb>:
 8014f56:	4603      	mov	r3, r0
 8014f58:	4608      	mov	r0, r1
 8014f5a:	b141      	cbz	r1, 8014f6e <__ascii_wctomb+0x18>
 8014f5c:	2aff      	cmp	r2, #255	@ 0xff
 8014f5e:	d904      	bls.n	8014f6a <__ascii_wctomb+0x14>
 8014f60:	228a      	movs	r2, #138	@ 0x8a
 8014f62:	f04f 30ff 	mov.w	r0, #4294967295
 8014f66:	601a      	str	r2, [r3, #0]
 8014f68:	4770      	bx	lr
 8014f6a:	2001      	movs	r0, #1
 8014f6c:	700a      	strb	r2, [r1, #0]
 8014f6e:	4770      	bx	lr

08014f70 <fiprintf>:
 8014f70:	b40e      	push	{r1, r2, r3}
 8014f72:	b503      	push	{r0, r1, lr}
 8014f74:	ab03      	add	r3, sp, #12
 8014f76:	4601      	mov	r1, r0
 8014f78:	4805      	ldr	r0, [pc, #20]	@ (8014f90 <fiprintf+0x20>)
 8014f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f7e:	6800      	ldr	r0, [r0, #0]
 8014f80:	9301      	str	r3, [sp, #4]
 8014f82:	f7ff f961 	bl	8014248 <_vfiprintf_r>
 8014f86:	b002      	add	sp, #8
 8014f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f8c:	b003      	add	sp, #12
 8014f8e:	4770      	bx	lr
 8014f90:	20000140 	.word	0x20000140

08014f94 <__swhatbuf_r>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	460c      	mov	r4, r1
 8014f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f9c:	b096      	sub	sp, #88	@ 0x58
 8014f9e:	4615      	mov	r5, r2
 8014fa0:	2900      	cmp	r1, #0
 8014fa2:	461e      	mov	r6, r3
 8014fa4:	da0c      	bge.n	8014fc0 <__swhatbuf_r+0x2c>
 8014fa6:	89a3      	ldrh	r3, [r4, #12]
 8014fa8:	2100      	movs	r1, #0
 8014faa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014fae:	bf14      	ite	ne
 8014fb0:	2340      	movne	r3, #64	@ 0x40
 8014fb2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014fb6:	2000      	movs	r0, #0
 8014fb8:	6031      	str	r1, [r6, #0]
 8014fba:	602b      	str	r3, [r5, #0]
 8014fbc:	b016      	add	sp, #88	@ 0x58
 8014fbe:	bd70      	pop	{r4, r5, r6, pc}
 8014fc0:	466a      	mov	r2, sp
 8014fc2:	f000 f849 	bl	8015058 <_fstat_r>
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	dbed      	blt.n	8014fa6 <__swhatbuf_r+0x12>
 8014fca:	9901      	ldr	r1, [sp, #4]
 8014fcc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014fd0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014fd4:	4259      	negs	r1, r3
 8014fd6:	4159      	adcs	r1, r3
 8014fd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014fdc:	e7eb      	b.n	8014fb6 <__swhatbuf_r+0x22>

08014fde <__smakebuf_r>:
 8014fde:	898b      	ldrh	r3, [r1, #12]
 8014fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014fe2:	079d      	lsls	r5, r3, #30
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	460c      	mov	r4, r1
 8014fe8:	d507      	bpl.n	8014ffa <__smakebuf_r+0x1c>
 8014fea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014fee:	6023      	str	r3, [r4, #0]
 8014ff0:	6123      	str	r3, [r4, #16]
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	6163      	str	r3, [r4, #20]
 8014ff6:	b003      	add	sp, #12
 8014ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ffa:	ab01      	add	r3, sp, #4
 8014ffc:	466a      	mov	r2, sp
 8014ffe:	f7ff ffc9 	bl	8014f94 <__swhatbuf_r>
 8015002:	9f00      	ldr	r7, [sp, #0]
 8015004:	4605      	mov	r5, r0
 8015006:	4630      	mov	r0, r6
 8015008:	4639      	mov	r1, r7
 801500a:	f7fd fbcd 	bl	80127a8 <_malloc_r>
 801500e:	b948      	cbnz	r0, 8015024 <__smakebuf_r+0x46>
 8015010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015014:	059a      	lsls	r2, r3, #22
 8015016:	d4ee      	bmi.n	8014ff6 <__smakebuf_r+0x18>
 8015018:	f023 0303 	bic.w	r3, r3, #3
 801501c:	f043 0302 	orr.w	r3, r3, #2
 8015020:	81a3      	strh	r3, [r4, #12]
 8015022:	e7e2      	b.n	8014fea <__smakebuf_r+0xc>
 8015024:	89a3      	ldrh	r3, [r4, #12]
 8015026:	6020      	str	r0, [r4, #0]
 8015028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801502c:	81a3      	strh	r3, [r4, #12]
 801502e:	9b01      	ldr	r3, [sp, #4]
 8015030:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015034:	b15b      	cbz	r3, 801504e <__smakebuf_r+0x70>
 8015036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801503a:	4630      	mov	r0, r6
 801503c:	f000 f81e 	bl	801507c <_isatty_r>
 8015040:	b128      	cbz	r0, 801504e <__smakebuf_r+0x70>
 8015042:	89a3      	ldrh	r3, [r4, #12]
 8015044:	f023 0303 	bic.w	r3, r3, #3
 8015048:	f043 0301 	orr.w	r3, r3, #1
 801504c:	81a3      	strh	r3, [r4, #12]
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	431d      	orrs	r5, r3
 8015052:	81a5      	strh	r5, [r4, #12]
 8015054:	e7cf      	b.n	8014ff6 <__smakebuf_r+0x18>
	...

08015058 <_fstat_r>:
 8015058:	b538      	push	{r3, r4, r5, lr}
 801505a:	2300      	movs	r3, #0
 801505c:	4d06      	ldr	r5, [pc, #24]	@ (8015078 <_fstat_r+0x20>)
 801505e:	4604      	mov	r4, r0
 8015060:	4608      	mov	r0, r1
 8015062:	4611      	mov	r1, r2
 8015064:	602b      	str	r3, [r5, #0]
 8015066:	f7ed fe6f 	bl	8002d48 <_fstat>
 801506a:	1c43      	adds	r3, r0, #1
 801506c:	d102      	bne.n	8015074 <_fstat_r+0x1c>
 801506e:	682b      	ldr	r3, [r5, #0]
 8015070:	b103      	cbz	r3, 8015074 <_fstat_r+0x1c>
 8015072:	6023      	str	r3, [r4, #0]
 8015074:	bd38      	pop	{r3, r4, r5, pc}
 8015076:	bf00      	nop
 8015078:	20001834 	.word	0x20001834

0801507c <_isatty_r>:
 801507c:	b538      	push	{r3, r4, r5, lr}
 801507e:	2300      	movs	r3, #0
 8015080:	4d05      	ldr	r5, [pc, #20]	@ (8015098 <_isatty_r+0x1c>)
 8015082:	4604      	mov	r4, r0
 8015084:	4608      	mov	r0, r1
 8015086:	602b      	str	r3, [r5, #0]
 8015088:	f7ed fe6e 	bl	8002d68 <_isatty>
 801508c:	1c43      	adds	r3, r0, #1
 801508e:	d102      	bne.n	8015096 <_isatty_r+0x1a>
 8015090:	682b      	ldr	r3, [r5, #0]
 8015092:	b103      	cbz	r3, 8015096 <_isatty_r+0x1a>
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	bd38      	pop	{r3, r4, r5, pc}
 8015098:	20001834 	.word	0x20001834

0801509c <abort>:
 801509c:	2006      	movs	r0, #6
 801509e:	b508      	push	{r3, lr}
 80150a0:	f000 f834 	bl	801510c <raise>
 80150a4:	2001      	movs	r0, #1
 80150a6:	f7ed fe1b 	bl	8002ce0 <_exit>

080150aa <_malloc_usable_size_r>:
 80150aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150ae:	1f18      	subs	r0, r3, #4
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	bfbc      	itt	lt
 80150b4:	580b      	ldrlt	r3, [r1, r0]
 80150b6:	18c0      	addlt	r0, r0, r3
 80150b8:	4770      	bx	lr

080150ba <_raise_r>:
 80150ba:	291f      	cmp	r1, #31
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	4605      	mov	r5, r0
 80150c0:	460c      	mov	r4, r1
 80150c2:	d904      	bls.n	80150ce <_raise_r+0x14>
 80150c4:	2316      	movs	r3, #22
 80150c6:	6003      	str	r3, [r0, #0]
 80150c8:	f04f 30ff 	mov.w	r0, #4294967295
 80150cc:	bd38      	pop	{r3, r4, r5, pc}
 80150ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80150d0:	b112      	cbz	r2, 80150d8 <_raise_r+0x1e>
 80150d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150d6:	b94b      	cbnz	r3, 80150ec <_raise_r+0x32>
 80150d8:	4628      	mov	r0, r5
 80150da:	f000 f831 	bl	8015140 <_getpid_r>
 80150de:	4622      	mov	r2, r4
 80150e0:	4601      	mov	r1, r0
 80150e2:	4628      	mov	r0, r5
 80150e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150e8:	f000 b818 	b.w	801511c <_kill_r>
 80150ec:	2b01      	cmp	r3, #1
 80150ee:	d00a      	beq.n	8015106 <_raise_r+0x4c>
 80150f0:	1c59      	adds	r1, r3, #1
 80150f2:	d103      	bne.n	80150fc <_raise_r+0x42>
 80150f4:	2316      	movs	r3, #22
 80150f6:	6003      	str	r3, [r0, #0]
 80150f8:	2001      	movs	r0, #1
 80150fa:	e7e7      	b.n	80150cc <_raise_r+0x12>
 80150fc:	2100      	movs	r1, #0
 80150fe:	4620      	mov	r0, r4
 8015100:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015104:	4798      	blx	r3
 8015106:	2000      	movs	r0, #0
 8015108:	e7e0      	b.n	80150cc <_raise_r+0x12>
	...

0801510c <raise>:
 801510c:	4b02      	ldr	r3, [pc, #8]	@ (8015118 <raise+0xc>)
 801510e:	4601      	mov	r1, r0
 8015110:	6818      	ldr	r0, [r3, #0]
 8015112:	f7ff bfd2 	b.w	80150ba <_raise_r>
 8015116:	bf00      	nop
 8015118:	20000140 	.word	0x20000140

0801511c <_kill_r>:
 801511c:	b538      	push	{r3, r4, r5, lr}
 801511e:	2300      	movs	r3, #0
 8015120:	4d06      	ldr	r5, [pc, #24]	@ (801513c <_kill_r+0x20>)
 8015122:	4604      	mov	r4, r0
 8015124:	4608      	mov	r0, r1
 8015126:	4611      	mov	r1, r2
 8015128:	602b      	str	r3, [r5, #0]
 801512a:	f7ed fdc9 	bl	8002cc0 <_kill>
 801512e:	1c43      	adds	r3, r0, #1
 8015130:	d102      	bne.n	8015138 <_kill_r+0x1c>
 8015132:	682b      	ldr	r3, [r5, #0]
 8015134:	b103      	cbz	r3, 8015138 <_kill_r+0x1c>
 8015136:	6023      	str	r3, [r4, #0]
 8015138:	bd38      	pop	{r3, r4, r5, pc}
 801513a:	bf00      	nop
 801513c:	20001834 	.word	0x20001834

08015140 <_getpid_r>:
 8015140:	f7ed bdb6 	b.w	8002cb0 <_getpid>

08015144 <_init>:
 8015144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015146:	bf00      	nop
 8015148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801514a:	bc08      	pop	{r3}
 801514c:	469e      	mov	lr, r3
 801514e:	4770      	bx	lr

08015150 <_fini>:
 8015150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015152:	bf00      	nop
 8015154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015156:	bc08      	pop	{r3}
 8015158:	469e      	mov	lr, r3
 801515a:	4770      	bx	lr
