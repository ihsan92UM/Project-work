
cb_v2_6freq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec64  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060e  0800eea0  0800eea0  0000fea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f4b0  0800f4b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f4b8  0800f4b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f4bc  0800f4bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d4  20000000  0800f4c0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000858  200001d4  0800f694  000111d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000a2c  0800f694  00011a2c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b643  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e45  00000000  00000000  0002c84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f0  00000000  00000000  0002f698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012e6  00000000  00000000  00030e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002faae  00000000  00000000  0003216e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f1f6  00000000  00000000  00061c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012e788  00000000  00000000  00080e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001af59a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007da8  00000000  00000000  001af5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001b7388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800ee84 	.word	0x0800ee84

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	0800ee84 	.word	0x0800ee84

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b4 	b.w	8001010 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	460c      	mov	r4, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14d      	bne.n	8000dd4 <__udivmoddi4+0xa8>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4696      	mov	lr, r2
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	d960      	bls.n	8000e08 <__udivmoddi4+0xdc>
 8000d46:	b14b      	cbz	r3, 8000d5c <__udivmoddi4+0x30>
 8000d48:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d56:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5a:	4317      	orrs	r7, r2
 8000d5c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d60:	fa1f f48e 	uxth.w	r4, lr
 8000d64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d68:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d6c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d70:	fb01 f004 	mul.w	r0, r1, r4
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x62>
 8000d7c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x60>
 8000d86:	4290      	cmp	r0, r2
 8000d88:	f200 812d 	bhi.w	8000fe6 <__udivmoddi4+0x2ba>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	fa1f fc8c 	uxth.w	ip, ip
 8000d94:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d98:	fb06 2210 	mls	r2, r6, r0, r2
 8000d9c:	fb00 f404 	mul.w	r4, r0, r4
 8000da0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da4:	4564      	cmp	r4, ip
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	4564      	cmp	r4, ip
 8000db4:	f200 811a 	bhi.w	8000fec <__udivmoddi4+0x2c0>
 8000db8:	4610      	mov	r0, r2
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	ebac 0c04 	sub.w	ip, ip, r4
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b125      	cbz	r5, 8000dd0 <__udivmoddi4+0xa4>
 8000dc6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d905      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd8:	b10d      	cbz	r5, 8000dde <__udivmoddi4+0xb2>
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4608      	mov	r0, r1
 8000de2:	e7f5      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d14d      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4290      	cmp	r0, r2
 8000df4:	f080 80ef 	bcs.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0e6      	beq.n	8000dd0 <__udivmoddi4+0xa4>
 8000e02:	e9c5 6300 	strd	r6, r3, [r5]
 8000e06:	e7e3      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80a2 	bne.w	8000f52 <__udivmoddi4+0x226>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa1f f68e 	uxth.w	r6, lr
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2a:	fb06 f004 	mul.w	r0, r6, r4
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80c8 	beq.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e50:	4644      	mov	r4, r8
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	fa1f fc8c 	uxth.w	ip, ip
 8000e58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e60:	fb00 f606 	mul.w	r6, r0, r6
 8000e64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e68:	4566      	cmp	r6, ip
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x150>
 8000e76:	4566      	cmp	r6, ip
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2c6>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e92:	fa22 f706 	lsr.w	r7, r2, r6
 8000e96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e9a:	40f4      	lsrs	r4, r6
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ea4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ea8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb8:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ec4:	45a1      	cmp	r9, r4
 8000ec6:	d90e      	bls.n	8000ee6 <__udivmoddi4+0x1ba>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ece:	bf2c      	ite	cs
 8000ed0:	f04f 0b01 	movcs.w	fp, #1
 8000ed4:	f04f 0b00 	movcc.w	fp, #0
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d903      	bls.n	8000ee4 <__udivmoddi4+0x1b8>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	f000 8093 	beq.w	800100a <__udivmoddi4+0x2de>
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	eba4 0409 	sub.w	r4, r4, r9
 8000eea:	fa1f f983 	uxth.w	r9, r3
 8000eee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ef2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ef6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d906      	bls.n	8000f10 <__udivmoddi4+0x1e4>
 8000f02:	193c      	adds	r4, r7, r4
 8000f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x1e2>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d87a      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	eba4 040c 	sub.w	r4, r4, ip
 8000f18:	fba0 9802 	umull	r9, r8, r0, r2
 8000f1c:	4544      	cmp	r4, r8
 8000f1e:	46cc      	mov	ip, r9
 8000f20:	4643      	mov	r3, r8
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0x1fe>
 8000f24:	d106      	bne.n	8000f34 <__udivmoddi4+0x208>
 8000f26:	45ce      	cmp	lr, r9
 8000f28:	d204      	bcs.n	8000f34 <__udivmoddi4+0x208>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f30:	eb68 0307 	sbc.w	r3, r8, r7
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x222>
 8000f36:	ebbe 020c 	subs.w	r2, lr, ip
 8000f3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f42:	fa22 f301 	lsr.w	r3, r2, r1
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	431e      	orrs	r6, r3
 8000f4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e73e      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000f52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f56:	f1c3 0120 	rsb	r1, r3, #32
 8000f5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f68:	fa20 f101 	lsr.w	r1, r0, r1
 8000f6c:	fa1f f68e 	uxth.w	r6, lr
 8000f70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f74:	430a      	orrs	r2, r1
 8000f76:	fb07 4410 	mls	r4, r7, r0, r4
 8000f7a:	0c11      	lsrs	r1, r2, #16
 8000f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f80:	fb00 f406 	mul.w	r4, r0, r6
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d90e      	bls.n	8000fa6 <__udivmoddi4+0x27a>
 8000f88:	eb1e 0101 	adds.w	r1, lr, r1
 8000f8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f90:	bf2c      	ite	cs
 8000f92:	f04f 0901 	movcs.w	r9, #1
 8000f96:	f04f 0900 	movcc.w	r9, #0
 8000f9a:	428c      	cmp	r4, r1
 8000f9c:	d902      	bls.n	8000fa4 <__udivmoddi4+0x278>
 8000f9e:	f1b9 0f00 	cmp.w	r9, #0
 8000fa2:	d02c      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	1b09      	subs	r1, r1, r4
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x2a2>
 8000fbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000fc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fc6:	d201      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d815      	bhi.n	8000ff8 <__udivmoddi4+0x2cc>
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fd4:	e721      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fd6:	1a86      	subs	r6, r0, r2
 8000fd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e70e      	b.n	8000dfe <__udivmoddi4+0xd2>
 8000fe0:	3c02      	subs	r4, #2
 8000fe2:	4472      	add	r2, lr
 8000fe4:	e735      	b.n	8000e52 <__udivmoddi4+0x126>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4472      	add	r2, lr
 8000fea:	e6d0      	b.n	8000d8e <__udivmoddi4+0x62>
 8000fec:	44f4      	add	ip, lr
 8000fee:	3802      	subs	r0, #2
 8000ff0:	e6e3      	b.n	8000dba <__udivmoddi4+0x8e>
 8000ff2:	44f4      	add	ip, lr
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x152>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e7e7      	b.n	8000fce <__udivmoddi4+0x2a2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4471      	add	r1, lr
 8001002:	e7d0      	b.n	8000fa6 <__udivmoddi4+0x27a>
 8001004:	3b02      	subs	r3, #2
 8001006:	443c      	add	r4, r7
 8001008:	e782      	b.n	8000f10 <__udivmoddi4+0x1e4>
 800100a:	3802      	subs	r0, #2
 800100c:	443c      	add	r4, r7
 800100e:	e76a      	b.n	8000ee6 <__udivmoddi4+0x1ba>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001020:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800102c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001030:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001034:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800103c:	e000      	b.n	8001040 <ITM_SendChar+0x2c>
    {
      __NOP();
 800103e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001040:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f9      	beq.n	800103e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800104a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	0000      	movs	r0, r0
 8001064:	0000      	movs	r0, r0
	...

08001068 <process_channel>:
    HAL_UART_Transmit(&huart1, txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
}



void process_channel(uint16_t *channel_data, const char *name) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
#define TIMER_CLK_HZ 160000000
    if (channel_data[0] == 0) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <process_channel+0x1c>
        printf("%s: Frequency = 0.00 Hz , Count = 0 , Capacitance = 0pF\n\r", name);
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	4838      	ldr	r0, [pc, #224]	@ (8001160 <process_channel+0xf8>)
 800107e:	f00a fa97 	bl	800b5b0 <iprintf>
 8001082:	e04d      	b.n	8001120 <process_channel+0xb8>
    } else {
        float period_seconds = channel_data[0] * (1.0 / TIMER_CLK_HZ);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4f 	bl	800052c <__aeabi_i2d>
 800108e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001138 <process_channel+0xd0>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab4 	bl	8000600 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fda6 	bl	8000bf0 <__aeabi_d2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	617b      	str	r3, [r7, #20]
        float frequency = (1.0 / period_seconds);
 80010a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80010b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b4:	edc7 7a04 	vstr	s15, [r7, #16]
        //printf("%s: Frequency = %f , Count = %d\n\r", name, frequency, channel_data[0]);

        double cx = ((1 / (0.64 * frequency * 200000)) - 60.60E-12) * 1e12;
 80010b8:	6938      	ldr	r0, [r7, #16]
 80010ba:	f7ff fa49 	bl	8000550 <__aeabi_f2d>
 80010be:	a320      	add	r3, pc, #128	@ (adr r3, 8001140 <process_channel+0xd8>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fa9c 	bl	8000600 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001148 <process_channel+0xe0>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fa93 	bl	8000600 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <process_channel+0xfc>)
 80010e4:	f7ff fbb6 	bl	8000854 <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	a317      	add	r3, pc, #92	@ (adr r3, 8001150 <process_channel+0xe8>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff f8cb 	bl	8000290 <__aeabi_dsub>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	a315      	add	r3, pc, #84	@ (adr r3, 8001158 <process_channel+0xf0>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa7a 	bl	8000600 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2302 	strd	r2, r3, [r7, #8]
        printf("%s: Capacitance = %.2f pF\n\r", name, cx);
 8001114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	4813      	ldr	r0, [pc, #76]	@ (8001168 <process_channel+0x100>)
 800111c:	f00a fa48 	bl	800b5b0 <iprintf>
    }
    memset(channel_data, 0, sizeof(uint16_t) * 8);
 8001120:	2210      	movs	r2, #16
 8001122:	2100      	movs	r1, #0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f00a fab8 	bl	800b69a <memset>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	9abcaf48 	.word	0x9abcaf48
 800113c:	3e3ad7f2 	.word	0x3e3ad7f2
 8001140:	47ae147b 	.word	0x47ae147b
 8001144:	3fe47ae1 	.word	0x3fe47ae1
 8001148:	00000000 	.word	0x00000000
 800114c:	41086a00 	.word	0x41086a00
 8001150:	8cb779a2 	.word	0x8cb779a2
 8001154:	3dd0a858 	.word	0x3dd0a858
 8001158:	a2000000 	.word	0xa2000000
 800115c:	426d1a94 	.word	0x426d1a94
 8001160:	0800eec4 	.word	0x0800eec4
 8001164:	3ff00000 	.word	0x3ff00000
 8001168:	0800ef00 	.word	0x0800ef00

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b0a6      	sub	sp, #152	@ 0x98
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001172:	f001 fcbf 	bl	8002af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001176:	f000 f8e9 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117a:	f000 fd65 	bl	8001c48 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800117e:	f000 f93d 	bl	80013fc <MX_GPDMA1_Init>
  MX_TIM3_Init();
 8001182:	f000 fa4f 	bl	8001624 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001186:	f000 fad9 	bl	800173c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800118a:	f000 fd11 	bl	8001bb0 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800118e:	f000 f97d 	bl	800148c <MX_I2C3_Init>
  MX_TIM2_Init();
 8001192:	f000 f9bb 	bl	800150c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001196:	f000 fb5d 	bl	8001854 <MX_TIM5_Init>
  MX_TIM8_Init();
 800119a:	f000 fbe7 	bl	800196c <MX_TIM8_Init>
  MX_TIM15_Init();
 800119e:	f000 fc77 	bl	8001a90 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

#define TIMER_CLK_HZ 160000000

uint16_t Channel_0[8] = {0};
 80011a2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
uint16_t Channel_1[8] = {0};
 80011b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
uint16_t Channel_3[8] = {0};
 80011be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
uint16_t Channel_4[8] = {0};
 80011cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
uint16_t Channel_5[8] = {0};
 80011da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
uint16_t Channel_6[8] = {0};
 80011e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]

uint16_t* channels[] = {Channel_0, Channel_1, Channel_3, Channel_4, Channel_5, Channel_6};
 80011f6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001200:	623b      	str	r3, [r7, #32]
 8001202:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
 8001208:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800120e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001214:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001218:	633b      	str	r3, [r7, #48]	@ 0x30
const char* channel_names[] = {"Channel_0", "Channel_1", "Channel_3", "Channel_4", "Channel_5", "Channel_6"};
 800121a:	4b44      	ldr	r3, [pc, #272]	@ (800132c <main+0x1c0>)
 800121c:	1d3c      	adds	r4, r7, #4
 800121e:	461d      	mov	r5, r3
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001228:	e884 0003 	stmia.w	r4, {r0, r1}


if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 800122c:	4840      	ldr	r0, [pc, #256]	@ (8001330 <main+0x1c4>)
 800122e:	f007 fb0d 	bl	800884c <HAL_TIM_Base_Start>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <main+0xd0>

	  Error_Handler();
 8001238:	f000 fd86 	bl	8001d48 <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim3) != HAL_OK){
 800123c:	483d      	ldr	r0, [pc, #244]	@ (8001334 <main+0x1c8>)
 800123e:	f007 fb05 	bl	800884c <HAL_TIM_Base_Start>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <main+0xe0>

	  Error_Handler();
 8001248:	f000 fd7e 	bl	8001d48 <Error_Handler>
}

if (HAL_TIM_Base_Start(&htim4) != HAL_OK){
 800124c:	483a      	ldr	r0, [pc, #232]	@ (8001338 <main+0x1cc>)
 800124e:	f007 fafd 	bl	800884c <HAL_TIM_Base_Start>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <main+0xf0>

	  Error_Handler();
 8001258:	f000 fd76 	bl	8001d48 <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim5) != HAL_OK){
 800125c:	4837      	ldr	r0, [pc, #220]	@ (800133c <main+0x1d0>)
 800125e:	f007 faf5 	bl	800884c <HAL_TIM_Base_Start>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <main+0x100>

	  Error_Handler();
 8001268:	f000 fd6e 	bl	8001d48 <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim8) != HAL_OK){
 800126c:	4834      	ldr	r0, [pc, #208]	@ (8001340 <main+0x1d4>)
 800126e:	f007 faed 	bl	800884c <HAL_TIM_Base_Start>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <main+0x110>

	  Error_Handler();
 8001278:	f000 fd66 	bl	8001d48 <Error_Handler>
}


if (HAL_TIM_Base_Start(&htim15) != HAL_OK){
 800127c:	4831      	ldr	r0, [pc, #196]	@ (8001344 <main+0x1d8>)
 800127e:	f007 fae5 	bl	800884c <HAL_TIM_Base_Start>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <main+0x120>

	  Error_Handler();
 8001288:	f000 fd5e 	bl	8001d48 <Error_Handler>
}

HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,(uint32_t*)&Channel_0, 8);
 800128c:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8001290:	2308      	movs	r3, #8
 8001292:	2100      	movs	r1, #0
 8001294:	4826      	ldr	r0, [pc, #152]	@ (8001330 <main+0x1c4>)
 8001296:	f007 fbd3 	bl	8008a40 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t*)&Channel_1, 8);
 800129a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800129e:	2308      	movs	r3, #8
 80012a0:	2100      	movs	r1, #0
 80012a2:	4824      	ldr	r0, [pc, #144]	@ (8001334 <main+0x1c8>)
 80012a4:	f007 fbcc 	bl	8008a40 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1,(uint32_t*)&Channel_3, 8);
 80012a8:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80012ac:	2308      	movs	r3, #8
 80012ae:	2100      	movs	r1, #0
 80012b0:	4821      	ldr	r0, [pc, #132]	@ (8001338 <main+0x1cc>)
 80012b2:	f007 fbc5 	bl	8008a40 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1,(uint32_t*)&Channel_4, 8);
 80012b6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80012ba:	2308      	movs	r3, #8
 80012bc:	2100      	movs	r1, #0
 80012be:	481f      	ldr	r0, [pc, #124]	@ (800133c <main+0x1d0>)
 80012c0:	f007 fbbe 	bl	8008a40 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1,(uint32_t*)&Channel_5, 8);
 80012c4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80012c8:	2308      	movs	r3, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	481c      	ldr	r0, [pc, #112]	@ (8001340 <main+0x1d4>)
 80012ce:	f007 fbb7 	bl	8008a40 <HAL_TIM_IC_Start_DMA>
HAL_TIM_IC_Start_DMA(&htim15, TIM_CHANNEL_1,(uint32_t*)&Channel_6, 8);
 80012d2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80012d6:	2308      	movs	r3, #8
 80012d8:	2100      	movs	r1, #0
 80012da:	481a      	ldr	r0, [pc, #104]	@ (8001344 <main+0x1d8>)
 80012dc:	f007 fbb0 	bl	8008a40 <HAL_TIM_IC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //sendCapacitanceData();
	  for (int i = 0; i < 6; i++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012e6:	e016      	b.n	8001316 <main+0x1aa>
	       process_channel(channels[i], channel_names[i]);
 80012e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	3398      	adds	r3, #152	@ 0x98
 80012f0:	443b      	add	r3, r7
 80012f2:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80012f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	3398      	adds	r3, #152	@ 0x98
 80012fe:	443b      	add	r3, r7
 8001300:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f7ff feae 	bl	8001068 <process_channel>
	  for (int i = 0; i < 6; i++) {
 800130c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001310:	3301      	adds	r3, #1
 8001312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001316:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800131a:	2b05      	cmp	r3, #5
 800131c:	dde4      	ble.n	80012e8 <main+0x17c>
	    }
	  printf("\n\r");
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <main+0x1dc>)
 8001320:	f00a f946 	bl	800b5b0 <iprintf>

	  HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	@ 0x64
 8001326:	f001 fcab 	bl	8002c80 <HAL_Delay>
	  for (int i = 0; i < 6; i++) {
 800132a:	e7d9      	b.n	80012e0 <main+0x174>
 800132c:	0800ef68 	.word	0x0800ef68
 8001330:	20000244 	.word	0x20000244
 8001334:	20000290 	.word	0x20000290
 8001338:	200002dc 	.word	0x200002dc
 800133c:	20000328 	.word	0x20000328
 8001340:	20000374 	.word	0x20000374
 8001344:	200003c0 	.word	0x200003c0
 8001348:	0800ef1c 	.word	0x0800ef1c

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09e      	sub	sp, #120	@ 0x78
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	2260      	movs	r2, #96	@ 0x60
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f00a f99d 	bl	800b69a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001370:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001374:	f003 fb1c 	bl	80049b0 <HAL_PWREx_ControlVoltageScaling>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800137e:	f000 fce3 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	2303      	movs	r3, #3
 8001392:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800139c:	230a      	movs	r3, #10
 800139e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80013ac:	230c      	movs	r3, #12
 80013ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fb85 	bl	8004ac8 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80013c4:	f000 fcc0 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	231f      	movs	r3, #31
 80013ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2303      	movs	r3, #3
 80013ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2104      	movs	r1, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fa4b 	bl	8005880 <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80013f0:	f000 fcaa 	bl	8001d48 <Error_Handler>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3778      	adds	r7, #120	@ 0x78
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_GPDMA1_Init+0x8c>)
 8001404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001408:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <MX_GPDMA1_Init+0x8c>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <MX_GPDMA1_Init+0x8c>)
 8001414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	201d      	movs	r0, #29
 8001426:	f001 fd07 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800142a:	201d      	movs	r0, #29
 800142c:	f001 fd1e 	bl	8002e6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	201e      	movs	r0, #30
 8001436:	f001 fcff 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800143a:	201e      	movs	r0, #30
 800143c:	f001 fd16 	bl	8002e6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	201f      	movs	r0, #31
 8001446:	f001 fcf7 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800144a:	201f      	movs	r0, #31
 800144c:	f001 fd0e 	bl	8002e6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2020      	movs	r0, #32
 8001456:	f001 fcef 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800145a:	2020      	movs	r0, #32
 800145c:	f001 fd06 	bl	8002e6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2021      	movs	r0, #33	@ 0x21
 8001466:	f001 fce7 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 800146a:	2021      	movs	r0, #33	@ 0x21
 800146c:	f001 fcfe 	bl	8002e6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2022      	movs	r0, #34	@ 0x22
 8001476:	f001 fcdf 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 800147a:	2022      	movs	r0, #34	@ 0x22
 800147c:	f001 fcf6 	bl	8002e6c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	46020c00 	.word	0x46020c00

0800148c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <MX_I2C3_Init+0x74>)
 8001492:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <MX_I2C3_Init+0x78>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_I2C3_Init+0x74>)
 8001498:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <MX_I2C3_Init+0x7c>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <MX_I2C3_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014c6:	480e      	ldr	r0, [pc, #56]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014c8:	f003 f940 	bl	800474c <HAL_I2C_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014d2:	f000 fc39 	bl	8001d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4809      	ldr	r0, [pc, #36]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014da:	f003 f9d2 	bl	8004882 <HAL_I2CEx_ConfigAnalogFilter>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014e4:	f000 fc30 	bl	8001d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_I2C3_Init+0x74>)
 80014ec:	f003 fa14 	bl	8004918 <HAL_I2CEx_ConfigDigitalFilter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 fc27 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001f0 	.word	0x200001f0
 8001504:	46002800 	.word	0x46002800
 8001508:	30909dec 	.word	0x30909dec

0800150c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b090      	sub	sp, #64	@ 0x40
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001548:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <MX_TIM2_Init+0x114>)
 800154a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800154e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001550:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <MX_TIM2_Init+0x114>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b32      	ldr	r3, [pc, #200]	@ (8001620 <MX_TIM2_Init+0x114>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800155c:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <MX_TIM2_Init+0x114>)
 800155e:	f04f 32ff 	mov.w	r2, #4294967295
 8001562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <MX_TIM2_Init+0x114>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <MX_TIM2_Init+0x114>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001570:	482b      	ldr	r0, [pc, #172]	@ (8001620 <MX_TIM2_Init+0x114>)
 8001572:	f007 f913 	bl	800879c <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800157c:	f000 fbe4 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001586:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800158a:	4619      	mov	r1, r3
 800158c:	4824      	ldr	r0, [pc, #144]	@ (8001620 <MX_TIM2_Init+0x114>)
 800158e:	f007 fced 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001598:	f000 fbd6 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800159c:	4820      	ldr	r0, [pc, #128]	@ (8001620 <MX_TIM2_Init+0x114>)
 800159e:	f007 f9ed 	bl	800897c <HAL_TIM_IC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80015a8:	f000 fbce 	bl	8001d48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80015ac:	2304      	movs	r3, #4
 80015ae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80015b0:	2350      	movs	r3, #80	@ 0x50
 80015b2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4817      	ldr	r0, [pc, #92]	@ (8001620 <MX_TIM2_Init+0x114>)
 80015c4:	f007 fdd4 	bl	8009170 <HAL_TIM_SlaveConfigSynchro>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80015ce:	f000 fbbb 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	480f      	ldr	r0, [pc, #60]	@ (8001620 <MX_TIM2_Init+0x114>)
 80015e2:	f008 faeb 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80015ec:	f000 fbac 	bl	8001d48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015f4:	2301      	movs	r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	@ (8001620 <MX_TIM2_Init+0x114>)
 8001608:	f007 fc14 	bl	8008e34 <HAL_TIM_IC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8001612:	f000 fb99 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3740      	adds	r7, #64	@ 0x40
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000244 	.word	0x20000244

08001624 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b090      	sub	sp, #64	@ 0x40
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001660:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <MX_TIM3_Init+0x110>)
 8001662:	4a35      	ldr	r2, [pc, #212]	@ (8001738 <MX_TIM3_Init+0x114>)
 8001664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001666:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <MX_TIM3_Init+0x110>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <MX_TIM3_Init+0x110>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8001672:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <MX_TIM3_Init+0x110>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <MX_TIM3_Init+0x110>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <MX_TIM3_Init+0x110>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001686:	482b      	ldr	r0, [pc, #172]	@ (8001734 <MX_TIM3_Init+0x110>)
 8001688:	f007 f888 	bl	800879c <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001692:	f000 fb59 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016a0:	4619      	mov	r1, r3
 80016a2:	4824      	ldr	r0, [pc, #144]	@ (8001734 <MX_TIM3_Init+0x110>)
 80016a4:	f007 fc62 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80016ae:	f000 fb4b 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016b2:	4820      	ldr	r0, [pc, #128]	@ (8001734 <MX_TIM3_Init+0x110>)
 80016b4:	f007 f962 	bl	800897c <HAL_TIM_IC_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80016be:	f000 fb43 	bl	8001d48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016c2:	2304      	movs	r3, #4
 80016c4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80016c6:	2350      	movs	r3, #80	@ 0x50
 80016c8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4816      	ldr	r0, [pc, #88]	@ (8001734 <MX_TIM3_Init+0x110>)
 80016da:	f007 fd49 	bl	8009170 <HAL_TIM_SlaveConfigSynchro>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80016e4:	f000 fb30 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4619      	mov	r1, r3
 80016f6:	480f      	ldr	r0, [pc, #60]	@ (8001734 <MX_TIM3_Init+0x110>)
 80016f8:	f008 fa60 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001702:	f000 fb21 	bl	8001d48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800170a:	2301      	movs	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_TIM3_Init+0x110>)
 800171e:	f007 fb89 	bl	8008e34 <HAL_TIM_IC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8001728:	f000 fb0e 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3740      	adds	r7, #64	@ 0x40
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000290 	.word	0x20000290
 8001738:	40000400 	.word	0x40000400

0800173c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b090      	sub	sp, #64	@ 0x40
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001778:	4b34      	ldr	r3, [pc, #208]	@ (800184c <MX_TIM4_Init+0x110>)
 800177a:	4a35      	ldr	r2, [pc, #212]	@ (8001850 <MX_TIM4_Init+0x114>)
 800177c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800177e:	4b33      	ldr	r3, [pc, #204]	@ (800184c <MX_TIM4_Init+0x110>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b31      	ldr	r3, [pc, #196]	@ (800184c <MX_TIM4_Init+0x110>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4294967295;
 800178a:	4b30      	ldr	r3, [pc, #192]	@ (800184c <MX_TIM4_Init+0x110>)
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001792:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <MX_TIM4_Init+0x110>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001798:	4b2c      	ldr	r3, [pc, #176]	@ (800184c <MX_TIM4_Init+0x110>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800179e:	482b      	ldr	r0, [pc, #172]	@ (800184c <MX_TIM4_Init+0x110>)
 80017a0:	f006 fffc 	bl	800879c <HAL_TIM_Base_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80017aa:	f000 facd 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017b8:	4619      	mov	r1, r3
 80017ba:	4824      	ldr	r0, [pc, #144]	@ (800184c <MX_TIM4_Init+0x110>)
 80017bc:	f007 fbd6 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80017c6:	f000 fabf 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017ca:	4820      	ldr	r0, [pc, #128]	@ (800184c <MX_TIM4_Init+0x110>)
 80017cc:	f007 f8d6 	bl	800897c <HAL_TIM_IC_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80017d6:	f000 fab7 	bl	8001d48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80017da:	2304      	movs	r3, #4
 80017dc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80017de:	2350      	movs	r3, #80	@ 0x50
 80017e0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4816      	ldr	r0, [pc, #88]	@ (800184c <MX_TIM4_Init+0x110>)
 80017f2:	f007 fcbd 	bl	8009170 <HAL_TIM_SlaveConfigSynchro>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 80017fc:	f000 faa4 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480f      	ldr	r0, [pc, #60]	@ (800184c <MX_TIM4_Init+0x110>)
 8001810:	f008 f9d4 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800181a:	f000 fa95 	bl	8001d48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001822:	2301      	movs	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_TIM4_Init+0x110>)
 8001836:	f007 fafd 	bl	8008e34 <HAL_TIM_IC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8001840:	f000 fa82 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3740      	adds	r7, #64	@ 0x40
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002dc 	.word	0x200002dc
 8001850:	40000800 	.word	0x40000800

08001854 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b090      	sub	sp, #64	@ 0x40
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001890:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <MX_TIM5_Init+0x110>)
 8001892:	4a35      	ldr	r2, [pc, #212]	@ (8001968 <MX_TIM5_Init+0x114>)
 8001894:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001896:	4b33      	ldr	r3, [pc, #204]	@ (8001964 <MX_TIM5_Init+0x110>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b31      	ldr	r3, [pc, #196]	@ (8001964 <MX_TIM5_Init+0x110>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018a2:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <MX_TIM5_Init+0x110>)
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <MX_TIM5_Init+0x110>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <MX_TIM5_Init+0x110>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018b6:	482b      	ldr	r0, [pc, #172]	@ (8001964 <MX_TIM5_Init+0x110>)
 80018b8:	f006 ff70 	bl	800879c <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80018c2:	f000 fa41 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d0:	4619      	mov	r1, r3
 80018d2:	4824      	ldr	r0, [pc, #144]	@ (8001964 <MX_TIM5_Init+0x110>)
 80018d4:	f007 fb4a 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80018de:	f000 fa33 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80018e2:	4820      	ldr	r0, [pc, #128]	@ (8001964 <MX_TIM5_Init+0x110>)
 80018e4:	f007 f84a 	bl	800897c <HAL_TIM_IC_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80018ee:	f000 fa2b 	bl	8001d48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80018f2:	2304      	movs	r3, #4
 80018f4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80018f6:	2350      	movs	r3, #80	@ 0x50
 80018f8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	4816      	ldr	r0, [pc, #88]	@ (8001964 <MX_TIM5_Init+0x110>)
 800190a:	f007 fc31 	bl	8009170 <HAL_TIM_SlaveConfigSynchro>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8001914:	f000 fa18 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	480f      	ldr	r0, [pc, #60]	@ (8001964 <MX_TIM5_Init+0x110>)
 8001928:	f008 f948 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM5_Init+0xe2>
  {
    Error_Handler();
 8001932:	f000 fa09 	bl	8001d48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800193a:	2301      	movs	r3, #1
 800193c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_TIM5_Init+0x110>)
 800194e:	f007 fa71 	bl	8008e34 <HAL_TIM_IC_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8001958:	f000 f9f6 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3740      	adds	r7, #64	@ 0x40
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000328 	.word	0x20000328
 8001968:	40000c00 	.word	0x40000c00

0800196c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b090      	sub	sp, #64	@ 0x40
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019a8:	4b37      	ldr	r3, [pc, #220]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019aa:	4a38      	ldr	r2, [pc, #224]	@ (8001a8c <MX_TIM8_Init+0x120>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019ae:	4b36      	ldr	r3, [pc, #216]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b34      	ldr	r3, [pc, #208]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019d4:	482c      	ldr	r0, [pc, #176]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019d6:	f006 fee1 	bl	800879c <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80019e0:	f000 f9b2 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ee:	4619      	mov	r1, r3
 80019f0:	4825      	ldr	r0, [pc, #148]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 80019f2:	f007 fabb 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80019fc:	f000 f9a4 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001a00:	4821      	ldr	r0, [pc, #132]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 8001a02:	f006 ffbb 	bl	800897c <HAL_TIM_IC_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001a0c:	f000 f99c 	bl	8001d48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a10:	2304      	movs	r3, #4
 8001a12:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a14:	2350      	movs	r3, #80	@ 0x50
 8001a16:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	4818      	ldr	r0, [pc, #96]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 8001a28:	f007 fba2 	bl	8009170 <HAL_TIM_SlaveConfigSynchro>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001a32:	f000 f989 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480f      	ldr	r0, [pc, #60]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 8001a4a:	f008 f8b7 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001a54:	f000 f978 	bl	8001d48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	@ (8001a88 <MX_TIM8_Init+0x11c>)
 8001a70:	f007 f9e0 	bl	8008e34 <HAL_TIM_IC_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001a7a:	f000 f965 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	3740      	adds	r7, #64	@ 0x40
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000374 	.word	0x20000374
 8001a8c:	40013400 	.word	0x40013400

08001a90 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b090      	sub	sp, #64	@ 0x40
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001acc:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001ace:	4a37      	ldr	r2, [pc, #220]	@ (8001bac <MX_TIM15_Init+0x11c>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001ad2:	4b35      	ldr	r3, [pc, #212]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001ade:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b30      	ldr	r3, [pc, #192]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001af8:	482b      	ldr	r0, [pc, #172]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001afa:	f006 fe4f 	bl	800879c <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001b04:	f000 f920 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b12:	4619      	mov	r1, r3
 8001b14:	4824      	ldr	r0, [pc, #144]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001b16:	f007 fa29 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001b20:	f000 f912 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001b24:	4820      	ldr	r0, [pc, #128]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001b26:	f006 ff29 	bl	800897c <HAL_TIM_IC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001b30:	f000 f90a 	bl	8001d48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b34:	2304      	movs	r3, #4
 8001b36:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b38:	2350      	movs	r3, #80	@ 0x50
 8001b3a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001b4c:	f007 fb10 	bl	8009170 <HAL_TIM_SlaveConfigSynchro>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8001b56:	f000 f8f7 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	480f      	ldr	r0, [pc, #60]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001b6a:	f008 f827 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8001b74:	f000 f8e8 	bl	8001d48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <MX_TIM15_Init+0x118>)
 8001b90:	f007 f950 	bl	8008e34 <HAL_TIM_IC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001b9a:	f000 f8d5 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3740      	adds	r7, #64	@ 0x40
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003c0 	.word	0x200003c0
 8001bac:	40014000 	.word	0x40014000

08001bb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bb6:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <MX_USART1_UART_Init+0x94>)
 8001bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bba:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bda:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be0:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf8:	4811      	ldr	r0, [pc, #68]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001bfa:	f008 f8a1 	bl	8009d40 <HAL_UART_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c04:	f000 f8a0 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001c0c:	f008 fcd8 	bl	800a5c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c16:	f000 f897 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4808      	ldr	r0, [pc, #32]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001c1e:	f008 fd0d 	bl	800a63c <HAL_UARTEx_SetRxFifoThreshold>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c28:	f000 f88e 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c2c:	4804      	ldr	r0, [pc, #16]	@ (8001c40 <MX_USART1_UART_Init+0x90>)
 8001c2e:	f008 fc8e 	bl	800a54e <HAL_UARTEx_DisableFifoMode>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c38:	f000 f886 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000844 	.word	0x20000844
 8001c44:	40013800 	.word	0x40013800

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c64:	4a28      	ldr	r2, [pc, #160]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c6e:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c82:	4a21      	ldr	r2, [pc, #132]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <MX_GPIO_Init+0xc0>)
 8001cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cdc:	480b      	ldr	r0, [pc, #44]	@ (8001d0c <MX_GPIO_Init+0xc4>)
 8001cde:	f002 fd03 	bl	80046e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <MX_GPIO_Init+0xc4>)
 8001cfc:	f002 fb1c 	bl	8004338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	46020c00 	.word	0x46020c00
 8001d0c:	42020400 	.word	0x42020400

08001d10 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e009      	b.n	8001d36 <_write+0x26>
  {

    ITM_SendChar(*ptr++);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	60ba      	str	r2, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f972 	bl	8001014 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dbf1      	blt.n	8001d22 <_write+0x12>

  }
  return len;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
 8001d50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <Error_Handler+0x1c>)
 8001d56:	f002 fcdf 	bl	8004718 <HAL_GPIO_TogglePin>
	    HAL_Delay (200);
 8001d5a:	20c8      	movs	r0, #200	@ 0xc8
 8001d5c:	f000 ff90 	bl	8002c80 <HAL_Delay>
	    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
 8001d60:	bf00      	nop
 8001d62:	e7f5      	b.n	8001d50 <Error_Handler+0x8>
 8001d64:	42020400 	.word	0x42020400

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_MspInit+0x30>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d74:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <HAL_MspInit+0x30>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_MspInit+0x30>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	46020c00 	.word	0x46020c00

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0ba      	sub	sp, #232	@ 0xe8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	22c0      	movs	r2, #192	@ 0xc0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f009 fc6c 	bl	800b69a <memset>
  if(hi2c->Instance==I2C3)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a26      	ldr	r2, [pc, #152]	@ (8001e60 <HAL_I2C_MspInit+0xc4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d144      	bne.n	8001e56 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 f91d 	bl	8006020 <HAL_RCCEx_PeriphCLKConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001dec:	f7ff ffac 	bl	8001d48 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e14:	2312      	movs	r3, #18
 8001e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e26:	2304      	movs	r3, #4
 8001e28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <HAL_I2C_MspInit+0xcc>)
 8001e34:	f002 fa80 	bl	8004338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001e3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e44:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_I2C_MspInit+0xc8>)
 8001e4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001e56:	bf00      	nop
 8001e58:	37e8      	adds	r7, #232	@ 0xe8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	46002800 	.word	0x46002800
 8001e64:	46020c00 	.word	0x46020c00
 8001e68:	42020800 	.word	0x42020800

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0ae      	sub	sp, #184	@ 0xb8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(htim_base->Instance==TIM2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8c:	f040 80a7 	bne.w	8001fde <HAL_TIM_Base_MspInit+0x172>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e90:	4ba9      	ldr	r3, [pc, #676]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e96:	4aa8      	ldr	r2, [pc, #672]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ea0:	4ba5      	ldr	r3, [pc, #660]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4ba2      	ldr	r3, [pc, #648]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb4:	4aa0      	ldr	r2, [pc, #640]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4892      	ldr	r0, [pc, #584]	@ (800213c <HAL_TIM_Base_MspInit+0x2d0>)
 8001ef4:	f002 fa20 	bl	8004338 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* GPDMA1_REQUEST_TIM2_CH1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001ef8:	2321      	movs	r3, #33	@ 0x21
 8001efa:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM2_CH1;
 8001efc:	2338      	movs	r3, #56	@ 0x38
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001f00:	2300      	movs	r3, #0
 8001f02:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f04:	2300      	movs	r3, #0
 8001f06:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001f0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001f12:	2301      	movs	r3, #1
 8001f14:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001f16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f1a:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001f30:	2300      	movs	r3, #0
 8001f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel2) != HAL_OK)
 8001f3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f40:	497f      	ldr	r1, [pc, #508]	@ (8002140 <HAL_TIM_Base_MspInit+0x2d4>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 fc36 	bl	80037b4 <HAL_DMAEx_List_BuildNode>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 8001f4e:	f7ff fefb 	bl	8001d48 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel2, NULL, &Node_GPDMA1_Channel2) != HAL_OK)
 8001f52:	4a7b      	ldr	r2, [pc, #492]	@ (8002140 <HAL_TIM_Base_MspInit+0x2d4>)
 8001f54:	2100      	movs	r1, #0
 8001f56:	487b      	ldr	r0, [pc, #492]	@ (8002144 <HAL_TIM_Base_MspInit+0x2d8>)
 8001f58:	f001 fc42 	bl	80037e0 <HAL_DMAEx_List_InsertNode>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_TIM_Base_MspInit+0xfa>
    {
      Error_Handler();
 8001f62:	f7ff fef1 	bl	8001d48 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel2) != HAL_OK)
 8001f66:	4877      	ldr	r0, [pc, #476]	@ (8002144 <HAL_TIM_Base_MspInit+0x2d8>)
 8001f68:	f001 fd03 	bl	8003972 <HAL_DMAEx_List_SetCircularMode>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_TIM_Base_MspInit+0x10a>
    {
      Error_Handler();
 8001f72:	f7ff fee9 	bl	8001d48 <Error_Handler>
    }

    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001f76:	4b74      	ldr	r3, [pc, #464]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001f78:	4a74      	ldr	r2, [pc, #464]	@ (800214c <HAL_TIM_Base_MspInit+0x2e0>)
 8001f7a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001f7c:	4b72      	ldr	r3, [pc, #456]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel2.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001f82:	4b71      	ldr	r3, [pc, #452]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel2.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001f88:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel2.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel2.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001f94:	4b6c      	ldr	r3, [pc, #432]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001f96:	2281      	movs	r2, #129	@ 0x81
 8001f98:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001f9a:	486b      	ldr	r0, [pc, #428]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001f9c:	f001 fa4a 	bl	8003434 <HAL_DMAEx_List_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_TIM_Base_MspInit+0x13e>
    {
      Error_Handler();
 8001fa6:	f7ff fecf 	bl	8001d48 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel2, &List_GPDMA1_Channel2) != HAL_OK)
 8001faa:	4966      	ldr	r1, [pc, #408]	@ (8002144 <HAL_TIM_Base_MspInit+0x2d8>)
 8001fac:	4866      	ldr	r0, [pc, #408]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001fae:	f001 fd41 	bl	8003a34 <HAL_DMAEx_List_LinkQ>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_MspInit+0x150>
    {
      Error_Handler();
 8001fb8:	f7ff fec6 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a62      	ldr	r2, [pc, #392]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fc2:	4a61      	ldr	r2, [pc, #388]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001fc8:	2110      	movs	r1, #16
 8001fca:	485f      	ldr	r0, [pc, #380]	@ (8002148 <HAL_TIM_Base_MspInit+0x2dc>)
 8001fcc:	f001 f9d1 	bl	8003372 <HAL_DMA_ConfigChannelAttributes>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8390 	beq.w	80026f8 <HAL_TIM_Base_MspInit+0x88c>
    {
      Error_Handler();
 8001fd8:	f7ff feb6 	bl	8001d48 <Error_Handler>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001fdc:	e38c      	b.n	80026f8 <HAL_TIM_Base_MspInit+0x88c>
  else if(htim_base->Instance==TIM3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8002150 <HAL_TIM_Base_MspInit+0x2e4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 80bf 	bne.w	8002168 <HAL_TIM_Base_MspInit+0x2fc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fea:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ff0:	4a51      	ldr	r2, [pc, #324]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8001ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 800200a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800200e:	4a4a      	ldr	r2, [pc, #296]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002018:	4b47      	ldr	r3, [pc, #284]	@ (8002138 <HAL_TIM_Base_MspInit+0x2cc>)
 800201a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002026:	2310      	movs	r3, #16
 8002028:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002048:	4619      	mov	r1, r3
 800204a:	4842      	ldr	r0, [pc, #264]	@ (8002154 <HAL_TIM_Base_MspInit+0x2e8>)
 800204c:	f002 f974 	bl	8004338 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002050:	2321      	movs	r3, #33	@ 0x21
 8002052:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM3_CH1;
 8002054:	233d      	movs	r3, #61	@ 0x3d
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002058:	2300      	movs	r3, #0
 800205a:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205c:	2300      	movs	r3, #0
 800205e:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002060:	2300      	movs	r3, #0
 8002062:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002064:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002068:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800206a:	2301      	movs	r3, #1
 800206c:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800206e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002072:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800207c:	2300      	movs	r3, #0
 800207e:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002080:	2300      	movs	r3, #0
 8002082:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002084:	2300      	movs	r3, #0
 8002086:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002088:	2300      	movs	r3, #0
 800208a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800208c:	2300      	movs	r3, #0
 800208e:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002090:	2300      	movs	r3, #0
 8002092:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8002094:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002098:	492f      	ldr	r1, [pc, #188]	@ (8002158 <HAL_TIM_Base_MspInit+0x2ec>)
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fb8a 	bl	80037b4 <HAL_DMAEx_List_BuildNode>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_TIM_Base_MspInit+0x23e>
      Error_Handler();
 80020a6:	f7ff fe4f 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80020aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002158 <HAL_TIM_Base_MspInit+0x2ec>)
 80020ac:	2100      	movs	r1, #0
 80020ae:	482b      	ldr	r0, [pc, #172]	@ (800215c <HAL_TIM_Base_MspInit+0x2f0>)
 80020b0:	f001 fb96 	bl	80037e0 <HAL_DMAEx_List_InsertNode>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_TIM_Base_MspInit+0x252>
      Error_Handler();
 80020ba:	f7ff fe45 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80020be:	4827      	ldr	r0, [pc, #156]	@ (800215c <HAL_TIM_Base_MspInit+0x2f0>)
 80020c0:	f001 fc57 	bl	8003972 <HAL_DMAEx_List_SetCircularMode>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_TIM_Base_MspInit+0x262>
      Error_Handler();
 80020ca:	f7ff fe3d 	bl	8001d48 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 80020d0:	4a24      	ldr	r2, [pc, #144]	@ (8002164 <HAL_TIM_Base_MspInit+0x2f8>)
 80020d2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 80020ee:	2281      	movs	r2, #129	@ 0x81
 80020f0:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80020f2:	481b      	ldr	r0, [pc, #108]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 80020f4:	f001 f99e 	bl	8003434 <HAL_DMAEx_List_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_TIM_Base_MspInit+0x296>
      Error_Handler();
 80020fe:	f7ff fe23 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002102:	4916      	ldr	r1, [pc, #88]	@ (800215c <HAL_TIM_Base_MspInit+0x2f0>)
 8002104:	4816      	ldr	r0, [pc, #88]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 8002106:	f001 fc95 	bl	8003a34 <HAL_DMAEx_List_LinkQ>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_TIM_Base_MspInit+0x2a8>
      Error_Handler();
 8002110:	f7ff fe1a 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel0);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24
 800211a:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002120:	2110      	movs	r1, #16
 8002122:	480f      	ldr	r0, [pc, #60]	@ (8002160 <HAL_TIM_Base_MspInit+0x2f4>)
 8002124:	f001 f925 	bl	8003372 <HAL_DMA_ConfigChannelAttributes>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 82e4 	beq.w	80026f8 <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 8002130:	f7ff fe0a 	bl	8001d48 <Error_Handler>
}
 8002134:	e2e0      	b.n	80026f8 <HAL_TIM_Base_MspInit+0x88c>
 8002136:	bf00      	nop
 8002138:	46020c00 	.word	0x46020c00
 800213c:	42020000 	.word	0x42020000
 8002140:	2000040c 	.word	0x2000040c
 8002144:	20000430 	.word	0x20000430
 8002148:	20000448 	.word	0x20000448
 800214c:	40020150 	.word	0x40020150
 8002150:	40000400 	.word	0x40000400
 8002154:	42020400 	.word	0x42020400
 8002158:	200004c0 	.word	0x200004c0
 800215c:	200004e4 	.word	0x200004e4
 8002160:	200004fc 	.word	0x200004fc
 8002164:	40020050 	.word	0x40020050
  else if(htim_base->Instance==TIM4)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4aaa      	ldr	r2, [pc, #680]	@ (8002418 <HAL_TIM_Base_MspInit+0x5ac>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f040 80a6 	bne.w	80022c0 <HAL_TIM_Base_MspInit+0x454>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002174:	4ba9      	ldr	r3, [pc, #676]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 8002176:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800217a:	4aa8      	ldr	r2, [pc, #672]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002184:	4ba5      	ldr	r3, [pc, #660]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 8002186:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	4ba2      	ldr	r3, [pc, #648]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002198:	4aa0      	ldr	r2, [pc, #640]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021a2:	4b9e      	ldr	r3, [pc, #632]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	623b      	str	r3, [r7, #32]
 80021ae:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021b0:	2340      	movs	r3, #64	@ 0x40
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4892      	ldr	r0, [pc, #584]	@ (8002420 <HAL_TIM_Base_MspInit+0x5b4>)
 80021d6:	f002 f8af 	bl	8004338 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80021da:	2321      	movs	r3, #33	@ 0x21
 80021dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM4_CH1;
 80021de:	2343      	movs	r3, #67	@ 0x43
 80021e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80021e2:	2300      	movs	r3, #0
 80021e4:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e6:	2300      	movs	r3, #0
 80021e8:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80021ee:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80021f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80021f4:	2301      	movs	r3, #1
 80021f6:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80021f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021fc:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002206:	2300      	movs	r3, #0
 8002208:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800220a:	2300      	movs	r3, #0
 800220c:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 800220e:	2300      	movs	r3, #0
 8002210:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002212:	2300      	movs	r3, #0
 8002214:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002216:	2300      	movs	r3, #0
 8002218:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800221a:	2300      	movs	r3, #0
 800221c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800221e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002222:	4980      	ldr	r1, [pc, #512]	@ (8002424 <HAL_TIM_Base_MspInit+0x5b8>)
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fac5 	bl	80037b4 <HAL_DMAEx_List_BuildNode>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_TIM_Base_MspInit+0x3c8>
      Error_Handler();
 8002230:	f7ff fd8a 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002234:	4a7b      	ldr	r2, [pc, #492]	@ (8002424 <HAL_TIM_Base_MspInit+0x5b8>)
 8002236:	2100      	movs	r1, #0
 8002238:	487b      	ldr	r0, [pc, #492]	@ (8002428 <HAL_TIM_Base_MspInit+0x5bc>)
 800223a:	f001 fad1 	bl	80037e0 <HAL_DMAEx_List_InsertNode>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_TIM_Base_MspInit+0x3dc>
      Error_Handler();
 8002244:	f7ff fd80 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002248:	4877      	ldr	r0, [pc, #476]	@ (8002428 <HAL_TIM_Base_MspInit+0x5bc>)
 800224a:	f001 fb92 	bl	8003972 <HAL_DMAEx_List_SetCircularMode>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_TIM_Base_MspInit+0x3ec>
      Error_Handler();
 8002254:	f7ff fd78 	bl	8001d48 <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002258:	4b74      	ldr	r3, [pc, #464]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 800225a:	4a75      	ldr	r2, [pc, #468]	@ (8002430 <HAL_TIM_Base_MspInit+0x5c4>)
 800225c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800225e:	4b73      	ldr	r3, [pc, #460]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 8002260:	2200      	movs	r2, #0
 8002262:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002264:	4b71      	ldr	r3, [pc, #452]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 8002266:	2200      	movs	r2, #0
 8002268:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800226a:	4b70      	ldr	r3, [pc, #448]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002270:	4b6e      	ldr	r3, [pc, #440]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002276:	4b6d      	ldr	r3, [pc, #436]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 8002278:	2281      	movs	r2, #129	@ 0x81
 800227a:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800227c:	486b      	ldr	r0, [pc, #428]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 800227e:	f001 f8d9 	bl	8003434 <HAL_DMAEx_List_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_TIM_Base_MspInit+0x420>
      Error_Handler();
 8002288:	f7ff fd5e 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 800228c:	4966      	ldr	r1, [pc, #408]	@ (8002428 <HAL_TIM_Base_MspInit+0x5bc>)
 800228e:	4867      	ldr	r0, [pc, #412]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 8002290:	f001 fbd0 	bl	8003a34 <HAL_DMAEx_List_LinkQ>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_TIM_Base_MspInit+0x432>
      Error_Handler();
 800229a:	f7ff fd55 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a62      	ldr	r2, [pc, #392]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80022a4:	4a61      	ldr	r2, [pc, #388]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80022aa:	2110      	movs	r1, #16
 80022ac:	485f      	ldr	r0, [pc, #380]	@ (800242c <HAL_TIM_Base_MspInit+0x5c0>)
 80022ae:	f001 f860 	bl	8003372 <HAL_DMA_ConfigChannelAttributes>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 821f 	beq.w	80026f8 <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 80022ba:	f7ff fd45 	bl	8001d48 <Error_Handler>
}
 80022be:	e21b      	b.n	80026f8 <HAL_TIM_Base_MspInit+0x88c>
  else if(htim_base->Instance==TIM5)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a5b      	ldr	r2, [pc, #364]	@ (8002434 <HAL_TIM_Base_MspInit+0x5c8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	f040 80c0 	bne.w	800244c <HAL_TIM_Base_MspInit+0x5e0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022cc:	4b53      	ldr	r3, [pc, #332]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 80022ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d2:	4a52      	ldr	r2, [pc, #328]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022dc:	4b4f      	ldr	r3, [pc, #316]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 80022de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	4b4c      	ldr	r3, [pc, #304]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 80022ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f0:	4a4a      	ldr	r2, [pc, #296]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022fa:	4b48      	ldr	r3, [pc, #288]	@ (800241c <HAL_TIM_Base_MspInit+0x5b0>)
 80022fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002308:	2301      	movs	r3, #1
 800230a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800232a:	4619      	mov	r1, r3
 800232c:	4842      	ldr	r0, [pc, #264]	@ (8002438 <HAL_TIM_Base_MspInit+0x5cc>)
 800232e:	f002 f803 	bl	8004338 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002332:	2321      	movs	r3, #33	@ 0x21
 8002334:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM5_CH1;
 8002336:	2348      	movs	r3, #72	@ 0x48
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800233a:	2300      	movs	r3, #0
 800233c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233e:	2300      	movs	r3, #0
 8002340:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002342:	2300      	movs	r3, #0
 8002344:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002346:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800234a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800234c:	2301      	movs	r3, #1
 800234e:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002350:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002354:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 8002356:	2301      	movs	r3, #1
 8002358:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800235e:	2300      	movs	r3, #0
 8002360:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002362:	2300      	movs	r3, #0
 8002364:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002366:	2300      	movs	r3, #0
 8002368:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800236a:	2300      	movs	r3, #0
 800236c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800236e:	2300      	movs	r3, #0
 8002370:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002372:	2300      	movs	r3, #0
 8002374:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002376:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800237a:	4930      	ldr	r1, [pc, #192]	@ (800243c <HAL_TIM_Base_MspInit+0x5d0>)
 800237c:	4618      	mov	r0, r3
 800237e:	f001 fa19 	bl	80037b4 <HAL_DMAEx_List_BuildNode>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_TIM_Base_MspInit+0x520>
      Error_Handler();
 8002388:	f7ff fcde 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 800238c:	4a2b      	ldr	r2, [pc, #172]	@ (800243c <HAL_TIM_Base_MspInit+0x5d0>)
 800238e:	2100      	movs	r1, #0
 8002390:	482b      	ldr	r0, [pc, #172]	@ (8002440 <HAL_TIM_Base_MspInit+0x5d4>)
 8002392:	f001 fa25 	bl	80037e0 <HAL_DMAEx_List_InsertNode>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_TIM_Base_MspInit+0x534>
      Error_Handler();
 800239c:	f7ff fcd4 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80023a0:	4827      	ldr	r0, [pc, #156]	@ (8002440 <HAL_TIM_Base_MspInit+0x5d4>)
 80023a2:	f001 fae6 	bl	8003972 <HAL_DMAEx_List_SetCircularMode>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_TIM_Base_MspInit+0x544>
      Error_Handler();
 80023ac:	f7ff fccc 	bl	8001d48 <Error_Handler>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80023b0:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023b2:	4a25      	ldr	r2, [pc, #148]	@ (8002448 <HAL_TIM_Base_MspInit+0x5dc>)
 80023b4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80023b6:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80023bc:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023d0:	2281      	movs	r2, #129	@ 0x81
 80023d2:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80023d4:	481b      	ldr	r0, [pc, #108]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023d6:	f001 f82d 	bl	8003434 <HAL_DMAEx_List_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_TIM_Base_MspInit+0x578>
      Error_Handler();
 80023e0:	f7ff fcb2 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80023e4:	4916      	ldr	r1, [pc, #88]	@ (8002440 <HAL_TIM_Base_MspInit+0x5d4>)
 80023e6:	4817      	ldr	r0, [pc, #92]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023e8:	f001 fb24 	bl	8003a34 <HAL_DMAEx_List_LinkQ>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_TIM_Base_MspInit+0x58a>
      Error_Handler();
 80023f2:	f7ff fca9 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel3);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80023fc:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002402:	2110      	movs	r1, #16
 8002404:	480f      	ldr	r0, [pc, #60]	@ (8002444 <HAL_TIM_Base_MspInit+0x5d8>)
 8002406:	f000 ffb4 	bl	8003372 <HAL_DMA_ConfigChannelAttributes>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8173 	beq.w	80026f8 <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 8002412:	f7ff fc99 	bl	8001d48 <Error_Handler>
}
 8002416:	e16f      	b.n	80026f8 <HAL_TIM_Base_MspInit+0x88c>
 8002418:	40000800 	.word	0x40000800
 800241c:	46020c00 	.word	0x46020c00
 8002420:	42020400 	.word	0x42020400
 8002424:	20000574 	.word	0x20000574
 8002428:	20000598 	.word	0x20000598
 800242c:	200005b0 	.word	0x200005b0
 8002430:	400200d0 	.word	0x400200d0
 8002434:	40000c00 	.word	0x40000c00
 8002438:	42020000 	.word	0x42020000
 800243c:	20000628 	.word	0x20000628
 8002440:	2000064c 	.word	0x2000064c
 8002444:	20000664 	.word	0x20000664
 8002448:	400201d0 	.word	0x400201d0
  else if(htim_base->Instance==TIM8)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4aab      	ldr	r2, [pc, #684]	@ (8002700 <HAL_TIM_Base_MspInit+0x894>)
 8002452:	4293      	cmp	r3, r2
 8002454:	f040 80a6 	bne.w	80025a4 <HAL_TIM_Base_MspInit+0x738>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002458:	4baa      	ldr	r3, [pc, #680]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 800245a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800245e:	4aa9      	ldr	r2, [pc, #676]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 8002460:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002464:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002468:	4ba6      	ldr	r3, [pc, #664]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 800246a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800246e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4ba3      	ldr	r3, [pc, #652]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 8002478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800247c:	4aa1      	ldr	r2, [pc, #644]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002486:	4b9f      	ldr	r3, [pc, #636]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 8002488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002494:	2340      	movs	r3, #64	@ 0x40
 8002496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4893      	ldr	r0, [pc, #588]	@ (8002708 <HAL_TIM_Base_MspInit+0x89c>)
 80024ba:	f001 ff3d 	bl	8004338 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80024be:	2321      	movs	r3, #33	@ 0x21
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM8_CH1;
 80024c2:	2331      	movs	r3, #49	@ 0x31
 80024c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80024c6:	2300      	movs	r3, #0
 80024c8:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ca:	2300      	movs	r3, #0
 80024cc:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80024ce:	2300      	movs	r3, #0
 80024d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80024d2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80024d8:	2301      	movs	r3, #1
 80024da:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80024dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024e0:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80024ee:	2300      	movs	r3, #0
 80024f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80024f6:	2300      	movs	r3, #0
 80024f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80024fe:	2300      	movs	r3, #0
 8002500:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 8002502:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002506:	4981      	ldr	r1, [pc, #516]	@ (800270c <HAL_TIM_Base_MspInit+0x8a0>)
 8002508:	4618      	mov	r0, r3
 800250a:	f001 f953 	bl	80037b4 <HAL_DMAEx_List_BuildNode>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_TIM_Base_MspInit+0x6ac>
      Error_Handler();
 8002514:	f7ff fc18 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 8002518:	4a7c      	ldr	r2, [pc, #496]	@ (800270c <HAL_TIM_Base_MspInit+0x8a0>)
 800251a:	2100      	movs	r1, #0
 800251c:	487c      	ldr	r0, [pc, #496]	@ (8002710 <HAL_TIM_Base_MspInit+0x8a4>)
 800251e:	f001 f95f 	bl	80037e0 <HAL_DMAEx_List_InsertNode>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_TIM_Base_MspInit+0x6c0>
      Error_Handler();
 8002528:	f7ff fc0e 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 800252c:	4878      	ldr	r0, [pc, #480]	@ (8002710 <HAL_TIM_Base_MspInit+0x8a4>)
 800252e:	f001 fa20 	bl	8003972 <HAL_DMAEx_List_SetCircularMode>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_TIM_Base_MspInit+0x6d0>
      Error_Handler();
 8002538:	f7ff fc06 	bl	8001d48 <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 800253c:	4b75      	ldr	r3, [pc, #468]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 800253e:	4a76      	ldr	r2, [pc, #472]	@ (8002718 <HAL_TIM_Base_MspInit+0x8ac>)
 8002540:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002542:	4b74      	ldr	r3, [pc, #464]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 8002544:	2200      	movs	r2, #0
 8002546:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002548:	4b72      	ldr	r3, [pc, #456]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 800254a:	2200      	movs	r2, #0
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800254e:	4b71      	ldr	r3, [pc, #452]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 8002550:	2200      	movs	r2, #0
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002554:	4b6f      	ldr	r3, [pc, #444]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800255a:	4b6e      	ldr	r3, [pc, #440]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 800255c:	2281      	movs	r2, #129	@ 0x81
 800255e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8002560:	486c      	ldr	r0, [pc, #432]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 8002562:	f000 ff67 	bl	8003434 <HAL_DMAEx_List_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_TIM_Base_MspInit+0x704>
      Error_Handler();
 800256c:	f7ff fbec 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 8002570:	4967      	ldr	r1, [pc, #412]	@ (8002710 <HAL_TIM_Base_MspInit+0x8a4>)
 8002572:	4868      	ldr	r0, [pc, #416]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 8002574:	f001 fa5e 	bl	8003a34 <HAL_DMAEx_List_LinkQ>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_TIM_Base_MspInit+0x716>
      Error_Handler();
 800257e:	f7ff fbe3 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel4);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a63      	ldr	r2, [pc, #396]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24
 8002588:	4a62      	ldr	r2, [pc, #392]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 800258e:	2110      	movs	r1, #16
 8002590:	4860      	ldr	r0, [pc, #384]	@ (8002714 <HAL_TIM_Base_MspInit+0x8a8>)
 8002592:	f000 feee 	bl	8003372 <HAL_DMA_ConfigChannelAttributes>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80ad 	beq.w	80026f8 <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 800259e:	f7ff fbd3 	bl	8001d48 <Error_Handler>
}
 80025a2:	e0a9      	b.n	80026f8 <HAL_TIM_Base_MspInit+0x88c>
  else if(htim_base->Instance==TIM15)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5c      	ldr	r2, [pc, #368]	@ (800271c <HAL_TIM_Base_MspInit+0x8b0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f040 80a4 	bne.w	80026f8 <HAL_TIM_Base_MspInit+0x88c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025b0:	4b54      	ldr	r3, [pc, #336]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 80025b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025b6:	4a53      	ldr	r2, [pc, #332]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025c0:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 80025c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 80025d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025de:	4b49      	ldr	r3, [pc, #292]	@ (8002704 <HAL_TIM_Base_MspInit+0x898>)
 80025e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025ec:	2304      	movs	r3, #4
 80025ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002604:	230e      	movs	r3, #14
 8002606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800260e:	4619      	mov	r1, r3
 8002610:	4843      	ldr	r0, [pc, #268]	@ (8002720 <HAL_TIM_Base_MspInit+0x8b4>)
 8002612:	f001 fe91 	bl	8004338 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002616:	2321      	movs	r3, #33	@ 0x21
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.Request = GPDMA1_REQUEST_TIM15_CH1;
 800261a:	234e      	movs	r3, #78	@ 0x4e
 800261c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800261e:	2300      	movs	r3, #0
 8002620:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002622:	2300      	movs	r3, #0
 8002624:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002626:	2300      	movs	r3, #0
 8002628:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800262a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800262e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002630:	2301      	movs	r3, #1
 8002632:	653b      	str	r3, [r7, #80]	@ 0x50
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002638:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.Init.SrcBurstLength = 1;
 800263a:	2301      	movs	r3, #1
 800263c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.Init.DestBurstLength = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002642:	2300      	movs	r3, #0
 8002644:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002646:	2300      	movs	r3, #0
 8002648:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.Init.Mode = DMA_NORMAL;
 800264a:	2300      	movs	r3, #0
 800264c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800264e:	2300      	movs	r3, #0
 8002650:	67fb      	str	r3, [r7, #124]	@ 0x7c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002652:	2300      	movs	r3, #0
 8002654:	673b      	str	r3, [r7, #112]	@ 0x70
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002656:	2300      	movs	r3, #0
 8002658:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 800265a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800265e:	4931      	ldr	r1, [pc, #196]	@ (8002724 <HAL_TIM_Base_MspInit+0x8b8>)
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f8a7 	bl	80037b4 <HAL_DMAEx_List_BuildNode>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_TIM_Base_MspInit+0x804>
      Error_Handler();
 800266c:	f7ff fb6c 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 8002670:	4a2c      	ldr	r2, [pc, #176]	@ (8002724 <HAL_TIM_Base_MspInit+0x8b8>)
 8002672:	2100      	movs	r1, #0
 8002674:	482c      	ldr	r0, [pc, #176]	@ (8002728 <HAL_TIM_Base_MspInit+0x8bc>)
 8002676:	f001 f8b3 	bl	80037e0 <HAL_DMAEx_List_InsertNode>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_TIM_Base_MspInit+0x818>
      Error_Handler();
 8002680:	f7ff fb62 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8002684:	4828      	ldr	r0, [pc, #160]	@ (8002728 <HAL_TIM_Base_MspInit+0x8bc>)
 8002686:	f001 f974 	bl	8003972 <HAL_DMAEx_List_SetCircularMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_TIM_Base_MspInit+0x828>
      Error_Handler();
 8002690:	f7ff fb5a 	bl	8001d48 <Error_Handler>
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8002694:	4b25      	ldr	r3, [pc, #148]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 8002696:	4a26      	ldr	r2, [pc, #152]	@ (8002730 <HAL_TIM_Base_MspInit+0x8c4>)
 8002698:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800269a:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 800269c:	2200      	movs	r2, #0
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80026a0:	4b22      	ldr	r3, [pc, #136]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80026a6:	4b21      	ldr	r3, [pc, #132]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026b4:	2281      	movs	r2, #129	@ 0x81
 80026b6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 80026b8:	481c      	ldr	r0, [pc, #112]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026ba:	f000 febb 	bl	8003434 <HAL_DMAEx_List_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_TIM_Base_MspInit+0x85c>
      Error_Handler();
 80026c4:	f7ff fb40 	bl	8001d48 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 80026c8:	4917      	ldr	r1, [pc, #92]	@ (8002728 <HAL_TIM_Base_MspInit+0x8bc>)
 80026ca:	4818      	ldr	r0, [pc, #96]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026cc:	f001 f9b2 	bl	8003a34 <HAL_DMAEx_List_LinkQ>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_TIM_Base_MspInit+0x86e>
      Error_Handler();
 80026d6:	f7ff fb37 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel5);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24
 80026e0:	4a12      	ldr	r2, [pc, #72]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 80026e6:	2110      	movs	r1, #16
 80026e8:	4810      	ldr	r0, [pc, #64]	@ (800272c <HAL_TIM_Base_MspInit+0x8c0>)
 80026ea:	f000 fe42 	bl	8003372 <HAL_DMA_ConfigChannelAttributes>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_TIM_Base_MspInit+0x88c>
      Error_Handler();
 80026f4:	f7ff fb28 	bl	8001d48 <Error_Handler>
}
 80026f8:	bf00      	nop
 80026fa:	37b8      	adds	r7, #184	@ 0xb8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40013400 	.word	0x40013400
 8002704:	46020c00 	.word	0x46020c00
 8002708:	42020800 	.word	0x42020800
 800270c:	200006dc 	.word	0x200006dc
 8002710:	20000700 	.word	0x20000700
 8002714:	20000718 	.word	0x20000718
 8002718:	40020250 	.word	0x40020250
 800271c:	40014000 	.word	0x40014000
 8002720:	42020000 	.word	0x42020000
 8002724:	20000790 	.word	0x20000790
 8002728:	200007b4 	.word	0x200007b4
 800272c:	200007cc 	.word	0x200007cc
 8002730:	400202d0 	.word	0x400202d0

08002734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0ba      	sub	sp, #232	@ 0xe8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	22c0      	movs	r2, #192	@ 0xc0
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f008 ffa0 	bl	800b69a <memset>
  if(huart->Instance==USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a26      	ldr	r2, [pc, #152]	@ (80027f8 <HAL_UART_MspInit+0xc4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d145      	bne.n	80027f0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002764:	f04f 0201 	mov.w	r2, #1
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002770:	2300      	movs	r3, #0
 8002772:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fc51 	bl	8006020 <HAL_RCCEx_PeriphCLKConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002784:	f7ff fae0 	bl	8001d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002788:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <HAL_UART_MspInit+0xc8>)
 800278a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800278e:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_UART_MspInit+0xc8>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002794:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002798:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <HAL_UART_MspInit+0xc8>)
 800279a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800279e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_UART_MspInit+0xc8>)
 80027a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027ac:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <HAL_UART_MspInit+0xc8>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_UART_MspInit+0xc8>)
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027de:	2307      	movs	r3, #7
 80027e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <HAL_UART_MspInit+0xcc>)
 80027ec:	f001 fda4 	bl	8004338 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80027f0:	bf00      	nop
 80027f2:	37e8      	adds	r7, #232	@ 0xe8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40013800 	.word	0x40013800
 80027fc:	46020c00 	.word	0x46020c00
 8002800:	42020000 	.word	0x42020000

08002804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <NMI_Handler+0x4>

0800280c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <HardFault_Handler+0x4>

08002814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <MemManage_Handler+0x4>

0800281c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <BusFault_Handler+0x4>

08002824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <UsageFault_Handler+0x4>

0800282c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800285a:	f000 f9f1 	bl	8002c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002868:	4802      	ldr	r0, [pc, #8]	@ (8002874 <GPDMA1_Channel0_IRQHandler+0x10>)
 800286a:	f000 fc21 	bl	80030b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200004fc 	.word	0x200004fc

08002878 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 800287c:	4802      	ldr	r0, [pc, #8]	@ (8002888 <GPDMA1_Channel1_IRQHandler+0x10>)
 800287e:	f000 fc17 	bl	80030b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200005b0 	.word	0x200005b0

0800288c <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <GPDMA1_Channel2_IRQHandler+0x10>)
 8002892:	f000 fc0d 	bl	80030b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000448 	.word	0x20000448

080028a0 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <GPDMA1_Channel3_IRQHandler+0x10>)
 80028a6:	f000 fc03 	bl	80030b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000664 	.word	0x20000664

080028b4 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <GPDMA1_Channel4_IRQHandler+0x10>)
 80028ba:	f000 fbf9 	bl	80030b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000718 	.word	0x20000718

080028c8 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <GPDMA1_Channel5_IRQHandler+0x10>)
 80028ce:	f000 fbef 	bl	80030b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200007cc 	.word	0x200007cc

080028dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return 1;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_kill>:

int _kill(int pid, int sig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028f6:	f008 ff23 	bl	800b740 <__errno>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2216      	movs	r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_exit>:

void _exit (int status)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ffe7 	bl	80028ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800291e:	bf00      	nop
 8002920:	e7fd      	b.n	800291e <_exit+0x12>

08002922 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e00a      	b.n	800294a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002934:	f3af 8000 	nop.w
 8002938:	4601      	mov	r1, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	60ba      	str	r2, [r7, #8]
 8002940:	b2ca      	uxtb	r2, r1
 8002942:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	dbf0      	blt.n	8002934 <_read+0x12>
  }

  return len;
 8002952:	687b      	ldr	r3, [r7, #4]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_close>:
  }
  return len;
}

int _close(int file)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	605a      	str	r2, [r3, #4]
  return 0;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_isatty>:

int _isatty(int file)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029cc:	4a14      	ldr	r2, [pc, #80]	@ (8002a20 <_sbrk+0x5c>)
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <_sbrk+0x60>)
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d8:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <_sbrk+0x64>)
 80029e2:	4a12      	ldr	r2, [pc, #72]	@ (8002a2c <_sbrk+0x68>)
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d207      	bcs.n	8002a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f4:	f008 fea4 	bl	800b740 <__errno>
 80029f8:	4603      	mov	r3, r0
 80029fa:	220c      	movs	r2, #12
 80029fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e009      	b.n	8002a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a04:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <_sbrk+0x64>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0a:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <_sbrk+0x64>)
 8002a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20040000 	.word	0x20040000
 8002a24:	00000400 	.word	0x00000400
 8002a28:	200008d8 	.word	0x200008d8
 8002a2c:	20000a30 	.word	0x20000a30

08002a30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <SystemInit+0x68>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	4a17      	ldr	r2, [pc, #92]	@ (8002a98 <SystemInit+0x68>)
 8002a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <SystemInit+0x6c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <SystemInit+0x6c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a50:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <SystemInit+0x6c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <SystemInit+0x6c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <SystemInit+0x6c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0e      	ldr	r2, [pc, #56]	@ (8002a9c <SystemInit+0x6c>)
 8002a62:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a66:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a6a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <SystemInit+0x6c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <SystemInit+0x6c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <SystemInit+0x6c>)
 8002a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <SystemInit+0x6c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <SystemInit+0x68>)
 8002a86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a8a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00
 8002a9c:	46020c00 	.word	0x46020c00

08002aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002aa0:	480d      	ldr	r0, [pc, #52]	@ (8002ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aa2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002aa4:	f7ff ffc4 	bl	8002a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aa8:	480c      	ldr	r0, [pc, #48]	@ (8002adc <LoopForever+0x6>)
  ldr r1, =_edata
 8002aaa:	490d      	ldr	r1, [pc, #52]	@ (8002ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae4 <LoopForever+0xe>)
  movs r3, #0
 8002aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab0:	e002      	b.n	8002ab8 <LoopCopyDataInit>

08002ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab6:	3304      	adds	r3, #4

08002ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002abc:	d3f9      	bcc.n	8002ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8002aec <LoopForever+0x16>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac4:	e001      	b.n	8002aca <LoopFillZerobss>

08002ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac8:	3204      	adds	r2, #4

08002aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002acc:	d3fb      	bcc.n	8002ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ace:	f008 fe3d 	bl	800b74c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ad2:	f7fe fb4b 	bl	800116c <main>

08002ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ad6:	e7fe      	b.n	8002ad6 <LoopForever>
  ldr   r0, =_estack
 8002ad8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ae4:	0800f4c0 	.word	0x0800f4c0
  ldr r2, =_sbss
 8002ae8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002aec:	20000a2c 	.word	0x20000a2c

08002af0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002af0:	e7fe      	b.n	8002af0 <ADC1_IRQHandler>
	...

08002af4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_Init+0x50>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	@ (8002b44 <HAL_Init+0x50>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 f98c 	bl	8002e22 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b0a:	f003 f8ab 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <HAL_Init+0x54>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	490c      	ldr	r1, [pc, #48]	@ (8002b4c <HAL_Init+0x58>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	4a0b      	ldr	r2, [pc, #44]	@ (8002b50 <HAL_Init+0x5c>)
 8002b22:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b24:	2004      	movs	r0, #4
 8002b26:	f000 f9d1 	bl	8002ecc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b2a:	200f      	movs	r0, #15
 8002b2c:	f000 f812 	bl	8002b54 <HAL_InitTick>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e002      	b.n	8002b40 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3a:	f7ff f915 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40022000 	.word	0x40022000
 8002b48:	46020c00 	.word	0x46020c00
 8002b4c:	0800ef80 	.word	0x0800ef80
 8002b50:	20000000 	.word	0x20000000

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b60:	4b33      	ldr	r3, [pc, #204]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e05c      	b.n	8002c26 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b6c:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_InitTick+0xe0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d10c      	bne.n	8002b92 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b78:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <HAL_InitTick+0xe4>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e037      	b.n	8002c02 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b92:	f000 f9f3 	bl	8002f7c <HAL_SYSTICK_GetCLKSourceConfig>
 8002b96:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d023      	beq.n	8002be6 <HAL_InitTick+0x92>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d82d      	bhi.n	8002c00 <HAL_InitTick+0xac>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_InitTick+0x5e>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d00d      	beq.n	8002bcc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002bb0:	e026      	b.n	8002c00 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bb2:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <HAL_InitTick+0xe4>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
        break;
 8002bca:	e01a      	b.n	8002c02 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bda:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
        break;
 8002be4:	e00d      	b.n	8002c02 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	60fb      	str	r3, [r7, #12]
        break;
 8002bfe:	e000      	b.n	8002c02 <HAL_InitTick+0xae>
        break;
 8002c00:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f940 	bl	8002e88 <HAL_SYSTICK_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e009      	b.n	8002c26 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c12:	2200      	movs	r2, #0
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1a:	f000 f90d 	bl	8002e38 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <HAL_InitTick+0xe8>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000008 	.word	0x20000008
 8002c34:	e000e010 	.word	0xe000e010
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000004 	.word	0x20000004

08002c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_IncTick+0x20>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_IncTick+0x24>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <HAL_IncTick+0x24>)
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000008 	.word	0x20000008
 8002c64:	200008dc 	.word	0x200008dc

08002c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <HAL_GetTick+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	200008dc 	.word	0x200008dc

08002c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff ffee 	bl	8002c68 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d005      	beq.n	8002ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_Delay+0x44>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca6:	bf00      	nop
 8002ca8:	f7ff ffde 	bl	8002c68 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8f7      	bhi.n	8002ca8 <HAL_Delay+0x28>
  {
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <__NVIC_SetPriorityGrouping>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4907      	ldr	r1, [pc, #28]	@ (8002d64 <__NVIC_EnableIRQ+0x38>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	@ (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	@ (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ff4c 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e46:	f7ff ff63 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	6978      	ldr	r0, [r7, #20]
 8002e52:	f7ff ffb3 	bl	8002dbc <NVIC_EncodePriority>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff82 	bl	8002d68 <__NVIC_SetPriority>
}
 8002e64:	bf00      	nop
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff56 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00d      	b.n	8002eba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <HAL_SYSTICK_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <HAL_SYSTICK_Config+0x40>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_SYSTICK_Config+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a05      	ldr	r2, [pc, #20]	@ (8002ec8 <HAL_SYSTICK_Config+0x40>)
 8002eb2:	f043 0303 	orr.w	r3, r3, #3
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d844      	bhi.n	8002f64 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002eda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002f03 	.word	0x08002f03
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f43 	.word	0x08002f43
 8002eec:	08002f65 	.word	0x08002f65
 8002ef0:	08002ef5 	.word	0x08002ef5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6013      	str	r3, [r2, #0]
      break;
 8002f00:	e031      	b.n	8002f66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f02:	4b1c      	ldr	r3, [pc, #112]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1b      	ldr	r2, [pc, #108]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f14:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f1e:	e022      	b.n	8002f66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f20:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a13      	ldr	r2, [pc, #76]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f26:	f023 0304 	bic.w	r3, r3, #4
 8002f2a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002f2c:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f32:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f36:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f40:	e011      	b.n	8002f66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f42:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f54:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f58:	4a07      	ldr	r2, [pc, #28]	@ (8002f78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f62:	e000      	b.n	8002f66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002f64:	bf00      	nop
  }
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e010 	.word	0xe000e010
 8002f78:	46020c00 	.word	0x46020c00

08002f7c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002f82:	4b19      	ldr	r3, [pc, #100]	@ (8002fe8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	e021      	b.n	8002fd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002f94:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f9a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002f9e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fa6:	d011      	beq.n	8002fcc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fae:	d810      	bhi.n	8002fd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fbc:	d003      	beq.n	8002fc6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002fbe:	e008      	b.n	8002fd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	607b      	str	r3, [r7, #4]
        break;
 8002fc4:	e008      	b.n	8002fd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
        break;
 8002fca:	e005      	b.n	8002fd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	607b      	str	r3, [r7, #4]
        break;
 8002fd0:	e002      	b.n	8002fd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
        break;
 8002fd6:	bf00      	nop
    }
  }
  return systick_source;
 8002fd8:	687b      	ldr	r3, [r7, #4]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010
 8002fec:	46020c00 	.word	0x46020c00

08002ff0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e04f      	b.n	80030a8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Start_IT+0x26>
 8003012:	2302      	movs	r3, #2
 8003014:	e048      	b.n	80030a8 <HAL_DMA_Start_IT+0xb8>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d136      	bne.n	8003098 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f9d3 	bl	80033ea <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003052:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e007      	b.n	80030a8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	@ 0x40
 800309c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	3b50      	subs	r3, #80	@ 0x50
 80030d0:	09db      	lsrs	r3, r3, #7
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2201      	movs	r2, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 813b 	beq.w	8003366 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003114:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312c:	2b00      	cmp	r3, #0
 800312e:	d011      	beq.n	8003154 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003146:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	f043 0202 	orr.w	r2, r3, #2
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003178:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d011      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031aa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f043 0208 	orr.w	r2, r3, #8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00c      	beq.n	80031ee <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031dc:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d04c      	beq.n	8003296 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d045      	beq.n	8003296 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003212:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b04      	cmp	r3, #4
 800321e:	d12e      	bne.n	800327e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800322e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0202 	orr.w	r2, r2, #2
 800323e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003258:	2201      	movs	r2, #1
 800325a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d07a      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
        }

        return;
 800327c:	e075      	b.n	800336a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2205      	movs	r2, #5
 8003282:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d039      	beq.n	8003318 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d032      	beq.n	8003318 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d111      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032de:	2201      	movs	r2, #1
 80032e0:	731a      	strb	r2, [r3, #12]
 80032e2:	e008      	b.n	80032f6 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80032fe:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	2b00      	cmp	r3, #0
 800331e:	d025      	beq.n	800336c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0202 	orr.w	r2, r2, #2
 800332e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003348:	2201      	movs	r2, #1
 800334a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
 8003364:	e002      	b.n	800336c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <HAL_DMA_IRQHandler+0x2bc>
        return;
 800336a:	bf00      	nop
    }
  }
}
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e02b      	b.n	80033de <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800338e:	f023 030f 	bic.w	r3, r3, #15
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	3b50      	subs	r3, #80	@ 0x50
 800339e:	09db      	lsrs	r3, r3, #7
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	2201      	movs	r2, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f003 0311 	and.w	r3, r3, #17
 80033bc:	2b11      	cmp	r3, #17
 80033be:	d106      	bne.n	80033ce <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e006      	b.n	80033dc <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	401a      	ands	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	b291      	uxth	r1, r2
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	430b      	orrs	r3, r1
 800340c:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003416:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff fc14 	bl	8002c68 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0db      	b.n	8003604 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6e      	ldr	r2, [pc, #440]	@ (800360c <HAL_DMAEx_List_Init+0x1d8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	f000 809f 	beq.w	8003596 <HAL_DMAEx_List_Init+0x162>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a6c      	ldr	r2, [pc, #432]	@ (8003610 <HAL_DMAEx_List_Init+0x1dc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f000 8099 	beq.w	8003596 <HAL_DMAEx_List_Init+0x162>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6a      	ldr	r2, [pc, #424]	@ (8003614 <HAL_DMAEx_List_Init+0x1e0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	f000 8093 	beq.w	8003596 <HAL_DMAEx_List_Init+0x162>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a68      	ldr	r2, [pc, #416]	@ (8003618 <HAL_DMAEx_List_Init+0x1e4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	f000 808d 	beq.w	8003596 <HAL_DMAEx_List_Init+0x162>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a66      	ldr	r2, [pc, #408]	@ (800361c <HAL_DMAEx_List_Init+0x1e8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	f000 8087 	beq.w	8003596 <HAL_DMAEx_List_Init+0x162>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a64      	ldr	r2, [pc, #400]	@ (8003620 <HAL_DMAEx_List_Init+0x1ec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f000 8081 	beq.w	8003596 <HAL_DMAEx_List_Init+0x162>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a62      	ldr	r2, [pc, #392]	@ (8003624 <HAL_DMAEx_List_Init+0x1f0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d07b      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a61      	ldr	r2, [pc, #388]	@ (8003628 <HAL_DMAEx_List_Init+0x1f4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d076      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5f      	ldr	r2, [pc, #380]	@ (800362c <HAL_DMAEx_List_Init+0x1f8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d071      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003630 <HAL_DMAEx_List_Init+0x1fc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d06c      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003634 <HAL_DMAEx_List_Init+0x200>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d067      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003638 <HAL_DMAEx_List_Init+0x204>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d062      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a59      	ldr	r2, [pc, #356]	@ (800363c <HAL_DMAEx_List_Init+0x208>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d05d      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a58      	ldr	r2, [pc, #352]	@ (8003640 <HAL_DMAEx_List_Init+0x20c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d058      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a56      	ldr	r2, [pc, #344]	@ (8003644 <HAL_DMAEx_List_Init+0x210>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d053      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a55      	ldr	r2, [pc, #340]	@ (8003648 <HAL_DMAEx_List_Init+0x214>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d04e      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a53      	ldr	r2, [pc, #332]	@ (800364c <HAL_DMAEx_List_Init+0x218>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d049      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a52      	ldr	r2, [pc, #328]	@ (8003650 <HAL_DMAEx_List_Init+0x21c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d044      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a50      	ldr	r2, [pc, #320]	@ (8003654 <HAL_DMAEx_List_Init+0x220>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d03f      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4f      	ldr	r2, [pc, #316]	@ (8003658 <HAL_DMAEx_List_Init+0x224>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03a      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a4d      	ldr	r2, [pc, #308]	@ (800365c <HAL_DMAEx_List_Init+0x228>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d035      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4c      	ldr	r2, [pc, #304]	@ (8003660 <HAL_DMAEx_List_Init+0x22c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d030      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4a      	ldr	r2, [pc, #296]	@ (8003664 <HAL_DMAEx_List_Init+0x230>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02b      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a49      	ldr	r2, [pc, #292]	@ (8003668 <HAL_DMAEx_List_Init+0x234>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d026      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a47      	ldr	r2, [pc, #284]	@ (800366c <HAL_DMAEx_List_Init+0x238>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d021      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a46      	ldr	r2, [pc, #280]	@ (8003670 <HAL_DMAEx_List_Init+0x23c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01c      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a44      	ldr	r2, [pc, #272]	@ (8003674 <HAL_DMAEx_List_Init+0x240>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d017      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a43      	ldr	r2, [pc, #268]	@ (8003678 <HAL_DMAEx_List_Init+0x244>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d012      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a41      	ldr	r2, [pc, #260]	@ (800367c <HAL_DMAEx_List_Init+0x248>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00d      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a40      	ldr	r2, [pc, #256]	@ (8003680 <HAL_DMAEx_List_Init+0x24c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d008      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3e      	ldr	r2, [pc, #248]	@ (8003684 <HAL_DMAEx_List_Init+0x250>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <HAL_DMAEx_List_Init+0x162>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3d      	ldr	r2, [pc, #244]	@ (8003688 <HAL_DMAEx_List_Init+0x254>)
 8003594:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0206 	orr.w	r2, r2, #6
 80035b4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80035b6:	e00f      	b.n	80035d8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80035b8:	f7ff fb56 	bl	8002c68 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d908      	bls.n	80035d8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2210      	movs	r2, #16
 80035ca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2203      	movs	r2, #3
 80035d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e015      	b.n	8003604 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e8      	bne.n	80035b8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 faba 	bl	8003b60 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40020050 	.word	0x40020050
 8003610:	50020050 	.word	0x50020050
 8003614:	400200d0 	.word	0x400200d0
 8003618:	500200d0 	.word	0x500200d0
 800361c:	40020150 	.word	0x40020150
 8003620:	50020150 	.word	0x50020150
 8003624:	400201d0 	.word	0x400201d0
 8003628:	500201d0 	.word	0x500201d0
 800362c:	40020250 	.word	0x40020250
 8003630:	50020250 	.word	0x50020250
 8003634:	400202d0 	.word	0x400202d0
 8003638:	500202d0 	.word	0x500202d0
 800363c:	40020350 	.word	0x40020350
 8003640:	50020350 	.word	0x50020350
 8003644:	400203d0 	.word	0x400203d0
 8003648:	500203d0 	.word	0x500203d0
 800364c:	40020450 	.word	0x40020450
 8003650:	50020450 	.word	0x50020450
 8003654:	400204d0 	.word	0x400204d0
 8003658:	500204d0 	.word	0x500204d0
 800365c:	40020550 	.word	0x40020550
 8003660:	50020550 	.word	0x50020550
 8003664:	400205d0 	.word	0x400205d0
 8003668:	500205d0 	.word	0x500205d0
 800366c:	40020650 	.word	0x40020650
 8003670:	50020650 	.word	0x50020650
 8003674:	400206d0 	.word	0x400206d0
 8003678:	500206d0 	.word	0x500206d0
 800367c:	40020750 	.word	0x40020750
 8003680:	50020750 	.word	0x50020750
 8003684:	400207d0 	.word	0x400207d0
 8003688:	500207d0 	.word	0x500207d0

0800368c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_DMAEx_List_Start_IT+0x16>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e082      	b.n	80037ac <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036ac:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d005      	beq.n	80036cc <HAL_DMAEx_List_Start_IT+0x40>
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d16a      	bne.n	800379c <HAL_DMAEx_List_Start_IT+0x110>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d067      	beq.n	800379c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d157      	bne.n	8003788 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_DMAEx_List_Start_IT+0x5a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e062      	b.n	80037ac <HAL_DMAEx_List_Start_IT+0x120>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fa:	2202      	movs	r2, #2
 80036fc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800371a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003732:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800374a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f107 010c 	add.w	r1, r7, #12
 8003756:	2200      	movs	r2, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fd1d 	bl	8004198 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	0c0b      	lsrs	r3, r1, #16
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800377c:	4013      	ands	r3, r2
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e007      	b.n	80037ac <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2240      	movs	r2, #64	@ 0x40
 80037a0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_DMAEx_List_BuildNode+0x16>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e004      	b.n	80037d8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80037ce:	6839      	ldr	r1, [r7, #0]
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fb1d 	bl	8003e10 <DMA_List_BuildNode>

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	@ 0x30
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_DMAEx_List_InsertNode+0x18>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b6      	b.n	800396a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d104      	bne.n	800380e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2204      	movs	r2, #4
 8003808:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0ad      	b.n	800396a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fc52 	bl	80040c0 <DMA_List_CheckNodesBaseAddresses>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2205      	movs	r2, #5
 8003826:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e09e      	b.n	800396a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fc73 	bl	8004120 <DMA_List_CheckNodesTypes>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2204      	movs	r2, #4
 8003844:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e08f      	b.n	800396a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2202      	movs	r2, #2
 800384e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003856:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800385a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fc99 	bl	8004198 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d11a      	bne.n	80038a4 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	e06c      	b.n	800395c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800388e:	4013      	ands	r3, r2
 8003890:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003894:	4319      	orrs	r1, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2202      	movs	r2, #2
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	e05b      	b.n	800395c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10f      	bne.n	80038ca <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038b4:	4013      	ands	r3, r2
 80038b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038ba:	4319      	orrs	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e043      	b.n	8003952 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	461a      	mov	r2, r3
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fc8e 	bl	80041f8 <DMA_List_FindNode>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d132      	bne.n	8003948 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d11a      	bne.n	8003922 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	461a      	mov	r2, r3
 80038fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038fe:	4013      	ands	r3, r2
 8003900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003904:	4319      	orrs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003912:	4013      	ands	r3, r2
 8003914:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003918:	4319      	orrs	r1, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003920:	e017      	b.n	8003952 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003938:	4013      	ands	r3, r2
 800393a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800393c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800393e:	4319      	orrs	r1, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003946:	e004      	b.n	8003952 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2206      	movs	r2, #6
 800394c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e00b      	b.n	800396a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3730      	adds	r7, #48	@ 0x30
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b08a      	sub	sp, #40	@ 0x28
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e052      	b.n	8003a2a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e049      	b.n	8003a2a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d101      	bne.n	80039ae <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e03d      	b.n	8003a2a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e038      	b.n	8003a2a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d104      	bne.n	80039ca <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2204      	movs	r2, #4
 80039c4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e02f      	b.n	8003a2a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f107 0220 	add.w	r2, r7, #32
 80039de:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fbd8 	bl	8004198 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	461a      	mov	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fbff 	bl	80041f8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003a04:	4013      	ands	r3, r2
 8003a06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003a0e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003a10:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3728      	adds	r7, #40	@ 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_DMAEx_List_LinkQ+0x16>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e072      	b.n	8003b34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a54:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d002      	beq.n	8003a68 <HAL_DMAEx_List_LinkQ+0x34>
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d108      	bne.n	8003a7a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2240      	movs	r2, #64	@ 0x40
 8003a6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e05c      	b.n	8003b34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	7b1b      	ldrb	r3, [r3, #12]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d104      	bne.n	8003a8e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e052      	b.n	8003b34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	@ (8003b40 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d022      	beq.n	8003ade <HAL_DMAEx_List_LinkQ+0xaa>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a29      	ldr	r2, [pc, #164]	@ (8003b44 <HAL_DMAEx_List_LinkQ+0x110>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01d      	beq.n	8003ade <HAL_DMAEx_List_LinkQ+0xaa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a28      	ldr	r2, [pc, #160]	@ (8003b48 <HAL_DMAEx_List_LinkQ+0x114>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d018      	beq.n	8003ade <HAL_DMAEx_List_LinkQ+0xaa>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a26      	ldr	r2, [pc, #152]	@ (8003b4c <HAL_DMAEx_List_LinkQ+0x118>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_DMAEx_List_LinkQ+0xaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a25      	ldr	r2, [pc, #148]	@ (8003b50 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00e      	beq.n	8003ade <HAL_DMAEx_List_LinkQ+0xaa>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a23      	ldr	r2, [pc, #140]	@ (8003b54 <HAL_DMAEx_List_LinkQ+0x120>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d009      	beq.n	8003ade <HAL_DMAEx_List_LinkQ+0xaa>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a22      	ldr	r2, [pc, #136]	@ (8003b58 <HAL_DMAEx_List_LinkQ+0x124>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_DMAEx_List_LinkQ+0xaa>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <HAL_DMAEx_List_LinkQ+0x128>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_DMAEx_List_LinkQ+0xae>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_DMAEx_List_LinkQ+0xb0>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2203      	movs	r2, #3
 8003afa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e019      	b.n	8003b34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b04:	2b81      	cmp	r3, #129	@ 0x81
 8003b06:	d108      	bne.n	8003b1a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00c      	b.n	8003b34 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2204      	movs	r2, #4
 8003b26:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e003      	b.n	8003b34 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40020650 	.word	0x40020650
 8003b44:	50020650 	.word	0x50020650
 8003b48:	400206d0 	.word	0x400206d0
 8003b4c:	500206d0 	.word	0x500206d0
 8003b50:	40020750 	.word	0x40020750
 8003b54:	50020750 	.word	0x50020750
 8003b58:	400207d0 	.word	0x400207d0
 8003b5c:	500207d0 	.word	0x500207d0

08003b60 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a85      	ldr	r2, [pc, #532]	@ (8003d90 <DMA_List_Init+0x230>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f000 80a0 	beq.w	8003cc0 <DMA_List_Init+0x160>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a83      	ldr	r2, [pc, #524]	@ (8003d94 <DMA_List_Init+0x234>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f000 809a 	beq.w	8003cc0 <DMA_List_Init+0x160>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a81      	ldr	r2, [pc, #516]	@ (8003d98 <DMA_List_Init+0x238>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f000 8094 	beq.w	8003cc0 <DMA_List_Init+0x160>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7f      	ldr	r2, [pc, #508]	@ (8003d9c <DMA_List_Init+0x23c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f000 808e 	beq.w	8003cc0 <DMA_List_Init+0x160>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a7d      	ldr	r2, [pc, #500]	@ (8003da0 <DMA_List_Init+0x240>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f000 8088 	beq.w	8003cc0 <DMA_List_Init+0x160>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a7b      	ldr	r2, [pc, #492]	@ (8003da4 <DMA_List_Init+0x244>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f000 8082 	beq.w	8003cc0 <DMA_List_Init+0x160>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a79      	ldr	r2, [pc, #484]	@ (8003da8 <DMA_List_Init+0x248>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d07c      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a78      	ldr	r2, [pc, #480]	@ (8003dac <DMA_List_Init+0x24c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d077      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a76      	ldr	r2, [pc, #472]	@ (8003db0 <DMA_List_Init+0x250>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d072      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a75      	ldr	r2, [pc, #468]	@ (8003db4 <DMA_List_Init+0x254>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d06d      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a73      	ldr	r2, [pc, #460]	@ (8003db8 <DMA_List_Init+0x258>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d068      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a72      	ldr	r2, [pc, #456]	@ (8003dbc <DMA_List_Init+0x25c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d063      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a70      	ldr	r2, [pc, #448]	@ (8003dc0 <DMA_List_Init+0x260>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d05e      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6f      	ldr	r2, [pc, #444]	@ (8003dc4 <DMA_List_Init+0x264>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d059      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a6d      	ldr	r2, [pc, #436]	@ (8003dc8 <DMA_List_Init+0x268>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d054      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8003dcc <DMA_List_Init+0x26c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04f      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	@ (8003dd0 <DMA_List_Init+0x270>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d04a      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a69      	ldr	r2, [pc, #420]	@ (8003dd4 <DMA_List_Init+0x274>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d045      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a67      	ldr	r2, [pc, #412]	@ (8003dd8 <DMA_List_Init+0x278>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d040      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a66      	ldr	r2, [pc, #408]	@ (8003ddc <DMA_List_Init+0x27c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d03b      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a64      	ldr	r2, [pc, #400]	@ (8003de0 <DMA_List_Init+0x280>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d036      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a63      	ldr	r2, [pc, #396]	@ (8003de4 <DMA_List_Init+0x284>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d031      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a61      	ldr	r2, [pc, #388]	@ (8003de8 <DMA_List_Init+0x288>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02c      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a60      	ldr	r2, [pc, #384]	@ (8003dec <DMA_List_Init+0x28c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d027      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a5e      	ldr	r2, [pc, #376]	@ (8003df0 <DMA_List_Init+0x290>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d022      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5d      	ldr	r2, [pc, #372]	@ (8003df4 <DMA_List_Init+0x294>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01d      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5b      	ldr	r2, [pc, #364]	@ (8003df8 <DMA_List_Init+0x298>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5a      	ldr	r2, [pc, #360]	@ (8003dfc <DMA_List_Init+0x29c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a58      	ldr	r2, [pc, #352]	@ (8003e00 <DMA_List_Init+0x2a0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a57      	ldr	r2, [pc, #348]	@ (8003e04 <DMA_List_Init+0x2a4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a55      	ldr	r2, [pc, #340]	@ (8003e08 <DMA_List_Init+0x2a8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <DMA_List_Init+0x160>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a54      	ldr	r2, [pc, #336]	@ (8003e0c <DMA_List_Init+0x2ac>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <DMA_List_Init+0x164>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <DMA_List_Init+0x166>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2200      	movs	r2, #0
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a36      	ldr	r2, [pc, #216]	@ (8003df0 <DMA_List_Init+0x290>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <DMA_List_Init+0x202>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a34      	ldr	r2, [pc, #208]	@ (8003df4 <DMA_List_Init+0x294>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <DMA_List_Init+0x202>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a33      	ldr	r2, [pc, #204]	@ (8003df8 <DMA_List_Init+0x298>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <DMA_List_Init+0x202>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a31      	ldr	r2, [pc, #196]	@ (8003dfc <DMA_List_Init+0x29c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <DMA_List_Init+0x202>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a30      	ldr	r2, [pc, #192]	@ (8003e00 <DMA_List_Init+0x2a0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <DMA_List_Init+0x202>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2e      	ldr	r2, [pc, #184]	@ (8003e04 <DMA_List_Init+0x2a4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <DMA_List_Init+0x202>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2d      	ldr	r2, [pc, #180]	@ (8003e08 <DMA_List_Init+0x2a8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <DMA_List_Init+0x202>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e0c <DMA_List_Init+0x2ac>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <DMA_List_Init+0x206>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <DMA_List_Init+0x208>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40020050 	.word	0x40020050
 8003d94:	50020050 	.word	0x50020050
 8003d98:	400200d0 	.word	0x400200d0
 8003d9c:	500200d0 	.word	0x500200d0
 8003da0:	40020150 	.word	0x40020150
 8003da4:	50020150 	.word	0x50020150
 8003da8:	400201d0 	.word	0x400201d0
 8003dac:	500201d0 	.word	0x500201d0
 8003db0:	40020250 	.word	0x40020250
 8003db4:	50020250 	.word	0x50020250
 8003db8:	400202d0 	.word	0x400202d0
 8003dbc:	500202d0 	.word	0x500202d0
 8003dc0:	40020350 	.word	0x40020350
 8003dc4:	50020350 	.word	0x50020350
 8003dc8:	400203d0 	.word	0x400203d0
 8003dcc:	500203d0 	.word	0x500203d0
 8003dd0:	40020450 	.word	0x40020450
 8003dd4:	50020450 	.word	0x50020450
 8003dd8:	400204d0 	.word	0x400204d0
 8003ddc:	500204d0 	.word	0x500204d0
 8003de0:	40020550 	.word	0x40020550
 8003de4:	50020550 	.word	0x50020550
 8003de8:	400205d0 	.word	0x400205d0
 8003dec:	500205d0 	.word	0x500205d0
 8003df0:	40020650 	.word	0x40020650
 8003df4:	50020650 	.word	0x50020650
 8003df8:	400206d0 	.word	0x400206d0
 8003dfc:	500206d0 	.word	0x500206d0
 8003e00:	40020750 	.word	0x40020750
 8003e04:	50020750 	.word	0x50020750
 8003e08:	400207d0 	.word	0x400207d0
 8003e0c:	500207d0 	.word	0x500207d0

08003e10 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003e22:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003e28:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003e2e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003e34:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	051b      	lsls	r3, r3, #20
 8003e5c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003e60:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	3b01      	subs	r3, #1
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003e6e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003e70:	431a      	orrs	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	f240 237f 	movw	r3, #639	@ 0x27f
 8003e82:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003e84:	431a      	orrs	r2, r3
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e92:	d10c      	bne.n	8003eae <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d011      	beq.n	8003ec4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	e00a      	b.n	8003ec4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb6:	d105      	bne.n	8003ec4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00f      	beq.n	8003eec <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003ee4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04e      	beq.n	8003fa0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	0419      	lsls	r1, r3, #16
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80040b8 <DMA_List_BuildNode+0x2a8>)
 8003f10:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003f12:	431a      	orrs	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da06      	bge.n	8003f2e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	e005      	b.n	8003f3a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da06      	bge.n	8003f50 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	609a      	str	r2, [r3, #8]
 8003f4e:	e005      	b.n	8003f5c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da06      	bge.n	8003f72 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	e005      	b.n	8003f7e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da06      	bge.n	8003f94 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	e005      	b.n	8003fa0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05d      	beq.n	8004078 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da09      	bge.n	8003fd8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc8:	425b      	negs	r3, r3
 8003fca:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	615a      	str	r2, [r3, #20]
 8003fd6:	e005      	b.n	8003fe4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fdc:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	da0d      	bge.n	8004008 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	0419      	lsls	r1, r3, #16
 8003ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80040bc <DMA_List_BuildNode+0x2ac>)
 8003ffe:	400b      	ands	r3, r1
 8004000:	431a      	orrs	r2, r3
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	615a      	str	r2, [r3, #20]
 8004006:	e009      	b.n	800401c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	0419      	lsls	r1, r3, #16
 8004012:	4b2a      	ldr	r3, [pc, #168]	@ (80040bc <DMA_List_BuildNode+0x2ac>)
 8004014:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004016:	431a      	orrs	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004020:	2b00      	cmp	r3, #0
 8004022:	da08      	bge.n	8004036 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	425b      	negs	r3, r3
 800402a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	b29a      	uxth	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	619a      	str	r2, [r3, #24]
 8004034:	e004      	b.n	8004040 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0b      	bge.n	8004060 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	425b      	negs	r3, r3
 800404e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004058:	431a      	orrs	r2, r3
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	619a      	str	r2, [r3, #24]
 800405e:	e007      	b.n	8004070 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800406a:	431a      	orrs	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
 8004076:	e002      	b.n	800407e <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800409e:	e005      	b.n	80040ac <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	07ff0000 	.word	0x07ff0000
 80040bc:	1fff0000 	.word	0x1fff0000

080040c0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e00a      	b.n	8004102 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e004      	b.n	8004102 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e00e      	b.n	800415e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e006      	b.n	800415e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004170:	2302      	movs	r3, #2
 8004172:	e00b      	b.n	800418c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	429a      	cmp	r2, r3
 8004184:	d001      	beq.n	800418a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004186:	2303      	movs	r3, #3
 8004188:	e000      	b.n	800418c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <DMA_List_GetCLLRNodeInfo+0x58>)
 80041ba:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00f      	beq.n	80041e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2207      	movs	r2, #7
 80041c6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80041c8:	e00b      	b.n	80041e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4a08      	ldr	r2, [pc, #32]	@ (80041f4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80041d4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2205      	movs	r2, #5
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	fe010000 	.word	0xfe010000
 80041f4:	f8010000 	.word	0xf8010000

080041f8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	@ 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d142      	bne.n	80042a2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800421c:	e01d      	b.n	800425a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e00f      	b.n	8004254 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4413      	add	r3, r2
 8004244:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800424c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3301      	adds	r3, #1
 8004258:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	429a      	cmp	r2, r3
 8004262:	d3dc      	bcc.n	800421e <DMA_List_FindNode+0x26>
 8004264:	e029      	b.n	80042ba <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	e00f      	b.n	800429c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4413      	add	r3, r2
 800428c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004294:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d206      	bcs.n	80042ba <DMA_List_FindNode+0xc2>
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042b2:	4013      	ands	r3, r2
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d1d5      	bne.n	8004266 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042c6:	4013      	ands	r3, r2
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d001      	beq.n	80042d2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e02b      	b.n	800432a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	461a      	mov	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00f      	beq.n	8004328 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	461a      	mov	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004314:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004318:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	@ 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	@ 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800434a:	e1ba      	b.n	80046c2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 81aa 	beq.w	80046bc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a55      	ldr	r2, [pc, #340]	@ (80044c0 <HAL_GPIO_Init+0x188>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d15d      	bne.n	800442c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004376:	2201      	movs	r2, #1
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	4013      	ands	r3, r2
 8004384:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0201 	and.w	r2, r3, #1
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	4313      	orrs	r3, r2
 8004398:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80043a0:	4a48      	ldr	r2, [pc, #288]	@ (80044c4 <HAL_GPIO_Init+0x18c>)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043a8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80043aa:	4a46      	ldr	r2, [pc, #280]	@ (80044c4 <HAL_GPIO_Init+0x18c>)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	08da      	lsrs	r2, r3, #3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3208      	adds	r2, #8
 80043be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	220f      	movs	r2, #15
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	220b      	movs	r2, #11
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	3208      	adds	r2, #8
 80043f6:	69f9      	ldr	r1, [r7, #28]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	4013      	ands	r3, r2
 8004412:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	2202      	movs	r2, #2
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	4313      	orrs	r3, r2
 8004422:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e067      	b.n	80044fc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x104>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b12      	cmp	r3, #18
 800443a:	d145      	bne.n	80044c8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3208      	adds	r2, #8
 8004444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004448:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	220f      	movs	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	4013      	ands	r3, r2
 800445e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	4313      	orrs	r3, r2
 8004478:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	08da      	lsrs	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3208      	adds	r2, #8
 8004482:	69f9      	ldr	r1, [r7, #28]
 8004484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	4013      	ands	r3, r2
 800449e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0203 	and.w	r2, r3, #3
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e01e      	b.n	80044fc <HAL_GPIO_Init+0x1c4>
 80044be:	bf00      	nop
 80044c0:	46020000 	.word	0x46020000
 80044c4:	0800efd8 	.word	0x0800efd8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	4013      	ands	r3, r2
 80044de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0203 	and.w	r2, r3, #3
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d00b      	beq.n	800451c <HAL_GPIO_Init+0x1e4>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d007      	beq.n	800451c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004510:	2b11      	cmp	r3, #17
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b12      	cmp	r3, #18
 800451a:	d130      	bne.n	800457e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	2203      	movs	r2, #3
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	4013      	ands	r3, r2
 8004532:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	4313      	orrs	r3, r2
 8004544:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004552:	2201      	movs	r2, #1
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	4013      	ands	r3, r2
 8004560:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 0201 	and.w	r2, r3, #1
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	4313      	orrs	r3, r2
 8004576:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d017      	beq.n	80045b6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	2203      	movs	r2, #3
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	4013      	ands	r3, r2
 800459c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d07c      	beq.n	80046bc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80045c2:	4a47      	ldr	r2, [pc, #284]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	3318      	adds	r3, #24
 80045ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	220f      	movs	r2, #15
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0a9a      	lsrs	r2, r3, #10
 80045ea:	4b3e      	ldr	r3, [pc, #248]	@ (80046e4 <HAL_GPIO_Init+0x3ac>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	f002 0203 	and.w	r2, r2, #3
 80045f4:	00d2      	lsls	r2, r2, #3
 80045f6:	4093      	lsls	r3, r2
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80045fe:	4938      	ldr	r1, [pc, #224]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	3318      	adds	r3, #24
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800460c:	4b34      	ldr	r3, [pc, #208]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	43db      	mvns	r3, r3
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	4013      	ands	r3, r2
 800461a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004630:	4a2b      	ldr	r2, [pc, #172]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004636:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	43db      	mvns	r3, r3
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	4013      	ands	r3, r2
 8004644:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800465a:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004660:	4b1f      	ldr	r3, [pc, #124]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 8004662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004666:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	43db      	mvns	r3, r3
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	4013      	ands	r3, r2
 8004670:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004686:	4a16      	ldr	r2, [pc, #88]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 8004690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004694:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	43db      	mvns	r3, r3
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	4013      	ands	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80046b4:	4a0a      	ldr	r2, [pc, #40]	@ (80046e0 <HAL_GPIO_Init+0x3a8>)
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3301      	adds	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f47f ae3d 	bne.w	800434c <HAL_GPIO_Init+0x14>
  }
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	3724      	adds	r7, #36	@ 0x24
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	46022000 	.word	0x46022000
 80046e4:	002f7f7f 	.word	0x002f7f7f

080046e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	807b      	strh	r3, [r7, #2]
 80046f4:	4613      	mov	r3, r2
 80046f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046f8:	787b      	ldrb	r3, [r7, #1]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046fe:	887a      	ldrh	r2, [r7, #2]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004704:	e002      	b.n	800470c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4013      	ands	r3, r2
 8004730:	041a      	lsls	r2, r3, #16
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	43d9      	mvns	r1, r3
 8004736:	887b      	ldrh	r3, [r7, #2]
 8004738:	400b      	ands	r3, r1
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	619a      	str	r2, [r3, #24]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e08d      	b.n	800487a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd fb12 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	@ 0x24
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800479c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d107      	bne.n	80047c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	e006      	b.n	80047d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80047d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d108      	bne.n	80047ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	e007      	b.n	80047fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800480c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69d9      	ldr	r1, [r3, #28]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	d138      	bne.n	800490a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e032      	b.n	800490c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2224      	movs	r2, #36	@ 0x24
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b20      	cmp	r3, #32
 800492c:	d139      	bne.n	80049a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004938:	2302      	movs	r3, #2
 800493a:	e033      	b.n	80049a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	@ 0x24
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800496a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80049b8:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049c0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d10b      	bne.n	80049e2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d0:	d905      	bls.n	80049de <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80049d2:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4a32      	ldr	r2, [pc, #200]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049dc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e057      	b.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e8:	d90a      	bls.n	8004a00 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80049ea:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	60d3      	str	r3, [r2, #12]
 80049fe:	e007      	b.n	8004a10 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004a00:	4b27      	ldr	r3, [pc, #156]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004a08:	4925      	ldr	r1, [pc, #148]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a10:	4b24      	ldr	r3, [pc, #144]	@ (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a24      	ldr	r2, [pc, #144]	@ (8004aa8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	099b      	lsrs	r3, r3, #6
 8004a1c:	2232      	movs	r2, #50	@ 0x32
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	4a21      	ldr	r2, [pc, #132]	@ (8004aa8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a2e:	e002      	b.n	8004a36 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a36:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f3      	bne.n	8004a30 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01b      	beq.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a4e:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	2232      	movs	r2, #50	@ 0x32
 8004a5c:	fb02 f303 	mul.w	r3, r2, r3
 8004a60:	4a11      	ldr	r2, [pc, #68]	@ (8004aa8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	3301      	adds	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004a6c:	e002      	b.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004a74:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f3      	bne.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e000      	b.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	46020800 	.word	0x46020800
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	10624dd3 	.word	0x10624dd3

08004aac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	46020800 	.word	0x46020800

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08e      	sub	sp, #56	@ 0x38
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f000 bec8 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae2:	4b99      	ldr	r3, [pc, #612]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aec:	4b96      	ldr	r3, [pc, #600]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 816c 	beq.w	8004ddc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_RCC_OscConfig+0x52>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	f040 80de 	bne.w	8004cce <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	f040 80da 	bne.w	8004cce <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f000 bea5 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b2c:	4b86      	ldr	r3, [pc, #536]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_RCC_OscConfig+0x7a>
 8004b38:	4b83      	ldr	r3, [pc, #524]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b40:	e005      	b.n	8004b4e <HAL_RCC_OscConfig+0x86>
 8004b42:	4b81      	ldr	r3, [pc, #516]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d255      	bcs.n	8004bfe <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 f9d9 	bl	8005f14 <RCC_SetFlashLatencyFromMSIRange>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f000 be82 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b6e:	4b76      	ldr	r3, [pc, #472]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4a75      	ldr	r2, [pc, #468]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b78:	6093      	str	r3, [r2, #8]
 8004b7a:	4b73      	ldr	r3, [pc, #460]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	4970      	ldr	r1, [pc, #448]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b94:	d309      	bcc.n	8004baa <HAL_RCC_OscConfig+0xe2>
 8004b96:	4b6c      	ldr	r3, [pc, #432]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f023 021f 	bic.w	r2, r3, #31
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4969      	ldr	r1, [pc, #420]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60cb      	str	r3, [r1, #12]
 8004ba8:	e07e      	b.n	8004ca8 <HAL_RCC_OscConfig+0x1e0>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da0a      	bge.n	8004bc8 <HAL_RCC_OscConfig+0x100>
 8004bb2:	4b65      	ldr	r3, [pc, #404]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	015b      	lsls	r3, r3, #5
 8004bc0:	4961      	ldr	r1, [pc, #388]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60cb      	str	r3, [r1, #12]
 8004bc6:	e06f      	b.n	8004ca8 <HAL_RCC_OscConfig+0x1e0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd0:	d30a      	bcc.n	8004be8 <HAL_RCC_OscConfig+0x120>
 8004bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	029b      	lsls	r3, r3, #10
 8004be0:	4959      	ldr	r1, [pc, #356]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60cb      	str	r3, [r1, #12]
 8004be6:	e05f      	b.n	8004ca8 <HAL_RCC_OscConfig+0x1e0>
 8004be8:	4b57      	ldr	r3, [pc, #348]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	03db      	lsls	r3, r3, #15
 8004bf6:	4954      	ldr	r1, [pc, #336]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
 8004bfc:	e054      	b.n	8004ca8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004bfe:	4b52      	ldr	r3, [pc, #328]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4a51      	ldr	r2, [pc, #324]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c08:	6093      	str	r3, [r2, #8]
 8004c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	494c      	ldr	r1, [pc, #304]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004c24:	d309      	bcc.n	8004c3a <HAL_RCC_OscConfig+0x172>
 8004c26:	4b48      	ldr	r3, [pc, #288]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 021f 	bic.w	r2, r3, #31
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	4945      	ldr	r1, [pc, #276]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60cb      	str	r3, [r1, #12]
 8004c38:	e028      	b.n	8004c8c <HAL_RCC_OscConfig+0x1c4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0a      	bge.n	8004c58 <HAL_RCC_OscConfig+0x190>
 8004c42:	4b41      	ldr	r3, [pc, #260]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	015b      	lsls	r3, r3, #5
 8004c50:	493d      	ldr	r1, [pc, #244]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]
 8004c56:	e019      	b.n	8004c8c <HAL_RCC_OscConfig+0x1c4>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c60:	d30a      	bcc.n	8004c78 <HAL_RCC_OscConfig+0x1b0>
 8004c62:	4b39      	ldr	r3, [pc, #228]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	4935      	ldr	r1, [pc, #212]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]
 8004c76:	e009      	b.n	8004c8c <HAL_RCC_OscConfig+0x1c4>
 8004c78:	4b33      	ldr	r3, [pc, #204]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	03db      	lsls	r3, r3, #15
 8004c86:	4930      	ldr	r1, [pc, #192]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	4618      	mov	r0, r3
 8004c98:	f001 f93c 	bl	8005f14 <RCC_SetFlashLatencyFromMSIRange>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f000 bde5 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004ca8:	f001 f8de 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cac:	4b27      	ldr	r3, [pc, #156]	@ (8004d4c <HAL_RCC_OscConfig+0x284>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fd ff4f 	bl	8002b54 <HAL_InitTick>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 808a 	beq.w	8004dda <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cca:	f000 bdd2 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d066      	beq.n	8004da4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1b      	ldr	r2, [pc, #108]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ce2:	f7fd ffc1 	bl	8002c68 <HAL_GetTick>
 8004ce6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ce8:	e009      	b.n	8004cfe <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cea:	f7fd ffbd 	bl	8002c68 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d902      	bls.n	8004cfe <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	f000 bdba 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0ef      	beq.n	8004cea <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004d10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d14:	6093      	str	r3, [r2, #8]
 8004d16:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	4909      	ldr	r1, [pc, #36]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004d30:	d30e      	bcc.n	8004d50 <HAL_RCC_OscConfig+0x288>
 8004d32:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 021f 	bic.w	r2, r3, #31
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4902      	ldr	r1, [pc, #8]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60cb      	str	r3, [r1, #12]
 8004d44:	e04a      	b.n	8004ddc <HAL_RCC_OscConfig+0x314>
 8004d46:	bf00      	nop
 8004d48:	46020c00 	.word	0x46020c00
 8004d4c:	20000004 	.word	0x20000004
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	da0a      	bge.n	8004d6e <HAL_RCC_OscConfig+0x2a6>
 8004d58:	4b98      	ldr	r3, [pc, #608]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	015b      	lsls	r3, r3, #5
 8004d66:	4995      	ldr	r1, [pc, #596]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60cb      	str	r3, [r1, #12]
 8004d6c:	e036      	b.n	8004ddc <HAL_RCC_OscConfig+0x314>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d76:	d30a      	bcc.n	8004d8e <HAL_RCC_OscConfig+0x2c6>
 8004d78:	4b90      	ldr	r3, [pc, #576]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	498d      	ldr	r1, [pc, #564]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60cb      	str	r3, [r1, #12]
 8004d8c:	e026      	b.n	8004ddc <HAL_RCC_OscConfig+0x314>
 8004d8e:	4b8b      	ldr	r3, [pc, #556]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	03db      	lsls	r3, r3, #15
 8004d9c:	4987      	ldr	r1, [pc, #540]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60cb      	str	r3, [r1, #12]
 8004da2:	e01b      	b.n	8004ddc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004da4:	4b85      	ldr	r3, [pc, #532]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a84      	ldr	r2, [pc, #528]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004db0:	f7fd ff5a 	bl	8002c68 <HAL_GetTick>
 8004db4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004db6:	e009      	b.n	8004dcc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004db8:	f7fd ff56 	bl	8002c68 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d902      	bls.n	8004dcc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	f000 bd53 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004dcc:	4b7b      	ldr	r3, [pc, #492]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ef      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2f0>
 8004dd8:	e000      	b.n	8004ddc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004dda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 808b 	beq.w	8004f00 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_OscConfig+0x334>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d17d      	bne.n	8004f00 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f000 bd34 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e12:	d106      	bne.n	8004e22 <HAL_RCC_OscConfig+0x35a>
 8004e14:	4b69      	ldr	r3, [pc, #420]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a68      	ldr	r2, [pc, #416]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e041      	b.n	8004ea6 <HAL_RCC_OscConfig+0x3de>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e2a:	d112      	bne.n	8004e52 <HAL_RCC_OscConfig+0x38a>
 8004e2c:	4b63      	ldr	r3, [pc, #396]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a62      	ldr	r2, [pc, #392]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b60      	ldr	r3, [pc, #384]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a5f      	ldr	r2, [pc, #380]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b5d      	ldr	r3, [pc, #372]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5c      	ldr	r2, [pc, #368]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e029      	b.n	8004ea6 <HAL_RCC_OscConfig+0x3de>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004e5a:	d112      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3ba>
 8004e5c:	4b57      	ldr	r3, [pc, #348]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a56      	ldr	r2, [pc, #344]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4b54      	ldr	r3, [pc, #336]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a53      	ldr	r2, [pc, #332]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	4b51      	ldr	r3, [pc, #324]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a50      	ldr	r2, [pc, #320]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	e011      	b.n	8004ea6 <HAL_RCC_OscConfig+0x3de>
 8004e82:	4b4e      	ldr	r3, [pc, #312]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4d      	ldr	r2, [pc, #308]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4a      	ldr	r2, [pc, #296]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b48      	ldr	r3, [pc, #288]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a47      	ldr	r2, [pc, #284]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004ea0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d014      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004eae:	f7fd fedb 	bl	8002c68 <HAL_GetTick>
 8004eb2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb4:	e009      	b.n	8004eca <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb6:	f7fd fed7 	bl	8002c68 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b64      	cmp	r3, #100	@ 0x64
 8004ec2:	d902      	bls.n	8004eca <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	f000 bcd4 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eca:	4b3c      	ldr	r3, [pc, #240]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ef      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x3ee>
 8004ed6:	e013      	b.n	8004f00 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fec6 	bl	8002c68 <HAL_GetTick>
 8004edc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ede:	e009      	b.n	8004ef4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ee0:	f7fd fec2 	bl	8002c68 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	@ 0x64
 8004eec:	d902      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	f000 bcbf 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ef4:	4b31      	ldr	r3, [pc, #196]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ef      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d05f      	beq.n	8004fcc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d005      	beq.n	8004f1e <HAL_RCC_OscConfig+0x456>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	2b0c      	cmp	r3, #12
 8004f16:	d114      	bne.n	8004f42 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d111      	bne.n	8004f42 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f000 bca3 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b23      	ldr	r3, [pc, #140]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	4920      	ldr	r1, [pc, #128]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f40:	e044      	b.n	8004fcc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d024      	beq.n	8004f94 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f56:	f7fd fe87 	bl	8002c68 <HAL_GetTick>
 8004f5a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5c:	e009      	b.n	8004f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7fd fe83 	bl	8002c68 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d902      	bls.n	8004f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	f000 bc80 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f72:	4b12      	ldr	r3, [pc, #72]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0ef      	beq.n	8004f5e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	490b      	ldr	r1, [pc, #44]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]
 8004f92:	e01b      	b.n	8004fcc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004f94:	4b09      	ldr	r3, [pc, #36]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a08      	ldr	r2, [pc, #32]	@ (8004fbc <HAL_RCC_OscConfig+0x4f4>)
 8004f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004fa0:	f7fd fe62 	bl	8002c68 <HAL_GetTick>
 8004fa4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fe5e 	bl	8002c68 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d904      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	f000 bc5b 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
 8004fbc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc0:	4baf      	ldr	r3, [pc, #700]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ed      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80c8 	beq.w	800516a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe0:	4ba7      	ldr	r3, [pc, #668]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8004fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d111      	bne.n	8005012 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4ba4      	ldr	r3, [pc, #656]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff4:	4aa2      	ldr	r2, [pc, #648]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ffe:	4ba0      	ldr	r3, [pc, #640]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005012:	4b9c      	ldr	r3, [pc, #624]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d119      	bne.n	8005052 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800501e:	4b99      	ldr	r3, [pc, #612]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	4a98      	ldr	r2, [pc, #608]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502a:	f7fd fe1d 	bl	8002c68 <HAL_GetTick>
 800502e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005030:	e009      	b.n	8005046 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005032:	f7fd fe19 	bl	8002c68 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d902      	bls.n	8005046 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	f000 bc16 	b.w	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005046:	4b8f      	ldr	r3, [pc, #572]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ef      	beq.n	8005032 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d05f      	beq.n	800511a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800505a:	4b89      	ldr	r3, [pc, #548]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800505c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005060:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506c:	429a      	cmp	r2, r3
 800506e:	d037      	beq.n	80050e0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d006      	beq.n	8005088 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e3f4      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01b      	beq.n	80050ca <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005092:	4b7b      	ldr	r3, [pc, #492]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005098:	4a79      	ldr	r2, [pc, #484]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800509a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800509e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80050a2:	f7fd fde1 	bl	8002c68 <HAL_GetTick>
 80050a6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050aa:	f7fd fddd 	bl	8002c68 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e3da      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80050bc:	4b70      	ldr	r3, [pc, #448]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 80050be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1ef      	bne.n	80050aa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80050ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 80050cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050d0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	4969      	ldr	r1, [pc, #420]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80050e0:	4b67      	ldr	r3, [pc, #412]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 80050e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050e6:	4a66      	ldr	r2, [pc, #408]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 80050e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80050f0:	f7fd fdba 	bl	8002c68 <HAL_GetTick>
 80050f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f8:	f7fd fdb6 	bl	8002c68 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b05      	cmp	r3, #5
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e3b3      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800510a:	4b5d      	ldr	r3, [pc, #372]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800510c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0ef      	beq.n	80050f8 <HAL_RCC_OscConfig+0x630>
 8005118:	e01b      	b.n	8005152 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800511a:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800511c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005120:	4a57      	ldr	r2, [pc, #348]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005122:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005126:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800512a:	f7fd fd9d 	bl	8002c68 <HAL_GetTick>
 800512e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005132:	f7fd fd99 	bl	8002c68 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b05      	cmp	r3, #5
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e396      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005144:	4b4e      	ldr	r3, [pc, #312]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800514a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1ef      	bne.n	8005132 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005152:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b49      	ldr	r3, [pc, #292]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800515c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005160:	4a47      	ldr	r2, [pc, #284]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005162:	f023 0304 	bic.w	r3, r3, #4
 8005166:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 8111 	beq.w	800539a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517e:	4b40      	ldr	r3, [pc, #256]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d111      	bne.n	80051b0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518c:	4b3c      	ldr	r3, [pc, #240]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005192:	4a3b      	ldr	r2, [pc, #236]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005194:	f043 0304 	orr.w	r3, r3, #4
 8005198:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800519c:	4b38      	ldr	r3, [pc, #224]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051b0:	4b34      	ldr	r3, [pc, #208]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d118      	bne.n	80051ee <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80051bc:	4b31      	ldr	r3, [pc, #196]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	4a30      	ldr	r2, [pc, #192]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c8:	f7fd fd4e 	bl	8002c68 <HAL_GetTick>
 80051cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d0:	f7fd fd4a 	bl	8002c68 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e347      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051e2:	4b28      	ldr	r3, [pc, #160]	@ (8005284 <HAL_RCC_OscConfig+0x7bc>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01f      	beq.n	800523a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d010      	beq.n	8005228 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005206:	4b1e      	ldr	r3, [pc, #120]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800520c:	4a1c      	ldr	r2, [pc, #112]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800520e:	f043 0304 	orr.w	r3, r3, #4
 8005212:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005216:	4b1a      	ldr	r3, [pc, #104]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800521c:	4a18      	ldr	r2, [pc, #96]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005226:	e018      	b.n	800525a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005228:	4b15      	ldr	r3, [pc, #84]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800522a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800522e:	4a14      	ldr	r2, [pc, #80]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005238:	e00f      	b.n	800525a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800523a:	4b11      	ldr	r3, [pc, #68]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800523c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005240:	4a0f      	ldr	r2, [pc, #60]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800524a:	4b0d      	ldr	r3, [pc, #52]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 800524c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005250:	4a0b      	ldr	r2, [pc, #44]	@ (8005280 <HAL_RCC_OscConfig+0x7b8>)
 8005252:	f023 0304 	bic.w	r3, r3, #4
 8005256:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d057      	beq.n	8005312 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005262:	f7fd fd01 	bl	8002c68 <HAL_GetTick>
 8005266:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005268:	e00e      	b.n	8005288 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd fcfd 	bl	8002c68 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d905      	bls.n	8005288 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e2f8      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
 8005280:	46020c00 	.word	0x46020c00
 8005284:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005288:	4b9c      	ldr	r3, [pc, #624]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 800528a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0e9      	beq.n	800526a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01b      	beq.n	80052da <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052a2:	4b96      	ldr	r3, [pc, #600]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80052a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052a8:	4a94      	ldr	r2, [pc, #592]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80052aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fd fcd8 	bl	8002c68 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e2d3      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80052ca:	4b8c      	ldr	r3, [pc, #560]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80052cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ed      	beq.n	80052b4 <HAL_RCC_OscConfig+0x7ec>
 80052d8:	e053      	b.n	8005382 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052da:	4b88      	ldr	r3, [pc, #544]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80052dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052e0:	4a86      	ldr	r2, [pc, #536]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80052e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7fd fcbc 	bl	8002c68 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e2b7      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005302:	4b7e      	ldr	r3, [pc, #504]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ed      	bne.n	80052ec <HAL_RCC_OscConfig+0x824>
 8005310:	e037      	b.n	8005382 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005312:	f7fd fca9 	bl	8002c68 <HAL_GetTick>
 8005316:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005318:	e00a      	b.n	8005330 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531a:	f7fd fca5 	bl	8002c68 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e2a0      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005330:	4b72      	ldr	r3, [pc, #456]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ed      	bne.n	800531a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800533e:	4b6f      	ldr	r3, [pc, #444]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01a      	beq.n	8005382 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800534c:	4b6b      	ldr	r3, [pc, #428]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 800534e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005352:	4a6a      	ldr	r2, [pc, #424]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005358:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fd fc83 	bl	8002c68 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e27e      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005374:	4b61      	ldr	r3, [pc, #388]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800537a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ed      	bne.n	800535e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005382:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005386:	2b01      	cmp	r3, #1
 8005388:	d107      	bne.n	800539a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538a:	4b5c      	ldr	r3, [pc, #368]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 800538c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005390:	4a5a      	ldr	r2, [pc, #360]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005392:	f023 0304 	bic.w	r3, r3, #4
 8005396:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d036      	beq.n	8005414 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d019      	beq.n	80053e2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80053ae:	4b53      	ldr	r3, [pc, #332]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a52      	ldr	r2, [pc, #328]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80053b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053ba:	f7fd fc55 	bl	8002c68 <HAL_GetTick>
 80053be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053c2:	f7fd fc51 	bl	8002c68 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e24e      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80053d4:	4b49      	ldr	r3, [pc, #292]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x8fa>
 80053e0:	e018      	b.n	8005414 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80053e2:	4b46      	ldr	r3, [pc, #280]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a45      	ldr	r2, [pc, #276]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80053e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ec:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053ee:	f7fd fc3b 	bl	8002c68 <HAL_GetTick>
 80053f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053f6:	f7fd fc37 	bl	8002c68 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e234      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005408:	4b3c      	ldr	r3, [pc, #240]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541c:	2b00      	cmp	r3, #0
 800541e:	d036      	beq.n	800548e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	2b00      	cmp	r3, #0
 8005426:	d019      	beq.n	800545c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005428:	4b34      	ldr	r3, [pc, #208]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 800542e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005432:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005434:	f7fd fc18 	bl	8002c68 <HAL_GetTick>
 8005438:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800543c:	f7fd fc14 	bl	8002c68 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e211      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800544e:	4b2b      	ldr	r3, [pc, #172]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x974>
 800545a:	e018      	b.n	800548e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800545c:	4b27      	ldr	r3, [pc, #156]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a26      	ldr	r2, [pc, #152]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005466:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005468:	f7fd fbfe 	bl	8002c68 <HAL_GetTick>
 800546c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005470:	f7fd fbfa 	bl	8002c68 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e1f7      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005482:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d07f      	beq.n	800559a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d062      	beq.n	8005568 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80054a2:	4b16      	ldr	r3, [pc, #88]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054ac:	6093      	str	r3, [r2, #8]
 80054ae:	4b13      	ldr	r3, [pc, #76]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	4910      	ldr	r1, [pc, #64]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80054c8:	d309      	bcc.n	80054de <HAL_RCC_OscConfig+0xa16>
 80054ca:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f023 021f 	bic.w	r2, r3, #31
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	4909      	ldr	r1, [pc, #36]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	60cb      	str	r3, [r1, #12]
 80054dc:	e02a      	b.n	8005534 <HAL_RCC_OscConfig+0xa6c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da0c      	bge.n	8005500 <HAL_RCC_OscConfig+0xa38>
 80054e6:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	015b      	lsls	r3, r3, #5
 80054f4:	4901      	ldr	r1, [pc, #4]	@ (80054fc <HAL_RCC_OscConfig+0xa34>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60cb      	str	r3, [r1, #12]
 80054fa:	e01b      	b.n	8005534 <HAL_RCC_OscConfig+0xa6c>
 80054fc:	46020c00 	.word	0x46020c00
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005508:	d30a      	bcc.n	8005520 <HAL_RCC_OscConfig+0xa58>
 800550a:	4ba1      	ldr	r3, [pc, #644]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	029b      	lsls	r3, r3, #10
 8005518:	499d      	ldr	r1, [pc, #628]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	60cb      	str	r3, [r1, #12]
 800551e:	e009      	b.n	8005534 <HAL_RCC_OscConfig+0xa6c>
 8005520:	4b9b      	ldr	r3, [pc, #620]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	03db      	lsls	r3, r3, #15
 800552e:	4998      	ldr	r1, [pc, #608]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005530:	4313      	orrs	r3, r2
 8005532:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005534:	4b96      	ldr	r3, [pc, #600]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a95      	ldr	r2, [pc, #596]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800553a:	f043 0310 	orr.w	r3, r3, #16
 800553e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005540:	f7fd fb92 	bl	8002c68 <HAL_GetTick>
 8005544:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005548:	f7fd fb8e 	bl	8002c68 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e18b      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800555a:	4b8d      	ldr	r3, [pc, #564]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0xa80>
 8005566:	e018      	b.n	800559a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005568:	4b89      	ldr	r3, [pc, #548]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a88      	ldr	r2, [pc, #544]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800556e:	f023 0310 	bic.w	r3, r3, #16
 8005572:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005574:	f7fd fb78 	bl	8002c68 <HAL_GetTick>
 8005578:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800557c:	f7fd fb74 	bl	8002c68 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e171      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800558e:	4b80      	ldr	r3, [pc, #512]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8166 	beq.w	8005870 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055aa:	4b79      	ldr	r3, [pc, #484]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	f000 80f2 	beq.w	800579c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f040 80c5 	bne.w	800574c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80055c2:	4b73      	ldr	r3, [pc, #460]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a72      	ldr	r2, [pc, #456]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80055c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055ce:	f7fd fb4b 	bl	8002c68 <HAL_GetTick>
 80055d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d6:	f7fd fb47 	bl	8002c68 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e144      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80055e8:	4b69      	ldr	r3, [pc, #420]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f4:	4b66      	ldr	r3, [pc, #408]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80055f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d111      	bne.n	8005626 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005602:	4b63      	ldr	r3, [pc, #396]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005608:	4a61      	ldr	r2, [pc, #388]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800560a:	f043 0304 	orr.w	r3, r3, #4
 800560e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005612:	4b5f      	ldr	r3, [pc, #380]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005626:	4b5b      	ldr	r3, [pc, #364]	@ (8005794 <HAL_RCC_OscConfig+0xccc>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800562e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005632:	d102      	bne.n	800563a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800563a:	4b56      	ldr	r3, [pc, #344]	@ (8005794 <HAL_RCC_OscConfig+0xccc>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	4a55      	ldr	r2, [pc, #340]	@ (8005794 <HAL_RCC_OscConfig+0xccc>)
 8005640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005644:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005646:	4b52      	ldr	r3, [pc, #328]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800565a:	3a01      	subs	r2, #1
 800565c:	0212      	lsls	r2, r2, #8
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005664:	430a      	orrs	r2, r1
 8005666:	494a      	ldr	r1, [pc, #296]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	628b      	str	r3, [r1, #40]	@ 0x28
 800566c:	4b48      	ldr	r3, [pc, #288]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800566e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005670:	4b49      	ldr	r3, [pc, #292]	@ (8005798 <HAL_RCC_OscConfig+0xcd0>)
 8005672:	4013      	ands	r3, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005678:	3a01      	subs	r2, #1
 800567a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005682:	3a01      	subs	r2, #1
 8005684:	0252      	lsls	r2, r2, #9
 8005686:	b292      	uxth	r2, r2
 8005688:	4311      	orrs	r1, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800568e:	3a01      	subs	r2, #1
 8005690:	0412      	lsls	r2, r2, #16
 8005692:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005696:	4311      	orrs	r1, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800569c:	3a01      	subs	r2, #1
 800569e:	0612      	lsls	r2, r2, #24
 80056a0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80056a4:	430a      	orrs	r2, r1
 80056a6:	493a      	ldr	r1, [pc, #232]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80056ac:	4b38      	ldr	r3, [pc, #224]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	4a37      	ldr	r2, [pc, #220]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056b2:	f023 0310 	bic.w	r3, r3, #16
 80056b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	4a34      	ldr	r2, [pc, #208]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80056c2:	4b33      	ldr	r3, [pc, #204]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	4a32      	ldr	r2, [pc, #200]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056c8:	f043 0310 	orr.w	r3, r3, #16
 80056cc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80056ce:	4b30      	ldr	r3, [pc, #192]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	f023 020c 	bic.w	r2, r3, #12
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	492d      	ldr	r1, [pc, #180]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80056e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d105      	bne.n	80056f4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80056e8:	4b2a      	ldr	r3, [pc, #168]	@ (8005794 <HAL_RCC_OscConfig+0xccc>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a29      	ldr	r2, [pc, #164]	@ (8005794 <HAL_RCC_OscConfig+0xccc>)
 80056ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056f2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80056f4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80056fc:	4b24      	ldr	r3, [pc, #144]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 80056fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005702:	4a23      	ldr	r2, [pc, #140]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005704:	f023 0304 	bic.w	r3, r3, #4
 8005708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800570c:	4b20      	ldr	r3, [pc, #128]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1f      	ldr	r2, [pc, #124]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005716:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005718:	f7fd faa6 	bl	8002c68 <HAL_GetTick>
 800571c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005720:	f7fd faa2 	bl	8002c68 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e09f      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005732:	4b17      	ldr	r3, [pc, #92]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800573e:	4b14      	ldr	r3, [pc, #80]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	4a13      	ldr	r2, [pc, #76]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005748:	6293      	str	r3, [r2, #40]	@ 0x28
 800574a:	e091      	b.n	8005870 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800574c:	4b10      	ldr	r3, [pc, #64]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a0f      	ldr	r2, [pc, #60]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005756:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005758:	f7fd fa86 	bl	8002c68 <HAL_GetTick>
 800575c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005760:	f7fd fa82 	bl	8002c68 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e07f      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005772:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800577e:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005782:	4a03      	ldr	r2, [pc, #12]	@ (8005790 <HAL_RCC_OscConfig+0xcc8>)
 8005784:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005788:	f023 0303 	bic.w	r3, r3, #3
 800578c:	6293      	str	r3, [r2, #40]	@ 0x28
 800578e:	e06f      	b.n	8005870 <HAL_RCC_OscConfig+0xda8>
 8005790:	46020c00 	.word	0x46020c00
 8005794:	46020800 	.word	0x46020800
 8005798:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800579c:	4b37      	ldr	r3, [pc, #220]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057a2:	4b36      	ldr	r3, [pc, #216]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 80057a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d039      	beq.n	8005824 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0203 	and.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d132      	bne.n	8005824 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d129      	bne.n	8005824 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d122      	bne.n	8005824 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d11a      	bne.n	8005824 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	0a5b      	lsrs	r3, r3, #9
 80057f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d111      	bne.n	8005824 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d108      	bne.n	8005824 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	0e1b      	lsrs	r3, r3, #24
 8005816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d001      	beq.n	8005828 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e024      	b.n	8005872 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005828:	4b14      	ldr	r3, [pc, #80]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 800582a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582c:	08db      	lsrs	r3, r3, #3
 800582e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005836:	429a      	cmp	r2, r3
 8005838:	d01a      	beq.n	8005870 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800583a:	4b10      	ldr	r3, [pc, #64]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	4a0f      	ldr	r2, [pc, #60]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 8005840:	f023 0310 	bic.w	r3, r3, #16
 8005844:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fd fa0f 	bl	8002c68 <HAL_GetTick>
 800584a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800584c:	bf00      	nop
 800584e:	f7fd fa0b 	bl	8002c68 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	4293      	cmp	r3, r2
 8005858:	d0f9      	beq.n	800584e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585e:	4a07      	ldr	r2, [pc, #28]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	4a04      	ldr	r2, [pc, #16]	@ (800587c <HAL_RCC_OscConfig+0xdb4>)
 800586a:	f043 0310 	orr.w	r3, r3, #16
 800586e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3738      	adds	r7, #56	@ 0x38
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	46020c00 	.word	0x46020c00

08005880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e1d9      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005894:	4b9b      	ldr	r3, [pc, #620]	@ (8005b04 <HAL_RCC_ClockConfig+0x284>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d910      	bls.n	80058c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b98      	ldr	r3, [pc, #608]	@ (8005b04 <HAL_RCC_ClockConfig+0x284>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 020f 	bic.w	r2, r3, #15
 80058aa:	4996      	ldr	r1, [pc, #600]	@ (8005b04 <HAL_RCC_ClockConfig+0x284>)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b94      	ldr	r3, [pc, #592]	@ (8005b04 <HAL_RCC_ClockConfig+0x284>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e1c1      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d010      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058dc:	429a      	cmp	r2, r3
 80058de:	d908      	bls.n	80058f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80058e0:	4b89      	ldr	r3, [pc, #548]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	4986      	ldr	r1, [pc, #536]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d012      	beq.n	8005924 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	4b81      	ldr	r3, [pc, #516]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800590c:	429a      	cmp	r2, r3
 800590e:	d909      	bls.n	8005924 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005910:	4b7d      	ldr	r3, [pc, #500]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	497a      	ldr	r1, [pc, #488]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005920:	4313      	orrs	r3, r2
 8005922:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d010      	beq.n	8005952 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	4b74      	ldr	r3, [pc, #464]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800593c:	429a      	cmp	r2, r3
 800593e:	d908      	bls.n	8005952 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005940:	4b71      	ldr	r3, [pc, #452]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	496e      	ldr	r1, [pc, #440]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 800594e:	4313      	orrs	r3, r2
 8005950:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d010      	beq.n	8005980 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	4b69      	ldr	r3, [pc, #420]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	429a      	cmp	r2, r3
 800596c:	d908      	bls.n	8005980 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800596e:	4b66      	ldr	r3, [pc, #408]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f023 020f 	bic.w	r2, r3, #15
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4963      	ldr	r1, [pc, #396]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 800597c:	4313      	orrs	r3, r2
 800597e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80d2 	beq.w	8005b32 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d143      	bne.n	8005a22 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800599a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 800599c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d110      	bne.n	80059ca <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80059a8:	4b57      	ldr	r3, [pc, #348]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 80059aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ae:	4a56      	ldr	r2, [pc, #344]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 80059b0:	f043 0304 	orr.w	r3, r3, #4
 80059b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059b8:	4b53      	ldr	r3, [pc, #332]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 80059ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	60bb      	str	r3, [r7, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80059ca:	f7fd f94d 	bl	8002c68 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80059d0:	4b4e      	ldr	r3, [pc, #312]	@ (8005b0c <HAL_RCC_ClockConfig+0x28c>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80059de:	f7fd f943 	bl	8002c68 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e12b      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80059f0:	4b46      	ldr	r3, [pc, #280]	@ (8005b0c <HAL_RCC_ClockConfig+0x28c>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005a02:	4b41      	ldr	r3, [pc, #260]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a08:	4a3f      	ldr	r2, [pc, #252]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a0a:	f023 0304 	bic.w	r3, r3, #4
 8005a0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a12:	4b3d      	ldr	r3, [pc, #244]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d121      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e112      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d107      	bne.n	8005a3a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a2a:	4b37      	ldr	r3, [pc, #220]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d115      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e106      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005a42:	4b31      	ldr	r3, [pc, #196]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0fa      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a52:	4b2d      	ldr	r3, [pc, #180]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0f2      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005a62:	4b29      	ldr	r3, [pc, #164]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f023 0203 	bic.w	r2, r3, #3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	4926      	ldr	r1, [pc, #152]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005a74:	f7fd f8f8 	bl	8002c68 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d112      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a84:	f7fd f8f0 	bl	8002c68 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e0d6      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d1ee      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x204>
 8005aa6:	e044      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d112      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab2:	f7fd f8d9 	bl	8002c68 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0bf      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f003 030c 	and.w	r3, r3, #12
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d1ee      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0x232>
 8005ad4:	e02d      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d123      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae0:	f7fd f8c2 	bl	8002c68 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e0a8      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005af6:	4b04      	ldr	r3, [pc, #16]	@ (8005b08 <HAL_RCC_ClockConfig+0x288>)
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f003 030c 	and.w	r3, r3, #12
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ee      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x260>
 8005b02:	e016      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2b2>
 8005b04:	40022000 	.word	0x40022000
 8005b08:	46020c00 	.word	0x46020c00
 8005b0c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b10:	f7fd f8aa 	bl	8002c68 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e090      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b26:	4b4a      	ldr	r3, [pc, #296]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d1ee      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d010      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d208      	bcs.n	8005b60 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005b4e:	4b40      	ldr	r3, [pc, #256]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 020f 	bic.w	r2, r3, #15
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	493d      	ldr	r1, [pc, #244]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b60:	4b3c      	ldr	r3, [pc, #240]	@ (8005c54 <HAL_RCC_ClockConfig+0x3d4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d210      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b39      	ldr	r3, [pc, #228]	@ (8005c54 <HAL_RCC_ClockConfig+0x3d4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 020f 	bic.w	r2, r3, #15
 8005b76:	4937      	ldr	r1, [pc, #220]	@ (8005c54 <HAL_RCC_ClockConfig+0x3d4>)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b35      	ldr	r3, [pc, #212]	@ (8005c54 <HAL_RCC_ClockConfig+0x3d4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e05b      	b.n	8005c48 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d010      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d208      	bcs.n	8005bbe <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005bac:	4b28      	ldr	r3, [pc, #160]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4925      	ldr	r1, [pc, #148]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d012      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d209      	bcs.n	8005bf0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	4919      	ldr	r1, [pc, #100]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d010      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d208      	bcs.n	8005c1e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005c0c:	4b10      	ldr	r3, [pc, #64]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	490d      	ldr	r1, [pc, #52]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c1e:	f000 f821 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005c22:	4602      	mov	r2, r0
 8005c24:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <HAL_RCC_ClockConfig+0x3d0>)
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	490a      	ldr	r1, [pc, #40]	@ (8005c58 <HAL_RCC_ClockConfig+0x3d8>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
 8005c34:	4a09      	ldr	r2, [pc, #36]	@ (8005c5c <HAL_RCC_ClockConfig+0x3dc>)
 8005c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c38:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <HAL_RCC_ClockConfig+0x3e0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fc ff89 	bl	8002b54 <HAL_InitTick>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	46020c00 	.word	0x46020c00
 8005c54:	40022000 	.word	0x40022000
 8005c58:	0800ef80 	.word	0x0800ef80
 8005c5c:	20000000 	.word	0x20000000
 8005c60:	20000004 	.word	0x20000004

08005c64 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b08b      	sub	sp, #44	@ 0x2c
 8005c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c72:	4b78      	ldr	r3, [pc, #480]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 030c 	and.w	r3, r3, #12
 8005c7a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c7c:	4b75      	ldr	r3, [pc, #468]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x34>
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	2b0c      	cmp	r3, #12
 8005c90:	d121      	bne.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d11e      	bne.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005c98:	4b6e      	ldr	r3, [pc, #440]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005caa:	0b1b      	lsrs	r3, r3, #12
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005cb4:	4b67      	ldr	r3, [pc, #412]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	0f1b      	lsrs	r3, r3, #28
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cc0:	4a65      	ldr	r2, [pc, #404]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d110      	bne.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cd4:	e00d      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 030c 	and.w	r3, r3, #12
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d102      	bne.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ce2:	4b5e      	ldr	r3, [pc, #376]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005ce4:	623b      	str	r3, [r7, #32]
 8005ce6:	e004      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d101      	bne.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cee:	4b5b      	ldr	r3, [pc, #364]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005cf0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	f040 80a5 	bne.w	8005e44 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005cfa:	4b56      	ldr	r3, [pc, #344]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005d04:	4b53      	ldr	r3, [pc, #332]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	3301      	adds	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005d12:	4b50      	ldr	r3, [pc, #320]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	08db      	lsrs	r3, r3, #3
 8005d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d003      	beq.n	8005d48 <HAL_RCC_GetSysClockFreq+0xe4>
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d022      	beq.n	8005d8c <HAL_RCC_GetSysClockFreq+0x128>
 8005d46:	e043      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d6a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005d6e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005e64 <HAL_RCC_GetSysClockFreq+0x200>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	e046      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005dae:	ed97 6a01 	vldr	s12, [r7, #4]
 8005db2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005e64 <HAL_RCC_GetSysClockFreq+0x200>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dce:	e024      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005df8:	ed97 6a01 	vldr	s12, [r7, #4]
 8005dfc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005e64 <HAL_RCC_GetSysClockFreq+0x200>
 8005e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005e08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e18:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1e:	0e1b      	lsrs	r3, r3, #24
 8005e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e24:	3301      	adds	r3, #1
 8005e26:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3e:	ee17 3a90 	vmov	r3, s15
 8005e42:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005e44:	6a3b      	ldr	r3, [r7, #32]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	372c      	adds	r7, #44	@ 0x2c
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	46020c00 	.word	0x46020c00
 8005e58:	0800ef98 	.word	0x0800ef98
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	4b742400 	.word	0x4b742400
 8005e64:	46000000 	.word	0x46000000

08005e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e6c:	f7ff fefa 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005e70:	4602      	mov	r2, r0
 8005e72:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <HAL_RCC_GetHCLKFreq+0x28>)
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	4906      	ldr	r1, [pc, #24]	@ (8005e94 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005e7c:	5ccb      	ldrb	r3, [r1, r3]
 8005e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e82:	4a05      	ldr	r2, [pc, #20]	@ (8005e98 <HAL_RCC_GetHCLKFreq+0x30>)
 8005e84:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005e86:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <HAL_RCC_GetHCLKFreq+0x30>)
 8005e88:	681b      	ldr	r3, [r3, #0]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	46020c00 	.word	0x46020c00
 8005e94:	0800ef80 	.word	0x0800ef80
 8005e98:	20000000 	.word	0x20000000

08005e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005ea0:	f7ff ffe2 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	4903      	ldr	r1, [pc, #12]	@ (8005ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	46020c00 	.word	0x46020c00
 8005ec0:	0800ef90 	.word	0x0800ef90

08005ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005ec8:	f7ff ffce 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4903      	ldr	r1, [pc, #12]	@ (8005ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eda:	5ccb      	ldrb	r3, [r1, r3]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	46020c00 	.word	0x46020c00
 8005ee8:	0800ef90 	.word	0x0800ef90

08005eec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005ef0:	f7ff ffba 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b05      	ldr	r3, [pc, #20]	@ (8005f0c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4903      	ldr	r1, [pc, #12]	@ (8005f10 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	46020c00 	.word	0x46020c00
 8005f10:	0800ef90 	.word	0x0800ef90

08005f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006018 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f2a:	f7fe fdbf 	bl	8004aac <HAL_PWREx_GetVoltageRange>
 8005f2e:	6178      	str	r0, [r7, #20]
 8005f30:	e019      	b.n	8005f66 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	4b39      	ldr	r3, [pc, #228]	@ (8006018 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f38:	4a37      	ldr	r2, [pc, #220]	@ (8006018 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f3a:	f043 0304 	orr.w	r3, r3, #4
 8005f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005f42:	4b35      	ldr	r3, [pc, #212]	@ (8006018 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f50:	f7fe fdac 	bl	8004aac <HAL_PWREx_GetVoltageRange>
 8005f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f56:	4b30      	ldr	r3, [pc, #192]	@ (8006018 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f5e:	f023 0304 	bic.w	r3, r3, #4
 8005f62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f6c:	d003      	beq.n	8005f76 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f74:	d109      	bne.n	8005f8a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f7c:	d202      	bcs.n	8005f84 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005f7e:	2301      	movs	r3, #1
 8005f80:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f82:	e033      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f88:	e030      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f90:	d208      	bcs.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f98:	d102      	bne.n	8005fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	e025      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e035      	b.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005faa:	d90f      	bls.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fb8:	d902      	bls.n	8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	e015      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	e012      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e00f      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fd2:	d109      	bne.n	8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fda:	d102      	bne.n	8005fe2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005fdc:	2301      	movs	r3, #1
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	e004      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	e001      	b.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005fe8:	2301      	movs	r3, #1
 8005fea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f023 020f 	bic.w	r2, r3, #15
 8005ff4:	4909      	ldr	r1, [pc, #36]	@ (800601c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005ffc:	4b07      	ldr	r3, [pc, #28]	@ (800601c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	429a      	cmp	r2, r3
 8006008:	d001      	beq.n	800600e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	46020c00 	.word	0x46020c00
 800601c:	40022000 	.word	0x40022000

08006020 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006024:	b0b6      	sub	sp, #216	@ 0xd8
 8006026:	af00      	add	r7, sp, #0
 8006028:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800602c:	2300      	movs	r3, #0
 800602e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006032:	2300      	movs	r3, #0
 8006034:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 0401 	and.w	r4, r2, #1
 8006044:	2500      	movs	r5, #0
 8006046:	ea54 0305 	orrs.w	r3, r4, r5
 800604a:	d00b      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800604c:	4bc5      	ldr	r3, [pc, #788]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800604e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006052:	f023 0103 	bic.w	r1, r3, #3
 8006056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800605a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605c:	4ac1      	ldr	r2, [pc, #772]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800605e:	430b      	orrs	r3, r1
 8006060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f002 0804 	and.w	r8, r2, #4
 8006070:	f04f 0900 	mov.w	r9, #0
 8006074:	ea58 0309 	orrs.w	r3, r8, r9
 8006078:	d00b      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800607a:	4bba      	ldr	r3, [pc, #744]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800607c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006080:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608a:	4ab6      	ldr	r2, [pc, #728]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800608c:	430b      	orrs	r3, r1
 800608e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f002 0a08 	and.w	sl, r2, #8
 800609e:	f04f 0b00 	mov.w	fp, #0
 80060a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80060a6:	d00b      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80060a8:	4bae      	ldr	r3, [pc, #696]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80060aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80060b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b8:	4aaa      	ldr	r2, [pc, #680]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f002 0310 	and.w	r3, r2, #16
 80060cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80060d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d00b      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80060e0:	4ba0      	ldr	r3, [pc, #640]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80060e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f0:	4a9c      	ldr	r2, [pc, #624]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f002 0320 	and.w	r3, r2, #32
 8006104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800610e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d00b      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006118:	4b92      	ldr	r3, [pc, #584]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800611a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800611e:	f023 0107 	bic.w	r1, r3, #7
 8006122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006128:	4a8e      	ldr	r2, [pc, #568]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800612a:	430b      	orrs	r3, r1
 800612c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800613c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006140:	2300      	movs	r3, #0
 8006142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006146:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800614a:	460b      	mov	r3, r1
 800614c:	4313      	orrs	r3, r2
 800614e:	d00b      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006150:	4b84      	ldr	r3, [pc, #528]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006156:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800615a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800615e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006160:	4a80      	ldr	r2, [pc, #512]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006162:	430b      	orrs	r3, r1
 8006164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006174:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800617e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d00b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006188:	4b76      	ldr	r3, [pc, #472]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800618a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800618e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006198:	4a72      	ldr	r2, [pc, #456]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800619a:	430b      	orrs	r3, r1
 800619c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80061ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061ba:	460b      	mov	r3, r1
 80061bc:	4313      	orrs	r3, r2
 80061be:	d00b      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80061c0:	4b68      	ldr	r3, [pc, #416]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061d0:	4a64      	ldr	r2, [pc, #400]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d00b      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80061f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061fe:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8006202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006208:	4a56      	ldr	r2, [pc, #344]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800620a:	430b      	orrs	r3, r1
 800620c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800621c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006220:	2300      	movs	r3, #0
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006226:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800622a:	460b      	mov	r3, r1
 800622c:	4313      	orrs	r3, r2
 800622e:	d00b      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006230:	4b4c      	ldr	r3, [pc, #304]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006236:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800623a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800623e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006240:	4a48      	ldr	r2, [pc, #288]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006242:	430b      	orrs	r3, r1
 8006244:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006258:	2300      	movs	r3, #0
 800625a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800625e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006262:	460b      	mov	r3, r1
 8006264:	4313      	orrs	r3, r2
 8006266:	d00b      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006268:	4b3e      	ldr	r3, [pc, #248]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800626a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800626e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006276:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006278:	4a3a      	ldr	r2, [pc, #232]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800627a:	430b      	orrs	r3, r1
 800627c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800628c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800628e:	2300      	movs	r3, #0
 8006290:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006292:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006296:	460b      	mov	r3, r1
 8006298:	4313      	orrs	r3, r2
 800629a:	d00b      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800629c:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800629e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80062c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062c2:	2300      	movs	r3, #0
 80062c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80062c6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d04f      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80062d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d8:	2b80      	cmp	r3, #128	@ 0x80
 80062da:	d02d      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80062dc:	2b80      	cmp	r3, #128	@ 0x80
 80062de:	d827      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80062e0:	2b60      	cmp	r3, #96	@ 0x60
 80062e2:	d02b      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80062e4:	2b60      	cmp	r3, #96	@ 0x60
 80062e6:	d823      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	d006      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	d81f      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d011      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80062f8:	e01a      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	4a19      	ldr	r2, [pc, #100]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006304:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006306:	e01a      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800630c:	3308      	adds	r3, #8
 800630e:	4618      	mov	r0, r3
 8006310:	f002 f914 	bl	800853c <RCCEx_PLL2_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800631a:	e010      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800631c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006320:	332c      	adds	r3, #44	@ 0x2c
 8006322:	4618      	mov	r0, r3
 8006324:	f002 f9a2 	bl	800866c <RCCEx_PLL3_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800632e:	e006      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006336:	e002      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800633c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d110      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006346:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006348:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800634c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006358:	4a02      	ldr	r2, [pc, #8]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800635a:	430b      	orrs	r3, r1
 800635c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006360:	e006      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8006362:	bf00      	nop
 8006364:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800636c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800637c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800637e:	2300      	movs	r3, #0
 8006380:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006382:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d046      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800638c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006394:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006398:	d028      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800639a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800639e:	d821      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80063a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a4:	d022      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80063a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063aa:	d81b      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80063ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063b0:	d01c      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80063b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063b6:	d815      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80063b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063bc:	d008      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80063be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c2:	d80f      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d011      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063cc:	d00e      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80063ce:	e009      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063d4:	3308      	adds	r3, #8
 80063d6:	4618      	mov	r0, r3
 80063d8:	f002 f8b0 	bl	800853c <RCCEx_PLL2_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80063f6:	4bb6      	ldr	r3, [pc, #728]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80063f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006408:	4ab1      	ldr	r2, [pc, #708]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800640a:	430b      	orrs	r3, r1
 800640c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006410:	e003      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006412:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006416:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800641a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006426:	663b      	str	r3, [r7, #96]	@ 0x60
 8006428:	2300      	movs	r3, #0
 800642a:	667b      	str	r3, [r7, #100]	@ 0x64
 800642c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d03e      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800643e:	2b04      	cmp	r3, #4
 8006440:	d81d      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006442:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006487 	.word	0x08006487
 800644c:	0800645d 	.word	0x0800645d
 8006450:	0800646b 	.word	0x0800646b
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800645c:	4b9c      	ldr	r3, [pc, #624]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	4a9b      	ldr	r2, [pc, #620]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006466:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006468:	e00e      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800646a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800646e:	332c      	adds	r3, #44	@ 0x2c
 8006470:	4618      	mov	r0, r3
 8006472:	f002 f8fb 	bl	800866c <RCCEx_PLL3_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800647c:	e004      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006484:	e000      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8006486:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006488:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006490:	4b8f      	ldr	r3, [pc, #572]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006496:	f023 0107 	bic.w	r1, r3, #7
 800649a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800649e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064a2:	4a8b      	ldr	r2, [pc, #556]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80064a4:	430b      	orrs	r3, r1
 80064a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80064aa:	e003      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80064b0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80064b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064c2:	2300      	movs	r3, #0
 80064c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80064ca:	460b      	mov	r3, r1
 80064cc:	4313      	orrs	r3, r2
 80064ce:	d04a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80064d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064dc:	d028      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80064de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064e2:	d821      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80064e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064e8:	d024      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80064ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064ee:	d81b      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80064f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064f4:	d00e      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064fa:	d815      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006504:	d110      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006506:	4b72      	ldr	r3, [pc, #456]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	4a71      	ldr	r2, [pc, #452]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006510:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006512:	e012      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006518:	332c      	adds	r3, #44	@ 0x2c
 800651a:	4618      	mov	r0, r3
 800651c:	f002 f8a6 	bl	800866c <RCCEx_PLL3_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006526:	e008      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800652e:	e004      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8006530:	bf00      	nop
 8006532:	e002      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8006538:	bf00      	nop
    }
    if (ret == HAL_OK)
 800653a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006542:	4b63      	ldr	r3, [pc, #396]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006548:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800654c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006554:	4a5e      	ldr	r2, [pc, #376]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006556:	430b      	orrs	r3, r1
 8006558:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800655c:	e003      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006562:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006572:	653b      	str	r3, [r7, #80]	@ 0x50
 8006574:	2300      	movs	r3, #0
 8006576:	657b      	str	r3, [r7, #84]	@ 0x54
 8006578:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800657c:	460b      	mov	r3, r1
 800657e:	4313      	orrs	r3, r2
 8006580:	f000 80ba 	beq.w	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006584:	2300      	movs	r3, #0
 8006586:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800658a:	4b51      	ldr	r3, [pc, #324]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800658c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d113      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006598:	4b4d      	ldr	r3, [pc, #308]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800659a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800659e:	4a4c      	ldr	r2, [pc, #304]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80065a0:	f043 0304 	orr.w	r3, r3, #4
 80065a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80065a8:	4b49      	ldr	r3, [pc, #292]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80065aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80065c0:	4b44      	ldr	r3, [pc, #272]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80065c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c4:	4a43      	ldr	r2, [pc, #268]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065cc:	f7fc fb4c 	bl	8002c68 <HAL_GetTick>
 80065d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065d4:	e00b      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d6:	f7fc fb47 	bl	8002c68 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d903      	bls.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80065ec:	e005      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065ee:	4b39      	ldr	r3, [pc, #228]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80065f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0ed      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 80065fa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d16a      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006602:	4b33      	ldr	r3, [pc, #204]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800660c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d023      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8006618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800661c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8006620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006624:	4293      	cmp	r3, r2
 8006626:	d01b      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006628:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800662a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800662e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006636:	4b26      	ldr	r3, [pc, #152]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800663c:	4a24      	ldr	r2, [pc, #144]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800663e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006642:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006646:	4b22      	ldr	r3, [pc, #136]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800664c:	4a20      	ldr	r2, [pc, #128]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800664e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006652:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006656:	4a1e      	ldr	r2, [pc, #120]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800665c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d019      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fc fafc 	bl	8002c68 <HAL_GetTick>
 8006670:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006674:	e00d      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006676:	f7fc faf7 	bl	8002c68 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006686:	429a      	cmp	r2, r3
 8006688:	d903      	bls.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8006690:	e006      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006692:	4b0f      	ldr	r3, [pc, #60]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0ea      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80066a0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80066a8:	4b09      	ldr	r3, [pc, #36]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80066aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066ba:	4a05      	ldr	r2, [pc, #20]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066c2:	e00d      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066c4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80066c8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80066cc:	e008      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80066ce:	bf00      	nop
 80066d0:	46020c00 	.word	0x46020c00
 80066d4:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80066dc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066e0:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d107      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e8:	4bb2      	ldr	r3, [pc, #712]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80066ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ee:	4ab1      	ldr	r2, [pc, #708]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80066f0:	f023 0304 	bic.w	r3, r3, #4
 80066f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80066f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006706:	2300      	movs	r3, #0
 8006708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800670a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800670e:	460b      	mov	r3, r1
 8006710:	4313      	orrs	r3, r2
 8006712:	d042      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800671c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006720:	d022      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006722:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006726:	d81b      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800672c:	d011      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x732>
 800672e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006732:	d815      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d019      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800673c:	d110      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800673e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006742:	3308      	adds	r3, #8
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fef9 	bl	800853c <RCCEx_PLL2_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006750:	e00d      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006752:	4b98      	ldr	r3, [pc, #608]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006756:	4a97      	ldr	r2, [pc, #604]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800675c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800675e:	e006      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006766:	e002      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800676c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800676e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006776:	4b8f      	ldr	r3, [pc, #572]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800677c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006784:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006788:	4a8a      	ldr	r2, [pc, #552]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800678a:	430b      	orrs	r3, r1
 800678c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006796:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800679a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d02d      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80067b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c2:	d00b      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c8:	d804      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d2:	d007      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80067da:	e004      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80067dc:	bf00      	nop
 80067de:	e002      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80067e0:	bf00      	nop
 80067e2:	e000      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80067e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067e6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10d      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80067ee:	4b71      	ldr	r3, [pc, #452]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80067f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006800:	4a6c      	ldr	r2, [pc, #432]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006802:	430b      	orrs	r3, r1
 8006804:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006808:	e003      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800680e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800681e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006820:	2300      	movs	r3, #0
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006824:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006828:	460b      	mov	r3, r1
 800682a:	4313      	orrs	r3, r2
 800682c:	d00c      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800682e:	4b61      	ldr	r3, [pc, #388]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006830:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006834:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800683c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006840:	4a5c      	ldr	r2, [pc, #368]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006842:	430b      	orrs	r3, r1
 8006844:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006854:	633b      	str	r3, [r7, #48]	@ 0x30
 8006856:	2300      	movs	r3, #0
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
 800685a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d019      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800686c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006870:	d105      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006872:	4b50      	ldr	r3, [pc, #320]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	4a4f      	ldr	r2, [pc, #316]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800687c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800687e:	4b4d      	ldr	r3, [pc, #308]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006884:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800688c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006890:	4a48      	ldr	r2, [pc, #288]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006892:	430b      	orrs	r3, r1
 8006894:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a6:	2300      	movs	r3, #0
 80068a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068ae:	460b      	mov	r3, r1
 80068b0:	4313      	orrs	r3, r2
 80068b2:	d00c      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80068b4:	4b3f      	ldr	r3, [pc, #252]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80068b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068c6:	493b      	ldr	r1, [pc, #236]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80068ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068da:	623b      	str	r3, [r7, #32]
 80068dc:	2300      	movs	r3, #0
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d00c      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80068ea:	4b32      	ldr	r3, [pc, #200]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80068ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068fc:	492d      	ldr	r1, [pc, #180]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800691a:	460b      	mov	r3, r1
 800691c:	4313      	orrs	r3, r2
 800691e:	d00c      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006920:	4b24      	ldr	r3, [pc, #144]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006926:	f023 0218 	bic.w	r2, r3, #24
 800692a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800692e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006932:	4920      	ldr	r1, [pc, #128]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800693a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006950:	460b      	mov	r3, r1
 8006952:	4313      	orrs	r3, r2
 8006954:	d034      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800695a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800695e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006962:	d105      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006964:	4b13      	ldr	r3, [pc, #76]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006968:	4a12      	ldr	r2, [pc, #72]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800696a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800696e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006974:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800697c:	d108      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800697e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006982:	3308      	adds	r3, #8
 8006984:	4618      	mov	r0, r3
 8006986:	f001 fdd9 	bl	800853c <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8006990:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10f      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006998:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800699a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800699e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069aa:	4902      	ldr	r1, [pc, #8]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80069b2:	e005      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80069b4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80069bc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80069c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069d6:	460b      	mov	r3, r1
 80069d8:	4313      	orrs	r3, r2
 80069da:	d03a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80069dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069e8:	d00e      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80069ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069ee:	d815      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d017      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80069f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069f8:	d110      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069fa:	4b27      	ldr	r3, [pc, #156]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	4a26      	ldr	r2, [pc, #152]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a04:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a06:	e00e      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fd94 	bl	800853c <RCCEx_PLL2_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a1a:	e004      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006a22:	e000      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8006a24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a26:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10d      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a34:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a40:	4915      	ldr	r1, [pc, #84]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006a48:	e003      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006a4e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	2300      	movs	r3, #0
 8006a62:	607b      	str	r3, [r7, #4]
 8006a64:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	d00c      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a74:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a80:	4905      	ldr	r1, [pc, #20]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006a88:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	37d8      	adds	r7, #216	@ 0xd8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a96:	bf00      	nop
 8006a98:	46020c00 	.word	0x46020c00

08006a9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b089      	sub	sp, #36	@ 0x24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006aa4:	4ba6      	ldr	r3, [pc, #664]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006aae:	4ba4      	ldr	r3, [pc, #656]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006ab8:	4ba1      	ldr	r3, [pc, #644]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ac6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ad2:	4b9b      	ldr	r3, [pc, #620]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d062      	beq.n	8006bba <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	f200 8081 	bhi.w	8006bfe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d024      	beq.n	8006b4c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d17a      	bne.n	8006bfe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006d44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b89      	ldr	r3, [pc, #548]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b2e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006d48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b4a:	e08f      	b.n	8006c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006b58:	4b79      	ldr	r3, [pc, #484]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	0f1b      	lsrs	r3, r3, #28
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	e006      	b.n	8006b72 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006b64:	4b76      	ldr	r3, [pc, #472]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	0f1b      	lsrs	r3, r3, #28
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	4a76      	ldr	r2, [pc, #472]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b98:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b9c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006d48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bb8:	e058      	b.n	8006c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	ee07 3a90 	vmov	s15, r3
 8006bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006d48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bfc:	e036      	b.n	8006c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006bfe:	4b50      	ldr	r3, [pc, #320]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006c0a:	4b4d      	ldr	r3, [pc, #308]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	0f1b      	lsrs	r3, r3, #28
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	e006      	b.n	8006c24 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006c16:	4b4a      	ldr	r3, [pc, #296]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	0f1b      	lsrs	r3, r3, #28
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	4a49      	ldr	r2, [pc, #292]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c4e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006d48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c6a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006c6c:	4b34      	ldr	r3, [pc, #208]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d017      	beq.n	8006ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c78:	4b31      	ldr	r3, [pc, #196]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7c:	0a5b      	lsrs	r3, r3, #9
 8006c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9e:	ee17 2a90 	vmov	r2, s15
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006cae:	4b24      	ldr	r3, [pc, #144]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d017      	beq.n	8006cea <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cba:	4b21      	ldr	r3, [pc, #132]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006ccc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce0:	ee17 2a90 	vmov	r2, s15
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	605a      	str	r2, [r3, #4]
 8006ce8:	e002      	b.n	8006cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006cf0:	4b13      	ldr	r3, [pc, #76]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d017      	beq.n	8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cfc:	4b10      	ldr	r3, [pc, #64]	@ (8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	0e1b      	lsrs	r3, r3, #24
 8006d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d12:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d22:	ee17 2a90 	vmov	r2, s15
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d2a:	e002      	b.n	8006d32 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	609a      	str	r2, [r3, #8]
}
 8006d32:	bf00      	nop
 8006d34:	3724      	adds	r7, #36	@ 0x24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	46020c00 	.word	0x46020c00
 8006d44:	4b742400 	.word	0x4b742400
 8006d48:	46000000 	.word	0x46000000
 8006d4c:	0800ef98 	.word	0x0800ef98

08006d50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	@ 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d58:	4ba6      	ldr	r3, [pc, #664]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d60:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d62:	4ba4      	ldr	r3, [pc, #656]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006d6c:	4ba1      	ldr	r3, [pc, #644]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	3301      	adds	r3, #1
 8006d78:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006d7a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	091b      	lsrs	r3, r3, #4
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d86:	4b9b      	ldr	r3, [pc, #620]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	08db      	lsrs	r3, r3, #3
 8006d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d062      	beq.n	8006e6e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	f200 8081 	bhi.w	8006eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d024      	beq.n	8006e00 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d17a      	bne.n	8006eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dce:	4b89      	ldr	r3, [pc, #548]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006de2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dfe:	e08f      	b.n	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e00:	4b7c      	ldr	r3, [pc, #496]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006e0c:	4b79      	ldr	r3, [pc, #484]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	0f1b      	lsrs	r3, r3, #28
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	e006      	b.n	8006e26 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006e18:	4b76      	ldr	r3, [pc, #472]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e1e:	041b      	lsls	r3, r3, #16
 8006e20:	0f1b      	lsrs	r3, r3, #28
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	4a76      	ldr	r2, [pc, #472]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2c:	ee07 3a90 	vmov	s15, r3
 8006e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e50:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e6c:	e058      	b.n	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e78:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e80:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e90:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e94:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ea0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eb0:	e036      	b.n	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006eb2:	4b50      	ldr	r3, [pc, #320]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006ebe:	4b4d      	ldr	r3, [pc, #308]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	0f1b      	lsrs	r3, r3, #28
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	e006      	b.n	8006ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006eca:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ed0:	041b      	lsls	r3, r3, #16
 8006ed2:	0f1b      	lsrs	r3, r3, #28
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	4a49      	ldr	r2, [pc, #292]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f02:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f1e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006f20:	4b34      	ldr	r3, [pc, #208]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d017      	beq.n	8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f2c:	4b31      	ldr	r3, [pc, #196]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	0a5b      	lsrs	r3, r3, #9
 8006f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006f3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f42:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f52:	ee17 2a90 	vmov	r2, s15
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f62:	4b24      	ldr	r3, [pc, #144]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d017      	beq.n	8006f9e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f6e:	4b21      	ldr	r3, [pc, #132]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f72:	0c1b      	lsrs	r3, r3, #16
 8006f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f78:	ee07 3a90 	vmov	s15, r3
 8006f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f84:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f94:	ee17 2a90 	vmov	r2, s15
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	605a      	str	r2, [r3, #4]
 8006f9c:	e002      	b.n	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006fa4:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d017      	beq.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fb0:	4b10      	ldr	r3, [pc, #64]	@ (8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb4:	0e1b      	lsrs	r3, r3, #24
 8006fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd6:	ee17 2a90 	vmov	r2, s15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fde:	e002      	b.n	8006fe6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	609a      	str	r2, [r3, #8]
}
 8006fe6:	bf00      	nop
 8006fe8:	3724      	adds	r7, #36	@ 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	46020c00 	.word	0x46020c00
 8006ff8:	4b742400 	.word	0x4b742400
 8006ffc:	46000000 	.word	0x46000000
 8007000:	0800ef98 	.word	0x0800ef98

08007004 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007004:	b480      	push	{r7}
 8007006:	b089      	sub	sp, #36	@ 0x24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800700c:	4ba6      	ldr	r3, [pc, #664]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800700e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007014:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007016:	4ba4      	ldr	r3, [pc, #656]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007020:	4ba1      	ldr	r3, [pc, #644]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	3301      	adds	r3, #1
 800702c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800702e:	4b9e      	ldr	r3, [pc, #632]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007032:	091b      	lsrs	r3, r3, #4
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800703a:	4b9b      	ldr	r3, [pc, #620]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800703c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800703e:	08db      	lsrs	r3, r3, #3
 8007040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	fb02 f303 	mul.w	r3, r2, r3
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b03      	cmp	r3, #3
 800705a:	d062      	beq.n	8007122 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b03      	cmp	r3, #3
 8007060:	f200 8081 	bhi.w	8007166 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d024      	beq.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d17a      	bne.n	8007166 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80072ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b89      	ldr	r3, [pc, #548]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007092:	ed97 6a02 	vldr	s12, [r7, #8]
 8007096:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80070b2:	e08f      	b.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070b4:	4b7c      	ldr	r3, [pc, #496]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80070c0:	4b79      	ldr	r3, [pc, #484]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	0f1b      	lsrs	r3, r3, #28
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	e006      	b.n	80070da <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80070cc:	4b76      	ldr	r3, [pc, #472]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070d2:	041b      	lsls	r3, r3, #16
 80070d4:	0f1b      	lsrs	r3, r3, #28
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	4a76      	ldr	r2, [pc, #472]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80070dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	ee07 3a90 	vmov	s15, r3
 80070fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007100:	ed97 6a02 	vldr	s12, [r7, #8]
 8007104:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007114:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007120:	e058      	b.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007134:	4b5c      	ldr	r3, [pc, #368]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007144:	ed97 6a02 	vldr	s12, [r7, #8]
 8007148:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800714c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007150:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007158:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800715c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007160:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007164:	e036      	b.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007166:	4b50      	ldr	r3, [pc, #320]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007172:	4b4d      	ldr	r3, [pc, #308]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	0f1b      	lsrs	r3, r3, #28
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	e006      	b.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800717e:	4b4a      	ldr	r3, [pc, #296]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	0f1b      	lsrs	r3, r3, #28
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	4a49      	ldr	r2, [pc, #292]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800718e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071d4:	4b34      	ldr	r3, [pc, #208]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d017      	beq.n	8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071e0:	4b31      	ldr	r3, [pc, #196]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e4:	0a5b      	lsrs	r3, r3, #9
 80071e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80071f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80071fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007206:	ee17 2a90 	vmov	r2, s15
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e002      	b.n	8007216 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007216:	4b24      	ldr	r3, [pc, #144]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d017      	beq.n	8007252 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007222:	4b21      	ldr	r3, [pc, #132]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	0c1b      	lsrs	r3, r3, #16
 8007228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007234:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007238:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800723c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007248:	ee17 2a90 	vmov	r2, s15
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	e002      	b.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007258:	4b13      	ldr	r3, [pc, #76]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800725a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d017      	beq.n	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007264:	4b10      	ldr	r3, [pc, #64]	@ (80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007268:	0e1b      	lsrs	r3, r3, #24
 800726a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800727a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800727e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728a:	ee17 2a90 	vmov	r2, s15
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007292:	e002      	b.n	800729a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]
}
 800729a:	bf00      	nop
 800729c:	3724      	adds	r7, #36	@ 0x24
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	46020c00 	.word	0x46020c00
 80072ac:	4b742400 	.word	0x4b742400
 80072b0:	46000000 	.word	0x46000000
 80072b4:	0800ef98 	.word	0x0800ef98

080072b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	@ 0x38
 80072bc:	af00      	add	r7, sp, #0
 80072be:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80072c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80072ca:	430b      	orrs	r3, r1
 80072cc:	d145      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072ce:	4b9b      	ldr	r3, [pc, #620]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80072d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072da:	4b98      	ldr	r3, [pc, #608]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80072dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d108      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ee:	d104      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80072f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	f001 b912 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80072fa:	4b90      	ldr	r3, [pc, #576]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80072fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007308:	d114      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007310:	d110      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007312:	4b8a      	ldr	r3, [pc, #552]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800731c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007320:	d103      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007322:	23fa      	movs	r3, #250	@ 0xfa
 8007324:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007326:	f001 b8fa 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800732a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007330:	f001 b8f5 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007334:	4b81      	ldr	r3, [pc, #516]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800733c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007340:	d107      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007348:	d103      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800734a:	4b7d      	ldr	r3, [pc, #500]	@ (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
 800734e:	f001 b8e6 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	637b      	str	r3, [r7, #52]	@ 0x34
 8007356:	f001 b8e2 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800735a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800735e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007362:	430b      	orrs	r3, r1
 8007364:	d151      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007366:	4b75      	ldr	r3, [pc, #468]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007368:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800736c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007370:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	2b80      	cmp	r3, #128	@ 0x80
 8007376:	d035      	beq.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737a:	2b80      	cmp	r3, #128	@ 0x80
 800737c:	d841      	bhi.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	2b60      	cmp	r3, #96	@ 0x60
 8007382:	d02a      	beq.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	2b60      	cmp	r3, #96	@ 0x60
 8007388:	d83b      	bhi.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	2b40      	cmp	r3, #64	@ 0x40
 800738e:	d009      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	2b40      	cmp	r3, #64	@ 0x40
 8007394:	d835      	bhi.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00c      	beq.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d012      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80073a2:	e02e      	b.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff fb77 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073b2:	f001 b8b4 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b6:	f107 0318 	add.w	r3, r7, #24
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff fcc8 	bl	8006d50 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073c4:	f001 b8ab 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073c8:	f107 030c 	add.w	r3, r7, #12
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff fe19 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d6:	f001 b8a2 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e0:	f001 b89d 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073e4:	4b55      	ldr	r3, [pc, #340]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073f0:	d103      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80073f2:	4b54      	ldr	r3, [pc, #336]	@ (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80073f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073f6:	f001 b892 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073fe:	f001 b88e 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007406:	f001 b88a 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800740a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007412:	430b      	orrs	r3, r1
 8007414:	d126      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007416:	4b49      	ldr	r3, [pc, #292]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007418:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800741c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007420:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007422:	4b46      	ldr	r3, [pc, #280]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800742a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800742e:	d106      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	2b00      	cmp	r3, #0
 8007434:	d103      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8007436:	4b43      	ldr	r3, [pc, #268]	@ (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
 800743a:	f001 b870 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800743e:	4b3f      	ldr	r3, [pc, #252]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744a:	d107      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007452:	d103      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8007454:	4b3c      	ldr	r3, [pc, #240]	@ (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007456:	637b      	str	r3, [r7, #52]	@ 0x34
 8007458:	f001 b861 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007460:	f001 b85d 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007468:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800746c:	430b      	orrs	r3, r1
 800746e:	d171      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007470:	4b32      	ldr	r3, [pc, #200]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007476:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800747a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007482:	d034      	beq.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007486:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800748a:	d853      	bhi.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007492:	d00b      	beq.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800749a:	d84b      	bhi.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d016      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074a8:	d009      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80074aa:	e043      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff faf3 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074ba:	f001 b830 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074be:	f107 0318 	add.w	r3, r7, #24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fc44 	bl	8006d50 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074cc:	f001 b827 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80074d0:	4b1a      	ldr	r3, [pc, #104]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074dc:	d103      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 80074de:	4b1b      	ldr	r3, [pc, #108]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074e2:	f001 b81c 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074ea:	f001 b818 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074ee:	4b13      	ldr	r3, [pc, #76]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d118      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074fa:	4b10      	ldr	r3, [pc, #64]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007506:	4b0d      	ldr	r3, [pc, #52]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	0e1b      	lsrs	r3, r3, #24
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	e006      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8007512:	4b0a      	ldr	r3, [pc, #40]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	0e1b      	lsrs	r3, r3, #24
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	4a0b      	ldr	r2, [pc, #44]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007528:	f000 bff9 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007530:	f000 bff5 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007538:	f000 bff1 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800753c:	46020c00 	.word	0x46020c00
 8007540:	0007a120 	.word	0x0007a120
 8007544:	00f42400 	.word	0x00f42400
 8007548:	007a1200 	.word	0x007a1200
 800754c:	02dc6c00 	.word	0x02dc6c00
 8007550:	0800ef98 	.word	0x0800ef98
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007558:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800755c:	430b      	orrs	r3, r1
 800755e:	d17f      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007560:	4ba8      	ldr	r3, [pc, #672]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007562:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800756a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	2b00      	cmp	r3, #0
 8007570:	d165      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007572:	4ba4      	ldr	r3, [pc, #656]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007578:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800757c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007584:	d034      	beq.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800758c:	d853      	bhi.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007594:	d00b      	beq.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800759c:	d84b      	bhi.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d016      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075aa:	d009      	beq.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80075ac:	e043      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fa72 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80075bc:	f000 bfaf 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c0:	f107 0318 	add.w	r3, r7, #24
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fbc3 	bl	8006d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80075ce:	f000 bfa6 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80075d2:	4b8c      	ldr	r3, [pc, #560]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075de:	d103      	bne.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 80075e0:	4b89      	ldr	r3, [pc, #548]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80075e2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80075e4:	f000 bf9b 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80075ec:	f000 bf97 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075f0:	4b84      	ldr	r3, [pc, #528]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d118      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075fc:	4b81      	ldr	r3, [pc, #516]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8007608:	4b7e      	ldr	r3, [pc, #504]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	0e1b      	lsrs	r3, r3, #24
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	e006      	b.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8007614:	4b7b      	ldr	r3, [pc, #492]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	0e1b      	lsrs	r3, r3, #24
 800761e:	f003 030f 	and.w	r3, r3, #15
 8007622:	4a7a      	ldr	r2, [pc, #488]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8007624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007628:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800762a:	f000 bf78 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007632:	f000 bf74 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800763a:	f000 bf70 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007644:	d108      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fa26 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
 8007654:	f000 bf63 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
 800765c:	f000 bf5f 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007664:	1e51      	subs	r1, r2, #1
 8007666:	430b      	orrs	r3, r1
 8007668:	d136      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800766a:	4b66      	ldr	r3, [pc, #408]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800766c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800767c:	f7fe fc22 	bl	8005ec4 <HAL_RCC_GetPCLK2Freq>
 8007680:	6378      	str	r0, [r7, #52]	@ 0x34
 8007682:	f000 bf4c 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	2b01      	cmp	r3, #1
 800768a:	d104      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800768c:	f7fe faea 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007690:	6378      	str	r0, [r7, #52]	@ 0x34
 8007692:	f000 bf44 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007696:	4b5b      	ldr	r3, [pc, #364]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a2:	d106      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d103      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80076aa:	4b59      	ldr	r3, [pc, #356]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80076ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ae:	f000 bf36 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80076b2:	4b54      	ldr	r3, [pc, #336]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80076b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d107      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d104      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 80076c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80076cc:	f000 bf27 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d4:	f000 bf23 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80076d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076dc:	1f11      	subs	r1, r2, #4
 80076de:	430b      	orrs	r3, r1
 80076e0:	d136      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80076e2:	4b48      	ldr	r3, [pc, #288]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80076e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80076f4:	f7fe fbd2 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 80076f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80076fa:	f000 bf10 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	2b10      	cmp	r3, #16
 8007702:	d104      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007704:	f7fe faae 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007708:	6378      	str	r0, [r7, #52]	@ 0x34
 800770a:	f000 bf08 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800770e:	4b3d      	ldr	r3, [pc, #244]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800771a:	d106      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800771c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771e:	2b20      	cmp	r3, #32
 8007720:	d103      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8007722:	4b3b      	ldr	r3, [pc, #236]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007724:	637b      	str	r3, [r7, #52]	@ 0x34
 8007726:	f000 befa 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800772a:	4b36      	ldr	r3, [pc, #216]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800772c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b02      	cmp	r3, #2
 8007736:	d107      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	2b30      	cmp	r3, #48	@ 0x30
 800773c:	d104      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
 8007744:	f000 beeb 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
 800774c:	f000 bee7 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007754:	f1a2 0108 	sub.w	r1, r2, #8
 8007758:	430b      	orrs	r3, r1
 800775a:	d136      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800775c:	4b29      	ldr	r3, [pc, #164]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800775e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007762:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007766:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	2b00      	cmp	r3, #0
 800776c:	d104      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800776e:	f7fe fb95 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8007772:	6378      	str	r0, [r7, #52]	@ 0x34
 8007774:	f000 bed3 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	2b40      	cmp	r3, #64	@ 0x40
 800777c:	d104      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800777e:	f7fe fa71 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007782:	6378      	str	r0, [r7, #52]	@ 0x34
 8007784:	f000 becb 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007788:	4b1e      	ldr	r3, [pc, #120]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007794:	d106      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	2b80      	cmp	r3, #128	@ 0x80
 800779a:	d103      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 800779c:	4b1c      	ldr	r3, [pc, #112]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800779e:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a0:	f000 bebd 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80077a4:	4b17      	ldr	r3, [pc, #92]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80077a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d107      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80077b6:	d104      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 80077b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077be:	f000 beae 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c6:	f000 beaa 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80077ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ce:	f1a2 0110 	sub.w	r1, r2, #16
 80077d2:	430b      	orrs	r3, r1
 80077d4:	d141      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80077d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80077d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077e8:	f7fe fb58 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 80077ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80077ee:	f000 be96 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f8:	d10c      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077fa:	f7fe fa33 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 80077fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007800:	f000 be8d 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007804:	46020c00 	.word	0x46020c00
 8007808:	02dc6c00 	.word	0x02dc6c00
 800780c:	0800ef98 	.word	0x0800ef98
 8007810:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007814:	4baa      	ldr	r3, [pc, #680]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800781c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007820:	d107      	bne.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007828:	d103      	bne.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800782a:	4ba6      	ldr	r3, [pc, #664]	@ (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
 800782e:	f000 be76 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007832:	4ba3      	ldr	r3, [pc, #652]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d108      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007846:	d104      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8007848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
 800784e:	f000 be66 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	637b      	str	r3, [r7, #52]	@ 0x34
 8007856:	f000 be62 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800785a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800785e:	f1a2 0120 	sub.w	r1, r2, #32
 8007862:	430b      	orrs	r3, r1
 8007864:	d158      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007866:	4b96      	ldr	r3, [pc, #600]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007878:	f7fe fb38 	bl	8005eec <HAL_RCC_GetPCLK3Freq>
 800787c:	6378      	str	r0, [r7, #52]	@ 0x34
 800787e:	f000 be4e 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	2b01      	cmp	r3, #1
 8007886:	d104      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007888:	f7fe f9ec 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 800788c:	6378      	str	r0, [r7, #52]	@ 0x34
 800788e:	f000 be46 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007892:	4b8b      	ldr	r3, [pc, #556]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789e:	d106      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d103      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 80078a6:	4b87      	ldr	r3, [pc, #540]	@ (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80078a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078aa:	f000 be38 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80078ae:	4b84      	ldr	r3, [pc, #528]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80078b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d107      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d104      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 80078c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c8:	f000 be29 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80078cc:	4b7c      	ldr	r3, [pc, #496]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d11b      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d118      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078de:	4b78      	ldr	r3, [pc, #480]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80078ea:	4b75      	ldr	r3, [pc, #468]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	0e1b      	lsrs	r3, r3, #24
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	e006      	b.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80078f6:	4b72      	ldr	r3, [pc, #456]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80078f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078fc:	041b      	lsls	r3, r3, #16
 80078fe:	0e1b      	lsrs	r3, r3, #24
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	4a70      	ldr	r2, [pc, #448]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
 800790c:	f000 be07 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	637b      	str	r3, [r7, #52]	@ 0x34
 8007914:	f000 be03 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007920:	430b      	orrs	r3, r1
 8007922:	d16c      	bne.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007924:	4b66      	ldr	r3, [pc, #408]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800792a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800792e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007936:	d104      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007938:	f7fe f994 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 800793c:	6378      	str	r0, [r7, #52]	@ 0x34
 800793e:	f000 bdee 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007948:	d108      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800794a:	f107 0318 	add.w	r3, r7, #24
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff f9fe 	bl	8006d50 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
 8007958:	f000 bde1 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007962:	f7fe fa81 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8007966:	6378      	str	r0, [r7, #52]	@ 0x34
 8007968:	f000 bdd9 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007972:	d122      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007974:	4b52      	ldr	r3, [pc, #328]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b20      	cmp	r3, #32
 800797e:	d118      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007980:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800798c:	4b4c      	ldr	r3, [pc, #304]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	0e1b      	lsrs	r3, r3, #24
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	e006      	b.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007998:	4b49      	ldr	r3, [pc, #292]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800799a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800799e:	041b      	lsls	r3, r3, #16
 80079a0:	0e1b      	lsrs	r3, r3, #24
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	4a48      	ldr	r2, [pc, #288]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80079a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ae:	f000 bdb6 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b6:	f000 bdb2 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80079ba:	4b41      	ldr	r3, [pc, #260]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079c6:	d107      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079ce:	d103      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80079d0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80079d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d4:	f000 bda3 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80079d8:	4b39      	ldr	r3, [pc, #228]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e4:	d107      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ec:	d103      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80079ee:	4b35      	ldr	r3, [pc, #212]	@ (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80079f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f2:	f000 bd94 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079fa:	f000 bd90 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80079fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a02:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007a06:	430b      	orrs	r3, r1
 8007a08:	d160      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007a0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d84c      	bhi.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a5d 	.word	0x08007a5d
 8007a28:	08007a39 	.word	0x08007a39
 8007a2c:	08007a4b 	.word	0x08007a4b
 8007a30:	08007a67 	.word	0x08007a67
 8007a34:	08007a71 	.word	0x08007a71
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff f82d 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a46:	f000 bd6a 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a4a:	f107 030c 	add.w	r3, r7, #12
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fad8 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a58:	f000 bd61 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007a5c:	f7fe fa04 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8007a60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a62:	f000 bd5c 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a66:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a6c:	f000 bd57 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a70:	4b13      	ldr	r3, [pc, #76]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d118      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007a88:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	0e1b      	lsrs	r3, r3, #24
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	e006      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007a94:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a9a:	041b      	lsls	r3, r3, #16
 8007a9c:	0e1b      	lsrs	r3, r3, #24
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	4a09      	ldr	r2, [pc, #36]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007aaa:	f000 bd38 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ab2:	f000 bd34 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aba:	f000 bd30 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007abe:	bf00      	nop
 8007ac0:	46020c00 	.word	0x46020c00
 8007ac4:	00f42400 	.word	0x00f42400
 8007ac8:	0800ef98 	.word	0x0800ef98
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad0:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	d167      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ade:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007ae2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007aea:	d036      	beq.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007af2:	d855      	bhi.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007afa:	d029      	beq.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8007afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b02:	d84d      	bhi.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b0a:	d013      	beq.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b12:	d845      	bhi.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d015      	beq.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b20:	d13e      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe ffb8 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b30:	f000 bcf5 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b34:	f107 030c 	add.w	r3, r7, #12
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fa63 	bl	8007004 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b42:	f000 bcec 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007b46:	f7fe f98f 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8007b4a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b4c:	f000 bce7 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b50:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b56:	f000 bce2 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b5a:	4b80      	ldr	r3, [pc, #512]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d118      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b66:	4b7d      	ldr	r3, [pc, #500]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8007b72:	4b7a      	ldr	r3, [pc, #488]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	0e1b      	lsrs	r3, r3, #24
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	e006      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8007b7e:	4b77      	ldr	r3, [pc, #476]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	0e1b      	lsrs	r3, r3, #24
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	4a74      	ldr	r2, [pc, #464]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b94:	f000 bcc3 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b9c:	f000 bcbf 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ba4:	f000 bcbb 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bac:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	d14c      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007bb4:	4b69      	ldr	r3, [pc, #420]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bc6:	f7fe f969 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8007bca:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bcc:	f000 bca7 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd6:	d104      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bd8:	f7fe f844 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007bdc:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bde:	f000 bc9e 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007be2:	4b5e      	ldr	r3, [pc, #376]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bee:	d107      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf6:	d103      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8007bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfc:	f000 bc8f 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007c00:	4b56      	ldr	r3, [pc, #344]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d11c      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c12:	d118      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c14:	4b51      	ldr	r3, [pc, #324]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8007c20:	4b4e      	ldr	r3, [pc, #312]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	0e1b      	lsrs	r3, r3, #24
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	e006      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8007c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	0e1b      	lsrs	r3, r3, #24
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	4a49      	ldr	r2, [pc, #292]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c42:	f000 bc6c 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4a:	f000 bc68 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c52:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007c56:	430b      	orrs	r3, r1
 8007c58:	d14c      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007c5a:	4b40      	ldr	r3, [pc, #256]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c60:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007c64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c6c:	f7fe f916 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8007c70:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c72:	f000 bc54 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c7c:	d104      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c7e:	f7fd fff1 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007c82:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c84:	f000 bc4b 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007c88:	4b34      	ldr	r3, [pc, #208]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c94:	d107      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c9c:	d103      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8007c9e:	4b31      	ldr	r3, [pc, #196]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca2:	f000 bc3c 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d11c      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cb8:	d118      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cba:	4b28      	ldr	r3, [pc, #160]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d005      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8007cc6:	4b25      	ldr	r3, [pc, #148]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	0e1b      	lsrs	r3, r3, #24
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	e006      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8007cd2:	4b22      	ldr	r3, [pc, #136]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cd8:	041b      	lsls	r3, r3, #16
 8007cda:	0e1b      	lsrs	r3, r3, #24
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce8:	f000 bc19 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	f000 bc15 	b.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf8:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	d157      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007d00:	4b16      	ldr	r3, [pc, #88]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d10:	d02a      	beq.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d16:	d848      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	2b80      	cmp	r3, #128	@ 0x80
 8007d1c:	d00d      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	2b80      	cmp	r3, #128	@ 0x80
 8007d22:	d842      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2c:	2b40      	cmp	r3, #64	@ 0x40
 8007d2e:	d011      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007d30:	e03b      	b.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007d32:	f7fe f8db 	bl	8005eec <HAL_RCC_GetPCLK3Freq>
 8007d36:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d38:	e3f1      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d3a:	4b08      	ldr	r3, [pc, #32]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d46:	d102      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8007d48:	4b06      	ldr	r3, [pc, #24]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d4c:	e3e7      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d52:	e3e4      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007d54:	f7fd ff86 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007d58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d5a:	e3e0      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007d5c:	46020c00 	.word	0x46020c00
 8007d60:	0800ef98 	.word	0x0800ef98
 8007d64:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d68:	4ba3      	ldr	r3, [pc, #652]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d117      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d74:	4ba0      	ldr	r3, [pc, #640]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8007d80:	4b9d      	ldr	r3, [pc, #628]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	0e1b      	lsrs	r3, r3, #24
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	e006      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007d8c:	4b9a      	ldr	r3, [pc, #616]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	0e1b      	lsrs	r3, r3, #24
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	4a98      	ldr	r2, [pc, #608]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007da2:	e3bc      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007da8:	e3b9      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dae:	e3b6      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007db8:	430b      	orrs	r3, r1
 8007dba:	d147      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dc2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007dc6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dce:	f7fe f865 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8007dd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007dd4:	e3a3      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ddc:	d103      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dde:	f7fd ff41 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007de2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007de4:	e39b      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007de6:	4b84      	ldr	r3, [pc, #528]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df2:	d106      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dfa:	d102      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8007dfc:	4b80      	ldr	r3, [pc, #512]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e00:	e38d      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007e02:	4b7d      	ldr	r3, [pc, #500]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d11b      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007e14:	d117      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e16:	4b78      	ldr	r3, [pc, #480]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8007e22:	4b75      	ldr	r3, [pc, #468]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	0e1b      	lsrs	r3, r3, #24
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	e006      	b.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007e2e:	4b72      	ldr	r3, [pc, #456]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e34:	041b      	lsls	r3, r3, #16
 8007e36:	0e1b      	lsrs	r3, r3, #24
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	4a6f      	ldr	r2, [pc, #444]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e44:	e36b      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4a:	e368      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e50:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007e54:	430b      	orrs	r3, r1
 8007e56:	d164      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007e58:	4b67      	ldr	r3, [pc, #412]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d120      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e6a:	4b63      	ldr	r3, [pc, #396]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d117      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e76:	4b60      	ldr	r3, [pc, #384]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8007e82:	4b5d      	ldr	r3, [pc, #372]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	0e1b      	lsrs	r3, r3, #24
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	e006      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8007e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e94:	041b      	lsls	r3, r3, #16
 8007e96:	0e1b      	lsrs	r3, r3, #24
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	4a57      	ldr	r2, [pc, #348]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea4:	e33b      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eaa:	e338      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007eac:	4b52      	ldr	r3, [pc, #328]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eba:	d112      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec2:	d10e      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ed2:	d102      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8007ed4:	23fa      	movs	r3, #250	@ 0xfa
 8007ed6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ed8:	e321      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007eda:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ede:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ee0:	e31d      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007ee2:	4b45      	ldr	r3, [pc, #276]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eee:	d106      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef6:	d102      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8007ef8:	4b41      	ldr	r3, [pc, #260]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007efc:	e30f      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007efe:	4b3e      	ldr	r3, [pc, #248]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d107      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f12:	d103      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8007f14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1a:	e300      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f20:	e2fd      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f26:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	d16a      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007f2e:	4b32      	ldr	r3, [pc, #200]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f38:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d120      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f40:	4b2d      	ldr	r3, [pc, #180]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d117      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007f58:	4b27      	ldr	r3, [pc, #156]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	0e1b      	lsrs	r3, r3, #24
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	e006      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8007f64:	4b24      	ldr	r3, [pc, #144]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	4a22      	ldr	r2, [pc, #136]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7a:	e2d0      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f80:	e2cd      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007f82:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f90:	d112      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f98:	d10e      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f9a:	4b17      	ldr	r3, [pc, #92]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fa8:	d102      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007faa:	23fa      	movs	r3, #250	@ 0xfa
 8007fac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fae:	e2b6      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007fb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fb6:	e2b2      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc4:	d106      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8007fce:	4b0c      	ldr	r3, [pc, #48]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd2:	e2a4      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007fd4:	4b08      	ldr	r3, [pc, #32]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d107      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fe8:	d103      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff0:	e295      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff6:	e292      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007ff8:	46020c00 	.word	0x46020c00
 8007ffc:	0800ef98 	.word	0x0800ef98
 8008000:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008008:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800800c:	430b      	orrs	r3, r1
 800800e:	d147      	bne.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008010:	4b9a      	ldr	r3, [pc, #616]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008016:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008022:	f7fd ff3b 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8008026:	6378      	str	r0, [r7, #52]	@ 0x34
 8008028:	e279      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800802a:	4b94      	ldr	r3, [pc, #592]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800802c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008038:	d112      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008040:	d10e      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008042:	4b8e      	ldr	r3, [pc, #568]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800804c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008050:	d102      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8008052:	23fa      	movs	r3, #250	@ 0xfa
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008056:	e262      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8008058:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800805e:	e25e      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008060:	4b86      	ldr	r3, [pc, #536]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800806c:	d106      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008074:	d102      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8008076:	4b82      	ldr	r3, [pc, #520]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
 800807a:	e250      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800807c:	4b7f      	ldr	r3, [pc, #508]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800807e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b02      	cmp	r3, #2
 8008088:	d107      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008090:	d103      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8008092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008096:	637b      	str	r3, [r7, #52]	@ 0x34
 8008098:	e241      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	637b      	str	r3, [r7, #52]	@ 0x34
 800809e:	e23e      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80080a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80080a8:	430b      	orrs	r3, r1
 80080aa:	d12d      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80080ac:	4b73      	ldr	r3, [pc, #460]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80080ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080b2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80080b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80080b8:	4b70      	ldr	r3, [pc, #448]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080c4:	d105      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 80080cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80080ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d0:	e225      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080d8:	d107      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fcdc 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e8:	e219      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f0:	d107      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f2:	f107 0318 	add.w	r3, r7, #24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fe2a 	bl	8006d50 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008100:	e20d      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
 8008106:	e20a      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008110:	430b      	orrs	r3, r1
 8008112:	d156      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008114:	4b59      	ldr	r3, [pc, #356]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800811a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800811e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008126:	d028      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800812e:	d845      	bhi.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008136:	d013      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800813e:	d83d      	bhi.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800814c:	d004      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800814e:	e035      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008150:	f7fd feb8 	bl	8005ec4 <HAL_RCC_GetPCLK2Freq>
 8008154:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008156:	e1e2      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008158:	f7fd fd84 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 800815c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800815e:	e1de      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008160:	4b46      	ldr	r3, [pc, #280]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800816c:	d102      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 800816e:	4b44      	ldr	r3, [pc, #272]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8008170:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008172:	e1d4      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008178:	e1d1      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800817a:	4b40      	ldr	r3, [pc, #256]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b20      	cmp	r3, #32
 8008184:	d117      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008186:	4b3d      	ldr	r3, [pc, #244]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8008192:	4b3a      	ldr	r3, [pc, #232]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	0e1b      	lsrs	r3, r3, #24
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800819e:	4b37      	ldr	r3, [pc, #220]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80081a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081a4:	041b      	lsls	r3, r3, #16
 80081a6:	0e1b      	lsrs	r3, r3, #24
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	4a35      	ldr	r2, [pc, #212]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80081ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081b4:	e1b3      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081ba:	e1b0      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081c0:	e1ad      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80081c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c6:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80081ca:	430b      	orrs	r3, r1
 80081cc:	d15c      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80081ce:	4b2b      	ldr	r3, [pc, #172]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80081d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081d8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081e0:	d028      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081e8:	d845      	bhi.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081f0:	d013      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081f8:	d83d      	bhi.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008206:	d004      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8008208:	e035      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800820a:	f7fd fe47 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 800820e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008210:	e185      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008212:	f7fd fd27 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8008216:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008218:	e181      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800821a:	4b18      	ldr	r3, [pc, #96]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008226:	d102      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8008228:	4b15      	ldr	r3, [pc, #84]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800822c:	e177      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008232:	e174      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008234:	4b11      	ldr	r3, [pc, #68]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b20      	cmp	r3, #32
 800823e:	d117      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008240:	4b0e      	ldr	r3, [pc, #56]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 800824c:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	0e1b      	lsrs	r3, r3, #24
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	e006      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8008258:	4b08      	ldr	r3, [pc, #32]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800825a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800825e:	041b      	lsls	r3, r3, #16
 8008260:	0e1b      	lsrs	r3, r3, #24
 8008262:	f003 030f 	and.w	r3, r3, #15
 8008266:	4a07      	ldr	r2, [pc, #28]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8008268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800826e:	e156      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008274:	e153      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800827a:	e150      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800827c:	46020c00 	.word	0x46020c00
 8008280:	00f42400 	.word	0x00f42400
 8008284:	0800ef98 	.word	0x0800ef98
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008290:	430b      	orrs	r3, r1
 8008292:	d176      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008294:	4ba4      	ldr	r3, [pc, #656]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800829a:	f003 0318 	and.w	r3, r3, #24
 800829e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80082a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a2:	2b18      	cmp	r3, #24
 80082a4:	d86a      	bhi.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	08008311 	.word	0x08008311
 80082b0:	0800837d 	.word	0x0800837d
 80082b4:	0800837d 	.word	0x0800837d
 80082b8:	0800837d 	.word	0x0800837d
 80082bc:	0800837d 	.word	0x0800837d
 80082c0:	0800837d 	.word	0x0800837d
 80082c4:	0800837d 	.word	0x0800837d
 80082c8:	0800837d 	.word	0x0800837d
 80082cc:	08008319 	.word	0x08008319
 80082d0:	0800837d 	.word	0x0800837d
 80082d4:	0800837d 	.word	0x0800837d
 80082d8:	0800837d 	.word	0x0800837d
 80082dc:	0800837d 	.word	0x0800837d
 80082e0:	0800837d 	.word	0x0800837d
 80082e4:	0800837d 	.word	0x0800837d
 80082e8:	0800837d 	.word	0x0800837d
 80082ec:	08008321 	.word	0x08008321
 80082f0:	0800837d 	.word	0x0800837d
 80082f4:	0800837d 	.word	0x0800837d
 80082f8:	0800837d 	.word	0x0800837d
 80082fc:	0800837d 	.word	0x0800837d
 8008300:	0800837d 	.word	0x0800837d
 8008304:	0800837d 	.word	0x0800837d
 8008308:	0800837d 	.word	0x0800837d
 800830c:	0800833b 	.word	0x0800833b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008310:	f7fd fdec 	bl	8005eec <HAL_RCC_GetPCLK3Freq>
 8008314:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008316:	e102      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008318:	f7fd fca4 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 800831c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800831e:	e0fe      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008320:	4b81      	ldr	r3, [pc, #516]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800832c:	d102      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 800832e:	4b7f      	ldr	r3, [pc, #508]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008332:	e0f4      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008338:	e0f1      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800833a:	4b7b      	ldr	r3, [pc, #492]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b20      	cmp	r3, #32
 8008344:	d117      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008346:	4b78      	ldr	r3, [pc, #480]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008352:	4b75      	ldr	r3, [pc, #468]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	0e1b      	lsrs	r3, r3, #24
 8008358:	f003 030f 	and.w	r3, r3, #15
 800835c:	e006      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 800835e:	4b72      	ldr	r3, [pc, #456]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	0e1b      	lsrs	r3, r3, #24
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	4a70      	ldr	r2, [pc, #448]	@ (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800836e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008372:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008374:	e0d3      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800837a:	e0d0      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008380:	e0cd      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008386:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800838a:	430b      	orrs	r3, r1
 800838c:	d155      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800838e:	4b66      	ldr	r3, [pc, #408]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008394:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008398:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083a0:	d013      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083a8:	d844      	bhi.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083b0:	d013      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083b8:	d83c      	bhi.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d014      	beq.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083c6:	d014      	beq.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80083c8:	e034      	b.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ca:	f107 0318 	add.w	r3, r7, #24
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fcbe 	bl	8006d50 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083d8:	e0a1      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fb5c 	bl	8006a9c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083e8:	e099      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80083ea:	f7fd fc3b 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 80083ee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083f0:	e095      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083f2:	4b4d      	ldr	r3, [pc, #308]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d117      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083fe:	4b4a      	ldr	r3, [pc, #296]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800840a:	4b47      	ldr	r3, [pc, #284]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	0e1b      	lsrs	r3, r3, #24
 8008410:	f003 030f 	and.w	r3, r3, #15
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8008416:	4b44      	ldr	r3, [pc, #272]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	0e1b      	lsrs	r3, r3, #24
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	4a42      	ldr	r2, [pc, #264]	@ (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800842c:	e077      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008432:	e074      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008438:	e071      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800843a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008442:	430b      	orrs	r3, r1
 8008444:	d131      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008446:	4b38      	ldr	r3, [pc, #224]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800844c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008450:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008452:	4b35      	ldr	r3, [pc, #212]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b02      	cmp	r3, #2
 800845e:	d106      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8008466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800846a:	637b      	str	r3, [r7, #52]	@ 0x34
 800846c:	e057      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800846e:	4b2e      	ldr	r3, [pc, #184]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800847c:	d112      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008484:	d10e      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008486:	4b28      	ldr	r3, [pc, #160]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8008488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800848c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008490:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008494:	d102      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8008496:	23fa      	movs	r3, #250	@ 0xfa
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800849a:	e040      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800849c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80084a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084a2:	e03c      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a8:	e039      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80084aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ae:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80084b2:	430b      	orrs	r3, r1
 80084b4:	d131      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80084b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80084b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084bc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80084c0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80084c2:	4b19      	ldr	r3, [pc, #100]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ce:	d105      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 80084d6:	4b17      	ldr	r3, [pc, #92]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 80084d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084da:	e020      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80084dc:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084e8:	d106      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f0:	d102      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 80084f2:	4b11      	ldr	r3, [pc, #68]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f6:	e012      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008504:	d106      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800850c:	d102      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 800850e:	4b07      	ldr	r3, [pc, #28]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
 8008512:	e004      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
 8008518:	e001      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800851e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008520:	4618      	mov	r0, r3
 8008522:	3738      	adds	r7, #56	@ 0x38
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	46020c00 	.word	0x46020c00
 800852c:	00f42400 	.word	0x00f42400
 8008530:	0800ef98 	.word	0x0800ef98
 8008534:	02dc6c00 	.word	0x02dc6c00
 8008538:	016e3600 	.word	0x016e3600

0800853c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008544:	4b47      	ldr	r3, [pc, #284]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a46      	ldr	r2, [pc, #280]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 800854a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800854e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008550:	f7fa fb8a 	bl	8002c68 <HAL_GetTick>
 8008554:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008556:	e008      	b.n	800856a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008558:	f7fa fb86 	bl	8002c68 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e077      	b.n	800865a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800856a:	4b3e      	ldr	r3, [pc, #248]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f0      	bne.n	8008558 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008576:	4b3b      	ldr	r3, [pc, #236]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6811      	ldr	r1, [r2, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	6852      	ldr	r2, [r2, #4]
 800858a:	3a01      	subs	r2, #1
 800858c:	0212      	lsls	r2, r2, #8
 800858e:	430a      	orrs	r2, r1
 8008590:	4934      	ldr	r1, [pc, #208]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008592:	4313      	orrs	r3, r2
 8008594:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008596:	4b33      	ldr	r3, [pc, #204]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800859a:	4b33      	ldr	r3, [pc, #204]	@ (8008668 <RCCEx_PLL2_Config+0x12c>)
 800859c:	4013      	ands	r3, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6892      	ldr	r2, [r2, #8]
 80085a2:	3a01      	subs	r2, #1
 80085a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	68d2      	ldr	r2, [r2, #12]
 80085ac:	3a01      	subs	r2, #1
 80085ae:	0252      	lsls	r2, r2, #9
 80085b0:	b292      	uxth	r2, r2
 80085b2:	4311      	orrs	r1, r2
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6912      	ldr	r2, [r2, #16]
 80085b8:	3a01      	subs	r2, #1
 80085ba:	0412      	lsls	r2, r2, #16
 80085bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80085c0:	4311      	orrs	r1, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6952      	ldr	r2, [r2, #20]
 80085c6:	3a01      	subs	r2, #1
 80085c8:	0612      	lsls	r2, r2, #24
 80085ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80085ce:	430a      	orrs	r2, r1
 80085d0:	4924      	ldr	r1, [pc, #144]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80085d6:	4b23      	ldr	r3, [pc, #140]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085da:	f023 020c 	bic.w	r2, r3, #12
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	4920      	ldr	r1, [pc, #128]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80085e8:	4b1e      	ldr	r3, [pc, #120]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 80085ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	491c      	ldr	r1, [pc, #112]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80085f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 80085fc:	f023 0310 	bic.w	r3, r3, #16
 8008600:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008602:	4b18      	ldr	r3, [pc, #96]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800860a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	69d2      	ldr	r2, [r2, #28]
 8008612:	00d2      	lsls	r2, r2, #3
 8008614:	4913      	ldr	r1, [pc, #76]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008616:	4313      	orrs	r3, r2
 8008618:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800861a:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	4a11      	ldr	r2, [pc, #68]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008620:	f043 0310 	orr.w	r3, r3, #16
 8008624:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008626:	4b0f      	ldr	r3, [pc, #60]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a0e      	ldr	r2, [pc, #56]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 800862c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008630:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008632:	f7fa fb19 	bl	8002c68 <HAL_GetTick>
 8008636:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008638:	e008      	b.n	800864c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800863a:	f7fa fb15 	bl	8002c68 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b02      	cmp	r3, #2
 8008646:	d901      	bls.n	800864c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e006      	b.n	800865a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800864c:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <RCCEx_PLL2_Config+0x128>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0f0      	beq.n	800863a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008658:	2300      	movs	r3, #0

}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	46020c00 	.word	0x46020c00
 8008668:	80800000 	.word	0x80800000

0800866c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008674:	4b47      	ldr	r3, [pc, #284]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a46      	ldr	r2, [pc, #280]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 800867a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800867e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008680:	f7fa faf2 	bl	8002c68 <HAL_GetTick>
 8008684:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008686:	e008      	b.n	800869a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008688:	f7fa faee 	bl	8002c68 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d901      	bls.n	800869a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e077      	b.n	800878a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800869a:	4b3e      	ldr	r3, [pc, #248]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f0      	bne.n	8008688 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80086a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 80086a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086ae:	f023 0303 	bic.w	r3, r3, #3
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6811      	ldr	r1, [r2, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6852      	ldr	r2, [r2, #4]
 80086ba:	3a01      	subs	r2, #1
 80086bc:	0212      	lsls	r2, r2, #8
 80086be:	430a      	orrs	r2, r1
 80086c0:	4934      	ldr	r1, [pc, #208]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	630b      	str	r3, [r1, #48]	@ 0x30
 80086c6:	4b33      	ldr	r3, [pc, #204]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 80086c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ca:	4b33      	ldr	r3, [pc, #204]	@ (8008798 <RCCEx_PLL3_Config+0x12c>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6892      	ldr	r2, [r2, #8]
 80086d2:	3a01      	subs	r2, #1
 80086d4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68d2      	ldr	r2, [r2, #12]
 80086dc:	3a01      	subs	r2, #1
 80086de:	0252      	lsls	r2, r2, #9
 80086e0:	b292      	uxth	r2, r2
 80086e2:	4311      	orrs	r1, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6912      	ldr	r2, [r2, #16]
 80086e8:	3a01      	subs	r2, #1
 80086ea:	0412      	lsls	r2, r2, #16
 80086ec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80086f0:	4311      	orrs	r1, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6952      	ldr	r2, [r2, #20]
 80086f6:	3a01      	subs	r2, #1
 80086f8:	0612      	lsls	r2, r2, #24
 80086fa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80086fe:	430a      	orrs	r2, r1
 8008700:	4924      	ldr	r1, [pc, #144]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008702:	4313      	orrs	r3, r2
 8008704:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008706:	4b23      	ldr	r3, [pc, #140]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870a:	f023 020c 	bic.w	r2, r3, #12
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	4920      	ldr	r1, [pc, #128]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008714:	4313      	orrs	r3, r2
 8008716:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008718:	4b1e      	ldr	r3, [pc, #120]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 800871a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	491c      	ldr	r1, [pc, #112]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008722:	4313      	orrs	r3, r2
 8008724:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008726:	4b1b      	ldr	r3, [pc, #108]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872a:	4a1a      	ldr	r2, [pc, #104]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 800872c:	f023 0310 	bic.w	r3, r3, #16
 8008730:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008732:	4b18      	ldr	r3, [pc, #96]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800873a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	69d2      	ldr	r2, [r2, #28]
 8008742:	00d2      	lsls	r2, r2, #3
 8008744:	4913      	ldr	r1, [pc, #76]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008746:	4313      	orrs	r3, r2
 8008748:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800874a:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 800874c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874e:	4a11      	ldr	r2, [pc, #68]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008750:	f043 0310 	orr.w	r3, r3, #16
 8008754:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008756:	4b0f      	ldr	r3, [pc, #60]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a0e      	ldr	r2, [pc, #56]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 800875c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008760:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008762:	f7fa fa81 	bl	8002c68 <HAL_GetTick>
 8008766:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008768:	e008      	b.n	800877c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800876a:	f7fa fa7d 	bl	8002c68 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d901      	bls.n	800877c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e006      	b.n	800878a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800877c:	4b05      	ldr	r3, [pc, #20]	@ (8008794 <RCCEx_PLL3_Config+0x128>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0f0      	beq.n	800876a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	46020c00 	.word	0x46020c00
 8008798:	80800000 	.word	0x80800000

0800879c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e049      	b.n	8008842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f9 fb52 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f000 fe14 	bl	8009408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b01      	cmp	r3, #1
 800885e:	d001      	beq.n	8008864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e06a      	b.n	800893a <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a35      	ldr	r2, [pc, #212]	@ (8008948 <HAL_TIM_Base_Start+0xfc>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d040      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a34      	ldr	r2, [pc, #208]	@ (800894c <HAL_TIM_Base_Start+0x100>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d03b      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008888:	d036      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008892:	d031      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a2d      	ldr	r2, [pc, #180]	@ (8008950 <HAL_TIM_Base_Start+0x104>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d02c      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a2c      	ldr	r2, [pc, #176]	@ (8008954 <HAL_TIM_Base_Start+0x108>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d027      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008958 <HAL_TIM_Base_Start+0x10c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d022      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a29      	ldr	r2, [pc, #164]	@ (800895c <HAL_TIM_Base_Start+0x110>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d01d      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a27      	ldr	r2, [pc, #156]	@ (8008960 <HAL_TIM_Base_Start+0x114>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d018      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a26      	ldr	r2, [pc, #152]	@ (8008964 <HAL_TIM_Base_Start+0x118>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d013      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a24      	ldr	r2, [pc, #144]	@ (8008968 <HAL_TIM_Base_Start+0x11c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00e      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a23      	ldr	r2, [pc, #140]	@ (800896c <HAL_TIM_Base_Start+0x120>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d009      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a21      	ldr	r2, [pc, #132]	@ (8008970 <HAL_TIM_Base_Start+0x124>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d004      	beq.n	80088f8 <HAL_TIM_Base_Start+0xac>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a20      	ldr	r2, [pc, #128]	@ (8008974 <HAL_TIM_Base_Start+0x128>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d115      	bne.n	8008924 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008978 <HAL_TIM_Base_Start+0x12c>)
 8008900:	4013      	ands	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b06      	cmp	r3, #6
 8008908:	d015      	beq.n	8008936 <HAL_TIM_Base_Start+0xea>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008910:	d011      	beq.n	8008936 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0201 	orr.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008922:	e008      	b.n	8008936 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e000      	b.n	8008938 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40012c00 	.word	0x40012c00
 800894c:	50012c00 	.word	0x50012c00
 8008950:	40000400 	.word	0x40000400
 8008954:	50000400 	.word	0x50000400
 8008958:	40000800 	.word	0x40000800
 800895c:	50000800 	.word	0x50000800
 8008960:	40000c00 	.word	0x40000c00
 8008964:	50000c00 	.word	0x50000c00
 8008968:	40013400 	.word	0x40013400
 800896c:	50013400 	.word	0x50013400
 8008970:	40014000 	.word	0x40014000
 8008974:	50014000 	.word	0x50014000
 8008978:	00010007 	.word	0x00010007

0800897c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e049      	b.n	8008a22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d106      	bne.n	80089a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f841 	bl	8008a2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3304      	adds	r3, #4
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f000 fd24 	bl	8009408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <HAL_TIM_IC_Start_DMA+0x22>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	e023      	b.n	8008aaa <HAL_TIM_IC_Start_DMA+0x6a>
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d104      	bne.n	8008a72 <HAL_TIM_IC_Start_DMA+0x32>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	e01b      	b.n	8008aaa <HAL_TIM_IC_Start_DMA+0x6a>
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d104      	bne.n	8008a82 <HAL_TIM_IC_Start_DMA+0x42>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	e013      	b.n	8008aaa <HAL_TIM_IC_Start_DMA+0x6a>
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d104      	bne.n	8008a92 <HAL_TIM_IC_Start_DMA+0x52>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	e00b      	b.n	8008aaa <HAL_TIM_IC_Start_DMA+0x6a>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d104      	bne.n	8008aa2 <HAL_TIM_IC_Start_DMA+0x62>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	e003      	b.n	8008aaa <HAL_TIM_IC_Start_DMA+0x6a>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d104      	bne.n	8008abc <HAL_TIM_IC_Start_DMA+0x7c>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	e013      	b.n	8008ae4 <HAL_TIM_IC_Start_DMA+0xa4>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d104      	bne.n	8008acc <HAL_TIM_IC_Start_DMA+0x8c>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	e00b      	b.n	8008ae4 <HAL_TIM_IC_Start_DMA+0xa4>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d104      	bne.n	8008adc <HAL_TIM_IC_Start_DMA+0x9c>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	e003      	b.n	8008ae4 <HAL_TIM_IC_Start_DMA+0xa4>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008ae6:	7dbb      	ldrb	r3, [r7, #22]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d002      	beq.n	8008af2 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008aec:	7d7b      	ldrb	r3, [r7, #21]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d101      	bne.n	8008af6 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8008af2:	2302      	movs	r3, #2
 8008af4:	e17a      	b.n	8008dec <HAL_TIM_IC_Start_DMA+0x3ac>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008af6:	7dbb      	ldrb	r3, [r7, #22]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d153      	bne.n	8008ba4 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008afc:	7d7b      	ldrb	r3, [r7, #21]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d150      	bne.n	8008ba4 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <HAL_TIM_IC_Start_DMA+0xce>
 8008b08:	887b      	ldrh	r3, [r7, #2]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e16c      	b.n	8008dec <HAL_TIM_IC_Start_DMA+0x3ac>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d104      	bne.n	8008b22 <HAL_TIM_IC_Start_DMA+0xe2>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b20:	e023      	b.n	8008b6a <HAL_TIM_IC_Start_DMA+0x12a>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d104      	bne.n	8008b32 <HAL_TIM_IC_Start_DMA+0xf2>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b30:	e01b      	b.n	8008b6a <HAL_TIM_IC_Start_DMA+0x12a>
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d104      	bne.n	8008b42 <HAL_TIM_IC_Start_DMA+0x102>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b40:	e013      	b.n	8008b6a <HAL_TIM_IC_Start_DMA+0x12a>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b0c      	cmp	r3, #12
 8008b46:	d104      	bne.n	8008b52 <HAL_TIM_IC_Start_DMA+0x112>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b50:	e00b      	b.n	8008b6a <HAL_TIM_IC_Start_DMA+0x12a>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b10      	cmp	r3, #16
 8008b56:	d104      	bne.n	8008b62 <HAL_TIM_IC_Start_DMA+0x122>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b60:	e003      	b.n	8008b6a <HAL_TIM_IC_Start_DMA+0x12a>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <HAL_TIM_IC_Start_DMA+0x13a>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8008b78:	e016      	b.n	8008ba8 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d104      	bne.n	8008b8a <HAL_TIM_IC_Start_DMA+0x14a>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8008b88:	e00e      	b.n	8008ba8 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d104      	bne.n	8008b9a <HAL_TIM_IC_Start_DMA+0x15a>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 8008b98:	e006      	b.n	8008ba8 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8008ba2:	e001      	b.n	8008ba8 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e121      	b.n	8008dec <HAL_TIM_IC_Start_DMA+0x3ac>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2201      	movs	r2, #1
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 ffdd 	bl	8009b70 <TIM_CCxChannelCmd>

  switch (Channel)
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b0c      	cmp	r3, #12
 8008bba:	f200 80ad 	bhi.w	8008d18 <HAL_TIM_IC_Start_DMA+0x2d8>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <HAL_TIM_IC_Start_DMA+0x184>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008bf9 	.word	0x08008bf9
 8008bc8:	08008d19 	.word	0x08008d19
 8008bcc:	08008d19 	.word	0x08008d19
 8008bd0:	08008d19 	.word	0x08008d19
 8008bd4:	08008c41 	.word	0x08008c41
 8008bd8:	08008d19 	.word	0x08008d19
 8008bdc:	08008d19 	.word	0x08008d19
 8008be0:	08008d19 	.word	0x08008d19
 8008be4:	08008c89 	.word	0x08008c89
 8008be8:	08008d19 	.word	0x08008d19
 8008bec:	08008d19 	.word	0x08008d19
 8008bf0:	08008d19 	.word	0x08008d19
 8008bf4:	08008cd1 	.word	0x08008cd1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	4a7d      	ldr	r2, [pc, #500]	@ (8008df4 <HAL_TIM_IC_Start_DMA+0x3b4>)
 8008bfe:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c04:	4a7c      	ldr	r2, [pc, #496]	@ (8008df8 <HAL_TIM_IC_Start_DMA+0x3b8>)
 8008c06:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0c:	4a7b      	ldr	r2, [pc, #492]	@ (8008dfc <HAL_TIM_IC_Start_DMA+0x3bc>)
 8008c0e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3334      	adds	r3, #52	@ 0x34
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	f000 fae8 	bl	80091f4 <TIM_DMA_Start_IT>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e0de      	b.n	8008dec <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c3c:	60da      	str	r2, [r3, #12]
      break;
 8008c3e:	e06e      	b.n	8008d1e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c44:	4a6b      	ldr	r2, [pc, #428]	@ (8008df4 <HAL_TIM_IC_Start_DMA+0x3b4>)
 8008c46:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4c:	4a6a      	ldr	r2, [pc, #424]	@ (8008df8 <HAL_TIM_IC_Start_DMA+0x3b8>)
 8008c4e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c54:	4a69      	ldr	r2, [pc, #420]	@ (8008dfc <HAL_TIM_IC_Start_DMA+0x3bc>)
 8008c56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3338      	adds	r3, #56	@ 0x38
 8008c62:	4619      	mov	r1, r3
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	887b      	ldrh	r3, [r7, #2]
 8008c68:	f000 fac4 	bl	80091f4 <TIM_DMA_Start_IT>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e0ba      	b.n	8008dec <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c84:	60da      	str	r2, [r3, #12]
      break;
 8008c86:	e04a      	b.n	8008d1e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	4a59      	ldr	r2, [pc, #356]	@ (8008df4 <HAL_TIM_IC_Start_DMA+0x3b4>)
 8008c8e:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c94:	4a58      	ldr	r2, [pc, #352]	@ (8008df8 <HAL_TIM_IC_Start_DMA+0x3b8>)
 8008c96:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	4a57      	ldr	r2, [pc, #348]	@ (8008dfc <HAL_TIM_IC_Start_DMA+0x3bc>)
 8008c9e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	333c      	adds	r3, #60	@ 0x3c
 8008caa:	4619      	mov	r1, r3
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	887b      	ldrh	r3, [r7, #2]
 8008cb0:	f000 faa0 	bl	80091f4 <TIM_DMA_Start_IT>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e096      	b.n	8008dec <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ccc:	60da      	str	r2, [r3, #12]
      break;
 8008cce:	e026      	b.n	8008d1e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd4:	4a47      	ldr	r2, [pc, #284]	@ (8008df4 <HAL_TIM_IC_Start_DMA+0x3b4>)
 8008cd6:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cdc:	4a46      	ldr	r2, [pc, #280]	@ (8008df8 <HAL_TIM_IC_Start_DMA+0x3b8>)
 8008cde:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce4:	4a45      	ldr	r2, [pc, #276]	@ (8008dfc <HAL_TIM_IC_Start_DMA+0x3bc>)
 8008ce6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3340      	adds	r3, #64	@ 0x40
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	887b      	ldrh	r3, [r7, #2]
 8008cf8:	f000 fa7c 	bl	80091f4 <TIM_DMA_Start_IT>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e072      	b.n	8008dec <HAL_TIM_IC_Start_DMA+0x3ac>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d14:	60da      	str	r2, [r3, #12]
      break;
 8008d16:	e002      	b.n	8008d1e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a37      	ldr	r2, [pc, #220]	@ (8008e00 <HAL_TIM_IC_Start_DMA+0x3c0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d040      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a35      	ldr	r2, [pc, #212]	@ (8008e04 <HAL_TIM_IC_Start_DMA+0x3c4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d03b      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d3a:	d036      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d44:	d031      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8008e08 <HAL_TIM_IC_Start_DMA+0x3c8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d02c      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a2d      	ldr	r2, [pc, #180]	@ (8008e0c <HAL_TIM_IC_Start_DMA+0x3cc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d027      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8008e10 <HAL_TIM_IC_Start_DMA+0x3d0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d022      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a2a      	ldr	r2, [pc, #168]	@ (8008e14 <HAL_TIM_IC_Start_DMA+0x3d4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d01d      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a29      	ldr	r2, [pc, #164]	@ (8008e18 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d018      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a27      	ldr	r2, [pc, #156]	@ (8008e1c <HAL_TIM_IC_Start_DMA+0x3dc>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d013      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a26      	ldr	r2, [pc, #152]	@ (8008e20 <HAL_TIM_IC_Start_DMA+0x3e0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d00e      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a24      	ldr	r2, [pc, #144]	@ (8008e24 <HAL_TIM_IC_Start_DMA+0x3e4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d009      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a23      	ldr	r2, [pc, #140]	@ (8008e28 <HAL_TIM_IC_Start_DMA+0x3e8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d004      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0x36a>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a21      	ldr	r2, [pc, #132]	@ (8008e2c <HAL_TIM_IC_Start_DMA+0x3ec>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d115      	bne.n	8008dd6 <HAL_TIM_IC_Start_DMA+0x396>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e30 <HAL_TIM_IC_Start_DMA+0x3f0>)
 8008db2:	4013      	ands	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b06      	cmp	r3, #6
 8008dba:	d015      	beq.n	8008de8 <HAL_TIM_IC_Start_DMA+0x3a8>
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dc2:	d011      	beq.n	8008de8 <HAL_TIM_IC_Start_DMA+0x3a8>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd4:	e008      	b.n	8008de8 <HAL_TIM_IC_Start_DMA+0x3a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0201 	orr.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e000      	b.n	8008dea <HAL_TIM_IC_Start_DMA+0x3aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de8:	bf00      	nop
  }

  /* Return function status */
  return status;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	08009339 	.word	0x08009339
 8008df8:	080093a1 	.word	0x080093a1
 8008dfc:	080092a7 	.word	0x080092a7
 8008e00:	40012c00 	.word	0x40012c00
 8008e04:	50012c00 	.word	0x50012c00
 8008e08:	40000400 	.word	0x40000400
 8008e0c:	50000400 	.word	0x50000400
 8008e10:	40000800 	.word	0x40000800
 8008e14:	50000800 	.word	0x50000800
 8008e18:	40000c00 	.word	0x40000c00
 8008e1c:	50000c00 	.word	0x50000c00
 8008e20:	40013400 	.word	0x40013400
 8008e24:	50013400 	.word	0x50013400
 8008e28:	40014000 	.word	0x40014000
 8008e2c:	50014000 	.word	0x50014000
 8008e30:	00010007 	.word	0x00010007

08008e34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d101      	bne.n	8008e52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e088      	b.n	8008f64 <HAL_TIM_IC_ConfigChannel+0x130>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d11b      	bne.n	8008e98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008e70:	f000 fc96 	bl	80097a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699a      	ldr	r2, [r3, #24]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 020c 	bic.w	r2, r2, #12
 8008e82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6999      	ldr	r1, [r3, #24]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	619a      	str	r2, [r3, #24]
 8008e96:	e060      	b.n	8008f5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d11c      	bne.n	8008ed8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008eae:	f000 fd3c 	bl	800992a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	699a      	ldr	r2, [r3, #24]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008ec0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6999      	ldr	r1, [r3, #24]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	021a      	lsls	r2, r3, #8
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	619a      	str	r2, [r3, #24]
 8008ed6:	e040      	b.n	8008f5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d11b      	bne.n	8008f16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008eee:	f000 fd89 	bl	8009a04 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 020c 	bic.w	r2, r2, #12
 8008f00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69d9      	ldr	r1, [r3, #28]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	61da      	str	r2, [r3, #28]
 8008f14:	e021      	b.n	8008f5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b0c      	cmp	r3, #12
 8008f1a:	d11c      	bne.n	8008f56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008f2c:	f000 fda6 	bl	8009a7c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008f3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	69d9      	ldr	r1, [r3, #28]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	021a      	lsls	r2, r3, #8
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	61da      	str	r2, [r3, #28]
 8008f54:	e001      	b.n	8008f5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_TIM_ConfigClockSource+0x1c>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e0e6      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x1ea>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008fa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a67      	ldr	r2, [pc, #412]	@ (8009160 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f000 80b1 	beq.w	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8008fc8:	4a65      	ldr	r2, [pc, #404]	@ (8009160 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	f200 80b6 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8008fd0:	4a64      	ldr	r2, [pc, #400]	@ (8009164 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f000 80a9 	beq.w	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8008fd8:	4a62      	ldr	r2, [pc, #392]	@ (8009164 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f200 80ae 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8008fe0:	4a61      	ldr	r2, [pc, #388]	@ (8009168 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f000 80a1 	beq.w	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8008fe8:	4a5f      	ldr	r2, [pc, #380]	@ (8009168 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	f200 80a6 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8008ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800916c <HAL_TIM_ConfigClockSource+0x200>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f000 8099 	beq.w	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8008ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800916c <HAL_TIM_ConfigClockSource+0x200>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	f200 809e 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8009000:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009004:	f000 8091 	beq.w	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8009008:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800900c:	f200 8096 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8009010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009014:	f000 8089 	beq.w	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8009018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800901c:	f200 808e 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8009020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009024:	d03e      	beq.n	80090a4 <HAL_TIM_ConfigClockSource+0x138>
 8009026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800902a:	f200 8087 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 800902e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009032:	f000 8086 	beq.w	8009142 <HAL_TIM_ConfigClockSource+0x1d6>
 8009036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903a:	d87f      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 800903c:	2b70      	cmp	r3, #112	@ 0x70
 800903e:	d01a      	beq.n	8009076 <HAL_TIM_ConfigClockSource+0x10a>
 8009040:	2b70      	cmp	r3, #112	@ 0x70
 8009042:	d87b      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8009044:	2b60      	cmp	r3, #96	@ 0x60
 8009046:	d050      	beq.n	80090ea <HAL_TIM_ConfigClockSource+0x17e>
 8009048:	2b60      	cmp	r3, #96	@ 0x60
 800904a:	d877      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 800904c:	2b50      	cmp	r3, #80	@ 0x50
 800904e:	d03c      	beq.n	80090ca <HAL_TIM_ConfigClockSource+0x15e>
 8009050:	2b50      	cmp	r3, #80	@ 0x50
 8009052:	d873      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8009054:	2b40      	cmp	r3, #64	@ 0x40
 8009056:	d058      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x19e>
 8009058:	2b40      	cmp	r3, #64	@ 0x40
 800905a:	d86f      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 800905c:	2b30      	cmp	r3, #48	@ 0x30
 800905e:	d064      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8009060:	2b30      	cmp	r3, #48	@ 0x30
 8009062:	d86b      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 8009064:	2b20      	cmp	r3, #32
 8009066:	d060      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8009068:	2b20      	cmp	r3, #32
 800906a:	d867      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d05c      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8009070:	2b10      	cmp	r3, #16
 8009072:	d05a      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x1be>
 8009074:	e062      	b.n	800913c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009086:	f000 fd53 	bl	8009b30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	609a      	str	r2, [r3, #8]
      break;
 80090a2:	e04f      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090b4:	f000 fd3c 	bl	8009b30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090c6:	609a      	str	r2, [r3, #8]
      break;
 80090c8:	e03c      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d6:	461a      	mov	r2, r3
 80090d8:	f000 fbf8 	bl	80098cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2150      	movs	r1, #80	@ 0x50
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fd07 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 80090e8:	e02c      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090f6:	461a      	mov	r2, r3
 80090f8:	f000 fc54 	bl	80099a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2160      	movs	r1, #96	@ 0x60
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fcf7 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 8009108:	e01c      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	461a      	mov	r2, r3
 8009118:	f000 fbd8 	bl	80098cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2140      	movs	r1, #64	@ 0x40
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fce7 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 8009128:	e00c      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f000 fcde 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 800913a:	e003      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	73fb      	strb	r3, [r7, #15]
      break;
 8009140:	e000      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	00100070 	.word	0x00100070
 8009164:	00100040 	.word	0x00100040
 8009168:	00100030 	.word	0x00100030
 800916c:	00100020 	.word	0x00100020

08009170 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009184:	2302      	movs	r3, #2
 8009186:	e031      	b.n	80091ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fa34 	bl	8009608 <TIM_SlaveTimer_SetConfig>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d009      	beq.n	80091ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e018      	b.n	80091ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800920a:	2b00      	cmp	r3, #0
 800920c:	d020      	beq.n	8009250 <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009212:	2b00      	cmp	r3, #0
 8009214:	d019      	beq.n	800924a <TIM_DMA_Start_IT+0x56>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d014      	beq.n	800924a <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7fa fa24 	bl	800368c <HAL_DMAEx_List_Start_IT>
 8009244:	4603      	mov	r3, r0
 8009246:	75fb      	strb	r3, [r7, #23]
 8009248:	e00a      	b.n	8009260 <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]
 800924e:	e007      	b.n	8009260 <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f7f9 feca 	bl	8002ff0 <HAL_DMA_Start_IT>
 800925c:	4603      	mov	r3, r0
 800925e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009260:	7dfb      	ldrb	r3, [r7, #23]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800929a:	bf00      	nop
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d107      	bne.n	80092ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092cc:	e02a      	b.n	8009324 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d107      	bne.n	80092e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2202      	movs	r2, #2
 80092dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092e6:	e01d      	b.n	8009324 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d107      	bne.n	8009302 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2204      	movs	r2, #4
 80092f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009300:	e010      	b.n	8009324 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	429a      	cmp	r2, r3
 800930a:	d107      	bne.n	800931c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2208      	movs	r2, #8
 8009310:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800931a:	e003      	b.n	8009324 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff ffb4 	bl	8009292 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
}
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009344:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	429a      	cmp	r2, r3
 800934e:	d103      	bne.n	8009358 <TIM_DMACaptureCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	771a      	strb	r2, [r3, #28]
 8009356:	e019      	b.n	800938c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d103      	bne.n	800936a <TIM_DMACaptureCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2202      	movs	r2, #2
 8009366:	771a      	strb	r2, [r3, #28]
 8009368:	e010      	b.n	800938c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d103      	bne.n	800937c <TIM_DMACaptureCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2204      	movs	r2, #4
 8009378:	771a      	strb	r2, [r3, #28]
 800937a:	e007      	b.n	800938c <TIM_DMACaptureCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	429a      	cmp	r2, r3
 8009384:	d102      	bne.n	800938c <TIM_DMACaptureCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2208      	movs	r2, #8
 800938a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff ff6c 	bl	800926a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	771a      	strb	r2, [r3, #28]
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d103      	bne.n	80093c0 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	771a      	strb	r2, [r3, #28]
 80093be:	e019      	b.n	80093f4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d103      	bne.n	80093d2 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2202      	movs	r2, #2
 80093ce:	771a      	strb	r2, [r3, #28]
 80093d0:	e010      	b.n	80093f4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d103      	bne.n	80093e4 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2204      	movs	r2, #4
 80093e0:	771a      	strb	r2, [r3, #28]
 80093e2:	e007      	b.n	80093f4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d102      	bne.n	80093f4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2208      	movs	r2, #8
 80093f2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f7ff ff42 	bl	800927e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	771a      	strb	r2, [r3, #28]
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a6b      	ldr	r2, [pc, #428]	@ (80095c8 <TIM_Base_SetConfig+0x1c0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d02b      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a6a      	ldr	r2, [pc, #424]	@ (80095cc <TIM_Base_SetConfig+0x1c4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d027      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800942e:	d023      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009436:	d01f      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a65      	ldr	r2, [pc, #404]	@ (80095d0 <TIM_Base_SetConfig+0x1c8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d01b      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a64      	ldr	r2, [pc, #400]	@ (80095d4 <TIM_Base_SetConfig+0x1cc>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d017      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a63      	ldr	r2, [pc, #396]	@ (80095d8 <TIM_Base_SetConfig+0x1d0>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d013      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a62      	ldr	r2, [pc, #392]	@ (80095dc <TIM_Base_SetConfig+0x1d4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00f      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a61      	ldr	r2, [pc, #388]	@ (80095e0 <TIM_Base_SetConfig+0x1d8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00b      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a60      	ldr	r2, [pc, #384]	@ (80095e4 <TIM_Base_SetConfig+0x1dc>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d007      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a5f      	ldr	r2, [pc, #380]	@ (80095e8 <TIM_Base_SetConfig+0x1e0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0x70>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a5e      	ldr	r2, [pc, #376]	@ (80095ec <TIM_Base_SetConfig+0x1e4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d108      	bne.n	800948a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a4e      	ldr	r2, [pc, #312]	@ (80095c8 <TIM_Base_SetConfig+0x1c0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d043      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a4d      	ldr	r2, [pc, #308]	@ (80095cc <TIM_Base_SetConfig+0x1c4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d03f      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094a0:	d03b      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094a8:	d037      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a48      	ldr	r2, [pc, #288]	@ (80095d0 <TIM_Base_SetConfig+0x1c8>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d033      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a47      	ldr	r2, [pc, #284]	@ (80095d4 <TIM_Base_SetConfig+0x1cc>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d02f      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a46      	ldr	r2, [pc, #280]	@ (80095d8 <TIM_Base_SetConfig+0x1d0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d02b      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a45      	ldr	r2, [pc, #276]	@ (80095dc <TIM_Base_SetConfig+0x1d4>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d027      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a44      	ldr	r2, [pc, #272]	@ (80095e0 <TIM_Base_SetConfig+0x1d8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d023      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a43      	ldr	r2, [pc, #268]	@ (80095e4 <TIM_Base_SetConfig+0x1dc>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01f      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a42      	ldr	r2, [pc, #264]	@ (80095e8 <TIM_Base_SetConfig+0x1e0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d01b      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a41      	ldr	r2, [pc, #260]	@ (80095ec <TIM_Base_SetConfig+0x1e4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d017      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a40      	ldr	r2, [pc, #256]	@ (80095f0 <TIM_Base_SetConfig+0x1e8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d013      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a3f      	ldr	r2, [pc, #252]	@ (80095f4 <TIM_Base_SetConfig+0x1ec>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00f      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a3e      	ldr	r2, [pc, #248]	@ (80095f8 <TIM_Base_SetConfig+0x1f0>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00b      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a3d      	ldr	r2, [pc, #244]	@ (80095fc <TIM_Base_SetConfig+0x1f4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d007      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a3c      	ldr	r2, [pc, #240]	@ (8009600 <TIM_Base_SetConfig+0x1f8>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d003      	beq.n	800951a <TIM_Base_SetConfig+0x112>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a3b      	ldr	r2, [pc, #236]	@ (8009604 <TIM_Base_SetConfig+0x1fc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d108      	bne.n	800952c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a1e      	ldr	r2, [pc, #120]	@ (80095c8 <TIM_Base_SetConfig+0x1c0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d023      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a1d      	ldr	r2, [pc, #116]	@ (80095cc <TIM_Base_SetConfig+0x1c4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d01f      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a22      	ldr	r2, [pc, #136]	@ (80095e8 <TIM_Base_SetConfig+0x1e0>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d01b      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a21      	ldr	r2, [pc, #132]	@ (80095ec <TIM_Base_SetConfig+0x1e4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d017      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a20      	ldr	r2, [pc, #128]	@ (80095f0 <TIM_Base_SetConfig+0x1e8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1f      	ldr	r2, [pc, #124]	@ (80095f4 <TIM_Base_SetConfig+0x1ec>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00f      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1e      	ldr	r2, [pc, #120]	@ (80095f8 <TIM_Base_SetConfig+0x1f0>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00b      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a1d      	ldr	r2, [pc, #116]	@ (80095fc <TIM_Base_SetConfig+0x1f4>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d007      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a1c      	ldr	r2, [pc, #112]	@ (8009600 <TIM_Base_SetConfig+0x1f8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_Base_SetConfig+0x192>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a1b      	ldr	r2, [pc, #108]	@ (8009604 <TIM_Base_SetConfig+0x1fc>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d103      	bne.n	80095a2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f043 0204 	orr.w	r2, r3, #4
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	601a      	str	r2, [r3, #0]
}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40012c00 	.word	0x40012c00
 80095cc:	50012c00 	.word	0x50012c00
 80095d0:	40000400 	.word	0x40000400
 80095d4:	50000400 	.word	0x50000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	50000800 	.word	0x50000800
 80095e0:	40000c00 	.word	0x40000c00
 80095e4:	50000c00 	.word	0x50000c00
 80095e8:	40013400 	.word	0x40013400
 80095ec:	50013400 	.word	0x50013400
 80095f0:	40014000 	.word	0x40014000
 80095f4:	50014000 	.word	0x50014000
 80095f8:	40014400 	.word	0x40014400
 80095fc:	50014400 	.word	0x50014400
 8009600:	40014800 	.word	0x40014800
 8009604:	50014800 	.word	0x50014800

08009608 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009628:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	4313      	orrs	r3, r2
 8009632:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800963a:	f023 0307 	bic.w	r3, r3, #7
 800963e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	4a4e      	ldr	r2, [pc, #312]	@ (8009790 <TIM_SlaveTimer_SetConfig+0x188>)
 8009658:	4293      	cmp	r3, r2
 800965a:	f000 8092 	beq.w	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 800965e:	4a4c      	ldr	r2, [pc, #304]	@ (8009790 <TIM_SlaveTimer_SetConfig+0x188>)
 8009660:	4293      	cmp	r3, r2
 8009662:	f200 808b 	bhi.w	800977c <TIM_SlaveTimer_SetConfig+0x174>
 8009666:	4a4b      	ldr	r2, [pc, #300]	@ (8009794 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	f000 808a 	beq.w	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 800966e:	4a49      	ldr	r2, [pc, #292]	@ (8009794 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	f200 8083 	bhi.w	800977c <TIM_SlaveTimer_SetConfig+0x174>
 8009676:	4a48      	ldr	r2, [pc, #288]	@ (8009798 <TIM_SlaveTimer_SetConfig+0x190>)
 8009678:	4293      	cmp	r3, r2
 800967a:	f000 8082 	beq.w	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 800967e:	4a46      	ldr	r2, [pc, #280]	@ (8009798 <TIM_SlaveTimer_SetConfig+0x190>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d87b      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 8009684:	4a45      	ldr	r2, [pc, #276]	@ (800979c <TIM_SlaveTimer_SetConfig+0x194>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d07b      	beq.n	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 800968a:	4a44      	ldr	r2, [pc, #272]	@ (800979c <TIM_SlaveTimer_SetConfig+0x194>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d875      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 8009690:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009694:	d075      	beq.n	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 8009696:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800969a:	d86f      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 800969c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096a0:	d06f      	beq.n	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 80096a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096a6:	d869      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 80096a8:	2b70      	cmp	r3, #112	@ 0x70
 80096aa:	d01a      	beq.n	80096e2 <TIM_SlaveTimer_SetConfig+0xda>
 80096ac:	2b70      	cmp	r3, #112	@ 0x70
 80096ae:	d865      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 80096b0:	2b60      	cmp	r3, #96	@ 0x60
 80096b2:	d059      	beq.n	8009768 <TIM_SlaveTimer_SetConfig+0x160>
 80096b4:	2b60      	cmp	r3, #96	@ 0x60
 80096b6:	d861      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 80096b8:	2b50      	cmp	r3, #80	@ 0x50
 80096ba:	d04b      	beq.n	8009754 <TIM_SlaveTimer_SetConfig+0x14c>
 80096bc:	2b50      	cmp	r3, #80	@ 0x50
 80096be:	d85d      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 80096c0:	2b40      	cmp	r3, #64	@ 0x40
 80096c2:	d019      	beq.n	80096f8 <TIM_SlaveTimer_SetConfig+0xf0>
 80096c4:	2b40      	cmp	r3, #64	@ 0x40
 80096c6:	d859      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 80096c8:	2b30      	cmp	r3, #48	@ 0x30
 80096ca:	d05a      	beq.n	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 80096cc:	2b30      	cmp	r3, #48	@ 0x30
 80096ce:	d855      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 80096d0:	2b20      	cmp	r3, #32
 80096d2:	d056      	beq.n	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d851      	bhi.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d052      	beq.n	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d050      	beq.n	8009782 <TIM_SlaveTimer_SetConfig+0x17a>
 80096e0:	e04c      	b.n	800977c <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80096f2:	f000 fa1d 	bl	8009b30 <TIM_ETR_SetConfig>
      break;
 80096f6:	e045      	b.n	8009784 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	d004      	beq.n	800970a <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009704:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009708:	d101      	bne.n	800970e <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e03b      	b.n	8009786 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6a1a      	ldr	r2, [r3, #32]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0201 	bic.w	r2, r2, #1
 8009724:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009734:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	4313      	orrs	r3, r2
 8009740:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	621a      	str	r2, [r3, #32]
      break;
 8009752:	e017      	b.n	8009784 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009760:	461a      	mov	r2, r3
 8009762:	f000 f8b3 	bl	80098cc <TIM_TI1_ConfigInputStage>
      break;
 8009766:	e00d      	b.n	8009784 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009774:	461a      	mov	r2, r3
 8009776:	f000 f915 	bl	80099a4 <TIM_TI2_ConfigInputStage>
      break;
 800977a:	e003      	b.n	8009784 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	75fb      	strb	r3, [r7, #23]
      break;
 8009780:	e000      	b.n	8009784 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8009782:	bf00      	nop
  }

  return status;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	00100070 	.word	0x00100070
 8009794:	00100040 	.word	0x00100040
 8009798:	00100030 	.word	0x00100030
 800979c:	00100020 	.word	0x00100020

080097a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	f023 0201 	bic.w	r2, r3, #1
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4a34      	ldr	r2, [pc, #208]	@ (800989c <TIM_TI1_SetConfig+0xfc>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d033      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4a33      	ldr	r2, [pc, #204]	@ (80098a0 <TIM_TI1_SetConfig+0x100>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d02f      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097dc:	d02b      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097e4:	d027      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4a2e      	ldr	r2, [pc, #184]	@ (80098a4 <TIM_TI1_SetConfig+0x104>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d023      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4a2d      	ldr	r2, [pc, #180]	@ (80098a8 <TIM_TI1_SetConfig+0x108>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d01f      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4a2c      	ldr	r2, [pc, #176]	@ (80098ac <TIM_TI1_SetConfig+0x10c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d01b      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4a2b      	ldr	r2, [pc, #172]	@ (80098b0 <TIM_TI1_SetConfig+0x110>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d017      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4a2a      	ldr	r2, [pc, #168]	@ (80098b4 <TIM_TI1_SetConfig+0x114>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d013      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4a29      	ldr	r2, [pc, #164]	@ (80098b8 <TIM_TI1_SetConfig+0x118>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d00f      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	4a28      	ldr	r2, [pc, #160]	@ (80098bc <TIM_TI1_SetConfig+0x11c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d00b      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4a27      	ldr	r2, [pc, #156]	@ (80098c0 <TIM_TI1_SetConfig+0x120>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d007      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4a26      	ldr	r2, [pc, #152]	@ (80098c4 <TIM_TI1_SetConfig+0x124>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d003      	beq.n	8009836 <TIM_TI1_SetConfig+0x96>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	4a25      	ldr	r2, [pc, #148]	@ (80098c8 <TIM_TI1_SetConfig+0x128>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d101      	bne.n	800983a <TIM_TI1_SetConfig+0x9a>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <TIM_TI1_SetConfig+0x9c>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d008      	beq.n	8009852 <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e003      	b.n	800985a <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f043 0301 	orr.w	r3, r3, #1
 8009858:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	b2db      	uxtb	r3, r3
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f023 030a 	bic.w	r3, r3, #10
 8009874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f003 030a 	and.w	r3, r3, #10
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	621a      	str	r2, [r3, #32]
}
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	40012c00 	.word	0x40012c00
 80098a0:	50012c00 	.word	0x50012c00
 80098a4:	40000400 	.word	0x40000400
 80098a8:	50000400 	.word	0x50000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	50000800 	.word	0x50000800
 80098b4:	40000c00 	.word	0x40000c00
 80098b8:	50000c00 	.word	0x50000c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	50013400 	.word	0x50013400
 80098c4:	40014000 	.word	0x40014000
 80098c8:	50014000 	.word	0x50014000

080098cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	f023 0201 	bic.w	r2, r3, #1
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f023 030a 	bic.w	r3, r3, #10
 8009908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	621a      	str	r2, [r3, #32]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800992a:	b480      	push	{r7}
 800992c:	b087      	sub	sp, #28
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	f023 0210 	bic.w	r2, r3, #16
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	021b      	lsls	r3, r3, #8
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4313      	orrs	r3, r2
 8009960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	031b      	lsls	r3, r3, #12
 800996e:	b29b      	uxth	r3, r3
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800997c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	621a      	str	r2, [r3, #32]
}
 8009998:	bf00      	nop
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	f023 0210 	bic.w	r2, r3, #16
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80099ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	031b      	lsls	r3, r3, #12
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80099e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	621a      	str	r2, [r3, #32]
}
 80099f8:	bf00      	nop
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	f023 0303 	bic.w	r3, r3, #3
 8009a30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a40:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009a54:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	621a      	str	r2, [r3, #32]
}
 8009a70:	bf00      	nop
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aa8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009aba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	031b      	lsls	r3, r3, #12
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009ace:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	031b      	lsls	r3, r3, #12
 8009ad4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	621a      	str	r2, [r3, #32]
}
 8009aea:	bf00      	nop
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b085      	sub	sp, #20
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f043 0307 	orr.w	r3, r3, #7
 8009b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	609a      	str	r2, [r3, #8]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	021a      	lsls	r2, r3, #8
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	431a      	orrs	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	609a      	str	r2, [r3, #8]
}
 8009b64:	bf00      	nop
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b087      	sub	sp, #28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 031f 	and.w	r3, r3, #31
 8009b82:	2201      	movs	r2, #1
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a1a      	ldr	r2, [r3, #32]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	43db      	mvns	r3, r3
 8009b92:	401a      	ands	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6a1a      	ldr	r2, [r3, #32]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f003 031f 	and.w	r3, r3, #31
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	621a      	str	r2, [r3, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d101      	bne.n	8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e097      	b.n	8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2202      	movs	r2, #2
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a45      	ldr	r2, [pc, #276]	@ (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00e      	beq.n	8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a44      	ldr	r2, [pc, #272]	@ (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d009      	beq.n	8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a42      	ldr	r2, [pc, #264]	@ (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d004      	beq.n	8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a41      	ldr	r2, [pc, #260]	@ (8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d108      	bne.n	8009c2e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a2f      	ldr	r2, [pc, #188]	@ (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d040      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d03b      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c68:	d036      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c72:	d031      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a29      	ldr	r2, [pc, #164]	@ (8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d02c      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a28      	ldr	r2, [pc, #160]	@ (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d027      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a26      	ldr	r2, [pc, #152]	@ (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d022      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a25      	ldr	r2, [pc, #148]	@ (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d01d      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a23      	ldr	r2, [pc, #140]	@ (8009d30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d018      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a22      	ldr	r2, [pc, #136]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d013      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a18      	ldr	r2, [pc, #96]	@ (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d00e      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a17      	ldr	r2, [pc, #92]	@ (8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d009      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d004      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d10c      	bne.n	8009cf2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	40012c00 	.word	0x40012c00
 8009d14:	50012c00 	.word	0x50012c00
 8009d18:	40013400 	.word	0x40013400
 8009d1c:	50013400 	.word	0x50013400
 8009d20:	40000400 	.word	0x40000400
 8009d24:	50000400 	.word	0x50000400
 8009d28:	40000800 	.word	0x40000800
 8009d2c:	50000800 	.word	0x50000800
 8009d30:	40000c00 	.word	0x40000c00
 8009d34:	50000c00 	.word	0x50000c00
 8009d38:	40014000 	.word	0x40014000
 8009d3c:	50014000 	.word	0x50014000

08009d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e042      	b.n	8009dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d106      	bne.n	8009d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7f8 fce5 	bl	8002734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2224      	movs	r2, #36	@ 0x24
 8009d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0201 	bic.w	r2, r2, #1
 8009d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f9c0 	bl	800a110 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f825 	bl	8009de0 <UART_SetConfig>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d101      	bne.n	8009da0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e01b      	b.n	8009dd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0201 	orr.w	r2, r2, #1
 8009dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fa3f 	bl	800a254 <UART_CheckIdleState>
 8009dd6:	4603      	mov	r3, r0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009de4:	b094      	sub	sp, #80	@ 0x50
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	4b9b      	ldr	r3, [pc, #620]	@ (800a064 <UART_SetConfig+0x284>)
 8009df6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	431a      	orrs	r2, r3
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	431a      	orrs	r2, r3
 8009e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4994      	ldr	r1, [pc, #592]	@ (800a068 <UART_SetConfig+0x288>)
 8009e18:	4019      	ands	r1, r3
 8009e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e20:	430b      	orrs	r3, r1
 8009e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e30:	68d9      	ldr	r1, [r3, #12]
 8009e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	ea40 0301 	orr.w	r3, r0, r1
 8009e3a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4b87      	ldr	r3, [pc, #540]	@ (800a064 <UART_SetConfig+0x284>)
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d009      	beq.n	8009e60 <UART_SetConfig+0x80>
 8009e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	4b86      	ldr	r3, [pc, #536]	@ (800a06c <UART_SetConfig+0x28c>)
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d004      	beq.n	8009e60 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e58:	6a1a      	ldr	r2, [r3, #32]
 8009e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009e6a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e74:	430b      	orrs	r3, r1
 8009e76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7e:	f023 000f 	bic.w	r0, r3, #15
 8009e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e84:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	ea40 0301 	orr.w	r3, r0, r1
 8009e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b76      	ldr	r3, [pc, #472]	@ (800a070 <UART_SetConfig+0x290>)
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d102      	bne.n	8009ea0 <UART_SetConfig+0xc0>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e9e:	e021      	b.n	8009ee4 <UART_SetConfig+0x104>
 8009ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	4b73      	ldr	r3, [pc, #460]	@ (800a074 <UART_SetConfig+0x294>)
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d102      	bne.n	8009eb0 <UART_SetConfig+0xd0>
 8009eaa:	2304      	movs	r3, #4
 8009eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eae:	e019      	b.n	8009ee4 <UART_SetConfig+0x104>
 8009eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	4b70      	ldr	r3, [pc, #448]	@ (800a078 <UART_SetConfig+0x298>)
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d102      	bne.n	8009ec0 <UART_SetConfig+0xe0>
 8009eba:	2308      	movs	r3, #8
 8009ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ebe:	e011      	b.n	8009ee4 <UART_SetConfig+0x104>
 8009ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800a07c <UART_SetConfig+0x29c>)
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d102      	bne.n	8009ed0 <UART_SetConfig+0xf0>
 8009eca:	2310      	movs	r3, #16
 8009ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ece:	e009      	b.n	8009ee4 <UART_SetConfig+0x104>
 8009ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4b63      	ldr	r3, [pc, #396]	@ (800a064 <UART_SetConfig+0x284>)
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d102      	bne.n	8009ee0 <UART_SetConfig+0x100>
 8009eda:	2320      	movs	r3, #32
 8009edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ede:	e001      	b.n	8009ee4 <UART_SetConfig+0x104>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	4b5e      	ldr	r3, [pc, #376]	@ (800a064 <UART_SetConfig+0x284>)
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d004      	beq.n	8009ef8 <UART_SetConfig+0x118>
 8009eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800a06c <UART_SetConfig+0x28c>)
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d172      	bne.n	8009fde <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009efa:	2200      	movs	r2, #0
 8009efc:	623b      	str	r3, [r7, #32]
 8009efe:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009f04:	f7fd f9d8 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f08:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80e7 	beq.w	800a0e0 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f16:	4a5a      	ldr	r2, [pc, #360]	@ (800a080 <UART_SetConfig+0x2a0>)
 8009f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f24:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	005b      	lsls	r3, r3, #1
 8009f2e:	4413      	add	r3, r2
 8009f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d305      	bcc.n	8009f42 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d903      	bls.n	8009f4a <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009f48:	e048      	b.n	8009fdc <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	61bb      	str	r3, [r7, #24]
 8009f50:	61fa      	str	r2, [r7, #28]
 8009f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f56:	4a4a      	ldr	r2, [pc, #296]	@ (800a080 <UART_SetConfig+0x2a0>)
 8009f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2200      	movs	r2, #0
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	617a      	str	r2, [r7, #20]
 8009f64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f6c:	f7f6 fe90 	bl	8000c90 <__aeabi_uldivmod>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4610      	mov	r0, r2
 8009f76:	4619      	mov	r1, r3
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	f04f 0300 	mov.w	r3, #0
 8009f80:	020b      	lsls	r3, r1, #8
 8009f82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f86:	0202      	lsls	r2, r0, #8
 8009f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f8a:	6849      	ldr	r1, [r1, #4]
 8009f8c:	0849      	lsrs	r1, r1, #1
 8009f8e:	2000      	movs	r0, #0
 8009f90:	460c      	mov	r4, r1
 8009f92:	4605      	mov	r5, r0
 8009f94:	eb12 0804 	adds.w	r8, r2, r4
 8009f98:	eb43 0905 	adc.w	r9, r3, r5
 8009f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	60bb      	str	r3, [r7, #8]
 8009fa4:	60fa      	str	r2, [r7, #12]
 8009fa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009faa:	4640      	mov	r0, r8
 8009fac:	4649      	mov	r1, r9
 8009fae:	f7f6 fe6f 	bl	8000c90 <__aeabi_uldivmod>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fc0:	d308      	bcc.n	8009fd4 <UART_SetConfig+0x1f4>
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc8:	d204      	bcs.n	8009fd4 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	e003      	b.n	8009fdc <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009fda:	e081      	b.n	800a0e0 <UART_SetConfig+0x300>
 8009fdc:	e080      	b.n	800a0e0 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fe6:	d14d      	bne.n	800a084 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fea:	2200      	movs	r2, #0
 8009fec:	603b      	str	r3, [r7, #0]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ff4:	f7fd f960 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ff8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d06f      	beq.n	800a0e0 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a004:	4a1e      	ldr	r2, [pc, #120]	@ (800a080 <UART_SetConfig+0x2a0>)
 800a006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a00e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a012:	005a      	lsls	r2, r3, #1
 800a014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	085b      	lsrs	r3, r3, #1
 800a01a:	441a      	add	r2, r3
 800a01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	fbb2 f3f3 	udiv	r3, r2, r3
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a028:	2b0f      	cmp	r3, #15
 800a02a:	d916      	bls.n	800a05a <UART_SetConfig+0x27a>
 800a02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a032:	d212      	bcs.n	800a05a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a036:	b29b      	uxth	r3, r3
 800a038:	f023 030f 	bic.w	r3, r3, #15
 800a03c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a040:	085b      	lsrs	r3, r3, #1
 800a042:	b29b      	uxth	r3, r3
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	b29a      	uxth	r2, r3
 800a04a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a04c:	4313      	orrs	r3, r2
 800a04e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a056:	60da      	str	r2, [r3, #12]
 800a058:	e042      	b.n	800a0e0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a060:	e03e      	b.n	800a0e0 <UART_SetConfig+0x300>
 800a062:	bf00      	nop
 800a064:	46002400 	.word	0x46002400
 800a068:	cfff69f3 	.word	0xcfff69f3
 800a06c:	56002400 	.word	0x56002400
 800a070:	40013800 	.word	0x40013800
 800a074:	40004800 	.word	0x40004800
 800a078:	40004c00 	.word	0x40004c00
 800a07c:	40005000 	.word	0x40005000
 800a080:	0800f058 	.word	0x0800f058
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a086:	2200      	movs	r2, #0
 800a088:	469a      	mov	sl, r3
 800a08a:	4693      	mov	fp, r2
 800a08c:	4650      	mov	r0, sl
 800a08e:	4659      	mov	r1, fp
 800a090:	f7fd f912 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a094:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d021      	beq.n	800a0e0 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a10c <UART_SetConfig+0x32c>)
 800a0a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	085b      	lsrs	r3, r3, #1
 800a0b4:	441a      	add	r2, r3
 800a0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c2:	2b0f      	cmp	r3, #15
 800a0c4:	d909      	bls.n	800a0da <UART_SetConfig+0x2fa>
 800a0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0cc:	d205      	bcs.n	800a0da <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60da      	str	r2, [r3, #12]
 800a0d8:	e002      	b.n	800a0e0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a0fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a100:	4618      	mov	r0, r3
 800a102:	3750      	adds	r7, #80	@ 0x50
 800a104:	46bd      	mov	sp, r7
 800a106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a10a:	bf00      	nop
 800a10c:	0800f058 	.word	0x0800f058

0800a110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00a      	beq.n	800a13a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	430a      	orrs	r2, r1
 800a15a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00a      	beq.n	800a17e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c6:	f003 0320 	and.w	r3, r3, #32
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01a      	beq.n	800a226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a20a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a20e:	d10a      	bne.n	800a226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	605a      	str	r2, [r3, #4]
  }
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b098      	sub	sp, #96	@ 0x60
 800a258:	af02      	add	r7, sp, #8
 800a25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a264:	f7f8 fd00 	bl	8002c68 <HAL_GetTick>
 800a268:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0308 	and.w	r3, r3, #8
 800a274:	2b08      	cmp	r3, #8
 800a276:	d12f      	bne.n	800a2d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a278:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a280:	2200      	movs	r2, #0
 800a282:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f88e 	bl	800a3a8 <UART_WaitOnFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d022      	beq.n	800a2d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e6      	bne.n	800a292 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e063      	b.n	800a3a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d149      	bne.n	800a37a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f857 	bl	800a3a8 <UART_WaitOnFlagUntilTimeout>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d03c      	beq.n	800a37a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	623b      	str	r3, [r7, #32]
   return(result);
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a31e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a320:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e6      	bne.n	800a300 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	60fb      	str	r3, [r7, #12]
   return(result);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3308      	adds	r3, #8
 800a350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a352:	61fa      	str	r2, [r7, #28]
 800a354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	69b9      	ldr	r1, [r7, #24]
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	617b      	str	r3, [r7, #20]
   return(result);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e5      	bne.n	800a332 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2220      	movs	r2, #32
 800a36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e012      	b.n	800a3a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2220      	movs	r2, #32
 800a386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3758      	adds	r7, #88	@ 0x58
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3b8:	e04f      	b.n	800a45a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c0:	d04b      	beq.n	800a45a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3c2:	f7f8 fc51 	bl	8002c68 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	69ba      	ldr	r2, [r7, #24]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d302      	bcc.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e04e      	b.n	800a47a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0304 	and.w	r3, r3, #4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d037      	beq.n	800a45a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b80      	cmp	r3, #128	@ 0x80
 800a3ee:	d034      	beq.n	800a45a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b40      	cmp	r3, #64	@ 0x40
 800a3f4:	d031      	beq.n	800a45a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	f003 0308 	and.w	r3, r3, #8
 800a400:	2b08      	cmp	r3, #8
 800a402:	d110      	bne.n	800a426 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2208      	movs	r2, #8
 800a40a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f000 f838 	bl	800a482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2208      	movs	r2, #8
 800a416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e029      	b.n	800a47a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a434:	d111      	bne.n	800a45a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a43e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f81e 	bl	800a482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2220      	movs	r2, #32
 800a44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	e00f      	b.n	800a47a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69da      	ldr	r2, [r3, #28]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4013      	ands	r3, r2
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	429a      	cmp	r2, r3
 800a468:	bf0c      	ite	eq
 800a46a:	2301      	moveq	r3, #1
 800a46c:	2300      	movne	r3, #0
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	461a      	mov	r2, r3
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	429a      	cmp	r2, r3
 800a476:	d0a0      	beq.n	800a3ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a482:	b480      	push	{r7}
 800a484:	b095      	sub	sp, #84	@ 0x54
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e6      	bne.n	800a48a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4d2:	f023 0301 	bic.w	r3, r3, #1
 800a4d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3308      	adds	r3, #8
 800a4de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e3      	bne.n	800a4bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d118      	bne.n	800a52e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	60bb      	str	r3, [r7, #8]
   return(result);
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f023 0310 	bic.w	r3, r3, #16
 800a510:	647b      	str	r3, [r7, #68]	@ 0x44
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a51a:	61bb      	str	r3, [r7, #24]
 800a51c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	6979      	ldr	r1, [r7, #20]
 800a520:	69ba      	ldr	r2, [r7, #24]
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	613b      	str	r3, [r7, #16]
   return(result);
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e6      	bne.n	800a4fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a542:	bf00      	nop
 800a544:	3754      	adds	r7, #84	@ 0x54
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a54e:	b480      	push	{r7}
 800a550:	b085      	sub	sp, #20
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_UARTEx_DisableFifoMode+0x16>
 800a560:	2302      	movs	r3, #2
 800a562:	e027      	b.n	800a5b4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2224      	movs	r2, #36	@ 0x24
 800a570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0201 	bic.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d101      	bne.n	800a5d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e02d      	b.n	800a634 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2224      	movs	r2, #36	@ 0x24
 800a5e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f022 0201 	bic.w	r2, r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f84f 	bl	800a6b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2220      	movs	r2, #32
 800a626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d101      	bne.n	800a654 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a650:	2302      	movs	r3, #2
 800a652:	e02d      	b.n	800a6b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2224      	movs	r2, #36	@ 0x24
 800a660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f022 0201 	bic.w	r2, r2, #1
 800a67a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f811 	bl	800a6b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d108      	bne.n	800a6da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6d8:	e031      	b.n	800a73e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6da:	2308      	movs	r3, #8
 800a6dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6de:	2308      	movs	r3, #8
 800a6e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	0e5b      	lsrs	r3, r3, #25
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 0307 	and.w	r3, r3, #7
 800a6f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	0f5b      	lsrs	r3, r3, #29
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 0307 	and.w	r3, r3, #7
 800a700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a702:	7bbb      	ldrb	r3, [r7, #14]
 800a704:	7b3a      	ldrb	r2, [r7, #12]
 800a706:	4911      	ldr	r1, [pc, #68]	@ (800a74c <UARTEx_SetNbDataToProcess+0x94>)
 800a708:	5c8a      	ldrb	r2, [r1, r2]
 800a70a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a70e:	7b3a      	ldrb	r2, [r7, #12]
 800a710:	490f      	ldr	r1, [pc, #60]	@ (800a750 <UARTEx_SetNbDataToProcess+0x98>)
 800a712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a714:	fb93 f3f2 	sdiv	r3, r3, r2
 800a718:	b29a      	uxth	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	7b7a      	ldrb	r2, [r7, #13]
 800a724:	4909      	ldr	r1, [pc, #36]	@ (800a74c <UARTEx_SetNbDataToProcess+0x94>)
 800a726:	5c8a      	ldrb	r2, [r1, r2]
 800a728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a72c:	7b7a      	ldrb	r2, [r7, #13]
 800a72e:	4908      	ldr	r1, [pc, #32]	@ (800a750 <UARTEx_SetNbDataToProcess+0x98>)
 800a730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a732:	fb93 f3f2 	sdiv	r3, r3, r2
 800a736:	b29a      	uxth	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a73e:	bf00      	nop
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	0800f070 	.word	0x0800f070
 800a750:	0800f078 	.word	0x0800f078

0800a754 <__cvt>:
 800a754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a758:	ec57 6b10 	vmov	r6, r7, d0
 800a75c:	2f00      	cmp	r7, #0
 800a75e:	460c      	mov	r4, r1
 800a760:	4619      	mov	r1, r3
 800a762:	463b      	mov	r3, r7
 800a764:	bfb4      	ite	lt
 800a766:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a76a:	2300      	movge	r3, #0
 800a76c:	4691      	mov	r9, r2
 800a76e:	bfbf      	itttt	lt
 800a770:	4632      	movlt	r2, r6
 800a772:	461f      	movlt	r7, r3
 800a774:	232d      	movlt	r3, #45	@ 0x2d
 800a776:	4616      	movlt	r6, r2
 800a778:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a77c:	700b      	strb	r3, [r1, #0]
 800a77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a780:	f023 0820 	bic.w	r8, r3, #32
 800a784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a788:	d005      	beq.n	800a796 <__cvt+0x42>
 800a78a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a78e:	d100      	bne.n	800a792 <__cvt+0x3e>
 800a790:	3401      	adds	r4, #1
 800a792:	2102      	movs	r1, #2
 800a794:	e000      	b.n	800a798 <__cvt+0x44>
 800a796:	2103      	movs	r1, #3
 800a798:	ab03      	add	r3, sp, #12
 800a79a:	4622      	mov	r2, r4
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	ab02      	add	r3, sp, #8
 800a7a0:	ec47 6b10 	vmov	d0, r6, r7
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	4653      	mov	r3, sl
 800a7a8:	f001 f89a 	bl	800b8e0 <_dtoa_r>
 800a7ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	d119      	bne.n	800a7e8 <__cvt+0x94>
 800a7b4:	f019 0f01 	tst.w	r9, #1
 800a7b8:	d00e      	beq.n	800a7d8 <__cvt+0x84>
 800a7ba:	eb00 0904 	add.w	r9, r0, r4
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	f7f6 f983 	bl	8000ad0 <__aeabi_dcmpeq>
 800a7ca:	b108      	cbz	r0, 800a7d0 <__cvt+0x7c>
 800a7cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7d0:	2230      	movs	r2, #48	@ 0x30
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	454b      	cmp	r3, r9
 800a7d6:	d31e      	bcc.n	800a816 <__cvt+0xc2>
 800a7d8:	9b03      	ldr	r3, [sp, #12]
 800a7da:	4628      	mov	r0, r5
 800a7dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7de:	1b5b      	subs	r3, r3, r5
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	b004      	add	sp, #16
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7ec:	eb00 0904 	add.w	r9, r0, r4
 800a7f0:	d1e5      	bne.n	800a7be <__cvt+0x6a>
 800a7f2:	7803      	ldrb	r3, [r0, #0]
 800a7f4:	2b30      	cmp	r3, #48	@ 0x30
 800a7f6:	d10a      	bne.n	800a80e <__cvt+0xba>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f6 f966 	bl	8000ad0 <__aeabi_dcmpeq>
 800a804:	b918      	cbnz	r0, 800a80e <__cvt+0xba>
 800a806:	f1c4 0401 	rsb	r4, r4, #1
 800a80a:	f8ca 4000 	str.w	r4, [sl]
 800a80e:	f8da 3000 	ldr.w	r3, [sl]
 800a812:	4499      	add	r9, r3
 800a814:	e7d3      	b.n	800a7be <__cvt+0x6a>
 800a816:	1c59      	adds	r1, r3, #1
 800a818:	9103      	str	r1, [sp, #12]
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	e7d9      	b.n	800a7d2 <__cvt+0x7e>

0800a81e <__exponent>:
 800a81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a820:	2900      	cmp	r1, #0
 800a822:	7002      	strb	r2, [r0, #0]
 800a824:	bfba      	itte	lt
 800a826:	4249      	neglt	r1, r1
 800a828:	232d      	movlt	r3, #45	@ 0x2d
 800a82a:	232b      	movge	r3, #43	@ 0x2b
 800a82c:	2909      	cmp	r1, #9
 800a82e:	7043      	strb	r3, [r0, #1]
 800a830:	dd28      	ble.n	800a884 <__exponent+0x66>
 800a832:	f10d 0307 	add.w	r3, sp, #7
 800a836:	270a      	movs	r7, #10
 800a838:	461d      	mov	r5, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	fbb1 f6f7 	udiv	r6, r1, r7
 800a842:	fb07 1416 	mls	r4, r7, r6, r1
 800a846:	3430      	adds	r4, #48	@ 0x30
 800a848:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a84c:	460c      	mov	r4, r1
 800a84e:	4631      	mov	r1, r6
 800a850:	2c63      	cmp	r4, #99	@ 0x63
 800a852:	dcf2      	bgt.n	800a83a <__exponent+0x1c>
 800a854:	3130      	adds	r1, #48	@ 0x30
 800a856:	1e94      	subs	r4, r2, #2
 800a858:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a85c:	1c41      	adds	r1, r0, #1
 800a85e:	4623      	mov	r3, r4
 800a860:	42ab      	cmp	r3, r5
 800a862:	d30a      	bcc.n	800a87a <__exponent+0x5c>
 800a864:	f10d 0309 	add.w	r3, sp, #9
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	42ac      	cmp	r4, r5
 800a86c:	bf88      	it	hi
 800a86e:	2300      	movhi	r3, #0
 800a870:	3302      	adds	r3, #2
 800a872:	4403      	add	r3, r0
 800a874:	1a18      	subs	r0, r3, r0
 800a876:	b003      	add	sp, #12
 800a878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a87e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a882:	e7ed      	b.n	800a860 <__exponent+0x42>
 800a884:	2330      	movs	r3, #48	@ 0x30
 800a886:	3130      	adds	r1, #48	@ 0x30
 800a888:	7083      	strb	r3, [r0, #2]
 800a88a:	1d03      	adds	r3, r0, #4
 800a88c:	70c1      	strb	r1, [r0, #3]
 800a88e:	e7f1      	b.n	800a874 <__exponent+0x56>

0800a890 <_printf_float>:
 800a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	b08d      	sub	sp, #52	@ 0x34
 800a896:	460c      	mov	r4, r1
 800a898:	4616      	mov	r6, r2
 800a89a:	461f      	mov	r7, r3
 800a89c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	f000 ff03 	bl	800b6ac <_localeconv_r>
 800a8a6:	6803      	ldr	r3, [r0, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	f7f5 fce4 	bl	8000278 <strlen>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9005      	str	r0, [sp, #20]
 800a8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ba:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8be:	3307      	adds	r3, #7
 800a8c0:	f8d4 b000 	ldr.w	fp, [r4]
 800a8c4:	f023 0307 	bic.w	r3, r3, #7
 800a8c8:	f103 0208 	add.w	r2, r3, #8
 800a8cc:	f8c8 2000 	str.w	r2, [r8]
 800a8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a8dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8e0:	9307      	str	r3, [sp, #28]
 800a8e2:	4b9d      	ldr	r3, [pc, #628]	@ (800ab58 <_printf_float+0x2c8>)
 800a8e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a8ec:	f7f6 f922 	bl	8000b34 <__aeabi_dcmpun>
 800a8f0:	bb70      	cbnz	r0, 800a950 <_printf_float+0xc0>
 800a8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f6:	4b98      	ldr	r3, [pc, #608]	@ (800ab58 <_printf_float+0x2c8>)
 800a8f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8fc:	f7f6 f8fc 	bl	8000af8 <__aeabi_dcmple>
 800a900:	bb30      	cbnz	r0, 800a950 <_printf_float+0xc0>
 800a902:	2200      	movs	r2, #0
 800a904:	2300      	movs	r3, #0
 800a906:	4640      	mov	r0, r8
 800a908:	4649      	mov	r1, r9
 800a90a:	f7f6 f8eb 	bl	8000ae4 <__aeabi_dcmplt>
 800a90e:	b110      	cbz	r0, 800a916 <_printf_float+0x86>
 800a910:	232d      	movs	r3, #45	@ 0x2d
 800a912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a916:	4a91      	ldr	r2, [pc, #580]	@ (800ab5c <_printf_float+0x2cc>)
 800a918:	4b91      	ldr	r3, [pc, #580]	@ (800ab60 <_printf_float+0x2d0>)
 800a91a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a91e:	bf94      	ite	ls
 800a920:	4690      	movls	r8, r2
 800a922:	4698      	movhi	r8, r3
 800a924:	2303      	movs	r3, #3
 800a926:	f04f 0900 	mov.w	r9, #0
 800a92a:	6123      	str	r3, [r4, #16]
 800a92c:	f02b 0304 	bic.w	r3, fp, #4
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	4633      	mov	r3, r6
 800a934:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	9700      	str	r7, [sp, #0]
 800a93c:	f000 f9d2 	bl	800ace4 <_printf_common>
 800a940:	3001      	adds	r0, #1
 800a942:	f040 808d 	bne.w	800aa60 <_printf_float+0x1d0>
 800a946:	f04f 30ff 	mov.w	r0, #4294967295
 800a94a:	b00d      	add	sp, #52	@ 0x34
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	4642      	mov	r2, r8
 800a952:	464b      	mov	r3, r9
 800a954:	4640      	mov	r0, r8
 800a956:	4649      	mov	r1, r9
 800a958:	f7f6 f8ec 	bl	8000b34 <__aeabi_dcmpun>
 800a95c:	b140      	cbz	r0, 800a970 <_printf_float+0xe0>
 800a95e:	464b      	mov	r3, r9
 800a960:	4a80      	ldr	r2, [pc, #512]	@ (800ab64 <_printf_float+0x2d4>)
 800a962:	2b00      	cmp	r3, #0
 800a964:	bfbc      	itt	lt
 800a966:	232d      	movlt	r3, #45	@ 0x2d
 800a968:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a96c:	4b7e      	ldr	r3, [pc, #504]	@ (800ab68 <_printf_float+0x2d8>)
 800a96e:	e7d4      	b.n	800a91a <_printf_float+0x8a>
 800a970:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a974:	6863      	ldr	r3, [r4, #4]
 800a976:	9206      	str	r2, [sp, #24]
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	d13b      	bne.n	800a9f4 <_printf_float+0x164>
 800a97c:	2306      	movs	r3, #6
 800a97e:	6063      	str	r3, [r4, #4]
 800a980:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a984:	2300      	movs	r3, #0
 800a986:	4628      	mov	r0, r5
 800a988:	6022      	str	r2, [r4, #0]
 800a98a:	9303      	str	r3, [sp, #12]
 800a98c:	ab0a      	add	r3, sp, #40	@ 0x28
 800a98e:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a992:	ab09      	add	r3, sp, #36	@ 0x24
 800a994:	ec49 8b10 	vmov	d0, r8, r9
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a99e:	6861      	ldr	r1, [r4, #4]
 800a9a0:	f7ff fed8 	bl	800a754 <__cvt>
 800a9a4:	9b06      	ldr	r3, [sp, #24]
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9aa:	2b47      	cmp	r3, #71	@ 0x47
 800a9ac:	d129      	bne.n	800aa02 <_printf_float+0x172>
 800a9ae:	1cc8      	adds	r0, r1, #3
 800a9b0:	db02      	blt.n	800a9b8 <_printf_float+0x128>
 800a9b2:	6863      	ldr	r3, [r4, #4]
 800a9b4:	4299      	cmp	r1, r3
 800a9b6:	dd41      	ble.n	800aa3c <_printf_float+0x1ac>
 800a9b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a9bc:	fa5f fa8a 	uxtb.w	sl, sl
 800a9c0:	3901      	subs	r1, #1
 800a9c2:	4652      	mov	r2, sl
 800a9c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9ca:	f7ff ff28 	bl	800a81e <__exponent>
 800a9ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9d0:	4681      	mov	r9, r0
 800a9d2:	1813      	adds	r3, r2, r0
 800a9d4:	2a01      	cmp	r2, #1
 800a9d6:	6123      	str	r3, [r4, #16]
 800a9d8:	dc02      	bgt.n	800a9e0 <_printf_float+0x150>
 800a9da:	6822      	ldr	r2, [r4, #0]
 800a9dc:	07d2      	lsls	r2, r2, #31
 800a9de:	d501      	bpl.n	800a9e4 <_printf_float+0x154>
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0a2      	beq.n	800a932 <_printf_float+0xa2>
 800a9ec:	232d      	movs	r3, #45	@ 0x2d
 800a9ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9f2:	e79e      	b.n	800a932 <_printf_float+0xa2>
 800a9f4:	9a06      	ldr	r2, [sp, #24]
 800a9f6:	2a47      	cmp	r2, #71	@ 0x47
 800a9f8:	d1c2      	bne.n	800a980 <_printf_float+0xf0>
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1c0      	bne.n	800a980 <_printf_float+0xf0>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e7bd      	b.n	800a97e <_printf_float+0xee>
 800aa02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa06:	d9db      	bls.n	800a9c0 <_printf_float+0x130>
 800aa08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa0c:	d118      	bne.n	800aa40 <_printf_float+0x1b0>
 800aa0e:	2900      	cmp	r1, #0
 800aa10:	6863      	ldr	r3, [r4, #4]
 800aa12:	dd0b      	ble.n	800aa2c <_printf_float+0x19c>
 800aa14:	6121      	str	r1, [r4, #16]
 800aa16:	b913      	cbnz	r3, 800aa1e <_printf_float+0x18e>
 800aa18:	6822      	ldr	r2, [r4, #0]
 800aa1a:	07d0      	lsls	r0, r2, #31
 800aa1c:	d502      	bpl.n	800aa24 <_printf_float+0x194>
 800aa1e:	3301      	adds	r3, #1
 800aa20:	440b      	add	r3, r1
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	f04f 0900 	mov.w	r9, #0
 800aa28:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa2a:	e7db      	b.n	800a9e4 <_printf_float+0x154>
 800aa2c:	b913      	cbnz	r3, 800aa34 <_printf_float+0x1a4>
 800aa2e:	6822      	ldr	r2, [r4, #0]
 800aa30:	07d2      	lsls	r2, r2, #31
 800aa32:	d501      	bpl.n	800aa38 <_printf_float+0x1a8>
 800aa34:	3302      	adds	r3, #2
 800aa36:	e7f4      	b.n	800aa22 <_printf_float+0x192>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e7f2      	b.n	800aa22 <_printf_float+0x192>
 800aa3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa42:	4299      	cmp	r1, r3
 800aa44:	db05      	blt.n	800aa52 <_printf_float+0x1c2>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	6121      	str	r1, [r4, #16]
 800aa4a:	07d8      	lsls	r0, r3, #31
 800aa4c:	d5ea      	bpl.n	800aa24 <_printf_float+0x194>
 800aa4e:	1c4b      	adds	r3, r1, #1
 800aa50:	e7e7      	b.n	800aa22 <_printf_float+0x192>
 800aa52:	2900      	cmp	r1, #0
 800aa54:	bfd4      	ite	le
 800aa56:	f1c1 0202 	rsble	r2, r1, #2
 800aa5a:	2201      	movgt	r2, #1
 800aa5c:	4413      	add	r3, r2
 800aa5e:	e7e0      	b.n	800aa22 <_printf_float+0x192>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	055a      	lsls	r2, r3, #21
 800aa64:	d407      	bmi.n	800aa76 <_printf_float+0x1e6>
 800aa66:	6923      	ldr	r3, [r4, #16]
 800aa68:	4642      	mov	r2, r8
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	d12b      	bne.n	800aacc <_printf_float+0x23c>
 800aa74:	e767      	b.n	800a946 <_printf_float+0xb6>
 800aa76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa7a:	f240 80dd 	bls.w	800ac38 <_printf_float+0x3a8>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2300      	movs	r3, #0
 800aa82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa86:	f7f6 f823 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d033      	beq.n	800aaf6 <_printf_float+0x266>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4a36      	ldr	r2, [pc, #216]	@ (800ab6c <_printf_float+0x2dc>)
 800aa92:	4631      	mov	r1, r6
 800aa94:	4628      	mov	r0, r5
 800aa96:	47b8      	blx	r7
 800aa98:	3001      	adds	r0, #1
 800aa9a:	f43f af54 	beq.w	800a946 <_printf_float+0xb6>
 800aa9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aaa2:	4543      	cmp	r3, r8
 800aaa4:	db02      	blt.n	800aaac <_printf_float+0x21c>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	07d8      	lsls	r0, r3, #31
 800aaaa:	d50f      	bpl.n	800aacc <_printf_float+0x23c>
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab4:	47b8      	blx	r7
 800aab6:	3001      	adds	r0, #1
 800aab8:	f43f af45 	beq.w	800a946 <_printf_float+0xb6>
 800aabc:	f04f 0900 	mov.w	r9, #0
 800aac0:	f108 38ff 	add.w	r8, r8, #4294967295
 800aac4:	f104 0a1a 	add.w	sl, r4, #26
 800aac8:	45c8      	cmp	r8, r9
 800aaca:	dc09      	bgt.n	800aae0 <_printf_float+0x250>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	079b      	lsls	r3, r3, #30
 800aad0:	f100 8103 	bmi.w	800acda <_printf_float+0x44a>
 800aad4:	68e0      	ldr	r0, [r4, #12]
 800aad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad8:	4298      	cmp	r0, r3
 800aada:	bfb8      	it	lt
 800aadc:	4618      	movlt	r0, r3
 800aade:	e734      	b.n	800a94a <_printf_float+0xba>
 800aae0:	2301      	movs	r3, #1
 800aae2:	4652      	mov	r2, sl
 800aae4:	4631      	mov	r1, r6
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	f43f af2b 	beq.w	800a946 <_printf_float+0xb6>
 800aaf0:	f109 0901 	add.w	r9, r9, #1
 800aaf4:	e7e8      	b.n	800aac8 <_printf_float+0x238>
 800aaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dc39      	bgt.n	800ab70 <_printf_float+0x2e0>
 800aafc:	2301      	movs	r3, #1
 800aafe:	4a1b      	ldr	r2, [pc, #108]	@ (800ab6c <_printf_float+0x2dc>)
 800ab00:	4631      	mov	r1, r6
 800ab02:	4628      	mov	r0, r5
 800ab04:	47b8      	blx	r7
 800ab06:	3001      	adds	r0, #1
 800ab08:	f43f af1d 	beq.w	800a946 <_printf_float+0xb6>
 800ab0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab10:	ea59 0303 	orrs.w	r3, r9, r3
 800ab14:	d102      	bne.n	800ab1c <_printf_float+0x28c>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	07d9      	lsls	r1, r3, #31
 800ab1a:	d5d7      	bpl.n	800aacc <_printf_float+0x23c>
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab24:	47b8      	blx	r7
 800ab26:	3001      	adds	r0, #1
 800ab28:	f43f af0d 	beq.w	800a946 <_printf_float+0xb6>
 800ab2c:	f04f 0a00 	mov.w	sl, #0
 800ab30:	f104 0b1a 	add.w	fp, r4, #26
 800ab34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab36:	425b      	negs	r3, r3
 800ab38:	4553      	cmp	r3, sl
 800ab3a:	dc01      	bgt.n	800ab40 <_printf_float+0x2b0>
 800ab3c:	464b      	mov	r3, r9
 800ab3e:	e793      	b.n	800aa68 <_printf_float+0x1d8>
 800ab40:	2301      	movs	r3, #1
 800ab42:	465a      	mov	r2, fp
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	f43f aefb 	beq.w	800a946 <_printf_float+0xb6>
 800ab50:	f10a 0a01 	add.w	sl, sl, #1
 800ab54:	e7ee      	b.n	800ab34 <_printf_float+0x2a4>
 800ab56:	bf00      	nop
 800ab58:	7fefffff 	.word	0x7fefffff
 800ab5c:	0800f080 	.word	0x0800f080
 800ab60:	0800f084 	.word	0x0800f084
 800ab64:	0800f088 	.word	0x0800f088
 800ab68:	0800f08c 	.word	0x0800f08c
 800ab6c:	0800f090 	.word	0x0800f090
 800ab70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab76:	4553      	cmp	r3, sl
 800ab78:	bfa8      	it	ge
 800ab7a:	4653      	movge	r3, sl
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	4699      	mov	r9, r3
 800ab80:	dc36      	bgt.n	800abf0 <_printf_float+0x360>
 800ab82:	f04f 0b00 	mov.w	fp, #0
 800ab86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab8a:	f104 021a 	add.w	r2, r4, #26
 800ab8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab90:	9306      	str	r3, [sp, #24]
 800ab92:	eba3 0309 	sub.w	r3, r3, r9
 800ab96:	455b      	cmp	r3, fp
 800ab98:	dc31      	bgt.n	800abfe <_printf_float+0x36e>
 800ab9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab9c:	459a      	cmp	sl, r3
 800ab9e:	dc3a      	bgt.n	800ac16 <_printf_float+0x386>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	07da      	lsls	r2, r3, #31
 800aba4:	d437      	bmi.n	800ac16 <_printf_float+0x386>
 800aba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba8:	ebaa 0903 	sub.w	r9, sl, r3
 800abac:	9b06      	ldr	r3, [sp, #24]
 800abae:	ebaa 0303 	sub.w	r3, sl, r3
 800abb2:	4599      	cmp	r9, r3
 800abb4:	bfa8      	it	ge
 800abb6:	4699      	movge	r9, r3
 800abb8:	f1b9 0f00 	cmp.w	r9, #0
 800abbc:	dc33      	bgt.n	800ac26 <_printf_float+0x396>
 800abbe:	f04f 0800 	mov.w	r8, #0
 800abc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abc6:	f104 0b1a 	add.w	fp, r4, #26
 800abca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abcc:	ebaa 0303 	sub.w	r3, sl, r3
 800abd0:	eba3 0309 	sub.w	r3, r3, r9
 800abd4:	4543      	cmp	r3, r8
 800abd6:	f77f af79 	ble.w	800aacc <_printf_float+0x23c>
 800abda:	2301      	movs	r3, #1
 800abdc:	465a      	mov	r2, fp
 800abde:	4631      	mov	r1, r6
 800abe0:	4628      	mov	r0, r5
 800abe2:	47b8      	blx	r7
 800abe4:	3001      	adds	r0, #1
 800abe6:	f43f aeae 	beq.w	800a946 <_printf_float+0xb6>
 800abea:	f108 0801 	add.w	r8, r8, #1
 800abee:	e7ec      	b.n	800abca <_printf_float+0x33a>
 800abf0:	4642      	mov	r2, r8
 800abf2:	4631      	mov	r1, r6
 800abf4:	4628      	mov	r0, r5
 800abf6:	47b8      	blx	r7
 800abf8:	3001      	adds	r0, #1
 800abfa:	d1c2      	bne.n	800ab82 <_printf_float+0x2f2>
 800abfc:	e6a3      	b.n	800a946 <_printf_float+0xb6>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	9206      	str	r2, [sp, #24]
 800ac06:	47b8      	blx	r7
 800ac08:	3001      	adds	r0, #1
 800ac0a:	f43f ae9c 	beq.w	800a946 <_printf_float+0xb6>
 800ac0e:	f10b 0b01 	add.w	fp, fp, #1
 800ac12:	9a06      	ldr	r2, [sp, #24]
 800ac14:	e7bb      	b.n	800ab8e <_printf_float+0x2fe>
 800ac16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	d1c0      	bne.n	800aba6 <_printf_float+0x316>
 800ac24:	e68f      	b.n	800a946 <_printf_float+0xb6>
 800ac26:	9a06      	ldr	r2, [sp, #24]
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	4442      	add	r2, r8
 800ac30:	47b8      	blx	r7
 800ac32:	3001      	adds	r0, #1
 800ac34:	d1c3      	bne.n	800abbe <_printf_float+0x32e>
 800ac36:	e686      	b.n	800a946 <_printf_float+0xb6>
 800ac38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac3c:	f1ba 0f01 	cmp.w	sl, #1
 800ac40:	dc01      	bgt.n	800ac46 <_printf_float+0x3b6>
 800ac42:	07db      	lsls	r3, r3, #31
 800ac44:	d536      	bpl.n	800acb4 <_printf_float+0x424>
 800ac46:	2301      	movs	r3, #1
 800ac48:	4642      	mov	r2, r8
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	f43f ae78 	beq.w	800a946 <_printf_float+0xb6>
 800ac56:	4631      	mov	r1, r6
 800ac58:	4628      	mov	r0, r5
 800ac5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f ae70 	beq.w	800a946 <_printf_float+0xb6>
 800ac66:	2200      	movs	r2, #0
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac72:	f7f5 ff2d 	bl	8000ad0 <__aeabi_dcmpeq>
 800ac76:	b9c0      	cbnz	r0, 800acaa <_printf_float+0x41a>
 800ac78:	4653      	mov	r3, sl
 800ac7a:	f108 0201 	add.w	r2, r8, #1
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4628      	mov	r0, r5
 800ac82:	47b8      	blx	r7
 800ac84:	3001      	adds	r0, #1
 800ac86:	d10c      	bne.n	800aca2 <_printf_float+0x412>
 800ac88:	e65d      	b.n	800a946 <_printf_float+0xb6>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	465a      	mov	r2, fp
 800ac8e:	4631      	mov	r1, r6
 800ac90:	4628      	mov	r0, r5
 800ac92:	47b8      	blx	r7
 800ac94:	3001      	adds	r0, #1
 800ac96:	f43f ae56 	beq.w	800a946 <_printf_float+0xb6>
 800ac9a:	f108 0801 	add.w	r8, r8, #1
 800ac9e:	45d0      	cmp	r8, sl
 800aca0:	dbf3      	blt.n	800ac8a <_printf_float+0x3fa>
 800aca2:	464b      	mov	r3, r9
 800aca4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aca8:	e6df      	b.n	800aa6a <_printf_float+0x1da>
 800acaa:	f04f 0800 	mov.w	r8, #0
 800acae:	f104 0b1a 	add.w	fp, r4, #26
 800acb2:	e7f4      	b.n	800ac9e <_printf_float+0x40e>
 800acb4:	2301      	movs	r3, #1
 800acb6:	4642      	mov	r2, r8
 800acb8:	e7e1      	b.n	800ac7e <_printf_float+0x3ee>
 800acba:	2301      	movs	r3, #1
 800acbc:	464a      	mov	r2, r9
 800acbe:	4631      	mov	r1, r6
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b8      	blx	r7
 800acc4:	3001      	adds	r0, #1
 800acc6:	f43f ae3e 	beq.w	800a946 <_printf_float+0xb6>
 800acca:	f108 0801 	add.w	r8, r8, #1
 800acce:	68e3      	ldr	r3, [r4, #12]
 800acd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acd2:	1a5b      	subs	r3, r3, r1
 800acd4:	4543      	cmp	r3, r8
 800acd6:	dcf0      	bgt.n	800acba <_printf_float+0x42a>
 800acd8:	e6fc      	b.n	800aad4 <_printf_float+0x244>
 800acda:	f04f 0800 	mov.w	r8, #0
 800acde:	f104 0919 	add.w	r9, r4, #25
 800ace2:	e7f4      	b.n	800acce <_printf_float+0x43e>

0800ace4 <_printf_common>:
 800ace4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace8:	4616      	mov	r6, r2
 800acea:	4698      	mov	r8, r3
 800acec:	688a      	ldr	r2, [r1, #8]
 800acee:	4607      	mov	r7, r0
 800acf0:	690b      	ldr	r3, [r1, #16]
 800acf2:	460c      	mov	r4, r1
 800acf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	bfb8      	it	lt
 800acfc:	4613      	movlt	r3, r2
 800acfe:	6033      	str	r3, [r6, #0]
 800ad00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad04:	b10a      	cbz	r2, 800ad0a <_printf_common+0x26>
 800ad06:	3301      	adds	r3, #1
 800ad08:	6033      	str	r3, [r6, #0]
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	0699      	lsls	r1, r3, #26
 800ad0e:	bf42      	ittt	mi
 800ad10:	6833      	ldrmi	r3, [r6, #0]
 800ad12:	3302      	addmi	r3, #2
 800ad14:	6033      	strmi	r3, [r6, #0]
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	f015 0506 	ands.w	r5, r5, #6
 800ad1c:	d106      	bne.n	800ad2c <_printf_common+0x48>
 800ad1e:	f104 0a19 	add.w	sl, r4, #25
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	6832      	ldr	r2, [r6, #0]
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dc2b      	bgt.n	800ad84 <_printf_common+0xa0>
 800ad2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	3b00      	subs	r3, #0
 800ad34:	bf18      	it	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	0692      	lsls	r2, r2, #26
 800ad3a:	d430      	bmi.n	800ad9e <_printf_common+0xba>
 800ad3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad40:	4641      	mov	r1, r8
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c8      	blx	r9
 800ad46:	3001      	adds	r0, #1
 800ad48:	d023      	beq.n	800ad92 <_printf_common+0xae>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	341a      	adds	r4, #26
 800ad4e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ad52:	f003 0306 	and.w	r3, r3, #6
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	bf0a      	itet	eq
 800ad5a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ad5e:	2500      	movne	r5, #0
 800ad60:	6833      	ldreq	r3, [r6, #0]
 800ad62:	f04f 0600 	mov.w	r6, #0
 800ad66:	bf08      	it	eq
 800ad68:	1aed      	subeq	r5, r5, r3
 800ad6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ad6e:	bf08      	it	eq
 800ad70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad74:	4293      	cmp	r3, r2
 800ad76:	bfc4      	itt	gt
 800ad78:	1a9b      	subgt	r3, r3, r2
 800ad7a:	18ed      	addgt	r5, r5, r3
 800ad7c:	42b5      	cmp	r5, r6
 800ad7e:	d11a      	bne.n	800adb6 <_printf_common+0xd2>
 800ad80:	2000      	movs	r0, #0
 800ad82:	e008      	b.n	800ad96 <_printf_common+0xb2>
 800ad84:	2301      	movs	r3, #1
 800ad86:	4652      	mov	r2, sl
 800ad88:	4641      	mov	r1, r8
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	47c8      	blx	r9
 800ad8e:	3001      	adds	r0, #1
 800ad90:	d103      	bne.n	800ad9a <_printf_common+0xb6>
 800ad92:	f04f 30ff 	mov.w	r0, #4294967295
 800ad96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9a:	3501      	adds	r5, #1
 800ad9c:	e7c1      	b.n	800ad22 <_printf_common+0x3e>
 800ad9e:	18e1      	adds	r1, r4, r3
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	2030      	movs	r0, #48	@ 0x30
 800ada4:	3302      	adds	r3, #2
 800ada6:	4422      	add	r2, r4
 800ada8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800adb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800adb4:	e7c2      	b.n	800ad3c <_printf_common+0x58>
 800adb6:	2301      	movs	r3, #1
 800adb8:	4622      	mov	r2, r4
 800adba:	4641      	mov	r1, r8
 800adbc:	4638      	mov	r0, r7
 800adbe:	47c8      	blx	r9
 800adc0:	3001      	adds	r0, #1
 800adc2:	d0e6      	beq.n	800ad92 <_printf_common+0xae>
 800adc4:	3601      	adds	r6, #1
 800adc6:	e7d9      	b.n	800ad7c <_printf_common+0x98>

0800adc8 <_printf_i>:
 800adc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	7e0f      	ldrb	r7, [r1, #24]
 800adce:	4691      	mov	r9, r2
 800add0:	4680      	mov	r8, r0
 800add2:	460c      	mov	r4, r1
 800add4:	2f78      	cmp	r7, #120	@ 0x78
 800add6:	469a      	mov	sl, r3
 800add8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adde:	d807      	bhi.n	800adf0 <_printf_i+0x28>
 800ade0:	2f62      	cmp	r7, #98	@ 0x62
 800ade2:	d80a      	bhi.n	800adfa <_printf_i+0x32>
 800ade4:	2f00      	cmp	r7, #0
 800ade6:	f000 80d2 	beq.w	800af8e <_printf_i+0x1c6>
 800adea:	2f58      	cmp	r7, #88	@ 0x58
 800adec:	f000 80b9 	beq.w	800af62 <_printf_i+0x19a>
 800adf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adf8:	e03a      	b.n	800ae70 <_printf_i+0xa8>
 800adfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adfe:	2b15      	cmp	r3, #21
 800ae00:	d8f6      	bhi.n	800adf0 <_printf_i+0x28>
 800ae02:	a101      	add	r1, pc, #4	@ (adr r1, 800ae08 <_printf_i+0x40>)
 800ae04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae08:	0800ae61 	.word	0x0800ae61
 800ae0c:	0800ae75 	.word	0x0800ae75
 800ae10:	0800adf1 	.word	0x0800adf1
 800ae14:	0800adf1 	.word	0x0800adf1
 800ae18:	0800adf1 	.word	0x0800adf1
 800ae1c:	0800adf1 	.word	0x0800adf1
 800ae20:	0800ae75 	.word	0x0800ae75
 800ae24:	0800adf1 	.word	0x0800adf1
 800ae28:	0800adf1 	.word	0x0800adf1
 800ae2c:	0800adf1 	.word	0x0800adf1
 800ae30:	0800adf1 	.word	0x0800adf1
 800ae34:	0800af75 	.word	0x0800af75
 800ae38:	0800ae9f 	.word	0x0800ae9f
 800ae3c:	0800af2f 	.word	0x0800af2f
 800ae40:	0800adf1 	.word	0x0800adf1
 800ae44:	0800adf1 	.word	0x0800adf1
 800ae48:	0800af97 	.word	0x0800af97
 800ae4c:	0800adf1 	.word	0x0800adf1
 800ae50:	0800ae9f 	.word	0x0800ae9f
 800ae54:	0800adf1 	.word	0x0800adf1
 800ae58:	0800adf1 	.word	0x0800adf1
 800ae5c:	0800af37 	.word	0x0800af37
 800ae60:	6833      	ldr	r3, [r6, #0]
 800ae62:	1d1a      	adds	r2, r3, #4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6032      	str	r2, [r6, #0]
 800ae68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae70:	2301      	movs	r3, #1
 800ae72:	e09d      	b.n	800afb0 <_printf_i+0x1e8>
 800ae74:	6833      	ldr	r3, [r6, #0]
 800ae76:	6820      	ldr	r0, [r4, #0]
 800ae78:	1d19      	adds	r1, r3, #4
 800ae7a:	6031      	str	r1, [r6, #0]
 800ae7c:	0606      	lsls	r6, r0, #24
 800ae7e:	d501      	bpl.n	800ae84 <_printf_i+0xbc>
 800ae80:	681d      	ldr	r5, [r3, #0]
 800ae82:	e003      	b.n	800ae8c <_printf_i+0xc4>
 800ae84:	0645      	lsls	r5, r0, #25
 800ae86:	d5fb      	bpl.n	800ae80 <_printf_i+0xb8>
 800ae88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae8c:	2d00      	cmp	r5, #0
 800ae8e:	da03      	bge.n	800ae98 <_printf_i+0xd0>
 800ae90:	232d      	movs	r3, #45	@ 0x2d
 800ae92:	426d      	negs	r5, r5
 800ae94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae98:	4859      	ldr	r0, [pc, #356]	@ (800b000 <_printf_i+0x238>)
 800ae9a:	230a      	movs	r3, #10
 800ae9c:	e011      	b.n	800aec2 <_printf_i+0xfa>
 800ae9e:	6821      	ldr	r1, [r4, #0]
 800aea0:	6833      	ldr	r3, [r6, #0]
 800aea2:	0608      	lsls	r0, r1, #24
 800aea4:	f853 5b04 	ldr.w	r5, [r3], #4
 800aea8:	d402      	bmi.n	800aeb0 <_printf_i+0xe8>
 800aeaa:	0649      	lsls	r1, r1, #25
 800aeac:	bf48      	it	mi
 800aeae:	b2ad      	uxthmi	r5, r5
 800aeb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeb2:	6033      	str	r3, [r6, #0]
 800aeb4:	4852      	ldr	r0, [pc, #328]	@ (800b000 <_printf_i+0x238>)
 800aeb6:	bf14      	ite	ne
 800aeb8:	230a      	movne	r3, #10
 800aeba:	2308      	moveq	r3, #8
 800aebc:	2100      	movs	r1, #0
 800aebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aec2:	6866      	ldr	r6, [r4, #4]
 800aec4:	2e00      	cmp	r6, #0
 800aec6:	60a6      	str	r6, [r4, #8]
 800aec8:	bfa2      	ittt	ge
 800aeca:	6821      	ldrge	r1, [r4, #0]
 800aecc:	f021 0104 	bicge.w	r1, r1, #4
 800aed0:	6021      	strge	r1, [r4, #0]
 800aed2:	b90d      	cbnz	r5, 800aed8 <_printf_i+0x110>
 800aed4:	2e00      	cmp	r6, #0
 800aed6:	d04b      	beq.n	800af70 <_printf_i+0x1a8>
 800aed8:	4616      	mov	r6, r2
 800aeda:	fbb5 f1f3 	udiv	r1, r5, r3
 800aede:	fb03 5711 	mls	r7, r3, r1, r5
 800aee2:	5dc7      	ldrb	r7, [r0, r7]
 800aee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aee8:	462f      	mov	r7, r5
 800aeea:	460d      	mov	r5, r1
 800aeec:	42bb      	cmp	r3, r7
 800aeee:	d9f4      	bls.n	800aeda <_printf_i+0x112>
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d10b      	bne.n	800af0c <_printf_i+0x144>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	07df      	lsls	r7, r3, #31
 800aef8:	d508      	bpl.n	800af0c <_printf_i+0x144>
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	6861      	ldr	r1, [r4, #4]
 800aefe:	4299      	cmp	r1, r3
 800af00:	bfde      	ittt	le
 800af02:	2330      	movle	r3, #48	@ 0x30
 800af04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af0c:	1b92      	subs	r2, r2, r6
 800af0e:	6122      	str	r2, [r4, #16]
 800af10:	464b      	mov	r3, r9
 800af12:	aa03      	add	r2, sp, #12
 800af14:	4621      	mov	r1, r4
 800af16:	4640      	mov	r0, r8
 800af18:	f8cd a000 	str.w	sl, [sp]
 800af1c:	f7ff fee2 	bl	800ace4 <_printf_common>
 800af20:	3001      	adds	r0, #1
 800af22:	d14a      	bne.n	800afba <_printf_i+0x1f2>
 800af24:	f04f 30ff 	mov.w	r0, #4294967295
 800af28:	b004      	add	sp, #16
 800af2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	f043 0320 	orr.w	r3, r3, #32
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	2778      	movs	r7, #120	@ 0x78
 800af38:	4832      	ldr	r0, [pc, #200]	@ (800b004 <_printf_i+0x23c>)
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af40:	061f      	lsls	r7, r3, #24
 800af42:	6831      	ldr	r1, [r6, #0]
 800af44:	f851 5b04 	ldr.w	r5, [r1], #4
 800af48:	d402      	bmi.n	800af50 <_printf_i+0x188>
 800af4a:	065f      	lsls	r7, r3, #25
 800af4c:	bf48      	it	mi
 800af4e:	b2ad      	uxthmi	r5, r5
 800af50:	6031      	str	r1, [r6, #0]
 800af52:	07d9      	lsls	r1, r3, #31
 800af54:	bf44      	itt	mi
 800af56:	f043 0320 	orrmi.w	r3, r3, #32
 800af5a:	6023      	strmi	r3, [r4, #0]
 800af5c:	b11d      	cbz	r5, 800af66 <_printf_i+0x19e>
 800af5e:	2310      	movs	r3, #16
 800af60:	e7ac      	b.n	800aebc <_printf_i+0xf4>
 800af62:	4827      	ldr	r0, [pc, #156]	@ (800b000 <_printf_i+0x238>)
 800af64:	e7e9      	b.n	800af3a <_printf_i+0x172>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	f023 0320 	bic.w	r3, r3, #32
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	e7f6      	b.n	800af5e <_printf_i+0x196>
 800af70:	4616      	mov	r6, r2
 800af72:	e7bd      	b.n	800aef0 <_printf_i+0x128>
 800af74:	6833      	ldr	r3, [r6, #0]
 800af76:	6825      	ldr	r5, [r4, #0]
 800af78:	1d18      	adds	r0, r3, #4
 800af7a:	6961      	ldr	r1, [r4, #20]
 800af7c:	6030      	str	r0, [r6, #0]
 800af7e:	062e      	lsls	r6, r5, #24
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	d501      	bpl.n	800af88 <_printf_i+0x1c0>
 800af84:	6019      	str	r1, [r3, #0]
 800af86:	e002      	b.n	800af8e <_printf_i+0x1c6>
 800af88:	0668      	lsls	r0, r5, #25
 800af8a:	d5fb      	bpl.n	800af84 <_printf_i+0x1bc>
 800af8c:	8019      	strh	r1, [r3, #0]
 800af8e:	2300      	movs	r3, #0
 800af90:	4616      	mov	r6, r2
 800af92:	6123      	str	r3, [r4, #16]
 800af94:	e7bc      	b.n	800af10 <_printf_i+0x148>
 800af96:	6833      	ldr	r3, [r6, #0]
 800af98:	2100      	movs	r1, #0
 800af9a:	1d1a      	adds	r2, r3, #4
 800af9c:	6032      	str	r2, [r6, #0]
 800af9e:	681e      	ldr	r6, [r3, #0]
 800afa0:	6862      	ldr	r2, [r4, #4]
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 fbf9 	bl	800b79a <memchr>
 800afa8:	b108      	cbz	r0, 800afae <_printf_i+0x1e6>
 800afaa:	1b80      	subs	r0, r0, r6
 800afac:	6060      	str	r0, [r4, #4]
 800afae:	6863      	ldr	r3, [r4, #4]
 800afb0:	6123      	str	r3, [r4, #16]
 800afb2:	2300      	movs	r3, #0
 800afb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afb8:	e7aa      	b.n	800af10 <_printf_i+0x148>
 800afba:	6923      	ldr	r3, [r4, #16]
 800afbc:	4632      	mov	r2, r6
 800afbe:	4649      	mov	r1, r9
 800afc0:	4640      	mov	r0, r8
 800afc2:	47d0      	blx	sl
 800afc4:	3001      	adds	r0, #1
 800afc6:	d0ad      	beq.n	800af24 <_printf_i+0x15c>
 800afc8:	6823      	ldr	r3, [r4, #0]
 800afca:	079b      	lsls	r3, r3, #30
 800afcc:	d413      	bmi.n	800aff6 <_printf_i+0x22e>
 800afce:	68e0      	ldr	r0, [r4, #12]
 800afd0:	9b03      	ldr	r3, [sp, #12]
 800afd2:	4298      	cmp	r0, r3
 800afd4:	bfb8      	it	lt
 800afd6:	4618      	movlt	r0, r3
 800afd8:	e7a6      	b.n	800af28 <_printf_i+0x160>
 800afda:	2301      	movs	r3, #1
 800afdc:	4632      	mov	r2, r6
 800afde:	4649      	mov	r1, r9
 800afe0:	4640      	mov	r0, r8
 800afe2:	47d0      	blx	sl
 800afe4:	3001      	adds	r0, #1
 800afe6:	d09d      	beq.n	800af24 <_printf_i+0x15c>
 800afe8:	3501      	adds	r5, #1
 800afea:	68e3      	ldr	r3, [r4, #12]
 800afec:	9903      	ldr	r1, [sp, #12]
 800afee:	1a5b      	subs	r3, r3, r1
 800aff0:	42ab      	cmp	r3, r5
 800aff2:	dcf2      	bgt.n	800afda <_printf_i+0x212>
 800aff4:	e7eb      	b.n	800afce <_printf_i+0x206>
 800aff6:	2500      	movs	r5, #0
 800aff8:	f104 0619 	add.w	r6, r4, #25
 800affc:	e7f5      	b.n	800afea <_printf_i+0x222>
 800affe:	bf00      	nop
 800b000:	0800f092 	.word	0x0800f092
 800b004:	0800f0a3 	.word	0x0800f0a3

0800b008 <_scanf_float>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	b087      	sub	sp, #28
 800b00e:	4617      	mov	r7, r2
 800b010:	4680      	mov	r8, r0
 800b012:	460c      	mov	r4, r1
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	688b      	ldr	r3, [r1, #8]
 800b018:	1e5a      	subs	r2, r3, #1
 800b01a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b01e:	460a      	mov	r2, r1
 800b020:	bf89      	itett	hi
 800b022:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b026:	f04f 0b00 	movls.w	fp, #0
 800b02a:	eb03 0b05 	addhi.w	fp, r3, r5
 800b02e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b032:	f04f 0500 	mov.w	r5, #0
 800b036:	bf88      	it	hi
 800b038:	608b      	strhi	r3, [r1, #8]
 800b03a:	680b      	ldr	r3, [r1, #0]
 800b03c:	46aa      	mov	sl, r5
 800b03e:	46a9      	mov	r9, r5
 800b040:	9502      	str	r5, [sp, #8]
 800b042:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b046:	f842 3b1c 	str.w	r3, [r2], #28
 800b04a:	4616      	mov	r6, r2
 800b04c:	9201      	str	r2, [sp, #4]
 800b04e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b052:	68a2      	ldr	r2, [r4, #8]
 800b054:	b152      	cbz	r2, 800b06c <_scanf_float+0x64>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b05c:	d864      	bhi.n	800b128 <_scanf_float+0x120>
 800b05e:	2b40      	cmp	r3, #64	@ 0x40
 800b060:	d83c      	bhi.n	800b0dc <_scanf_float+0xd4>
 800b062:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b066:	b2c8      	uxtb	r0, r1
 800b068:	280e      	cmp	r0, #14
 800b06a:	d93a      	bls.n	800b0e2 <_scanf_float+0xda>
 800b06c:	f1b9 0f00 	cmp.w	r9, #0
 800b070:	d003      	beq.n	800b07a <_scanf_float+0x72>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b07e:	f1ba 0f01 	cmp.w	sl, #1
 800b082:	f200 8117 	bhi.w	800b2b4 <_scanf_float+0x2ac>
 800b086:	9b01      	ldr	r3, [sp, #4]
 800b088:	429e      	cmp	r6, r3
 800b08a:	f200 8108 	bhi.w	800b29e <_scanf_float+0x296>
 800b08e:	2001      	movs	r0, #1
 800b090:	b007      	add	sp, #28
 800b092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b096:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b09a:	2a0d      	cmp	r2, #13
 800b09c:	d8e6      	bhi.n	800b06c <_scanf_float+0x64>
 800b09e:	a101      	add	r1, pc, #4	@ (adr r1, 800b0a4 <_scanf_float+0x9c>)
 800b0a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0a4:	0800b1eb 	.word	0x0800b1eb
 800b0a8:	0800b06d 	.word	0x0800b06d
 800b0ac:	0800b06d 	.word	0x0800b06d
 800b0b0:	0800b06d 	.word	0x0800b06d
 800b0b4:	0800b24b 	.word	0x0800b24b
 800b0b8:	0800b223 	.word	0x0800b223
 800b0bc:	0800b06d 	.word	0x0800b06d
 800b0c0:	0800b06d 	.word	0x0800b06d
 800b0c4:	0800b1f9 	.word	0x0800b1f9
 800b0c8:	0800b06d 	.word	0x0800b06d
 800b0cc:	0800b06d 	.word	0x0800b06d
 800b0d0:	0800b06d 	.word	0x0800b06d
 800b0d4:	0800b06d 	.word	0x0800b06d
 800b0d8:	0800b1b1 	.word	0x0800b1b1
 800b0dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b0e0:	e7db      	b.n	800b09a <_scanf_float+0x92>
 800b0e2:	290e      	cmp	r1, #14
 800b0e4:	d8c2      	bhi.n	800b06c <_scanf_float+0x64>
 800b0e6:	a001      	add	r0, pc, #4	@ (adr r0, 800b0ec <_scanf_float+0xe4>)
 800b0e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b0ec:	0800b1a1 	.word	0x0800b1a1
 800b0f0:	0800b06d 	.word	0x0800b06d
 800b0f4:	0800b1a1 	.word	0x0800b1a1
 800b0f8:	0800b237 	.word	0x0800b237
 800b0fc:	0800b06d 	.word	0x0800b06d
 800b100:	0800b149 	.word	0x0800b149
 800b104:	0800b187 	.word	0x0800b187
 800b108:	0800b187 	.word	0x0800b187
 800b10c:	0800b187 	.word	0x0800b187
 800b110:	0800b187 	.word	0x0800b187
 800b114:	0800b187 	.word	0x0800b187
 800b118:	0800b187 	.word	0x0800b187
 800b11c:	0800b187 	.word	0x0800b187
 800b120:	0800b187 	.word	0x0800b187
 800b124:	0800b187 	.word	0x0800b187
 800b128:	2b6e      	cmp	r3, #110	@ 0x6e
 800b12a:	d809      	bhi.n	800b140 <_scanf_float+0x138>
 800b12c:	2b60      	cmp	r3, #96	@ 0x60
 800b12e:	d8b2      	bhi.n	800b096 <_scanf_float+0x8e>
 800b130:	2b54      	cmp	r3, #84	@ 0x54
 800b132:	d07b      	beq.n	800b22c <_scanf_float+0x224>
 800b134:	2b59      	cmp	r3, #89	@ 0x59
 800b136:	d199      	bne.n	800b06c <_scanf_float+0x64>
 800b138:	2d07      	cmp	r5, #7
 800b13a:	d197      	bne.n	800b06c <_scanf_float+0x64>
 800b13c:	2508      	movs	r5, #8
 800b13e:	e02c      	b.n	800b19a <_scanf_float+0x192>
 800b140:	2b74      	cmp	r3, #116	@ 0x74
 800b142:	d073      	beq.n	800b22c <_scanf_float+0x224>
 800b144:	2b79      	cmp	r3, #121	@ 0x79
 800b146:	e7f6      	b.n	800b136 <_scanf_float+0x12e>
 800b148:	6821      	ldr	r1, [r4, #0]
 800b14a:	05c8      	lsls	r0, r1, #23
 800b14c:	d51b      	bpl.n	800b186 <_scanf_float+0x17e>
 800b14e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b152:	f109 0901 	add.w	r9, r9, #1
 800b156:	6021      	str	r1, [r4, #0]
 800b158:	f1bb 0f00 	cmp.w	fp, #0
 800b15c:	d003      	beq.n	800b166 <_scanf_float+0x15e>
 800b15e:	3201      	adds	r2, #1
 800b160:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b164:	60a2      	str	r2, [r4, #8]
 800b166:	68a3      	ldr	r3, [r4, #8]
 800b168:	3b01      	subs	r3, #1
 800b16a:	60a3      	str	r3, [r4, #8]
 800b16c:	6923      	ldr	r3, [r4, #16]
 800b16e:	3301      	adds	r3, #1
 800b170:	6123      	str	r3, [r4, #16]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3b01      	subs	r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	f340 8087 	ble.w	800b28c <_scanf_float+0x284>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	e765      	b.n	800b052 <_scanf_float+0x4a>
 800b186:	eb1a 0105 	adds.w	r1, sl, r5
 800b18a:	f47f af6f 	bne.w	800b06c <_scanf_float+0x64>
 800b18e:	6822      	ldr	r2, [r4, #0]
 800b190:	460d      	mov	r5, r1
 800b192:	468a      	mov	sl, r1
 800b194:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b198:	6022      	str	r2, [r4, #0]
 800b19a:	f806 3b01 	strb.w	r3, [r6], #1
 800b19e:	e7e2      	b.n	800b166 <_scanf_float+0x15e>
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	0610      	lsls	r0, r2, #24
 800b1a4:	f57f af62 	bpl.w	800b06c <_scanf_float+0x64>
 800b1a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b1ac:	6022      	str	r2, [r4, #0]
 800b1ae:	e7f4      	b.n	800b19a <_scanf_float+0x192>
 800b1b0:	f1ba 0f00 	cmp.w	sl, #0
 800b1b4:	d10e      	bne.n	800b1d4 <_scanf_float+0x1cc>
 800b1b6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ba:	d10e      	bne.n	800b1da <_scanf_float+0x1d2>
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b1c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b1c6:	d108      	bne.n	800b1da <_scanf_float+0x1d2>
 800b1c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1cc:	f04f 0a01 	mov.w	sl, #1
 800b1d0:	6022      	str	r2, [r4, #0]
 800b1d2:	e7e2      	b.n	800b19a <_scanf_float+0x192>
 800b1d4:	f1ba 0f02 	cmp.w	sl, #2
 800b1d8:	d055      	beq.n	800b286 <_scanf_float+0x27e>
 800b1da:	2d01      	cmp	r5, #1
 800b1dc:	d002      	beq.n	800b1e4 <_scanf_float+0x1dc>
 800b1de:	2d04      	cmp	r5, #4
 800b1e0:	f47f af44 	bne.w	800b06c <_scanf_float+0x64>
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	b2ed      	uxtb	r5, r5
 800b1e8:	e7d7      	b.n	800b19a <_scanf_float+0x192>
 800b1ea:	f1ba 0f01 	cmp.w	sl, #1
 800b1ee:	f47f af3d 	bne.w	800b06c <_scanf_float+0x64>
 800b1f2:	f04f 0a02 	mov.w	sl, #2
 800b1f6:	e7d0      	b.n	800b19a <_scanf_float+0x192>
 800b1f8:	b97d      	cbnz	r5, 800b21a <_scanf_float+0x212>
 800b1fa:	f1b9 0f00 	cmp.w	r9, #0
 800b1fe:	f47f af38 	bne.w	800b072 <_scanf_float+0x6a>
 800b202:	6822      	ldr	r2, [r4, #0]
 800b204:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b208:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b20c:	f040 8107 	bne.w	800b41e <_scanf_float+0x416>
 800b210:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b214:	2501      	movs	r5, #1
 800b216:	6022      	str	r2, [r4, #0]
 800b218:	e7bf      	b.n	800b19a <_scanf_float+0x192>
 800b21a:	2d03      	cmp	r5, #3
 800b21c:	d0e2      	beq.n	800b1e4 <_scanf_float+0x1dc>
 800b21e:	2d05      	cmp	r5, #5
 800b220:	e7de      	b.n	800b1e0 <_scanf_float+0x1d8>
 800b222:	2d02      	cmp	r5, #2
 800b224:	f47f af22 	bne.w	800b06c <_scanf_float+0x64>
 800b228:	2503      	movs	r5, #3
 800b22a:	e7b6      	b.n	800b19a <_scanf_float+0x192>
 800b22c:	2d06      	cmp	r5, #6
 800b22e:	f47f af1d 	bne.w	800b06c <_scanf_float+0x64>
 800b232:	2507      	movs	r5, #7
 800b234:	e7b1      	b.n	800b19a <_scanf_float+0x192>
 800b236:	6822      	ldr	r2, [r4, #0]
 800b238:	0591      	lsls	r1, r2, #22
 800b23a:	f57f af17 	bpl.w	800b06c <_scanf_float+0x64>
 800b23e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b242:	f8cd 9008 	str.w	r9, [sp, #8]
 800b246:	6022      	str	r2, [r4, #0]
 800b248:	e7a7      	b.n	800b19a <_scanf_float+0x192>
 800b24a:	6822      	ldr	r2, [r4, #0]
 800b24c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b250:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b254:	d006      	beq.n	800b264 <_scanf_float+0x25c>
 800b256:	0550      	lsls	r0, r2, #21
 800b258:	f57f af08 	bpl.w	800b06c <_scanf_float+0x64>
 800b25c:	f1b9 0f00 	cmp.w	r9, #0
 800b260:	f000 80dd 	beq.w	800b41e <_scanf_float+0x416>
 800b264:	0591      	lsls	r1, r2, #22
 800b266:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b26a:	bf58      	it	pl
 800b26c:	9902      	ldrpl	r1, [sp, #8]
 800b26e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b272:	bf58      	it	pl
 800b274:	eba9 0101 	subpl.w	r1, r9, r1
 800b278:	6022      	str	r2, [r4, #0]
 800b27a:	f04f 0900 	mov.w	r9, #0
 800b27e:	bf58      	it	pl
 800b280:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b284:	e789      	b.n	800b19a <_scanf_float+0x192>
 800b286:	f04f 0a03 	mov.w	sl, #3
 800b28a:	e786      	b.n	800b19a <_scanf_float+0x192>
 800b28c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b290:	4639      	mov	r1, r7
 800b292:	4640      	mov	r0, r8
 800b294:	4798      	blx	r3
 800b296:	2800      	cmp	r0, #0
 800b298:	f43f aedb 	beq.w	800b052 <_scanf_float+0x4a>
 800b29c:	e6e6      	b.n	800b06c <_scanf_float+0x64>
 800b29e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	4798      	blx	r3
 800b2ac:	6923      	ldr	r3, [r4, #16]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	6123      	str	r3, [r4, #16]
 800b2b2:	e6e8      	b.n	800b086 <_scanf_float+0x7e>
 800b2b4:	1e6b      	subs	r3, r5, #1
 800b2b6:	2b06      	cmp	r3, #6
 800b2b8:	d824      	bhi.n	800b304 <_scanf_float+0x2fc>
 800b2ba:	2d02      	cmp	r5, #2
 800b2bc:	d836      	bhi.n	800b32c <_scanf_float+0x324>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	429e      	cmp	r6, r3
 800b2c2:	f67f aee4 	bls.w	800b08e <_scanf_float+0x86>
 800b2c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2ca:	463a      	mov	r2, r7
 800b2cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2d0:	4640      	mov	r0, r8
 800b2d2:	4798      	blx	r3
 800b2d4:	6923      	ldr	r3, [r4, #16]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	6123      	str	r3, [r4, #16]
 800b2da:	e7f0      	b.n	800b2be <_scanf_float+0x2b6>
 800b2dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2e0:	463a      	mov	r2, r7
 800b2e2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	4798      	blx	r3
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2f4:	fa5f fa8a 	uxtb.w	sl, sl
 800b2f8:	f1ba 0f02 	cmp.w	sl, #2
 800b2fc:	d1ee      	bne.n	800b2dc <_scanf_float+0x2d4>
 800b2fe:	3d03      	subs	r5, #3
 800b300:	b2ed      	uxtb	r5, r5
 800b302:	1b76      	subs	r6, r6, r5
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	05da      	lsls	r2, r3, #23
 800b308:	d52f      	bpl.n	800b36a <_scanf_float+0x362>
 800b30a:	055b      	lsls	r3, r3, #21
 800b30c:	d511      	bpl.n	800b332 <_scanf_float+0x32a>
 800b30e:	9b01      	ldr	r3, [sp, #4]
 800b310:	429e      	cmp	r6, r3
 800b312:	f67f aebc 	bls.w	800b08e <_scanf_float+0x86>
 800b316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b31a:	463a      	mov	r2, r7
 800b31c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b320:	4640      	mov	r0, r8
 800b322:	4798      	blx	r3
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	3b01      	subs	r3, #1
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	e7f0      	b.n	800b30e <_scanf_float+0x306>
 800b32c:	46aa      	mov	sl, r5
 800b32e:	46b3      	mov	fp, r6
 800b330:	e7de      	b.n	800b2f0 <_scanf_float+0x2e8>
 800b332:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b336:	1e75      	subs	r5, r6, #1
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	2965      	cmp	r1, #101	@ 0x65
 800b33c:	f103 33ff 	add.w	r3, r3, #4294967295
 800b340:	6123      	str	r3, [r4, #16]
 800b342:	d00c      	beq.n	800b35e <_scanf_float+0x356>
 800b344:	2945      	cmp	r1, #69	@ 0x45
 800b346:	d00a      	beq.n	800b35e <_scanf_float+0x356>
 800b348:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b34c:	463a      	mov	r2, r7
 800b34e:	4640      	mov	r0, r8
 800b350:	1eb5      	subs	r5, r6, #2
 800b352:	4798      	blx	r3
 800b354:	6923      	ldr	r3, [r4, #16]
 800b356:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	6123      	str	r3, [r4, #16]
 800b35e:	462e      	mov	r6, r5
 800b360:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b364:	463a      	mov	r2, r7
 800b366:	4640      	mov	r0, r8
 800b368:	4798      	blx	r3
 800b36a:	6822      	ldr	r2, [r4, #0]
 800b36c:	f012 0210 	ands.w	r2, r2, #16
 800b370:	d001      	beq.n	800b376 <_scanf_float+0x36e>
 800b372:	2000      	movs	r0, #0
 800b374:	e68c      	b.n	800b090 <_scanf_float+0x88>
 800b376:	7032      	strb	r2, [r6, #0]
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b37e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b382:	d11c      	bne.n	800b3be <_scanf_float+0x3b6>
 800b384:	9b02      	ldr	r3, [sp, #8]
 800b386:	454b      	cmp	r3, r9
 800b388:	eba3 0209 	sub.w	r2, r3, r9
 800b38c:	d123      	bne.n	800b3d6 <_scanf_float+0x3ce>
 800b38e:	2200      	movs	r2, #0
 800b390:	9901      	ldr	r1, [sp, #4]
 800b392:	4640      	mov	r0, r8
 800b394:	f002 fc28 	bl	800dbe8 <_strtod_r>
 800b398:	6821      	ldr	r1, [r4, #0]
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	f011 0f02 	tst.w	r1, #2
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	ec57 6b10 	vmov	r6, r7, d0
 800b3a6:	f103 0204 	add.w	r2, r3, #4
 800b3aa:	d01f      	beq.n	800b3ec <_scanf_float+0x3e4>
 800b3ac:	9903      	ldr	r1, [sp, #12]
 800b3ae:	600a      	str	r2, [r1, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	e9c3 6700 	strd	r6, r7, [r3]
 800b3b6:	68e3      	ldr	r3, [r4, #12]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	60e3      	str	r3, [r4, #12]
 800b3bc:	e7d9      	b.n	800b372 <_scanf_float+0x36a>
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d0e4      	beq.n	800b38e <_scanf_float+0x386>
 800b3c4:	9905      	ldr	r1, [sp, #20]
 800b3c6:	230a      	movs	r3, #10
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	3101      	adds	r1, #1
 800b3cc:	f002 fc8c 	bl	800dce8 <_strtol_r>
 800b3d0:	9b04      	ldr	r3, [sp, #16]
 800b3d2:	9e05      	ldr	r6, [sp, #20]
 800b3d4:	1ac2      	subs	r2, r0, r3
 800b3d6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b3da:	4912      	ldr	r1, [pc, #72]	@ (800b424 <_scanf_float+0x41c>)
 800b3dc:	429e      	cmp	r6, r3
 800b3de:	bf28      	it	cs
 800b3e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f000 f8f5 	bl	800b5d4 <siprintf>
 800b3ea:	e7d0      	b.n	800b38e <_scanf_float+0x386>
 800b3ec:	f011 0f04 	tst.w	r1, #4
 800b3f0:	9903      	ldr	r1, [sp, #12]
 800b3f2:	600a      	str	r2, [r1, #0]
 800b3f4:	d1dc      	bne.n	800b3b0 <_scanf_float+0x3a8>
 800b3f6:	681d      	ldr	r5, [r3, #0]
 800b3f8:	4632      	mov	r2, r6
 800b3fa:	463b      	mov	r3, r7
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f5 fb98 	bl	8000b34 <__aeabi_dcmpun>
 800b404:	b128      	cbz	r0, 800b412 <_scanf_float+0x40a>
 800b406:	4808      	ldr	r0, [pc, #32]	@ (800b428 <_scanf_float+0x420>)
 800b408:	f000 f9d6 	bl	800b7b8 <nanf>
 800b40c:	ed85 0a00 	vstr	s0, [r5]
 800b410:	e7d1      	b.n	800b3b6 <_scanf_float+0x3ae>
 800b412:	4630      	mov	r0, r6
 800b414:	4639      	mov	r1, r7
 800b416:	f7f5 fbeb 	bl	8000bf0 <__aeabi_d2f>
 800b41a:	6028      	str	r0, [r5, #0]
 800b41c:	e7cb      	b.n	800b3b6 <_scanf_float+0x3ae>
 800b41e:	f04f 0900 	mov.w	r9, #0
 800b422:	e62a      	b.n	800b07a <_scanf_float+0x72>
 800b424:	0800f0b4 	.word	0x0800f0b4
 800b428:	0800f44d 	.word	0x0800f44d

0800b42c <std>:
 800b42c:	2300      	movs	r3, #0
 800b42e:	b510      	push	{r4, lr}
 800b430:	4604      	mov	r4, r0
 800b432:	6083      	str	r3, [r0, #8]
 800b434:	8181      	strh	r1, [r0, #12]
 800b436:	4619      	mov	r1, r3
 800b438:	6643      	str	r3, [r0, #100]	@ 0x64
 800b43a:	81c2      	strh	r2, [r0, #14]
 800b43c:	2208      	movs	r2, #8
 800b43e:	6183      	str	r3, [r0, #24]
 800b440:	e9c0 3300 	strd	r3, r3, [r0]
 800b444:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b448:	305c      	adds	r0, #92	@ 0x5c
 800b44a:	f000 f926 	bl	800b69a <memset>
 800b44e:	4b0d      	ldr	r3, [pc, #52]	@ (800b484 <std+0x58>)
 800b450:	6224      	str	r4, [r4, #32]
 800b452:	6263      	str	r3, [r4, #36]	@ 0x24
 800b454:	4b0c      	ldr	r3, [pc, #48]	@ (800b488 <std+0x5c>)
 800b456:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b458:	4b0c      	ldr	r3, [pc, #48]	@ (800b48c <std+0x60>)
 800b45a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b45c:	4b0c      	ldr	r3, [pc, #48]	@ (800b490 <std+0x64>)
 800b45e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b460:	4b0c      	ldr	r3, [pc, #48]	@ (800b494 <std+0x68>)
 800b462:	429c      	cmp	r4, r3
 800b464:	d006      	beq.n	800b474 <std+0x48>
 800b466:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b46a:	4294      	cmp	r4, r2
 800b46c:	d002      	beq.n	800b474 <std+0x48>
 800b46e:	33d0      	adds	r3, #208	@ 0xd0
 800b470:	429c      	cmp	r4, r3
 800b472:	d105      	bne.n	800b480 <std+0x54>
 800b474:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b47c:	f000 b98a 	b.w	800b794 <__retarget_lock_init_recursive>
 800b480:	bd10      	pop	{r4, pc}
 800b482:	bf00      	nop
 800b484:	0800b615 	.word	0x0800b615
 800b488:	0800b637 	.word	0x0800b637
 800b48c:	0800b66f 	.word	0x0800b66f
 800b490:	0800b693 	.word	0x0800b693
 800b494:	200008e0 	.word	0x200008e0

0800b498 <stdio_exit_handler>:
 800b498:	4a02      	ldr	r2, [pc, #8]	@ (800b4a4 <stdio_exit_handler+0xc>)
 800b49a:	4903      	ldr	r1, [pc, #12]	@ (800b4a8 <stdio_exit_handler+0x10>)
 800b49c:	4803      	ldr	r0, [pc, #12]	@ (800b4ac <stdio_exit_handler+0x14>)
 800b49e:	f000 b869 	b.w	800b574 <_fwalk_sglue>
 800b4a2:	bf00      	nop
 800b4a4:	2000000c 	.word	0x2000000c
 800b4a8:	0800e329 	.word	0x0800e329
 800b4ac:	2000001c 	.word	0x2000001c

0800b4b0 <cleanup_stdio>:
 800b4b0:	6841      	ldr	r1, [r0, #4]
 800b4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e4 <cleanup_stdio+0x34>)
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	d001      	beq.n	800b4c0 <cleanup_stdio+0x10>
 800b4bc:	f002 ff34 	bl	800e328 <_fflush_r>
 800b4c0:	68a1      	ldr	r1, [r4, #8]
 800b4c2:	4b09      	ldr	r3, [pc, #36]	@ (800b4e8 <cleanup_stdio+0x38>)
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	d002      	beq.n	800b4ce <cleanup_stdio+0x1e>
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f002 ff2d 	bl	800e328 <_fflush_r>
 800b4ce:	68e1      	ldr	r1, [r4, #12]
 800b4d0:	4b06      	ldr	r3, [pc, #24]	@ (800b4ec <cleanup_stdio+0x3c>)
 800b4d2:	4299      	cmp	r1, r3
 800b4d4:	d004      	beq.n	800b4e0 <cleanup_stdio+0x30>
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4dc:	f002 bf24 	b.w	800e328 <_fflush_r>
 800b4e0:	bd10      	pop	{r4, pc}
 800b4e2:	bf00      	nop
 800b4e4:	200008e0 	.word	0x200008e0
 800b4e8:	20000948 	.word	0x20000948
 800b4ec:	200009b0 	.word	0x200009b0

0800b4f0 <global_stdio_init.part.0>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b520 <global_stdio_init.part.0+0x30>)
 800b4f4:	2104      	movs	r1, #4
 800b4f6:	4c0b      	ldr	r4, [pc, #44]	@ (800b524 <global_stdio_init.part.0+0x34>)
 800b4f8:	4a0b      	ldr	r2, [pc, #44]	@ (800b528 <global_stdio_init.part.0+0x38>)
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f7ff ff94 	bl	800b42c <std>
 800b504:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b508:	2201      	movs	r2, #1
 800b50a:	2109      	movs	r1, #9
 800b50c:	f7ff ff8e 	bl	800b42c <std>
 800b510:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b514:	2202      	movs	r2, #2
 800b516:	2112      	movs	r1, #18
 800b518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b51c:	f7ff bf86 	b.w	800b42c <std>
 800b520:	20000a18 	.word	0x20000a18
 800b524:	200008e0 	.word	0x200008e0
 800b528:	0800b499 	.word	0x0800b499

0800b52c <__sfp_lock_acquire>:
 800b52c:	4801      	ldr	r0, [pc, #4]	@ (800b534 <__sfp_lock_acquire+0x8>)
 800b52e:	f000 b932 	b.w	800b796 <__retarget_lock_acquire_recursive>
 800b532:	bf00      	nop
 800b534:	20000a21 	.word	0x20000a21

0800b538 <__sfp_lock_release>:
 800b538:	4801      	ldr	r0, [pc, #4]	@ (800b540 <__sfp_lock_release+0x8>)
 800b53a:	f000 b92d 	b.w	800b798 <__retarget_lock_release_recursive>
 800b53e:	bf00      	nop
 800b540:	20000a21 	.word	0x20000a21

0800b544 <__sinit>:
 800b544:	b510      	push	{r4, lr}
 800b546:	4604      	mov	r4, r0
 800b548:	f7ff fff0 	bl	800b52c <__sfp_lock_acquire>
 800b54c:	6a23      	ldr	r3, [r4, #32]
 800b54e:	b11b      	cbz	r3, 800b558 <__sinit+0x14>
 800b550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b554:	f7ff bff0 	b.w	800b538 <__sfp_lock_release>
 800b558:	4b04      	ldr	r3, [pc, #16]	@ (800b56c <__sinit+0x28>)
 800b55a:	6223      	str	r3, [r4, #32]
 800b55c:	4b04      	ldr	r3, [pc, #16]	@ (800b570 <__sinit+0x2c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1f5      	bne.n	800b550 <__sinit+0xc>
 800b564:	f7ff ffc4 	bl	800b4f0 <global_stdio_init.part.0>
 800b568:	e7f2      	b.n	800b550 <__sinit+0xc>
 800b56a:	bf00      	nop
 800b56c:	0800b4b1 	.word	0x0800b4b1
 800b570:	20000a18 	.word	0x20000a18

0800b574 <_fwalk_sglue>:
 800b574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b578:	4607      	mov	r7, r0
 800b57a:	4688      	mov	r8, r1
 800b57c:	4614      	mov	r4, r2
 800b57e:	2600      	movs	r6, #0
 800b580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b584:	f1b9 0901 	subs.w	r9, r9, #1
 800b588:	d505      	bpl.n	800b596 <_fwalk_sglue+0x22>
 800b58a:	6824      	ldr	r4, [r4, #0]
 800b58c:	2c00      	cmp	r4, #0
 800b58e:	d1f7      	bne.n	800b580 <_fwalk_sglue+0xc>
 800b590:	4630      	mov	r0, r6
 800b592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d907      	bls.n	800b5ac <_fwalk_sglue+0x38>
 800b59c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	d003      	beq.n	800b5ac <_fwalk_sglue+0x38>
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	47c0      	blx	r8
 800b5aa:	4306      	orrs	r6, r0
 800b5ac:	3568      	adds	r5, #104	@ 0x68
 800b5ae:	e7e9      	b.n	800b584 <_fwalk_sglue+0x10>

0800b5b0 <iprintf>:
 800b5b0:	b40f      	push	{r0, r1, r2, r3}
 800b5b2:	b507      	push	{r0, r1, r2, lr}
 800b5b4:	4906      	ldr	r1, [pc, #24]	@ (800b5d0 <iprintf+0x20>)
 800b5b6:	ab04      	add	r3, sp, #16
 800b5b8:	6808      	ldr	r0, [r1, #0]
 800b5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5be:	6881      	ldr	r1, [r0, #8]
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f002 fd15 	bl	800dff0 <_vfiprintf_r>
 800b5c6:	b003      	add	sp, #12
 800b5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5cc:	b004      	add	sp, #16
 800b5ce:	4770      	bx	lr
 800b5d0:	20000018 	.word	0x20000018

0800b5d4 <siprintf>:
 800b5d4:	b40e      	push	{r1, r2, r3}
 800b5d6:	b500      	push	{lr}
 800b5d8:	b09c      	sub	sp, #112	@ 0x70
 800b5da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b5de:	ab1d      	add	r3, sp, #116	@ 0x74
 800b5e0:	9002      	str	r0, [sp, #8]
 800b5e2:	9006      	str	r0, [sp, #24]
 800b5e4:	9107      	str	r1, [sp, #28]
 800b5e6:	9104      	str	r1, [sp, #16]
 800b5e8:	4808      	ldr	r0, [pc, #32]	@ (800b60c <siprintf+0x38>)
 800b5ea:	4909      	ldr	r1, [pc, #36]	@ (800b610 <siprintf+0x3c>)
 800b5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f0:	9105      	str	r1, [sp, #20]
 800b5f2:	a902      	add	r1, sp, #8
 800b5f4:	6800      	ldr	r0, [r0, #0]
 800b5f6:	9301      	str	r3, [sp, #4]
 800b5f8:	f002 fbd4 	bl	800dda4 <_svfiprintf_r>
 800b5fc:	9b02      	ldr	r3, [sp, #8]
 800b5fe:	2200      	movs	r2, #0
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	b01c      	add	sp, #112	@ 0x70
 800b604:	f85d eb04 	ldr.w	lr, [sp], #4
 800b608:	b003      	add	sp, #12
 800b60a:	4770      	bx	lr
 800b60c:	20000018 	.word	0x20000018
 800b610:	ffff0208 	.word	0xffff0208

0800b614 <__sread>:
 800b614:	b510      	push	{r4, lr}
 800b616:	460c      	mov	r4, r1
 800b618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61c:	f000 f86c 	bl	800b6f8 <_read_r>
 800b620:	2800      	cmp	r0, #0
 800b622:	bfab      	itete	ge
 800b624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b626:	89a3      	ldrhlt	r3, [r4, #12]
 800b628:	181b      	addge	r3, r3, r0
 800b62a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b62e:	bfac      	ite	ge
 800b630:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b632:	81a3      	strhlt	r3, [r4, #12]
 800b634:	bd10      	pop	{r4, pc}

0800b636 <__swrite>:
 800b636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	461f      	mov	r7, r3
 800b63c:	898b      	ldrh	r3, [r1, #12]
 800b63e:	4605      	mov	r5, r0
 800b640:	460c      	mov	r4, r1
 800b642:	05db      	lsls	r3, r3, #23
 800b644:	4616      	mov	r6, r2
 800b646:	d505      	bpl.n	800b654 <__swrite+0x1e>
 800b648:	2302      	movs	r3, #2
 800b64a:	2200      	movs	r2, #0
 800b64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b650:	f000 f840 	bl	800b6d4 <_lseek_r>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	4632      	mov	r2, r6
 800b658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b65c:	4628      	mov	r0, r5
 800b65e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b662:	81a3      	strh	r3, [r4, #12]
 800b664:	463b      	mov	r3, r7
 800b666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b66a:	f000 b857 	b.w	800b71c <_write_r>

0800b66e <__sseek>:
 800b66e:	b510      	push	{r4, lr}
 800b670:	460c      	mov	r4, r1
 800b672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b676:	f000 f82d 	bl	800b6d4 <_lseek_r>
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	bf15      	itete	ne
 800b680:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b682:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b686:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b68a:	81a3      	strheq	r3, [r4, #12]
 800b68c:	bf18      	it	ne
 800b68e:	81a3      	strhne	r3, [r4, #12]
 800b690:	bd10      	pop	{r4, pc}

0800b692 <__sclose>:
 800b692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b696:	f000 b80d 	b.w	800b6b4 <_close_r>

0800b69a <memset>:
 800b69a:	4402      	add	r2, r0
 800b69c:	4603      	mov	r3, r0
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d100      	bne.n	800b6a4 <memset+0xa>
 800b6a2:	4770      	bx	lr
 800b6a4:	f803 1b01 	strb.w	r1, [r3], #1
 800b6a8:	e7f9      	b.n	800b69e <memset+0x4>
	...

0800b6ac <_localeconv_r>:
 800b6ac:	4800      	ldr	r0, [pc, #0]	@ (800b6b0 <_localeconv_r+0x4>)
 800b6ae:	4770      	bx	lr
 800b6b0:	20000158 	.word	0x20000158

0800b6b4 <_close_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	4d05      	ldr	r5, [pc, #20]	@ (800b6d0 <_close_r+0x1c>)
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	602b      	str	r3, [r5, #0]
 800b6c0:	f7f7 f94c 	bl	800295c <_close>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_close_r+0x1a>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_close_r+0x1a>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	20000a1c 	.word	0x20000a1c

0800b6d4 <_lseek_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4d06      	ldr	r5, [pc, #24]	@ (800b6f4 <_lseek_r+0x20>)
 800b6da:	4608      	mov	r0, r1
 800b6dc:	4611      	mov	r1, r2
 800b6de:	2200      	movs	r2, #0
 800b6e0:	602a      	str	r2, [r5, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	f7f7 f961 	bl	80029aa <_lseek>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	d102      	bne.n	800b6f2 <_lseek_r+0x1e>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	b103      	cbz	r3, 800b6f2 <_lseek_r+0x1e>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	20000a1c 	.word	0x20000a1c

0800b6f8 <_read_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4d06      	ldr	r5, [pc, #24]	@ (800b718 <_read_r+0x20>)
 800b6fe:	4608      	mov	r0, r1
 800b700:	4611      	mov	r1, r2
 800b702:	2200      	movs	r2, #0
 800b704:	602a      	str	r2, [r5, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	f7f7 f90b 	bl	8002922 <_read>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d102      	bne.n	800b716 <_read_r+0x1e>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	b103      	cbz	r3, 800b716 <_read_r+0x1e>
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	bd38      	pop	{r3, r4, r5, pc}
 800b718:	20000a1c 	.word	0x20000a1c

0800b71c <_write_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4604      	mov	r4, r0
 800b720:	4d06      	ldr	r5, [pc, #24]	@ (800b73c <_write_r+0x20>)
 800b722:	4608      	mov	r0, r1
 800b724:	4611      	mov	r1, r2
 800b726:	2200      	movs	r2, #0
 800b728:	602a      	str	r2, [r5, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f7f6 faf0 	bl	8001d10 <_write>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_write_r+0x1e>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_write_r+0x1e>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	20000a1c 	.word	0x20000a1c

0800b740 <__errno>:
 800b740:	4b01      	ldr	r3, [pc, #4]	@ (800b748 <__errno+0x8>)
 800b742:	6818      	ldr	r0, [r3, #0]
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	20000018 	.word	0x20000018

0800b74c <__libc_init_array>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	4d0d      	ldr	r5, [pc, #52]	@ (800b784 <__libc_init_array+0x38>)
 800b750:	2600      	movs	r6, #0
 800b752:	4c0d      	ldr	r4, [pc, #52]	@ (800b788 <__libc_init_array+0x3c>)
 800b754:	1b64      	subs	r4, r4, r5
 800b756:	10a4      	asrs	r4, r4, #2
 800b758:	42a6      	cmp	r6, r4
 800b75a:	d109      	bne.n	800b770 <__libc_init_array+0x24>
 800b75c:	4d0b      	ldr	r5, [pc, #44]	@ (800b78c <__libc_init_array+0x40>)
 800b75e:	2600      	movs	r6, #0
 800b760:	4c0b      	ldr	r4, [pc, #44]	@ (800b790 <__libc_init_array+0x44>)
 800b762:	f003 fb8f 	bl	800ee84 <_init>
 800b766:	1b64      	subs	r4, r4, r5
 800b768:	10a4      	asrs	r4, r4, #2
 800b76a:	42a6      	cmp	r6, r4
 800b76c:	d105      	bne.n	800b77a <__libc_init_array+0x2e>
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	f855 3b04 	ldr.w	r3, [r5], #4
 800b774:	3601      	adds	r6, #1
 800b776:	4798      	blx	r3
 800b778:	e7ee      	b.n	800b758 <__libc_init_array+0xc>
 800b77a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b77e:	3601      	adds	r6, #1
 800b780:	4798      	blx	r3
 800b782:	e7f2      	b.n	800b76a <__libc_init_array+0x1e>
 800b784:	0800f4b8 	.word	0x0800f4b8
 800b788:	0800f4b8 	.word	0x0800f4b8
 800b78c:	0800f4b8 	.word	0x0800f4b8
 800b790:	0800f4bc 	.word	0x0800f4bc

0800b794 <__retarget_lock_init_recursive>:
 800b794:	4770      	bx	lr

0800b796 <__retarget_lock_acquire_recursive>:
 800b796:	4770      	bx	lr

0800b798 <__retarget_lock_release_recursive>:
 800b798:	4770      	bx	lr

0800b79a <memchr>:
 800b79a:	b2c9      	uxtb	r1, r1
 800b79c:	4603      	mov	r3, r0
 800b79e:	4402      	add	r2, r0
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	d101      	bne.n	800b7ac <memchr+0x12>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	e003      	b.n	800b7b4 <memchr+0x1a>
 800b7ac:	7804      	ldrb	r4, [r0, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	428c      	cmp	r4, r1
 800b7b2:	d1f6      	bne.n	800b7a2 <memchr+0x8>
 800b7b4:	bd10      	pop	{r4, pc}
	...

0800b7b8 <nanf>:
 800b7b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b7c0 <nanf+0x8>
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	7fc00000 	.word	0x7fc00000

0800b7c4 <quorem>:
 800b7c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c8:	6903      	ldr	r3, [r0, #16]
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	690c      	ldr	r4, [r1, #16]
 800b7ce:	42a3      	cmp	r3, r4
 800b7d0:	f2c0 8083 	blt.w	800b8da <quorem+0x116>
 800b7d4:	3c01      	subs	r4, #1
 800b7d6:	f100 0514 	add.w	r5, r0, #20
 800b7da:	f101 0814 	add.w	r8, r1, #20
 800b7de:	00a3      	lsls	r3, r4, #2
 800b7e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7fc:	d331      	bcc.n	800b862 <quorem+0x9e>
 800b7fe:	f04f 0a00 	mov.w	sl, #0
 800b802:	46c4      	mov	ip, r8
 800b804:	46ae      	mov	lr, r5
 800b806:	46d3      	mov	fp, sl
 800b808:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b80c:	b298      	uxth	r0, r3
 800b80e:	45e1      	cmp	r9, ip
 800b810:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b814:	fb06 a000 	mla	r0, r6, r0, sl
 800b818:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800b81c:	b280      	uxth	r0, r0
 800b81e:	fb06 2303 	mla	r3, r6, r3, r2
 800b822:	f8de 2000 	ldr.w	r2, [lr]
 800b826:	b292      	uxth	r2, r2
 800b828:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b82c:	eba2 0200 	sub.w	r2, r2, r0
 800b830:	b29b      	uxth	r3, r3
 800b832:	f8de 0000 	ldr.w	r0, [lr]
 800b836:	445a      	add	r2, fp
 800b838:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b83c:	b292      	uxth	r2, r2
 800b83e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b842:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b846:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b84a:	f84e 2b04 	str.w	r2, [lr], #4
 800b84e:	d2db      	bcs.n	800b808 <quorem+0x44>
 800b850:	9b00      	ldr	r3, [sp, #0]
 800b852:	58eb      	ldr	r3, [r5, r3]
 800b854:	b92b      	cbnz	r3, 800b862 <quorem+0x9e>
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	3b04      	subs	r3, #4
 800b85a:	429d      	cmp	r5, r3
 800b85c:	461a      	mov	r2, r3
 800b85e:	d330      	bcc.n	800b8c2 <quorem+0xfe>
 800b860:	613c      	str	r4, [r7, #16]
 800b862:	4638      	mov	r0, r7
 800b864:	f001 f9c6 	bl	800cbf4 <__mcmp>
 800b868:	2800      	cmp	r0, #0
 800b86a:	db26      	blt.n	800b8ba <quorem+0xf6>
 800b86c:	4629      	mov	r1, r5
 800b86e:	2000      	movs	r0, #0
 800b870:	f858 2b04 	ldr.w	r2, [r8], #4
 800b874:	f8d1 c000 	ldr.w	ip, [r1]
 800b878:	fa1f fe82 	uxth.w	lr, r2
 800b87c:	45c1      	cmp	r9, r8
 800b87e:	fa1f f38c 	uxth.w	r3, ip
 800b882:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b886:	eba3 030e 	sub.w	r3, r3, lr
 800b88a:	4403      	add	r3, r0
 800b88c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b890:	b29b      	uxth	r3, r3
 800b892:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b89a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b89e:	f841 3b04 	str.w	r3, [r1], #4
 800b8a2:	d2e5      	bcs.n	800b870 <quorem+0xac>
 800b8a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8ac:	b922      	cbnz	r2, 800b8b8 <quorem+0xf4>
 800b8ae:	3b04      	subs	r3, #4
 800b8b0:	429d      	cmp	r5, r3
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	d30b      	bcc.n	800b8ce <quorem+0x10a>
 800b8b6:	613c      	str	r4, [r7, #16]
 800b8b8:	3601      	adds	r6, #1
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	b003      	add	sp, #12
 800b8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c2:	6812      	ldr	r2, [r2, #0]
 800b8c4:	3b04      	subs	r3, #4
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	d1ca      	bne.n	800b860 <quorem+0x9c>
 800b8ca:	3c01      	subs	r4, #1
 800b8cc:	e7c5      	b.n	800b85a <quorem+0x96>
 800b8ce:	6812      	ldr	r2, [r2, #0]
 800b8d0:	3b04      	subs	r3, #4
 800b8d2:	2a00      	cmp	r2, #0
 800b8d4:	d1ef      	bne.n	800b8b6 <quorem+0xf2>
 800b8d6:	3c01      	subs	r4, #1
 800b8d8:	e7ea      	b.n	800b8b0 <quorem+0xec>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	e7ee      	b.n	800b8bc <quorem+0xf8>
	...

0800b8e0 <_dtoa_r>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	69c7      	ldr	r7, [r0, #28]
 800b8e6:	b099      	sub	sp, #100	@ 0x64
 800b8e8:	4683      	mov	fp, r0
 800b8ea:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b8ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8f2:	ec55 4b10 	vmov	r4, r5, d0
 800b8f6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8fa:	b97f      	cbnz	r7, 800b91c <_dtoa_r+0x3c>
 800b8fc:	2010      	movs	r0, #16
 800b8fe:	f000 fdfd 	bl	800c4fc <malloc>
 800b902:	4602      	mov	r2, r0
 800b904:	f8cb 001c 	str.w	r0, [fp, #28]
 800b908:	b920      	cbnz	r0, 800b914 <_dtoa_r+0x34>
 800b90a:	4ba7      	ldr	r3, [pc, #668]	@ (800bba8 <_dtoa_r+0x2c8>)
 800b90c:	21ef      	movs	r1, #239	@ 0xef
 800b90e:	48a7      	ldr	r0, [pc, #668]	@ (800bbac <_dtoa_r+0x2cc>)
 800b910:	f002 fe1a 	bl	800e548 <__assert_func>
 800b914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b918:	6007      	str	r7, [r0, #0]
 800b91a:	60c7      	str	r7, [r0, #12]
 800b91c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b920:	6819      	ldr	r1, [r3, #0]
 800b922:	b159      	cbz	r1, 800b93c <_dtoa_r+0x5c>
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	2301      	movs	r3, #1
 800b928:	4658      	mov	r0, fp
 800b92a:	4093      	lsls	r3, r2
 800b92c:	604a      	str	r2, [r1, #4]
 800b92e:	608b      	str	r3, [r1, #8]
 800b930:	f000 feda 	bl	800c6e8 <_Bfree>
 800b934:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	1e2b      	subs	r3, r5, #0
 800b93e:	bfb7      	itett	lt
 800b940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b944:	2300      	movge	r3, #0
 800b946:	2201      	movlt	r2, #1
 800b948:	9303      	strlt	r3, [sp, #12]
 800b94a:	bfa8      	it	ge
 800b94c:	6033      	strge	r3, [r6, #0]
 800b94e:	9f03      	ldr	r7, [sp, #12]
 800b950:	4b97      	ldr	r3, [pc, #604]	@ (800bbb0 <_dtoa_r+0x2d0>)
 800b952:	bfb8      	it	lt
 800b954:	6032      	strlt	r2, [r6, #0]
 800b956:	43bb      	bics	r3, r7
 800b958:	d112      	bne.n	800b980 <_dtoa_r+0xa0>
 800b95a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b95e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b966:	4323      	orrs	r3, r4
 800b968:	f000 854c 	beq.w	800c404 <_dtoa_r+0xb24>
 800b96c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b96e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bbc4 <_dtoa_r+0x2e4>
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 854e 	beq.w	800c414 <_dtoa_r+0xb34>
 800b978:	f10a 0303 	add.w	r3, sl, #3
 800b97c:	f000 bd48 	b.w	800c410 <_dtoa_r+0xb30>
 800b980:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b984:	2200      	movs	r2, #0
 800b986:	2300      	movs	r3, #0
 800b988:	ec51 0b17 	vmov	r0, r1, d7
 800b98c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b990:	f7f5 f89e 	bl	8000ad0 <__aeabi_dcmpeq>
 800b994:	4680      	mov	r8, r0
 800b996:	b158      	cbz	r0, 800b9b0 <_dtoa_r+0xd0>
 800b998:	2301      	movs	r3, #1
 800b99a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9a0:	b113      	cbz	r3, 800b9a8 <_dtoa_r+0xc8>
 800b9a2:	4b84      	ldr	r3, [pc, #528]	@ (800bbb4 <_dtoa_r+0x2d4>)
 800b9a4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b9a6:	6013      	str	r3, [r2, #0]
 800b9a8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800bbc8 <_dtoa_r+0x2e8>
 800b9ac:	f000 bd32 	b.w	800c414 <_dtoa_r+0xb34>
 800b9b0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b9b4:	aa16      	add	r2, sp, #88	@ 0x58
 800b9b6:	a917      	add	r1, sp, #92	@ 0x5c
 800b9b8:	4658      	mov	r0, fp
 800b9ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b9be:	f001 fa41 	bl	800ce44 <__d2b>
 800b9c2:	4681      	mov	r9, r0
 800b9c4:	2e00      	cmp	r6, #0
 800b9c6:	d075      	beq.n	800bab4 <_dtoa_r+0x1d4>
 800b9c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9ca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b9ce:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b9d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9d6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9de:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4b74      	ldr	r3, [pc, #464]	@ (800bbb8 <_dtoa_r+0x2d8>)
 800b9e8:	f7f4 fc52 	bl	8000290 <__aeabi_dsub>
 800b9ec:	a368      	add	r3, pc, #416	@ (adr r3, 800bb90 <_dtoa_r+0x2b0>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f7f4 fe05 	bl	8000600 <__aeabi_dmul>
 800b9f6:	a368      	add	r3, pc, #416	@ (adr r3, 800bb98 <_dtoa_r+0x2b8>)
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f7f4 fc4a 	bl	8000294 <__adddf3>
 800ba00:	4604      	mov	r4, r0
 800ba02:	460d      	mov	r5, r1
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7f4 fd91 	bl	800052c <__aeabi_i2d>
 800ba0a:	a365      	add	r3, pc, #404	@ (adr r3, 800bba0 <_dtoa_r+0x2c0>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fdf6 	bl	8000600 <__aeabi_dmul>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f4 fc3a 	bl	8000294 <__adddf3>
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	f7f5 f89c 	bl	8000b60 <__aeabi_d2iz>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f5 f857 	bl	8000ae4 <__aeabi_dcmplt>
 800ba36:	b140      	cbz	r0, 800ba4a <_dtoa_r+0x16a>
 800ba38:	4638      	mov	r0, r7
 800ba3a:	f7f4 fd77 	bl	800052c <__aeabi_i2d>
 800ba3e:	4622      	mov	r2, r4
 800ba40:	462b      	mov	r3, r5
 800ba42:	f7f5 f845 	bl	8000ad0 <__aeabi_dcmpeq>
 800ba46:	b900      	cbnz	r0, 800ba4a <_dtoa_r+0x16a>
 800ba48:	3f01      	subs	r7, #1
 800ba4a:	2f16      	cmp	r7, #22
 800ba4c:	d851      	bhi.n	800baf2 <_dtoa_r+0x212>
 800ba4e:	4b5b      	ldr	r3, [pc, #364]	@ (800bbbc <_dtoa_r+0x2dc>)
 800ba50:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f7f5 f842 	bl	8000ae4 <__aeabi_dcmplt>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d048      	beq.n	800baf6 <_dtoa_r+0x216>
 800ba64:	3f01      	subs	r7, #1
 800ba66:	2300      	movs	r3, #0
 800ba68:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba6a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba6c:	1b9b      	subs	r3, r3, r6
 800ba6e:	1e5a      	subs	r2, r3, #1
 800ba70:	bf46      	itte	mi
 800ba72:	f1c3 0801 	rsbmi	r8, r3, #1
 800ba76:	2300      	movmi	r3, #0
 800ba78:	f04f 0800 	movpl.w	r8, #0
 800ba7c:	9208      	str	r2, [sp, #32]
 800ba7e:	bf48      	it	mi
 800ba80:	9308      	strmi	r3, [sp, #32]
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	db39      	blt.n	800bafa <_dtoa_r+0x21a>
 800ba86:	9b08      	ldr	r3, [sp, #32]
 800ba88:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ba8a:	443b      	add	r3, r7
 800ba8c:	9308      	str	r3, [sp, #32]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba94:	2b09      	cmp	r3, #9
 800ba96:	d864      	bhi.n	800bb62 <_dtoa_r+0x282>
 800ba98:	2b05      	cmp	r3, #5
 800ba9a:	bfc5      	ittet	gt
 800ba9c:	3b04      	subgt	r3, #4
 800ba9e:	2400      	movgt	r4, #0
 800baa0:	2401      	movle	r4, #1
 800baa2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800baa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa6:	3b02      	subs	r3, #2
 800baa8:	2b03      	cmp	r3, #3
 800baaa:	d865      	bhi.n	800bb78 <_dtoa_r+0x298>
 800baac:	e8df f003 	tbb	[pc, r3]
 800bab0:	5737392c 	.word	0x5737392c
 800bab4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bab8:	441e      	add	r6, r3
 800baba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800babe:	2b20      	cmp	r3, #32
 800bac0:	bfc9      	itett	gt
 800bac2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bac6:	f1c3 0320 	rsble	r3, r3, #32
 800baca:	409f      	lslgt	r7, r3
 800bacc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bad0:	bfd8      	it	le
 800bad2:	fa04 f003 	lslle.w	r0, r4, r3
 800bad6:	f106 36ff 	add.w	r6, r6, #4294967295
 800bada:	bfc4      	itt	gt
 800badc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bae0:	ea47 0003 	orrgt.w	r0, r7, r3
 800bae4:	f7f4 fd12 	bl	800050c <__aeabi_ui2d>
 800bae8:	2201      	movs	r2, #1
 800baea:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800baee:	9214      	str	r2, [sp, #80]	@ 0x50
 800baf0:	e777      	b.n	800b9e2 <_dtoa_r+0x102>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7b8      	b.n	800ba68 <_dtoa_r+0x188>
 800baf6:	9012      	str	r0, [sp, #72]	@ 0x48
 800baf8:	e7b7      	b.n	800ba6a <_dtoa_r+0x18a>
 800bafa:	427b      	negs	r3, r7
 800bafc:	eba8 0807 	sub.w	r8, r8, r7
 800bb00:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb02:	2300      	movs	r3, #0
 800bb04:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb06:	e7c4      	b.n	800ba92 <_dtoa_r+0x1b2>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dc35      	bgt.n	800bb7e <_dtoa_r+0x29e>
 800bb12:	2301      	movs	r3, #1
 800bb14:	461a      	mov	r2, r3
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	9307      	str	r3, [sp, #28]
 800bb1a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb1c:	e00b      	b.n	800bb36 <_dtoa_r+0x256>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e7f3      	b.n	800bb0a <_dtoa_r+0x22a>
 800bb22:	2300      	movs	r3, #0
 800bb24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb28:	18fb      	adds	r3, r7, r3
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	9307      	str	r3, [sp, #28]
 800bb32:	bfb8      	it	lt
 800bb34:	2301      	movlt	r3, #1
 800bb36:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	2204      	movs	r2, #4
 800bb3e:	f102 0514 	add.w	r5, r2, #20
 800bb42:	429d      	cmp	r5, r3
 800bb44:	d91f      	bls.n	800bb86 <_dtoa_r+0x2a6>
 800bb46:	6041      	str	r1, [r0, #4]
 800bb48:	4658      	mov	r0, fp
 800bb4a:	f000 fd8d 	bl	800c668 <_Balloc>
 800bb4e:	4682      	mov	sl, r0
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d13b      	bne.n	800bbcc <_dtoa_r+0x2ec>
 800bb54:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc0 <_dtoa_r+0x2e0>)
 800bb56:	4602      	mov	r2, r0
 800bb58:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb5c:	e6d7      	b.n	800b90e <_dtoa_r+0x2e>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e7e0      	b.n	800bb24 <_dtoa_r+0x244>
 800bb62:	2401      	movs	r4, #1
 800bb64:	2300      	movs	r3, #0
 800bb66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb68:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6e:	2200      	movs	r2, #0
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	2312      	movs	r3, #18
 800bb76:	e7d0      	b.n	800bb1a <_dtoa_r+0x23a>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb7c:	e7f5      	b.n	800bb6a <_dtoa_r+0x28a>
 800bb7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	9307      	str	r3, [sp, #28]
 800bb84:	e7d7      	b.n	800bb36 <_dtoa_r+0x256>
 800bb86:	3101      	adds	r1, #1
 800bb88:	0052      	lsls	r2, r2, #1
 800bb8a:	e7d8      	b.n	800bb3e <_dtoa_r+0x25e>
 800bb8c:	f3af 8000 	nop.w
 800bb90:	636f4361 	.word	0x636f4361
 800bb94:	3fd287a7 	.word	0x3fd287a7
 800bb98:	8b60c8b3 	.word	0x8b60c8b3
 800bb9c:	3fc68a28 	.word	0x3fc68a28
 800bba0:	509f79fb 	.word	0x509f79fb
 800bba4:	3fd34413 	.word	0x3fd34413
 800bba8:	0800f0c6 	.word	0x0800f0c6
 800bbac:	0800f0dd 	.word	0x0800f0dd
 800bbb0:	7ff00000 	.word	0x7ff00000
 800bbb4:	0800f091 	.word	0x0800f091
 800bbb8:	3ff80000 	.word	0x3ff80000
 800bbbc:	0800f1d8 	.word	0x0800f1d8
 800bbc0:	0800f135 	.word	0x0800f135
 800bbc4:	0800f0c2 	.word	0x0800f0c2
 800bbc8:	0800f090 	.word	0x0800f090
 800bbcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bbd0:	6018      	str	r0, [r3, #0]
 800bbd2:	9b07      	ldr	r3, [sp, #28]
 800bbd4:	2b0e      	cmp	r3, #14
 800bbd6:	f200 80a4 	bhi.w	800bd22 <_dtoa_r+0x442>
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	f000 80a1 	beq.w	800bd22 <_dtoa_r+0x442>
 800bbe0:	2f00      	cmp	r7, #0
 800bbe2:	dd33      	ble.n	800bc4c <_dtoa_r+0x36c>
 800bbe4:	f007 020f 	and.w	r2, r7, #15
 800bbe8:	4bac      	ldr	r3, [pc, #688]	@ (800be9c <_dtoa_r+0x5bc>)
 800bbea:	05f8      	lsls	r0, r7, #23
 800bbec:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bbf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbf4:	ed93 7b00 	vldr	d7, [r3]
 800bbf8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bbfc:	d516      	bpl.n	800bc2c <_dtoa_r+0x34c>
 800bbfe:	4ba8      	ldr	r3, [pc, #672]	@ (800bea0 <_dtoa_r+0x5c0>)
 800bc00:	f004 040f 	and.w	r4, r4, #15
 800bc04:	2603      	movs	r6, #3
 800bc06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc0e:	f7f4 fe21 	bl	8000854 <__aeabi_ddiv>
 800bc12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc16:	4da2      	ldr	r5, [pc, #648]	@ (800bea0 <_dtoa_r+0x5c0>)
 800bc18:	b954      	cbnz	r4, 800bc30 <_dtoa_r+0x350>
 800bc1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc22:	f7f4 fe17 	bl	8000854 <__aeabi_ddiv>
 800bc26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc2a:	e028      	b.n	800bc7e <_dtoa_r+0x39e>
 800bc2c:	2602      	movs	r6, #2
 800bc2e:	e7f2      	b.n	800bc16 <_dtoa_r+0x336>
 800bc30:	07e1      	lsls	r1, r4, #31
 800bc32:	d508      	bpl.n	800bc46 <_dtoa_r+0x366>
 800bc34:	3601      	adds	r6, #1
 800bc36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc3e:	f7f4 fcdf 	bl	8000600 <__aeabi_dmul>
 800bc42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc46:	1064      	asrs	r4, r4, #1
 800bc48:	3508      	adds	r5, #8
 800bc4a:	e7e5      	b.n	800bc18 <_dtoa_r+0x338>
 800bc4c:	f000 80d2 	beq.w	800bdf4 <_dtoa_r+0x514>
 800bc50:	427c      	negs	r4, r7
 800bc52:	4b92      	ldr	r3, [pc, #584]	@ (800be9c <_dtoa_r+0x5bc>)
 800bc54:	4d92      	ldr	r5, [pc, #584]	@ (800bea0 <_dtoa_r+0x5c0>)
 800bc56:	2602      	movs	r6, #2
 800bc58:	f004 020f 	and.w	r2, r4, #15
 800bc5c:	1124      	asrs	r4, r4, #4
 800bc5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f7f4 fcc9 	bl	8000600 <__aeabi_dmul>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	f040 80b2 	bne.w	800bdde <_dtoa_r+0x4fe>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1d3      	bne.n	800bc26 <_dtoa_r+0x346>
 800bc7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 80b7 	beq.w	800bdf8 <_dtoa_r+0x518>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4b85      	ldr	r3, [pc, #532]	@ (800bea4 <_dtoa_r+0x5c4>)
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	f7f4 ff27 	bl	8000ae4 <__aeabi_dcmplt>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	f000 80ae 	beq.w	800bdf8 <_dtoa_r+0x518>
 800bc9c:	9b07      	ldr	r3, [sp, #28]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 80aa 	beq.w	800bdf8 <_dtoa_r+0x518>
 800bca4:	9b00      	ldr	r3, [sp, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	dd37      	ble.n	800bd1a <_dtoa_r+0x43a>
 800bcaa:	1e7b      	subs	r3, r7, #1
 800bcac:	4620      	mov	r0, r4
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	9304      	str	r3, [sp, #16]
 800bcb4:	3601      	adds	r6, #1
 800bcb6:	4b7c      	ldr	r3, [pc, #496]	@ (800bea8 <_dtoa_r+0x5c8>)
 800bcb8:	f7f4 fca2 	bl	8000600 <__aeabi_dmul>
 800bcbc:	9c00      	ldr	r4, [sp, #0]
 800bcbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7f4 fc32 	bl	800052c <__aeabi_i2d>
 800bcc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bccc:	f7f4 fc98 	bl	8000600 <__aeabi_dmul>
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4b76      	ldr	r3, [pc, #472]	@ (800beac <_dtoa_r+0x5cc>)
 800bcd4:	f7f4 fade 	bl	8000294 <__adddf3>
 800bcd8:	4605      	mov	r5, r0
 800bcda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bcde:	2c00      	cmp	r4, #0
 800bce0:	f040 808d 	bne.w	800bdfe <_dtoa_r+0x51e>
 800bce4:	2200      	movs	r2, #0
 800bce6:	4b72      	ldr	r3, [pc, #456]	@ (800beb0 <_dtoa_r+0x5d0>)
 800bce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcec:	f7f4 fad0 	bl	8000290 <__aeabi_dsub>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	4633      	mov	r3, r6
 800bcfc:	f7f4 ff10 	bl	8000b20 <__aeabi_dcmpgt>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	f040 828b 	bne.w	800c21c <_dtoa_r+0x93c>
 800bd06:	462a      	mov	r2, r5
 800bd08:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd10:	f7f4 fee8 	bl	8000ae4 <__aeabi_dcmplt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f040 8128 	bne.w	800bf6a <_dtoa_r+0x68a>
 800bd1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bd1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f2c0 815a 	blt.w	800bfde <_dtoa_r+0x6fe>
 800bd2a:	2f0e      	cmp	r7, #14
 800bd2c:	f300 8157 	bgt.w	800bfde <_dtoa_r+0x6fe>
 800bd30:	4b5a      	ldr	r3, [pc, #360]	@ (800be9c <_dtoa_r+0x5bc>)
 800bd32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd36:	ed93 7b00 	vldr	d7, [r3]
 800bd3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	ed8d 7b00 	vstr	d7, [sp]
 800bd42:	da03      	bge.n	800bd4c <_dtoa_r+0x46c>
 800bd44:	9b07      	ldr	r3, [sp, #28]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f340 8101 	ble.w	800bf4e <_dtoa_r+0x66e>
 800bd4c:	4656      	mov	r6, sl
 800bd4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd56:	4620      	mov	r0, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	f7f4 fd7b 	bl	8000854 <__aeabi_ddiv>
 800bd5e:	f7f4 feff 	bl	8000b60 <__aeabi_d2iz>
 800bd62:	4680      	mov	r8, r0
 800bd64:	f7f4 fbe2 	bl	800052c <__aeabi_i2d>
 800bd68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd6c:	f7f4 fc48 	bl	8000600 <__aeabi_dmul>
 800bd70:	4602      	mov	r2, r0
 800bd72:	4620      	mov	r0, r4
 800bd74:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	f7f4 fa88 	bl	8000290 <__aeabi_dsub>
 800bd80:	9d07      	ldr	r5, [sp, #28]
 800bd82:	f806 4b01 	strb.w	r4, [r6], #1
 800bd86:	eba6 040a 	sub.w	r4, r6, sl
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	42a5      	cmp	r5, r4
 800bd90:	f040 8117 	bne.w	800bfc2 <_dtoa_r+0x6e2>
 800bd94:	f7f4 fa7e 	bl	8000294 <__adddf3>
 800bd98:	4604      	mov	r4, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bda0:	f7f4 febe 	bl	8000b20 <__aeabi_dcmpgt>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f040 80f9 	bne.w	800bf9c <_dtoa_r+0x6bc>
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb2:	f7f4 fe8d 	bl	8000ad0 <__aeabi_dcmpeq>
 800bdb6:	b118      	cbz	r0, 800bdc0 <_dtoa_r+0x4e0>
 800bdb8:	f018 0f01 	tst.w	r8, #1
 800bdbc:	f040 80ee 	bne.w	800bf9c <_dtoa_r+0x6bc>
 800bdc0:	4649      	mov	r1, r9
 800bdc2:	4658      	mov	r0, fp
 800bdc4:	f000 fc90 	bl	800c6e8 <_Bfree>
 800bdc8:	2300      	movs	r3, #0
 800bdca:	3701      	adds	r7, #1
 800bdcc:	7033      	strb	r3, [r6, #0]
 800bdce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdd0:	601f      	str	r7, [r3, #0]
 800bdd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 831d 	beq.w	800c414 <_dtoa_r+0xb34>
 800bdda:	601e      	str	r6, [r3, #0]
 800bddc:	e31a      	b.n	800c414 <_dtoa_r+0xb34>
 800bdde:	07e2      	lsls	r2, r4, #31
 800bde0:	d505      	bpl.n	800bdee <_dtoa_r+0x50e>
 800bde2:	3601      	adds	r6, #1
 800bde4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bde8:	f7f4 fc0a 	bl	8000600 <__aeabi_dmul>
 800bdec:	2301      	movs	r3, #1
 800bdee:	1064      	asrs	r4, r4, #1
 800bdf0:	3508      	adds	r5, #8
 800bdf2:	e73f      	b.n	800bc74 <_dtoa_r+0x394>
 800bdf4:	2602      	movs	r6, #2
 800bdf6:	e742      	b.n	800bc7e <_dtoa_r+0x39e>
 800bdf8:	9c07      	ldr	r4, [sp, #28]
 800bdfa:	9704      	str	r7, [sp, #16]
 800bdfc:	e761      	b.n	800bcc2 <_dtoa_r+0x3e2>
 800bdfe:	4b27      	ldr	r3, [pc, #156]	@ (800be9c <_dtoa_r+0x5bc>)
 800be00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be06:	4454      	add	r4, sl
 800be08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be0c:	2900      	cmp	r1, #0
 800be0e:	d053      	beq.n	800beb8 <_dtoa_r+0x5d8>
 800be10:	2000      	movs	r0, #0
 800be12:	4928      	ldr	r1, [pc, #160]	@ (800beb4 <_dtoa_r+0x5d4>)
 800be14:	f7f4 fd1e 	bl	8000854 <__aeabi_ddiv>
 800be18:	4633      	mov	r3, r6
 800be1a:	4656      	mov	r6, sl
 800be1c:	462a      	mov	r2, r5
 800be1e:	f7f4 fa37 	bl	8000290 <__aeabi_dsub>
 800be22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be2a:	f7f4 fe99 	bl	8000b60 <__aeabi_d2iz>
 800be2e:	4605      	mov	r5, r0
 800be30:	f7f4 fb7c 	bl	800052c <__aeabi_i2d>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	3530      	adds	r5, #48	@ 0x30
 800be3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3e:	f7f4 fa27 	bl	8000290 <__aeabi_dsub>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	f806 5b01 	strb.w	r5, [r6], #1
 800be4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be52:	f7f4 fe47 	bl	8000ae4 <__aeabi_dcmplt>
 800be56:	2800      	cmp	r0, #0
 800be58:	d171      	bne.n	800bf3e <_dtoa_r+0x65e>
 800be5a:	2000      	movs	r0, #0
 800be5c:	4911      	ldr	r1, [pc, #68]	@ (800bea4 <_dtoa_r+0x5c4>)
 800be5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be62:	f7f4 fa15 	bl	8000290 <__aeabi_dsub>
 800be66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be6a:	f7f4 fe3b 	bl	8000ae4 <__aeabi_dcmplt>
 800be6e:	2800      	cmp	r0, #0
 800be70:	f040 8095 	bne.w	800bf9e <_dtoa_r+0x6be>
 800be74:	42a6      	cmp	r6, r4
 800be76:	f43f af50 	beq.w	800bd1a <_dtoa_r+0x43a>
 800be7a:	2200      	movs	r2, #0
 800be7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bea8 <_dtoa_r+0x5c8>)
 800be7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be82:	f7f4 fbbd 	bl	8000600 <__aeabi_dmul>
 800be86:	2200      	movs	r2, #0
 800be88:	4b07      	ldr	r3, [pc, #28]	@ (800bea8 <_dtoa_r+0x5c8>)
 800be8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be92:	f7f4 fbb5 	bl	8000600 <__aeabi_dmul>
 800be96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be9a:	e7c4      	b.n	800be26 <_dtoa_r+0x546>
 800be9c:	0800f1d8 	.word	0x0800f1d8
 800bea0:	0800f1b0 	.word	0x0800f1b0
 800bea4:	3ff00000 	.word	0x3ff00000
 800bea8:	40240000 	.word	0x40240000
 800beac:	401c0000 	.word	0x401c0000
 800beb0:	40140000 	.word	0x40140000
 800beb4:	3fe00000 	.word	0x3fe00000
 800beb8:	4631      	mov	r1, r6
 800beba:	4656      	mov	r6, sl
 800bebc:	4628      	mov	r0, r5
 800bebe:	f7f4 fb9f 	bl	8000600 <__aeabi_dmul>
 800bec2:	9415      	str	r4, [sp, #84]	@ 0x54
 800bec4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800becc:	f7f4 fe48 	bl	8000b60 <__aeabi_d2iz>
 800bed0:	4605      	mov	r5, r0
 800bed2:	f7f4 fb2b 	bl	800052c <__aeabi_i2d>
 800bed6:	4602      	mov	r2, r0
 800bed8:	3530      	adds	r5, #48	@ 0x30
 800beda:	460b      	mov	r3, r1
 800bedc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee0:	f7f4 f9d6 	bl	8000290 <__aeabi_dsub>
 800bee4:	f806 5b01 	strb.w	r5, [r6], #1
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	42a6      	cmp	r6, r4
 800beee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bef2:	f04f 0200 	mov.w	r2, #0
 800bef6:	d124      	bne.n	800bf42 <_dtoa_r+0x662>
 800bef8:	4bac      	ldr	r3, [pc, #688]	@ (800c1ac <_dtoa_r+0x8cc>)
 800befa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800befe:	f7f4 f9c9 	bl	8000294 <__adddf3>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf0a:	f7f4 fe09 	bl	8000b20 <__aeabi_dcmpgt>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d145      	bne.n	800bf9e <_dtoa_r+0x6be>
 800bf12:	2000      	movs	r0, #0
 800bf14:	49a5      	ldr	r1, [pc, #660]	@ (800c1ac <_dtoa_r+0x8cc>)
 800bf16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf1a:	f7f4 f9b9 	bl	8000290 <__aeabi_dsub>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf26:	f7f4 fddd 	bl	8000ae4 <__aeabi_dcmplt>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	f43f aef5 	beq.w	800bd1a <_dtoa_r+0x43a>
 800bf30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bf32:	1e73      	subs	r3, r6, #1
 800bf34:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf3a:	2b30      	cmp	r3, #48	@ 0x30
 800bf3c:	d0f8      	beq.n	800bf30 <_dtoa_r+0x650>
 800bf3e:	9f04      	ldr	r7, [sp, #16]
 800bf40:	e73e      	b.n	800bdc0 <_dtoa_r+0x4e0>
 800bf42:	4b9b      	ldr	r3, [pc, #620]	@ (800c1b0 <_dtoa_r+0x8d0>)
 800bf44:	f7f4 fb5c 	bl	8000600 <__aeabi_dmul>
 800bf48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf4c:	e7bc      	b.n	800bec8 <_dtoa_r+0x5e8>
 800bf4e:	d10c      	bne.n	800bf6a <_dtoa_r+0x68a>
 800bf50:	2200      	movs	r2, #0
 800bf52:	4b98      	ldr	r3, [pc, #608]	@ (800c1b4 <_dtoa_r+0x8d4>)
 800bf54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf58:	f7f4 fb52 	bl	8000600 <__aeabi_dmul>
 800bf5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf60:	f7f4 fdd4 	bl	8000b0c <__aeabi_dcmpge>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f000 8157 	beq.w	800c218 <_dtoa_r+0x938>
 800bf6a:	2400      	movs	r4, #0
 800bf6c:	4625      	mov	r5, r4
 800bf6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf70:	4656      	mov	r6, sl
 800bf72:	43db      	mvns	r3, r3
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	2700      	movs	r7, #0
 800bf78:	4621      	mov	r1, r4
 800bf7a:	4658      	mov	r0, fp
 800bf7c:	f000 fbb4 	bl	800c6e8 <_Bfree>
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	d0dc      	beq.n	800bf3e <_dtoa_r+0x65e>
 800bf84:	b12f      	cbz	r7, 800bf92 <_dtoa_r+0x6b2>
 800bf86:	42af      	cmp	r7, r5
 800bf88:	d003      	beq.n	800bf92 <_dtoa_r+0x6b2>
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	f000 fbab 	bl	800c6e8 <_Bfree>
 800bf92:	4629      	mov	r1, r5
 800bf94:	4658      	mov	r0, fp
 800bf96:	f000 fba7 	bl	800c6e8 <_Bfree>
 800bf9a:	e7d0      	b.n	800bf3e <_dtoa_r+0x65e>
 800bf9c:	9704      	str	r7, [sp, #16]
 800bf9e:	4633      	mov	r3, r6
 800bfa0:	461e      	mov	r6, r3
 800bfa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfa6:	2a39      	cmp	r2, #57	@ 0x39
 800bfa8:	d107      	bne.n	800bfba <_dtoa_r+0x6da>
 800bfaa:	459a      	cmp	sl, r3
 800bfac:	d1f8      	bne.n	800bfa0 <_dtoa_r+0x6c0>
 800bfae:	9a04      	ldr	r2, [sp, #16]
 800bfb0:	3201      	adds	r2, #1
 800bfb2:	9204      	str	r2, [sp, #16]
 800bfb4:	2230      	movs	r2, #48	@ 0x30
 800bfb6:	f88a 2000 	strb.w	r2, [sl]
 800bfba:	781a      	ldrb	r2, [r3, #0]
 800bfbc:	3201      	adds	r2, #1
 800bfbe:	701a      	strb	r2, [r3, #0]
 800bfc0:	e7bd      	b.n	800bf3e <_dtoa_r+0x65e>
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	4b7a      	ldr	r3, [pc, #488]	@ (800c1b0 <_dtoa_r+0x8d0>)
 800bfc6:	f7f4 fb1b 	bl	8000600 <__aeabi_dmul>
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4604      	mov	r4, r0
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	f7f4 fd7d 	bl	8000ad0 <__aeabi_dcmpeq>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	f43f aebb 	beq.w	800bd52 <_dtoa_r+0x472>
 800bfdc:	e6f0      	b.n	800bdc0 <_dtoa_r+0x4e0>
 800bfde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	f000 80db 	beq.w	800c19c <_dtoa_r+0x8bc>
 800bfe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfe8:	2a01      	cmp	r2, #1
 800bfea:	f300 80bf 	bgt.w	800c16c <_dtoa_r+0x88c>
 800bfee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bff0:	2a00      	cmp	r2, #0
 800bff2:	f000 80b7 	beq.w	800c164 <_dtoa_r+0x884>
 800bff6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bffa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bffc:	4646      	mov	r6, r8
 800bffe:	9a08      	ldr	r2, [sp, #32]
 800c000:	2101      	movs	r1, #1
 800c002:	4658      	mov	r0, fp
 800c004:	4498      	add	r8, r3
 800c006:	441a      	add	r2, r3
 800c008:	9208      	str	r2, [sp, #32]
 800c00a:	f000 fc6d 	bl	800c8e8 <__i2b>
 800c00e:	4605      	mov	r5, r0
 800c010:	b15e      	cbz	r6, 800c02a <_dtoa_r+0x74a>
 800c012:	9b08      	ldr	r3, [sp, #32]
 800c014:	2b00      	cmp	r3, #0
 800c016:	dd08      	ble.n	800c02a <_dtoa_r+0x74a>
 800c018:	42b3      	cmp	r3, r6
 800c01a:	9a08      	ldr	r2, [sp, #32]
 800c01c:	bfa8      	it	ge
 800c01e:	4633      	movge	r3, r6
 800c020:	eba8 0803 	sub.w	r8, r8, r3
 800c024:	1af6      	subs	r6, r6, r3
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	9308      	str	r3, [sp, #32]
 800c02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c02c:	b1f3      	cbz	r3, 800c06c <_dtoa_r+0x78c>
 800c02e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 80b7 	beq.w	800c1a4 <_dtoa_r+0x8c4>
 800c036:	b18c      	cbz	r4, 800c05c <_dtoa_r+0x77c>
 800c038:	4629      	mov	r1, r5
 800c03a:	4622      	mov	r2, r4
 800c03c:	4658      	mov	r0, fp
 800c03e:	f000 fd13 	bl	800ca68 <__pow5mult>
 800c042:	464a      	mov	r2, r9
 800c044:	4601      	mov	r1, r0
 800c046:	4605      	mov	r5, r0
 800c048:	4658      	mov	r0, fp
 800c04a:	f000 fc63 	bl	800c914 <__multiply>
 800c04e:	4649      	mov	r1, r9
 800c050:	9004      	str	r0, [sp, #16]
 800c052:	4658      	mov	r0, fp
 800c054:	f000 fb48 	bl	800c6e8 <_Bfree>
 800c058:	9b04      	ldr	r3, [sp, #16]
 800c05a:	4699      	mov	r9, r3
 800c05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c05e:	1b1a      	subs	r2, r3, r4
 800c060:	d004      	beq.n	800c06c <_dtoa_r+0x78c>
 800c062:	4649      	mov	r1, r9
 800c064:	4658      	mov	r0, fp
 800c066:	f000 fcff 	bl	800ca68 <__pow5mult>
 800c06a:	4681      	mov	r9, r0
 800c06c:	2101      	movs	r1, #1
 800c06e:	4658      	mov	r0, fp
 800c070:	f000 fc3a 	bl	800c8e8 <__i2b>
 800c074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c076:	4604      	mov	r4, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 81cf 	beq.w	800c41c <_dtoa_r+0xb3c>
 800c07e:	461a      	mov	r2, r3
 800c080:	4601      	mov	r1, r0
 800c082:	4658      	mov	r0, fp
 800c084:	f000 fcf0 	bl	800ca68 <__pow5mult>
 800c088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08a:	4604      	mov	r4, r0
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	f300 8095 	bgt.w	800c1bc <_dtoa_r+0x8dc>
 800c092:	9b02      	ldr	r3, [sp, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f040 8087 	bne.w	800c1a8 <_dtoa_r+0x8c8>
 800c09a:	9b03      	ldr	r3, [sp, #12]
 800c09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f040 8089 	bne.w	800c1b8 <_dtoa_r+0x8d8>
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0ac:	0d1b      	lsrs	r3, r3, #20
 800c0ae:	051b      	lsls	r3, r3, #20
 800c0b0:	b12b      	cbz	r3, 800c0be <_dtoa_r+0x7de>
 800c0b2:	9b08      	ldr	r3, [sp, #32]
 800c0b4:	f108 0801 	add.w	r8, r8, #1
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	9308      	str	r3, [sp, #32]
 800c0bc:	2301      	movs	r3, #1
 800c0be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 81b0 	beq.w	800c428 <_dtoa_r+0xb48>
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0ce:	6918      	ldr	r0, [r3, #16]
 800c0d0:	f000 fbbe 	bl	800c850 <__hi0bits>
 800c0d4:	f1c0 0020 	rsb	r0, r0, #32
 800c0d8:	9b08      	ldr	r3, [sp, #32]
 800c0da:	4418      	add	r0, r3
 800c0dc:	f010 001f 	ands.w	r0, r0, #31
 800c0e0:	d077      	beq.n	800c1d2 <_dtoa_r+0x8f2>
 800c0e2:	f1c0 0320 	rsb	r3, r0, #32
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	dd6b      	ble.n	800c1c2 <_dtoa_r+0x8e2>
 800c0ea:	f1c0 001c 	rsb	r0, r0, #28
 800c0ee:	9b08      	ldr	r3, [sp, #32]
 800c0f0:	4480      	add	r8, r0
 800c0f2:	4403      	add	r3, r0
 800c0f4:	4406      	add	r6, r0
 800c0f6:	9308      	str	r3, [sp, #32]
 800c0f8:	f1b8 0f00 	cmp.w	r8, #0
 800c0fc:	dd05      	ble.n	800c10a <_dtoa_r+0x82a>
 800c0fe:	4649      	mov	r1, r9
 800c100:	4642      	mov	r2, r8
 800c102:	4658      	mov	r0, fp
 800c104:	f000 fd0a 	bl	800cb1c <__lshift>
 800c108:	4681      	mov	r9, r0
 800c10a:	9b08      	ldr	r3, [sp, #32]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dd05      	ble.n	800c11c <_dtoa_r+0x83c>
 800c110:	4621      	mov	r1, r4
 800c112:	461a      	mov	r2, r3
 800c114:	4658      	mov	r0, fp
 800c116:	f000 fd01 	bl	800cb1c <__lshift>
 800c11a:	4604      	mov	r4, r0
 800c11c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d059      	beq.n	800c1d6 <_dtoa_r+0x8f6>
 800c122:	4621      	mov	r1, r4
 800c124:	4648      	mov	r0, r9
 800c126:	f000 fd65 	bl	800cbf4 <__mcmp>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	da53      	bge.n	800c1d6 <_dtoa_r+0x8f6>
 800c12e:	1e7b      	subs	r3, r7, #1
 800c130:	4649      	mov	r1, r9
 800c132:	220a      	movs	r2, #10
 800c134:	4658      	mov	r0, fp
 800c136:	9304      	str	r3, [sp, #16]
 800c138:	2300      	movs	r3, #0
 800c13a:	f000 faf7 	bl	800c72c <__multadd>
 800c13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c140:	4681      	mov	r9, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 8172 	beq.w	800c42c <_dtoa_r+0xb4c>
 800c148:	2300      	movs	r3, #0
 800c14a:	4629      	mov	r1, r5
 800c14c:	220a      	movs	r2, #10
 800c14e:	4658      	mov	r0, fp
 800c150:	f000 faec 	bl	800c72c <__multadd>
 800c154:	9b00      	ldr	r3, [sp, #0]
 800c156:	4605      	mov	r5, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	dc67      	bgt.n	800c22c <_dtoa_r+0x94c>
 800c15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c15e:	2b02      	cmp	r3, #2
 800c160:	dc41      	bgt.n	800c1e6 <_dtoa_r+0x906>
 800c162:	e063      	b.n	800c22c <_dtoa_r+0x94c>
 800c164:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c166:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c16a:	e746      	b.n	800bffa <_dtoa_r+0x71a>
 800c16c:	9b07      	ldr	r3, [sp, #28]
 800c16e:	1e5c      	subs	r4, r3, #1
 800c170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c172:	42a3      	cmp	r3, r4
 800c174:	bfb7      	itett	lt
 800c176:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c178:	1b1c      	subge	r4, r3, r4
 800c17a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c17c:	1ae3      	sublt	r3, r4, r3
 800c17e:	bfbe      	ittt	lt
 800c180:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c182:	2400      	movlt	r4, #0
 800c184:	18d2      	addlt	r2, r2, r3
 800c186:	9b07      	ldr	r3, [sp, #28]
 800c188:	bfb8      	it	lt
 800c18a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	bfb5      	itete	lt
 800c190:	eba8 0603 	sublt.w	r6, r8, r3
 800c194:	4646      	movge	r6, r8
 800c196:	2300      	movlt	r3, #0
 800c198:	9b07      	ldrge	r3, [sp, #28]
 800c19a:	e730      	b.n	800bffe <_dtoa_r+0x71e>
 800c19c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c19e:	4646      	mov	r6, r8
 800c1a0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c1a2:	e735      	b.n	800c010 <_dtoa_r+0x730>
 800c1a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1a6:	e75c      	b.n	800c062 <_dtoa_r+0x782>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e788      	b.n	800c0be <_dtoa_r+0x7de>
 800c1ac:	3fe00000 	.word	0x3fe00000
 800c1b0:	40240000 	.word	0x40240000
 800c1b4:	40140000 	.word	0x40140000
 800c1b8:	9b02      	ldr	r3, [sp, #8]
 800c1ba:	e780      	b.n	800c0be <_dtoa_r+0x7de>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1c0:	e782      	b.n	800c0c8 <_dtoa_r+0x7e8>
 800c1c2:	d099      	beq.n	800c0f8 <_dtoa_r+0x818>
 800c1c4:	331c      	adds	r3, #28
 800c1c6:	9a08      	ldr	r2, [sp, #32]
 800c1c8:	441a      	add	r2, r3
 800c1ca:	4498      	add	r8, r3
 800c1cc:	441e      	add	r6, r3
 800c1ce:	9208      	str	r2, [sp, #32]
 800c1d0:	e792      	b.n	800c0f8 <_dtoa_r+0x818>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	e7f6      	b.n	800c1c4 <_dtoa_r+0x8e4>
 800c1d6:	9b07      	ldr	r3, [sp, #28]
 800c1d8:	9704      	str	r7, [sp, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	dc20      	bgt.n	800c220 <_dtoa_r+0x940>
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	dd1e      	ble.n	800c224 <_dtoa_r+0x944>
 800c1e6:	9b00      	ldr	r3, [sp, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f47f aec0 	bne.w	800bf6e <_dtoa_r+0x68e>
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	2205      	movs	r2, #5
 800c1f2:	4658      	mov	r0, fp
 800c1f4:	f000 fa9a 	bl	800c72c <__multadd>
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4648      	mov	r0, r9
 800c1fe:	f000 fcf9 	bl	800cbf4 <__mcmp>
 800c202:	2800      	cmp	r0, #0
 800c204:	f77f aeb3 	ble.w	800bf6e <_dtoa_r+0x68e>
 800c208:	2331      	movs	r3, #49	@ 0x31
 800c20a:	4656      	mov	r6, sl
 800c20c:	f806 3b01 	strb.w	r3, [r6], #1
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	3301      	adds	r3, #1
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	e6ae      	b.n	800bf76 <_dtoa_r+0x696>
 800c218:	9c07      	ldr	r4, [sp, #28]
 800c21a:	9704      	str	r7, [sp, #16]
 800c21c:	4625      	mov	r5, r4
 800c21e:	e7f3      	b.n	800c208 <_dtoa_r+0x928>
 800c220:	9b07      	ldr	r3, [sp, #28]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c226:	2b00      	cmp	r3, #0
 800c228:	f000 8104 	beq.w	800c434 <_dtoa_r+0xb54>
 800c22c:	2e00      	cmp	r6, #0
 800c22e:	dd05      	ble.n	800c23c <_dtoa_r+0x95c>
 800c230:	4629      	mov	r1, r5
 800c232:	4632      	mov	r2, r6
 800c234:	4658      	mov	r0, fp
 800c236:	f000 fc71 	bl	800cb1c <__lshift>
 800c23a:	4605      	mov	r5, r0
 800c23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d05a      	beq.n	800c2f8 <_dtoa_r+0xa18>
 800c242:	6869      	ldr	r1, [r5, #4]
 800c244:	4658      	mov	r0, fp
 800c246:	f000 fa0f 	bl	800c668 <_Balloc>
 800c24a:	4606      	mov	r6, r0
 800c24c:	b928      	cbnz	r0, 800c25a <_dtoa_r+0x97a>
 800c24e:	4b84      	ldr	r3, [pc, #528]	@ (800c460 <_dtoa_r+0xb80>)
 800c250:	4602      	mov	r2, r0
 800c252:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c256:	f7ff bb5a 	b.w	800b90e <_dtoa_r+0x2e>
 800c25a:	692a      	ldr	r2, [r5, #16]
 800c25c:	f105 010c 	add.w	r1, r5, #12
 800c260:	300c      	adds	r0, #12
 800c262:	3202      	adds	r2, #2
 800c264:	0092      	lsls	r2, r2, #2
 800c266:	f002 f957 	bl	800e518 <memcpy>
 800c26a:	2201      	movs	r2, #1
 800c26c:	4631      	mov	r1, r6
 800c26e:	4658      	mov	r0, fp
 800c270:	f000 fc54 	bl	800cb1c <__lshift>
 800c274:	f10a 0301 	add.w	r3, sl, #1
 800c278:	462f      	mov	r7, r5
 800c27a:	4605      	mov	r5, r0
 800c27c:	9307      	str	r3, [sp, #28]
 800c27e:	9b00      	ldr	r3, [sp, #0]
 800c280:	4453      	add	r3, sl
 800c282:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c284:	9b02      	ldr	r3, [sp, #8]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c28c:	9b07      	ldr	r3, [sp, #28]
 800c28e:	4621      	mov	r1, r4
 800c290:	4648      	mov	r0, r9
 800c292:	3b01      	subs	r3, #1
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	f7ff fa95 	bl	800b7c4 <quorem>
 800c29a:	4639      	mov	r1, r7
 800c29c:	9002      	str	r0, [sp, #8]
 800c29e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2a2:	4648      	mov	r0, r9
 800c2a4:	f000 fca6 	bl	800cbf4 <__mcmp>
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	9008      	str	r0, [sp, #32]
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	4658      	mov	r0, fp
 800c2b0:	f000 fcbc 	bl	800cc2c <__mdiff>
 800c2b4:	68c2      	ldr	r2, [r0, #12]
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	bb02      	cbnz	r2, 800c2fc <_dtoa_r+0xa1c>
 800c2ba:	4601      	mov	r1, r0
 800c2bc:	4648      	mov	r0, r9
 800c2be:	f000 fc99 	bl	800cbf4 <__mcmp>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	4658      	mov	r0, fp
 800c2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2ca:	f000 fa0d 	bl	800c6e8 <_Bfree>
 800c2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2d2:	9e07      	ldr	r6, [sp, #28]
 800c2d4:	ea43 0102 	orr.w	r1, r3, r2
 800c2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2da:	4319      	orrs	r1, r3
 800c2dc:	d110      	bne.n	800c300 <_dtoa_r+0xa20>
 800c2de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2e2:	d029      	beq.n	800c338 <_dtoa_r+0xa58>
 800c2e4:	9b08      	ldr	r3, [sp, #32]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	dd02      	ble.n	800c2f0 <_dtoa_r+0xa10>
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c2f0:	9b00      	ldr	r3, [sp, #0]
 800c2f2:	f883 8000 	strb.w	r8, [r3]
 800c2f6:	e63f      	b.n	800bf78 <_dtoa_r+0x698>
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e7bb      	b.n	800c274 <_dtoa_r+0x994>
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	e7e1      	b.n	800c2c4 <_dtoa_r+0x9e4>
 800c300:	9b08      	ldr	r3, [sp, #32]
 800c302:	2b00      	cmp	r3, #0
 800c304:	db04      	blt.n	800c310 <_dtoa_r+0xa30>
 800c306:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c308:	430b      	orrs	r3, r1
 800c30a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c30c:	430b      	orrs	r3, r1
 800c30e:	d120      	bne.n	800c352 <_dtoa_r+0xa72>
 800c310:	2a00      	cmp	r2, #0
 800c312:	dded      	ble.n	800c2f0 <_dtoa_r+0xa10>
 800c314:	4649      	mov	r1, r9
 800c316:	2201      	movs	r2, #1
 800c318:	4658      	mov	r0, fp
 800c31a:	f000 fbff 	bl	800cb1c <__lshift>
 800c31e:	4621      	mov	r1, r4
 800c320:	4681      	mov	r9, r0
 800c322:	f000 fc67 	bl	800cbf4 <__mcmp>
 800c326:	2800      	cmp	r0, #0
 800c328:	dc03      	bgt.n	800c332 <_dtoa_r+0xa52>
 800c32a:	d1e1      	bne.n	800c2f0 <_dtoa_r+0xa10>
 800c32c:	f018 0f01 	tst.w	r8, #1
 800c330:	d0de      	beq.n	800c2f0 <_dtoa_r+0xa10>
 800c332:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c336:	d1d8      	bne.n	800c2ea <_dtoa_r+0xa0a>
 800c338:	2339      	movs	r3, #57	@ 0x39
 800c33a:	9a00      	ldr	r2, [sp, #0]
 800c33c:	7013      	strb	r3, [r2, #0]
 800c33e:	4633      	mov	r3, r6
 800c340:	461e      	mov	r6, r3
 800c342:	3b01      	subs	r3, #1
 800c344:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c348:	2a39      	cmp	r2, #57	@ 0x39
 800c34a:	d052      	beq.n	800c3f2 <_dtoa_r+0xb12>
 800c34c:	3201      	adds	r2, #1
 800c34e:	701a      	strb	r2, [r3, #0]
 800c350:	e612      	b.n	800bf78 <_dtoa_r+0x698>
 800c352:	2a00      	cmp	r2, #0
 800c354:	dd07      	ble.n	800c366 <_dtoa_r+0xa86>
 800c356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c35a:	d0ed      	beq.n	800c338 <_dtoa_r+0xa58>
 800c35c:	f108 0301 	add.w	r3, r8, #1
 800c360:	9a00      	ldr	r2, [sp, #0]
 800c362:	7013      	strb	r3, [r2, #0]
 800c364:	e608      	b.n	800bf78 <_dtoa_r+0x698>
 800c366:	9b07      	ldr	r3, [sp, #28]
 800c368:	9a07      	ldr	r2, [sp, #28]
 800c36a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c370:	4293      	cmp	r3, r2
 800c372:	d028      	beq.n	800c3c6 <_dtoa_r+0xae6>
 800c374:	4649      	mov	r1, r9
 800c376:	2300      	movs	r3, #0
 800c378:	220a      	movs	r2, #10
 800c37a:	4658      	mov	r0, fp
 800c37c:	f000 f9d6 	bl	800c72c <__multadd>
 800c380:	42af      	cmp	r7, r5
 800c382:	4681      	mov	r9, r0
 800c384:	f04f 0300 	mov.w	r3, #0
 800c388:	f04f 020a 	mov.w	r2, #10
 800c38c:	4639      	mov	r1, r7
 800c38e:	4658      	mov	r0, fp
 800c390:	d107      	bne.n	800c3a2 <_dtoa_r+0xac2>
 800c392:	f000 f9cb 	bl	800c72c <__multadd>
 800c396:	4607      	mov	r7, r0
 800c398:	4605      	mov	r5, r0
 800c39a:	9b07      	ldr	r3, [sp, #28]
 800c39c:	3301      	adds	r3, #1
 800c39e:	9307      	str	r3, [sp, #28]
 800c3a0:	e774      	b.n	800c28c <_dtoa_r+0x9ac>
 800c3a2:	f000 f9c3 	bl	800c72c <__multadd>
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	220a      	movs	r2, #10
 800c3ae:	4658      	mov	r0, fp
 800c3b0:	f000 f9bc 	bl	800c72c <__multadd>
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	e7f0      	b.n	800c39a <_dtoa_r+0xaba>
 800c3b8:	9b00      	ldr	r3, [sp, #0]
 800c3ba:	2700      	movs	r7, #0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfcc      	ite	gt
 800c3c0:	461e      	movgt	r6, r3
 800c3c2:	2601      	movle	r6, #1
 800c3c4:	4456      	add	r6, sl
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	4658      	mov	r0, fp
 800c3cc:	f000 fba6 	bl	800cb1c <__lshift>
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	4681      	mov	r9, r0
 800c3d4:	f000 fc0e 	bl	800cbf4 <__mcmp>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	dcb0      	bgt.n	800c33e <_dtoa_r+0xa5e>
 800c3dc:	d102      	bne.n	800c3e4 <_dtoa_r+0xb04>
 800c3de:	f018 0f01 	tst.w	r8, #1
 800c3e2:	d1ac      	bne.n	800c33e <_dtoa_r+0xa5e>
 800c3e4:	4633      	mov	r3, r6
 800c3e6:	461e      	mov	r6, r3
 800c3e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3ec:	2a30      	cmp	r2, #48	@ 0x30
 800c3ee:	d0fa      	beq.n	800c3e6 <_dtoa_r+0xb06>
 800c3f0:	e5c2      	b.n	800bf78 <_dtoa_r+0x698>
 800c3f2:	459a      	cmp	sl, r3
 800c3f4:	d1a4      	bne.n	800c340 <_dtoa_r+0xa60>
 800c3f6:	9b04      	ldr	r3, [sp, #16]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	2331      	movs	r3, #49	@ 0x31
 800c3fe:	f88a 3000 	strb.w	r3, [sl]
 800c402:	e5b9      	b.n	800bf78 <_dtoa_r+0x698>
 800c404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c406:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c464 <_dtoa_r+0xb84>
 800c40a:	b11b      	cbz	r3, 800c414 <_dtoa_r+0xb34>
 800c40c:	f10a 0308 	add.w	r3, sl, #8
 800c410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	4650      	mov	r0, sl
 800c416:	b019      	add	sp, #100	@ 0x64
 800c418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c41e:	2b01      	cmp	r3, #1
 800c420:	f77f ae37 	ble.w	800c092 <_dtoa_r+0x7b2>
 800c424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c426:	930a      	str	r3, [sp, #40]	@ 0x28
 800c428:	2001      	movs	r0, #1
 800c42a:	e655      	b.n	800c0d8 <_dtoa_r+0x7f8>
 800c42c:	9b00      	ldr	r3, [sp, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f77f aed6 	ble.w	800c1e0 <_dtoa_r+0x900>
 800c434:	4656      	mov	r6, sl
 800c436:	4621      	mov	r1, r4
 800c438:	4648      	mov	r0, r9
 800c43a:	f7ff f9c3 	bl	800b7c4 <quorem>
 800c43e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c442:	9b00      	ldr	r3, [sp, #0]
 800c444:	f806 8b01 	strb.w	r8, [r6], #1
 800c448:	eba6 020a 	sub.w	r2, r6, sl
 800c44c:	4293      	cmp	r3, r2
 800c44e:	ddb3      	ble.n	800c3b8 <_dtoa_r+0xad8>
 800c450:	4649      	mov	r1, r9
 800c452:	2300      	movs	r3, #0
 800c454:	220a      	movs	r2, #10
 800c456:	4658      	mov	r0, fp
 800c458:	f000 f968 	bl	800c72c <__multadd>
 800c45c:	4681      	mov	r9, r0
 800c45e:	e7ea      	b.n	800c436 <_dtoa_r+0xb56>
 800c460:	0800f135 	.word	0x0800f135
 800c464:	0800f0b9 	.word	0x0800f0b9

0800c468 <_free_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4605      	mov	r5, r0
 800c46c:	2900      	cmp	r1, #0
 800c46e:	d041      	beq.n	800c4f4 <_free_r+0x8c>
 800c470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c474:	1f0c      	subs	r4, r1, #4
 800c476:	2b00      	cmp	r3, #0
 800c478:	bfb8      	it	lt
 800c47a:	18e4      	addlt	r4, r4, r3
 800c47c:	f000 f8e8 	bl	800c650 <__malloc_lock>
 800c480:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f8 <_free_r+0x90>)
 800c482:	6813      	ldr	r3, [r2, #0]
 800c484:	b933      	cbnz	r3, 800c494 <_free_r+0x2c>
 800c486:	6063      	str	r3, [r4, #4]
 800c488:	6014      	str	r4, [r2, #0]
 800c48a:	4628      	mov	r0, r5
 800c48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c490:	f000 b8e4 	b.w	800c65c <__malloc_unlock>
 800c494:	42a3      	cmp	r3, r4
 800c496:	d908      	bls.n	800c4aa <_free_r+0x42>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	1821      	adds	r1, r4, r0
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf01      	itttt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	1809      	addeq	r1, r1, r0
 800c4a6:	6021      	streq	r1, [r4, #0]
 800c4a8:	e7ed      	b.n	800c486 <_free_r+0x1e>
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	b10b      	cbz	r3, 800c4b4 <_free_r+0x4c>
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	d9fa      	bls.n	800c4aa <_free_r+0x42>
 800c4b4:	6811      	ldr	r1, [r2, #0]
 800c4b6:	1850      	adds	r0, r2, r1
 800c4b8:	42a0      	cmp	r0, r4
 800c4ba:	d10b      	bne.n	800c4d4 <_free_r+0x6c>
 800c4bc:	6820      	ldr	r0, [r4, #0]
 800c4be:	4401      	add	r1, r0
 800c4c0:	1850      	adds	r0, r2, r1
 800c4c2:	6011      	str	r1, [r2, #0]
 800c4c4:	4283      	cmp	r3, r0
 800c4c6:	d1e0      	bne.n	800c48a <_free_r+0x22>
 800c4c8:	6818      	ldr	r0, [r3, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	4408      	add	r0, r1
 800c4ce:	6053      	str	r3, [r2, #4]
 800c4d0:	6010      	str	r0, [r2, #0]
 800c4d2:	e7da      	b.n	800c48a <_free_r+0x22>
 800c4d4:	d902      	bls.n	800c4dc <_free_r+0x74>
 800c4d6:	230c      	movs	r3, #12
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	e7d6      	b.n	800c48a <_free_r+0x22>
 800c4dc:	6820      	ldr	r0, [r4, #0]
 800c4de:	1821      	adds	r1, r4, r0
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	bf02      	ittt	eq
 800c4e4:	6819      	ldreq	r1, [r3, #0]
 800c4e6:	685b      	ldreq	r3, [r3, #4]
 800c4e8:	1809      	addeq	r1, r1, r0
 800c4ea:	6063      	str	r3, [r4, #4]
 800c4ec:	bf08      	it	eq
 800c4ee:	6021      	streq	r1, [r4, #0]
 800c4f0:	6054      	str	r4, [r2, #4]
 800c4f2:	e7ca      	b.n	800c48a <_free_r+0x22>
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000a28 	.word	0x20000a28

0800c4fc <malloc>:
 800c4fc:	4b02      	ldr	r3, [pc, #8]	@ (800c508 <malloc+0xc>)
 800c4fe:	4601      	mov	r1, r0
 800c500:	6818      	ldr	r0, [r3, #0]
 800c502:	f000 b825 	b.w	800c550 <_malloc_r>
 800c506:	bf00      	nop
 800c508:	20000018 	.word	0x20000018

0800c50c <sbrk_aligned>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	4e0f      	ldr	r6, [pc, #60]	@ (800c54c <sbrk_aligned+0x40>)
 800c510:	460c      	mov	r4, r1
 800c512:	4605      	mov	r5, r0
 800c514:	6831      	ldr	r1, [r6, #0]
 800c516:	b911      	cbnz	r1, 800c51e <sbrk_aligned+0x12>
 800c518:	f001 ffee 	bl	800e4f8 <_sbrk_r>
 800c51c:	6030      	str	r0, [r6, #0]
 800c51e:	4621      	mov	r1, r4
 800c520:	4628      	mov	r0, r5
 800c522:	f001 ffe9 	bl	800e4f8 <_sbrk_r>
 800c526:	1c43      	adds	r3, r0, #1
 800c528:	d103      	bne.n	800c532 <sbrk_aligned+0x26>
 800c52a:	f04f 34ff 	mov.w	r4, #4294967295
 800c52e:	4620      	mov	r0, r4
 800c530:	bd70      	pop	{r4, r5, r6, pc}
 800c532:	1cc4      	adds	r4, r0, #3
 800c534:	f024 0403 	bic.w	r4, r4, #3
 800c538:	42a0      	cmp	r0, r4
 800c53a:	d0f8      	beq.n	800c52e <sbrk_aligned+0x22>
 800c53c:	1a21      	subs	r1, r4, r0
 800c53e:	4628      	mov	r0, r5
 800c540:	f001 ffda 	bl	800e4f8 <_sbrk_r>
 800c544:	3001      	adds	r0, #1
 800c546:	d1f2      	bne.n	800c52e <sbrk_aligned+0x22>
 800c548:	e7ef      	b.n	800c52a <sbrk_aligned+0x1e>
 800c54a:	bf00      	nop
 800c54c:	20000a24 	.word	0x20000a24

0800c550 <_malloc_r>:
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c554:	1ccd      	adds	r5, r1, #3
 800c556:	4606      	mov	r6, r0
 800c558:	f025 0503 	bic.w	r5, r5, #3
 800c55c:	3508      	adds	r5, #8
 800c55e:	2d0c      	cmp	r5, #12
 800c560:	bf38      	it	cc
 800c562:	250c      	movcc	r5, #12
 800c564:	2d00      	cmp	r5, #0
 800c566:	db01      	blt.n	800c56c <_malloc_r+0x1c>
 800c568:	42a9      	cmp	r1, r5
 800c56a:	d904      	bls.n	800c576 <_malloc_r+0x26>
 800c56c:	230c      	movs	r3, #12
 800c56e:	6033      	str	r3, [r6, #0]
 800c570:	2000      	movs	r0, #0
 800c572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c64c <_malloc_r+0xfc>
 800c57a:	f000 f869 	bl	800c650 <__malloc_lock>
 800c57e:	f8d8 3000 	ldr.w	r3, [r8]
 800c582:	461c      	mov	r4, r3
 800c584:	bb44      	cbnz	r4, 800c5d8 <_malloc_r+0x88>
 800c586:	4629      	mov	r1, r5
 800c588:	4630      	mov	r0, r6
 800c58a:	f7ff ffbf 	bl	800c50c <sbrk_aligned>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	4604      	mov	r4, r0
 800c592:	d158      	bne.n	800c646 <_malloc_r+0xf6>
 800c594:	f8d8 4000 	ldr.w	r4, [r8]
 800c598:	4627      	mov	r7, r4
 800c59a:	2f00      	cmp	r7, #0
 800c59c:	d143      	bne.n	800c626 <_malloc_r+0xd6>
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	d04b      	beq.n	800c63a <_malloc_r+0xea>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	eb04 0903 	add.w	r9, r4, r3
 800c5ac:	f001 ffa4 	bl	800e4f8 <_sbrk_r>
 800c5b0:	4581      	cmp	r9, r0
 800c5b2:	d142      	bne.n	800c63a <_malloc_r+0xea>
 800c5b4:	6821      	ldr	r1, [r4, #0]
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	1a6d      	subs	r5, r5, r1
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	f7ff ffa6 	bl	800c50c <sbrk_aligned>
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	d03a      	beq.n	800c63a <_malloc_r+0xea>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	442b      	add	r3, r5
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	bb62      	cbnz	r2, 800c62c <_malloc_r+0xdc>
 800c5d2:	f8c8 7000 	str.w	r7, [r8]
 800c5d6:	e00f      	b.n	800c5f8 <_malloc_r+0xa8>
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	1b52      	subs	r2, r2, r5
 800c5dc:	d420      	bmi.n	800c620 <_malloc_r+0xd0>
 800c5de:	2a0b      	cmp	r2, #11
 800c5e0:	d917      	bls.n	800c612 <_malloc_r+0xc2>
 800c5e2:	1961      	adds	r1, r4, r5
 800c5e4:	42a3      	cmp	r3, r4
 800c5e6:	6025      	str	r5, [r4, #0]
 800c5e8:	bf18      	it	ne
 800c5ea:	6059      	strne	r1, [r3, #4]
 800c5ec:	6863      	ldr	r3, [r4, #4]
 800c5ee:	bf08      	it	eq
 800c5f0:	f8c8 1000 	streq.w	r1, [r8]
 800c5f4:	5162      	str	r2, [r4, r5]
 800c5f6:	604b      	str	r3, [r1, #4]
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f000 f82f 	bl	800c65c <__malloc_unlock>
 800c5fe:	f104 000b 	add.w	r0, r4, #11
 800c602:	1d23      	adds	r3, r4, #4
 800c604:	f020 0007 	bic.w	r0, r0, #7
 800c608:	1ac2      	subs	r2, r0, r3
 800c60a:	bf1c      	itt	ne
 800c60c:	1a1b      	subne	r3, r3, r0
 800c60e:	50a3      	strne	r3, [r4, r2]
 800c610:	e7af      	b.n	800c572 <_malloc_r+0x22>
 800c612:	6862      	ldr	r2, [r4, #4]
 800c614:	42a3      	cmp	r3, r4
 800c616:	bf0c      	ite	eq
 800c618:	f8c8 2000 	streq.w	r2, [r8]
 800c61c:	605a      	strne	r2, [r3, #4]
 800c61e:	e7eb      	b.n	800c5f8 <_malloc_r+0xa8>
 800c620:	4623      	mov	r3, r4
 800c622:	6864      	ldr	r4, [r4, #4]
 800c624:	e7ae      	b.n	800c584 <_malloc_r+0x34>
 800c626:	463c      	mov	r4, r7
 800c628:	687f      	ldr	r7, [r7, #4]
 800c62a:	e7b6      	b.n	800c59a <_malloc_r+0x4a>
 800c62c:	461a      	mov	r2, r3
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	42a3      	cmp	r3, r4
 800c632:	d1fb      	bne.n	800c62c <_malloc_r+0xdc>
 800c634:	2300      	movs	r3, #0
 800c636:	6053      	str	r3, [r2, #4]
 800c638:	e7de      	b.n	800c5f8 <_malloc_r+0xa8>
 800c63a:	230c      	movs	r3, #12
 800c63c:	4630      	mov	r0, r6
 800c63e:	6033      	str	r3, [r6, #0]
 800c640:	f000 f80c 	bl	800c65c <__malloc_unlock>
 800c644:	e794      	b.n	800c570 <_malloc_r+0x20>
 800c646:	6005      	str	r5, [r0, #0]
 800c648:	e7d6      	b.n	800c5f8 <_malloc_r+0xa8>
 800c64a:	bf00      	nop
 800c64c:	20000a28 	.word	0x20000a28

0800c650 <__malloc_lock>:
 800c650:	4801      	ldr	r0, [pc, #4]	@ (800c658 <__malloc_lock+0x8>)
 800c652:	f7ff b8a0 	b.w	800b796 <__retarget_lock_acquire_recursive>
 800c656:	bf00      	nop
 800c658:	20000a20 	.word	0x20000a20

0800c65c <__malloc_unlock>:
 800c65c:	4801      	ldr	r0, [pc, #4]	@ (800c664 <__malloc_unlock+0x8>)
 800c65e:	f7ff b89b 	b.w	800b798 <__retarget_lock_release_recursive>
 800c662:	bf00      	nop
 800c664:	20000a20 	.word	0x20000a20

0800c668 <_Balloc>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	69c6      	ldr	r6, [r0, #28]
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	b976      	cbnz	r6, 800c690 <_Balloc+0x28>
 800c672:	2010      	movs	r0, #16
 800c674:	f7ff ff42 	bl	800c4fc <malloc>
 800c678:	4602      	mov	r2, r0
 800c67a:	61e0      	str	r0, [r4, #28]
 800c67c:	b920      	cbnz	r0, 800c688 <_Balloc+0x20>
 800c67e:	4b18      	ldr	r3, [pc, #96]	@ (800c6e0 <_Balloc+0x78>)
 800c680:	216b      	movs	r1, #107	@ 0x6b
 800c682:	4818      	ldr	r0, [pc, #96]	@ (800c6e4 <_Balloc+0x7c>)
 800c684:	f001 ff60 	bl	800e548 <__assert_func>
 800c688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c68c:	6006      	str	r6, [r0, #0]
 800c68e:	60c6      	str	r6, [r0, #12]
 800c690:	69e6      	ldr	r6, [r4, #28]
 800c692:	68f3      	ldr	r3, [r6, #12]
 800c694:	b183      	cbz	r3, 800c6b8 <_Balloc+0x50>
 800c696:	69e3      	ldr	r3, [r4, #28]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c69e:	b9b8      	cbnz	r0, 800c6d0 <_Balloc+0x68>
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	fa01 f605 	lsl.w	r6, r1, r5
 800c6a8:	1d72      	adds	r2, r6, #5
 800c6aa:	0092      	lsls	r2, r2, #2
 800c6ac:	f001 ff6a 	bl	800e584 <_calloc_r>
 800c6b0:	b160      	cbz	r0, 800c6cc <_Balloc+0x64>
 800c6b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6b6:	e00e      	b.n	800c6d6 <_Balloc+0x6e>
 800c6b8:	2221      	movs	r2, #33	@ 0x21
 800c6ba:	2104      	movs	r1, #4
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f001 ff61 	bl	800e584 <_calloc_r>
 800c6c2:	69e3      	ldr	r3, [r4, #28]
 800c6c4:	60f0      	str	r0, [r6, #12]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e4      	bne.n	800c696 <_Balloc+0x2e>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	6802      	ldr	r2, [r0, #0]
 800c6d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6dc:	e7f7      	b.n	800c6ce <_Balloc+0x66>
 800c6de:	bf00      	nop
 800c6e0:	0800f0c6 	.word	0x0800f0c6
 800c6e4:	0800f146 	.word	0x0800f146

0800c6e8 <_Bfree>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	69c6      	ldr	r6, [r0, #28]
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	b976      	cbnz	r6, 800c710 <_Bfree+0x28>
 800c6f2:	2010      	movs	r0, #16
 800c6f4:	f7ff ff02 	bl	800c4fc <malloc>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	61e8      	str	r0, [r5, #28]
 800c6fc:	b920      	cbnz	r0, 800c708 <_Bfree+0x20>
 800c6fe:	4b09      	ldr	r3, [pc, #36]	@ (800c724 <_Bfree+0x3c>)
 800c700:	218f      	movs	r1, #143	@ 0x8f
 800c702:	4809      	ldr	r0, [pc, #36]	@ (800c728 <_Bfree+0x40>)
 800c704:	f001 ff20 	bl	800e548 <__assert_func>
 800c708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c70c:	6006      	str	r6, [r0, #0]
 800c70e:	60c6      	str	r6, [r0, #12]
 800c710:	b13c      	cbz	r4, 800c722 <_Bfree+0x3a>
 800c712:	69eb      	ldr	r3, [r5, #28]
 800c714:	6862      	ldr	r2, [r4, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c71c:	6021      	str	r1, [r4, #0]
 800c71e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c722:	bd70      	pop	{r4, r5, r6, pc}
 800c724:	0800f0c6 	.word	0x0800f0c6
 800c728:	0800f146 	.word	0x0800f146

0800c72c <__multadd>:
 800c72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c730:	f101 0c14 	add.w	ip, r1, #20
 800c734:	4607      	mov	r7, r0
 800c736:	460c      	mov	r4, r1
 800c738:	461e      	mov	r6, r3
 800c73a:	690d      	ldr	r5, [r1, #16]
 800c73c:	2000      	movs	r0, #0
 800c73e:	f8dc 3000 	ldr.w	r3, [ip]
 800c742:	3001      	adds	r0, #1
 800c744:	b299      	uxth	r1, r3
 800c746:	4285      	cmp	r5, r0
 800c748:	fb02 6101 	mla	r1, r2, r1, r6
 800c74c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c750:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c754:	b289      	uxth	r1, r1
 800c756:	fb02 3306 	mla	r3, r2, r6, r3
 800c75a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c75e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c762:	f84c 1b04 	str.w	r1, [ip], #4
 800c766:	dcea      	bgt.n	800c73e <__multadd+0x12>
 800c768:	b30e      	cbz	r6, 800c7ae <__multadd+0x82>
 800c76a:	68a3      	ldr	r3, [r4, #8]
 800c76c:	42ab      	cmp	r3, r5
 800c76e:	dc19      	bgt.n	800c7a4 <__multadd+0x78>
 800c770:	6861      	ldr	r1, [r4, #4]
 800c772:	4638      	mov	r0, r7
 800c774:	3101      	adds	r1, #1
 800c776:	f7ff ff77 	bl	800c668 <_Balloc>
 800c77a:	4680      	mov	r8, r0
 800c77c:	b928      	cbnz	r0, 800c78a <__multadd+0x5e>
 800c77e:	4602      	mov	r2, r0
 800c780:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b4 <__multadd+0x88>)
 800c782:	21ba      	movs	r1, #186	@ 0xba
 800c784:	480c      	ldr	r0, [pc, #48]	@ (800c7b8 <__multadd+0x8c>)
 800c786:	f001 fedf 	bl	800e548 <__assert_func>
 800c78a:	6922      	ldr	r2, [r4, #16]
 800c78c:	f104 010c 	add.w	r1, r4, #12
 800c790:	300c      	adds	r0, #12
 800c792:	3202      	adds	r2, #2
 800c794:	0092      	lsls	r2, r2, #2
 800c796:	f001 febf 	bl	800e518 <memcpy>
 800c79a:	4621      	mov	r1, r4
 800c79c:	4644      	mov	r4, r8
 800c79e:	4638      	mov	r0, r7
 800c7a0:	f7ff ffa2 	bl	800c6e8 <_Bfree>
 800c7a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	615e      	str	r6, [r3, #20]
 800c7ac:	6125      	str	r5, [r4, #16]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b4:	0800f135 	.word	0x0800f135
 800c7b8:	0800f146 	.word	0x0800f146

0800c7bc <__s2b>:
 800c7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c0:	4615      	mov	r5, r2
 800c7c2:	461f      	mov	r7, r3
 800c7c4:	2209      	movs	r2, #9
 800c7c6:	3308      	adds	r3, #8
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	db09      	blt.n	800c7ec <__s2b+0x30>
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f7ff ff45 	bl	800c668 <_Balloc>
 800c7de:	b940      	cbnz	r0, 800c7f2 <__s2b+0x36>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	4b19      	ldr	r3, [pc, #100]	@ (800c848 <__s2b+0x8c>)
 800c7e4:	21d3      	movs	r1, #211	@ 0xd3
 800c7e6:	4819      	ldr	r0, [pc, #100]	@ (800c84c <__s2b+0x90>)
 800c7e8:	f001 feae 	bl	800e548 <__assert_func>
 800c7ec:	0052      	lsls	r2, r2, #1
 800c7ee:	3101      	adds	r1, #1
 800c7f0:	e7f0      	b.n	800c7d4 <__s2b+0x18>
 800c7f2:	9b08      	ldr	r3, [sp, #32]
 800c7f4:	2d09      	cmp	r5, #9
 800c7f6:	6143      	str	r3, [r0, #20]
 800c7f8:	f04f 0301 	mov.w	r3, #1
 800c7fc:	6103      	str	r3, [r0, #16]
 800c7fe:	dd16      	ble.n	800c82e <__s2b+0x72>
 800c800:	f104 0909 	add.w	r9, r4, #9
 800c804:	442c      	add	r4, r5
 800c806:	46c8      	mov	r8, r9
 800c808:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c80c:	4601      	mov	r1, r0
 800c80e:	220a      	movs	r2, #10
 800c810:	4630      	mov	r0, r6
 800c812:	3b30      	subs	r3, #48	@ 0x30
 800c814:	f7ff ff8a 	bl	800c72c <__multadd>
 800c818:	45a0      	cmp	r8, r4
 800c81a:	d1f5      	bne.n	800c808 <__s2b+0x4c>
 800c81c:	f1a5 0408 	sub.w	r4, r5, #8
 800c820:	444c      	add	r4, r9
 800c822:	1b2d      	subs	r5, r5, r4
 800c824:	1963      	adds	r3, r4, r5
 800c826:	42bb      	cmp	r3, r7
 800c828:	db04      	blt.n	800c834 <__s2b+0x78>
 800c82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c82e:	340a      	adds	r4, #10
 800c830:	2509      	movs	r5, #9
 800c832:	e7f6      	b.n	800c822 <__s2b+0x66>
 800c834:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c838:	4601      	mov	r1, r0
 800c83a:	220a      	movs	r2, #10
 800c83c:	4630      	mov	r0, r6
 800c83e:	3b30      	subs	r3, #48	@ 0x30
 800c840:	f7ff ff74 	bl	800c72c <__multadd>
 800c844:	e7ee      	b.n	800c824 <__s2b+0x68>
 800c846:	bf00      	nop
 800c848:	0800f135 	.word	0x0800f135
 800c84c:	0800f146 	.word	0x0800f146

0800c850 <__hi0bits>:
 800c850:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c854:	4603      	mov	r3, r0
 800c856:	bf36      	itet	cc
 800c858:	0403      	lslcc	r3, r0, #16
 800c85a:	2000      	movcs	r0, #0
 800c85c:	2010      	movcc	r0, #16
 800c85e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c862:	bf3c      	itt	cc
 800c864:	021b      	lslcc	r3, r3, #8
 800c866:	3008      	addcc	r0, #8
 800c868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c86c:	bf3c      	itt	cc
 800c86e:	011b      	lslcc	r3, r3, #4
 800c870:	3004      	addcc	r0, #4
 800c872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c876:	bf3c      	itt	cc
 800c878:	009b      	lslcc	r3, r3, #2
 800c87a:	3002      	addcc	r0, #2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	db05      	blt.n	800c88c <__hi0bits+0x3c>
 800c880:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c884:	f100 0001 	add.w	r0, r0, #1
 800c888:	bf08      	it	eq
 800c88a:	2020      	moveq	r0, #32
 800c88c:	4770      	bx	lr

0800c88e <__lo0bits>:
 800c88e:	6803      	ldr	r3, [r0, #0]
 800c890:	4602      	mov	r2, r0
 800c892:	f013 0007 	ands.w	r0, r3, #7
 800c896:	d00b      	beq.n	800c8b0 <__lo0bits+0x22>
 800c898:	07d9      	lsls	r1, r3, #31
 800c89a:	d421      	bmi.n	800c8e0 <__lo0bits+0x52>
 800c89c:	0798      	lsls	r0, r3, #30
 800c89e:	bf47      	ittee	mi
 800c8a0:	085b      	lsrmi	r3, r3, #1
 800c8a2:	2001      	movmi	r0, #1
 800c8a4:	089b      	lsrpl	r3, r3, #2
 800c8a6:	2002      	movpl	r0, #2
 800c8a8:	bf4c      	ite	mi
 800c8aa:	6013      	strmi	r3, [r2, #0]
 800c8ac:	6013      	strpl	r3, [r2, #0]
 800c8ae:	4770      	bx	lr
 800c8b0:	b299      	uxth	r1, r3
 800c8b2:	b909      	cbnz	r1, 800c8b8 <__lo0bits+0x2a>
 800c8b4:	0c1b      	lsrs	r3, r3, #16
 800c8b6:	2010      	movs	r0, #16
 800c8b8:	b2d9      	uxtb	r1, r3
 800c8ba:	b909      	cbnz	r1, 800c8c0 <__lo0bits+0x32>
 800c8bc:	3008      	adds	r0, #8
 800c8be:	0a1b      	lsrs	r3, r3, #8
 800c8c0:	0719      	lsls	r1, r3, #28
 800c8c2:	bf04      	itt	eq
 800c8c4:	091b      	lsreq	r3, r3, #4
 800c8c6:	3004      	addeq	r0, #4
 800c8c8:	0799      	lsls	r1, r3, #30
 800c8ca:	bf04      	itt	eq
 800c8cc:	089b      	lsreq	r3, r3, #2
 800c8ce:	3002      	addeq	r0, #2
 800c8d0:	07d9      	lsls	r1, r3, #31
 800c8d2:	d403      	bmi.n	800c8dc <__lo0bits+0x4e>
 800c8d4:	085b      	lsrs	r3, r3, #1
 800c8d6:	f100 0001 	add.w	r0, r0, #1
 800c8da:	d003      	beq.n	800c8e4 <__lo0bits+0x56>
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	4770      	bx	lr
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	4770      	bx	lr
 800c8e4:	2020      	movs	r0, #32
 800c8e6:	4770      	bx	lr

0800c8e8 <__i2b>:
 800c8e8:	b510      	push	{r4, lr}
 800c8ea:	460c      	mov	r4, r1
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	f7ff febb 	bl	800c668 <_Balloc>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	b928      	cbnz	r0, 800c902 <__i2b+0x1a>
 800c8f6:	4b05      	ldr	r3, [pc, #20]	@ (800c90c <__i2b+0x24>)
 800c8f8:	f240 1145 	movw	r1, #325	@ 0x145
 800c8fc:	4804      	ldr	r0, [pc, #16]	@ (800c910 <__i2b+0x28>)
 800c8fe:	f001 fe23 	bl	800e548 <__assert_func>
 800c902:	2301      	movs	r3, #1
 800c904:	6144      	str	r4, [r0, #20]
 800c906:	6103      	str	r3, [r0, #16]
 800c908:	bd10      	pop	{r4, pc}
 800c90a:	bf00      	nop
 800c90c:	0800f135 	.word	0x0800f135
 800c910:	0800f146 	.word	0x0800f146

0800c914 <__multiply>:
 800c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	4614      	mov	r4, r2
 800c91a:	690a      	ldr	r2, [r1, #16]
 800c91c:	460f      	mov	r7, r1
 800c91e:	b085      	sub	sp, #20
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	429a      	cmp	r2, r3
 800c924:	bfa2      	ittt	ge
 800c926:	4623      	movge	r3, r4
 800c928:	460c      	movge	r4, r1
 800c92a:	461f      	movge	r7, r3
 800c92c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c930:	68a3      	ldr	r3, [r4, #8]
 800c932:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c936:	6861      	ldr	r1, [r4, #4]
 800c938:	eb0a 0609 	add.w	r6, sl, r9
 800c93c:	42b3      	cmp	r3, r6
 800c93e:	bfb8      	it	lt
 800c940:	3101      	addlt	r1, #1
 800c942:	f7ff fe91 	bl	800c668 <_Balloc>
 800c946:	b930      	cbnz	r0, 800c956 <__multiply+0x42>
 800c948:	4602      	mov	r2, r0
 800c94a:	4b45      	ldr	r3, [pc, #276]	@ (800ca60 <__multiply+0x14c>)
 800c94c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c950:	4844      	ldr	r0, [pc, #272]	@ (800ca64 <__multiply+0x150>)
 800c952:	f001 fdf9 	bl	800e548 <__assert_func>
 800c956:	f100 0514 	add.w	r5, r0, #20
 800c95a:	2200      	movs	r2, #0
 800c95c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c960:	462b      	mov	r3, r5
 800c962:	4543      	cmp	r3, r8
 800c964:	d321      	bcc.n	800c9aa <__multiply+0x96>
 800c966:	f107 0114 	add.w	r1, r7, #20
 800c96a:	f104 0214 	add.w	r2, r4, #20
 800c96e:	f104 0715 	add.w	r7, r4, #21
 800c972:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c976:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c97a:	9302      	str	r3, [sp, #8]
 800c97c:	1b13      	subs	r3, r2, r4
 800c97e:	3b15      	subs	r3, #21
 800c980:	f023 0303 	bic.w	r3, r3, #3
 800c984:	3304      	adds	r3, #4
 800c986:	42ba      	cmp	r2, r7
 800c988:	bf38      	it	cc
 800c98a:	2304      	movcc	r3, #4
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	9b02      	ldr	r3, [sp, #8]
 800c990:	9103      	str	r1, [sp, #12]
 800c992:	428b      	cmp	r3, r1
 800c994:	d80c      	bhi.n	800c9b0 <__multiply+0x9c>
 800c996:	2e00      	cmp	r6, #0
 800c998:	dd03      	ble.n	800c9a2 <__multiply+0x8e>
 800c99a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d05b      	beq.n	800ca5a <__multiply+0x146>
 800c9a2:	6106      	str	r6, [r0, #16]
 800c9a4:	b005      	add	sp, #20
 800c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9aa:	f843 2b04 	str.w	r2, [r3], #4
 800c9ae:	e7d8      	b.n	800c962 <__multiply+0x4e>
 800c9b0:	f8b1 a000 	ldrh.w	sl, [r1]
 800c9b4:	f1ba 0f00 	cmp.w	sl, #0
 800c9b8:	d024      	beq.n	800ca04 <__multiply+0xf0>
 800c9ba:	f104 0e14 	add.w	lr, r4, #20
 800c9be:	46a9      	mov	r9, r5
 800c9c0:	f04f 0c00 	mov.w	ip, #0
 800c9c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9c8:	f8d9 3000 	ldr.w	r3, [r9]
 800c9cc:	fa1f fb87 	uxth.w	fp, r7
 800c9d0:	4572      	cmp	r2, lr
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c9d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c9dc:	f8d9 7000 	ldr.w	r7, [r9]
 800c9e0:	4463      	add	r3, ip
 800c9e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c9ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9f8:	f849 3b04 	str.w	r3, [r9], #4
 800c9fc:	d8e2      	bhi.n	800c9c4 <__multiply+0xb0>
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	f845 c003 	str.w	ip, [r5, r3]
 800ca04:	9b03      	ldr	r3, [sp, #12]
 800ca06:	3104      	adds	r1, #4
 800ca08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca0c:	f1b9 0f00 	cmp.w	r9, #0
 800ca10:	d021      	beq.n	800ca56 <__multiply+0x142>
 800ca12:	682b      	ldr	r3, [r5, #0]
 800ca14:	f104 0c14 	add.w	ip, r4, #20
 800ca18:	46ae      	mov	lr, r5
 800ca1a:	f04f 0a00 	mov.w	sl, #0
 800ca1e:	f8bc b000 	ldrh.w	fp, [ip]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca28:	fb09 770b 	mla	r7, r9, fp, r7
 800ca2c:	4457      	add	r7, sl
 800ca2e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca32:	f84e 3b04 	str.w	r3, [lr], #4
 800ca36:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca3e:	f8be 3000 	ldrh.w	r3, [lr]
 800ca42:	4562      	cmp	r2, ip
 800ca44:	fb09 330a 	mla	r3, r9, sl, r3
 800ca48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ca4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca50:	d8e5      	bhi.n	800ca1e <__multiply+0x10a>
 800ca52:	9f01      	ldr	r7, [sp, #4]
 800ca54:	51eb      	str	r3, [r5, r7]
 800ca56:	3504      	adds	r5, #4
 800ca58:	e799      	b.n	800c98e <__multiply+0x7a>
 800ca5a:	3e01      	subs	r6, #1
 800ca5c:	e79b      	b.n	800c996 <__multiply+0x82>
 800ca5e:	bf00      	nop
 800ca60:	0800f135 	.word	0x0800f135
 800ca64:	0800f146 	.word	0x0800f146

0800ca68 <__pow5mult>:
 800ca68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca6c:	4615      	mov	r5, r2
 800ca6e:	f012 0203 	ands.w	r2, r2, #3
 800ca72:	4607      	mov	r7, r0
 800ca74:	460e      	mov	r6, r1
 800ca76:	d007      	beq.n	800ca88 <__pow5mult+0x20>
 800ca78:	3a01      	subs	r2, #1
 800ca7a:	4c25      	ldr	r4, [pc, #148]	@ (800cb10 <__pow5mult+0xa8>)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca82:	f7ff fe53 	bl	800c72c <__multadd>
 800ca86:	4606      	mov	r6, r0
 800ca88:	10ad      	asrs	r5, r5, #2
 800ca8a:	d03d      	beq.n	800cb08 <__pow5mult+0xa0>
 800ca8c:	69fc      	ldr	r4, [r7, #28]
 800ca8e:	b97c      	cbnz	r4, 800cab0 <__pow5mult+0x48>
 800ca90:	2010      	movs	r0, #16
 800ca92:	f7ff fd33 	bl	800c4fc <malloc>
 800ca96:	4602      	mov	r2, r0
 800ca98:	61f8      	str	r0, [r7, #28]
 800ca9a:	b928      	cbnz	r0, 800caa8 <__pow5mult+0x40>
 800ca9c:	4b1d      	ldr	r3, [pc, #116]	@ (800cb14 <__pow5mult+0xac>)
 800ca9e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800caa2:	481d      	ldr	r0, [pc, #116]	@ (800cb18 <__pow5mult+0xb0>)
 800caa4:	f001 fd50 	bl	800e548 <__assert_func>
 800caa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800caac:	6004      	str	r4, [r0, #0]
 800caae:	60c4      	str	r4, [r0, #12]
 800cab0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cab8:	b94c      	cbnz	r4, 800cace <__pow5mult+0x66>
 800caba:	f240 2171 	movw	r1, #625	@ 0x271
 800cabe:	4638      	mov	r0, r7
 800cac0:	f7ff ff12 	bl	800c8e8 <__i2b>
 800cac4:	2300      	movs	r3, #0
 800cac6:	4604      	mov	r4, r0
 800cac8:	f8c8 0008 	str.w	r0, [r8, #8]
 800cacc:	6003      	str	r3, [r0, #0]
 800cace:	f04f 0900 	mov.w	r9, #0
 800cad2:	07eb      	lsls	r3, r5, #31
 800cad4:	d50a      	bpl.n	800caec <__pow5mult+0x84>
 800cad6:	4631      	mov	r1, r6
 800cad8:	4622      	mov	r2, r4
 800cada:	4638      	mov	r0, r7
 800cadc:	f7ff ff1a 	bl	800c914 <__multiply>
 800cae0:	4680      	mov	r8, r0
 800cae2:	4631      	mov	r1, r6
 800cae4:	4638      	mov	r0, r7
 800cae6:	4646      	mov	r6, r8
 800cae8:	f7ff fdfe 	bl	800c6e8 <_Bfree>
 800caec:	106d      	asrs	r5, r5, #1
 800caee:	d00b      	beq.n	800cb08 <__pow5mult+0xa0>
 800caf0:	6820      	ldr	r0, [r4, #0]
 800caf2:	b938      	cbnz	r0, 800cb04 <__pow5mult+0x9c>
 800caf4:	4622      	mov	r2, r4
 800caf6:	4621      	mov	r1, r4
 800caf8:	4638      	mov	r0, r7
 800cafa:	f7ff ff0b 	bl	800c914 <__multiply>
 800cafe:	6020      	str	r0, [r4, #0]
 800cb00:	f8c0 9000 	str.w	r9, [r0]
 800cb04:	4604      	mov	r4, r0
 800cb06:	e7e4      	b.n	800cad2 <__pow5mult+0x6a>
 800cb08:	4630      	mov	r0, r6
 800cb0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb0e:	bf00      	nop
 800cb10:	0800f1a0 	.word	0x0800f1a0
 800cb14:	0800f0c6 	.word	0x0800f0c6
 800cb18:	0800f146 	.word	0x0800f146

0800cb1c <__lshift>:
 800cb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb20:	460c      	mov	r4, r1
 800cb22:	4607      	mov	r7, r0
 800cb24:	4691      	mov	r9, r2
 800cb26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	6849      	ldr	r1, [r1, #4]
 800cb2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	f108 0601 	add.w	r6, r8, #1
 800cb38:	42b3      	cmp	r3, r6
 800cb3a:	db0b      	blt.n	800cb54 <__lshift+0x38>
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	f7ff fd93 	bl	800c668 <_Balloc>
 800cb42:	4605      	mov	r5, r0
 800cb44:	b948      	cbnz	r0, 800cb5a <__lshift+0x3e>
 800cb46:	4602      	mov	r2, r0
 800cb48:	4b28      	ldr	r3, [pc, #160]	@ (800cbec <__lshift+0xd0>)
 800cb4a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cb4e:	4828      	ldr	r0, [pc, #160]	@ (800cbf0 <__lshift+0xd4>)
 800cb50:	f001 fcfa 	bl	800e548 <__assert_func>
 800cb54:	3101      	adds	r1, #1
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	e7ee      	b.n	800cb38 <__lshift+0x1c>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f100 0114 	add.w	r1, r0, #20
 800cb60:	f100 0210 	add.w	r2, r0, #16
 800cb64:	4618      	mov	r0, r3
 800cb66:	4553      	cmp	r3, sl
 800cb68:	db33      	blt.n	800cbd2 <__lshift+0xb6>
 800cb6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb6e:	f104 0314 	add.w	r3, r4, #20
 800cb72:	6920      	ldr	r0, [r4, #16]
 800cb74:	f019 091f 	ands.w	r9, r9, #31
 800cb78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb80:	d02b      	beq.n	800cbda <__lshift+0xbe>
 800cb82:	f1c9 0e20 	rsb	lr, r9, #32
 800cb86:	468a      	mov	sl, r1
 800cb88:	2200      	movs	r2, #0
 800cb8a:	6818      	ldr	r0, [r3, #0]
 800cb8c:	fa00 f009 	lsl.w	r0, r0, r9
 800cb90:	4310      	orrs	r0, r2
 800cb92:	f84a 0b04 	str.w	r0, [sl], #4
 800cb96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9a:	459c      	cmp	ip, r3
 800cb9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cba0:	d8f3      	bhi.n	800cb8a <__lshift+0x6e>
 800cba2:	ebac 0304 	sub.w	r3, ip, r4
 800cba6:	f104 0015 	add.w	r0, r4, #21
 800cbaa:	3b15      	subs	r3, #21
 800cbac:	f023 0303 	bic.w	r3, r3, #3
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	4584      	cmp	ip, r0
 800cbb4:	bf38      	it	cc
 800cbb6:	2304      	movcc	r3, #4
 800cbb8:	50ca      	str	r2, [r1, r3]
 800cbba:	b10a      	cbz	r2, 800cbc0 <__lshift+0xa4>
 800cbbc:	f108 0602 	add.w	r6, r8, #2
 800cbc0:	3e01      	subs	r6, #1
 800cbc2:	4638      	mov	r0, r7
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	612e      	str	r6, [r5, #16]
 800cbc8:	f7ff fd8e 	bl	800c6e8 <_Bfree>
 800cbcc:	4628      	mov	r0, r5
 800cbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbd8:	e7c5      	b.n	800cb66 <__lshift+0x4a>
 800cbda:	3904      	subs	r1, #4
 800cbdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe0:	459c      	cmp	ip, r3
 800cbe2:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbe6:	d8f9      	bhi.n	800cbdc <__lshift+0xc0>
 800cbe8:	e7ea      	b.n	800cbc0 <__lshift+0xa4>
 800cbea:	bf00      	nop
 800cbec:	0800f135 	.word	0x0800f135
 800cbf0:	0800f146 	.word	0x0800f146

0800cbf4 <__mcmp>:
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	690a      	ldr	r2, [r1, #16]
 800cbf8:	6900      	ldr	r0, [r0, #16]
 800cbfa:	1a80      	subs	r0, r0, r2
 800cbfc:	b530      	push	{r4, r5, lr}
 800cbfe:	d10e      	bne.n	800cc1e <__mcmp+0x2a>
 800cc00:	3314      	adds	r3, #20
 800cc02:	3114      	adds	r1, #20
 800cc04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc14:	4295      	cmp	r5, r2
 800cc16:	d003      	beq.n	800cc20 <__mcmp+0x2c>
 800cc18:	d205      	bcs.n	800cc26 <__mcmp+0x32>
 800cc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1e:	bd30      	pop	{r4, r5, pc}
 800cc20:	42a3      	cmp	r3, r4
 800cc22:	d3f3      	bcc.n	800cc0c <__mcmp+0x18>
 800cc24:	e7fb      	b.n	800cc1e <__mcmp+0x2a>
 800cc26:	2001      	movs	r0, #1
 800cc28:	e7f9      	b.n	800cc1e <__mcmp+0x2a>
	...

0800cc2c <__mdiff>:
 800cc2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	4689      	mov	r9, r1
 800cc32:	4606      	mov	r6, r0
 800cc34:	4611      	mov	r1, r2
 800cc36:	4614      	mov	r4, r2
 800cc38:	4648      	mov	r0, r9
 800cc3a:	f7ff ffdb 	bl	800cbf4 <__mcmp>
 800cc3e:	1e05      	subs	r5, r0, #0
 800cc40:	d112      	bne.n	800cc68 <__mdiff+0x3c>
 800cc42:	4629      	mov	r1, r5
 800cc44:	4630      	mov	r0, r6
 800cc46:	f7ff fd0f 	bl	800c668 <_Balloc>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	b928      	cbnz	r0, 800cc5a <__mdiff+0x2e>
 800cc4e:	4b41      	ldr	r3, [pc, #260]	@ (800cd54 <__mdiff+0x128>)
 800cc50:	f240 2137 	movw	r1, #567	@ 0x237
 800cc54:	4840      	ldr	r0, [pc, #256]	@ (800cd58 <__mdiff+0x12c>)
 800cc56:	f001 fc77 	bl	800e548 <__assert_func>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc60:	4610      	mov	r0, r2
 800cc62:	b003      	add	sp, #12
 800cc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc68:	bfbc      	itt	lt
 800cc6a:	464b      	movlt	r3, r9
 800cc6c:	46a1      	movlt	r9, r4
 800cc6e:	4630      	mov	r0, r6
 800cc70:	bfb8      	it	lt
 800cc72:	2501      	movlt	r5, #1
 800cc74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cc78:	bfb4      	ite	lt
 800cc7a:	461c      	movlt	r4, r3
 800cc7c:	2500      	movge	r5, #0
 800cc7e:	f7ff fcf3 	bl	800c668 <_Balloc>
 800cc82:	4602      	mov	r2, r0
 800cc84:	b918      	cbnz	r0, 800cc8e <__mdiff+0x62>
 800cc86:	4b33      	ldr	r3, [pc, #204]	@ (800cd54 <__mdiff+0x128>)
 800cc88:	f240 2145 	movw	r1, #581	@ 0x245
 800cc8c:	e7e2      	b.n	800cc54 <__mdiff+0x28>
 800cc8e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc92:	f104 0e14 	add.w	lr, r4, #20
 800cc96:	6926      	ldr	r6, [r4, #16]
 800cc98:	f100 0b14 	add.w	fp, r0, #20
 800cc9c:	60c5      	str	r5, [r0, #12]
 800cc9e:	f109 0514 	add.w	r5, r9, #20
 800cca2:	f109 0310 	add.w	r3, r9, #16
 800cca6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ccaa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ccae:	46d9      	mov	r9, fp
 800ccb0:	f04f 0c00 	mov.w	ip, #0
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	9b01      	ldr	r3, [sp, #4]
 800ccb8:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ccbc:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ccc0:	4576      	cmp	r6, lr
 800ccc2:	9301      	str	r3, [sp, #4]
 800ccc4:	fa1f f38a 	uxth.w	r3, sl
 800ccc8:	4619      	mov	r1, r3
 800ccca:	b283      	uxth	r3, r0
 800cccc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800ccd0:	eba1 0303 	sub.w	r3, r1, r3
 800ccd4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ccd8:	4463      	add	r3, ip
 800ccda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cce4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cce8:	f849 3b04 	str.w	r3, [r9], #4
 800ccec:	d8e3      	bhi.n	800ccb6 <__mdiff+0x8a>
 800ccee:	1b33      	subs	r3, r6, r4
 800ccf0:	3415      	adds	r4, #21
 800ccf2:	3b15      	subs	r3, #21
 800ccf4:	f023 0303 	bic.w	r3, r3, #3
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	42a6      	cmp	r6, r4
 800ccfc:	bf38      	it	cc
 800ccfe:	2304      	movcc	r3, #4
 800cd00:	441d      	add	r5, r3
 800cd02:	445b      	add	r3, fp
 800cd04:	462c      	mov	r4, r5
 800cd06:	461e      	mov	r6, r3
 800cd08:	4544      	cmp	r4, r8
 800cd0a:	d30e      	bcc.n	800cd2a <__mdiff+0xfe>
 800cd0c:	f108 0103 	add.w	r1, r8, #3
 800cd10:	1b49      	subs	r1, r1, r5
 800cd12:	3d03      	subs	r5, #3
 800cd14:	f021 0103 	bic.w	r1, r1, #3
 800cd18:	45a8      	cmp	r8, r5
 800cd1a:	bf38      	it	cc
 800cd1c:	2100      	movcc	r1, #0
 800cd1e:	440b      	add	r3, r1
 800cd20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd24:	b199      	cbz	r1, 800cd4e <__mdiff+0x122>
 800cd26:	6117      	str	r7, [r2, #16]
 800cd28:	e79a      	b.n	800cc60 <__mdiff+0x34>
 800cd2a:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd2e:	46e6      	mov	lr, ip
 800cd30:	fa1f fc81 	uxth.w	ip, r1
 800cd34:	0c08      	lsrs	r0, r1, #16
 800cd36:	4471      	add	r1, lr
 800cd38:	44f4      	add	ip, lr
 800cd3a:	b289      	uxth	r1, r1
 800cd3c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd48:	f846 1b04 	str.w	r1, [r6], #4
 800cd4c:	e7dc      	b.n	800cd08 <__mdiff+0xdc>
 800cd4e:	3f01      	subs	r7, #1
 800cd50:	e7e6      	b.n	800cd20 <__mdiff+0xf4>
 800cd52:	bf00      	nop
 800cd54:	0800f135 	.word	0x0800f135
 800cd58:	0800f146 	.word	0x0800f146

0800cd5c <__ulp>:
 800cd5c:	b082      	sub	sp, #8
 800cd5e:	4b11      	ldr	r3, [pc, #68]	@ (800cda4 <__ulp+0x48>)
 800cd60:	ed8d 0b00 	vstr	d0, [sp]
 800cd64:	9a01      	ldr	r2, [sp, #4]
 800cd66:	4013      	ands	r3, r2
 800cd68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	dc08      	bgt.n	800cd82 <__ulp+0x26>
 800cd70:	425b      	negs	r3, r3
 800cd72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cd76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd7a:	da04      	bge.n	800cd86 <__ulp+0x2a>
 800cd7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cd80:	4113      	asrs	r3, r2
 800cd82:	2200      	movs	r2, #0
 800cd84:	e008      	b.n	800cd98 <__ulp+0x3c>
 800cd86:	f1a2 0314 	sub.w	r3, r2, #20
 800cd8a:	2b1e      	cmp	r3, #30
 800cd8c:	bfd6      	itet	le
 800cd8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cd92:	2201      	movgt	r2, #1
 800cd94:	40da      	lsrle	r2, r3
 800cd96:	2300      	movs	r3, #0
 800cd98:	4619      	mov	r1, r3
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	ec41 0b10 	vmov	d0, r0, r1
 800cda0:	b002      	add	sp, #8
 800cda2:	4770      	bx	lr
 800cda4:	7ff00000 	.word	0x7ff00000

0800cda8 <__b2d>:
 800cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdac:	6906      	ldr	r6, [r0, #16]
 800cdae:	f100 0814 	add.w	r8, r0, #20
 800cdb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cdb6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cdba:	1f37      	subs	r7, r6, #4
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	f7ff fd47 	bl	800c850 <__hi0bits>
 800cdc2:	f1c0 0320 	rsb	r3, r0, #32
 800cdc6:	280a      	cmp	r0, #10
 800cdc8:	600b      	str	r3, [r1, #0]
 800cdca:	491d      	ldr	r1, [pc, #116]	@ (800ce40 <__b2d+0x98>)
 800cdcc:	dc16      	bgt.n	800cdfc <__b2d+0x54>
 800cdce:	f1c0 0c0b 	rsb	ip, r0, #11
 800cdd2:	45b8      	cmp	r8, r7
 800cdd4:	f100 0015 	add.w	r0, r0, #21
 800cdd8:	fa22 f30c 	lsr.w	r3, r2, ip
 800cddc:	fa02 f000 	lsl.w	r0, r2, r0
 800cde0:	ea43 0501 	orr.w	r5, r3, r1
 800cde4:	bf34      	ite	cc
 800cde6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cdea:	2300      	movcs	r3, #0
 800cdec:	fa23 f30c 	lsr.w	r3, r3, ip
 800cdf0:	4303      	orrs	r3, r0
 800cdf2:	461c      	mov	r4, r3
 800cdf4:	ec45 4b10 	vmov	d0, r4, r5
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfc:	45b8      	cmp	r8, r7
 800cdfe:	bf3a      	itte	cc
 800ce00:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce04:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce08:	2300      	movcs	r3, #0
 800ce0a:	380b      	subs	r0, #11
 800ce0c:	d014      	beq.n	800ce38 <__b2d+0x90>
 800ce0e:	f1c0 0120 	rsb	r1, r0, #32
 800ce12:	4082      	lsls	r2, r0
 800ce14:	4547      	cmp	r7, r8
 800ce16:	fa23 f401 	lsr.w	r4, r3, r1
 800ce1a:	fa03 f300 	lsl.w	r3, r3, r0
 800ce1e:	ea42 0204 	orr.w	r2, r2, r4
 800ce22:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ce26:	bf8c      	ite	hi
 800ce28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce2c:	2200      	movls	r2, #0
 800ce2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ce32:	40ca      	lsrs	r2, r1
 800ce34:	4313      	orrs	r3, r2
 800ce36:	e7dc      	b.n	800cdf2 <__b2d+0x4a>
 800ce38:	ea42 0501 	orr.w	r5, r2, r1
 800ce3c:	e7d9      	b.n	800cdf2 <__b2d+0x4a>
 800ce3e:	bf00      	nop
 800ce40:	3ff00000 	.word	0x3ff00000

0800ce44 <__d2b>:
 800ce44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce48:	460f      	mov	r7, r1
 800ce4a:	2101      	movs	r1, #1
 800ce4c:	4616      	mov	r6, r2
 800ce4e:	ec59 8b10 	vmov	r8, r9, d0
 800ce52:	f7ff fc09 	bl	800c668 <_Balloc>
 800ce56:	4604      	mov	r4, r0
 800ce58:	b930      	cbnz	r0, 800ce68 <__d2b+0x24>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	4b23      	ldr	r3, [pc, #140]	@ (800ceec <__d2b+0xa8>)
 800ce5e:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce62:	4823      	ldr	r0, [pc, #140]	@ (800cef0 <__d2b+0xac>)
 800ce64:	f001 fb70 	bl	800e548 <__assert_func>
 800ce68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce70:	b10d      	cbz	r5, 800ce76 <__d2b+0x32>
 800ce72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce76:	9301      	str	r3, [sp, #4]
 800ce78:	f1b8 0300 	subs.w	r3, r8, #0
 800ce7c:	d023      	beq.n	800cec6 <__d2b+0x82>
 800ce7e:	4668      	mov	r0, sp
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	f7ff fd04 	bl	800c88e <__lo0bits>
 800ce86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce8a:	b1d0      	cbz	r0, 800cec2 <__d2b+0x7e>
 800ce8c:	f1c0 0320 	rsb	r3, r0, #32
 800ce90:	fa02 f303 	lsl.w	r3, r2, r3
 800ce94:	40c2      	lsrs	r2, r0
 800ce96:	430b      	orrs	r3, r1
 800ce98:	9201      	str	r2, [sp, #4]
 800ce9a:	6163      	str	r3, [r4, #20]
 800ce9c:	9b01      	ldr	r3, [sp, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	61a3      	str	r3, [r4, #24]
 800cea2:	bf0c      	ite	eq
 800cea4:	2201      	moveq	r2, #1
 800cea6:	2202      	movne	r2, #2
 800cea8:	6122      	str	r2, [r4, #16]
 800ceaa:	b1a5      	cbz	r5, 800ced6 <__d2b+0x92>
 800ceac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ceb0:	4405      	add	r5, r0
 800ceb2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ceb6:	603d      	str	r5, [r7, #0]
 800ceb8:	6030      	str	r0, [r6, #0]
 800ceba:	4620      	mov	r0, r4
 800cebc:	b003      	add	sp, #12
 800cebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cec2:	6161      	str	r1, [r4, #20]
 800cec4:	e7ea      	b.n	800ce9c <__d2b+0x58>
 800cec6:	a801      	add	r0, sp, #4
 800cec8:	f7ff fce1 	bl	800c88e <__lo0bits>
 800cecc:	9b01      	ldr	r3, [sp, #4]
 800cece:	3020      	adds	r0, #32
 800ced0:	2201      	movs	r2, #1
 800ced2:	6163      	str	r3, [r4, #20]
 800ced4:	e7e8      	b.n	800cea8 <__d2b+0x64>
 800ced6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ceda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cede:	6038      	str	r0, [r7, #0]
 800cee0:	6918      	ldr	r0, [r3, #16]
 800cee2:	f7ff fcb5 	bl	800c850 <__hi0bits>
 800cee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ceea:	e7e5      	b.n	800ceb8 <__d2b+0x74>
 800ceec:	0800f135 	.word	0x0800f135
 800cef0:	0800f146 	.word	0x0800f146

0800cef4 <__ratio>:
 800cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	b085      	sub	sp, #20
 800cefa:	e9cd 1000 	strd	r1, r0, [sp]
 800cefe:	a902      	add	r1, sp, #8
 800cf00:	f7ff ff52 	bl	800cda8 <__b2d>
 800cf04:	a903      	add	r1, sp, #12
 800cf06:	9800      	ldr	r0, [sp, #0]
 800cf08:	ec55 4b10 	vmov	r4, r5, d0
 800cf0c:	f7ff ff4c 	bl	800cda8 <__b2d>
 800cf10:	9b01      	ldr	r3, [sp, #4]
 800cf12:	462f      	mov	r7, r5
 800cf14:	4620      	mov	r0, r4
 800cf16:	6919      	ldr	r1, [r3, #16]
 800cf18:	9b00      	ldr	r3, [sp, #0]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	1ac9      	subs	r1, r1, r3
 800cf1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cf22:	ec5b ab10 	vmov	sl, fp, d0
 800cf26:	1a9b      	subs	r3, r3, r2
 800cf28:	46d9      	mov	r9, fp
 800cf2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	bfcd      	iteet	gt
 800cf32:	462a      	movgt	r2, r5
 800cf34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf38:	465a      	movle	r2, fp
 800cf3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf3e:	bfd8      	it	le
 800cf40:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cf44:	4652      	mov	r2, sl
 800cf46:	4639      	mov	r1, r7
 800cf48:	464b      	mov	r3, r9
 800cf4a:	f7f3 fc83 	bl	8000854 <__aeabi_ddiv>
 800cf4e:	ec41 0b10 	vmov	d0, r0, r1
 800cf52:	b005      	add	sp, #20
 800cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf58 <__copybits>:
 800cf58:	3901      	subs	r1, #1
 800cf5a:	f102 0314 	add.w	r3, r2, #20
 800cf5e:	1149      	asrs	r1, r1, #5
 800cf60:	b570      	push	{r4, r5, r6, lr}
 800cf62:	3101      	adds	r1, #1
 800cf64:	6914      	ldr	r4, [r2, #16]
 800cf66:	1f05      	subs	r5, r0, #4
 800cf68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	d30c      	bcc.n	800cf8e <__copybits+0x36>
 800cf74:	1aa3      	subs	r3, r4, r2
 800cf76:	3211      	adds	r2, #17
 800cf78:	3b11      	subs	r3, #17
 800cf7a:	f023 0303 	bic.w	r3, r3, #3
 800cf7e:	42a2      	cmp	r2, r4
 800cf80:	bf88      	it	hi
 800cf82:	2300      	movhi	r3, #0
 800cf84:	4418      	add	r0, r3
 800cf86:	2300      	movs	r3, #0
 800cf88:	4288      	cmp	r0, r1
 800cf8a:	d305      	bcc.n	800cf98 <__copybits+0x40>
 800cf8c:	bd70      	pop	{r4, r5, r6, pc}
 800cf8e:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf92:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf96:	e7eb      	b.n	800cf70 <__copybits+0x18>
 800cf98:	f840 3b04 	str.w	r3, [r0], #4
 800cf9c:	e7f4      	b.n	800cf88 <__copybits+0x30>

0800cf9e <__any_on>:
 800cf9e:	f100 0214 	add.w	r2, r0, #20
 800cfa2:	114b      	asrs	r3, r1, #5
 800cfa4:	6900      	ldr	r0, [r0, #16]
 800cfa6:	4298      	cmp	r0, r3
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	db11      	blt.n	800cfd0 <__any_on+0x32>
 800cfac:	dd0a      	ble.n	800cfc4 <__any_on+0x26>
 800cfae:	f011 011f 	ands.w	r1, r1, #31
 800cfb2:	d007      	beq.n	800cfc4 <__any_on+0x26>
 800cfb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cfb8:	fa24 f001 	lsr.w	r0, r4, r1
 800cfbc:	fa00 f101 	lsl.w	r1, r0, r1
 800cfc0:	428c      	cmp	r4, r1
 800cfc2:	d10b      	bne.n	800cfdc <__any_on+0x3e>
 800cfc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d803      	bhi.n	800cfd4 <__any_on+0x36>
 800cfcc:	2000      	movs	r0, #0
 800cfce:	bd10      	pop	{r4, pc}
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	e7f7      	b.n	800cfc4 <__any_on+0x26>
 800cfd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfd8:	2900      	cmp	r1, #0
 800cfda:	d0f5      	beq.n	800cfc8 <__any_on+0x2a>
 800cfdc:	2001      	movs	r0, #1
 800cfde:	e7f6      	b.n	800cfce <__any_on+0x30>

0800cfe0 <sulp>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	4616      	mov	r6, r2
 800cfe8:	ec45 4b10 	vmov	d0, r4, r5
 800cfec:	f7ff feb6 	bl	800cd5c <__ulp>
 800cff0:	ec51 0b10 	vmov	r0, r1, d0
 800cff4:	b17e      	cbz	r6, 800d016 <sulp+0x36>
 800cff6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cffa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cffe:	2b00      	cmp	r3, #0
 800d000:	dd09      	ble.n	800d016 <sulp+0x36>
 800d002:	051b      	lsls	r3, r3, #20
 800d004:	2400      	movs	r4, #0
 800d006:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d00a:	4622      	mov	r2, r4
 800d00c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d010:	462b      	mov	r3, r5
 800d012:	f7f3 faf5 	bl	8000600 <__aeabi_dmul>
 800d016:	ec41 0b10 	vmov	d0, r0, r1
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	0000      	movs	r0, r0
	...

0800d020 <_strtod_l>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	b09f      	sub	sp, #124	@ 0x7c
 800d026:	460c      	mov	r4, r1
 800d028:	f04f 0a00 	mov.w	sl, #0
 800d02c:	f04f 0b00 	mov.w	fp, #0
 800d030:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d032:	2200      	movs	r2, #0
 800d034:	9005      	str	r0, [sp, #20]
 800d036:	921a      	str	r2, [sp, #104]	@ 0x68
 800d038:	460a      	mov	r2, r1
 800d03a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d03c:	7811      	ldrb	r1, [r2, #0]
 800d03e:	292b      	cmp	r1, #43	@ 0x2b
 800d040:	d04a      	beq.n	800d0d8 <_strtod_l+0xb8>
 800d042:	d838      	bhi.n	800d0b6 <_strtod_l+0x96>
 800d044:	290d      	cmp	r1, #13
 800d046:	d832      	bhi.n	800d0ae <_strtod_l+0x8e>
 800d048:	2908      	cmp	r1, #8
 800d04a:	d832      	bhi.n	800d0b2 <_strtod_l+0x92>
 800d04c:	2900      	cmp	r1, #0
 800d04e:	d03b      	beq.n	800d0c8 <_strtod_l+0xa8>
 800d050:	2200      	movs	r2, #0
 800d052:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d054:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d056:	782a      	ldrb	r2, [r5, #0]
 800d058:	2a30      	cmp	r2, #48	@ 0x30
 800d05a:	f040 80b3 	bne.w	800d1c4 <_strtod_l+0x1a4>
 800d05e:	786a      	ldrb	r2, [r5, #1]
 800d060:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d064:	2a58      	cmp	r2, #88	@ 0x58
 800d066:	d16e      	bne.n	800d146 <_strtod_l+0x126>
 800d068:	9302      	str	r3, [sp, #8]
 800d06a:	a919      	add	r1, sp, #100	@ 0x64
 800d06c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d06e:	4a90      	ldr	r2, [pc, #576]	@ (800d2b0 <_strtod_l+0x290>)
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	ab1a      	add	r3, sp, #104	@ 0x68
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d07a:	f001 fafd 	bl	800e678 <__gethex>
 800d07e:	f010 060f 	ands.w	r6, r0, #15
 800d082:	4604      	mov	r4, r0
 800d084:	d005      	beq.n	800d092 <_strtod_l+0x72>
 800d086:	2e06      	cmp	r6, #6
 800d088:	d128      	bne.n	800d0dc <_strtod_l+0xbc>
 800d08a:	3501      	adds	r5, #1
 800d08c:	2300      	movs	r3, #0
 800d08e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d090:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d092:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d094:	2b00      	cmp	r3, #0
 800d096:	f040 858e 	bne.w	800dbb6 <_strtod_l+0xb96>
 800d09a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d09c:	b1cb      	cbz	r3, 800d0d2 <_strtod_l+0xb2>
 800d09e:	4652      	mov	r2, sl
 800d0a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d0a4:	ec43 2b10 	vmov	d0, r2, r3
 800d0a8:	b01f      	add	sp, #124	@ 0x7c
 800d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	2920      	cmp	r1, #32
 800d0b0:	d1ce      	bne.n	800d050 <_strtod_l+0x30>
 800d0b2:	3201      	adds	r2, #1
 800d0b4:	e7c1      	b.n	800d03a <_strtod_l+0x1a>
 800d0b6:	292d      	cmp	r1, #45	@ 0x2d
 800d0b8:	d1ca      	bne.n	800d050 <_strtod_l+0x30>
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d0be:	1c51      	adds	r1, r2, #1
 800d0c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0c2:	7852      	ldrb	r2, [r2, #1]
 800d0c4:	2a00      	cmp	r2, #0
 800d0c6:	d1c5      	bne.n	800d054 <_strtod_l+0x34>
 800d0c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 8570 	bne.w	800dbb2 <_strtod_l+0xb92>
 800d0d2:	4652      	mov	r2, sl
 800d0d4:	465b      	mov	r3, fp
 800d0d6:	e7e5      	b.n	800d0a4 <_strtod_l+0x84>
 800d0d8:	2100      	movs	r1, #0
 800d0da:	e7ef      	b.n	800d0bc <_strtod_l+0x9c>
 800d0dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d0de:	b13a      	cbz	r2, 800d0f0 <_strtod_l+0xd0>
 800d0e0:	2135      	movs	r1, #53	@ 0x35
 800d0e2:	a81c      	add	r0, sp, #112	@ 0x70
 800d0e4:	f7ff ff38 	bl	800cf58 <__copybits>
 800d0e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0ea:	9805      	ldr	r0, [sp, #20]
 800d0ec:	f7ff fafc 	bl	800c6e8 <_Bfree>
 800d0f0:	3e01      	subs	r6, #1
 800d0f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d0f4:	2e04      	cmp	r6, #4
 800d0f6:	d806      	bhi.n	800d106 <_strtod_l+0xe6>
 800d0f8:	e8df f006 	tbb	[pc, r6]
 800d0fc:	201d0314 	.word	0x201d0314
 800d100:	14          	.byte	0x14
 800d101:	00          	.byte	0x00
 800d102:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d106:	05e1      	lsls	r1, r4, #23
 800d108:	bf48      	it	mi
 800d10a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d10e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d112:	0d1b      	lsrs	r3, r3, #20
 800d114:	051b      	lsls	r3, r3, #20
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1bb      	bne.n	800d092 <_strtod_l+0x72>
 800d11a:	f7fe fb11 	bl	800b740 <__errno>
 800d11e:	2322      	movs	r3, #34	@ 0x22
 800d120:	6003      	str	r3, [r0, #0]
 800d122:	e7b6      	b.n	800d092 <_strtod_l+0x72>
 800d124:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d128:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d12c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d130:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d134:	e7e7      	b.n	800d106 <_strtod_l+0xe6>
 800d136:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d2b8 <_strtod_l+0x298>
 800d13a:	e7e4      	b.n	800d106 <_strtod_l+0xe6>
 800d13c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d140:	f04f 3aff 	mov.w	sl, #4294967295
 800d144:	e7df      	b.n	800d106 <_strtod_l+0xe6>
 800d146:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d14c:	785b      	ldrb	r3, [r3, #1]
 800d14e:	2b30      	cmp	r3, #48	@ 0x30
 800d150:	d0f9      	beq.n	800d146 <_strtod_l+0x126>
 800d152:	2b00      	cmp	r3, #0
 800d154:	d09d      	beq.n	800d092 <_strtod_l+0x72>
 800d156:	2301      	movs	r3, #1
 800d158:	9309      	str	r3, [sp, #36]	@ 0x24
 800d15a:	220a      	movs	r2, #10
 800d15c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d15e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d160:	2300      	movs	r3, #0
 800d162:	461f      	mov	r7, r3
 800d164:	9308      	str	r3, [sp, #32]
 800d166:	930a      	str	r3, [sp, #40]	@ 0x28
 800d168:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d16a:	7805      	ldrb	r5, [r0, #0]
 800d16c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d170:	b2d9      	uxtb	r1, r3
 800d172:	2909      	cmp	r1, #9
 800d174:	d928      	bls.n	800d1c8 <_strtod_l+0x1a8>
 800d176:	2201      	movs	r2, #1
 800d178:	494e      	ldr	r1, [pc, #312]	@ (800d2b4 <_strtod_l+0x294>)
 800d17a:	f001 f9ab 	bl	800e4d4 <strncmp>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d033      	beq.n	800d1ea <_strtod_l+0x1ca>
 800d182:	2000      	movs	r0, #0
 800d184:	462a      	mov	r2, r5
 800d186:	463d      	mov	r5, r7
 800d188:	4681      	mov	r9, r0
 800d18a:	4603      	mov	r3, r0
 800d18c:	2a65      	cmp	r2, #101	@ 0x65
 800d18e:	d001      	beq.n	800d194 <_strtod_l+0x174>
 800d190:	2a45      	cmp	r2, #69	@ 0x45
 800d192:	d114      	bne.n	800d1be <_strtod_l+0x19e>
 800d194:	b91d      	cbnz	r5, 800d19e <_strtod_l+0x17e>
 800d196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d198:	4302      	orrs	r2, r0
 800d19a:	d095      	beq.n	800d0c8 <_strtod_l+0xa8>
 800d19c:	2500      	movs	r5, #0
 800d19e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d1a0:	1c62      	adds	r2, r4, #1
 800d1a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1a4:	7862      	ldrb	r2, [r4, #1]
 800d1a6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d1a8:	d078      	beq.n	800d29c <_strtod_l+0x27c>
 800d1aa:	2a2d      	cmp	r2, #45	@ 0x2d
 800d1ac:	d07c      	beq.n	800d2a8 <_strtod_l+0x288>
 800d1ae:	f04f 0c00 	mov.w	ip, #0
 800d1b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d1b6:	2909      	cmp	r1, #9
 800d1b8:	f240 8084 	bls.w	800d2c4 <_strtod_l+0x2a4>
 800d1bc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d1be:	f04f 0800 	mov.w	r8, #0
 800d1c2:	e0a4      	b.n	800d30e <_strtod_l+0x2ee>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e7c7      	b.n	800d158 <_strtod_l+0x138>
 800d1c8:	2f08      	cmp	r7, #8
 800d1ca:	f100 0001 	add.w	r0, r0, #1
 800d1ce:	f107 0701 	add.w	r7, r7, #1
 800d1d2:	bfd5      	itete	le
 800d1d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d1d6:	9908      	ldrgt	r1, [sp, #32]
 800d1d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d1dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d1e0:	bfd4      	ite	le
 800d1e2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d1e4:	9308      	strgt	r3, [sp, #32]
 800d1e6:	9019      	str	r0, [sp, #100]	@ 0x64
 800d1e8:	e7be      	b.n	800d168 <_strtod_l+0x148>
 800d1ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1f0:	785a      	ldrb	r2, [r3, #1]
 800d1f2:	b37f      	cbz	r7, 800d254 <_strtod_l+0x234>
 800d1f4:	4681      	mov	r9, r0
 800d1f6:	463d      	mov	r5, r7
 800d1f8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	d912      	bls.n	800d226 <_strtod_l+0x206>
 800d200:	2301      	movs	r3, #1
 800d202:	e7c3      	b.n	800d18c <_strtod_l+0x16c>
 800d204:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d206:	3001      	adds	r0, #1
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d20c:	785a      	ldrb	r2, [r3, #1]
 800d20e:	2a30      	cmp	r2, #48	@ 0x30
 800d210:	d0f8      	beq.n	800d204 <_strtod_l+0x1e4>
 800d212:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d216:	2b08      	cmp	r3, #8
 800d218:	f200 84d2 	bhi.w	800dbc0 <_strtod_l+0xba0>
 800d21c:	4681      	mov	r9, r0
 800d21e:	2000      	movs	r0, #0
 800d220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d222:	4605      	mov	r5, r0
 800d224:	930c      	str	r3, [sp, #48]	@ 0x30
 800d226:	3a30      	subs	r2, #48	@ 0x30
 800d228:	f100 0301 	add.w	r3, r0, #1
 800d22c:	d02a      	beq.n	800d284 <_strtod_l+0x264>
 800d22e:	4499      	add	r9, r3
 800d230:	eb00 0c05 	add.w	ip, r0, r5
 800d234:	462b      	mov	r3, r5
 800d236:	210a      	movs	r1, #10
 800d238:	4563      	cmp	r3, ip
 800d23a:	d10d      	bne.n	800d258 <_strtod_l+0x238>
 800d23c:	1c69      	adds	r1, r5, #1
 800d23e:	4401      	add	r1, r0
 800d240:	4428      	add	r0, r5
 800d242:	2808      	cmp	r0, #8
 800d244:	dc16      	bgt.n	800d274 <_strtod_l+0x254>
 800d246:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d248:	230a      	movs	r3, #10
 800d24a:	fb03 2300 	mla	r3, r3, r0, r2
 800d24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d250:	2300      	movs	r3, #0
 800d252:	e018      	b.n	800d286 <_strtod_l+0x266>
 800d254:	4638      	mov	r0, r7
 800d256:	e7da      	b.n	800d20e <_strtod_l+0x1ee>
 800d258:	2b08      	cmp	r3, #8
 800d25a:	f103 0301 	add.w	r3, r3, #1
 800d25e:	dc03      	bgt.n	800d268 <_strtod_l+0x248>
 800d260:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d262:	434e      	muls	r6, r1
 800d264:	960a      	str	r6, [sp, #40]	@ 0x28
 800d266:	e7e7      	b.n	800d238 <_strtod_l+0x218>
 800d268:	2b10      	cmp	r3, #16
 800d26a:	bfde      	ittt	le
 800d26c:	9e08      	ldrle	r6, [sp, #32]
 800d26e:	434e      	mulle	r6, r1
 800d270:	9608      	strle	r6, [sp, #32]
 800d272:	e7e1      	b.n	800d238 <_strtod_l+0x218>
 800d274:	280f      	cmp	r0, #15
 800d276:	dceb      	bgt.n	800d250 <_strtod_l+0x230>
 800d278:	9808      	ldr	r0, [sp, #32]
 800d27a:	230a      	movs	r3, #10
 800d27c:	fb03 2300 	mla	r3, r3, r0, r2
 800d280:	9308      	str	r3, [sp, #32]
 800d282:	e7e5      	b.n	800d250 <_strtod_l+0x230>
 800d284:	4629      	mov	r1, r5
 800d286:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d288:	460d      	mov	r5, r1
 800d28a:	1c50      	adds	r0, r2, #1
 800d28c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d28e:	4618      	mov	r0, r3
 800d290:	7852      	ldrb	r2, [r2, #1]
 800d292:	e7b1      	b.n	800d1f8 <_strtod_l+0x1d8>
 800d294:	f04f 0900 	mov.w	r9, #0
 800d298:	2301      	movs	r3, #1
 800d29a:	e77c      	b.n	800d196 <_strtod_l+0x176>
 800d29c:	f04f 0c00 	mov.w	ip, #0
 800d2a0:	1ca2      	adds	r2, r4, #2
 800d2a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2a4:	78a2      	ldrb	r2, [r4, #2]
 800d2a6:	e784      	b.n	800d1b2 <_strtod_l+0x192>
 800d2a8:	f04f 0c01 	mov.w	ip, #1
 800d2ac:	e7f8      	b.n	800d2a0 <_strtod_l+0x280>
 800d2ae:	bf00      	nop
 800d2b0:	0800f2b8 	.word	0x0800f2b8
 800d2b4:	0800f2a0 	.word	0x0800f2a0
 800d2b8:	7ff00000 	.word	0x7ff00000
 800d2bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2be:	1c51      	adds	r1, r2, #1
 800d2c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d2c2:	7852      	ldrb	r2, [r2, #1]
 800d2c4:	2a30      	cmp	r2, #48	@ 0x30
 800d2c6:	d0f9      	beq.n	800d2bc <_strtod_l+0x29c>
 800d2c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d2cc:	2908      	cmp	r1, #8
 800d2ce:	f63f af76 	bhi.w	800d1be <_strtod_l+0x19e>
 800d2d2:	3a30      	subs	r2, #48	@ 0x30
 800d2d4:	f04f 080a 	mov.w	r8, #10
 800d2d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d2de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2e0:	1c56      	adds	r6, r2, #1
 800d2e2:	9619      	str	r6, [sp, #100]	@ 0x64
 800d2e4:	7852      	ldrb	r2, [r2, #1]
 800d2e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d2ea:	f1be 0f09 	cmp.w	lr, #9
 800d2ee:	d939      	bls.n	800d364 <_strtod_l+0x344>
 800d2f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d2f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d2f6:	1a76      	subs	r6, r6, r1
 800d2f8:	2e08      	cmp	r6, #8
 800d2fa:	dc03      	bgt.n	800d304 <_strtod_l+0x2e4>
 800d2fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d2fe:	4588      	cmp	r8, r1
 800d300:	bfa8      	it	ge
 800d302:	4688      	movge	r8, r1
 800d304:	f1bc 0f00 	cmp.w	ip, #0
 800d308:	d001      	beq.n	800d30e <_strtod_l+0x2ee>
 800d30a:	f1c8 0800 	rsb	r8, r8, #0
 800d30e:	2d00      	cmp	r5, #0
 800d310:	d14e      	bne.n	800d3b0 <_strtod_l+0x390>
 800d312:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d314:	4308      	orrs	r0, r1
 800d316:	f47f aebc 	bne.w	800d092 <_strtod_l+0x72>
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f47f aed4 	bne.w	800d0c8 <_strtod_l+0xa8>
 800d320:	2a69      	cmp	r2, #105	@ 0x69
 800d322:	d028      	beq.n	800d376 <_strtod_l+0x356>
 800d324:	dc25      	bgt.n	800d372 <_strtod_l+0x352>
 800d326:	2a49      	cmp	r2, #73	@ 0x49
 800d328:	d025      	beq.n	800d376 <_strtod_l+0x356>
 800d32a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d32c:	f47f aecc 	bne.w	800d0c8 <_strtod_l+0xa8>
 800d330:	499b      	ldr	r1, [pc, #620]	@ (800d5a0 <_strtod_l+0x580>)
 800d332:	a819      	add	r0, sp, #100	@ 0x64
 800d334:	f001 fbc0 	bl	800eab8 <__match>
 800d338:	2800      	cmp	r0, #0
 800d33a:	f43f aec5 	beq.w	800d0c8 <_strtod_l+0xa8>
 800d33e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b28      	cmp	r3, #40	@ 0x28
 800d344:	d12e      	bne.n	800d3a4 <_strtod_l+0x384>
 800d346:	aa1c      	add	r2, sp, #112	@ 0x70
 800d348:	4996      	ldr	r1, [pc, #600]	@ (800d5a4 <_strtod_l+0x584>)
 800d34a:	a819      	add	r0, sp, #100	@ 0x64
 800d34c:	f001 fbc8 	bl	800eae0 <__hexnan>
 800d350:	2805      	cmp	r0, #5
 800d352:	d127      	bne.n	800d3a4 <_strtod_l+0x384>
 800d354:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d356:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d35a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d35e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d362:	e696      	b.n	800d092 <_strtod_l+0x72>
 800d364:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d366:	fb08 2101 	mla	r1, r8, r1, r2
 800d36a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d36e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d370:	e7b5      	b.n	800d2de <_strtod_l+0x2be>
 800d372:	2a6e      	cmp	r2, #110	@ 0x6e
 800d374:	e7da      	b.n	800d32c <_strtod_l+0x30c>
 800d376:	498c      	ldr	r1, [pc, #560]	@ (800d5a8 <_strtod_l+0x588>)
 800d378:	a819      	add	r0, sp, #100	@ 0x64
 800d37a:	f001 fb9d 	bl	800eab8 <__match>
 800d37e:	2800      	cmp	r0, #0
 800d380:	f43f aea2 	beq.w	800d0c8 <_strtod_l+0xa8>
 800d384:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d386:	a819      	add	r0, sp, #100	@ 0x64
 800d388:	4988      	ldr	r1, [pc, #544]	@ (800d5ac <_strtod_l+0x58c>)
 800d38a:	3b01      	subs	r3, #1
 800d38c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d38e:	f001 fb93 	bl	800eab8 <__match>
 800d392:	b910      	cbnz	r0, 800d39a <_strtod_l+0x37a>
 800d394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d396:	3301      	adds	r3, #1
 800d398:	9319      	str	r3, [sp, #100]	@ 0x64
 800d39a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d5bc <_strtod_l+0x59c>
 800d39e:	f04f 0a00 	mov.w	sl, #0
 800d3a2:	e676      	b.n	800d092 <_strtod_l+0x72>
 800d3a4:	4882      	ldr	r0, [pc, #520]	@ (800d5b0 <_strtod_l+0x590>)
 800d3a6:	f001 f8c7 	bl	800e538 <nan>
 800d3aa:	ec5b ab10 	vmov	sl, fp, d0
 800d3ae:	e670      	b.n	800d092 <_strtod_l+0x72>
 800d3b0:	eba8 0309 	sub.w	r3, r8, r9
 800d3b4:	2f00      	cmp	r7, #0
 800d3b6:	bf08      	it	eq
 800d3b8:	462f      	moveq	r7, r5
 800d3ba:	2d10      	cmp	r5, #16
 800d3bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d3be:	462c      	mov	r4, r5
 800d3c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c2:	bfa8      	it	ge
 800d3c4:	2410      	movge	r4, #16
 800d3c6:	f7f3 f8a1 	bl	800050c <__aeabi_ui2d>
 800d3ca:	2d09      	cmp	r5, #9
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	468b      	mov	fp, r1
 800d3d0:	dc13      	bgt.n	800d3fa <_strtod_l+0x3da>
 800d3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f43f ae5c 	beq.w	800d092 <_strtod_l+0x72>
 800d3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3dc:	dd78      	ble.n	800d4d0 <_strtod_l+0x4b0>
 800d3de:	2b16      	cmp	r3, #22
 800d3e0:	dc5f      	bgt.n	800d4a2 <_strtod_l+0x482>
 800d3e2:	4974      	ldr	r1, [pc, #464]	@ (800d5b4 <_strtod_l+0x594>)
 800d3e4:	4652      	mov	r2, sl
 800d3e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3ea:	465b      	mov	r3, fp
 800d3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3f0:	f7f3 f906 	bl	8000600 <__aeabi_dmul>
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	468b      	mov	fp, r1
 800d3f8:	e64b      	b.n	800d092 <_strtod_l+0x72>
 800d3fa:	4b6e      	ldr	r3, [pc, #440]	@ (800d5b4 <_strtod_l+0x594>)
 800d3fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d400:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d404:	f7f3 f8fc 	bl	8000600 <__aeabi_dmul>
 800d408:	4682      	mov	sl, r0
 800d40a:	468b      	mov	fp, r1
 800d40c:	9808      	ldr	r0, [sp, #32]
 800d40e:	f7f3 f87d 	bl	800050c <__aeabi_ui2d>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	4650      	mov	r0, sl
 800d418:	4659      	mov	r1, fp
 800d41a:	f7f2 ff3b 	bl	8000294 <__adddf3>
 800d41e:	2d0f      	cmp	r5, #15
 800d420:	4682      	mov	sl, r0
 800d422:	468b      	mov	fp, r1
 800d424:	ddd5      	ble.n	800d3d2 <_strtod_l+0x3b2>
 800d426:	1b2c      	subs	r4, r5, r4
 800d428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d42a:	441c      	add	r4, r3
 800d42c:	2c00      	cmp	r4, #0
 800d42e:	f340 8096 	ble.w	800d55e <_strtod_l+0x53e>
 800d432:	f014 030f 	ands.w	r3, r4, #15
 800d436:	d00a      	beq.n	800d44e <_strtod_l+0x42e>
 800d438:	495e      	ldr	r1, [pc, #376]	@ (800d5b4 <_strtod_l+0x594>)
 800d43a:	4652      	mov	r2, sl
 800d43c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d440:	465b      	mov	r3, fp
 800d442:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d446:	f7f3 f8db 	bl	8000600 <__aeabi_dmul>
 800d44a:	4682      	mov	sl, r0
 800d44c:	468b      	mov	fp, r1
 800d44e:	f034 040f 	bics.w	r4, r4, #15
 800d452:	d073      	beq.n	800d53c <_strtod_l+0x51c>
 800d454:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d458:	dd48      	ble.n	800d4ec <_strtod_l+0x4cc>
 800d45a:	2400      	movs	r4, #0
 800d45c:	46a0      	mov	r8, r4
 800d45e:	46a1      	mov	r9, r4
 800d460:	940a      	str	r4, [sp, #40]	@ 0x28
 800d462:	2322      	movs	r3, #34	@ 0x22
 800d464:	9a05      	ldr	r2, [sp, #20]
 800d466:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d5bc <_strtod_l+0x59c>
 800d46a:	f04f 0a00 	mov.w	sl, #0
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d472:	2b00      	cmp	r3, #0
 800d474:	f43f ae0d 	beq.w	800d092 <_strtod_l+0x72>
 800d478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d47a:	9805      	ldr	r0, [sp, #20]
 800d47c:	f7ff f934 	bl	800c6e8 <_Bfree>
 800d480:	4649      	mov	r1, r9
 800d482:	9805      	ldr	r0, [sp, #20]
 800d484:	f7ff f930 	bl	800c6e8 <_Bfree>
 800d488:	4641      	mov	r1, r8
 800d48a:	9805      	ldr	r0, [sp, #20]
 800d48c:	f7ff f92c 	bl	800c6e8 <_Bfree>
 800d490:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d492:	9805      	ldr	r0, [sp, #20]
 800d494:	f7ff f928 	bl	800c6e8 <_Bfree>
 800d498:	4621      	mov	r1, r4
 800d49a:	9805      	ldr	r0, [sp, #20]
 800d49c:	f7ff f924 	bl	800c6e8 <_Bfree>
 800d4a0:	e5f7      	b.n	800d092 <_strtod_l+0x72>
 800d4a2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	dbbc      	blt.n	800d426 <_strtod_l+0x406>
 800d4ac:	f1c5 050f 	rsb	r5, r5, #15
 800d4b0:	4c40      	ldr	r4, [pc, #256]	@ (800d5b4 <_strtod_l+0x594>)
 800d4b2:	4652      	mov	r2, sl
 800d4b4:	465b      	mov	r3, fp
 800d4b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d4ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4be:	f7f3 f89f 	bl	8000600 <__aeabi_dmul>
 800d4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c4:	1b5d      	subs	r5, r3, r5
 800d4c6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d4ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d4ce:	e78f      	b.n	800d3f0 <_strtod_l+0x3d0>
 800d4d0:	3316      	adds	r3, #22
 800d4d2:	dba8      	blt.n	800d426 <_strtod_l+0x406>
 800d4d4:	eba9 0808 	sub.w	r8, r9, r8
 800d4d8:	4b36      	ldr	r3, [pc, #216]	@ (800d5b4 <_strtod_l+0x594>)
 800d4da:	4650      	mov	r0, sl
 800d4dc:	4659      	mov	r1, fp
 800d4de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d4e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d4e6:	f7f3 f9b5 	bl	8000854 <__aeabi_ddiv>
 800d4ea:	e783      	b.n	800d3f4 <_strtod_l+0x3d4>
 800d4ec:	4b32      	ldr	r3, [pc, #200]	@ (800d5b8 <_strtod_l+0x598>)
 800d4ee:	1124      	asrs	r4, r4, #4
 800d4f0:	4650      	mov	r0, sl
 800d4f2:	4659      	mov	r1, fp
 800d4f4:	9308      	str	r3, [sp, #32]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	461e      	mov	r6, r3
 800d4fa:	2c01      	cmp	r4, #1
 800d4fc:	dc21      	bgt.n	800d542 <_strtod_l+0x522>
 800d4fe:	b10b      	cbz	r3, 800d504 <_strtod_l+0x4e4>
 800d500:	4682      	mov	sl, r0
 800d502:	468b      	mov	fp, r1
 800d504:	492c      	ldr	r1, [pc, #176]	@ (800d5b8 <_strtod_l+0x598>)
 800d506:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d50a:	4652      	mov	r2, sl
 800d50c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d510:	465b      	mov	r3, fp
 800d512:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d516:	f7f3 f873 	bl	8000600 <__aeabi_dmul>
 800d51a:	4b28      	ldr	r3, [pc, #160]	@ (800d5bc <_strtod_l+0x59c>)
 800d51c:	460a      	mov	r2, r1
 800d51e:	4682      	mov	sl, r0
 800d520:	400b      	ands	r3, r1
 800d522:	4927      	ldr	r1, [pc, #156]	@ (800d5c0 <_strtod_l+0x5a0>)
 800d524:	428b      	cmp	r3, r1
 800d526:	d898      	bhi.n	800d45a <_strtod_l+0x43a>
 800d528:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d52c:	428b      	cmp	r3, r1
 800d52e:	bf86      	itte	hi
 800d530:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d5c4 <_strtod_l+0x5a4>
 800d534:	f04f 3aff 	movhi.w	sl, #4294967295
 800d538:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d53c:	2300      	movs	r3, #0
 800d53e:	9308      	str	r3, [sp, #32]
 800d540:	e07a      	b.n	800d638 <_strtod_l+0x618>
 800d542:	07e2      	lsls	r2, r4, #31
 800d544:	d505      	bpl.n	800d552 <_strtod_l+0x532>
 800d546:	9b08      	ldr	r3, [sp, #32]
 800d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54c:	f7f3 f858 	bl	8000600 <__aeabi_dmul>
 800d550:	2301      	movs	r3, #1
 800d552:	9a08      	ldr	r2, [sp, #32]
 800d554:	3601      	adds	r6, #1
 800d556:	1064      	asrs	r4, r4, #1
 800d558:	3208      	adds	r2, #8
 800d55a:	9208      	str	r2, [sp, #32]
 800d55c:	e7cd      	b.n	800d4fa <_strtod_l+0x4da>
 800d55e:	d0ed      	beq.n	800d53c <_strtod_l+0x51c>
 800d560:	4264      	negs	r4, r4
 800d562:	f014 020f 	ands.w	r2, r4, #15
 800d566:	d00a      	beq.n	800d57e <_strtod_l+0x55e>
 800d568:	4b12      	ldr	r3, [pc, #72]	@ (800d5b4 <_strtod_l+0x594>)
 800d56a:	4650      	mov	r0, sl
 800d56c:	4659      	mov	r1, fp
 800d56e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f7f3 f96d 	bl	8000854 <__aeabi_ddiv>
 800d57a:	4682      	mov	sl, r0
 800d57c:	468b      	mov	fp, r1
 800d57e:	1124      	asrs	r4, r4, #4
 800d580:	d0dc      	beq.n	800d53c <_strtod_l+0x51c>
 800d582:	2c1f      	cmp	r4, #31
 800d584:	dd20      	ble.n	800d5c8 <_strtod_l+0x5a8>
 800d586:	2400      	movs	r4, #0
 800d588:	46a0      	mov	r8, r4
 800d58a:	46a1      	mov	r9, r4
 800d58c:	940a      	str	r4, [sp, #40]	@ 0x28
 800d58e:	2322      	movs	r3, #34	@ 0x22
 800d590:	9a05      	ldr	r2, [sp, #20]
 800d592:	f04f 0a00 	mov.w	sl, #0
 800d596:	f04f 0b00 	mov.w	fp, #0
 800d59a:	6013      	str	r3, [r2, #0]
 800d59c:	e768      	b.n	800d470 <_strtod_l+0x450>
 800d59e:	bf00      	nop
 800d5a0:	0800f08d 	.word	0x0800f08d
 800d5a4:	0800f2a4 	.word	0x0800f2a4
 800d5a8:	0800f085 	.word	0x0800f085
 800d5ac:	0800f0bc 	.word	0x0800f0bc
 800d5b0:	0800f44d 	.word	0x0800f44d
 800d5b4:	0800f1d8 	.word	0x0800f1d8
 800d5b8:	0800f1b0 	.word	0x0800f1b0
 800d5bc:	7ff00000 	.word	0x7ff00000
 800d5c0:	7ca00000 	.word	0x7ca00000
 800d5c4:	7fefffff 	.word	0x7fefffff
 800d5c8:	f014 0310 	ands.w	r3, r4, #16
 800d5cc:	4650      	mov	r0, sl
 800d5ce:	4659      	mov	r1, fp
 800d5d0:	4ea9      	ldr	r6, [pc, #676]	@ (800d878 <_strtod_l+0x858>)
 800d5d2:	bf18      	it	ne
 800d5d4:	236a      	movne	r3, #106	@ 0x6a
 800d5d6:	9308      	str	r3, [sp, #32]
 800d5d8:	2300      	movs	r3, #0
 800d5da:	07e2      	lsls	r2, r4, #31
 800d5dc:	d504      	bpl.n	800d5e8 <_strtod_l+0x5c8>
 800d5de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5e2:	f7f3 f80d 	bl	8000600 <__aeabi_dmul>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	1064      	asrs	r4, r4, #1
 800d5ea:	f106 0608 	add.w	r6, r6, #8
 800d5ee:	d1f4      	bne.n	800d5da <_strtod_l+0x5ba>
 800d5f0:	b10b      	cbz	r3, 800d5f6 <_strtod_l+0x5d6>
 800d5f2:	4682      	mov	sl, r0
 800d5f4:	468b      	mov	fp, r1
 800d5f6:	9b08      	ldr	r3, [sp, #32]
 800d5f8:	b1b3      	cbz	r3, 800d628 <_strtod_l+0x608>
 800d5fa:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d5fe:	4659      	mov	r1, fp
 800d600:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d604:	2b00      	cmp	r3, #0
 800d606:	dd0f      	ble.n	800d628 <_strtod_l+0x608>
 800d608:	2b1f      	cmp	r3, #31
 800d60a:	dd55      	ble.n	800d6b8 <_strtod_l+0x698>
 800d60c:	2b34      	cmp	r3, #52	@ 0x34
 800d60e:	f04f 0a00 	mov.w	sl, #0
 800d612:	bfdb      	ittet	le
 800d614:	f04f 33ff 	movle.w	r3, #4294967295
 800d618:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d61c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d620:	4093      	lslle	r3, r2
 800d622:	bfd8      	it	le
 800d624:	ea03 0b01 	andle.w	fp, r3, r1
 800d628:	2200      	movs	r2, #0
 800d62a:	2300      	movs	r3, #0
 800d62c:	4650      	mov	r0, sl
 800d62e:	4659      	mov	r1, fp
 800d630:	f7f3 fa4e 	bl	8000ad0 <__aeabi_dcmpeq>
 800d634:	2800      	cmp	r0, #0
 800d636:	d1a6      	bne.n	800d586 <_strtod_l+0x566>
 800d638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d63a:	463a      	mov	r2, r7
 800d63c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	462b      	mov	r3, r5
 800d642:	9805      	ldr	r0, [sp, #20]
 800d644:	f7ff f8ba 	bl	800c7bc <__s2b>
 800d648:	900a      	str	r0, [sp, #40]	@ 0x28
 800d64a:	2800      	cmp	r0, #0
 800d64c:	f43f af05 	beq.w	800d45a <_strtod_l+0x43a>
 800d650:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d652:	eba9 0308 	sub.w	r3, r9, r8
 800d656:	2400      	movs	r4, #0
 800d658:	2a00      	cmp	r2, #0
 800d65a:	46a0      	mov	r8, r4
 800d65c:	bfa8      	it	ge
 800d65e:	2300      	movge	r3, #0
 800d660:	9312      	str	r3, [sp, #72]	@ 0x48
 800d662:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d666:	9316      	str	r3, [sp, #88]	@ 0x58
 800d668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d66a:	9805      	ldr	r0, [sp, #20]
 800d66c:	6859      	ldr	r1, [r3, #4]
 800d66e:	f7fe fffb 	bl	800c668 <_Balloc>
 800d672:	4681      	mov	r9, r0
 800d674:	2800      	cmp	r0, #0
 800d676:	f43f aef4 	beq.w	800d462 <_strtod_l+0x442>
 800d67a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d67c:	300c      	adds	r0, #12
 800d67e:	691a      	ldr	r2, [r3, #16]
 800d680:	f103 010c 	add.w	r1, r3, #12
 800d684:	3202      	adds	r2, #2
 800d686:	0092      	lsls	r2, r2, #2
 800d688:	f000 ff46 	bl	800e518 <memcpy>
 800d68c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d68e:	a91b      	add	r1, sp, #108	@ 0x6c
 800d690:	9805      	ldr	r0, [sp, #20]
 800d692:	ec4b ab10 	vmov	d0, sl, fp
 800d696:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d69a:	f7ff fbd3 	bl	800ce44 <__d2b>
 800d69e:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	f43f aede 	beq.w	800d462 <_strtod_l+0x442>
 800d6a6:	2101      	movs	r1, #1
 800d6a8:	9805      	ldr	r0, [sp, #20]
 800d6aa:	f7ff f91d 	bl	800c8e8 <__i2b>
 800d6ae:	4680      	mov	r8, r0
 800d6b0:	b948      	cbnz	r0, 800d6c6 <_strtod_l+0x6a6>
 800d6b2:	f04f 0800 	mov.w	r8, #0
 800d6b6:	e6d4      	b.n	800d462 <_strtod_l+0x442>
 800d6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c0:	ea03 0a0a 	and.w	sl, r3, sl
 800d6c4:	e7b0      	b.n	800d628 <_strtod_l+0x608>
 800d6c6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d6c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d6ca:	2d00      	cmp	r5, #0
 800d6cc:	bfa9      	itett	ge
 800d6ce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d6d0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d6d2:	18ef      	addge	r7, r5, r3
 800d6d4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d6d6:	bfb8      	it	lt
 800d6d8:	1b5e      	sublt	r6, r3, r5
 800d6da:	9b08      	ldr	r3, [sp, #32]
 800d6dc:	bfb8      	it	lt
 800d6de:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d6e0:	1aed      	subs	r5, r5, r3
 800d6e2:	4b66      	ldr	r3, [pc, #408]	@ (800d87c <_strtod_l+0x85c>)
 800d6e4:	4415      	add	r5, r2
 800d6e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d6ea:	3d01      	subs	r5, #1
 800d6ec:	429d      	cmp	r5, r3
 800d6ee:	da4f      	bge.n	800d790 <_strtod_l+0x770>
 800d6f0:	1b5b      	subs	r3, r3, r5
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	2b1f      	cmp	r3, #31
 800d6f6:	eba2 0203 	sub.w	r2, r2, r3
 800d6fa:	dc3d      	bgt.n	800d778 <_strtod_l+0x758>
 800d6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d700:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d702:	2300      	movs	r3, #0
 800d704:	9310      	str	r3, [sp, #64]	@ 0x40
 800d706:	18bd      	adds	r5, r7, r2
 800d708:	9b08      	ldr	r3, [sp, #32]
 800d70a:	4416      	add	r6, r2
 800d70c:	42af      	cmp	r7, r5
 800d70e:	441e      	add	r6, r3
 800d710:	463b      	mov	r3, r7
 800d712:	bfa8      	it	ge
 800d714:	462b      	movge	r3, r5
 800d716:	42b3      	cmp	r3, r6
 800d718:	bfa8      	it	ge
 800d71a:	4633      	movge	r3, r6
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	bfc2      	ittt	gt
 800d720:	1aed      	subgt	r5, r5, r3
 800d722:	1af6      	subgt	r6, r6, r3
 800d724:	1aff      	subgt	r7, r7, r3
 800d726:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d728:	2b00      	cmp	r3, #0
 800d72a:	dd16      	ble.n	800d75a <_strtod_l+0x73a>
 800d72c:	4641      	mov	r1, r8
 800d72e:	461a      	mov	r2, r3
 800d730:	9805      	ldr	r0, [sp, #20]
 800d732:	f7ff f999 	bl	800ca68 <__pow5mult>
 800d736:	4680      	mov	r8, r0
 800d738:	2800      	cmp	r0, #0
 800d73a:	d0ba      	beq.n	800d6b2 <_strtod_l+0x692>
 800d73c:	4601      	mov	r1, r0
 800d73e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d740:	9805      	ldr	r0, [sp, #20]
 800d742:	f7ff f8e7 	bl	800c914 <__multiply>
 800d746:	900e      	str	r0, [sp, #56]	@ 0x38
 800d748:	2800      	cmp	r0, #0
 800d74a:	f43f ae8a 	beq.w	800d462 <_strtod_l+0x442>
 800d74e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d750:	9805      	ldr	r0, [sp, #20]
 800d752:	f7fe ffc9 	bl	800c6e8 <_Bfree>
 800d756:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d758:	931a      	str	r3, [sp, #104]	@ 0x68
 800d75a:	2d00      	cmp	r5, #0
 800d75c:	dc1d      	bgt.n	800d79a <_strtod_l+0x77a>
 800d75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	dd23      	ble.n	800d7ac <_strtod_l+0x78c>
 800d764:	4649      	mov	r1, r9
 800d766:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d768:	9805      	ldr	r0, [sp, #20]
 800d76a:	f7ff f97d 	bl	800ca68 <__pow5mult>
 800d76e:	4681      	mov	r9, r0
 800d770:	b9e0      	cbnz	r0, 800d7ac <_strtod_l+0x78c>
 800d772:	f04f 0900 	mov.w	r9, #0
 800d776:	e674      	b.n	800d462 <_strtod_l+0x442>
 800d778:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d77c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d77e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d782:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d786:	35e2      	adds	r5, #226	@ 0xe2
 800d788:	fa01 f305 	lsl.w	r3, r1, r5
 800d78c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d78e:	e7ba      	b.n	800d706 <_strtod_l+0x6e6>
 800d790:	2300      	movs	r3, #0
 800d792:	9310      	str	r3, [sp, #64]	@ 0x40
 800d794:	2301      	movs	r3, #1
 800d796:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d798:	e7b5      	b.n	800d706 <_strtod_l+0x6e6>
 800d79a:	462a      	mov	r2, r5
 800d79c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d79e:	9805      	ldr	r0, [sp, #20]
 800d7a0:	f7ff f9bc 	bl	800cb1c <__lshift>
 800d7a4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d1d9      	bne.n	800d75e <_strtod_l+0x73e>
 800d7aa:	e65a      	b.n	800d462 <_strtod_l+0x442>
 800d7ac:	2e00      	cmp	r6, #0
 800d7ae:	dd07      	ble.n	800d7c0 <_strtod_l+0x7a0>
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	4632      	mov	r2, r6
 800d7b4:	9805      	ldr	r0, [sp, #20]
 800d7b6:	f7ff f9b1 	bl	800cb1c <__lshift>
 800d7ba:	4681      	mov	r9, r0
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d0d8      	beq.n	800d772 <_strtod_l+0x752>
 800d7c0:	2f00      	cmp	r7, #0
 800d7c2:	dd08      	ble.n	800d7d6 <_strtod_l+0x7b6>
 800d7c4:	4641      	mov	r1, r8
 800d7c6:	463a      	mov	r2, r7
 800d7c8:	9805      	ldr	r0, [sp, #20]
 800d7ca:	f7ff f9a7 	bl	800cb1c <__lshift>
 800d7ce:	4680      	mov	r8, r0
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	f43f ae46 	beq.w	800d462 <_strtod_l+0x442>
 800d7d6:	464a      	mov	r2, r9
 800d7d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7da:	9805      	ldr	r0, [sp, #20]
 800d7dc:	f7ff fa26 	bl	800cc2c <__mdiff>
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f43f ae3d 	beq.w	800d462 <_strtod_l+0x442>
 800d7e8:	68c3      	ldr	r3, [r0, #12]
 800d7ea:	4641      	mov	r1, r8
 800d7ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	60c3      	str	r3, [r0, #12]
 800d7f2:	f7ff f9ff 	bl	800cbf4 <__mcmp>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	da46      	bge.n	800d888 <_strtod_l+0x868>
 800d7fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7fc:	ea53 030a 	orrs.w	r3, r3, sl
 800d800:	d16c      	bne.n	800d8dc <_strtod_l+0x8bc>
 800d802:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d806:	2b00      	cmp	r3, #0
 800d808:	d168      	bne.n	800d8dc <_strtod_l+0x8bc>
 800d80a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d80e:	0d1b      	lsrs	r3, r3, #20
 800d810:	051b      	lsls	r3, r3, #20
 800d812:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d816:	d961      	bls.n	800d8dc <_strtod_l+0x8bc>
 800d818:	6963      	ldr	r3, [r4, #20]
 800d81a:	b913      	cbnz	r3, 800d822 <_strtod_l+0x802>
 800d81c:	6923      	ldr	r3, [r4, #16]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	dd5c      	ble.n	800d8dc <_strtod_l+0x8bc>
 800d822:	4621      	mov	r1, r4
 800d824:	2201      	movs	r2, #1
 800d826:	9805      	ldr	r0, [sp, #20]
 800d828:	f7ff f978 	bl	800cb1c <__lshift>
 800d82c:	4641      	mov	r1, r8
 800d82e:	4604      	mov	r4, r0
 800d830:	f7ff f9e0 	bl	800cbf4 <__mcmp>
 800d834:	2800      	cmp	r0, #0
 800d836:	dd51      	ble.n	800d8dc <_strtod_l+0x8bc>
 800d838:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d83c:	9a08      	ldr	r2, [sp, #32]
 800d83e:	0d1b      	lsrs	r3, r3, #20
 800d840:	051b      	lsls	r3, r3, #20
 800d842:	2a00      	cmp	r2, #0
 800d844:	d06b      	beq.n	800d91e <_strtod_l+0x8fe>
 800d846:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d84a:	d868      	bhi.n	800d91e <_strtod_l+0x8fe>
 800d84c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d850:	f67f ae9d 	bls.w	800d58e <_strtod_l+0x56e>
 800d854:	4b0a      	ldr	r3, [pc, #40]	@ (800d880 <_strtod_l+0x860>)
 800d856:	4650      	mov	r0, sl
 800d858:	4659      	mov	r1, fp
 800d85a:	2200      	movs	r2, #0
 800d85c:	f7f2 fed0 	bl	8000600 <__aeabi_dmul>
 800d860:	4b08      	ldr	r3, [pc, #32]	@ (800d884 <_strtod_l+0x864>)
 800d862:	4682      	mov	sl, r0
 800d864:	468b      	mov	fp, r1
 800d866:	400b      	ands	r3, r1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f47f ae05 	bne.w	800d478 <_strtod_l+0x458>
 800d86e:	2322      	movs	r3, #34	@ 0x22
 800d870:	9a05      	ldr	r2, [sp, #20]
 800d872:	6013      	str	r3, [r2, #0]
 800d874:	e600      	b.n	800d478 <_strtod_l+0x458>
 800d876:	bf00      	nop
 800d878:	0800f2d0 	.word	0x0800f2d0
 800d87c:	fffffc02 	.word	0xfffffc02
 800d880:	39500000 	.word	0x39500000
 800d884:	7ff00000 	.word	0x7ff00000
 800d888:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d88c:	d165      	bne.n	800d95a <_strtod_l+0x93a>
 800d88e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d890:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d894:	b35a      	cbz	r2, 800d8ee <_strtod_l+0x8ce>
 800d896:	4a9e      	ldr	r2, [pc, #632]	@ (800db10 <_strtod_l+0xaf0>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d12b      	bne.n	800d8f4 <_strtod_l+0x8d4>
 800d89c:	9b08      	ldr	r3, [sp, #32]
 800d89e:	4651      	mov	r1, sl
 800d8a0:	b303      	cbz	r3, 800d8e4 <_strtod_l+0x8c4>
 800d8a2:	465a      	mov	r2, fp
 800d8a4:	4b9b      	ldr	r3, [pc, #620]	@ (800db14 <_strtod_l+0xaf4>)
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d8b0:	d81b      	bhi.n	800d8ea <_strtod_l+0x8ca>
 800d8b2:	0d1b      	lsrs	r3, r3, #20
 800d8b4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8bc:	4299      	cmp	r1, r3
 800d8be:	d119      	bne.n	800d8f4 <_strtod_l+0x8d4>
 800d8c0:	4b95      	ldr	r3, [pc, #596]	@ (800db18 <_strtod_l+0xaf8>)
 800d8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d102      	bne.n	800d8ce <_strtod_l+0x8ae>
 800d8c8:	3101      	adds	r1, #1
 800d8ca:	f43f adca 	beq.w	800d462 <_strtod_l+0x442>
 800d8ce:	4b91      	ldr	r3, [pc, #580]	@ (800db14 <_strtod_l+0xaf4>)
 800d8d0:	f04f 0a00 	mov.w	sl, #0
 800d8d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8d6:	401a      	ands	r2, r3
 800d8d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d8dc:	9b08      	ldr	r3, [sp, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1b8      	bne.n	800d854 <_strtod_l+0x834>
 800d8e2:	e5c9      	b.n	800d478 <_strtod_l+0x458>
 800d8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e8:	e7e8      	b.n	800d8bc <_strtod_l+0x89c>
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	e7e6      	b.n	800d8bc <_strtod_l+0x89c>
 800d8ee:	ea53 030a 	orrs.w	r3, r3, sl
 800d8f2:	d0a1      	beq.n	800d838 <_strtod_l+0x818>
 800d8f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8f6:	b1db      	cbz	r3, 800d930 <_strtod_l+0x910>
 800d8f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8fa:	4213      	tst	r3, r2
 800d8fc:	d0ee      	beq.n	800d8dc <_strtod_l+0x8bc>
 800d8fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d900:	4650      	mov	r0, sl
 800d902:	9a08      	ldr	r2, [sp, #32]
 800d904:	4659      	mov	r1, fp
 800d906:	b1bb      	cbz	r3, 800d938 <_strtod_l+0x918>
 800d908:	f7ff fb6a 	bl	800cfe0 <sulp>
 800d90c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d910:	ec53 2b10 	vmov	r2, r3, d0
 800d914:	f7f2 fcbe 	bl	8000294 <__adddf3>
 800d918:	4682      	mov	sl, r0
 800d91a:	468b      	mov	fp, r1
 800d91c:	e7de      	b.n	800d8dc <_strtod_l+0x8bc>
 800d91e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d922:	f04f 3aff 	mov.w	sl, #4294967295
 800d926:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d92a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d92e:	e7d5      	b.n	800d8dc <_strtod_l+0x8bc>
 800d930:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d932:	ea13 0f0a 	tst.w	r3, sl
 800d936:	e7e1      	b.n	800d8fc <_strtod_l+0x8dc>
 800d938:	f7ff fb52 	bl	800cfe0 <sulp>
 800d93c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d940:	ec53 2b10 	vmov	r2, r3, d0
 800d944:	f7f2 fca4 	bl	8000290 <__aeabi_dsub>
 800d948:	2200      	movs	r2, #0
 800d94a:	2300      	movs	r3, #0
 800d94c:	4682      	mov	sl, r0
 800d94e:	468b      	mov	fp, r1
 800d950:	f7f3 f8be 	bl	8000ad0 <__aeabi_dcmpeq>
 800d954:	2800      	cmp	r0, #0
 800d956:	d0c1      	beq.n	800d8dc <_strtod_l+0x8bc>
 800d958:	e619      	b.n	800d58e <_strtod_l+0x56e>
 800d95a:	4641      	mov	r1, r8
 800d95c:	4620      	mov	r0, r4
 800d95e:	f7ff fac9 	bl	800cef4 <__ratio>
 800d962:	2200      	movs	r2, #0
 800d964:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d968:	ec57 6b10 	vmov	r6, r7, d0
 800d96c:	4630      	mov	r0, r6
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f3 f8c2 	bl	8000af8 <__aeabi_dcmple>
 800d974:	2800      	cmp	r0, #0
 800d976:	d06f      	beq.n	800da58 <_strtod_l+0xa38>
 800d978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d17a      	bne.n	800da74 <_strtod_l+0xa54>
 800d97e:	f1ba 0f00 	cmp.w	sl, #0
 800d982:	d158      	bne.n	800da36 <_strtod_l+0xa16>
 800d984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d15a      	bne.n	800da44 <_strtod_l+0xa24>
 800d98e:	2200      	movs	r2, #0
 800d990:	4b62      	ldr	r3, [pc, #392]	@ (800db1c <_strtod_l+0xafc>)
 800d992:	4630      	mov	r0, r6
 800d994:	4639      	mov	r1, r7
 800d996:	f7f3 f8a5 	bl	8000ae4 <__aeabi_dcmplt>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d159      	bne.n	800da52 <_strtod_l+0xa32>
 800d99e:	4630      	mov	r0, r6
 800d9a0:	4639      	mov	r1, r7
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	4b5e      	ldr	r3, [pc, #376]	@ (800db20 <_strtod_l+0xb00>)
 800d9a6:	f7f2 fe2b 	bl	8000600 <__aeabi_dmul>
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	460f      	mov	r7, r1
 800d9ae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d9b2:	9606      	str	r6, [sp, #24]
 800d9b4:	9307      	str	r3, [sp, #28]
 800d9b6:	4d57      	ldr	r5, [pc, #348]	@ (800db14 <_strtod_l+0xaf4>)
 800d9b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9c2:	401d      	ands	r5, r3
 800d9c4:	4b57      	ldr	r3, [pc, #348]	@ (800db24 <_strtod_l+0xb04>)
 800d9c6:	429d      	cmp	r5, r3
 800d9c8:	f040 80b0 	bne.w	800db2c <_strtod_l+0xb0c>
 800d9cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9ce:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d9d2:	ec4b ab10 	vmov	d0, sl, fp
 800d9d6:	f7ff f9c1 	bl	800cd5c <__ulp>
 800d9da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9de:	ec51 0b10 	vmov	r0, r1, d0
 800d9e2:	f7f2 fe0d 	bl	8000600 <__aeabi_dmul>
 800d9e6:	4652      	mov	r2, sl
 800d9e8:	465b      	mov	r3, fp
 800d9ea:	f7f2 fc53 	bl	8000294 <__adddf3>
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	4948      	ldr	r1, [pc, #288]	@ (800db14 <_strtod_l+0xaf4>)
 800d9f2:	4682      	mov	sl, r0
 800d9f4:	4a4c      	ldr	r2, [pc, #304]	@ (800db28 <_strtod_l+0xb08>)
 800d9f6:	4019      	ands	r1, r3
 800d9f8:	4291      	cmp	r1, r2
 800d9fa:	d942      	bls.n	800da82 <_strtod_l+0xa62>
 800d9fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9fe:	4b46      	ldr	r3, [pc, #280]	@ (800db18 <_strtod_l+0xaf8>)
 800da00:	429a      	cmp	r2, r3
 800da02:	d103      	bne.n	800da0c <_strtod_l+0x9ec>
 800da04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da06:	3301      	adds	r3, #1
 800da08:	f43f ad2b 	beq.w	800d462 <_strtod_l+0x442>
 800da0c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800db18 <_strtod_l+0xaf8>
 800da10:	f04f 3aff 	mov.w	sl, #4294967295
 800da14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da16:	9805      	ldr	r0, [sp, #20]
 800da18:	f7fe fe66 	bl	800c6e8 <_Bfree>
 800da1c:	4649      	mov	r1, r9
 800da1e:	9805      	ldr	r0, [sp, #20]
 800da20:	f7fe fe62 	bl	800c6e8 <_Bfree>
 800da24:	4641      	mov	r1, r8
 800da26:	9805      	ldr	r0, [sp, #20]
 800da28:	f7fe fe5e 	bl	800c6e8 <_Bfree>
 800da2c:	4621      	mov	r1, r4
 800da2e:	9805      	ldr	r0, [sp, #20]
 800da30:	f7fe fe5a 	bl	800c6e8 <_Bfree>
 800da34:	e618      	b.n	800d668 <_strtod_l+0x648>
 800da36:	f1ba 0f01 	cmp.w	sl, #1
 800da3a:	d103      	bne.n	800da44 <_strtod_l+0xa24>
 800da3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f43f ada5 	beq.w	800d58e <_strtod_l+0x56e>
 800da44:	2600      	movs	r6, #0
 800da46:	4f35      	ldr	r7, [pc, #212]	@ (800db1c <_strtod_l+0xafc>)
 800da48:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800daf0 <_strtod_l+0xad0>
 800da4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da50:	e7b1      	b.n	800d9b6 <_strtod_l+0x996>
 800da52:	2600      	movs	r6, #0
 800da54:	4f32      	ldr	r7, [pc, #200]	@ (800db20 <_strtod_l+0xb00>)
 800da56:	e7aa      	b.n	800d9ae <_strtod_l+0x98e>
 800da58:	4b31      	ldr	r3, [pc, #196]	@ (800db20 <_strtod_l+0xb00>)
 800da5a:	4630      	mov	r0, r6
 800da5c:	4639      	mov	r1, r7
 800da5e:	2200      	movs	r2, #0
 800da60:	f7f2 fdce 	bl	8000600 <__aeabi_dmul>
 800da64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da66:	4606      	mov	r6, r0
 800da68:	460f      	mov	r7, r1
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d09f      	beq.n	800d9ae <_strtod_l+0x98e>
 800da6e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800da72:	e7a0      	b.n	800d9b6 <_strtod_l+0x996>
 800da74:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800daf8 <_strtod_l+0xad8>
 800da78:	ec57 6b17 	vmov	r6, r7, d7
 800da7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da80:	e799      	b.n	800d9b6 <_strtod_l+0x996>
 800da82:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800da86:	9b08      	ldr	r3, [sp, #32]
 800da88:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1c1      	bne.n	800da14 <_strtod_l+0x9f4>
 800da90:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da94:	0d1b      	lsrs	r3, r3, #20
 800da96:	051b      	lsls	r3, r3, #20
 800da98:	429d      	cmp	r5, r3
 800da9a:	d1bb      	bne.n	800da14 <_strtod_l+0x9f4>
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f3 f90e 	bl	8000cc0 <__aeabi_d2lz>
 800daa4:	f7f2 fd7e 	bl	80005a4 <__aeabi_l2d>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4630      	mov	r0, r6
 800daae:	4639      	mov	r1, r7
 800dab0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dab4:	f7f2 fbec 	bl	8000290 <__aeabi_dsub>
 800dab8:	460b      	mov	r3, r1
 800daba:	4602      	mov	r2, r0
 800dabc:	ea46 060a 	orr.w	r6, r6, sl
 800dac0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dac6:	431e      	orrs	r6, r3
 800dac8:	d06d      	beq.n	800dba6 <_strtod_l+0xb86>
 800daca:	a30d      	add	r3, pc, #52	@ (adr r3, 800db00 <_strtod_l+0xae0>)
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	f7f3 f808 	bl	8000ae4 <__aeabi_dcmplt>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	f47f accf 	bne.w	800d478 <_strtod_l+0x458>
 800dada:	a30b      	add	r3, pc, #44	@ (adr r3, 800db08 <_strtod_l+0xae8>)
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dae4:	f7f3 f81c 	bl	8000b20 <__aeabi_dcmpgt>
 800dae8:	2800      	cmp	r0, #0
 800daea:	d093      	beq.n	800da14 <_strtod_l+0x9f4>
 800daec:	e4c4      	b.n	800d478 <_strtod_l+0x458>
 800daee:	bf00      	nop
 800daf0:	00000000 	.word	0x00000000
 800daf4:	bff00000 	.word	0xbff00000
 800daf8:	00000000 	.word	0x00000000
 800dafc:	3ff00000 	.word	0x3ff00000
 800db00:	94a03595 	.word	0x94a03595
 800db04:	3fdfffff 	.word	0x3fdfffff
 800db08:	35afe535 	.word	0x35afe535
 800db0c:	3fe00000 	.word	0x3fe00000
 800db10:	000fffff 	.word	0x000fffff
 800db14:	7ff00000 	.word	0x7ff00000
 800db18:	7fefffff 	.word	0x7fefffff
 800db1c:	3ff00000 	.word	0x3ff00000
 800db20:	3fe00000 	.word	0x3fe00000
 800db24:	7fe00000 	.word	0x7fe00000
 800db28:	7c9fffff 	.word	0x7c9fffff
 800db2c:	9b08      	ldr	r3, [sp, #32]
 800db2e:	b323      	cbz	r3, 800db7a <_strtod_l+0xb5a>
 800db30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800db34:	d821      	bhi.n	800db7a <_strtod_l+0xb5a>
 800db36:	4630      	mov	r0, r6
 800db38:	4639      	mov	r1, r7
 800db3a:	a327      	add	r3, pc, #156	@ (adr r3, 800dbd8 <_strtod_l+0xbb8>)
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f7f2 ffda 	bl	8000af8 <__aeabi_dcmple>
 800db44:	b1a0      	cbz	r0, 800db70 <_strtod_l+0xb50>
 800db46:	4639      	mov	r1, r7
 800db48:	4630      	mov	r0, r6
 800db4a:	f7f3 f831 	bl	8000bb0 <__aeabi_d2uiz>
 800db4e:	2801      	cmp	r0, #1
 800db50:	bf38      	it	cc
 800db52:	2001      	movcc	r0, #1
 800db54:	f7f2 fcda 	bl	800050c <__aeabi_ui2d>
 800db58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db5a:	4606      	mov	r6, r0
 800db5c:	460f      	mov	r7, r1
 800db5e:	b9fb      	cbnz	r3, 800dba0 <_strtod_l+0xb80>
 800db60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db64:	9014      	str	r0, [sp, #80]	@ 0x50
 800db66:	9315      	str	r3, [sp, #84]	@ 0x54
 800db68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800db6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800db76:	1b5b      	subs	r3, r3, r5
 800db78:	9311      	str	r3, [sp, #68]	@ 0x44
 800db7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800db7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db82:	f7ff f8eb 	bl	800cd5c <__ulp>
 800db86:	4650      	mov	r0, sl
 800db88:	4659      	mov	r1, fp
 800db8a:	ec53 2b10 	vmov	r2, r3, d0
 800db8e:	f7f2 fd37 	bl	8000600 <__aeabi_dmul>
 800db92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800db96:	f7f2 fb7d 	bl	8000294 <__adddf3>
 800db9a:	4682      	mov	sl, r0
 800db9c:	468b      	mov	fp, r1
 800db9e:	e772      	b.n	800da86 <_strtod_l+0xa66>
 800dba0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dba4:	e7e0      	b.n	800db68 <_strtod_l+0xb48>
 800dba6:	a30e      	add	r3, pc, #56	@ (adr r3, 800dbe0 <_strtod_l+0xbc0>)
 800dba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbac:	f7f2 ff9a 	bl	8000ae4 <__aeabi_dcmplt>
 800dbb0:	e79a      	b.n	800dae8 <_strtod_l+0xac8>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbb8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	f7ff ba6d 	b.w	800d09a <_strtod_l+0x7a>
 800dbc0:	2a65      	cmp	r2, #101	@ 0x65
 800dbc2:	f43f ab67 	beq.w	800d294 <_strtod_l+0x274>
 800dbc6:	2a45      	cmp	r2, #69	@ 0x45
 800dbc8:	f43f ab64 	beq.w	800d294 <_strtod_l+0x274>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f7ff bba0 	b.w	800d312 <_strtod_l+0x2f2>
 800dbd2:	bf00      	nop
 800dbd4:	f3af 8000 	nop.w
 800dbd8:	ffc00000 	.word	0xffc00000
 800dbdc:	41dfffff 	.word	0x41dfffff
 800dbe0:	94a03595 	.word	0x94a03595
 800dbe4:	3fcfffff 	.word	0x3fcfffff

0800dbe8 <_strtod_r>:
 800dbe8:	4b01      	ldr	r3, [pc, #4]	@ (800dbf0 <_strtod_r+0x8>)
 800dbea:	f7ff ba19 	b.w	800d020 <_strtod_l>
 800dbee:	bf00      	nop
 800dbf0:	20000068 	.word	0x20000068

0800dbf4 <_strtol_l.constprop.0>:
 800dbf4:	2b24      	cmp	r3, #36	@ 0x24
 800dbf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbfa:	4686      	mov	lr, r0
 800dbfc:	4690      	mov	r8, r2
 800dbfe:	d801      	bhi.n	800dc04 <_strtol_l.constprop.0+0x10>
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d106      	bne.n	800dc12 <_strtol_l.constprop.0+0x1e>
 800dc04:	f7fd fd9c 	bl	800b740 <__errno>
 800dc08:	2316      	movs	r3, #22
 800dc0a:	6003      	str	r3, [r0, #0]
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc12:	460d      	mov	r5, r1
 800dc14:	4833      	ldr	r0, [pc, #204]	@ (800dce4 <_strtol_l.constprop.0+0xf0>)
 800dc16:	462a      	mov	r2, r5
 800dc18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc1c:	5d06      	ldrb	r6, [r0, r4]
 800dc1e:	f016 0608 	ands.w	r6, r6, #8
 800dc22:	d1f8      	bne.n	800dc16 <_strtol_l.constprop.0+0x22>
 800dc24:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc26:	d12d      	bne.n	800dc84 <_strtol_l.constprop.0+0x90>
 800dc28:	782c      	ldrb	r4, [r5, #0]
 800dc2a:	2601      	movs	r6, #1
 800dc2c:	1c95      	adds	r5, r2, #2
 800dc2e:	f033 0210 	bics.w	r2, r3, #16
 800dc32:	d109      	bne.n	800dc48 <_strtol_l.constprop.0+0x54>
 800dc34:	2c30      	cmp	r4, #48	@ 0x30
 800dc36:	d12a      	bne.n	800dc8e <_strtol_l.constprop.0+0x9a>
 800dc38:	782a      	ldrb	r2, [r5, #0]
 800dc3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc3e:	2a58      	cmp	r2, #88	@ 0x58
 800dc40:	d125      	bne.n	800dc8e <_strtol_l.constprop.0+0x9a>
 800dc42:	786c      	ldrb	r4, [r5, #1]
 800dc44:	2310      	movs	r3, #16
 800dc46:	3502      	adds	r5, #2
 800dc48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dc52:	4610      	mov	r0, r2
 800dc54:	fbbc f9f3 	udiv	r9, ip, r3
 800dc58:	fb03 ca19 	mls	sl, r3, r9, ip
 800dc5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dc60:	2f09      	cmp	r7, #9
 800dc62:	d81b      	bhi.n	800dc9c <_strtol_l.constprop.0+0xa8>
 800dc64:	463c      	mov	r4, r7
 800dc66:	42a3      	cmp	r3, r4
 800dc68:	dd27      	ble.n	800dcba <_strtol_l.constprop.0+0xc6>
 800dc6a:	1c57      	adds	r7, r2, #1
 800dc6c:	d007      	beq.n	800dc7e <_strtol_l.constprop.0+0x8a>
 800dc6e:	4581      	cmp	r9, r0
 800dc70:	d320      	bcc.n	800dcb4 <_strtol_l.constprop.0+0xc0>
 800dc72:	d101      	bne.n	800dc78 <_strtol_l.constprop.0+0x84>
 800dc74:	45a2      	cmp	sl, r4
 800dc76:	db1d      	blt.n	800dcb4 <_strtol_l.constprop.0+0xc0>
 800dc78:	fb00 4003 	mla	r0, r0, r3, r4
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc82:	e7eb      	b.n	800dc5c <_strtol_l.constprop.0+0x68>
 800dc84:	2c2b      	cmp	r4, #43	@ 0x2b
 800dc86:	bf04      	itt	eq
 800dc88:	782c      	ldrbeq	r4, [r5, #0]
 800dc8a:	1c95      	addeq	r5, r2, #2
 800dc8c:	e7cf      	b.n	800dc2e <_strtol_l.constprop.0+0x3a>
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1da      	bne.n	800dc48 <_strtol_l.constprop.0+0x54>
 800dc92:	2c30      	cmp	r4, #48	@ 0x30
 800dc94:	bf0c      	ite	eq
 800dc96:	2308      	moveq	r3, #8
 800dc98:	230a      	movne	r3, #10
 800dc9a:	e7d5      	b.n	800dc48 <_strtol_l.constprop.0+0x54>
 800dc9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dca0:	2f19      	cmp	r7, #25
 800dca2:	d801      	bhi.n	800dca8 <_strtol_l.constprop.0+0xb4>
 800dca4:	3c37      	subs	r4, #55	@ 0x37
 800dca6:	e7de      	b.n	800dc66 <_strtol_l.constprop.0+0x72>
 800dca8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dcac:	2f19      	cmp	r7, #25
 800dcae:	d804      	bhi.n	800dcba <_strtol_l.constprop.0+0xc6>
 800dcb0:	3c57      	subs	r4, #87	@ 0x57
 800dcb2:	e7d8      	b.n	800dc66 <_strtol_l.constprop.0+0x72>
 800dcb4:	f04f 32ff 	mov.w	r2, #4294967295
 800dcb8:	e7e1      	b.n	800dc7e <_strtol_l.constprop.0+0x8a>
 800dcba:	1c53      	adds	r3, r2, #1
 800dcbc:	d108      	bne.n	800dcd0 <_strtol_l.constprop.0+0xdc>
 800dcbe:	2322      	movs	r3, #34	@ 0x22
 800dcc0:	4660      	mov	r0, ip
 800dcc2:	f8ce 3000 	str.w	r3, [lr]
 800dcc6:	f1b8 0f00 	cmp.w	r8, #0
 800dcca:	d0a0      	beq.n	800dc0e <_strtol_l.constprop.0+0x1a>
 800dccc:	1e69      	subs	r1, r5, #1
 800dcce:	e006      	b.n	800dcde <_strtol_l.constprop.0+0xea>
 800dcd0:	b106      	cbz	r6, 800dcd4 <_strtol_l.constprop.0+0xe0>
 800dcd2:	4240      	negs	r0, r0
 800dcd4:	f1b8 0f00 	cmp.w	r8, #0
 800dcd8:	d099      	beq.n	800dc0e <_strtol_l.constprop.0+0x1a>
 800dcda:	2a00      	cmp	r2, #0
 800dcdc:	d1f6      	bne.n	800dccc <_strtol_l.constprop.0+0xd8>
 800dcde:	f8c8 1000 	str.w	r1, [r8]
 800dce2:	e794      	b.n	800dc0e <_strtol_l.constprop.0+0x1a>
 800dce4:	0800f2f9 	.word	0x0800f2f9

0800dce8 <_strtol_r>:
 800dce8:	f7ff bf84 	b.w	800dbf4 <_strtol_l.constprop.0>

0800dcec <__ssputs_r>:
 800dcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf0:	461f      	mov	r7, r3
 800dcf2:	688e      	ldr	r6, [r1, #8]
 800dcf4:	4682      	mov	sl, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	42be      	cmp	r6, r7
 800dcfa:	4690      	mov	r8, r2
 800dcfc:	680b      	ldr	r3, [r1, #0]
 800dcfe:	d82d      	bhi.n	800dd5c <__ssputs_r+0x70>
 800dd00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd08:	d026      	beq.n	800dd58 <__ssputs_r+0x6c>
 800dd0a:	6965      	ldr	r5, [r4, #20]
 800dd0c:	6909      	ldr	r1, [r1, #16]
 800dd0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd12:	eba3 0901 	sub.w	r9, r3, r1
 800dd16:	1c7b      	adds	r3, r7, #1
 800dd18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd1c:	444b      	add	r3, r9
 800dd1e:	106d      	asrs	r5, r5, #1
 800dd20:	429d      	cmp	r5, r3
 800dd22:	bf38      	it	cc
 800dd24:	461d      	movcc	r5, r3
 800dd26:	0553      	lsls	r3, r2, #21
 800dd28:	d527      	bpl.n	800dd7a <__ssputs_r+0x8e>
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	f7fe fc10 	bl	800c550 <_malloc_r>
 800dd30:	4606      	mov	r6, r0
 800dd32:	b360      	cbz	r0, 800dd8e <__ssputs_r+0xa2>
 800dd34:	464a      	mov	r2, r9
 800dd36:	6921      	ldr	r1, [r4, #16]
 800dd38:	f000 fbee 	bl	800e518 <memcpy>
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd46:	81a3      	strh	r3, [r4, #12]
 800dd48:	6126      	str	r6, [r4, #16]
 800dd4a:	444e      	add	r6, r9
 800dd4c:	6165      	str	r5, [r4, #20]
 800dd4e:	eba5 0509 	sub.w	r5, r5, r9
 800dd52:	6026      	str	r6, [r4, #0]
 800dd54:	463e      	mov	r6, r7
 800dd56:	60a5      	str	r5, [r4, #8]
 800dd58:	42be      	cmp	r6, r7
 800dd5a:	d900      	bls.n	800dd5e <__ssputs_r+0x72>
 800dd5c:	463e      	mov	r6, r7
 800dd5e:	4632      	mov	r2, r6
 800dd60:	4641      	mov	r1, r8
 800dd62:	6820      	ldr	r0, [r4, #0]
 800dd64:	f000 fb9c 	bl	800e4a0 <memmove>
 800dd68:	68a3      	ldr	r3, [r4, #8]
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	1b9b      	subs	r3, r3, r6
 800dd6e:	60a3      	str	r3, [r4, #8]
 800dd70:	6823      	ldr	r3, [r4, #0]
 800dd72:	4433      	add	r3, r6
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7a:	462a      	mov	r2, r5
 800dd7c:	f000 ff5d 	bl	800ec3a <_realloc_r>
 800dd80:	4606      	mov	r6, r0
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d1e0      	bne.n	800dd48 <__ssputs_r+0x5c>
 800dd86:	6921      	ldr	r1, [r4, #16]
 800dd88:	4650      	mov	r0, sl
 800dd8a:	f7fe fb6d 	bl	800c468 <_free_r>
 800dd8e:	230c      	movs	r3, #12
 800dd90:	f04f 30ff 	mov.w	r0, #4294967295
 800dd94:	f8ca 3000 	str.w	r3, [sl]
 800dd98:	89a3      	ldrh	r3, [r4, #12]
 800dd9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd9e:	81a3      	strh	r3, [r4, #12]
 800dda0:	e7e9      	b.n	800dd76 <__ssputs_r+0x8a>
	...

0800dda4 <_svfiprintf_r>:
 800dda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda8:	4698      	mov	r8, r3
 800ddaa:	898b      	ldrh	r3, [r1, #12]
 800ddac:	b09d      	sub	sp, #116	@ 0x74
 800ddae:	4607      	mov	r7, r0
 800ddb0:	061b      	lsls	r3, r3, #24
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	d510      	bpl.n	800ddda <_svfiprintf_r+0x36>
 800ddb8:	690b      	ldr	r3, [r1, #16]
 800ddba:	b973      	cbnz	r3, 800ddda <_svfiprintf_r+0x36>
 800ddbc:	2140      	movs	r1, #64	@ 0x40
 800ddbe:	f7fe fbc7 	bl	800c550 <_malloc_r>
 800ddc2:	6028      	str	r0, [r5, #0]
 800ddc4:	6128      	str	r0, [r5, #16]
 800ddc6:	b930      	cbnz	r0, 800ddd6 <_svfiprintf_r+0x32>
 800ddc8:	230c      	movs	r3, #12
 800ddca:	603b      	str	r3, [r7, #0]
 800ddcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd0:	b01d      	add	sp, #116	@ 0x74
 800ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd6:	2340      	movs	r3, #64	@ 0x40
 800ddd8:	616b      	str	r3, [r5, #20]
 800ddda:	2300      	movs	r3, #0
 800dddc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dde0:	f04f 0901 	mov.w	r9, #1
 800dde4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800df88 <_svfiprintf_r+0x1e4>
 800dde8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddea:	2320      	movs	r3, #32
 800ddec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddf0:	2330      	movs	r3, #48	@ 0x30
 800ddf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ddf6:	4623      	mov	r3, r4
 800ddf8:	469a      	mov	sl, r3
 800ddfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddfe:	b10a      	cbz	r2, 800de04 <_svfiprintf_r+0x60>
 800de00:	2a25      	cmp	r2, #37	@ 0x25
 800de02:	d1f9      	bne.n	800ddf8 <_svfiprintf_r+0x54>
 800de04:	ebba 0b04 	subs.w	fp, sl, r4
 800de08:	d00b      	beq.n	800de22 <_svfiprintf_r+0x7e>
 800de0a:	465b      	mov	r3, fp
 800de0c:	4622      	mov	r2, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	4638      	mov	r0, r7
 800de12:	f7ff ff6b 	bl	800dcec <__ssputs_r>
 800de16:	3001      	adds	r0, #1
 800de18:	f000 80a7 	beq.w	800df6a <_svfiprintf_r+0x1c6>
 800de1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de1e:	445a      	add	r2, fp
 800de20:	9209      	str	r2, [sp, #36]	@ 0x24
 800de22:	f89a 3000 	ldrb.w	r3, [sl]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 809f 	beq.w	800df6a <_svfiprintf_r+0x1c6>
 800de2c:	2300      	movs	r3, #0
 800de2e:	f04f 32ff 	mov.w	r2, #4294967295
 800de32:	f10a 0a01 	add.w	sl, sl, #1
 800de36:	9304      	str	r3, [sp, #16]
 800de38:	9307      	str	r3, [sp, #28]
 800de3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800de40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de44:	4654      	mov	r4, sl
 800de46:	2205      	movs	r2, #5
 800de48:	484f      	ldr	r0, [pc, #316]	@ (800df88 <_svfiprintf_r+0x1e4>)
 800de4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4e:	f7fd fca4 	bl	800b79a <memchr>
 800de52:	9a04      	ldr	r2, [sp, #16]
 800de54:	b9d8      	cbnz	r0, 800de8e <_svfiprintf_r+0xea>
 800de56:	06d0      	lsls	r0, r2, #27
 800de58:	bf44      	itt	mi
 800de5a:	2320      	movmi	r3, #32
 800de5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de60:	0711      	lsls	r1, r2, #28
 800de62:	bf44      	itt	mi
 800de64:	232b      	movmi	r3, #43	@ 0x2b
 800de66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de6a:	f89a 3000 	ldrb.w	r3, [sl]
 800de6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800de70:	d015      	beq.n	800de9e <_svfiprintf_r+0xfa>
 800de72:	9a07      	ldr	r2, [sp, #28]
 800de74:	4654      	mov	r4, sl
 800de76:	2000      	movs	r0, #0
 800de78:	f04f 0c0a 	mov.w	ip, #10
 800de7c:	4621      	mov	r1, r4
 800de7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de82:	3b30      	subs	r3, #48	@ 0x30
 800de84:	2b09      	cmp	r3, #9
 800de86:	d94b      	bls.n	800df20 <_svfiprintf_r+0x17c>
 800de88:	b1b0      	cbz	r0, 800deb8 <_svfiprintf_r+0x114>
 800de8a:	9207      	str	r2, [sp, #28]
 800de8c:	e014      	b.n	800deb8 <_svfiprintf_r+0x114>
 800de8e:	eba0 0308 	sub.w	r3, r0, r8
 800de92:	46a2      	mov	sl, r4
 800de94:	fa09 f303 	lsl.w	r3, r9, r3
 800de98:	4313      	orrs	r3, r2
 800de9a:	9304      	str	r3, [sp, #16]
 800de9c:	e7d2      	b.n	800de44 <_svfiprintf_r+0xa0>
 800de9e:	9b03      	ldr	r3, [sp, #12]
 800dea0:	1d19      	adds	r1, r3, #4
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	9103      	str	r1, [sp, #12]
 800dea8:	bfbb      	ittet	lt
 800deaa:	425b      	neglt	r3, r3
 800deac:	f042 0202 	orrlt.w	r2, r2, #2
 800deb0:	9307      	strge	r3, [sp, #28]
 800deb2:	9307      	strlt	r3, [sp, #28]
 800deb4:	bfb8      	it	lt
 800deb6:	9204      	strlt	r2, [sp, #16]
 800deb8:	7823      	ldrb	r3, [r4, #0]
 800deba:	2b2e      	cmp	r3, #46	@ 0x2e
 800debc:	d10a      	bne.n	800ded4 <_svfiprintf_r+0x130>
 800debe:	7863      	ldrb	r3, [r4, #1]
 800dec0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dec2:	d132      	bne.n	800df2a <_svfiprintf_r+0x186>
 800dec4:	9b03      	ldr	r3, [sp, #12]
 800dec6:	3402      	adds	r4, #2
 800dec8:	1d1a      	adds	r2, r3, #4
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ded0:	9203      	str	r2, [sp, #12]
 800ded2:	9305      	str	r3, [sp, #20]
 800ded4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800df98 <_svfiprintf_r+0x1f4>
 800ded8:	2203      	movs	r2, #3
 800deda:	7821      	ldrb	r1, [r4, #0]
 800dedc:	4650      	mov	r0, sl
 800dede:	f7fd fc5c 	bl	800b79a <memchr>
 800dee2:	b138      	cbz	r0, 800def4 <_svfiprintf_r+0x150>
 800dee4:	eba0 000a 	sub.w	r0, r0, sl
 800dee8:	2240      	movs	r2, #64	@ 0x40
 800deea:	9b04      	ldr	r3, [sp, #16]
 800deec:	3401      	adds	r4, #1
 800deee:	4082      	lsls	r2, r0
 800def0:	4313      	orrs	r3, r2
 800def2:	9304      	str	r3, [sp, #16]
 800def4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def8:	2206      	movs	r2, #6
 800defa:	4824      	ldr	r0, [pc, #144]	@ (800df8c <_svfiprintf_r+0x1e8>)
 800defc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df00:	f7fd fc4b 	bl	800b79a <memchr>
 800df04:	2800      	cmp	r0, #0
 800df06:	d036      	beq.n	800df76 <_svfiprintf_r+0x1d2>
 800df08:	4b21      	ldr	r3, [pc, #132]	@ (800df90 <_svfiprintf_r+0x1ec>)
 800df0a:	bb1b      	cbnz	r3, 800df54 <_svfiprintf_r+0x1b0>
 800df0c:	9b03      	ldr	r3, [sp, #12]
 800df0e:	3307      	adds	r3, #7
 800df10:	f023 0307 	bic.w	r3, r3, #7
 800df14:	3308      	adds	r3, #8
 800df16:	9303      	str	r3, [sp, #12]
 800df18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df1a:	4433      	add	r3, r6
 800df1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1e:	e76a      	b.n	800ddf6 <_svfiprintf_r+0x52>
 800df20:	fb0c 3202 	mla	r2, ip, r2, r3
 800df24:	460c      	mov	r4, r1
 800df26:	2001      	movs	r0, #1
 800df28:	e7a8      	b.n	800de7c <_svfiprintf_r+0xd8>
 800df2a:	2300      	movs	r3, #0
 800df2c:	3401      	adds	r4, #1
 800df2e:	f04f 0c0a 	mov.w	ip, #10
 800df32:	4619      	mov	r1, r3
 800df34:	9305      	str	r3, [sp, #20]
 800df36:	4620      	mov	r0, r4
 800df38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df3c:	3a30      	subs	r2, #48	@ 0x30
 800df3e:	2a09      	cmp	r2, #9
 800df40:	d903      	bls.n	800df4a <_svfiprintf_r+0x1a6>
 800df42:	2b00      	cmp	r3, #0
 800df44:	d0c6      	beq.n	800ded4 <_svfiprintf_r+0x130>
 800df46:	9105      	str	r1, [sp, #20]
 800df48:	e7c4      	b.n	800ded4 <_svfiprintf_r+0x130>
 800df4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df4e:	4604      	mov	r4, r0
 800df50:	2301      	movs	r3, #1
 800df52:	e7f0      	b.n	800df36 <_svfiprintf_r+0x192>
 800df54:	ab03      	add	r3, sp, #12
 800df56:	462a      	mov	r2, r5
 800df58:	a904      	add	r1, sp, #16
 800df5a:	4638      	mov	r0, r7
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	4b0d      	ldr	r3, [pc, #52]	@ (800df94 <_svfiprintf_r+0x1f0>)
 800df60:	f7fc fc96 	bl	800a890 <_printf_float>
 800df64:	1c42      	adds	r2, r0, #1
 800df66:	4606      	mov	r6, r0
 800df68:	d1d6      	bne.n	800df18 <_svfiprintf_r+0x174>
 800df6a:	89ab      	ldrh	r3, [r5, #12]
 800df6c:	065b      	lsls	r3, r3, #25
 800df6e:	f53f af2d 	bmi.w	800ddcc <_svfiprintf_r+0x28>
 800df72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df74:	e72c      	b.n	800ddd0 <_svfiprintf_r+0x2c>
 800df76:	ab03      	add	r3, sp, #12
 800df78:	462a      	mov	r2, r5
 800df7a:	a904      	add	r1, sp, #16
 800df7c:	4638      	mov	r0, r7
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	4b04      	ldr	r3, [pc, #16]	@ (800df94 <_svfiprintf_r+0x1f0>)
 800df82:	f7fc ff21 	bl	800adc8 <_printf_i>
 800df86:	e7ed      	b.n	800df64 <_svfiprintf_r+0x1c0>
 800df88:	0800f3f9 	.word	0x0800f3f9
 800df8c:	0800f403 	.word	0x0800f403
 800df90:	0800a891 	.word	0x0800a891
 800df94:	0800dced 	.word	0x0800dced
 800df98:	0800f3ff 	.word	0x0800f3ff

0800df9c <__sfputc_r>:
 800df9c:	6893      	ldr	r3, [r2, #8]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	6093      	str	r3, [r2, #8]
 800dfa4:	b410      	push	{r4}
 800dfa6:	da08      	bge.n	800dfba <__sfputc_r+0x1e>
 800dfa8:	6994      	ldr	r4, [r2, #24]
 800dfaa:	42a3      	cmp	r3, r4
 800dfac:	db01      	blt.n	800dfb2 <__sfputc_r+0x16>
 800dfae:	290a      	cmp	r1, #10
 800dfb0:	d103      	bne.n	800dfba <__sfputc_r+0x1e>
 800dfb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfb6:	f000 b9df 	b.w	800e378 <__swbuf_r>
 800dfba:	6813      	ldr	r3, [r2, #0]
 800dfbc:	1c58      	adds	r0, r3, #1
 800dfbe:	6010      	str	r0, [r2, #0]
 800dfc0:	4608      	mov	r0, r1
 800dfc2:	7019      	strb	r1, [r3, #0]
 800dfc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <__sfputs_r>:
 800dfca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfcc:	4606      	mov	r6, r0
 800dfce:	460f      	mov	r7, r1
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	18d5      	adds	r5, r2, r3
 800dfd4:	42ac      	cmp	r4, r5
 800dfd6:	d101      	bne.n	800dfdc <__sfputs_r+0x12>
 800dfd8:	2000      	movs	r0, #0
 800dfda:	e007      	b.n	800dfec <__sfputs_r+0x22>
 800dfdc:	463a      	mov	r2, r7
 800dfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7ff ffda 	bl	800df9c <__sfputc_r>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d1f3      	bne.n	800dfd4 <__sfputs_r+0xa>
 800dfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dff0 <_vfiprintf_r>:
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	460d      	mov	r5, r1
 800dff6:	b09d      	sub	sp, #116	@ 0x74
 800dff8:	4614      	mov	r4, r2
 800dffa:	4698      	mov	r8, r3
 800dffc:	4606      	mov	r6, r0
 800dffe:	b118      	cbz	r0, 800e008 <_vfiprintf_r+0x18>
 800e000:	6a03      	ldr	r3, [r0, #32]
 800e002:	b90b      	cbnz	r3, 800e008 <_vfiprintf_r+0x18>
 800e004:	f7fd fa9e 	bl	800b544 <__sinit>
 800e008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e00a:	07d9      	lsls	r1, r3, #31
 800e00c:	d405      	bmi.n	800e01a <_vfiprintf_r+0x2a>
 800e00e:	89ab      	ldrh	r3, [r5, #12]
 800e010:	059a      	lsls	r2, r3, #22
 800e012:	d402      	bmi.n	800e01a <_vfiprintf_r+0x2a>
 800e014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e016:	f7fd fbbe 	bl	800b796 <__retarget_lock_acquire_recursive>
 800e01a:	89ab      	ldrh	r3, [r5, #12]
 800e01c:	071b      	lsls	r3, r3, #28
 800e01e:	d501      	bpl.n	800e024 <_vfiprintf_r+0x34>
 800e020:	692b      	ldr	r3, [r5, #16]
 800e022:	b99b      	cbnz	r3, 800e04c <_vfiprintf_r+0x5c>
 800e024:	4629      	mov	r1, r5
 800e026:	4630      	mov	r0, r6
 800e028:	f000 f9e4 	bl	800e3f4 <__swsetup_r>
 800e02c:	b170      	cbz	r0, 800e04c <_vfiprintf_r+0x5c>
 800e02e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e030:	07dc      	lsls	r4, r3, #31
 800e032:	d504      	bpl.n	800e03e <_vfiprintf_r+0x4e>
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	b01d      	add	sp, #116	@ 0x74
 800e03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03e:	89ab      	ldrh	r3, [r5, #12]
 800e040:	0598      	lsls	r0, r3, #22
 800e042:	d4f7      	bmi.n	800e034 <_vfiprintf_r+0x44>
 800e044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e046:	f7fd fba7 	bl	800b798 <__retarget_lock_release_recursive>
 800e04a:	e7f3      	b.n	800e034 <_vfiprintf_r+0x44>
 800e04c:	2300      	movs	r3, #0
 800e04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e052:	f04f 0901 	mov.w	r9, #1
 800e056:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800e20c <_vfiprintf_r+0x21c>
 800e05a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e05c:	2320      	movs	r3, #32
 800e05e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e062:	2330      	movs	r3, #48	@ 0x30
 800e064:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e068:	4623      	mov	r3, r4
 800e06a:	469a      	mov	sl, r3
 800e06c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e070:	b10a      	cbz	r2, 800e076 <_vfiprintf_r+0x86>
 800e072:	2a25      	cmp	r2, #37	@ 0x25
 800e074:	d1f9      	bne.n	800e06a <_vfiprintf_r+0x7a>
 800e076:	ebba 0b04 	subs.w	fp, sl, r4
 800e07a:	d00b      	beq.n	800e094 <_vfiprintf_r+0xa4>
 800e07c:	465b      	mov	r3, fp
 800e07e:	4622      	mov	r2, r4
 800e080:	4629      	mov	r1, r5
 800e082:	4630      	mov	r0, r6
 800e084:	f7ff ffa1 	bl	800dfca <__sfputs_r>
 800e088:	3001      	adds	r0, #1
 800e08a:	f000 80a7 	beq.w	800e1dc <_vfiprintf_r+0x1ec>
 800e08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e090:	445a      	add	r2, fp
 800e092:	9209      	str	r2, [sp, #36]	@ 0x24
 800e094:	f89a 3000 	ldrb.w	r3, [sl]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f000 809f 	beq.w	800e1dc <_vfiprintf_r+0x1ec>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a4:	f10a 0a01 	add.w	sl, sl, #1
 800e0a8:	9304      	str	r3, [sp, #16]
 800e0aa:	9307      	str	r3, [sp, #28]
 800e0ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0b6:	4654      	mov	r4, sl
 800e0b8:	2205      	movs	r2, #5
 800e0ba:	4854      	ldr	r0, [pc, #336]	@ (800e20c <_vfiprintf_r+0x21c>)
 800e0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0c0:	f7fd fb6b 	bl	800b79a <memchr>
 800e0c4:	9a04      	ldr	r2, [sp, #16]
 800e0c6:	b9d8      	cbnz	r0, 800e100 <_vfiprintf_r+0x110>
 800e0c8:	06d1      	lsls	r1, r2, #27
 800e0ca:	bf44      	itt	mi
 800e0cc:	2320      	movmi	r3, #32
 800e0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0d2:	0713      	lsls	r3, r2, #28
 800e0d4:	bf44      	itt	mi
 800e0d6:	232b      	movmi	r3, #43	@ 0x2b
 800e0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e0e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0e2:	d015      	beq.n	800e110 <_vfiprintf_r+0x120>
 800e0e4:	9a07      	ldr	r2, [sp, #28]
 800e0e6:	4654      	mov	r4, sl
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	f04f 0c0a 	mov.w	ip, #10
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0f4:	3b30      	subs	r3, #48	@ 0x30
 800e0f6:	2b09      	cmp	r3, #9
 800e0f8:	d94b      	bls.n	800e192 <_vfiprintf_r+0x1a2>
 800e0fa:	b1b0      	cbz	r0, 800e12a <_vfiprintf_r+0x13a>
 800e0fc:	9207      	str	r2, [sp, #28]
 800e0fe:	e014      	b.n	800e12a <_vfiprintf_r+0x13a>
 800e100:	eba0 0308 	sub.w	r3, r0, r8
 800e104:	46a2      	mov	sl, r4
 800e106:	fa09 f303 	lsl.w	r3, r9, r3
 800e10a:	4313      	orrs	r3, r2
 800e10c:	9304      	str	r3, [sp, #16]
 800e10e:	e7d2      	b.n	800e0b6 <_vfiprintf_r+0xc6>
 800e110:	9b03      	ldr	r3, [sp, #12]
 800e112:	1d19      	adds	r1, r3, #4
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	9103      	str	r1, [sp, #12]
 800e11a:	bfbb      	ittet	lt
 800e11c:	425b      	neglt	r3, r3
 800e11e:	f042 0202 	orrlt.w	r2, r2, #2
 800e122:	9307      	strge	r3, [sp, #28]
 800e124:	9307      	strlt	r3, [sp, #28]
 800e126:	bfb8      	it	lt
 800e128:	9204      	strlt	r2, [sp, #16]
 800e12a:	7823      	ldrb	r3, [r4, #0]
 800e12c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e12e:	d10a      	bne.n	800e146 <_vfiprintf_r+0x156>
 800e130:	7863      	ldrb	r3, [r4, #1]
 800e132:	2b2a      	cmp	r3, #42	@ 0x2a
 800e134:	d132      	bne.n	800e19c <_vfiprintf_r+0x1ac>
 800e136:	9b03      	ldr	r3, [sp, #12]
 800e138:	3402      	adds	r4, #2
 800e13a:	1d1a      	adds	r2, r3, #4
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e142:	9203      	str	r2, [sp, #12]
 800e144:	9305      	str	r3, [sp, #20]
 800e146:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e21c <_vfiprintf_r+0x22c>
 800e14a:	2203      	movs	r2, #3
 800e14c:	7821      	ldrb	r1, [r4, #0]
 800e14e:	4650      	mov	r0, sl
 800e150:	f7fd fb23 	bl	800b79a <memchr>
 800e154:	b138      	cbz	r0, 800e166 <_vfiprintf_r+0x176>
 800e156:	eba0 000a 	sub.w	r0, r0, sl
 800e15a:	2240      	movs	r2, #64	@ 0x40
 800e15c:	9b04      	ldr	r3, [sp, #16]
 800e15e:	3401      	adds	r4, #1
 800e160:	4082      	lsls	r2, r0
 800e162:	4313      	orrs	r3, r2
 800e164:	9304      	str	r3, [sp, #16]
 800e166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e16a:	2206      	movs	r2, #6
 800e16c:	4828      	ldr	r0, [pc, #160]	@ (800e210 <_vfiprintf_r+0x220>)
 800e16e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e172:	f7fd fb12 	bl	800b79a <memchr>
 800e176:	2800      	cmp	r0, #0
 800e178:	d03f      	beq.n	800e1fa <_vfiprintf_r+0x20a>
 800e17a:	4b26      	ldr	r3, [pc, #152]	@ (800e214 <_vfiprintf_r+0x224>)
 800e17c:	bb1b      	cbnz	r3, 800e1c6 <_vfiprintf_r+0x1d6>
 800e17e:	9b03      	ldr	r3, [sp, #12]
 800e180:	3307      	adds	r3, #7
 800e182:	f023 0307 	bic.w	r3, r3, #7
 800e186:	3308      	adds	r3, #8
 800e188:	9303      	str	r3, [sp, #12]
 800e18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e18c:	443b      	add	r3, r7
 800e18e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e190:	e76a      	b.n	800e068 <_vfiprintf_r+0x78>
 800e192:	fb0c 3202 	mla	r2, ip, r2, r3
 800e196:	460c      	mov	r4, r1
 800e198:	2001      	movs	r0, #1
 800e19a:	e7a8      	b.n	800e0ee <_vfiprintf_r+0xfe>
 800e19c:	2300      	movs	r3, #0
 800e19e:	3401      	adds	r4, #1
 800e1a0:	f04f 0c0a 	mov.w	ip, #10
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	9305      	str	r3, [sp, #20]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ae:	3a30      	subs	r2, #48	@ 0x30
 800e1b0:	2a09      	cmp	r2, #9
 800e1b2:	d903      	bls.n	800e1bc <_vfiprintf_r+0x1cc>
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d0c6      	beq.n	800e146 <_vfiprintf_r+0x156>
 800e1b8:	9105      	str	r1, [sp, #20]
 800e1ba:	e7c4      	b.n	800e146 <_vfiprintf_r+0x156>
 800e1bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e7f0      	b.n	800e1a8 <_vfiprintf_r+0x1b8>
 800e1c6:	ab03      	add	r3, sp, #12
 800e1c8:	462a      	mov	r2, r5
 800e1ca:	a904      	add	r1, sp, #16
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	4b11      	ldr	r3, [pc, #68]	@ (800e218 <_vfiprintf_r+0x228>)
 800e1d2:	f7fc fb5d 	bl	800a890 <_printf_float>
 800e1d6:	4607      	mov	r7, r0
 800e1d8:	1c78      	adds	r0, r7, #1
 800e1da:	d1d6      	bne.n	800e18a <_vfiprintf_r+0x19a>
 800e1dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1de:	07d9      	lsls	r1, r3, #31
 800e1e0:	d405      	bmi.n	800e1ee <_vfiprintf_r+0x1fe>
 800e1e2:	89ab      	ldrh	r3, [r5, #12]
 800e1e4:	059a      	lsls	r2, r3, #22
 800e1e6:	d402      	bmi.n	800e1ee <_vfiprintf_r+0x1fe>
 800e1e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1ea:	f7fd fad5 	bl	800b798 <__retarget_lock_release_recursive>
 800e1ee:	89ab      	ldrh	r3, [r5, #12]
 800e1f0:	065b      	lsls	r3, r3, #25
 800e1f2:	f53f af1f 	bmi.w	800e034 <_vfiprintf_r+0x44>
 800e1f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1f8:	e71e      	b.n	800e038 <_vfiprintf_r+0x48>
 800e1fa:	ab03      	add	r3, sp, #12
 800e1fc:	462a      	mov	r2, r5
 800e1fe:	a904      	add	r1, sp, #16
 800e200:	4630      	mov	r0, r6
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	4b04      	ldr	r3, [pc, #16]	@ (800e218 <_vfiprintf_r+0x228>)
 800e206:	f7fc fddf 	bl	800adc8 <_printf_i>
 800e20a:	e7e4      	b.n	800e1d6 <_vfiprintf_r+0x1e6>
 800e20c:	0800f3f9 	.word	0x0800f3f9
 800e210:	0800f403 	.word	0x0800f403
 800e214:	0800a891 	.word	0x0800a891
 800e218:	0800dfcb 	.word	0x0800dfcb
 800e21c:	0800f3ff 	.word	0x0800f3ff

0800e220 <__sflush_r>:
 800e220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e228:	0716      	lsls	r6, r2, #28
 800e22a:	4605      	mov	r5, r0
 800e22c:	460c      	mov	r4, r1
 800e22e:	d454      	bmi.n	800e2da <__sflush_r+0xba>
 800e230:	684b      	ldr	r3, [r1, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	dc02      	bgt.n	800e23c <__sflush_r+0x1c>
 800e236:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e238:	2b00      	cmp	r3, #0
 800e23a:	dd48      	ble.n	800e2ce <__sflush_r+0xae>
 800e23c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e23e:	2e00      	cmp	r6, #0
 800e240:	d045      	beq.n	800e2ce <__sflush_r+0xae>
 800e242:	2300      	movs	r3, #0
 800e244:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e248:	682f      	ldr	r7, [r5, #0]
 800e24a:	6a21      	ldr	r1, [r4, #32]
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	d030      	beq.n	800e2b2 <__sflush_r+0x92>
 800e250:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e252:	89a3      	ldrh	r3, [r4, #12]
 800e254:	0759      	lsls	r1, r3, #29
 800e256:	d505      	bpl.n	800e264 <__sflush_r+0x44>
 800e258:	6863      	ldr	r3, [r4, #4]
 800e25a:	1ad2      	subs	r2, r2, r3
 800e25c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e25e:	b10b      	cbz	r3, 800e264 <__sflush_r+0x44>
 800e260:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e262:	1ad2      	subs	r2, r2, r3
 800e264:	2300      	movs	r3, #0
 800e266:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e268:	6a21      	ldr	r1, [r4, #32]
 800e26a:	4628      	mov	r0, r5
 800e26c:	47b0      	blx	r6
 800e26e:	1c43      	adds	r3, r0, #1
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	d106      	bne.n	800e282 <__sflush_r+0x62>
 800e274:	6829      	ldr	r1, [r5, #0]
 800e276:	291d      	cmp	r1, #29
 800e278:	d82b      	bhi.n	800e2d2 <__sflush_r+0xb2>
 800e27a:	4a2a      	ldr	r2, [pc, #168]	@ (800e324 <__sflush_r+0x104>)
 800e27c:	410a      	asrs	r2, r1
 800e27e:	07d6      	lsls	r6, r2, #31
 800e280:	d427      	bmi.n	800e2d2 <__sflush_r+0xb2>
 800e282:	2200      	movs	r2, #0
 800e284:	04d9      	lsls	r1, r3, #19
 800e286:	6062      	str	r2, [r4, #4]
 800e288:	6922      	ldr	r2, [r4, #16]
 800e28a:	6022      	str	r2, [r4, #0]
 800e28c:	d504      	bpl.n	800e298 <__sflush_r+0x78>
 800e28e:	1c42      	adds	r2, r0, #1
 800e290:	d101      	bne.n	800e296 <__sflush_r+0x76>
 800e292:	682b      	ldr	r3, [r5, #0]
 800e294:	b903      	cbnz	r3, 800e298 <__sflush_r+0x78>
 800e296:	6560      	str	r0, [r4, #84]	@ 0x54
 800e298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e29a:	602f      	str	r7, [r5, #0]
 800e29c:	b1b9      	cbz	r1, 800e2ce <__sflush_r+0xae>
 800e29e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2a2:	4299      	cmp	r1, r3
 800e2a4:	d002      	beq.n	800e2ac <__sflush_r+0x8c>
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	f7fe f8de 	bl	800c468 <_free_r>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2b0:	e00d      	b.n	800e2ce <__sflush_r+0xae>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	47b0      	blx	r6
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	1c50      	adds	r0, r2, #1
 800e2bc:	d1c9      	bne.n	800e252 <__sflush_r+0x32>
 800e2be:	682b      	ldr	r3, [r5, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d0c6      	beq.n	800e252 <__sflush_r+0x32>
 800e2c4:	2b1d      	cmp	r3, #29
 800e2c6:	d001      	beq.n	800e2cc <__sflush_r+0xac>
 800e2c8:	2b16      	cmp	r3, #22
 800e2ca:	d11d      	bne.n	800e308 <__sflush_r+0xe8>
 800e2cc:	602f      	str	r7, [r5, #0]
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	e021      	b.n	800e316 <__sflush_r+0xf6>
 800e2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2d6:	b21b      	sxth	r3, r3
 800e2d8:	e01a      	b.n	800e310 <__sflush_r+0xf0>
 800e2da:	690f      	ldr	r7, [r1, #16]
 800e2dc:	2f00      	cmp	r7, #0
 800e2de:	d0f6      	beq.n	800e2ce <__sflush_r+0xae>
 800e2e0:	0793      	lsls	r3, r2, #30
 800e2e2:	680e      	ldr	r6, [r1, #0]
 800e2e4:	600f      	str	r7, [r1, #0]
 800e2e6:	bf0c      	ite	eq
 800e2e8:	694b      	ldreq	r3, [r1, #20]
 800e2ea:	2300      	movne	r3, #0
 800e2ec:	eba6 0807 	sub.w	r8, r6, r7
 800e2f0:	608b      	str	r3, [r1, #8]
 800e2f2:	f1b8 0f00 	cmp.w	r8, #0
 800e2f6:	ddea      	ble.n	800e2ce <__sflush_r+0xae>
 800e2f8:	4643      	mov	r3, r8
 800e2fa:	463a      	mov	r2, r7
 800e2fc:	6a21      	ldr	r1, [r4, #32]
 800e2fe:	4628      	mov	r0, r5
 800e300:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e302:	47b0      	blx	r6
 800e304:	2800      	cmp	r0, #0
 800e306:	dc08      	bgt.n	800e31a <__sflush_r+0xfa>
 800e308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e30c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e310:	f04f 30ff 	mov.w	r0, #4294967295
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31a:	4407      	add	r7, r0
 800e31c:	eba8 0800 	sub.w	r8, r8, r0
 800e320:	e7e7      	b.n	800e2f2 <__sflush_r+0xd2>
 800e322:	bf00      	nop
 800e324:	dfbffffe 	.word	0xdfbffffe

0800e328 <_fflush_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	690b      	ldr	r3, [r1, #16]
 800e32c:	4605      	mov	r5, r0
 800e32e:	460c      	mov	r4, r1
 800e330:	b913      	cbnz	r3, 800e338 <_fflush_r+0x10>
 800e332:	2500      	movs	r5, #0
 800e334:	4628      	mov	r0, r5
 800e336:	bd38      	pop	{r3, r4, r5, pc}
 800e338:	b118      	cbz	r0, 800e342 <_fflush_r+0x1a>
 800e33a:	6a03      	ldr	r3, [r0, #32]
 800e33c:	b90b      	cbnz	r3, 800e342 <_fflush_r+0x1a>
 800e33e:	f7fd f901 	bl	800b544 <__sinit>
 800e342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d0f3      	beq.n	800e332 <_fflush_r+0xa>
 800e34a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e34c:	07d0      	lsls	r0, r2, #31
 800e34e:	d404      	bmi.n	800e35a <_fflush_r+0x32>
 800e350:	0599      	lsls	r1, r3, #22
 800e352:	d402      	bmi.n	800e35a <_fflush_r+0x32>
 800e354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e356:	f7fd fa1e 	bl	800b796 <__retarget_lock_acquire_recursive>
 800e35a:	4628      	mov	r0, r5
 800e35c:	4621      	mov	r1, r4
 800e35e:	f7ff ff5f 	bl	800e220 <__sflush_r>
 800e362:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e364:	4605      	mov	r5, r0
 800e366:	07da      	lsls	r2, r3, #31
 800e368:	d4e4      	bmi.n	800e334 <_fflush_r+0xc>
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	059b      	lsls	r3, r3, #22
 800e36e:	d4e1      	bmi.n	800e334 <_fflush_r+0xc>
 800e370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e372:	f7fd fa11 	bl	800b798 <__retarget_lock_release_recursive>
 800e376:	e7dd      	b.n	800e334 <_fflush_r+0xc>

0800e378 <__swbuf_r>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	460e      	mov	r6, r1
 800e37c:	4614      	mov	r4, r2
 800e37e:	4605      	mov	r5, r0
 800e380:	b118      	cbz	r0, 800e38a <__swbuf_r+0x12>
 800e382:	6a03      	ldr	r3, [r0, #32]
 800e384:	b90b      	cbnz	r3, 800e38a <__swbuf_r+0x12>
 800e386:	f7fd f8dd 	bl	800b544 <__sinit>
 800e38a:	69a3      	ldr	r3, [r4, #24]
 800e38c:	60a3      	str	r3, [r4, #8]
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	071a      	lsls	r2, r3, #28
 800e392:	d501      	bpl.n	800e398 <__swbuf_r+0x20>
 800e394:	6923      	ldr	r3, [r4, #16]
 800e396:	b943      	cbnz	r3, 800e3aa <__swbuf_r+0x32>
 800e398:	4621      	mov	r1, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	f000 f82a 	bl	800e3f4 <__swsetup_r>
 800e3a0:	b118      	cbz	r0, 800e3aa <__swbuf_r+0x32>
 800e3a2:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	b2f6      	uxtb	r6, r6
 800e3ae:	6922      	ldr	r2, [r4, #16]
 800e3b0:	4637      	mov	r7, r6
 800e3b2:	1a98      	subs	r0, r3, r2
 800e3b4:	6963      	ldr	r3, [r4, #20]
 800e3b6:	4283      	cmp	r3, r0
 800e3b8:	dc05      	bgt.n	800e3c6 <__swbuf_r+0x4e>
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	4628      	mov	r0, r5
 800e3be:	f7ff ffb3 	bl	800e328 <_fflush_r>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d1ed      	bne.n	800e3a2 <__swbuf_r+0x2a>
 800e3c6:	68a3      	ldr	r3, [r4, #8]
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	60a3      	str	r3, [r4, #8]
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	1c5a      	adds	r2, r3, #1
 800e3d0:	6022      	str	r2, [r4, #0]
 800e3d2:	701e      	strb	r6, [r3, #0]
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	6962      	ldr	r2, [r4, #20]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d004      	beq.n	800e3e6 <__swbuf_r+0x6e>
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	07db      	lsls	r3, r3, #31
 800e3e0:	d5e1      	bpl.n	800e3a6 <__swbuf_r+0x2e>
 800e3e2:	2e0a      	cmp	r6, #10
 800e3e4:	d1df      	bne.n	800e3a6 <__swbuf_r+0x2e>
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f7ff ff9d 	bl	800e328 <_fflush_r>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	d0d9      	beq.n	800e3a6 <__swbuf_r+0x2e>
 800e3f2:	e7d6      	b.n	800e3a2 <__swbuf_r+0x2a>

0800e3f4 <__swsetup_r>:
 800e3f4:	b538      	push	{r3, r4, r5, lr}
 800e3f6:	4b29      	ldr	r3, [pc, #164]	@ (800e49c <__swsetup_r+0xa8>)
 800e3f8:	4605      	mov	r5, r0
 800e3fa:	460c      	mov	r4, r1
 800e3fc:	6818      	ldr	r0, [r3, #0]
 800e3fe:	b118      	cbz	r0, 800e408 <__swsetup_r+0x14>
 800e400:	6a03      	ldr	r3, [r0, #32]
 800e402:	b90b      	cbnz	r3, 800e408 <__swsetup_r+0x14>
 800e404:	f7fd f89e 	bl	800b544 <__sinit>
 800e408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40c:	0719      	lsls	r1, r3, #28
 800e40e:	d422      	bmi.n	800e456 <__swsetup_r+0x62>
 800e410:	06da      	lsls	r2, r3, #27
 800e412:	d407      	bmi.n	800e424 <__swsetup_r+0x30>
 800e414:	2209      	movs	r2, #9
 800e416:	602a      	str	r2, [r5, #0]
 800e418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e41c:	f04f 30ff 	mov.w	r0, #4294967295
 800e420:	81a3      	strh	r3, [r4, #12]
 800e422:	e033      	b.n	800e48c <__swsetup_r+0x98>
 800e424:	0758      	lsls	r0, r3, #29
 800e426:	d512      	bpl.n	800e44e <__swsetup_r+0x5a>
 800e428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e42a:	b141      	cbz	r1, 800e43e <__swsetup_r+0x4a>
 800e42c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e430:	4299      	cmp	r1, r3
 800e432:	d002      	beq.n	800e43a <__swsetup_r+0x46>
 800e434:	4628      	mov	r0, r5
 800e436:	f7fe f817 	bl	800c468 <_free_r>
 800e43a:	2300      	movs	r3, #0
 800e43c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e43e:	89a3      	ldrh	r3, [r4, #12]
 800e440:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e444:	81a3      	strh	r3, [r4, #12]
 800e446:	2300      	movs	r3, #0
 800e448:	6063      	str	r3, [r4, #4]
 800e44a:	6923      	ldr	r3, [r4, #16]
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	89a3      	ldrh	r3, [r4, #12]
 800e450:	f043 0308 	orr.w	r3, r3, #8
 800e454:	81a3      	strh	r3, [r4, #12]
 800e456:	6923      	ldr	r3, [r4, #16]
 800e458:	b94b      	cbnz	r3, 800e46e <__swsetup_r+0x7a>
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e464:	d003      	beq.n	800e46e <__swsetup_r+0x7a>
 800e466:	4621      	mov	r1, r4
 800e468:	4628      	mov	r0, r5
 800e46a:	f000 fc58 	bl	800ed1e <__smakebuf_r>
 800e46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e472:	f013 0201 	ands.w	r2, r3, #1
 800e476:	d00a      	beq.n	800e48e <__swsetup_r+0x9a>
 800e478:	2200      	movs	r2, #0
 800e47a:	60a2      	str	r2, [r4, #8]
 800e47c:	6962      	ldr	r2, [r4, #20]
 800e47e:	4252      	negs	r2, r2
 800e480:	61a2      	str	r2, [r4, #24]
 800e482:	6922      	ldr	r2, [r4, #16]
 800e484:	b942      	cbnz	r2, 800e498 <__swsetup_r+0xa4>
 800e486:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e48a:	d1c5      	bne.n	800e418 <__swsetup_r+0x24>
 800e48c:	bd38      	pop	{r3, r4, r5, pc}
 800e48e:	0799      	lsls	r1, r3, #30
 800e490:	bf58      	it	pl
 800e492:	6962      	ldrpl	r2, [r4, #20]
 800e494:	60a2      	str	r2, [r4, #8]
 800e496:	e7f4      	b.n	800e482 <__swsetup_r+0x8e>
 800e498:	2000      	movs	r0, #0
 800e49a:	e7f7      	b.n	800e48c <__swsetup_r+0x98>
 800e49c:	20000018 	.word	0x20000018

0800e4a0 <memmove>:
 800e4a0:	4288      	cmp	r0, r1
 800e4a2:	b510      	push	{r4, lr}
 800e4a4:	eb01 0402 	add.w	r4, r1, r2
 800e4a8:	d902      	bls.n	800e4b0 <memmove+0x10>
 800e4aa:	4284      	cmp	r4, r0
 800e4ac:	4623      	mov	r3, r4
 800e4ae:	d807      	bhi.n	800e4c0 <memmove+0x20>
 800e4b0:	1e43      	subs	r3, r0, #1
 800e4b2:	42a1      	cmp	r1, r4
 800e4b4:	d008      	beq.n	800e4c8 <memmove+0x28>
 800e4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4be:	e7f8      	b.n	800e4b2 <memmove+0x12>
 800e4c0:	4402      	add	r2, r0
 800e4c2:	4601      	mov	r1, r0
 800e4c4:	428a      	cmp	r2, r1
 800e4c6:	d100      	bne.n	800e4ca <memmove+0x2a>
 800e4c8:	bd10      	pop	{r4, pc}
 800e4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4d2:	e7f7      	b.n	800e4c4 <memmove+0x24>

0800e4d4 <strncmp>:
 800e4d4:	b510      	push	{r4, lr}
 800e4d6:	b16a      	cbz	r2, 800e4f4 <strncmp+0x20>
 800e4d8:	3901      	subs	r1, #1
 800e4da:	1884      	adds	r4, r0, r2
 800e4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d103      	bne.n	800e4f0 <strncmp+0x1c>
 800e4e8:	42a0      	cmp	r0, r4
 800e4ea:	d001      	beq.n	800e4f0 <strncmp+0x1c>
 800e4ec:	2a00      	cmp	r2, #0
 800e4ee:	d1f5      	bne.n	800e4dc <strncmp+0x8>
 800e4f0:	1ad0      	subs	r0, r2, r3
 800e4f2:	bd10      	pop	{r4, pc}
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	e7fc      	b.n	800e4f2 <strncmp+0x1e>

0800e4f8 <_sbrk_r>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	4d05      	ldr	r5, [pc, #20]	@ (800e514 <_sbrk_r+0x1c>)
 800e4fe:	4604      	mov	r4, r0
 800e500:	4608      	mov	r0, r1
 800e502:	602b      	str	r3, [r5, #0]
 800e504:	f7f4 fa5e 	bl	80029c4 <_sbrk>
 800e508:	1c43      	adds	r3, r0, #1
 800e50a:	d102      	bne.n	800e512 <_sbrk_r+0x1a>
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	b103      	cbz	r3, 800e512 <_sbrk_r+0x1a>
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	bd38      	pop	{r3, r4, r5, pc}
 800e514:	20000a1c 	.word	0x20000a1c

0800e518 <memcpy>:
 800e518:	440a      	add	r2, r1
 800e51a:	1e43      	subs	r3, r0, #1
 800e51c:	4291      	cmp	r1, r2
 800e51e:	d100      	bne.n	800e522 <memcpy+0xa>
 800e520:	4770      	bx	lr
 800e522:	b510      	push	{r4, lr}
 800e524:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e528:	4291      	cmp	r1, r2
 800e52a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e52e:	d1f9      	bne.n	800e524 <memcpy+0xc>
 800e530:	bd10      	pop	{r4, pc}
 800e532:	0000      	movs	r0, r0
 800e534:	0000      	movs	r0, r0
	...

0800e538 <nan>:
 800e538:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e540 <nan+0x8>
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	00000000 	.word	0x00000000
 800e544:	7ff80000 	.word	0x7ff80000

0800e548 <__assert_func>:
 800e548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e54a:	4614      	mov	r4, r2
 800e54c:	461a      	mov	r2, r3
 800e54e:	4b09      	ldr	r3, [pc, #36]	@ (800e574 <__assert_func+0x2c>)
 800e550:	4605      	mov	r5, r0
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68d8      	ldr	r0, [r3, #12]
 800e556:	b954      	cbnz	r4, 800e56e <__assert_func+0x26>
 800e558:	4b07      	ldr	r3, [pc, #28]	@ (800e578 <__assert_func+0x30>)
 800e55a:	461c      	mov	r4, r3
 800e55c:	9100      	str	r1, [sp, #0]
 800e55e:	4907      	ldr	r1, [pc, #28]	@ (800e57c <__assert_func+0x34>)
 800e560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e564:	462b      	mov	r3, r5
 800e566:	f000 fba3 	bl	800ecb0 <fiprintf>
 800e56a:	f000 fc37 	bl	800eddc <abort>
 800e56e:	4b04      	ldr	r3, [pc, #16]	@ (800e580 <__assert_func+0x38>)
 800e570:	e7f4      	b.n	800e55c <__assert_func+0x14>
 800e572:	bf00      	nop
 800e574:	20000018 	.word	0x20000018
 800e578:	0800f44d 	.word	0x0800f44d
 800e57c:	0800f41f 	.word	0x0800f41f
 800e580:	0800f412 	.word	0x0800f412

0800e584 <_calloc_r>:
 800e584:	b570      	push	{r4, r5, r6, lr}
 800e586:	fba1 5402 	umull	r5, r4, r1, r2
 800e58a:	b93c      	cbnz	r4, 800e59c <_calloc_r+0x18>
 800e58c:	4629      	mov	r1, r5
 800e58e:	f7fd ffdf 	bl	800c550 <_malloc_r>
 800e592:	4606      	mov	r6, r0
 800e594:	b928      	cbnz	r0, 800e5a2 <_calloc_r+0x1e>
 800e596:	2600      	movs	r6, #0
 800e598:	4630      	mov	r0, r6
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	220c      	movs	r2, #12
 800e59e:	6002      	str	r2, [r0, #0]
 800e5a0:	e7f9      	b.n	800e596 <_calloc_r+0x12>
 800e5a2:	462a      	mov	r2, r5
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	f7fd f878 	bl	800b69a <memset>
 800e5aa:	e7f5      	b.n	800e598 <_calloc_r+0x14>

0800e5ac <rshift>:
 800e5ac:	6903      	ldr	r3, [r0, #16]
 800e5ae:	114a      	asrs	r2, r1, #5
 800e5b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5b8:	f100 0414 	add.w	r4, r0, #20
 800e5bc:	dd45      	ble.n	800e64a <rshift+0x9e>
 800e5be:	f011 011f 	ands.w	r1, r1, #31
 800e5c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e5c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5ca:	d10c      	bne.n	800e5e6 <rshift+0x3a>
 800e5cc:	f100 0710 	add.w	r7, r0, #16
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	42b1      	cmp	r1, r6
 800e5d4:	d334      	bcc.n	800e640 <rshift+0x94>
 800e5d6:	1a9b      	subs	r3, r3, r2
 800e5d8:	1eea      	subs	r2, r5, #3
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4296      	cmp	r6, r2
 800e5de:	bf38      	it	cc
 800e5e0:	2300      	movcc	r3, #0
 800e5e2:	4423      	add	r3, r4
 800e5e4:	e015      	b.n	800e612 <rshift+0x66>
 800e5e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e5ea:	f1c1 0820 	rsb	r8, r1, #32
 800e5ee:	f105 0e04 	add.w	lr, r5, #4
 800e5f2:	46a1      	mov	r9, r4
 800e5f4:	40cf      	lsrs	r7, r1
 800e5f6:	4576      	cmp	r6, lr
 800e5f8:	46f4      	mov	ip, lr
 800e5fa:	d815      	bhi.n	800e628 <rshift+0x7c>
 800e5fc:	1a9a      	subs	r2, r3, r2
 800e5fe:	3501      	adds	r5, #1
 800e600:	0092      	lsls	r2, r2, #2
 800e602:	3a04      	subs	r2, #4
 800e604:	42ae      	cmp	r6, r5
 800e606:	bf38      	it	cc
 800e608:	2200      	movcc	r2, #0
 800e60a:	18a3      	adds	r3, r4, r2
 800e60c:	50a7      	str	r7, [r4, r2]
 800e60e:	b107      	cbz	r7, 800e612 <rshift+0x66>
 800e610:	3304      	adds	r3, #4
 800e612:	1b1a      	subs	r2, r3, r4
 800e614:	42a3      	cmp	r3, r4
 800e616:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e61a:	bf08      	it	eq
 800e61c:	2300      	moveq	r3, #0
 800e61e:	6102      	str	r2, [r0, #16]
 800e620:	bf08      	it	eq
 800e622:	6143      	streq	r3, [r0, #20]
 800e624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e628:	f8dc c000 	ldr.w	ip, [ip]
 800e62c:	fa0c fc08 	lsl.w	ip, ip, r8
 800e630:	ea4c 0707 	orr.w	r7, ip, r7
 800e634:	f849 7b04 	str.w	r7, [r9], #4
 800e638:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e63c:	40cf      	lsrs	r7, r1
 800e63e:	e7da      	b.n	800e5f6 <rshift+0x4a>
 800e640:	f851 cb04 	ldr.w	ip, [r1], #4
 800e644:	f847 cf04 	str.w	ip, [r7, #4]!
 800e648:	e7c3      	b.n	800e5d2 <rshift+0x26>
 800e64a:	4623      	mov	r3, r4
 800e64c:	e7e1      	b.n	800e612 <rshift+0x66>

0800e64e <__hexdig_fun>:
 800e64e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e652:	2b09      	cmp	r3, #9
 800e654:	d802      	bhi.n	800e65c <__hexdig_fun+0xe>
 800e656:	3820      	subs	r0, #32
 800e658:	b2c0      	uxtb	r0, r0
 800e65a:	4770      	bx	lr
 800e65c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e660:	2b05      	cmp	r3, #5
 800e662:	d801      	bhi.n	800e668 <__hexdig_fun+0x1a>
 800e664:	3847      	subs	r0, #71	@ 0x47
 800e666:	e7f7      	b.n	800e658 <__hexdig_fun+0xa>
 800e668:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e66c:	2b05      	cmp	r3, #5
 800e66e:	d801      	bhi.n	800e674 <__hexdig_fun+0x26>
 800e670:	3827      	subs	r0, #39	@ 0x27
 800e672:	e7f1      	b.n	800e658 <__hexdig_fun+0xa>
 800e674:	2000      	movs	r0, #0
 800e676:	4770      	bx	lr

0800e678 <__gethex>:
 800e678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67c:	b085      	sub	sp, #20
 800e67e:	468a      	mov	sl, r1
 800e680:	4690      	mov	r8, r2
 800e682:	9302      	str	r3, [sp, #8]
 800e684:	680b      	ldr	r3, [r1, #0]
 800e686:	9001      	str	r0, [sp, #4]
 800e688:	1c9c      	adds	r4, r3, #2
 800e68a:	46a1      	mov	r9, r4
 800e68c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e690:	2830      	cmp	r0, #48	@ 0x30
 800e692:	d0fa      	beq.n	800e68a <__gethex+0x12>
 800e694:	eba9 0303 	sub.w	r3, r9, r3
 800e698:	f1a3 0b02 	sub.w	fp, r3, #2
 800e69c:	f7ff ffd7 	bl	800e64e <__hexdig_fun>
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d166      	bne.n	800e774 <__gethex+0xfc>
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	499e      	ldr	r1, [pc, #632]	@ (800e924 <__gethex+0x2ac>)
 800e6aa:	4648      	mov	r0, r9
 800e6ac:	f7ff ff12 	bl	800e4d4 <strncmp>
 800e6b0:	4607      	mov	r7, r0
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d165      	bne.n	800e782 <__gethex+0x10a>
 800e6b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e6ba:	4626      	mov	r6, r4
 800e6bc:	f7ff ffc7 	bl	800e64e <__hexdig_fun>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d060      	beq.n	800e786 <__gethex+0x10e>
 800e6c4:	4623      	mov	r3, r4
 800e6c6:	7818      	ldrb	r0, [r3, #0]
 800e6c8:	4699      	mov	r9, r3
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	2830      	cmp	r0, #48	@ 0x30
 800e6ce:	d0fa      	beq.n	800e6c6 <__gethex+0x4e>
 800e6d0:	f7ff ffbd 	bl	800e64e <__hexdig_fun>
 800e6d4:	fab0 f580 	clz	r5, r0
 800e6d8:	f04f 0b01 	mov.w	fp, #1
 800e6dc:	096d      	lsrs	r5, r5, #5
 800e6de:	464a      	mov	r2, r9
 800e6e0:	4616      	mov	r6, r2
 800e6e2:	3201      	adds	r2, #1
 800e6e4:	7830      	ldrb	r0, [r6, #0]
 800e6e6:	f7ff ffb2 	bl	800e64e <__hexdig_fun>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d1f8      	bne.n	800e6e0 <__gethex+0x68>
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	498c      	ldr	r1, [pc, #560]	@ (800e924 <__gethex+0x2ac>)
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f7ff feee 	bl	800e4d4 <strncmp>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d13e      	bne.n	800e77a <__gethex+0x102>
 800e6fc:	b944      	cbnz	r4, 800e710 <__gethex+0x98>
 800e6fe:	1c74      	adds	r4, r6, #1
 800e700:	4622      	mov	r2, r4
 800e702:	4616      	mov	r6, r2
 800e704:	3201      	adds	r2, #1
 800e706:	7830      	ldrb	r0, [r6, #0]
 800e708:	f7ff ffa1 	bl	800e64e <__hexdig_fun>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d1f8      	bne.n	800e702 <__gethex+0x8a>
 800e710:	1ba4      	subs	r4, r4, r6
 800e712:	00a7      	lsls	r7, r4, #2
 800e714:	7833      	ldrb	r3, [r6, #0]
 800e716:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e71a:	2b50      	cmp	r3, #80	@ 0x50
 800e71c:	d13d      	bne.n	800e79a <__gethex+0x122>
 800e71e:	7873      	ldrb	r3, [r6, #1]
 800e720:	2b2b      	cmp	r3, #43	@ 0x2b
 800e722:	d032      	beq.n	800e78a <__gethex+0x112>
 800e724:	2b2d      	cmp	r3, #45	@ 0x2d
 800e726:	d033      	beq.n	800e790 <__gethex+0x118>
 800e728:	1c71      	adds	r1, r6, #1
 800e72a:	2400      	movs	r4, #0
 800e72c:	7808      	ldrb	r0, [r1, #0]
 800e72e:	f7ff ff8e 	bl	800e64e <__hexdig_fun>
 800e732:	1e43      	subs	r3, r0, #1
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b18      	cmp	r3, #24
 800e738:	d82f      	bhi.n	800e79a <__gethex+0x122>
 800e73a:	f1a0 0210 	sub.w	r2, r0, #16
 800e73e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e742:	f7ff ff84 	bl	800e64e <__hexdig_fun>
 800e746:	f100 3cff 	add.w	ip, r0, #4294967295
 800e74a:	230a      	movs	r3, #10
 800e74c:	fa5f fc8c 	uxtb.w	ip, ip
 800e750:	f1bc 0f18 	cmp.w	ip, #24
 800e754:	d91e      	bls.n	800e794 <__gethex+0x11c>
 800e756:	b104      	cbz	r4, 800e75a <__gethex+0xe2>
 800e758:	4252      	negs	r2, r2
 800e75a:	4417      	add	r7, r2
 800e75c:	f8ca 1000 	str.w	r1, [sl]
 800e760:	b1ed      	cbz	r5, 800e79e <__gethex+0x126>
 800e762:	f1bb 0f00 	cmp.w	fp, #0
 800e766:	bf0c      	ite	eq
 800e768:	2506      	moveq	r5, #6
 800e76a:	2500      	movne	r5, #0
 800e76c:	4628      	mov	r0, r5
 800e76e:	b005      	add	sp, #20
 800e770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e774:	2500      	movs	r5, #0
 800e776:	462c      	mov	r4, r5
 800e778:	e7b1      	b.n	800e6de <__gethex+0x66>
 800e77a:	2c00      	cmp	r4, #0
 800e77c:	d1c8      	bne.n	800e710 <__gethex+0x98>
 800e77e:	4627      	mov	r7, r4
 800e780:	e7c8      	b.n	800e714 <__gethex+0x9c>
 800e782:	464e      	mov	r6, r9
 800e784:	462f      	mov	r7, r5
 800e786:	2501      	movs	r5, #1
 800e788:	e7c4      	b.n	800e714 <__gethex+0x9c>
 800e78a:	2400      	movs	r4, #0
 800e78c:	1cb1      	adds	r1, r6, #2
 800e78e:	e7cd      	b.n	800e72c <__gethex+0xb4>
 800e790:	2401      	movs	r4, #1
 800e792:	e7fb      	b.n	800e78c <__gethex+0x114>
 800e794:	fb03 0002 	mla	r0, r3, r2, r0
 800e798:	e7cf      	b.n	800e73a <__gethex+0xc2>
 800e79a:	4631      	mov	r1, r6
 800e79c:	e7de      	b.n	800e75c <__gethex+0xe4>
 800e79e:	eba6 0309 	sub.w	r3, r6, r9
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	2b07      	cmp	r3, #7
 800e7a8:	dc0a      	bgt.n	800e7c0 <__gethex+0x148>
 800e7aa:	9801      	ldr	r0, [sp, #4]
 800e7ac:	f7fd ff5c 	bl	800c668 <_Balloc>
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	b940      	cbnz	r0, 800e7c6 <__gethex+0x14e>
 800e7b4:	4b5c      	ldr	r3, [pc, #368]	@ (800e928 <__gethex+0x2b0>)
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	21e4      	movs	r1, #228	@ 0xe4
 800e7ba:	485c      	ldr	r0, [pc, #368]	@ (800e92c <__gethex+0x2b4>)
 800e7bc:	f7ff fec4 	bl	800e548 <__assert_func>
 800e7c0:	3101      	adds	r1, #1
 800e7c2:	105b      	asrs	r3, r3, #1
 800e7c4:	e7ef      	b.n	800e7a6 <__gethex+0x12e>
 800e7c6:	f100 0a14 	add.w	sl, r0, #20
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	4655      	mov	r5, sl
 800e7ce:	469b      	mov	fp, r3
 800e7d0:	45b1      	cmp	r9, r6
 800e7d2:	d337      	bcc.n	800e844 <__gethex+0x1cc>
 800e7d4:	f845 bb04 	str.w	fp, [r5], #4
 800e7d8:	eba5 050a 	sub.w	r5, r5, sl
 800e7dc:	4658      	mov	r0, fp
 800e7de:	10ad      	asrs	r5, r5, #2
 800e7e0:	6125      	str	r5, [r4, #16]
 800e7e2:	016d      	lsls	r5, r5, #5
 800e7e4:	f7fe f834 	bl	800c850 <__hi0bits>
 800e7e8:	f8d8 6000 	ldr.w	r6, [r8]
 800e7ec:	1a2d      	subs	r5, r5, r0
 800e7ee:	42b5      	cmp	r5, r6
 800e7f0:	dd54      	ble.n	800e89c <__gethex+0x224>
 800e7f2:	1bad      	subs	r5, r5, r6
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	f7fe fbd1 	bl	800cf9e <__any_on>
 800e7fc:	4681      	mov	r9, r0
 800e7fe:	b178      	cbz	r0, 800e820 <__gethex+0x1a8>
 800e800:	1e6b      	subs	r3, r5, #1
 800e802:	f04f 0901 	mov.w	r9, #1
 800e806:	1159      	asrs	r1, r3, #5
 800e808:	f003 021f 	and.w	r2, r3, #31
 800e80c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e810:	fa09 f202 	lsl.w	r2, r9, r2
 800e814:	420a      	tst	r2, r1
 800e816:	d003      	beq.n	800e820 <__gethex+0x1a8>
 800e818:	454b      	cmp	r3, r9
 800e81a:	dc36      	bgt.n	800e88a <__gethex+0x212>
 800e81c:	f04f 0902 	mov.w	r9, #2
 800e820:	442f      	add	r7, r5
 800e822:	4629      	mov	r1, r5
 800e824:	4620      	mov	r0, r4
 800e826:	f7ff fec1 	bl	800e5ac <rshift>
 800e82a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e82e:	42bb      	cmp	r3, r7
 800e830:	da42      	bge.n	800e8b8 <__gethex+0x240>
 800e832:	4621      	mov	r1, r4
 800e834:	9801      	ldr	r0, [sp, #4]
 800e836:	f7fd ff57 	bl	800c6e8 <_Bfree>
 800e83a:	2300      	movs	r3, #0
 800e83c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e83e:	25a3      	movs	r5, #163	@ 0xa3
 800e840:	6013      	str	r3, [r2, #0]
 800e842:	e793      	b.n	800e76c <__gethex+0xf4>
 800e844:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e848:	2a2e      	cmp	r2, #46	@ 0x2e
 800e84a:	d012      	beq.n	800e872 <__gethex+0x1fa>
 800e84c:	2b20      	cmp	r3, #32
 800e84e:	d104      	bne.n	800e85a <__gethex+0x1e2>
 800e850:	f845 bb04 	str.w	fp, [r5], #4
 800e854:	f04f 0b00 	mov.w	fp, #0
 800e858:	465b      	mov	r3, fp
 800e85a:	7830      	ldrb	r0, [r6, #0]
 800e85c:	9303      	str	r3, [sp, #12]
 800e85e:	f7ff fef6 	bl	800e64e <__hexdig_fun>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	f000 000f 	and.w	r0, r0, #15
 800e868:	4098      	lsls	r0, r3
 800e86a:	3304      	adds	r3, #4
 800e86c:	ea4b 0b00 	orr.w	fp, fp, r0
 800e870:	e7ae      	b.n	800e7d0 <__gethex+0x158>
 800e872:	45b1      	cmp	r9, r6
 800e874:	d8ea      	bhi.n	800e84c <__gethex+0x1d4>
 800e876:	2201      	movs	r2, #1
 800e878:	492a      	ldr	r1, [pc, #168]	@ (800e924 <__gethex+0x2ac>)
 800e87a:	4630      	mov	r0, r6
 800e87c:	9303      	str	r3, [sp, #12]
 800e87e:	f7ff fe29 	bl	800e4d4 <strncmp>
 800e882:	9b03      	ldr	r3, [sp, #12]
 800e884:	2800      	cmp	r0, #0
 800e886:	d1e1      	bne.n	800e84c <__gethex+0x1d4>
 800e888:	e7a2      	b.n	800e7d0 <__gethex+0x158>
 800e88a:	1ea9      	subs	r1, r5, #2
 800e88c:	4620      	mov	r0, r4
 800e88e:	f7fe fb86 	bl	800cf9e <__any_on>
 800e892:	2800      	cmp	r0, #0
 800e894:	d0c2      	beq.n	800e81c <__gethex+0x1a4>
 800e896:	f04f 0903 	mov.w	r9, #3
 800e89a:	e7c1      	b.n	800e820 <__gethex+0x1a8>
 800e89c:	da09      	bge.n	800e8b2 <__gethex+0x23a>
 800e89e:	1b75      	subs	r5, r6, r5
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	9801      	ldr	r0, [sp, #4]
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	1b7f      	subs	r7, r7, r5
 800e8a8:	f7fe f938 	bl	800cb1c <__lshift>
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	f100 0a14 	add.w	sl, r0, #20
 800e8b2:	f04f 0900 	mov.w	r9, #0
 800e8b6:	e7b8      	b.n	800e82a <__gethex+0x1b2>
 800e8b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e8bc:	42bd      	cmp	r5, r7
 800e8be:	dd6f      	ble.n	800e9a0 <__gethex+0x328>
 800e8c0:	1bed      	subs	r5, r5, r7
 800e8c2:	42ae      	cmp	r6, r5
 800e8c4:	dc34      	bgt.n	800e930 <__gethex+0x2b8>
 800e8c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d022      	beq.n	800e914 <__gethex+0x29c>
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d024      	beq.n	800e91c <__gethex+0x2a4>
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d115      	bne.n	800e902 <__gethex+0x28a>
 800e8d6:	42ae      	cmp	r6, r5
 800e8d8:	d113      	bne.n	800e902 <__gethex+0x28a>
 800e8da:	2e01      	cmp	r6, #1
 800e8dc:	d10b      	bne.n	800e8f6 <__gethex+0x27e>
 800e8de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8e2:	2562      	movs	r5, #98	@ 0x62
 800e8e4:	9a02      	ldr	r2, [sp, #8]
 800e8e6:	6013      	str	r3, [r2, #0]
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	6123      	str	r3, [r4, #16]
 800e8ec:	f8ca 3000 	str.w	r3, [sl]
 800e8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8f2:	601c      	str	r4, [r3, #0]
 800e8f4:	e73a      	b.n	800e76c <__gethex+0xf4>
 800e8f6:	1e71      	subs	r1, r6, #1
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f7fe fb50 	bl	800cf9e <__any_on>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	d1ed      	bne.n	800e8de <__gethex+0x266>
 800e902:	4621      	mov	r1, r4
 800e904:	9801      	ldr	r0, [sp, #4]
 800e906:	f7fd feef 	bl	800c6e8 <_Bfree>
 800e90a:	2300      	movs	r3, #0
 800e90c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e90e:	2550      	movs	r5, #80	@ 0x50
 800e910:	6013      	str	r3, [r2, #0]
 800e912:	e72b      	b.n	800e76c <__gethex+0xf4>
 800e914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1f3      	bne.n	800e902 <__gethex+0x28a>
 800e91a:	e7e0      	b.n	800e8de <__gethex+0x266>
 800e91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1dd      	bne.n	800e8de <__gethex+0x266>
 800e922:	e7ee      	b.n	800e902 <__gethex+0x28a>
 800e924:	0800f2a0 	.word	0x0800f2a0
 800e928:	0800f135 	.word	0x0800f135
 800e92c:	0800f44e 	.word	0x0800f44e
 800e930:	1e6f      	subs	r7, r5, #1
 800e932:	f1b9 0f00 	cmp.w	r9, #0
 800e936:	d130      	bne.n	800e99a <__gethex+0x322>
 800e938:	b127      	cbz	r7, 800e944 <__gethex+0x2cc>
 800e93a:	4639      	mov	r1, r7
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7fe fb2e 	bl	800cf9e <__any_on>
 800e942:	4681      	mov	r9, r0
 800e944:	117a      	asrs	r2, r7, #5
 800e946:	2301      	movs	r3, #1
 800e948:	f007 071f 	and.w	r7, r7, #31
 800e94c:	4629      	mov	r1, r5
 800e94e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e952:	4620      	mov	r0, r4
 800e954:	40bb      	lsls	r3, r7
 800e956:	1b76      	subs	r6, r6, r5
 800e958:	2502      	movs	r5, #2
 800e95a:	4213      	tst	r3, r2
 800e95c:	bf18      	it	ne
 800e95e:	f049 0902 	orrne.w	r9, r9, #2
 800e962:	f7ff fe23 	bl	800e5ac <rshift>
 800e966:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e96a:	f1b9 0f00 	cmp.w	r9, #0
 800e96e:	d047      	beq.n	800ea00 <__gethex+0x388>
 800e970:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e974:	2b02      	cmp	r3, #2
 800e976:	d015      	beq.n	800e9a4 <__gethex+0x32c>
 800e978:	2b03      	cmp	r3, #3
 800e97a:	d017      	beq.n	800e9ac <__gethex+0x334>
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d109      	bne.n	800e994 <__gethex+0x31c>
 800e980:	f019 0f02 	tst.w	r9, #2
 800e984:	d006      	beq.n	800e994 <__gethex+0x31c>
 800e986:	f8da 3000 	ldr.w	r3, [sl]
 800e98a:	ea49 0903 	orr.w	r9, r9, r3
 800e98e:	f019 0f01 	tst.w	r9, #1
 800e992:	d10e      	bne.n	800e9b2 <__gethex+0x33a>
 800e994:	f045 0510 	orr.w	r5, r5, #16
 800e998:	e032      	b.n	800ea00 <__gethex+0x388>
 800e99a:	f04f 0901 	mov.w	r9, #1
 800e99e:	e7d1      	b.n	800e944 <__gethex+0x2cc>
 800e9a0:	2501      	movs	r5, #1
 800e9a2:	e7e2      	b.n	800e96a <__gethex+0x2f2>
 800e9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9a6:	f1c3 0301 	rsb	r3, r3, #1
 800e9aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d0f0      	beq.n	800e994 <__gethex+0x31c>
 800e9b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e9b6:	f104 0314 	add.w	r3, r4, #20
 800e9ba:	f04f 0c00 	mov.w	ip, #0
 800e9be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e9c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9d0:	d01b      	beq.n	800ea0a <__gethex+0x392>
 800e9d2:	3201      	adds	r2, #1
 800e9d4:	6002      	str	r2, [r0, #0]
 800e9d6:	2d02      	cmp	r5, #2
 800e9d8:	f104 0314 	add.w	r3, r4, #20
 800e9dc:	d13c      	bne.n	800ea58 <__gethex+0x3e0>
 800e9de:	f8d8 2000 	ldr.w	r2, [r8]
 800e9e2:	3a01      	subs	r2, #1
 800e9e4:	42b2      	cmp	r2, r6
 800e9e6:	d109      	bne.n	800e9fc <__gethex+0x384>
 800e9e8:	1171      	asrs	r1, r6, #5
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f006 061f 	and.w	r6, r6, #31
 800e9f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9f4:	fa02 f606 	lsl.w	r6, r2, r6
 800e9f8:	421e      	tst	r6, r3
 800e9fa:	d13a      	bne.n	800ea72 <__gethex+0x3fa>
 800e9fc:	f045 0520 	orr.w	r5, r5, #32
 800ea00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea02:	601c      	str	r4, [r3, #0]
 800ea04:	9b02      	ldr	r3, [sp, #8]
 800ea06:	601f      	str	r7, [r3, #0]
 800ea08:	e6b0      	b.n	800e76c <__gethex+0xf4>
 800ea0a:	4299      	cmp	r1, r3
 800ea0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea10:	d8d9      	bhi.n	800e9c6 <__gethex+0x34e>
 800ea12:	68a3      	ldr	r3, [r4, #8]
 800ea14:	459b      	cmp	fp, r3
 800ea16:	db17      	blt.n	800ea48 <__gethex+0x3d0>
 800ea18:	6861      	ldr	r1, [r4, #4]
 800ea1a:	9801      	ldr	r0, [sp, #4]
 800ea1c:	3101      	adds	r1, #1
 800ea1e:	f7fd fe23 	bl	800c668 <_Balloc>
 800ea22:	4681      	mov	r9, r0
 800ea24:	b918      	cbnz	r0, 800ea2e <__gethex+0x3b6>
 800ea26:	4b1a      	ldr	r3, [pc, #104]	@ (800ea90 <__gethex+0x418>)
 800ea28:	4602      	mov	r2, r0
 800ea2a:	2184      	movs	r1, #132	@ 0x84
 800ea2c:	e6c5      	b.n	800e7ba <__gethex+0x142>
 800ea2e:	6922      	ldr	r2, [r4, #16]
 800ea30:	f104 010c 	add.w	r1, r4, #12
 800ea34:	300c      	adds	r0, #12
 800ea36:	3202      	adds	r2, #2
 800ea38:	0092      	lsls	r2, r2, #2
 800ea3a:	f7ff fd6d 	bl	800e518 <memcpy>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	464c      	mov	r4, r9
 800ea42:	9801      	ldr	r0, [sp, #4]
 800ea44:	f7fd fe50 	bl	800c6e8 <_Bfree>
 800ea48:	6923      	ldr	r3, [r4, #16]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea50:	6122      	str	r2, [r4, #16]
 800ea52:	2201      	movs	r2, #1
 800ea54:	615a      	str	r2, [r3, #20]
 800ea56:	e7be      	b.n	800e9d6 <__gethex+0x35e>
 800ea58:	6922      	ldr	r2, [r4, #16]
 800ea5a:	455a      	cmp	r2, fp
 800ea5c:	dd0b      	ble.n	800ea76 <__gethex+0x3fe>
 800ea5e:	2101      	movs	r1, #1
 800ea60:	4620      	mov	r0, r4
 800ea62:	f7ff fda3 	bl	800e5ac <rshift>
 800ea66:	3701      	adds	r7, #1
 800ea68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea6c:	42bb      	cmp	r3, r7
 800ea6e:	f6ff aee0 	blt.w	800e832 <__gethex+0x1ba>
 800ea72:	2501      	movs	r5, #1
 800ea74:	e7c2      	b.n	800e9fc <__gethex+0x384>
 800ea76:	f016 061f 	ands.w	r6, r6, #31
 800ea7a:	d0fa      	beq.n	800ea72 <__gethex+0x3fa>
 800ea7c:	4453      	add	r3, sl
 800ea7e:	f1c6 0620 	rsb	r6, r6, #32
 800ea82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea86:	f7fd fee3 	bl	800c850 <__hi0bits>
 800ea8a:	42b0      	cmp	r0, r6
 800ea8c:	dbe7      	blt.n	800ea5e <__gethex+0x3e6>
 800ea8e:	e7f0      	b.n	800ea72 <__gethex+0x3fa>
 800ea90:	0800f135 	.word	0x0800f135

0800ea94 <L_shift>:
 800ea94:	f1c2 0208 	rsb	r2, r2, #8
 800ea98:	0092      	lsls	r2, r2, #2
 800ea9a:	b570      	push	{r4, r5, r6, lr}
 800ea9c:	f1c2 0620 	rsb	r6, r2, #32
 800eaa0:	6843      	ldr	r3, [r0, #4]
 800eaa2:	6804      	ldr	r4, [r0, #0]
 800eaa4:	fa03 f506 	lsl.w	r5, r3, r6
 800eaa8:	40d3      	lsrs	r3, r2
 800eaaa:	432c      	orrs	r4, r5
 800eaac:	6004      	str	r4, [r0, #0]
 800eaae:	f840 3f04 	str.w	r3, [r0, #4]!
 800eab2:	4288      	cmp	r0, r1
 800eab4:	d3f4      	bcc.n	800eaa0 <L_shift+0xc>
 800eab6:	bd70      	pop	{r4, r5, r6, pc}

0800eab8 <__match>:
 800eab8:	6803      	ldr	r3, [r0, #0]
 800eaba:	3301      	adds	r3, #1
 800eabc:	b530      	push	{r4, r5, lr}
 800eabe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eac2:	b914      	cbnz	r4, 800eaca <__match+0x12>
 800eac4:	6003      	str	r3, [r0, #0]
 800eac6:	2001      	movs	r0, #1
 800eac8:	bd30      	pop	{r4, r5, pc}
 800eaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eace:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ead2:	2d19      	cmp	r5, #25
 800ead4:	bf98      	it	ls
 800ead6:	3220      	addls	r2, #32
 800ead8:	42a2      	cmp	r2, r4
 800eada:	d0f0      	beq.n	800eabe <__match+0x6>
 800eadc:	2000      	movs	r0, #0
 800eade:	e7f3      	b.n	800eac8 <__match+0x10>

0800eae0 <__hexnan>:
 800eae0:	680b      	ldr	r3, [r1, #0]
 800eae2:	6801      	ldr	r1, [r0, #0]
 800eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae8:	115e      	asrs	r6, r3, #5
 800eaea:	f013 031f 	ands.w	r3, r3, #31
 800eaee:	f04f 0500 	mov.w	r5, #0
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eaf8:	4682      	mov	sl, r0
 800eafa:	4690      	mov	r8, r2
 800eafc:	46ab      	mov	fp, r5
 800eafe:	bf18      	it	ne
 800eb00:	3604      	addne	r6, #4
 800eb02:	9301      	str	r3, [sp, #4]
 800eb04:	9502      	str	r5, [sp, #8]
 800eb06:	1f37      	subs	r7, r6, #4
 800eb08:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb0c:	46b9      	mov	r9, r7
 800eb0e:	463c      	mov	r4, r7
 800eb10:	1c4b      	adds	r3, r1, #1
 800eb12:	784a      	ldrb	r2, [r1, #1]
 800eb14:	9303      	str	r3, [sp, #12]
 800eb16:	b342      	cbz	r2, 800eb6a <__hexnan+0x8a>
 800eb18:	4610      	mov	r0, r2
 800eb1a:	9105      	str	r1, [sp, #20]
 800eb1c:	9204      	str	r2, [sp, #16]
 800eb1e:	f7ff fd96 	bl	800e64e <__hexdig_fun>
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d151      	bne.n	800ebca <__hexnan+0xea>
 800eb26:	9a04      	ldr	r2, [sp, #16]
 800eb28:	9905      	ldr	r1, [sp, #20]
 800eb2a:	2a20      	cmp	r2, #32
 800eb2c:	d818      	bhi.n	800eb60 <__hexnan+0x80>
 800eb2e:	9b02      	ldr	r3, [sp, #8]
 800eb30:	459b      	cmp	fp, r3
 800eb32:	dd13      	ble.n	800eb5c <__hexnan+0x7c>
 800eb34:	454c      	cmp	r4, r9
 800eb36:	d206      	bcs.n	800eb46 <__hexnan+0x66>
 800eb38:	2d07      	cmp	r5, #7
 800eb3a:	dc04      	bgt.n	800eb46 <__hexnan+0x66>
 800eb3c:	462a      	mov	r2, r5
 800eb3e:	4649      	mov	r1, r9
 800eb40:	4620      	mov	r0, r4
 800eb42:	f7ff ffa7 	bl	800ea94 <L_shift>
 800eb46:	4544      	cmp	r4, r8
 800eb48:	d951      	bls.n	800ebee <__hexnan+0x10e>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	f1a4 0904 	sub.w	r9, r4, #4
 800eb50:	f8cd b008 	str.w	fp, [sp, #8]
 800eb54:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb58:	461d      	mov	r5, r3
 800eb5a:	464c      	mov	r4, r9
 800eb5c:	9903      	ldr	r1, [sp, #12]
 800eb5e:	e7d7      	b.n	800eb10 <__hexnan+0x30>
 800eb60:	2a29      	cmp	r2, #41	@ 0x29
 800eb62:	d156      	bne.n	800ec12 <__hexnan+0x132>
 800eb64:	3102      	adds	r1, #2
 800eb66:	f8ca 1000 	str.w	r1, [sl]
 800eb6a:	f1bb 0f00 	cmp.w	fp, #0
 800eb6e:	d050      	beq.n	800ec12 <__hexnan+0x132>
 800eb70:	454c      	cmp	r4, r9
 800eb72:	d206      	bcs.n	800eb82 <__hexnan+0xa2>
 800eb74:	2d07      	cmp	r5, #7
 800eb76:	dc04      	bgt.n	800eb82 <__hexnan+0xa2>
 800eb78:	462a      	mov	r2, r5
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f7ff ff89 	bl	800ea94 <L_shift>
 800eb82:	4544      	cmp	r4, r8
 800eb84:	d935      	bls.n	800ebf2 <__hexnan+0x112>
 800eb86:	f1a8 0204 	sub.w	r2, r8, #4
 800eb8a:	4623      	mov	r3, r4
 800eb8c:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb90:	429f      	cmp	r7, r3
 800eb92:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb96:	d2f9      	bcs.n	800eb8c <__hexnan+0xac>
 800eb98:	1b3b      	subs	r3, r7, r4
 800eb9a:	3e03      	subs	r6, #3
 800eb9c:	3401      	adds	r4, #1
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f023 0303 	bic.w	r3, r3, #3
 800eba4:	3304      	adds	r3, #4
 800eba6:	42b4      	cmp	r4, r6
 800eba8:	bf88      	it	hi
 800ebaa:	2304      	movhi	r3, #4
 800ebac:	4443      	add	r3, r8
 800ebae:	f843 2b04 	str.w	r2, [r3], #4
 800ebb2:	429f      	cmp	r7, r3
 800ebb4:	d2fb      	bcs.n	800ebae <__hexnan+0xce>
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	b91b      	cbnz	r3, 800ebc2 <__hexnan+0xe2>
 800ebba:	4547      	cmp	r7, r8
 800ebbc:	d127      	bne.n	800ec0e <__hexnan+0x12e>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	603b      	str	r3, [r7, #0]
 800ebc2:	2005      	movs	r0, #5
 800ebc4:	b007      	add	sp, #28
 800ebc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebca:	3501      	adds	r5, #1
 800ebcc:	f10b 0b01 	add.w	fp, fp, #1
 800ebd0:	2d08      	cmp	r5, #8
 800ebd2:	dd05      	ble.n	800ebe0 <__hexnan+0x100>
 800ebd4:	4544      	cmp	r4, r8
 800ebd6:	d9c1      	bls.n	800eb5c <__hexnan+0x7c>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	3c04      	subs	r4, #4
 800ebdc:	2501      	movs	r5, #1
 800ebde:	6023      	str	r3, [r4, #0]
 800ebe0:	6822      	ldr	r2, [r4, #0]
 800ebe2:	f000 000f 	and.w	r0, r0, #15
 800ebe6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ebea:	6020      	str	r0, [r4, #0]
 800ebec:	e7b6      	b.n	800eb5c <__hexnan+0x7c>
 800ebee:	2508      	movs	r5, #8
 800ebf0:	e7b4      	b.n	800eb5c <__hexnan+0x7c>
 800ebf2:	9b01      	ldr	r3, [sp, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0de      	beq.n	800ebb6 <__hexnan+0xd6>
 800ebf8:	f1c3 0320 	rsb	r3, r3, #32
 800ebfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ec00:	40da      	lsrs	r2, r3
 800ec02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ec06:	4013      	ands	r3, r2
 800ec08:	f846 3c04 	str.w	r3, [r6, #-4]
 800ec0c:	e7d3      	b.n	800ebb6 <__hexnan+0xd6>
 800ec0e:	3f04      	subs	r7, #4
 800ec10:	e7d1      	b.n	800ebb6 <__hexnan+0xd6>
 800ec12:	2004      	movs	r0, #4
 800ec14:	e7d6      	b.n	800ebc4 <__hexnan+0xe4>

0800ec16 <__ascii_mbtowc>:
 800ec16:	b082      	sub	sp, #8
 800ec18:	b901      	cbnz	r1, 800ec1c <__ascii_mbtowc+0x6>
 800ec1a:	a901      	add	r1, sp, #4
 800ec1c:	b142      	cbz	r2, 800ec30 <__ascii_mbtowc+0x1a>
 800ec1e:	b14b      	cbz	r3, 800ec34 <__ascii_mbtowc+0x1e>
 800ec20:	7813      	ldrb	r3, [r2, #0]
 800ec22:	600b      	str	r3, [r1, #0]
 800ec24:	7812      	ldrb	r2, [r2, #0]
 800ec26:	1e10      	subs	r0, r2, #0
 800ec28:	bf18      	it	ne
 800ec2a:	2001      	movne	r0, #1
 800ec2c:	b002      	add	sp, #8
 800ec2e:	4770      	bx	lr
 800ec30:	4610      	mov	r0, r2
 800ec32:	e7fb      	b.n	800ec2c <__ascii_mbtowc+0x16>
 800ec34:	f06f 0001 	mvn.w	r0, #1
 800ec38:	e7f8      	b.n	800ec2c <__ascii_mbtowc+0x16>

0800ec3a <_realloc_r>:
 800ec3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3e:	4680      	mov	r8, r0
 800ec40:	4615      	mov	r5, r2
 800ec42:	460c      	mov	r4, r1
 800ec44:	b921      	cbnz	r1, 800ec50 <_realloc_r+0x16>
 800ec46:	4611      	mov	r1, r2
 800ec48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec4c:	f7fd bc80 	b.w	800c550 <_malloc_r>
 800ec50:	b92a      	cbnz	r2, 800ec5e <_realloc_r+0x24>
 800ec52:	f7fd fc09 	bl	800c468 <_free_r>
 800ec56:	2400      	movs	r4, #0
 800ec58:	4620      	mov	r0, r4
 800ec5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5e:	f000 f8c4 	bl	800edea <_malloc_usable_size_r>
 800ec62:	4285      	cmp	r5, r0
 800ec64:	4606      	mov	r6, r0
 800ec66:	d802      	bhi.n	800ec6e <_realloc_r+0x34>
 800ec68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec6c:	d8f4      	bhi.n	800ec58 <_realloc_r+0x1e>
 800ec6e:	4629      	mov	r1, r5
 800ec70:	4640      	mov	r0, r8
 800ec72:	f7fd fc6d 	bl	800c550 <_malloc_r>
 800ec76:	4607      	mov	r7, r0
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d0ec      	beq.n	800ec56 <_realloc_r+0x1c>
 800ec7c:	42b5      	cmp	r5, r6
 800ec7e:	462a      	mov	r2, r5
 800ec80:	4621      	mov	r1, r4
 800ec82:	bf28      	it	cs
 800ec84:	4632      	movcs	r2, r6
 800ec86:	f7ff fc47 	bl	800e518 <memcpy>
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	463c      	mov	r4, r7
 800ec90:	f7fd fbea 	bl	800c468 <_free_r>
 800ec94:	e7e0      	b.n	800ec58 <_realloc_r+0x1e>

0800ec96 <__ascii_wctomb>:
 800ec96:	4603      	mov	r3, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	b141      	cbz	r1, 800ecae <__ascii_wctomb+0x18>
 800ec9c:	2aff      	cmp	r2, #255	@ 0xff
 800ec9e:	d904      	bls.n	800ecaa <__ascii_wctomb+0x14>
 800eca0:	228a      	movs	r2, #138	@ 0x8a
 800eca2:	f04f 30ff 	mov.w	r0, #4294967295
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	4770      	bx	lr
 800ecaa:	2001      	movs	r0, #1
 800ecac:	700a      	strb	r2, [r1, #0]
 800ecae:	4770      	bx	lr

0800ecb0 <fiprintf>:
 800ecb0:	b40e      	push	{r1, r2, r3}
 800ecb2:	b503      	push	{r0, r1, lr}
 800ecb4:	ab03      	add	r3, sp, #12
 800ecb6:	4601      	mov	r1, r0
 800ecb8:	4805      	ldr	r0, [pc, #20]	@ (800ecd0 <fiprintf+0x20>)
 800ecba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecbe:	6800      	ldr	r0, [r0, #0]
 800ecc0:	9301      	str	r3, [sp, #4]
 800ecc2:	f7ff f995 	bl	800dff0 <_vfiprintf_r>
 800ecc6:	b002      	add	sp, #8
 800ecc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eccc:	b003      	add	sp, #12
 800ecce:	4770      	bx	lr
 800ecd0:	20000018 	.word	0x20000018

0800ecd4 <__swhatbuf_r>:
 800ecd4:	b570      	push	{r4, r5, r6, lr}
 800ecd6:	460c      	mov	r4, r1
 800ecd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecdc:	b096      	sub	sp, #88	@ 0x58
 800ecde:	4615      	mov	r5, r2
 800ece0:	2900      	cmp	r1, #0
 800ece2:	461e      	mov	r6, r3
 800ece4:	da0c      	bge.n	800ed00 <__swhatbuf_r+0x2c>
 800ece6:	89a3      	ldrh	r3, [r4, #12]
 800ece8:	2100      	movs	r1, #0
 800ecea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ecee:	bf14      	ite	ne
 800ecf0:	2340      	movne	r3, #64	@ 0x40
 800ecf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	6031      	str	r1, [r6, #0]
 800ecfa:	602b      	str	r3, [r5, #0]
 800ecfc:	b016      	add	sp, #88	@ 0x58
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}
 800ed00:	466a      	mov	r2, sp
 800ed02:	f000 f849 	bl	800ed98 <_fstat_r>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	dbed      	blt.n	800ece6 <__swhatbuf_r+0x12>
 800ed0a:	9901      	ldr	r1, [sp, #4]
 800ed0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed14:	4259      	negs	r1, r3
 800ed16:	4159      	adcs	r1, r3
 800ed18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed1c:	e7eb      	b.n	800ecf6 <__swhatbuf_r+0x22>

0800ed1e <__smakebuf_r>:
 800ed1e:	898b      	ldrh	r3, [r1, #12]
 800ed20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed22:	079d      	lsls	r5, r3, #30
 800ed24:	4606      	mov	r6, r0
 800ed26:	460c      	mov	r4, r1
 800ed28:	d507      	bpl.n	800ed3a <__smakebuf_r+0x1c>
 800ed2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	6123      	str	r3, [r4, #16]
 800ed32:	2301      	movs	r3, #1
 800ed34:	6163      	str	r3, [r4, #20]
 800ed36:	b003      	add	sp, #12
 800ed38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed3a:	ab01      	add	r3, sp, #4
 800ed3c:	466a      	mov	r2, sp
 800ed3e:	f7ff ffc9 	bl	800ecd4 <__swhatbuf_r>
 800ed42:	9f00      	ldr	r7, [sp, #0]
 800ed44:	4605      	mov	r5, r0
 800ed46:	4630      	mov	r0, r6
 800ed48:	4639      	mov	r1, r7
 800ed4a:	f7fd fc01 	bl	800c550 <_malloc_r>
 800ed4e:	b948      	cbnz	r0, 800ed64 <__smakebuf_r+0x46>
 800ed50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed54:	059a      	lsls	r2, r3, #22
 800ed56:	d4ee      	bmi.n	800ed36 <__smakebuf_r+0x18>
 800ed58:	f023 0303 	bic.w	r3, r3, #3
 800ed5c:	f043 0302 	orr.w	r3, r3, #2
 800ed60:	81a3      	strh	r3, [r4, #12]
 800ed62:	e7e2      	b.n	800ed2a <__smakebuf_r+0xc>
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	6020      	str	r0, [r4, #0]
 800ed68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed6c:	81a3      	strh	r3, [r4, #12]
 800ed6e:	9b01      	ldr	r3, [sp, #4]
 800ed70:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ed74:	b15b      	cbz	r3, 800ed8e <__smakebuf_r+0x70>
 800ed76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f000 f81e 	bl	800edbc <_isatty_r>
 800ed80:	b128      	cbz	r0, 800ed8e <__smakebuf_r+0x70>
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	f023 0303 	bic.w	r3, r3, #3
 800ed88:	f043 0301 	orr.w	r3, r3, #1
 800ed8c:	81a3      	strh	r3, [r4, #12]
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	431d      	orrs	r5, r3
 800ed92:	81a5      	strh	r5, [r4, #12]
 800ed94:	e7cf      	b.n	800ed36 <__smakebuf_r+0x18>
	...

0800ed98 <_fstat_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	4d06      	ldr	r5, [pc, #24]	@ (800edb8 <_fstat_r+0x20>)
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4608      	mov	r0, r1
 800eda2:	4611      	mov	r1, r2
 800eda4:	602b      	str	r3, [r5, #0]
 800eda6:	f7f3 fde5 	bl	8002974 <_fstat>
 800edaa:	1c43      	adds	r3, r0, #1
 800edac:	d102      	bne.n	800edb4 <_fstat_r+0x1c>
 800edae:	682b      	ldr	r3, [r5, #0]
 800edb0:	b103      	cbz	r3, 800edb4 <_fstat_r+0x1c>
 800edb2:	6023      	str	r3, [r4, #0]
 800edb4:	bd38      	pop	{r3, r4, r5, pc}
 800edb6:	bf00      	nop
 800edb8:	20000a1c 	.word	0x20000a1c

0800edbc <_isatty_r>:
 800edbc:	b538      	push	{r3, r4, r5, lr}
 800edbe:	2300      	movs	r3, #0
 800edc0:	4d05      	ldr	r5, [pc, #20]	@ (800edd8 <_isatty_r+0x1c>)
 800edc2:	4604      	mov	r4, r0
 800edc4:	4608      	mov	r0, r1
 800edc6:	602b      	str	r3, [r5, #0]
 800edc8:	f7f3 fde4 	bl	8002994 <_isatty>
 800edcc:	1c43      	adds	r3, r0, #1
 800edce:	d102      	bne.n	800edd6 <_isatty_r+0x1a>
 800edd0:	682b      	ldr	r3, [r5, #0]
 800edd2:	b103      	cbz	r3, 800edd6 <_isatty_r+0x1a>
 800edd4:	6023      	str	r3, [r4, #0]
 800edd6:	bd38      	pop	{r3, r4, r5, pc}
 800edd8:	20000a1c 	.word	0x20000a1c

0800eddc <abort>:
 800eddc:	2006      	movs	r0, #6
 800edde:	b508      	push	{r3, lr}
 800ede0:	f000 f834 	bl	800ee4c <raise>
 800ede4:	2001      	movs	r0, #1
 800ede6:	f7f3 fd91 	bl	800290c <_exit>

0800edea <_malloc_usable_size_r>:
 800edea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edee:	1f18      	subs	r0, r3, #4
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	bfbc      	itt	lt
 800edf4:	580b      	ldrlt	r3, [r1, r0]
 800edf6:	18c0      	addlt	r0, r0, r3
 800edf8:	4770      	bx	lr

0800edfa <_raise_r>:
 800edfa:	291f      	cmp	r1, #31
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4605      	mov	r5, r0
 800ee00:	460c      	mov	r4, r1
 800ee02:	d904      	bls.n	800ee0e <_raise_r+0x14>
 800ee04:	2316      	movs	r3, #22
 800ee06:	6003      	str	r3, [r0, #0]
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	bd38      	pop	{r3, r4, r5, pc}
 800ee0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee10:	b112      	cbz	r2, 800ee18 <_raise_r+0x1e>
 800ee12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee16:	b94b      	cbnz	r3, 800ee2c <_raise_r+0x32>
 800ee18:	4628      	mov	r0, r5
 800ee1a:	f000 f831 	bl	800ee80 <_getpid_r>
 800ee1e:	4622      	mov	r2, r4
 800ee20:	4601      	mov	r1, r0
 800ee22:	4628      	mov	r0, r5
 800ee24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee28:	f000 b818 	b.w	800ee5c <_kill_r>
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d00a      	beq.n	800ee46 <_raise_r+0x4c>
 800ee30:	1c59      	adds	r1, r3, #1
 800ee32:	d103      	bne.n	800ee3c <_raise_r+0x42>
 800ee34:	2316      	movs	r3, #22
 800ee36:	6003      	str	r3, [r0, #0]
 800ee38:	2001      	movs	r0, #1
 800ee3a:	e7e7      	b.n	800ee0c <_raise_r+0x12>
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee44:	4798      	blx	r3
 800ee46:	2000      	movs	r0, #0
 800ee48:	e7e0      	b.n	800ee0c <_raise_r+0x12>
	...

0800ee4c <raise>:
 800ee4c:	4b02      	ldr	r3, [pc, #8]	@ (800ee58 <raise+0xc>)
 800ee4e:	4601      	mov	r1, r0
 800ee50:	6818      	ldr	r0, [r3, #0]
 800ee52:	f7ff bfd2 	b.w	800edfa <_raise_r>
 800ee56:	bf00      	nop
 800ee58:	20000018 	.word	0x20000018

0800ee5c <_kill_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	2300      	movs	r3, #0
 800ee60:	4d06      	ldr	r5, [pc, #24]	@ (800ee7c <_kill_r+0x20>)
 800ee62:	4604      	mov	r4, r0
 800ee64:	4608      	mov	r0, r1
 800ee66:	4611      	mov	r1, r2
 800ee68:	602b      	str	r3, [r5, #0]
 800ee6a:	f7f3 fd3f 	bl	80028ec <_kill>
 800ee6e:	1c43      	adds	r3, r0, #1
 800ee70:	d102      	bne.n	800ee78 <_kill_r+0x1c>
 800ee72:	682b      	ldr	r3, [r5, #0]
 800ee74:	b103      	cbz	r3, 800ee78 <_kill_r+0x1c>
 800ee76:	6023      	str	r3, [r4, #0]
 800ee78:	bd38      	pop	{r3, r4, r5, pc}
 800ee7a:	bf00      	nop
 800ee7c:	20000a1c 	.word	0x20000a1c

0800ee80 <_getpid_r>:
 800ee80:	f7f3 bd2c 	b.w	80028dc <_getpid>

0800ee84 <_init>:
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	bf00      	nop
 800ee88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee8a:	bc08      	pop	{r3}
 800ee8c:	469e      	mov	lr, r3
 800ee8e:	4770      	bx	lr

0800ee90 <_fini>:
 800ee90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee92:	bf00      	nop
 800ee94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee96:	bc08      	pop	{r3}
 800ee98:	469e      	mov	lr, r3
 800ee9a:	4770      	bx	lr
